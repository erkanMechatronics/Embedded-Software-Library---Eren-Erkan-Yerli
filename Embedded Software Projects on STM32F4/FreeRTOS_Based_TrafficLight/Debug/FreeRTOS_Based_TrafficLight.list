
FreeRTOS_Based_TrafficLight.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009e30  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000188  08009fc0  08009fc0  0000afc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a148  0800a148  0000c150  2**0
                  CONTENTS
  4 .ARM          00000008  0800a148  0800a148  0000b148  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a150  0800a150  0000c150  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a150  0800a150  0000b150  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a154  0800a154  0000b154  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000150  20000000  0800a158  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c150  2**0
                  CONTENTS
 10 .bss          00005d9c  20000150  20000150  0000c150  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20005eec  20005eec  0000c150  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c150  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b07f  00000000  00000000  0000c180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000044c3  00000000  00000000  000271ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016a8  00000000  00000000  0002b6c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001142  00000000  00000000  0002cd70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002571b  00000000  00000000  0002deb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001bd45  00000000  00000000  000535cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d5e54  00000000  00000000  0006f312  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00145166  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000060a4  00000000  00000000  001451ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000077  00000000  00000000  0014b250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000150 	.word	0x20000150
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009fa8 	.word	0x08009fa8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000154 	.word	0x20000154
 80001cc:	08009fa8 	.word	0x08009fa8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b96a 	b.w	80004cc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	460c      	mov	r4, r1
 8000218:	2b00      	cmp	r3, #0
 800021a:	d14e      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021c:	4694      	mov	ip, r2
 800021e:	458c      	cmp	ip, r1
 8000220:	4686      	mov	lr, r0
 8000222:	fab2 f282 	clz	r2, r2
 8000226:	d962      	bls.n	80002ee <__udivmoddi4+0xde>
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0320 	rsb	r3, r2, #32
 800022e:	4091      	lsls	r1, r2
 8000230:	fa20 f303 	lsr.w	r3, r0, r3
 8000234:	fa0c fc02 	lsl.w	ip, ip, r2
 8000238:	4319      	orrs	r1, r3
 800023a:	fa00 fe02 	lsl.w	lr, r0, r2
 800023e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000242:	fa1f f68c 	uxth.w	r6, ip
 8000246:	fbb1 f4f7 	udiv	r4, r1, r7
 800024a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800024e:	fb07 1114 	mls	r1, r7, r4, r1
 8000252:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000256:	fb04 f106 	mul.w	r1, r4, r6
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f104 30ff 	add.w	r0, r4, #4294967295
 8000266:	f080 8112 	bcs.w	800048e <__udivmoddi4+0x27e>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 810f 	bls.w	800048e <__udivmoddi4+0x27e>
 8000270:	3c02      	subs	r4, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a59      	subs	r1, r3, r1
 8000276:	fa1f f38e 	uxth.w	r3, lr
 800027a:	fbb1 f0f7 	udiv	r0, r1, r7
 800027e:	fb07 1110 	mls	r1, r7, r0, r1
 8000282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000286:	fb00 f606 	mul.w	r6, r0, r6
 800028a:	429e      	cmp	r6, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x94>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f100 31ff 	add.w	r1, r0, #4294967295
 8000296:	f080 80fc 	bcs.w	8000492 <__udivmoddi4+0x282>
 800029a:	429e      	cmp	r6, r3
 800029c:	f240 80f9 	bls.w	8000492 <__udivmoddi4+0x282>
 80002a0:	4463      	add	r3, ip
 80002a2:	3802      	subs	r0, #2
 80002a4:	1b9b      	subs	r3, r3, r6
 80002a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002aa:	2100      	movs	r1, #0
 80002ac:	b11d      	cbz	r5, 80002b6 <__udivmoddi4+0xa6>
 80002ae:	40d3      	lsrs	r3, r2
 80002b0:	2200      	movs	r2, #0
 80002b2:	e9c5 3200 	strd	r3, r2, [r5]
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d905      	bls.n	80002ca <__udivmoddi4+0xba>
 80002be:	b10d      	cbz	r5, 80002c4 <__udivmoddi4+0xb4>
 80002c0:	e9c5 0100 	strd	r0, r1, [r5]
 80002c4:	2100      	movs	r1, #0
 80002c6:	4608      	mov	r0, r1
 80002c8:	e7f5      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ca:	fab3 f183 	clz	r1, r3
 80002ce:	2900      	cmp	r1, #0
 80002d0:	d146      	bne.n	8000360 <__udivmoddi4+0x150>
 80002d2:	42a3      	cmp	r3, r4
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xcc>
 80002d6:	4290      	cmp	r0, r2
 80002d8:	f0c0 80f0 	bcc.w	80004bc <__udivmoddi4+0x2ac>
 80002dc:	1a86      	subs	r6, r0, r2
 80002de:	eb64 0303 	sbc.w	r3, r4, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	2d00      	cmp	r5, #0
 80002e6:	d0e6      	beq.n	80002b6 <__udivmoddi4+0xa6>
 80002e8:	e9c5 6300 	strd	r6, r3, [r5]
 80002ec:	e7e3      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x204>
 80002f4:	eba1 040c 	sub.w	r4, r1, ip
 80002f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002fc:	fa1f f78c 	uxth.w	r7, ip
 8000300:	2101      	movs	r1, #1
 8000302:	fbb4 f6f8 	udiv	r6, r4, r8
 8000306:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030a:	fb08 4416 	mls	r4, r8, r6, r4
 800030e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000312:	fb07 f006 	mul.w	r0, r7, r6
 8000316:	4298      	cmp	r0, r3
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x11c>
 800031a:	eb1c 0303 	adds.w	r3, ip, r3
 800031e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x11a>
 8000324:	4298      	cmp	r0, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2b4>
 800032a:	4626      	mov	r6, r4
 800032c:	1a1c      	subs	r4, r3, r0
 800032e:	fa1f f38e 	uxth.w	r3, lr
 8000332:	fbb4 f0f8 	udiv	r0, r4, r8
 8000336:	fb08 4410 	mls	r4, r8, r0, r4
 800033a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800033e:	fb00 f707 	mul.w	r7, r0, r7
 8000342:	429f      	cmp	r7, r3
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x148>
 8000346:	eb1c 0303 	adds.w	r3, ip, r3
 800034a:	f100 34ff 	add.w	r4, r0, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x146>
 8000350:	429f      	cmp	r7, r3
 8000352:	f200 80b0 	bhi.w	80004b6 <__udivmoddi4+0x2a6>
 8000356:	4620      	mov	r0, r4
 8000358:	1bdb      	subs	r3, r3, r7
 800035a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800035e:	e7a5      	b.n	80002ac <__udivmoddi4+0x9c>
 8000360:	f1c1 0620 	rsb	r6, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 f706 	lsr.w	r7, r2, r6
 800036a:	431f      	orrs	r7, r3
 800036c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000370:	fa04 f301 	lsl.w	r3, r4, r1
 8000374:	ea43 030c 	orr.w	r3, r3, ip
 8000378:	40f4      	lsrs	r4, r6
 800037a:	fa00 f801 	lsl.w	r8, r0, r1
 800037e:	0c38      	lsrs	r0, r7, #16
 8000380:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000384:	fbb4 fef0 	udiv	lr, r4, r0
 8000388:	fa1f fc87 	uxth.w	ip, r7
 800038c:	fb00 441e 	mls	r4, r0, lr, r4
 8000390:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000394:	fb0e f90c 	mul.w	r9, lr, ip
 8000398:	45a1      	cmp	r9, r4
 800039a:	fa02 f201 	lsl.w	r2, r2, r1
 800039e:	d90a      	bls.n	80003b6 <__udivmoddi4+0x1a6>
 80003a0:	193c      	adds	r4, r7, r4
 80003a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003a6:	f080 8084 	bcs.w	80004b2 <__udivmoddi4+0x2a2>
 80003aa:	45a1      	cmp	r9, r4
 80003ac:	f240 8081 	bls.w	80004b2 <__udivmoddi4+0x2a2>
 80003b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003b4:	443c      	add	r4, r7
 80003b6:	eba4 0409 	sub.w	r4, r4, r9
 80003ba:	fa1f f983 	uxth.w	r9, r3
 80003be:	fbb4 f3f0 	udiv	r3, r4, r0
 80003c2:	fb00 4413 	mls	r4, r0, r3, r4
 80003c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d907      	bls.n	80003e2 <__udivmoddi4+0x1d2>
 80003d2:	193c      	adds	r4, r7, r4
 80003d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d8:	d267      	bcs.n	80004aa <__udivmoddi4+0x29a>
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d965      	bls.n	80004aa <__udivmoddi4+0x29a>
 80003de:	3b02      	subs	r3, #2
 80003e0:	443c      	add	r4, r7
 80003e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003e6:	fba0 9302 	umull	r9, r3, r0, r2
 80003ea:	eba4 040c 	sub.w	r4, r4, ip
 80003ee:	429c      	cmp	r4, r3
 80003f0:	46ce      	mov	lr, r9
 80003f2:	469c      	mov	ip, r3
 80003f4:	d351      	bcc.n	800049a <__udivmoddi4+0x28a>
 80003f6:	d04e      	beq.n	8000496 <__udivmoddi4+0x286>
 80003f8:	b155      	cbz	r5, 8000410 <__udivmoddi4+0x200>
 80003fa:	ebb8 030e 	subs.w	r3, r8, lr
 80003fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000402:	fa04 f606 	lsl.w	r6, r4, r6
 8000406:	40cb      	lsrs	r3, r1
 8000408:	431e      	orrs	r6, r3
 800040a:	40cc      	lsrs	r4, r1
 800040c:	e9c5 6400 	strd	r6, r4, [r5]
 8000410:	2100      	movs	r1, #0
 8000412:	e750      	b.n	80002b6 <__udivmoddi4+0xa6>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f103 	lsr.w	r1, r0, r3
 800041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000420:	fa24 f303 	lsr.w	r3, r4, r3
 8000424:	4094      	lsls	r4, r2
 8000426:	430c      	orrs	r4, r1
 8000428:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800042c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000430:	fa1f f78c 	uxth.w	r7, ip
 8000434:	fbb3 f0f8 	udiv	r0, r3, r8
 8000438:	fb08 3110 	mls	r1, r8, r0, r3
 800043c:	0c23      	lsrs	r3, r4, #16
 800043e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000442:	fb00 f107 	mul.w	r1, r0, r7
 8000446:	4299      	cmp	r1, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x24c>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000452:	d22c      	bcs.n	80004ae <__udivmoddi4+0x29e>
 8000454:	4299      	cmp	r1, r3
 8000456:	d92a      	bls.n	80004ae <__udivmoddi4+0x29e>
 8000458:	3802      	subs	r0, #2
 800045a:	4463      	add	r3, ip
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b2a4      	uxth	r4, r4
 8000460:	fbb3 f1f8 	udiv	r1, r3, r8
 8000464:	fb08 3311 	mls	r3, r8, r1, r3
 8000468:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800046c:	fb01 f307 	mul.w	r3, r1, r7
 8000470:	42a3      	cmp	r3, r4
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x276>
 8000474:	eb1c 0404 	adds.w	r4, ip, r4
 8000478:	f101 36ff 	add.w	r6, r1, #4294967295
 800047c:	d213      	bcs.n	80004a6 <__udivmoddi4+0x296>
 800047e:	42a3      	cmp	r3, r4
 8000480:	d911      	bls.n	80004a6 <__udivmoddi4+0x296>
 8000482:	3902      	subs	r1, #2
 8000484:	4464      	add	r4, ip
 8000486:	1ae4      	subs	r4, r4, r3
 8000488:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800048c:	e739      	b.n	8000302 <__udivmoddi4+0xf2>
 800048e:	4604      	mov	r4, r0
 8000490:	e6f0      	b.n	8000274 <__udivmoddi4+0x64>
 8000492:	4608      	mov	r0, r1
 8000494:	e706      	b.n	80002a4 <__udivmoddi4+0x94>
 8000496:	45c8      	cmp	r8, r9
 8000498:	d2ae      	bcs.n	80003f8 <__udivmoddi4+0x1e8>
 800049a:	ebb9 0e02 	subs.w	lr, r9, r2
 800049e:	eb63 0c07 	sbc.w	ip, r3, r7
 80004a2:	3801      	subs	r0, #1
 80004a4:	e7a8      	b.n	80003f8 <__udivmoddi4+0x1e8>
 80004a6:	4631      	mov	r1, r6
 80004a8:	e7ed      	b.n	8000486 <__udivmoddi4+0x276>
 80004aa:	4603      	mov	r3, r0
 80004ac:	e799      	b.n	80003e2 <__udivmoddi4+0x1d2>
 80004ae:	4630      	mov	r0, r6
 80004b0:	e7d4      	b.n	800045c <__udivmoddi4+0x24c>
 80004b2:	46d6      	mov	lr, sl
 80004b4:	e77f      	b.n	80003b6 <__udivmoddi4+0x1a6>
 80004b6:	4463      	add	r3, ip
 80004b8:	3802      	subs	r0, #2
 80004ba:	e74d      	b.n	8000358 <__udivmoddi4+0x148>
 80004bc:	4606      	mov	r6, r0
 80004be:	4623      	mov	r3, r4
 80004c0:	4608      	mov	r0, r1
 80004c2:	e70f      	b.n	80002e4 <__udivmoddi4+0xd4>
 80004c4:	3e02      	subs	r6, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	e730      	b.n	800032c <__udivmoddi4+0x11c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004d0:	b480      	push	{r7}
 80004d2:	b085      	sub	sp, #20
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	60f8      	str	r0, [r7, #12]
 80004d8:	60b9      	str	r1, [r7, #8]
 80004da:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004dc:	68fb      	ldr	r3, [r7, #12]
 80004de:	4a07      	ldr	r2, [pc, #28]	@ (80004fc <vApplicationGetIdleTaskMemory+0x2c>)
 80004e0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004e2:	68bb      	ldr	r3, [r7, #8]
 80004e4:	4a06      	ldr	r2, [pc, #24]	@ (8000500 <vApplicationGetIdleTaskMemory+0x30>)
 80004e6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	2280      	movs	r2, #128	@ 0x80
 80004ec:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004ee:	bf00      	nop
 80004f0:	3714      	adds	r7, #20
 80004f2:	46bd      	mov	sp, r7
 80004f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop
 80004fc:	2000016c 	.word	0x2000016c
 8000500:	2000020c 	.word	0x2000020c

08000504 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000504:	b5b0      	push	{r4, r5, r7, lr}
 8000506:	b09c      	sub	sp, #112	@ 0x70
 8000508:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050a:	f000 fc63 	bl	8000dd4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800050e:	f000 f877 	bl	8000600 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000512:	f000 f8df 	bl	80006d4 <MX_GPIO_Init>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of myBinarySem01 */
  osSemaphoreDef(myBinarySem01);
 8000516:	2300      	movs	r3, #0
 8000518:	66bb      	str	r3, [r7, #104]	@ 0x68
 800051a:	2300      	movs	r3, #0
 800051c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  myBinarySem01Handle = osSemaphoreCreate(osSemaphore(myBinarySem01), 1);
 800051e:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8000522:	2101      	movs	r1, #1
 8000524:	4618      	mov	r0, r3
 8000526:	f006 fcb2 	bl	8006e8e <osSemaphoreCreate>
 800052a:	4603      	mov	r3, r0
 800052c:	4a2b      	ldr	r2, [pc, #172]	@ (80005dc <main+0xd8>)
 800052e:	6013      	str	r3, [r2, #0]

  /* definition and creation of myBinarySem02 */
  osSemaphoreDef(myBinarySem02);
 8000530:	2300      	movs	r3, #0
 8000532:	663b      	str	r3, [r7, #96]	@ 0x60
 8000534:	2300      	movs	r3, #0
 8000536:	667b      	str	r3, [r7, #100]	@ 0x64
  myBinarySem02Handle = osSemaphoreCreate(osSemaphore(myBinarySem02), 1);
 8000538:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800053c:	2101      	movs	r1, #1
 800053e:	4618      	mov	r0, r3
 8000540:	f006 fca5 	bl	8006e8e <osSemaphoreCreate>
 8000544:	4603      	mov	r3, r0
 8000546:	4a26      	ldr	r2, [pc, #152]	@ (80005e0 <main+0xdc>)
 8000548:	6013      	str	r3, [r2, #0]

  /* definition and creation of myBinarySem03 */
  osSemaphoreDef(myBinarySem03);
 800054a:	2300      	movs	r3, #0
 800054c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800054e:	2300      	movs	r3, #0
 8000550:	65fb      	str	r3, [r7, #92]	@ 0x5c
  myBinarySem03Handle = osSemaphoreCreate(osSemaphore(myBinarySem03), 1);
 8000552:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000556:	2101      	movs	r1, #1
 8000558:	4618      	mov	r0, r3
 800055a:	f006 fc98 	bl	8006e8e <osSemaphoreCreate>
 800055e:	4603      	mov	r3, r0
 8000560:	4a20      	ldr	r2, [pc, #128]	@ (80005e4 <main+0xe0>)
 8000562:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of TrafficLight1 */
  osThreadDef(TrafficLight1, StartTrafficLight1, osPriorityNormal, 0, 128);
 8000564:	4b20      	ldr	r3, [pc, #128]	@ (80005e8 <main+0xe4>)
 8000566:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 800056a:	461d      	mov	r5, r3
 800056c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800056e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000570:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000574:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TrafficLight1Handle = osThreadCreate(osThread(TrafficLight1), NULL);
 8000578:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800057c:	2100      	movs	r1, #0
 800057e:	4618      	mov	r0, r3
 8000580:	f006 fc39 	bl	8006df6 <osThreadCreate>
 8000584:	4603      	mov	r3, r0
 8000586:	4a19      	ldr	r2, [pc, #100]	@ (80005ec <main+0xe8>)
 8000588:	6013      	str	r3, [r2, #0]

  /* definition and creation of TrafficLight2 */
  osThreadDef(TrafficLight2, StartTrafficLight2, osPriorityNormal, 0, 128);
 800058a:	4b19      	ldr	r3, [pc, #100]	@ (80005f0 <main+0xec>)
 800058c:	f107 0420 	add.w	r4, r7, #32
 8000590:	461d      	mov	r5, r3
 8000592:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000594:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000596:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800059a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TrafficLight2Handle = osThreadCreate(osThread(TrafficLight2), NULL);
 800059e:	f107 0320 	add.w	r3, r7, #32
 80005a2:	2100      	movs	r1, #0
 80005a4:	4618      	mov	r0, r3
 80005a6:	f006 fc26 	bl	8006df6 <osThreadCreate>
 80005aa:	4603      	mov	r3, r0
 80005ac:	4a11      	ldr	r2, [pc, #68]	@ (80005f4 <main+0xf0>)
 80005ae:	6013      	str	r3, [r2, #0]

  /* definition and creation of pedestrianTask */
  osThreadDef(pedestrianTask, StartpedestrianTask, osPriorityAboveNormal, 0, 128);
 80005b0:	4b11      	ldr	r3, [pc, #68]	@ (80005f8 <main+0xf4>)
 80005b2:	1d3c      	adds	r4, r7, #4
 80005b4:	461d      	mov	r5, r3
 80005b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005ba:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005be:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  pedestrianTaskHandle = osThreadCreate(osThread(pedestrianTask), NULL);
 80005c2:	1d3b      	adds	r3, r7, #4
 80005c4:	2100      	movs	r1, #0
 80005c6:	4618      	mov	r0, r3
 80005c8:	f006 fc15 	bl	8006df6 <osThreadCreate>
 80005cc:	4603      	mov	r3, r0
 80005ce:	4a0b      	ldr	r2, [pc, #44]	@ (80005fc <main+0xf8>)
 80005d0:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80005d2:	f006 fc09 	bl	8006de8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005d6:	bf00      	nop
 80005d8:	e7fd      	b.n	80005d6 <main+0xd2>
 80005da:	bf00      	nop
 80005dc:	2000041c 	.word	0x2000041c
 80005e0:	20000420 	.word	0x20000420
 80005e4:	20000424 	.word	0x20000424
 80005e8:	08009fd0 	.word	0x08009fd0
 80005ec:	20000410 	.word	0x20000410
 80005f0:	08009ffc 	.word	0x08009ffc
 80005f4:	20000414 	.word	0x20000414
 80005f8:	0800a028 	.word	0x0800a028
 80005fc:	20000418 	.word	0x20000418

08000600 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b094      	sub	sp, #80	@ 0x50
 8000604:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000606:	f107 0320 	add.w	r3, r7, #32
 800060a:	2230      	movs	r2, #48	@ 0x30
 800060c:	2100      	movs	r1, #0
 800060e:	4618      	mov	r0, r3
 8000610:	f009 fbe2 	bl	8009dd8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000614:	f107 030c 	add.w	r3, r7, #12
 8000618:	2200      	movs	r2, #0
 800061a:	601a      	str	r2, [r3, #0]
 800061c:	605a      	str	r2, [r3, #4]
 800061e:	609a      	str	r2, [r3, #8]
 8000620:	60da      	str	r2, [r3, #12]
 8000622:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000624:	2300      	movs	r3, #0
 8000626:	60bb      	str	r3, [r7, #8]
 8000628:	4b28      	ldr	r3, [pc, #160]	@ (80006cc <SystemClock_Config+0xcc>)
 800062a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800062c:	4a27      	ldr	r2, [pc, #156]	@ (80006cc <SystemClock_Config+0xcc>)
 800062e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000632:	6413      	str	r3, [r2, #64]	@ 0x40
 8000634:	4b25      	ldr	r3, [pc, #148]	@ (80006cc <SystemClock_Config+0xcc>)
 8000636:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000638:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800063c:	60bb      	str	r3, [r7, #8]
 800063e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000640:	2300      	movs	r3, #0
 8000642:	607b      	str	r3, [r7, #4]
 8000644:	4b22      	ldr	r3, [pc, #136]	@ (80006d0 <SystemClock_Config+0xd0>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	4a21      	ldr	r2, [pc, #132]	@ (80006d0 <SystemClock_Config+0xd0>)
 800064a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800064e:	6013      	str	r3, [r2, #0]
 8000650:	4b1f      	ldr	r3, [pc, #124]	@ (80006d0 <SystemClock_Config+0xd0>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000658:	607b      	str	r3, [r7, #4]
 800065a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800065c:	2301      	movs	r3, #1
 800065e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000660:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000664:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000666:	2302      	movs	r3, #2
 8000668:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800066a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800066e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000670:	2304      	movs	r3, #4
 8000672:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000674:	23a8      	movs	r3, #168	@ 0xa8
 8000676:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000678:	2302      	movs	r3, #2
 800067a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800067c:	2307      	movs	r3, #7
 800067e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000680:	f107 0320 	add.w	r3, r7, #32
 8000684:	4618      	mov	r0, r3
 8000686:	f002 f925 	bl	80028d4 <HAL_RCC_OscConfig>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000690:	f000 fa88 	bl	8000ba4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000694:	230f      	movs	r3, #15
 8000696:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000698:	2302      	movs	r3, #2
 800069a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 800069c:	2380      	movs	r3, #128	@ 0x80
 800069e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006a0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006a4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006a6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006aa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006ac:	f107 030c 	add.w	r3, r7, #12
 80006b0:	2102      	movs	r1, #2
 80006b2:	4618      	mov	r0, r3
 80006b4:	f002 fb86 	bl	8002dc4 <HAL_RCC_ClockConfig>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006be:	f000 fa71 	bl	8000ba4 <Error_Handler>
  }
}
 80006c2:	bf00      	nop
 80006c4:	3750      	adds	r7, #80	@ 0x50
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	40023800 	.word	0x40023800
 80006d0:	40007000 	.word	0x40007000

080006d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b088      	sub	sp, #32
 80006d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006da:	f107 030c 	add.w	r3, r7, #12
 80006de:	2200      	movs	r2, #0
 80006e0:	601a      	str	r2, [r3, #0]
 80006e2:	605a      	str	r2, [r3, #4]
 80006e4:	609a      	str	r2, [r3, #8]
 80006e6:	60da      	str	r2, [r3, #12]
 80006e8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006ea:	2300      	movs	r3, #0
 80006ec:	60bb      	str	r3, [r7, #8]
 80006ee:	4b2b      	ldr	r3, [pc, #172]	@ (800079c <MX_GPIO_Init+0xc8>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006f2:	4a2a      	ldr	r2, [pc, #168]	@ (800079c <MX_GPIO_Init+0xc8>)
 80006f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006fa:	4b28      	ldr	r3, [pc, #160]	@ (800079c <MX_GPIO_Init+0xc8>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000702:	60bb      	str	r3, [r7, #8]
 8000704:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000706:	2300      	movs	r3, #0
 8000708:	607b      	str	r3, [r7, #4]
 800070a:	4b24      	ldr	r3, [pc, #144]	@ (800079c <MX_GPIO_Init+0xc8>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800070e:	4a23      	ldr	r2, [pc, #140]	@ (800079c <MX_GPIO_Init+0xc8>)
 8000710:	f043 0301 	orr.w	r3, r3, #1
 8000714:	6313      	str	r3, [r2, #48]	@ 0x30
 8000716:	4b21      	ldr	r3, [pc, #132]	@ (800079c <MX_GPIO_Init+0xc8>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800071a:	f003 0301 	and.w	r3, r3, #1
 800071e:	607b      	str	r3, [r7, #4]
 8000720:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000722:	2300      	movs	r3, #0
 8000724:	603b      	str	r3, [r7, #0]
 8000726:	4b1d      	ldr	r3, [pc, #116]	@ (800079c <MX_GPIO_Init+0xc8>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800072a:	4a1c      	ldr	r2, [pc, #112]	@ (800079c <MX_GPIO_Init+0xc8>)
 800072c:	f043 0308 	orr.w	r3, r3, #8
 8000730:	6313      	str	r3, [r2, #48]	@ 0x30
 8000732:	4b1a      	ldr	r3, [pc, #104]	@ (800079c <MX_GPIO_Init+0xc8>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000736:	f003 0308 	and.w	r3, r3, #8
 800073a:	603b      	str	r3, [r7, #0]
 800073c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GREEN2_Pin|ORANGE2_Pin|BLUE_Pin|RED2_Pin
 800073e:	2200      	movs	r2, #0
 8000740:	f44f 417e 	mov.w	r1, #65024	@ 0xfe00
 8000744:	4816      	ldr	r0, [pc, #88]	@ (80007a0 <MX_GPIO_Init+0xcc>)
 8000746:	f000 fe41 	bl	80013cc <HAL_GPIO_WritePin>
                          |GREEN1_Pin|ORANGE1_Pin|RED1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800074a:	2301      	movs	r3, #1
 800074c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800074e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000752:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000754:	2302      	movs	r3, #2
 8000756:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000758:	f107 030c 	add.w	r3, r7, #12
 800075c:	4619      	mov	r1, r3
 800075e:	4811      	ldr	r0, [pc, #68]	@ (80007a4 <MX_GPIO_Init+0xd0>)
 8000760:	f000 fc80 	bl	8001064 <HAL_GPIO_Init>

  /*Configure GPIO pins : GREEN2_Pin ORANGE2_Pin BLUE_Pin RED2_Pin
                           GREEN1_Pin ORANGE1_Pin RED1_Pin */
  GPIO_InitStruct.Pin = GREEN2_Pin|ORANGE2_Pin|BLUE_Pin|RED2_Pin
 8000764:	f44f 437e 	mov.w	r3, #65024	@ 0xfe00
 8000768:	60fb      	str	r3, [r7, #12]
                          |GREEN1_Pin|ORANGE1_Pin|RED1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800076a:	2301      	movs	r3, #1
 800076c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076e:	2300      	movs	r3, #0
 8000770:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000772:	2300      	movs	r3, #0
 8000774:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000776:	f107 030c 	add.w	r3, r7, #12
 800077a:	4619      	mov	r1, r3
 800077c:	4808      	ldr	r0, [pc, #32]	@ (80007a0 <MX_GPIO_Init+0xcc>)
 800077e:	f000 fc71 	bl	8001064 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8000782:	2200      	movs	r2, #0
 8000784:	2105      	movs	r1, #5
 8000786:	2006      	movs	r0, #6
 8000788:	f000 fc42 	bl	8001010 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800078c:	2006      	movs	r0, #6
 800078e:	f000 fc5b 	bl	8001048 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000792:	bf00      	nop
 8000794:	3720      	adds	r7, #32
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	40023800 	.word	0x40023800
 80007a0:	40020c00 	.word	0x40020c00
 80007a4:	40020000 	.word	0x40020000

080007a8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	4603      	mov	r3, r0
 80007b0:	80fb      	strh	r3, [r7, #6]
	// BaseType_t xHigherPriorityTaskWoken = pdFALSE;

	if (GPIO_Pin == GPIO_PIN_0)
 80007b2:	88fb      	ldrh	r3, [r7, #6]
 80007b4:	2b01      	cmp	r3, #1
 80007b6:	d10a      	bne.n	80007ce <HAL_GPIO_EXTI_Callback+0x26>
	{
		while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0));
 80007b8:	bf00      	nop
 80007ba:	2101      	movs	r1, #1
 80007bc:	4806      	ldr	r0, [pc, #24]	@ (80007d8 <HAL_GPIO_EXTI_Callback+0x30>)
 80007be:	f000 fded 	bl	800139c <HAL_GPIO_ReadPin>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d1f8      	bne.n	80007ba <HAL_GPIO_EXTI_Callback+0x12>

		// xSemaphoreGiveFromISR(myBinarySem02Handle,portMAX_DELAY);

		// portYIELD_FROM_ISR(xHigherPriorityTaskWoken);

		control = 1;
 80007c8:	4b04      	ldr	r3, [pc, #16]	@ (80007dc <HAL_GPIO_EXTI_Callback+0x34>)
 80007ca:	2201      	movs	r2, #1
 80007cc:	701a      	strb	r2, [r3, #0]
	}
}
 80007ce:	bf00      	nop
 80007d0:	3708      	adds	r7, #8
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	40020000 	.word	0x40020000
 80007dc:	2000040c 	.word	0x2000040c

080007e0 <StartTrafficLight1>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTrafficLight1 */
void StartTrafficLight1(void const * argument)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b084      	sub	sp, #16
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80007e8:	f008 fddc 	bl	80093a4 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */

	HAL_GPIO_WritePin(GPIOD,GPIO_PIN_15,GPIO_PIN_SET); // Kirmizi 1
 80007ec:	2201      	movs	r2, #1
 80007ee:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80007f2:	483d      	ldr	r0, [pc, #244]	@ (80008e8 <StartTrafficLight1+0x108>)
 80007f4:	f000 fdea 	bl	80013cc <HAL_GPIO_WritePin>

  /* Infinite loop */
  for(;;)
  {
	  if(xSemaphoreTake(myBinarySem01Handle,portMAX_DELAY) == pdTRUE)
 80007f8:	4b3c      	ldr	r3, [pc, #240]	@ (80008ec <StartTrafficLight1+0x10c>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	f04f 31ff 	mov.w	r1, #4294967295
 8000800:	4618      	mov	r0, r3
 8000802:	f006 fe6f 	bl	80074e4 <xQueueSemaphoreTake>
 8000806:	4603      	mov	r3, r0
 8000808:	2b01      	cmp	r3, #1
 800080a:	d168      	bne.n	80008de <StartTrafficLight1+0xfe>
	  {
		  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_14,GPIO_PIN_SET);   // Turuncu 1
 800080c:	2201      	movs	r2, #1
 800080e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000812:	4835      	ldr	r0, [pc, #212]	@ (80008e8 <StartTrafficLight1+0x108>)
 8000814:	f000 fdda 	bl	80013cc <HAL_GPIO_WritePin>
		  HAL_Delay(1000);
 8000818:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800081c:	f000 fb1c 	bl	8000e58 <HAL_Delay>

		  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_14,GPIO_PIN_RESET);  // Turuncu 1
 8000820:	2200      	movs	r2, #0
 8000822:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000826:	4830      	ldr	r0, [pc, #192]	@ (80008e8 <StartTrafficLight1+0x108>)
 8000828:	f000 fdd0 	bl	80013cc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_15,GPIO_PIN_RESET);  // Kirmizi 1
 800082c:	2200      	movs	r2, #0
 800082e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000832:	482d      	ldr	r0, [pc, #180]	@ (80008e8 <StartTrafficLight1+0x108>)
 8000834:	f000 fdca 	bl	80013cc <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_13,GPIO_PIN_SET);  //  Yesil 1
 8000838:	2201      	movs	r2, #1
 800083a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800083e:	482a      	ldr	r0, [pc, #168]	@ (80008e8 <StartTrafficLight1+0x108>)
 8000840:	f000 fdc4 	bl	80013cc <HAL_GPIO_WritePin>
		  char *str1 = "1. Trafik isigi yesil yaniyor.\n\n\r";
 8000844:	4b2a      	ldr	r3, [pc, #168]	@ (80008f0 <StartTrafficLight1+0x110>)
 8000846:	60fb      	str	r3, [r7, #12]
		  CDC_Transmit_FS((uint8_t *)str1,strlen(str1));
 8000848:	68f8      	ldr	r0, [r7, #12]
 800084a:	f7ff fcc1 	bl	80001d0 <strlen>
 800084e:	4603      	mov	r3, r0
 8000850:	b29b      	uxth	r3, r3
 8000852:	4619      	mov	r1, r3
 8000854:	68f8      	ldr	r0, [r7, #12]
 8000856:	f008 fe63 	bl	8009520 <CDC_Transmit_FS>

		  HAL_Delay(5000);
 800085a:	f241 3088 	movw	r0, #5000	@ 0x1388
 800085e:	f000 fafb 	bl	8000e58 <HAL_Delay>

		  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_13,GPIO_PIN_RESET); // Yesil 1
 8000862:	2200      	movs	r2, #0
 8000864:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000868:	481f      	ldr	r0, [pc, #124]	@ (80008e8 <StartTrafficLight1+0x108>)
 800086a:	f000 fdaf 	bl	80013cc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_14,GPIO_PIN_SET);   // Turuncu 1
 800086e:	2201      	movs	r2, #1
 8000870:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000874:	481c      	ldr	r0, [pc, #112]	@ (80008e8 <StartTrafficLight1+0x108>)
 8000876:	f000 fda9 	bl	80013cc <HAL_GPIO_WritePin>

		  HAL_Delay(1000);
 800087a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800087e:	f000 faeb 	bl	8000e58 <HAL_Delay>

		  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_14,GPIO_PIN_RESET);   // Turuncu 1
 8000882:	2200      	movs	r2, #0
 8000884:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000888:	4817      	ldr	r0, [pc, #92]	@ (80008e8 <StartTrafficLight1+0x108>)
 800088a:	f000 fd9f 	bl	80013cc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_15,GPIO_PIN_SET);   // Kirmizi 1
 800088e:	2201      	movs	r2, #1
 8000890:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000894:	4814      	ldr	r0, [pc, #80]	@ (80008e8 <StartTrafficLight1+0x108>)
 8000896:	f000 fd99 	bl	80013cc <HAL_GPIO_WritePin>
		  char *str2 = "1. Trafik isigi kirmizi yaniyor.\n\n\r";
 800089a:	4b16      	ldr	r3, [pc, #88]	@ (80008f4 <StartTrafficLight1+0x114>)
 800089c:	60bb      	str	r3, [r7, #8]
		  CDC_Transmit_FS((uint8_t *)str2,strlen(str2));
 800089e:	68b8      	ldr	r0, [r7, #8]
 80008a0:	f7ff fc96 	bl	80001d0 <strlen>
 80008a4:	4603      	mov	r3, r0
 80008a6:	b29b      	uxth	r3, r3
 80008a8:	4619      	mov	r1, r3
 80008aa:	68b8      	ldr	r0, [r7, #8]
 80008ac:	f008 fe38 	bl	8009520 <CDC_Transmit_FS>

		  HAL_Delay(4000);
 80008b0:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 80008b4:	f000 fad0 	bl	8000e58 <HAL_Delay>

		  if(control == 1)
 80008b8:	4b0f      	ldr	r3, [pc, #60]	@ (80008f8 <StartTrafficLight1+0x118>)
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	b2db      	uxtb	r3, r3
 80008be:	2b01      	cmp	r3, #1
 80008c0:	d106      	bne.n	80008d0 <StartTrafficLight1+0xf0>
		  {
			  xSemaphoreGive(myBinarySem02Handle);
 80008c2:	4b0e      	ldr	r3, [pc, #56]	@ (80008fc <StartTrafficLight1+0x11c>)
 80008c4:	6818      	ldr	r0, [r3, #0]
 80008c6:	2300      	movs	r3, #0
 80008c8:	2200      	movs	r2, #0
 80008ca:	2100      	movs	r1, #0
 80008cc:	f006 fd08 	bl	80072e0 <xQueueGenericSend>
		  }


		  xSemaphoreGive(myBinarySem01Handle);
 80008d0:	4b06      	ldr	r3, [pc, #24]	@ (80008ec <StartTrafficLight1+0x10c>)
 80008d2:	6818      	ldr	r0, [r3, #0]
 80008d4:	2300      	movs	r3, #0
 80008d6:	2200      	movs	r2, #0
 80008d8:	2100      	movs	r1, #0
 80008da:	f006 fd01 	bl	80072e0 <xQueueGenericSend>


	  }

	  vTaskDelay(pdMS_TO_TICKS(1));
 80008de:	2001      	movs	r0, #1
 80008e0:	f007 f9c2 	bl	8007c68 <vTaskDelay>
	  if(xSemaphoreTake(myBinarySem01Handle,portMAX_DELAY) == pdTRUE)
 80008e4:	e788      	b.n	80007f8 <StartTrafficLight1+0x18>
 80008e6:	bf00      	nop
 80008e8:	40020c00 	.word	0x40020c00
 80008ec:	2000041c 	.word	0x2000041c
 80008f0:	0800a044 	.word	0x0800a044
 80008f4:	0800a068 	.word	0x0800a068
 80008f8:	2000040c 	.word	0x2000040c
 80008fc:	20000420 	.word	0x20000420

08000900 <StartTrafficLight2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTrafficLight2 */
void StartTrafficLight2(void const * argument)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b084      	sub	sp, #16
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTrafficLight2 */

	HAL_GPIO_WritePin(GPIOD,GPIO_PIN_12,GPIO_PIN_SET); // Kirmizi 2
 8000908:	2201      	movs	r2, #1
 800090a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800090e:	483d      	ldr	r0, [pc, #244]	@ (8000a04 <StartTrafficLight2+0x104>)
 8000910:	f000 fd5c 	bl	80013cc <HAL_GPIO_WritePin>
  /* Infinite loop */
  for(;;)
  {
	  if(xSemaphoreTake(myBinarySem01Handle,portMAX_DELAY) == pdTRUE)
 8000914:	4b3c      	ldr	r3, [pc, #240]	@ (8000a08 <StartTrafficLight2+0x108>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	f04f 31ff 	mov.w	r1, #4294967295
 800091c:	4618      	mov	r0, r3
 800091e:	f006 fde1 	bl	80074e4 <xQueueSemaphoreTake>
 8000922:	4603      	mov	r3, r0
 8000924:	2b01      	cmp	r3, #1
 8000926:	d168      	bne.n	80009fa <StartTrafficLight2+0xfa>
	  {
		  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_10,GPIO_PIN_SET);   // Turuncu 2
 8000928:	2201      	movs	r2, #1
 800092a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800092e:	4835      	ldr	r0, [pc, #212]	@ (8000a04 <StartTrafficLight2+0x104>)
 8000930:	f000 fd4c 	bl	80013cc <HAL_GPIO_WritePin>
		  HAL_Delay(1000);
 8000934:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000938:	f000 fa8e 	bl	8000e58 <HAL_Delay>

		  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_10,GPIO_PIN_RESET);  // Turuncu 2
 800093c:	2200      	movs	r2, #0
 800093e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000942:	4830      	ldr	r0, [pc, #192]	@ (8000a04 <StartTrafficLight2+0x104>)
 8000944:	f000 fd42 	bl	80013cc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_12,GPIO_PIN_RESET);  // Kirmizi 2
 8000948:	2200      	movs	r2, #0
 800094a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800094e:	482d      	ldr	r0, [pc, #180]	@ (8000a04 <StartTrafficLight2+0x104>)
 8000950:	f000 fd3c 	bl	80013cc <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_9,GPIO_PIN_SET);  //  Yesil 2
 8000954:	2201      	movs	r2, #1
 8000956:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800095a:	482a      	ldr	r0, [pc, #168]	@ (8000a04 <StartTrafficLight2+0x104>)
 800095c:	f000 fd36 	bl	80013cc <HAL_GPIO_WritePin>
		  char *str1 = "1. Trafik isigi yesil yaniyor.\n\n\r";
 8000960:	4b2a      	ldr	r3, [pc, #168]	@ (8000a0c <StartTrafficLight2+0x10c>)
 8000962:	60fb      	str	r3, [r7, #12]
		  CDC_Transmit_FS((uint8_t *)str1,strlen(str1));
 8000964:	68f8      	ldr	r0, [r7, #12]
 8000966:	f7ff fc33 	bl	80001d0 <strlen>
 800096a:	4603      	mov	r3, r0
 800096c:	b29b      	uxth	r3, r3
 800096e:	4619      	mov	r1, r3
 8000970:	68f8      	ldr	r0, [r7, #12]
 8000972:	f008 fdd5 	bl	8009520 <CDC_Transmit_FS>

		  HAL_Delay(5000);
 8000976:	f241 3088 	movw	r0, #5000	@ 0x1388
 800097a:	f000 fa6d 	bl	8000e58 <HAL_Delay>

		  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_9,GPIO_PIN_RESET); // Yesil 2
 800097e:	2200      	movs	r2, #0
 8000980:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000984:	481f      	ldr	r0, [pc, #124]	@ (8000a04 <StartTrafficLight2+0x104>)
 8000986:	f000 fd21 	bl	80013cc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_10,GPIO_PIN_SET);   // Turuncu 2
 800098a:	2201      	movs	r2, #1
 800098c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000990:	481c      	ldr	r0, [pc, #112]	@ (8000a04 <StartTrafficLight2+0x104>)
 8000992:	f000 fd1b 	bl	80013cc <HAL_GPIO_WritePin>

		  HAL_Delay(1000);
 8000996:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800099a:	f000 fa5d 	bl	8000e58 <HAL_Delay>

		  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_10,GPIO_PIN_RESET);   // Turuncu 2
 800099e:	2200      	movs	r2, #0
 80009a0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80009a4:	4817      	ldr	r0, [pc, #92]	@ (8000a04 <StartTrafficLight2+0x104>)
 80009a6:	f000 fd11 	bl	80013cc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_12,GPIO_PIN_SET);   // Kirmizi 2
 80009aa:	2201      	movs	r2, #1
 80009ac:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80009b0:	4814      	ldr	r0, [pc, #80]	@ (8000a04 <StartTrafficLight2+0x104>)
 80009b2:	f000 fd0b 	bl	80013cc <HAL_GPIO_WritePin>
		  char *str2 = "1. Trafik isigi kirmizi yaniyor.\n\n\r";
 80009b6:	4b16      	ldr	r3, [pc, #88]	@ (8000a10 <StartTrafficLight2+0x110>)
 80009b8:	60bb      	str	r3, [r7, #8]
		  CDC_Transmit_FS((uint8_t *)str2,strlen(str2));
 80009ba:	68b8      	ldr	r0, [r7, #8]
 80009bc:	f7ff fc08 	bl	80001d0 <strlen>
 80009c0:	4603      	mov	r3, r0
 80009c2:	b29b      	uxth	r3, r3
 80009c4:	4619      	mov	r1, r3
 80009c6:	68b8      	ldr	r0, [r7, #8]
 80009c8:	f008 fdaa 	bl	8009520 <CDC_Transmit_FS>

		  HAL_Delay(4000);
 80009cc:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 80009d0:	f000 fa42 	bl	8000e58 <HAL_Delay>

		  if(control == 1)
 80009d4:	4b0f      	ldr	r3, [pc, #60]	@ (8000a14 <StartTrafficLight2+0x114>)
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	b2db      	uxtb	r3, r3
 80009da:	2b01      	cmp	r3, #1
 80009dc:	d106      	bne.n	80009ec <StartTrafficLight2+0xec>
		  {
			  xSemaphoreGive(myBinarySem02Handle);
 80009de:	4b0e      	ldr	r3, [pc, #56]	@ (8000a18 <StartTrafficLight2+0x118>)
 80009e0:	6818      	ldr	r0, [r3, #0]
 80009e2:	2300      	movs	r3, #0
 80009e4:	2200      	movs	r2, #0
 80009e6:	2100      	movs	r1, #0
 80009e8:	f006 fc7a 	bl	80072e0 <xQueueGenericSend>
		  }

		  xSemaphoreGive(myBinarySem01Handle);
 80009ec:	4b06      	ldr	r3, [pc, #24]	@ (8000a08 <StartTrafficLight2+0x108>)
 80009ee:	6818      	ldr	r0, [r3, #0]
 80009f0:	2300      	movs	r3, #0
 80009f2:	2200      	movs	r2, #0
 80009f4:	2100      	movs	r1, #0
 80009f6:	f006 fc73 	bl	80072e0 <xQueueGenericSend>
	  }

	  vTaskDelay(pdMS_TO_TICKS(1));
 80009fa:	2001      	movs	r0, #1
 80009fc:	f007 f934 	bl	8007c68 <vTaskDelay>
	  if(xSemaphoreTake(myBinarySem01Handle,portMAX_DELAY) == pdTRUE)
 8000a00:	e788      	b.n	8000914 <StartTrafficLight2+0x14>
 8000a02:	bf00      	nop
 8000a04:	40020c00 	.word	0x40020c00
 8000a08:	2000041c 	.word	0x2000041c
 8000a0c:	0800a044 	.word	0x0800a044
 8000a10:	0800a068 	.word	0x0800a068
 8000a14:	2000040c 	.word	0x2000040c
 8000a18:	20000420 	.word	0x20000420

08000a1c <StartpedestrianTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartpedestrianTask */
void StartpedestrianTask(void const * argument)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b086      	sub	sp, #24
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartpedestrianTask */
  /* Infinite loop */
  for(;;)
  {
	  if(xSemaphoreTake(myBinarySem02Handle,portMAX_DELAY) == pdTRUE)
 8000a24:	4b4e      	ldr	r3, [pc, #312]	@ (8000b60 <StartpedestrianTask+0x144>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	f04f 31ff 	mov.w	r1, #4294967295
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f006 fd59 	bl	80074e4 <xQueueSemaphoreTake>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b01      	cmp	r3, #1
 8000a36:	f040 808f 	bne.w	8000b58 <StartpedestrianTask+0x13c>
	  {
		  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_13,GPIO_PIN_RESET); // Yesil 1
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a40:	4848      	ldr	r0, [pc, #288]	@ (8000b64 <StartpedestrianTask+0x148>)
 8000a42:	f000 fcc3 	bl	80013cc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_14,GPIO_PIN_RESET); // Turuncu 1
 8000a46:	2200      	movs	r2, #0
 8000a48:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a4c:	4845      	ldr	r0, [pc, #276]	@ (8000b64 <StartpedestrianTask+0x148>)
 8000a4e:	f000 fcbd 	bl	80013cc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_15,GPIO_PIN_SET);   // Kirmizi 1
 8000a52:	2201      	movs	r2, #1
 8000a54:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000a58:	4842      	ldr	r0, [pc, #264]	@ (8000b64 <StartpedestrianTask+0x148>)
 8000a5a:	f000 fcb7 	bl	80013cc <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_9,GPIO_PIN_RESET);  // Yesil 2
 8000a5e:	2200      	movs	r2, #0
 8000a60:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000a64:	483f      	ldr	r0, [pc, #252]	@ (8000b64 <StartpedestrianTask+0x148>)
 8000a66:	f000 fcb1 	bl	80013cc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_10,GPIO_PIN_RESET); // Turuncu 2
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a70:	483c      	ldr	r0, [pc, #240]	@ (8000b64 <StartpedestrianTask+0x148>)
 8000a72:	f000 fcab 	bl	80013cc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_12,GPIO_PIN_SET);   // Kirmizi 2
 8000a76:	2201      	movs	r2, #1
 8000a78:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000a7c:	4839      	ldr	r0, [pc, #228]	@ (8000b64 <StartpedestrianTask+0x148>)
 8000a7e:	f000 fca5 	bl	80013cc <HAL_GPIO_WritePin>

		  HAL_Delay(500);
 8000a82:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000a86:	f000 f9e7 	bl	8000e58 <HAL_Delay>

		  vTaskSuspend(TrafficLight1Handle);
 8000a8a:	4b37      	ldr	r3, [pc, #220]	@ (8000b68 <StartpedestrianTask+0x14c>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f007 f920 	bl	8007cd4 <vTaskSuspend>
		  vTaskSuspend(TrafficLight2Handle);
 8000a94:	4b35      	ldr	r3, [pc, #212]	@ (8000b6c <StartpedestrianTask+0x150>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f007 f91b 	bl	8007cd4 <vTaskSuspend>

		  char *str1 = "1. ve 2. trafik isigi kirmizi yaniyor.\n\n\r";
 8000a9e:	4b34      	ldr	r3, [pc, #208]	@ (8000b70 <StartpedestrianTask+0x154>)
 8000aa0:	613b      	str	r3, [r7, #16]
		  CDC_Transmit_FS((uint8_t *)str1, strlen(str1));
 8000aa2:	6938      	ldr	r0, [r7, #16]
 8000aa4:	f7ff fb94 	bl	80001d0 <strlen>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	b29b      	uxth	r3, r3
 8000aac:	4619      	mov	r1, r3
 8000aae:	6938      	ldr	r0, [r7, #16]
 8000ab0:	f008 fd36 	bl	8009520 <CDC_Transmit_FS>
		  // HAL_Delay(2000);

		  char *str2 = "Yayalar geciyor.\n\n\r";
 8000ab4:	4b2f      	ldr	r3, [pc, #188]	@ (8000b74 <StartpedestrianTask+0x158>)
 8000ab6:	60fb      	str	r3, [r7, #12]
		  CDC_Transmit_FS((uint8_t *)str2, strlen(str2));
 8000ab8:	68f8      	ldr	r0, [r7, #12]
 8000aba:	f7ff fb89 	bl	80001d0 <strlen>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	b29b      	uxth	r3, r3
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	68f8      	ldr	r0, [r7, #12]
 8000ac6:	f008 fd2b 	bl	8009520 <CDC_Transmit_FS>
		  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_11,GPIO_PIN_SET);
 8000aca:	2201      	movs	r2, #1
 8000acc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000ad0:	4824      	ldr	r0, [pc, #144]	@ (8000b64 <StartpedestrianTask+0x148>)
 8000ad2:	f000 fc7b 	bl	80013cc <HAL_GPIO_WritePin>

		  HAL_Delay(4000);
 8000ad6:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 8000ada:	f000 f9bd 	bl	8000e58 <HAL_Delay>

		  for(int i = 0;i < 5;i++)
 8000ade:	2300      	movs	r3, #0
 8000ae0:	617b      	str	r3, [r7, #20]
 8000ae2:	e014      	b.n	8000b0e <StartpedestrianTask+0xf2>
		  {
			  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_11,GPIO_PIN_RESET);
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000aea:	481e      	ldr	r0, [pc, #120]	@ (8000b64 <StartpedestrianTask+0x148>)
 8000aec:	f000 fc6e 	bl	80013cc <HAL_GPIO_WritePin>
			  HAL_Delay(250);
 8000af0:	20fa      	movs	r0, #250	@ 0xfa
 8000af2:	f000 f9b1 	bl	8000e58 <HAL_Delay>
			  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_11,GPIO_PIN_SET);
 8000af6:	2201      	movs	r2, #1
 8000af8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000afc:	4819      	ldr	r0, [pc, #100]	@ (8000b64 <StartpedestrianTask+0x148>)
 8000afe:	f000 fc65 	bl	80013cc <HAL_GPIO_WritePin>
			  HAL_Delay(250);
 8000b02:	20fa      	movs	r0, #250	@ 0xfa
 8000b04:	f000 f9a8 	bl	8000e58 <HAL_Delay>
		  for(int i = 0;i < 5;i++)
 8000b08:	697b      	ldr	r3, [r7, #20]
 8000b0a:	3301      	adds	r3, #1
 8000b0c:	617b      	str	r3, [r7, #20]
 8000b0e:	697b      	ldr	r3, [r7, #20]
 8000b10:	2b04      	cmp	r3, #4
 8000b12:	dde7      	ble.n	8000ae4 <StartpedestrianTask+0xc8>
		  }

		  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_11,GPIO_PIN_RESET);
 8000b14:	2200      	movs	r2, #0
 8000b16:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000b1a:	4812      	ldr	r0, [pc, #72]	@ (8000b64 <StartpedestrianTask+0x148>)
 8000b1c:	f000 fc56 	bl	80013cc <HAL_GPIO_WritePin>

		  char *str3 = "Yayalar gecti.\n\n\r";
 8000b20:	4b15      	ldr	r3, [pc, #84]	@ (8000b78 <StartpedestrianTask+0x15c>)
 8000b22:	60bb      	str	r3, [r7, #8]
		  CDC_Transmit_FS((uint8_t *)str3, strlen(str3));
 8000b24:	68b8      	ldr	r0, [r7, #8]
 8000b26:	f7ff fb53 	bl	80001d0 <strlen>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	b29b      	uxth	r3, r3
 8000b2e:	4619      	mov	r1, r3
 8000b30:	68b8      	ldr	r0, [r7, #8]
 8000b32:	f008 fcf5 	bl	8009520 <CDC_Transmit_FS>
		  HAL_Delay(2000);
 8000b36:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000b3a:	f000 f98d 	bl	8000e58 <HAL_Delay>

		  control = 0;
 8000b3e:	4b0f      	ldr	r3, [pc, #60]	@ (8000b7c <StartpedestrianTask+0x160>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	701a      	strb	r2, [r3, #0]

		  vTaskResume(TrafficLight1Handle);
 8000b44:	4b08      	ldr	r3, [pc, #32]	@ (8000b68 <StartpedestrianTask+0x14c>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f007 f989 	bl	8007e60 <vTaskResume>
		  vTaskResume(TrafficLight2Handle);
 8000b4e:	4b07      	ldr	r3, [pc, #28]	@ (8000b6c <StartpedestrianTask+0x150>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	4618      	mov	r0, r3
 8000b54:	f007 f984 	bl	8007e60 <vTaskResume>


	  }
	  vTaskDelay(pdMS_TO_TICKS(1));
 8000b58:	2001      	movs	r0, #1
 8000b5a:	f007 f885 	bl	8007c68 <vTaskDelay>
	  if(xSemaphoreTake(myBinarySem02Handle,portMAX_DELAY) == pdTRUE)
 8000b5e:	e761      	b.n	8000a24 <StartpedestrianTask+0x8>
 8000b60:	20000420 	.word	0x20000420
 8000b64:	40020c00 	.word	0x40020c00
 8000b68:	20000410 	.word	0x20000410
 8000b6c:	20000414 	.word	0x20000414
 8000b70:	0800a08c 	.word	0x0800a08c
 8000b74:	0800a0b8 	.word	0x0800a0b8
 8000b78:	0800a0cc 	.word	0x0800a0cc
 8000b7c:	2000040c 	.word	0x2000040c

08000b80 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	4a04      	ldr	r2, [pc, #16]	@ (8000ba0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b8e:	4293      	cmp	r3, r2
 8000b90:	d101      	bne.n	8000b96 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b92:	f000 f941 	bl	8000e18 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b96:	bf00      	nop
 8000b98:	3708      	adds	r7, #8
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	40010000 	.word	0x40010000

08000ba4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ba8:	b672      	cpsid	i
}
 8000baa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bac:	bf00      	nop
 8000bae:	e7fd      	b.n	8000bac <Error_Handler+0x8>

08000bb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	607b      	str	r3, [r7, #4]
 8000bba:	4b12      	ldr	r3, [pc, #72]	@ (8000c04 <HAL_MspInit+0x54>)
 8000bbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bbe:	4a11      	ldr	r2, [pc, #68]	@ (8000c04 <HAL_MspInit+0x54>)
 8000bc0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000bc4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000bc6:	4b0f      	ldr	r3, [pc, #60]	@ (8000c04 <HAL_MspInit+0x54>)
 8000bc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000bce:	607b      	str	r3, [r7, #4]
 8000bd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	603b      	str	r3, [r7, #0]
 8000bd6:	4b0b      	ldr	r3, [pc, #44]	@ (8000c04 <HAL_MspInit+0x54>)
 8000bd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bda:	4a0a      	ldr	r2, [pc, #40]	@ (8000c04 <HAL_MspInit+0x54>)
 8000bdc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000be0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000be2:	4b08      	ldr	r3, [pc, #32]	@ (8000c04 <HAL_MspInit+0x54>)
 8000be4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000be6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bea:	603b      	str	r3, [r7, #0]
 8000bec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000bee:	2200      	movs	r2, #0
 8000bf0:	210f      	movs	r1, #15
 8000bf2:	f06f 0001 	mvn.w	r0, #1
 8000bf6:	f000 fa0b 	bl	8001010 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bfa:	bf00      	nop
 8000bfc:	3708      	adds	r7, #8
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	40023800 	.word	0x40023800

08000c08 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b08c      	sub	sp, #48	@ 0x30
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000c10:	2300      	movs	r3, #0
 8000c12:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000c14:	2300      	movs	r3, #0
 8000c16:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000c18:	2300      	movs	r3, #0
 8000c1a:	60bb      	str	r3, [r7, #8]
 8000c1c:	4b2f      	ldr	r3, [pc, #188]	@ (8000cdc <HAL_InitTick+0xd4>)
 8000c1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c20:	4a2e      	ldr	r2, [pc, #184]	@ (8000cdc <HAL_InitTick+0xd4>)
 8000c22:	f043 0301 	orr.w	r3, r3, #1
 8000c26:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c28:	4b2c      	ldr	r3, [pc, #176]	@ (8000cdc <HAL_InitTick+0xd4>)
 8000c2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c2c:	f003 0301 	and.w	r3, r3, #1
 8000c30:	60bb      	str	r3, [r7, #8]
 8000c32:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c34:	f107 020c 	add.w	r2, r7, #12
 8000c38:	f107 0310 	add.w	r3, r7, #16
 8000c3c:	4611      	mov	r1, r2
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f002 facc 	bl	80031dc <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000c44:	f002 fab6 	bl	80031b4 <HAL_RCC_GetPCLK2Freq>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	005b      	lsls	r3, r3, #1
 8000c4c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c50:	4a23      	ldr	r2, [pc, #140]	@ (8000ce0 <HAL_InitTick+0xd8>)
 8000c52:	fba2 2303 	umull	r2, r3, r2, r3
 8000c56:	0c9b      	lsrs	r3, r3, #18
 8000c58:	3b01      	subs	r3, #1
 8000c5a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000c5c:	4b21      	ldr	r3, [pc, #132]	@ (8000ce4 <HAL_InitTick+0xdc>)
 8000c5e:	4a22      	ldr	r2, [pc, #136]	@ (8000ce8 <HAL_InitTick+0xe0>)
 8000c60:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000c62:	4b20      	ldr	r3, [pc, #128]	@ (8000ce4 <HAL_InitTick+0xdc>)
 8000c64:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000c68:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000c6a:	4a1e      	ldr	r2, [pc, #120]	@ (8000ce4 <HAL_InitTick+0xdc>)
 8000c6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c6e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000c70:	4b1c      	ldr	r3, [pc, #112]	@ (8000ce4 <HAL_InitTick+0xdc>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c76:	4b1b      	ldr	r3, [pc, #108]	@ (8000ce4 <HAL_InitTick+0xdc>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c7c:	4b19      	ldr	r3, [pc, #100]	@ (8000ce4 <HAL_InitTick+0xdc>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000c82:	4818      	ldr	r0, [pc, #96]	@ (8000ce4 <HAL_InitTick+0xdc>)
 8000c84:	f002 fadc 	bl	8003240 <HAL_TIM_Base_Init>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000c8e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d11b      	bne.n	8000cce <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000c96:	4813      	ldr	r0, [pc, #76]	@ (8000ce4 <HAL_InitTick+0xdc>)
 8000c98:	f002 fb2c 	bl	80032f4 <HAL_TIM_Base_Start_IT>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000ca2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d111      	bne.n	8000cce <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000caa:	2019      	movs	r0, #25
 8000cac:	f000 f9cc 	bl	8001048 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	2b0f      	cmp	r3, #15
 8000cb4:	d808      	bhi.n	8000cc8 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	6879      	ldr	r1, [r7, #4]
 8000cba:	2019      	movs	r0, #25
 8000cbc:	f000 f9a8 	bl	8001010 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cc0:	4a0a      	ldr	r2, [pc, #40]	@ (8000cec <HAL_InitTick+0xe4>)
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	6013      	str	r3, [r2, #0]
 8000cc6:	e002      	b.n	8000cce <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8000cc8:	2301      	movs	r3, #1
 8000cca:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000cce:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	3730      	adds	r7, #48	@ 0x30
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	40023800 	.word	0x40023800
 8000ce0:	431bde83 	.word	0x431bde83
 8000ce4:	20000428 	.word	0x20000428
 8000ce8:	40010000 	.word	0x40010000
 8000cec:	20000004 	.word	0x20000004

08000cf0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000cf4:	bf00      	nop
 8000cf6:	e7fd      	b.n	8000cf4 <NMI_Handler+0x4>

08000cf8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cfc:	bf00      	nop
 8000cfe:	e7fd      	b.n	8000cfc <HardFault_Handler+0x4>

08000d00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d04:	bf00      	nop
 8000d06:	e7fd      	b.n	8000d04 <MemManage_Handler+0x4>

08000d08 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d0c:	bf00      	nop
 8000d0e:	e7fd      	b.n	8000d0c <BusFault_Handler+0x4>

08000d10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d14:	bf00      	nop
 8000d16:	e7fd      	b.n	8000d14 <UsageFault_Handler+0x4>

08000d18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d1c:	bf00      	nop
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr

08000d26 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000d26:	b580      	push	{r7, lr}
 8000d28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000d2a:	2001      	movs	r0, #1
 8000d2c:	f000 fb68 	bl	8001400 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000d30:	bf00      	nop
 8000d32:	bd80      	pop	{r7, pc}

08000d34 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000d38:	4802      	ldr	r0, [pc, #8]	@ (8000d44 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000d3a:	f002 fb4b 	bl	80033d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000d3e:	bf00      	nop
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	20000428 	.word	0x20000428

08000d48 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000d4c:	4802      	ldr	r0, [pc, #8]	@ (8000d58 <OTG_FS_IRQHandler+0x10>)
 8000d4e:	f000 fcb3 	bl	80016b8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000d52:	bf00      	nop
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	200056a8 	.word	0x200056a8

08000d5c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d60:	4b06      	ldr	r3, [pc, #24]	@ (8000d7c <SystemInit+0x20>)
 8000d62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d66:	4a05      	ldr	r2, [pc, #20]	@ (8000d7c <SystemInit+0x20>)
 8000d68:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d6c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d70:	bf00      	nop
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	e000ed00 	.word	0xe000ed00

08000d80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d80:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000db8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000d84:	f7ff ffea 	bl	8000d5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d88:	480c      	ldr	r0, [pc, #48]	@ (8000dbc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d8a:	490d      	ldr	r1, [pc, #52]	@ (8000dc0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d8c:	4a0d      	ldr	r2, [pc, #52]	@ (8000dc4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d90:	e002      	b.n	8000d98 <LoopCopyDataInit>

08000d92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d96:	3304      	adds	r3, #4

08000d98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d9c:	d3f9      	bcc.n	8000d92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d9e:	4a0a      	ldr	r2, [pc, #40]	@ (8000dc8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000da0:	4c0a      	ldr	r4, [pc, #40]	@ (8000dcc <LoopFillZerobss+0x22>)
  movs r3, #0
 8000da2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000da4:	e001      	b.n	8000daa <LoopFillZerobss>

08000da6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000da6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000da8:	3204      	adds	r2, #4

08000daa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000daa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dac:	d3fb      	bcc.n	8000da6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dae:	f009 f871 	bl	8009e94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000db2:	f7ff fba7 	bl	8000504 <main>
  bx  lr    
 8000db6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000db8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000dbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dc0:	20000150 	.word	0x20000150
  ldr r2, =_sidata
 8000dc4:	0800a158 	.word	0x0800a158
  ldr r2, =_sbss
 8000dc8:	20000150 	.word	0x20000150
  ldr r4, =_ebss
 8000dcc:	20005eec 	.word	0x20005eec

08000dd0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dd0:	e7fe      	b.n	8000dd0 <ADC_IRQHandler>
	...

08000dd4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000dd8:	4b0e      	ldr	r3, [pc, #56]	@ (8000e14 <HAL_Init+0x40>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a0d      	ldr	r2, [pc, #52]	@ (8000e14 <HAL_Init+0x40>)
 8000dde:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000de2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000de4:	4b0b      	ldr	r3, [pc, #44]	@ (8000e14 <HAL_Init+0x40>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a0a      	ldr	r2, [pc, #40]	@ (8000e14 <HAL_Init+0x40>)
 8000dea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000dee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000df0:	4b08      	ldr	r3, [pc, #32]	@ (8000e14 <HAL_Init+0x40>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a07      	ldr	r2, [pc, #28]	@ (8000e14 <HAL_Init+0x40>)
 8000df6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000dfa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dfc:	2003      	movs	r0, #3
 8000dfe:	f000 f8fc 	bl	8000ffa <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e02:	200f      	movs	r0, #15
 8000e04:	f7ff ff00 	bl	8000c08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e08:	f7ff fed2 	bl	8000bb0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e0c:	2300      	movs	r3, #0
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	40023c00 	.word	0x40023c00

08000e18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e1c:	4b06      	ldr	r3, [pc, #24]	@ (8000e38 <HAL_IncTick+0x20>)
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	461a      	mov	r2, r3
 8000e22:	4b06      	ldr	r3, [pc, #24]	@ (8000e3c <HAL_IncTick+0x24>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	4413      	add	r3, r2
 8000e28:	4a04      	ldr	r2, [pc, #16]	@ (8000e3c <HAL_IncTick+0x24>)
 8000e2a:	6013      	str	r3, [r2, #0]
}
 8000e2c:	bf00      	nop
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	20000008 	.word	0x20000008
 8000e3c:	20000470 	.word	0x20000470

08000e40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  return uwTick;
 8000e44:	4b03      	ldr	r3, [pc, #12]	@ (8000e54 <HAL_GetTick+0x14>)
 8000e46:	681b      	ldr	r3, [r3, #0]
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop
 8000e54:	20000470 	.word	0x20000470

08000e58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b084      	sub	sp, #16
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e60:	f7ff ffee 	bl	8000e40 <HAL_GetTick>
 8000e64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e70:	d005      	beq.n	8000e7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e72:	4b0a      	ldr	r3, [pc, #40]	@ (8000e9c <HAL_Delay+0x44>)
 8000e74:	781b      	ldrb	r3, [r3, #0]
 8000e76:	461a      	mov	r2, r3
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	4413      	add	r3, r2
 8000e7c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e7e:	bf00      	nop
 8000e80:	f7ff ffde 	bl	8000e40 <HAL_GetTick>
 8000e84:	4602      	mov	r2, r0
 8000e86:	68bb      	ldr	r3, [r7, #8]
 8000e88:	1ad3      	subs	r3, r2, r3
 8000e8a:	68fa      	ldr	r2, [r7, #12]
 8000e8c:	429a      	cmp	r2, r3
 8000e8e:	d8f7      	bhi.n	8000e80 <HAL_Delay+0x28>
  {
  }
}
 8000e90:	bf00      	nop
 8000e92:	bf00      	nop
 8000e94:	3710      	adds	r7, #16
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	20000008 	.word	0x20000008

08000ea0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b085      	sub	sp, #20
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	f003 0307 	and.w	r3, r3, #7
 8000eae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000eb0:	4b0c      	ldr	r3, [pc, #48]	@ (8000ee4 <__NVIC_SetPriorityGrouping+0x44>)
 8000eb2:	68db      	ldr	r3, [r3, #12]
 8000eb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eb6:	68ba      	ldr	r2, [r7, #8]
 8000eb8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ec4:	68bb      	ldr	r3, [r7, #8]
 8000ec6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ec8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ecc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ed0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ed2:	4a04      	ldr	r2, [pc, #16]	@ (8000ee4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ed4:	68bb      	ldr	r3, [r7, #8]
 8000ed6:	60d3      	str	r3, [r2, #12]
}
 8000ed8:	bf00      	nop
 8000eda:	3714      	adds	r7, #20
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr
 8000ee4:	e000ed00 	.word	0xe000ed00

08000ee8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000eec:	4b04      	ldr	r3, [pc, #16]	@ (8000f00 <__NVIC_GetPriorityGrouping+0x18>)
 8000eee:	68db      	ldr	r3, [r3, #12]
 8000ef0:	0a1b      	lsrs	r3, r3, #8
 8000ef2:	f003 0307 	and.w	r3, r3, #7
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr
 8000f00:	e000ed00 	.word	0xe000ed00

08000f04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b083      	sub	sp, #12
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	db0b      	blt.n	8000f2e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f16:	79fb      	ldrb	r3, [r7, #7]
 8000f18:	f003 021f 	and.w	r2, r3, #31
 8000f1c:	4907      	ldr	r1, [pc, #28]	@ (8000f3c <__NVIC_EnableIRQ+0x38>)
 8000f1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f22:	095b      	lsrs	r3, r3, #5
 8000f24:	2001      	movs	r0, #1
 8000f26:	fa00 f202 	lsl.w	r2, r0, r2
 8000f2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f2e:	bf00      	nop
 8000f30:	370c      	adds	r7, #12
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	e000e100 	.word	0xe000e100

08000f40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	4603      	mov	r3, r0
 8000f48:	6039      	str	r1, [r7, #0]
 8000f4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	db0a      	blt.n	8000f6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	b2da      	uxtb	r2, r3
 8000f58:	490c      	ldr	r1, [pc, #48]	@ (8000f8c <__NVIC_SetPriority+0x4c>)
 8000f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f5e:	0112      	lsls	r2, r2, #4
 8000f60:	b2d2      	uxtb	r2, r2
 8000f62:	440b      	add	r3, r1
 8000f64:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f68:	e00a      	b.n	8000f80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	b2da      	uxtb	r2, r3
 8000f6e:	4908      	ldr	r1, [pc, #32]	@ (8000f90 <__NVIC_SetPriority+0x50>)
 8000f70:	79fb      	ldrb	r3, [r7, #7]
 8000f72:	f003 030f 	and.w	r3, r3, #15
 8000f76:	3b04      	subs	r3, #4
 8000f78:	0112      	lsls	r2, r2, #4
 8000f7a:	b2d2      	uxtb	r2, r2
 8000f7c:	440b      	add	r3, r1
 8000f7e:	761a      	strb	r2, [r3, #24]
}
 8000f80:	bf00      	nop
 8000f82:	370c      	adds	r7, #12
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr
 8000f8c:	e000e100 	.word	0xe000e100
 8000f90:	e000ed00 	.word	0xe000ed00

08000f94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b089      	sub	sp, #36	@ 0x24
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	60f8      	str	r0, [r7, #12]
 8000f9c:	60b9      	str	r1, [r7, #8]
 8000f9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	f003 0307 	and.w	r3, r3, #7
 8000fa6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fa8:	69fb      	ldr	r3, [r7, #28]
 8000faa:	f1c3 0307 	rsb	r3, r3, #7
 8000fae:	2b04      	cmp	r3, #4
 8000fb0:	bf28      	it	cs
 8000fb2:	2304      	movcs	r3, #4
 8000fb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fb6:	69fb      	ldr	r3, [r7, #28]
 8000fb8:	3304      	adds	r3, #4
 8000fba:	2b06      	cmp	r3, #6
 8000fbc:	d902      	bls.n	8000fc4 <NVIC_EncodePriority+0x30>
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	3b03      	subs	r3, #3
 8000fc2:	e000      	b.n	8000fc6 <NVIC_EncodePriority+0x32>
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fc8:	f04f 32ff 	mov.w	r2, #4294967295
 8000fcc:	69bb      	ldr	r3, [r7, #24]
 8000fce:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd2:	43da      	mvns	r2, r3
 8000fd4:	68bb      	ldr	r3, [r7, #8]
 8000fd6:	401a      	ands	r2, r3
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fdc:	f04f 31ff 	mov.w	r1, #4294967295
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	fa01 f303 	lsl.w	r3, r1, r3
 8000fe6:	43d9      	mvns	r1, r3
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fec:	4313      	orrs	r3, r2
         );
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	3724      	adds	r7, #36	@ 0x24
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr

08000ffa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ffa:	b580      	push	{r7, lr}
 8000ffc:	b082      	sub	sp, #8
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001002:	6878      	ldr	r0, [r7, #4]
 8001004:	f7ff ff4c 	bl	8000ea0 <__NVIC_SetPriorityGrouping>
}
 8001008:	bf00      	nop
 800100a:	3708      	adds	r7, #8
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}

08001010 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001010:	b580      	push	{r7, lr}
 8001012:	b086      	sub	sp, #24
 8001014:	af00      	add	r7, sp, #0
 8001016:	4603      	mov	r3, r0
 8001018:	60b9      	str	r1, [r7, #8]
 800101a:	607a      	str	r2, [r7, #4]
 800101c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800101e:	2300      	movs	r3, #0
 8001020:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001022:	f7ff ff61 	bl	8000ee8 <__NVIC_GetPriorityGrouping>
 8001026:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001028:	687a      	ldr	r2, [r7, #4]
 800102a:	68b9      	ldr	r1, [r7, #8]
 800102c:	6978      	ldr	r0, [r7, #20]
 800102e:	f7ff ffb1 	bl	8000f94 <NVIC_EncodePriority>
 8001032:	4602      	mov	r2, r0
 8001034:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001038:	4611      	mov	r1, r2
 800103a:	4618      	mov	r0, r3
 800103c:	f7ff ff80 	bl	8000f40 <__NVIC_SetPriority>
}
 8001040:	bf00      	nop
 8001042:	3718      	adds	r7, #24
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}

08001048 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	4603      	mov	r3, r0
 8001050:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001052:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001056:	4618      	mov	r0, r3
 8001058:	f7ff ff54 	bl	8000f04 <__NVIC_EnableIRQ>
}
 800105c:	bf00      	nop
 800105e:	3708      	adds	r7, #8
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}

08001064 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001064:	b480      	push	{r7}
 8001066:	b089      	sub	sp, #36	@ 0x24
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
 800106c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800106e:	2300      	movs	r3, #0
 8001070:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001072:	2300      	movs	r3, #0
 8001074:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001076:	2300      	movs	r3, #0
 8001078:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800107a:	2300      	movs	r3, #0
 800107c:	61fb      	str	r3, [r7, #28]
 800107e:	e16b      	b.n	8001358 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001080:	2201      	movs	r2, #1
 8001082:	69fb      	ldr	r3, [r7, #28]
 8001084:	fa02 f303 	lsl.w	r3, r2, r3
 8001088:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	697a      	ldr	r2, [r7, #20]
 8001090:	4013      	ands	r3, r2
 8001092:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001094:	693a      	ldr	r2, [r7, #16]
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	429a      	cmp	r2, r3
 800109a:	f040 815a 	bne.w	8001352 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	f003 0303 	and.w	r3, r3, #3
 80010a6:	2b01      	cmp	r3, #1
 80010a8:	d005      	beq.n	80010b6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010b2:	2b02      	cmp	r3, #2
 80010b4:	d130      	bne.n	8001118 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	689b      	ldr	r3, [r3, #8]
 80010ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010bc:	69fb      	ldr	r3, [r7, #28]
 80010be:	005b      	lsls	r3, r3, #1
 80010c0:	2203      	movs	r2, #3
 80010c2:	fa02 f303 	lsl.w	r3, r2, r3
 80010c6:	43db      	mvns	r3, r3
 80010c8:	69ba      	ldr	r2, [r7, #24]
 80010ca:	4013      	ands	r3, r2
 80010cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	68da      	ldr	r2, [r3, #12]
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	005b      	lsls	r3, r3, #1
 80010d6:	fa02 f303 	lsl.w	r3, r2, r3
 80010da:	69ba      	ldr	r2, [r7, #24]
 80010dc:	4313      	orrs	r3, r2
 80010de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	69ba      	ldr	r2, [r7, #24]
 80010e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010ec:	2201      	movs	r2, #1
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	fa02 f303 	lsl.w	r3, r2, r3
 80010f4:	43db      	mvns	r3, r3
 80010f6:	69ba      	ldr	r2, [r7, #24]
 80010f8:	4013      	ands	r3, r2
 80010fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	091b      	lsrs	r3, r3, #4
 8001102:	f003 0201 	and.w	r2, r3, #1
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	fa02 f303 	lsl.w	r3, r2, r3
 800110c:	69ba      	ldr	r2, [r7, #24]
 800110e:	4313      	orrs	r3, r2
 8001110:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	69ba      	ldr	r2, [r7, #24]
 8001116:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	f003 0303 	and.w	r3, r3, #3
 8001120:	2b03      	cmp	r3, #3
 8001122:	d017      	beq.n	8001154 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	68db      	ldr	r3, [r3, #12]
 8001128:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	005b      	lsls	r3, r3, #1
 800112e:	2203      	movs	r2, #3
 8001130:	fa02 f303 	lsl.w	r3, r2, r3
 8001134:	43db      	mvns	r3, r3
 8001136:	69ba      	ldr	r2, [r7, #24]
 8001138:	4013      	ands	r3, r2
 800113a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	689a      	ldr	r2, [r3, #8]
 8001140:	69fb      	ldr	r3, [r7, #28]
 8001142:	005b      	lsls	r3, r3, #1
 8001144:	fa02 f303 	lsl.w	r3, r2, r3
 8001148:	69ba      	ldr	r2, [r7, #24]
 800114a:	4313      	orrs	r3, r2
 800114c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	69ba      	ldr	r2, [r7, #24]
 8001152:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	f003 0303 	and.w	r3, r3, #3
 800115c:	2b02      	cmp	r3, #2
 800115e:	d123      	bne.n	80011a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001160:	69fb      	ldr	r3, [r7, #28]
 8001162:	08da      	lsrs	r2, r3, #3
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	3208      	adds	r2, #8
 8001168:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800116c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800116e:	69fb      	ldr	r3, [r7, #28]
 8001170:	f003 0307 	and.w	r3, r3, #7
 8001174:	009b      	lsls	r3, r3, #2
 8001176:	220f      	movs	r2, #15
 8001178:	fa02 f303 	lsl.w	r3, r2, r3
 800117c:	43db      	mvns	r3, r3
 800117e:	69ba      	ldr	r2, [r7, #24]
 8001180:	4013      	ands	r3, r2
 8001182:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	691a      	ldr	r2, [r3, #16]
 8001188:	69fb      	ldr	r3, [r7, #28]
 800118a:	f003 0307 	and.w	r3, r3, #7
 800118e:	009b      	lsls	r3, r3, #2
 8001190:	fa02 f303 	lsl.w	r3, r2, r3
 8001194:	69ba      	ldr	r2, [r7, #24]
 8001196:	4313      	orrs	r3, r2
 8001198:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800119a:	69fb      	ldr	r3, [r7, #28]
 800119c:	08da      	lsrs	r2, r3, #3
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	3208      	adds	r2, #8
 80011a2:	69b9      	ldr	r1, [r7, #24]
 80011a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	005b      	lsls	r3, r3, #1
 80011b2:	2203      	movs	r2, #3
 80011b4:	fa02 f303 	lsl.w	r3, r2, r3
 80011b8:	43db      	mvns	r3, r3
 80011ba:	69ba      	ldr	r2, [r7, #24]
 80011bc:	4013      	ands	r3, r2
 80011be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	f003 0203 	and.w	r2, r3, #3
 80011c8:	69fb      	ldr	r3, [r7, #28]
 80011ca:	005b      	lsls	r3, r3, #1
 80011cc:	fa02 f303 	lsl.w	r3, r2, r3
 80011d0:	69ba      	ldr	r2, [r7, #24]
 80011d2:	4313      	orrs	r3, r2
 80011d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	69ba      	ldr	r2, [r7, #24]
 80011da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	f000 80b4 	beq.w	8001352 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ea:	2300      	movs	r3, #0
 80011ec:	60fb      	str	r3, [r7, #12]
 80011ee:	4b60      	ldr	r3, [pc, #384]	@ (8001370 <HAL_GPIO_Init+0x30c>)
 80011f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011f2:	4a5f      	ldr	r2, [pc, #380]	@ (8001370 <HAL_GPIO_Init+0x30c>)
 80011f4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80011fa:	4b5d      	ldr	r3, [pc, #372]	@ (8001370 <HAL_GPIO_Init+0x30c>)
 80011fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001202:	60fb      	str	r3, [r7, #12]
 8001204:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001206:	4a5b      	ldr	r2, [pc, #364]	@ (8001374 <HAL_GPIO_Init+0x310>)
 8001208:	69fb      	ldr	r3, [r7, #28]
 800120a:	089b      	lsrs	r3, r3, #2
 800120c:	3302      	adds	r3, #2
 800120e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001212:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001214:	69fb      	ldr	r3, [r7, #28]
 8001216:	f003 0303 	and.w	r3, r3, #3
 800121a:	009b      	lsls	r3, r3, #2
 800121c:	220f      	movs	r2, #15
 800121e:	fa02 f303 	lsl.w	r3, r2, r3
 8001222:	43db      	mvns	r3, r3
 8001224:	69ba      	ldr	r2, [r7, #24]
 8001226:	4013      	ands	r3, r2
 8001228:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	4a52      	ldr	r2, [pc, #328]	@ (8001378 <HAL_GPIO_Init+0x314>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d02b      	beq.n	800128a <HAL_GPIO_Init+0x226>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4a51      	ldr	r2, [pc, #324]	@ (800137c <HAL_GPIO_Init+0x318>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d025      	beq.n	8001286 <HAL_GPIO_Init+0x222>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4a50      	ldr	r2, [pc, #320]	@ (8001380 <HAL_GPIO_Init+0x31c>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d01f      	beq.n	8001282 <HAL_GPIO_Init+0x21e>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4a4f      	ldr	r2, [pc, #316]	@ (8001384 <HAL_GPIO_Init+0x320>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d019      	beq.n	800127e <HAL_GPIO_Init+0x21a>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4a4e      	ldr	r2, [pc, #312]	@ (8001388 <HAL_GPIO_Init+0x324>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d013      	beq.n	800127a <HAL_GPIO_Init+0x216>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4a4d      	ldr	r2, [pc, #308]	@ (800138c <HAL_GPIO_Init+0x328>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d00d      	beq.n	8001276 <HAL_GPIO_Init+0x212>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	4a4c      	ldr	r2, [pc, #304]	@ (8001390 <HAL_GPIO_Init+0x32c>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d007      	beq.n	8001272 <HAL_GPIO_Init+0x20e>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	4a4b      	ldr	r2, [pc, #300]	@ (8001394 <HAL_GPIO_Init+0x330>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d101      	bne.n	800126e <HAL_GPIO_Init+0x20a>
 800126a:	2307      	movs	r3, #7
 800126c:	e00e      	b.n	800128c <HAL_GPIO_Init+0x228>
 800126e:	2308      	movs	r3, #8
 8001270:	e00c      	b.n	800128c <HAL_GPIO_Init+0x228>
 8001272:	2306      	movs	r3, #6
 8001274:	e00a      	b.n	800128c <HAL_GPIO_Init+0x228>
 8001276:	2305      	movs	r3, #5
 8001278:	e008      	b.n	800128c <HAL_GPIO_Init+0x228>
 800127a:	2304      	movs	r3, #4
 800127c:	e006      	b.n	800128c <HAL_GPIO_Init+0x228>
 800127e:	2303      	movs	r3, #3
 8001280:	e004      	b.n	800128c <HAL_GPIO_Init+0x228>
 8001282:	2302      	movs	r3, #2
 8001284:	e002      	b.n	800128c <HAL_GPIO_Init+0x228>
 8001286:	2301      	movs	r3, #1
 8001288:	e000      	b.n	800128c <HAL_GPIO_Init+0x228>
 800128a:	2300      	movs	r3, #0
 800128c:	69fa      	ldr	r2, [r7, #28]
 800128e:	f002 0203 	and.w	r2, r2, #3
 8001292:	0092      	lsls	r2, r2, #2
 8001294:	4093      	lsls	r3, r2
 8001296:	69ba      	ldr	r2, [r7, #24]
 8001298:	4313      	orrs	r3, r2
 800129a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800129c:	4935      	ldr	r1, [pc, #212]	@ (8001374 <HAL_GPIO_Init+0x310>)
 800129e:	69fb      	ldr	r3, [r7, #28]
 80012a0:	089b      	lsrs	r3, r3, #2
 80012a2:	3302      	adds	r3, #2
 80012a4:	69ba      	ldr	r2, [r7, #24]
 80012a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012aa:	4b3b      	ldr	r3, [pc, #236]	@ (8001398 <HAL_GPIO_Init+0x334>)
 80012ac:	689b      	ldr	r3, [r3, #8]
 80012ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012b0:	693b      	ldr	r3, [r7, #16]
 80012b2:	43db      	mvns	r3, r3
 80012b4:	69ba      	ldr	r2, [r7, #24]
 80012b6:	4013      	ands	r3, r2
 80012b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d003      	beq.n	80012ce <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80012c6:	69ba      	ldr	r2, [r7, #24]
 80012c8:	693b      	ldr	r3, [r7, #16]
 80012ca:	4313      	orrs	r3, r2
 80012cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012ce:	4a32      	ldr	r2, [pc, #200]	@ (8001398 <HAL_GPIO_Init+0x334>)
 80012d0:	69bb      	ldr	r3, [r7, #24]
 80012d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012d4:	4b30      	ldr	r3, [pc, #192]	@ (8001398 <HAL_GPIO_Init+0x334>)
 80012d6:	68db      	ldr	r3, [r3, #12]
 80012d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012da:	693b      	ldr	r3, [r7, #16]
 80012dc:	43db      	mvns	r3, r3
 80012de:	69ba      	ldr	r2, [r7, #24]
 80012e0:	4013      	ands	r3, r2
 80012e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d003      	beq.n	80012f8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80012f0:	69ba      	ldr	r2, [r7, #24]
 80012f2:	693b      	ldr	r3, [r7, #16]
 80012f4:	4313      	orrs	r3, r2
 80012f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012f8:	4a27      	ldr	r2, [pc, #156]	@ (8001398 <HAL_GPIO_Init+0x334>)
 80012fa:	69bb      	ldr	r3, [r7, #24]
 80012fc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80012fe:	4b26      	ldr	r3, [pc, #152]	@ (8001398 <HAL_GPIO_Init+0x334>)
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001304:	693b      	ldr	r3, [r7, #16]
 8001306:	43db      	mvns	r3, r3
 8001308:	69ba      	ldr	r2, [r7, #24]
 800130a:	4013      	ands	r3, r2
 800130c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001316:	2b00      	cmp	r3, #0
 8001318:	d003      	beq.n	8001322 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800131a:	69ba      	ldr	r2, [r7, #24]
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	4313      	orrs	r3, r2
 8001320:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001322:	4a1d      	ldr	r2, [pc, #116]	@ (8001398 <HAL_GPIO_Init+0x334>)
 8001324:	69bb      	ldr	r3, [r7, #24]
 8001326:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001328:	4b1b      	ldr	r3, [pc, #108]	@ (8001398 <HAL_GPIO_Init+0x334>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	43db      	mvns	r3, r3
 8001332:	69ba      	ldr	r2, [r7, #24]
 8001334:	4013      	ands	r3, r2
 8001336:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001340:	2b00      	cmp	r3, #0
 8001342:	d003      	beq.n	800134c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001344:	69ba      	ldr	r2, [r7, #24]
 8001346:	693b      	ldr	r3, [r7, #16]
 8001348:	4313      	orrs	r3, r2
 800134a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800134c:	4a12      	ldr	r2, [pc, #72]	@ (8001398 <HAL_GPIO_Init+0x334>)
 800134e:	69bb      	ldr	r3, [r7, #24]
 8001350:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	3301      	adds	r3, #1
 8001356:	61fb      	str	r3, [r7, #28]
 8001358:	69fb      	ldr	r3, [r7, #28]
 800135a:	2b0f      	cmp	r3, #15
 800135c:	f67f ae90 	bls.w	8001080 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001360:	bf00      	nop
 8001362:	bf00      	nop
 8001364:	3724      	adds	r7, #36	@ 0x24
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	40023800 	.word	0x40023800
 8001374:	40013800 	.word	0x40013800
 8001378:	40020000 	.word	0x40020000
 800137c:	40020400 	.word	0x40020400
 8001380:	40020800 	.word	0x40020800
 8001384:	40020c00 	.word	0x40020c00
 8001388:	40021000 	.word	0x40021000
 800138c:	40021400 	.word	0x40021400
 8001390:	40021800 	.word	0x40021800
 8001394:	40021c00 	.word	0x40021c00
 8001398:	40013c00 	.word	0x40013c00

0800139c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800139c:	b480      	push	{r7}
 800139e:	b085      	sub	sp, #20
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
 80013a4:	460b      	mov	r3, r1
 80013a6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	691a      	ldr	r2, [r3, #16]
 80013ac:	887b      	ldrh	r3, [r7, #2]
 80013ae:	4013      	ands	r3, r2
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d002      	beq.n	80013ba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80013b4:	2301      	movs	r3, #1
 80013b6:	73fb      	strb	r3, [r7, #15]
 80013b8:	e001      	b.n	80013be <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80013ba:	2300      	movs	r3, #0
 80013bc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80013be:	7bfb      	ldrb	r3, [r7, #15]
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	3714      	adds	r7, #20
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr

080013cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
 80013d4:	460b      	mov	r3, r1
 80013d6:	807b      	strh	r3, [r7, #2]
 80013d8:	4613      	mov	r3, r2
 80013da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013dc:	787b      	ldrb	r3, [r7, #1]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d003      	beq.n	80013ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013e2:	887a      	ldrh	r2, [r7, #2]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013e8:	e003      	b.n	80013f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013ea:	887b      	ldrh	r3, [r7, #2]
 80013ec:	041a      	lsls	r2, r3, #16
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	619a      	str	r2, [r3, #24]
}
 80013f2:	bf00      	nop
 80013f4:	370c      	adds	r7, #12
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr
	...

08001400 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0
 8001406:	4603      	mov	r3, r0
 8001408:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800140a:	4b08      	ldr	r3, [pc, #32]	@ (800142c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800140c:	695a      	ldr	r2, [r3, #20]
 800140e:	88fb      	ldrh	r3, [r7, #6]
 8001410:	4013      	ands	r3, r2
 8001412:	2b00      	cmp	r3, #0
 8001414:	d006      	beq.n	8001424 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001416:	4a05      	ldr	r2, [pc, #20]	@ (800142c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001418:	88fb      	ldrh	r3, [r7, #6]
 800141a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800141c:	88fb      	ldrh	r3, [r7, #6]
 800141e:	4618      	mov	r0, r3
 8001420:	f7ff f9c2 	bl	80007a8 <HAL_GPIO_EXTI_Callback>
  }
}
 8001424:	bf00      	nop
 8001426:	3708      	adds	r7, #8
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	40013c00 	.word	0x40013c00

08001430 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b086      	sub	sp, #24
 8001434:	af02      	add	r7, sp, #8
 8001436:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d101      	bne.n	8001442 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800143e:	2301      	movs	r3, #1
 8001440:	e101      	b.n	8001646 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800144e:	b2db      	uxtb	r3, r3
 8001450:	2b00      	cmp	r3, #0
 8001452:	d106      	bne.n	8001462 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2200      	movs	r2, #0
 8001458:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800145c:	6878      	ldr	r0, [r7, #4]
 800145e:	f008 f9a7 	bl	80097b0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2203      	movs	r2, #3
 8001466:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800146a:	68bb      	ldr	r3, [r7, #8]
 800146c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001470:	d102      	bne.n	8001478 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2200      	movs	r2, #0
 8001476:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4618      	mov	r0, r3
 800147e:	f002 fa98 	bl	80039b2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6818      	ldr	r0, [r3, #0]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	7c1a      	ldrb	r2, [r3, #16]
 800148a:	f88d 2000 	strb.w	r2, [sp]
 800148e:	3304      	adds	r3, #4
 8001490:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001492:	f002 f977 	bl	8003784 <USB_CoreInit>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d005      	beq.n	80014a8 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2202      	movs	r2, #2
 80014a0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80014a4:	2301      	movs	r3, #1
 80014a6:	e0ce      	b.n	8001646 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	2100      	movs	r1, #0
 80014ae:	4618      	mov	r0, r3
 80014b0:	f002 fa90 	bl	80039d4 <USB_SetCurrentMode>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d005      	beq.n	80014c6 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	2202      	movs	r2, #2
 80014be:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80014c2:	2301      	movs	r3, #1
 80014c4:	e0bf      	b.n	8001646 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014c6:	2300      	movs	r3, #0
 80014c8:	73fb      	strb	r3, [r7, #15]
 80014ca:	e04a      	b.n	8001562 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80014cc:	7bfa      	ldrb	r2, [r7, #15]
 80014ce:	6879      	ldr	r1, [r7, #4]
 80014d0:	4613      	mov	r3, r2
 80014d2:	00db      	lsls	r3, r3, #3
 80014d4:	4413      	add	r3, r2
 80014d6:	009b      	lsls	r3, r3, #2
 80014d8:	440b      	add	r3, r1
 80014da:	3315      	adds	r3, #21
 80014dc:	2201      	movs	r2, #1
 80014de:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80014e0:	7bfa      	ldrb	r2, [r7, #15]
 80014e2:	6879      	ldr	r1, [r7, #4]
 80014e4:	4613      	mov	r3, r2
 80014e6:	00db      	lsls	r3, r3, #3
 80014e8:	4413      	add	r3, r2
 80014ea:	009b      	lsls	r3, r3, #2
 80014ec:	440b      	add	r3, r1
 80014ee:	3314      	adds	r3, #20
 80014f0:	7bfa      	ldrb	r2, [r7, #15]
 80014f2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80014f4:	7bfa      	ldrb	r2, [r7, #15]
 80014f6:	7bfb      	ldrb	r3, [r7, #15]
 80014f8:	b298      	uxth	r0, r3
 80014fa:	6879      	ldr	r1, [r7, #4]
 80014fc:	4613      	mov	r3, r2
 80014fe:	00db      	lsls	r3, r3, #3
 8001500:	4413      	add	r3, r2
 8001502:	009b      	lsls	r3, r3, #2
 8001504:	440b      	add	r3, r1
 8001506:	332e      	adds	r3, #46	@ 0x2e
 8001508:	4602      	mov	r2, r0
 800150a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800150c:	7bfa      	ldrb	r2, [r7, #15]
 800150e:	6879      	ldr	r1, [r7, #4]
 8001510:	4613      	mov	r3, r2
 8001512:	00db      	lsls	r3, r3, #3
 8001514:	4413      	add	r3, r2
 8001516:	009b      	lsls	r3, r3, #2
 8001518:	440b      	add	r3, r1
 800151a:	3318      	adds	r3, #24
 800151c:	2200      	movs	r2, #0
 800151e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001520:	7bfa      	ldrb	r2, [r7, #15]
 8001522:	6879      	ldr	r1, [r7, #4]
 8001524:	4613      	mov	r3, r2
 8001526:	00db      	lsls	r3, r3, #3
 8001528:	4413      	add	r3, r2
 800152a:	009b      	lsls	r3, r3, #2
 800152c:	440b      	add	r3, r1
 800152e:	331c      	adds	r3, #28
 8001530:	2200      	movs	r2, #0
 8001532:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001534:	7bfa      	ldrb	r2, [r7, #15]
 8001536:	6879      	ldr	r1, [r7, #4]
 8001538:	4613      	mov	r3, r2
 800153a:	00db      	lsls	r3, r3, #3
 800153c:	4413      	add	r3, r2
 800153e:	009b      	lsls	r3, r3, #2
 8001540:	440b      	add	r3, r1
 8001542:	3320      	adds	r3, #32
 8001544:	2200      	movs	r2, #0
 8001546:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001548:	7bfa      	ldrb	r2, [r7, #15]
 800154a:	6879      	ldr	r1, [r7, #4]
 800154c:	4613      	mov	r3, r2
 800154e:	00db      	lsls	r3, r3, #3
 8001550:	4413      	add	r3, r2
 8001552:	009b      	lsls	r3, r3, #2
 8001554:	440b      	add	r3, r1
 8001556:	3324      	adds	r3, #36	@ 0x24
 8001558:	2200      	movs	r2, #0
 800155a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800155c:	7bfb      	ldrb	r3, [r7, #15]
 800155e:	3301      	adds	r3, #1
 8001560:	73fb      	strb	r3, [r7, #15]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	791b      	ldrb	r3, [r3, #4]
 8001566:	7bfa      	ldrb	r2, [r7, #15]
 8001568:	429a      	cmp	r2, r3
 800156a:	d3af      	bcc.n	80014cc <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800156c:	2300      	movs	r3, #0
 800156e:	73fb      	strb	r3, [r7, #15]
 8001570:	e044      	b.n	80015fc <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001572:	7bfa      	ldrb	r2, [r7, #15]
 8001574:	6879      	ldr	r1, [r7, #4]
 8001576:	4613      	mov	r3, r2
 8001578:	00db      	lsls	r3, r3, #3
 800157a:	4413      	add	r3, r2
 800157c:	009b      	lsls	r3, r3, #2
 800157e:	440b      	add	r3, r1
 8001580:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001584:	2200      	movs	r2, #0
 8001586:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001588:	7bfa      	ldrb	r2, [r7, #15]
 800158a:	6879      	ldr	r1, [r7, #4]
 800158c:	4613      	mov	r3, r2
 800158e:	00db      	lsls	r3, r3, #3
 8001590:	4413      	add	r3, r2
 8001592:	009b      	lsls	r3, r3, #2
 8001594:	440b      	add	r3, r1
 8001596:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800159a:	7bfa      	ldrb	r2, [r7, #15]
 800159c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800159e:	7bfa      	ldrb	r2, [r7, #15]
 80015a0:	6879      	ldr	r1, [r7, #4]
 80015a2:	4613      	mov	r3, r2
 80015a4:	00db      	lsls	r3, r3, #3
 80015a6:	4413      	add	r3, r2
 80015a8:	009b      	lsls	r3, r3, #2
 80015aa:	440b      	add	r3, r1
 80015ac:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80015b0:	2200      	movs	r2, #0
 80015b2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80015b4:	7bfa      	ldrb	r2, [r7, #15]
 80015b6:	6879      	ldr	r1, [r7, #4]
 80015b8:	4613      	mov	r3, r2
 80015ba:	00db      	lsls	r3, r3, #3
 80015bc:	4413      	add	r3, r2
 80015be:	009b      	lsls	r3, r3, #2
 80015c0:	440b      	add	r3, r1
 80015c2:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80015c6:	2200      	movs	r2, #0
 80015c8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80015ca:	7bfa      	ldrb	r2, [r7, #15]
 80015cc:	6879      	ldr	r1, [r7, #4]
 80015ce:	4613      	mov	r3, r2
 80015d0:	00db      	lsls	r3, r3, #3
 80015d2:	4413      	add	r3, r2
 80015d4:	009b      	lsls	r3, r3, #2
 80015d6:	440b      	add	r3, r1
 80015d8:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80015dc:	2200      	movs	r2, #0
 80015de:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80015e0:	7bfa      	ldrb	r2, [r7, #15]
 80015e2:	6879      	ldr	r1, [r7, #4]
 80015e4:	4613      	mov	r3, r2
 80015e6:	00db      	lsls	r3, r3, #3
 80015e8:	4413      	add	r3, r2
 80015ea:	009b      	lsls	r3, r3, #2
 80015ec:	440b      	add	r3, r1
 80015ee:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80015f2:	2200      	movs	r2, #0
 80015f4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015f6:	7bfb      	ldrb	r3, [r7, #15]
 80015f8:	3301      	adds	r3, #1
 80015fa:	73fb      	strb	r3, [r7, #15]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	791b      	ldrb	r3, [r3, #4]
 8001600:	7bfa      	ldrb	r2, [r7, #15]
 8001602:	429a      	cmp	r2, r3
 8001604:	d3b5      	bcc.n	8001572 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6818      	ldr	r0, [r3, #0]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	7c1a      	ldrb	r2, [r3, #16]
 800160e:	f88d 2000 	strb.w	r2, [sp]
 8001612:	3304      	adds	r3, #4
 8001614:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001616:	f002 fa29 	bl	8003a6c <USB_DevInit>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d005      	beq.n	800162c <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2202      	movs	r2, #2
 8001624:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001628:	2301      	movs	r3, #1
 800162a:	e00c      	b.n	8001646 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2200      	movs	r2, #0
 8001630:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2201      	movs	r2, #1
 8001636:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4618      	mov	r0, r3
 8001640:	f003 fa73 	bl	8004b2a <USB_DevDisconnect>

  return HAL_OK;
 8001644:	2300      	movs	r3, #0
}
 8001646:	4618      	mov	r0, r3
 8001648:	3710      	adds	r7, #16
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}

0800164e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800164e:	b580      	push	{r7, lr}
 8001650:	b084      	sub	sp, #16
 8001652:	af00      	add	r7, sp, #0
 8001654:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001662:	2b01      	cmp	r3, #1
 8001664:	d101      	bne.n	800166a <HAL_PCD_Start+0x1c>
 8001666:	2302      	movs	r3, #2
 8001668:	e022      	b.n	80016b0 <HAL_PCD_Start+0x62>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2201      	movs	r2, #1
 800166e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	68db      	ldr	r3, [r3, #12]
 8001676:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800167a:	2b00      	cmp	r3, #0
 800167c:	d009      	beq.n	8001692 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001682:	2b01      	cmp	r3, #1
 8001684:	d105      	bne.n	8001692 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800168a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4618      	mov	r0, r3
 8001698:	f002 f97a 	bl	8003990 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4618      	mov	r0, r3
 80016a2:	f003 fa21 	bl	8004ae8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2200      	movs	r2, #0
 80016aa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80016ae:	2300      	movs	r3, #0
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	3710      	adds	r7, #16
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}

080016b8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80016b8:	b590      	push	{r4, r7, lr}
 80016ba:	b08d      	sub	sp, #52	@ 0x34
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80016c6:	6a3b      	ldr	r3, [r7, #32]
 80016c8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4618      	mov	r0, r3
 80016d0:	f003 fadf 	bl	8004c92 <USB_GetMode>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	f040 848c 	bne.w	8001ff4 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4618      	mov	r0, r3
 80016e2:	f003 fa43 	bl	8004b6c <USB_ReadInterrupts>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	f000 8482 	beq.w	8001ff2 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80016ee:	69fb      	ldr	r3, [r7, #28]
 80016f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80016f4:	689b      	ldr	r3, [r3, #8]
 80016f6:	0a1b      	lsrs	r3, r3, #8
 80016f8:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4618      	mov	r0, r3
 8001708:	f003 fa30 	bl	8004b6c <USB_ReadInterrupts>
 800170c:	4603      	mov	r3, r0
 800170e:	f003 0302 	and.w	r3, r3, #2
 8001712:	2b02      	cmp	r3, #2
 8001714:	d107      	bne.n	8001726 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	695a      	ldr	r2, [r3, #20]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f002 0202 	and.w	r2, r2, #2
 8001724:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4618      	mov	r0, r3
 800172c:	f003 fa1e 	bl	8004b6c <USB_ReadInterrupts>
 8001730:	4603      	mov	r3, r0
 8001732:	f003 0310 	and.w	r3, r3, #16
 8001736:	2b10      	cmp	r3, #16
 8001738:	d161      	bne.n	80017fe <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	699a      	ldr	r2, [r3, #24]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f022 0210 	bic.w	r2, r2, #16
 8001748:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800174a:	6a3b      	ldr	r3, [r7, #32]
 800174c:	6a1b      	ldr	r3, [r3, #32]
 800174e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001750:	69bb      	ldr	r3, [r7, #24]
 8001752:	f003 020f 	and.w	r2, r3, #15
 8001756:	4613      	mov	r3, r2
 8001758:	00db      	lsls	r3, r3, #3
 800175a:	4413      	add	r3, r2
 800175c:	009b      	lsls	r3, r3, #2
 800175e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001762:	687a      	ldr	r2, [r7, #4]
 8001764:	4413      	add	r3, r2
 8001766:	3304      	adds	r3, #4
 8001768:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800176a:	69bb      	ldr	r3, [r7, #24]
 800176c:	0c5b      	lsrs	r3, r3, #17
 800176e:	f003 030f 	and.w	r3, r3, #15
 8001772:	2b02      	cmp	r3, #2
 8001774:	d124      	bne.n	80017c0 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001776:	69ba      	ldr	r2, [r7, #24]
 8001778:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800177c:	4013      	ands	r3, r2
 800177e:	2b00      	cmp	r3, #0
 8001780:	d035      	beq.n	80017ee <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001786:	69bb      	ldr	r3, [r7, #24]
 8001788:	091b      	lsrs	r3, r3, #4
 800178a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800178c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001790:	b29b      	uxth	r3, r3
 8001792:	461a      	mov	r2, r3
 8001794:	6a38      	ldr	r0, [r7, #32]
 8001796:	f003 f855 	bl	8004844 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	68da      	ldr	r2, [r3, #12]
 800179e:	69bb      	ldr	r3, [r7, #24]
 80017a0:	091b      	lsrs	r3, r3, #4
 80017a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80017a6:	441a      	add	r2, r3
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	695a      	ldr	r2, [r3, #20]
 80017b0:	69bb      	ldr	r3, [r7, #24]
 80017b2:	091b      	lsrs	r3, r3, #4
 80017b4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80017b8:	441a      	add	r2, r3
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	615a      	str	r2, [r3, #20]
 80017be:	e016      	b.n	80017ee <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80017c0:	69bb      	ldr	r3, [r7, #24]
 80017c2:	0c5b      	lsrs	r3, r3, #17
 80017c4:	f003 030f 	and.w	r3, r3, #15
 80017c8:	2b06      	cmp	r3, #6
 80017ca:	d110      	bne.n	80017ee <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80017d2:	2208      	movs	r2, #8
 80017d4:	4619      	mov	r1, r3
 80017d6:	6a38      	ldr	r0, [r7, #32]
 80017d8:	f003 f834 	bl	8004844 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	695a      	ldr	r2, [r3, #20]
 80017e0:	69bb      	ldr	r3, [r7, #24]
 80017e2:	091b      	lsrs	r3, r3, #4
 80017e4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80017e8:	441a      	add	r2, r3
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	699a      	ldr	r2, [r3, #24]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f042 0210 	orr.w	r2, r2, #16
 80017fc:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4618      	mov	r0, r3
 8001804:	f003 f9b2 	bl	8004b6c <USB_ReadInterrupts>
 8001808:	4603      	mov	r3, r0
 800180a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800180e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8001812:	f040 80a7 	bne.w	8001964 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001816:	2300      	movs	r3, #0
 8001818:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4618      	mov	r0, r3
 8001820:	f003 f9b7 	bl	8004b92 <USB_ReadDevAllOutEpInterrupt>
 8001824:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8001826:	e099      	b.n	800195c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001828:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800182a:	f003 0301 	and.w	r3, r3, #1
 800182e:	2b00      	cmp	r3, #0
 8001830:	f000 808e 	beq.w	8001950 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800183a:	b2d2      	uxtb	r2, r2
 800183c:	4611      	mov	r1, r2
 800183e:	4618      	mov	r0, r3
 8001840:	f003 f9db 	bl	8004bfa <USB_ReadDevOutEPInterrupt>
 8001844:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	f003 0301 	and.w	r3, r3, #1
 800184c:	2b00      	cmp	r3, #0
 800184e:	d00c      	beq.n	800186a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001852:	015a      	lsls	r2, r3, #5
 8001854:	69fb      	ldr	r3, [r7, #28]
 8001856:	4413      	add	r3, r2
 8001858:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800185c:	461a      	mov	r2, r3
 800185e:	2301      	movs	r3, #1
 8001860:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001862:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001864:	6878      	ldr	r0, [r7, #4]
 8001866:	f000 fea3 	bl	80025b0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	f003 0308 	and.w	r3, r3, #8
 8001870:	2b00      	cmp	r3, #0
 8001872:	d00c      	beq.n	800188e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001876:	015a      	lsls	r2, r3, #5
 8001878:	69fb      	ldr	r3, [r7, #28]
 800187a:	4413      	add	r3, r2
 800187c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001880:	461a      	mov	r2, r3
 8001882:	2308      	movs	r3, #8
 8001884:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001886:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001888:	6878      	ldr	r0, [r7, #4]
 800188a:	f000 ff79 	bl	8002780 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	f003 0310 	and.w	r3, r3, #16
 8001894:	2b00      	cmp	r3, #0
 8001896:	d008      	beq.n	80018aa <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001898:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800189a:	015a      	lsls	r2, r3, #5
 800189c:	69fb      	ldr	r3, [r7, #28]
 800189e:	4413      	add	r3, r2
 80018a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80018a4:	461a      	mov	r2, r3
 80018a6:	2310      	movs	r3, #16
 80018a8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	f003 0302 	and.w	r3, r3, #2
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d030      	beq.n	8001916 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80018b4:	6a3b      	ldr	r3, [r7, #32]
 80018b6:	695b      	ldr	r3, [r3, #20]
 80018b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80018bc:	2b80      	cmp	r3, #128	@ 0x80
 80018be:	d109      	bne.n	80018d4 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80018c0:	69fb      	ldr	r3, [r7, #28]
 80018c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	69fa      	ldr	r2, [r7, #28]
 80018ca:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80018ce:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80018d2:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80018d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80018d6:	4613      	mov	r3, r2
 80018d8:	00db      	lsls	r3, r3, #3
 80018da:	4413      	add	r3, r2
 80018dc:	009b      	lsls	r3, r3, #2
 80018de:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80018e2:	687a      	ldr	r2, [r7, #4]
 80018e4:	4413      	add	r3, r2
 80018e6:	3304      	adds	r3, #4
 80018e8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	78db      	ldrb	r3, [r3, #3]
 80018ee:	2b01      	cmp	r3, #1
 80018f0:	d108      	bne.n	8001904 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80018f2:	697b      	ldr	r3, [r7, #20]
 80018f4:	2200      	movs	r2, #0
 80018f6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80018f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018fa:	b2db      	uxtb	r3, r3
 80018fc:	4619      	mov	r1, r3
 80018fe:	6878      	ldr	r0, [r7, #4]
 8001900:	f008 f85c 	bl	80099bc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001904:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001906:	015a      	lsls	r2, r3, #5
 8001908:	69fb      	ldr	r3, [r7, #28]
 800190a:	4413      	add	r3, r2
 800190c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001910:	461a      	mov	r2, r3
 8001912:	2302      	movs	r3, #2
 8001914:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	f003 0320 	and.w	r3, r3, #32
 800191c:	2b00      	cmp	r3, #0
 800191e:	d008      	beq.n	8001932 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001922:	015a      	lsls	r2, r3, #5
 8001924:	69fb      	ldr	r3, [r7, #28]
 8001926:	4413      	add	r3, r2
 8001928:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800192c:	461a      	mov	r2, r3
 800192e:	2320      	movs	r3, #32
 8001930:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001938:	2b00      	cmp	r3, #0
 800193a:	d009      	beq.n	8001950 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800193c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800193e:	015a      	lsls	r2, r3, #5
 8001940:	69fb      	ldr	r3, [r7, #28]
 8001942:	4413      	add	r3, r2
 8001944:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001948:	461a      	mov	r2, r3
 800194a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800194e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001952:	3301      	adds	r3, #1
 8001954:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8001956:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001958:	085b      	lsrs	r3, r3, #1
 800195a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800195c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800195e:	2b00      	cmp	r3, #0
 8001960:	f47f af62 	bne.w	8001828 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4618      	mov	r0, r3
 800196a:	f003 f8ff 	bl	8004b6c <USB_ReadInterrupts>
 800196e:	4603      	mov	r3, r0
 8001970:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001974:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001978:	f040 80db 	bne.w	8001b32 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4618      	mov	r0, r3
 8001982:	f003 f920 	bl	8004bc6 <USB_ReadDevAllInEpInterrupt>
 8001986:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8001988:	2300      	movs	r3, #0
 800198a:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800198c:	e0cd      	b.n	8001b2a <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800198e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001990:	f003 0301 	and.w	r3, r3, #1
 8001994:	2b00      	cmp	r3, #0
 8001996:	f000 80c2 	beq.w	8001b1e <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80019a0:	b2d2      	uxtb	r2, r2
 80019a2:	4611      	mov	r1, r2
 80019a4:	4618      	mov	r0, r3
 80019a6:	f003 f946 	bl	8004c36 <USB_ReadDevInEPInterrupt>
 80019aa:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	f003 0301 	and.w	r3, r3, #1
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d057      	beq.n	8001a66 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80019b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019b8:	f003 030f 	and.w	r3, r3, #15
 80019bc:	2201      	movs	r2, #1
 80019be:	fa02 f303 	lsl.w	r3, r2, r3
 80019c2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80019c4:	69fb      	ldr	r3, [r7, #28]
 80019c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80019ca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	43db      	mvns	r3, r3
 80019d0:	69f9      	ldr	r1, [r7, #28]
 80019d2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80019d6:	4013      	ands	r3, r2
 80019d8:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80019da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019dc:	015a      	lsls	r2, r3, #5
 80019de:	69fb      	ldr	r3, [r7, #28]
 80019e0:	4413      	add	r3, r2
 80019e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80019e6:	461a      	mov	r2, r3
 80019e8:	2301      	movs	r3, #1
 80019ea:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	799b      	ldrb	r3, [r3, #6]
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d132      	bne.n	8001a5a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80019f4:	6879      	ldr	r1, [r7, #4]
 80019f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80019f8:	4613      	mov	r3, r2
 80019fa:	00db      	lsls	r3, r3, #3
 80019fc:	4413      	add	r3, r2
 80019fe:	009b      	lsls	r3, r3, #2
 8001a00:	440b      	add	r3, r1
 8001a02:	3320      	adds	r3, #32
 8001a04:	6819      	ldr	r1, [r3, #0]
 8001a06:	6878      	ldr	r0, [r7, #4]
 8001a08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a0a:	4613      	mov	r3, r2
 8001a0c:	00db      	lsls	r3, r3, #3
 8001a0e:	4413      	add	r3, r2
 8001a10:	009b      	lsls	r3, r3, #2
 8001a12:	4403      	add	r3, r0
 8001a14:	331c      	adds	r3, #28
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4419      	add	r1, r3
 8001a1a:	6878      	ldr	r0, [r7, #4]
 8001a1c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a1e:	4613      	mov	r3, r2
 8001a20:	00db      	lsls	r3, r3, #3
 8001a22:	4413      	add	r3, r2
 8001a24:	009b      	lsls	r3, r3, #2
 8001a26:	4403      	add	r3, r0
 8001a28:	3320      	adds	r3, #32
 8001a2a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001a2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d113      	bne.n	8001a5a <HAL_PCD_IRQHandler+0x3a2>
 8001a32:	6879      	ldr	r1, [r7, #4]
 8001a34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a36:	4613      	mov	r3, r2
 8001a38:	00db      	lsls	r3, r3, #3
 8001a3a:	4413      	add	r3, r2
 8001a3c:	009b      	lsls	r3, r3, #2
 8001a3e:	440b      	add	r3, r1
 8001a40:	3324      	adds	r3, #36	@ 0x24
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d108      	bne.n	8001a5a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6818      	ldr	r0, [r3, #0]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001a52:	461a      	mov	r2, r3
 8001a54:	2101      	movs	r1, #1
 8001a56:	f003 f94d 	bl	8004cf4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a5c:	b2db      	uxtb	r3, r3
 8001a5e:	4619      	mov	r1, r3
 8001a60:	6878      	ldr	r0, [r7, #4]
 8001a62:	f007 ff26 	bl	80098b2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	f003 0308 	and.w	r3, r3, #8
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d008      	beq.n	8001a82 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001a70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a72:	015a      	lsls	r2, r3, #5
 8001a74:	69fb      	ldr	r3, [r7, #28]
 8001a76:	4413      	add	r3, r2
 8001a78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001a7c:	461a      	mov	r2, r3
 8001a7e:	2308      	movs	r3, #8
 8001a80:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	f003 0310 	and.w	r3, r3, #16
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d008      	beq.n	8001a9e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001a8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a8e:	015a      	lsls	r2, r3, #5
 8001a90:	69fb      	ldr	r3, [r7, #28]
 8001a92:	4413      	add	r3, r2
 8001a94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001a98:	461a      	mov	r2, r3
 8001a9a:	2310      	movs	r3, #16
 8001a9c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d008      	beq.n	8001aba <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001aa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aaa:	015a      	lsls	r2, r3, #5
 8001aac:	69fb      	ldr	r3, [r7, #28]
 8001aae:	4413      	add	r3, r2
 8001ab0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001ab4:	461a      	mov	r2, r3
 8001ab6:	2340      	movs	r3, #64	@ 0x40
 8001ab8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	f003 0302 	and.w	r3, r3, #2
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d023      	beq.n	8001b0c <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001ac4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001ac6:	6a38      	ldr	r0, [r7, #32]
 8001ac8:	f002 f934 	bl	8003d34 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001acc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ace:	4613      	mov	r3, r2
 8001ad0:	00db      	lsls	r3, r3, #3
 8001ad2:	4413      	add	r3, r2
 8001ad4:	009b      	lsls	r3, r3, #2
 8001ad6:	3310      	adds	r3, #16
 8001ad8:	687a      	ldr	r2, [r7, #4]
 8001ada:	4413      	add	r3, r2
 8001adc:	3304      	adds	r3, #4
 8001ade:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	78db      	ldrb	r3, [r3, #3]
 8001ae4:	2b01      	cmp	r3, #1
 8001ae6:	d108      	bne.n	8001afa <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	2200      	movs	r2, #0
 8001aec:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001af0:	b2db      	uxtb	r3, r3
 8001af2:	4619      	mov	r1, r3
 8001af4:	6878      	ldr	r0, [r7, #4]
 8001af6:	f007 ff73 	bl	80099e0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001afc:	015a      	lsls	r2, r3, #5
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	4413      	add	r3, r2
 8001b02:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001b06:	461a      	mov	r2, r3
 8001b08:	2302      	movs	r3, #2
 8001b0a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001b0c:	693b      	ldr	r3, [r7, #16]
 8001b0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d003      	beq.n	8001b1e <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001b16:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001b18:	6878      	ldr	r0, [r7, #4]
 8001b1a:	f000 fcbd 	bl	8002498 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b20:	3301      	adds	r3, #1
 8001b22:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8001b24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b26:	085b      	lsrs	r3, r3, #1
 8001b28:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8001b2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	f47f af2e 	bne.w	800198e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4618      	mov	r0, r3
 8001b38:	f003 f818 	bl	8004b6c <USB_ReadInterrupts>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001b42:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001b46:	d122      	bne.n	8001b8e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001b48:	69fb      	ldr	r3, [r7, #28]
 8001b4a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	69fa      	ldr	r2, [r7, #28]
 8001b52:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001b56:	f023 0301 	bic.w	r3, r3, #1
 8001b5a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8001b62:	2b01      	cmp	r3, #1
 8001b64:	d108      	bne.n	8001b78 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2200      	movs	r2, #0
 8001b6a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001b6e:	2100      	movs	r1, #0
 8001b70:	6878      	ldr	r0, [r7, #4]
 8001b72:	f000 fea3 	bl	80028bc <HAL_PCDEx_LPM_Callback>
 8001b76:	e002      	b.n	8001b7e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001b78:	6878      	ldr	r0, [r7, #4]
 8001b7a:	f007 ff11 	bl	80099a0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	695a      	ldr	r2, [r3, #20]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8001b8c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4618      	mov	r0, r3
 8001b94:	f002 ffea 	bl	8004b6c <USB_ReadInterrupts>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001b9e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001ba2:	d112      	bne.n	8001bca <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001ba4:	69fb      	ldr	r3, [r7, #28]
 8001ba6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	f003 0301 	and.w	r3, r3, #1
 8001bb0:	2b01      	cmp	r3, #1
 8001bb2:	d102      	bne.n	8001bba <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001bb4:	6878      	ldr	r0, [r7, #4]
 8001bb6:	f007 fecd 	bl	8009954 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	695a      	ldr	r2, [r3, #20]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8001bc8:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f002 ffcc 	bl	8004b6c <USB_ReadInterrupts>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001bda:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001bde:	f040 80b7 	bne.w	8001d50 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001be2:	69fb      	ldr	r3, [r7, #28]
 8001be4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	69fa      	ldr	r2, [r7, #28]
 8001bec:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001bf0:	f023 0301 	bic.w	r3, r3, #1
 8001bf4:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	2110      	movs	r1, #16
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f002 f899 	bl	8003d34 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c02:	2300      	movs	r3, #0
 8001c04:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001c06:	e046      	b.n	8001c96 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001c08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c0a:	015a      	lsls	r2, r3, #5
 8001c0c:	69fb      	ldr	r3, [r7, #28]
 8001c0e:	4413      	add	r3, r2
 8001c10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001c14:	461a      	mov	r2, r3
 8001c16:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8001c1a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001c1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c1e:	015a      	lsls	r2, r3, #5
 8001c20:	69fb      	ldr	r3, [r7, #28]
 8001c22:	4413      	add	r3, r2
 8001c24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001c2c:	0151      	lsls	r1, r2, #5
 8001c2e:	69fa      	ldr	r2, [r7, #28]
 8001c30:	440a      	add	r2, r1
 8001c32:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8001c36:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001c3a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001c3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c3e:	015a      	lsls	r2, r3, #5
 8001c40:	69fb      	ldr	r3, [r7, #28]
 8001c42:	4413      	add	r3, r2
 8001c44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001c48:	461a      	mov	r2, r3
 8001c4a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8001c4e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001c50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c52:	015a      	lsls	r2, r3, #5
 8001c54:	69fb      	ldr	r3, [r7, #28]
 8001c56:	4413      	add	r3, r2
 8001c58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001c60:	0151      	lsls	r1, r2, #5
 8001c62:	69fa      	ldr	r2, [r7, #28]
 8001c64:	440a      	add	r2, r1
 8001c66:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8001c6a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001c6e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001c70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c72:	015a      	lsls	r2, r3, #5
 8001c74:	69fb      	ldr	r3, [r7, #28]
 8001c76:	4413      	add	r3, r2
 8001c78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001c80:	0151      	lsls	r1, r2, #5
 8001c82:	69fa      	ldr	r2, [r7, #28]
 8001c84:	440a      	add	r2, r1
 8001c86:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8001c8a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001c8e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c92:	3301      	adds	r3, #1
 8001c94:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	791b      	ldrb	r3, [r3, #4]
 8001c9a:	461a      	mov	r2, r3
 8001c9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d3b2      	bcc.n	8001c08 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001ca2:	69fb      	ldr	r3, [r7, #28]
 8001ca4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001ca8:	69db      	ldr	r3, [r3, #28]
 8001caa:	69fa      	ldr	r2, [r7, #28]
 8001cac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001cb0:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8001cb4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	7bdb      	ldrb	r3, [r3, #15]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d016      	beq.n	8001cec <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001cc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001cc8:	69fa      	ldr	r2, [r7, #28]
 8001cca:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001cce:	f043 030b 	orr.w	r3, r3, #11
 8001cd2:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001cdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cde:	69fa      	ldr	r2, [r7, #28]
 8001ce0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001ce4:	f043 030b 	orr.w	r3, r3, #11
 8001ce8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cea:	e015      	b.n	8001d18 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001cec:	69fb      	ldr	r3, [r7, #28]
 8001cee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001cf2:	695b      	ldr	r3, [r3, #20]
 8001cf4:	69fa      	ldr	r2, [r7, #28]
 8001cf6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001cfa:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001cfe:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8001d02:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001d04:	69fb      	ldr	r3, [r7, #28]
 8001d06:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001d0a:	691b      	ldr	r3, [r3, #16]
 8001d0c:	69fa      	ldr	r2, [r7, #28]
 8001d0e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001d12:	f043 030b 	orr.w	r3, r3, #11
 8001d16:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001d18:	69fb      	ldr	r3, [r7, #28]
 8001d1a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	69fa      	ldr	r2, [r7, #28]
 8001d22:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001d26:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8001d2a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6818      	ldr	r0, [r3, #0]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001d3a:	461a      	mov	r2, r3
 8001d3c:	f002 ffda 	bl	8004cf4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	695a      	ldr	r2, [r3, #20]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8001d4e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4618      	mov	r0, r3
 8001d56:	f002 ff09 	bl	8004b6c <USB_ReadInterrupts>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001d60:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001d64:	d123      	bne.n	8001dae <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f002 ff9f 	bl	8004cae <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4618      	mov	r0, r3
 8001d76:	f002 f856 	bl	8003e26 <USB_GetDevSpeed>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	461a      	mov	r2, r3
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681c      	ldr	r4, [r3, #0]
 8001d86:	f001 fa09 	bl	800319c <HAL_RCC_GetHCLKFreq>
 8001d8a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001d90:	461a      	mov	r2, r3
 8001d92:	4620      	mov	r0, r4
 8001d94:	f001 fd5a 	bl	800384c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001d98:	6878      	ldr	r0, [r7, #4]
 8001d9a:	f007 fdb2 	bl	8009902 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	695a      	ldr	r2, [r3, #20]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8001dac:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4618      	mov	r0, r3
 8001db4:	f002 feda 	bl	8004b6c <USB_ReadInterrupts>
 8001db8:	4603      	mov	r3, r0
 8001dba:	f003 0308 	and.w	r3, r3, #8
 8001dbe:	2b08      	cmp	r3, #8
 8001dc0:	d10a      	bne.n	8001dd8 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	f007 fd8f 	bl	80098e6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	695a      	ldr	r2, [r3, #20]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f002 0208 	and.w	r2, r2, #8
 8001dd6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f002 fec5 	bl	8004b6c <USB_ReadInterrupts>
 8001de2:	4603      	mov	r3, r0
 8001de4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001de8:	2b80      	cmp	r3, #128	@ 0x80
 8001dea:	d123      	bne.n	8001e34 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001dec:	6a3b      	ldr	r3, [r7, #32]
 8001dee:	699b      	ldr	r3, [r3, #24]
 8001df0:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001df4:	6a3b      	ldr	r3, [r7, #32]
 8001df6:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001df8:	2301      	movs	r3, #1
 8001dfa:	627b      	str	r3, [r7, #36]	@ 0x24
 8001dfc:	e014      	b.n	8001e28 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001dfe:	6879      	ldr	r1, [r7, #4]
 8001e00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e02:	4613      	mov	r3, r2
 8001e04:	00db      	lsls	r3, r3, #3
 8001e06:	4413      	add	r3, r2
 8001e08:	009b      	lsls	r3, r3, #2
 8001e0a:	440b      	add	r3, r1
 8001e0c:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8001e10:	781b      	ldrb	r3, [r3, #0]
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d105      	bne.n	8001e22 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	6878      	ldr	r0, [r7, #4]
 8001e1e:	f000 fb0a 	bl	8002436 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e24:	3301      	adds	r3, #1
 8001e26:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	791b      	ldrb	r3, [r3, #4]
 8001e2c:	461a      	mov	r2, r3
 8001e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d3e4      	bcc.n	8001dfe <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f002 fe97 	bl	8004b6c <USB_ReadInterrupts>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e44:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001e48:	d13c      	bne.n	8001ec4 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e4e:	e02b      	b.n	8001ea8 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001e50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e52:	015a      	lsls	r2, r3, #5
 8001e54:	69fb      	ldr	r3, [r7, #28]
 8001e56:	4413      	add	r3, r2
 8001e58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001e60:	6879      	ldr	r1, [r7, #4]
 8001e62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e64:	4613      	mov	r3, r2
 8001e66:	00db      	lsls	r3, r3, #3
 8001e68:	4413      	add	r3, r2
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	440b      	add	r3, r1
 8001e6e:	3318      	adds	r3, #24
 8001e70:	781b      	ldrb	r3, [r3, #0]
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	d115      	bne.n	8001ea2 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001e76:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	da12      	bge.n	8001ea2 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001e7c:	6879      	ldr	r1, [r7, #4]
 8001e7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e80:	4613      	mov	r3, r2
 8001e82:	00db      	lsls	r3, r3, #3
 8001e84:	4413      	add	r3, r2
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	440b      	add	r3, r1
 8001e8a:	3317      	adds	r3, #23
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001e90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e92:	b2db      	uxtb	r3, r3
 8001e94:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001e98:	b2db      	uxtb	r3, r3
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	6878      	ldr	r0, [r7, #4]
 8001e9e:	f000 faca 	bl	8002436 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001ea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ea4:	3301      	adds	r3, #1
 8001ea6:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	791b      	ldrb	r3, [r3, #4]
 8001eac:	461a      	mov	r2, r3
 8001eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d3cd      	bcc.n	8001e50 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	695a      	ldr	r2, [r3, #20]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8001ec2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f002 fe4f 	bl	8004b6c <USB_ReadInterrupts>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ed4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001ed8:	d156      	bne.n	8001f88 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001eda:	2301      	movs	r3, #1
 8001edc:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ede:	e045      	b.n	8001f6c <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001ee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ee2:	015a      	lsls	r2, r3, #5
 8001ee4:	69fb      	ldr	r3, [r7, #28]
 8001ee6:	4413      	add	r3, r2
 8001ee8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001ef0:	6879      	ldr	r1, [r7, #4]
 8001ef2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ef4:	4613      	mov	r3, r2
 8001ef6:	00db      	lsls	r3, r3, #3
 8001ef8:	4413      	add	r3, r2
 8001efa:	009b      	lsls	r3, r3, #2
 8001efc:	440b      	add	r3, r1
 8001efe:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	d12e      	bne.n	8001f66 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001f08:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	da2b      	bge.n	8001f66 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001f0e:	69bb      	ldr	r3, [r7, #24]
 8001f10:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8001f1a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	d121      	bne.n	8001f66 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001f22:	6879      	ldr	r1, [r7, #4]
 8001f24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f26:	4613      	mov	r3, r2
 8001f28:	00db      	lsls	r3, r3, #3
 8001f2a:	4413      	add	r3, r2
 8001f2c:	009b      	lsls	r3, r3, #2
 8001f2e:	440b      	add	r3, r1
 8001f30:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8001f34:	2201      	movs	r2, #1
 8001f36:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001f38:	6a3b      	ldr	r3, [r7, #32]
 8001f3a:	699b      	ldr	r3, [r3, #24]
 8001f3c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001f40:	6a3b      	ldr	r3, [r7, #32]
 8001f42:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001f44:	6a3b      	ldr	r3, [r7, #32]
 8001f46:	695b      	ldr	r3, [r3, #20]
 8001f48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d10a      	bne.n	8001f66 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001f50:	69fb      	ldr	r3, [r7, #28]
 8001f52:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	69fa      	ldr	r2, [r7, #28]
 8001f5a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001f5e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f62:	6053      	str	r3, [r2, #4]
            break;
 8001f64:	e008      	b.n	8001f78 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f68:	3301      	adds	r3, #1
 8001f6a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	791b      	ldrb	r3, [r3, #4]
 8001f70:	461a      	mov	r2, r3
 8001f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d3b3      	bcc.n	8001ee0 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	695a      	ldr	r2, [r3, #20]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8001f86:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f002 fded 	bl	8004b6c <USB_ReadInterrupts>
 8001f92:	4603      	mov	r3, r0
 8001f94:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001f98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f9c:	d10a      	bne.n	8001fb4 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f007 fd30 	bl	8009a04 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	695a      	ldr	r2, [r3, #20]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8001fb2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f002 fdd7 	bl	8004b6c <USB_ReadInterrupts>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	f003 0304 	and.w	r3, r3, #4
 8001fc4:	2b04      	cmp	r3, #4
 8001fc6:	d115      	bne.n	8001ff4 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001fd0:	69bb      	ldr	r3, [r7, #24]
 8001fd2:	f003 0304 	and.w	r3, r3, #4
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d002      	beq.n	8001fe0 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f007 fd20 	bl	8009a20 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	6859      	ldr	r1, [r3, #4]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	69ba      	ldr	r2, [r7, #24]
 8001fec:	430a      	orrs	r2, r1
 8001fee:	605a      	str	r2, [r3, #4]
 8001ff0:	e000      	b.n	8001ff4 <HAL_PCD_IRQHandler+0x93c>
      return;
 8001ff2:	bf00      	nop
    }
  }
}
 8001ff4:	3734      	adds	r7, #52	@ 0x34
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd90      	pop	{r4, r7, pc}

08001ffa <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001ffa:	b580      	push	{r7, lr}
 8001ffc:	b082      	sub	sp, #8
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	6078      	str	r0, [r7, #4]
 8002002:	460b      	mov	r3, r1
 8002004:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800200c:	2b01      	cmp	r3, #1
 800200e:	d101      	bne.n	8002014 <HAL_PCD_SetAddress+0x1a>
 8002010:	2302      	movs	r3, #2
 8002012:	e012      	b.n	800203a <HAL_PCD_SetAddress+0x40>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2201      	movs	r2, #1
 8002018:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	78fa      	ldrb	r2, [r7, #3]
 8002020:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	78fa      	ldrb	r2, [r7, #3]
 8002028:	4611      	mov	r1, r2
 800202a:	4618      	mov	r0, r3
 800202c:	f002 fd36 	bl	8004a9c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2200      	movs	r2, #0
 8002034:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002038:	2300      	movs	r3, #0
}
 800203a:	4618      	mov	r0, r3
 800203c:	3708      	adds	r7, #8
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}

08002042 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002042:	b580      	push	{r7, lr}
 8002044:	b084      	sub	sp, #16
 8002046:	af00      	add	r7, sp, #0
 8002048:	6078      	str	r0, [r7, #4]
 800204a:	4608      	mov	r0, r1
 800204c:	4611      	mov	r1, r2
 800204e:	461a      	mov	r2, r3
 8002050:	4603      	mov	r3, r0
 8002052:	70fb      	strb	r3, [r7, #3]
 8002054:	460b      	mov	r3, r1
 8002056:	803b      	strh	r3, [r7, #0]
 8002058:	4613      	mov	r3, r2
 800205a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800205c:	2300      	movs	r3, #0
 800205e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002060:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002064:	2b00      	cmp	r3, #0
 8002066:	da0f      	bge.n	8002088 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002068:	78fb      	ldrb	r3, [r7, #3]
 800206a:	f003 020f 	and.w	r2, r3, #15
 800206e:	4613      	mov	r3, r2
 8002070:	00db      	lsls	r3, r3, #3
 8002072:	4413      	add	r3, r2
 8002074:	009b      	lsls	r3, r3, #2
 8002076:	3310      	adds	r3, #16
 8002078:	687a      	ldr	r2, [r7, #4]
 800207a:	4413      	add	r3, r2
 800207c:	3304      	adds	r3, #4
 800207e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	2201      	movs	r2, #1
 8002084:	705a      	strb	r2, [r3, #1]
 8002086:	e00f      	b.n	80020a8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002088:	78fb      	ldrb	r3, [r7, #3]
 800208a:	f003 020f 	and.w	r2, r3, #15
 800208e:	4613      	mov	r3, r2
 8002090:	00db      	lsls	r3, r3, #3
 8002092:	4413      	add	r3, r2
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800209a:	687a      	ldr	r2, [r7, #4]
 800209c:	4413      	add	r3, r2
 800209e:	3304      	adds	r3, #4
 80020a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	2200      	movs	r2, #0
 80020a6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80020a8:	78fb      	ldrb	r3, [r7, #3]
 80020aa:	f003 030f 	and.w	r3, r3, #15
 80020ae:	b2da      	uxtb	r2, r3
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80020b4:	883b      	ldrh	r3, [r7, #0]
 80020b6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	78ba      	ldrb	r2, [r7, #2]
 80020c2:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	785b      	ldrb	r3, [r3, #1]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d004      	beq.n	80020d6 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	781b      	ldrb	r3, [r3, #0]
 80020d0:	461a      	mov	r2, r3
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80020d6:	78bb      	ldrb	r3, [r7, #2]
 80020d8:	2b02      	cmp	r3, #2
 80020da:	d102      	bne.n	80020e2 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	2200      	movs	r2, #0
 80020e0:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	d101      	bne.n	80020f0 <HAL_PCD_EP_Open+0xae>
 80020ec:	2302      	movs	r3, #2
 80020ee:	e00e      	b.n	800210e <HAL_PCD_EP_Open+0xcc>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2201      	movs	r2, #1
 80020f4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	68f9      	ldr	r1, [r7, #12]
 80020fe:	4618      	mov	r0, r3
 8002100:	f001 feb6 	bl	8003e70 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2200      	movs	r2, #0
 8002108:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800210c:	7afb      	ldrb	r3, [r7, #11]
}
 800210e:	4618      	mov	r0, r3
 8002110:	3710      	adds	r7, #16
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}

08002116 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002116:	b580      	push	{r7, lr}
 8002118:	b084      	sub	sp, #16
 800211a:	af00      	add	r7, sp, #0
 800211c:	6078      	str	r0, [r7, #4]
 800211e:	460b      	mov	r3, r1
 8002120:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002122:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002126:	2b00      	cmp	r3, #0
 8002128:	da0f      	bge.n	800214a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800212a:	78fb      	ldrb	r3, [r7, #3]
 800212c:	f003 020f 	and.w	r2, r3, #15
 8002130:	4613      	mov	r3, r2
 8002132:	00db      	lsls	r3, r3, #3
 8002134:	4413      	add	r3, r2
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	3310      	adds	r3, #16
 800213a:	687a      	ldr	r2, [r7, #4]
 800213c:	4413      	add	r3, r2
 800213e:	3304      	adds	r3, #4
 8002140:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	2201      	movs	r2, #1
 8002146:	705a      	strb	r2, [r3, #1]
 8002148:	e00f      	b.n	800216a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800214a:	78fb      	ldrb	r3, [r7, #3]
 800214c:	f003 020f 	and.w	r2, r3, #15
 8002150:	4613      	mov	r3, r2
 8002152:	00db      	lsls	r3, r3, #3
 8002154:	4413      	add	r3, r2
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800215c:	687a      	ldr	r2, [r7, #4]
 800215e:	4413      	add	r3, r2
 8002160:	3304      	adds	r3, #4
 8002162:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	2200      	movs	r2, #0
 8002168:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800216a:	78fb      	ldrb	r3, [r7, #3]
 800216c:	f003 030f 	and.w	r3, r3, #15
 8002170:	b2da      	uxtb	r2, r3
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800217c:	2b01      	cmp	r3, #1
 800217e:	d101      	bne.n	8002184 <HAL_PCD_EP_Close+0x6e>
 8002180:	2302      	movs	r3, #2
 8002182:	e00e      	b.n	80021a2 <HAL_PCD_EP_Close+0x8c>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2201      	movs	r2, #1
 8002188:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	68f9      	ldr	r1, [r7, #12]
 8002192:	4618      	mov	r0, r3
 8002194:	f001 fef4 	bl	8003f80 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2200      	movs	r2, #0
 800219c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80021a0:	2300      	movs	r3, #0
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	3710      	adds	r7, #16
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}

080021aa <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80021aa:	b580      	push	{r7, lr}
 80021ac:	b086      	sub	sp, #24
 80021ae:	af00      	add	r7, sp, #0
 80021b0:	60f8      	str	r0, [r7, #12]
 80021b2:	607a      	str	r2, [r7, #4]
 80021b4:	603b      	str	r3, [r7, #0]
 80021b6:	460b      	mov	r3, r1
 80021b8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80021ba:	7afb      	ldrb	r3, [r7, #11]
 80021bc:	f003 020f 	and.w	r2, r3, #15
 80021c0:	4613      	mov	r3, r2
 80021c2:	00db      	lsls	r3, r3, #3
 80021c4:	4413      	add	r3, r2
 80021c6:	009b      	lsls	r3, r3, #2
 80021c8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80021cc:	68fa      	ldr	r2, [r7, #12]
 80021ce:	4413      	add	r3, r2
 80021d0:	3304      	adds	r3, #4
 80021d2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	687a      	ldr	r2, [r7, #4]
 80021d8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	683a      	ldr	r2, [r7, #0]
 80021de:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	2200      	movs	r2, #0
 80021e4:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	2200      	movs	r2, #0
 80021ea:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80021ec:	7afb      	ldrb	r3, [r7, #11]
 80021ee:	f003 030f 	and.w	r3, r3, #15
 80021f2:	b2da      	uxtb	r2, r3
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	799b      	ldrb	r3, [r3, #6]
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d102      	bne.n	8002206 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002200:	687a      	ldr	r2, [r7, #4]
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	6818      	ldr	r0, [r3, #0]
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	799b      	ldrb	r3, [r3, #6]
 800220e:	461a      	mov	r2, r3
 8002210:	6979      	ldr	r1, [r7, #20]
 8002212:	f001 ff91 	bl	8004138 <USB_EPStartXfer>

  return HAL_OK;
 8002216:	2300      	movs	r3, #0
}
 8002218:	4618      	mov	r0, r3
 800221a:	3718      	adds	r7, #24
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}

08002220 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002220:	b480      	push	{r7}
 8002222:	b083      	sub	sp, #12
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
 8002228:	460b      	mov	r3, r1
 800222a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800222c:	78fb      	ldrb	r3, [r7, #3]
 800222e:	f003 020f 	and.w	r2, r3, #15
 8002232:	6879      	ldr	r1, [r7, #4]
 8002234:	4613      	mov	r3, r2
 8002236:	00db      	lsls	r3, r3, #3
 8002238:	4413      	add	r3, r2
 800223a:	009b      	lsls	r3, r3, #2
 800223c:	440b      	add	r3, r1
 800223e:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8002242:	681b      	ldr	r3, [r3, #0]
}
 8002244:	4618      	mov	r0, r3
 8002246:	370c      	adds	r7, #12
 8002248:	46bd      	mov	sp, r7
 800224a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224e:	4770      	bx	lr

08002250 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b086      	sub	sp, #24
 8002254:	af00      	add	r7, sp, #0
 8002256:	60f8      	str	r0, [r7, #12]
 8002258:	607a      	str	r2, [r7, #4]
 800225a:	603b      	str	r3, [r7, #0]
 800225c:	460b      	mov	r3, r1
 800225e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002260:	7afb      	ldrb	r3, [r7, #11]
 8002262:	f003 020f 	and.w	r2, r3, #15
 8002266:	4613      	mov	r3, r2
 8002268:	00db      	lsls	r3, r3, #3
 800226a:	4413      	add	r3, r2
 800226c:	009b      	lsls	r3, r3, #2
 800226e:	3310      	adds	r3, #16
 8002270:	68fa      	ldr	r2, [r7, #12]
 8002272:	4413      	add	r3, r2
 8002274:	3304      	adds	r3, #4
 8002276:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	687a      	ldr	r2, [r7, #4]
 800227c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	683a      	ldr	r2, [r7, #0]
 8002282:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	2200      	movs	r2, #0
 8002288:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	2201      	movs	r2, #1
 800228e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002290:	7afb      	ldrb	r3, [r7, #11]
 8002292:	f003 030f 	and.w	r3, r3, #15
 8002296:	b2da      	uxtb	r2, r3
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	799b      	ldrb	r3, [r3, #6]
 80022a0:	2b01      	cmp	r3, #1
 80022a2:	d102      	bne.n	80022aa <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80022a4:	687a      	ldr	r2, [r7, #4]
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	6818      	ldr	r0, [r3, #0]
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	799b      	ldrb	r3, [r3, #6]
 80022b2:	461a      	mov	r2, r3
 80022b4:	6979      	ldr	r1, [r7, #20]
 80022b6:	f001 ff3f 	bl	8004138 <USB_EPStartXfer>

  return HAL_OK;
 80022ba:	2300      	movs	r3, #0
}
 80022bc:	4618      	mov	r0, r3
 80022be:	3718      	adds	r7, #24
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}

080022c4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b084      	sub	sp, #16
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
 80022cc:	460b      	mov	r3, r1
 80022ce:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80022d0:	78fb      	ldrb	r3, [r7, #3]
 80022d2:	f003 030f 	and.w	r3, r3, #15
 80022d6:	687a      	ldr	r2, [r7, #4]
 80022d8:	7912      	ldrb	r2, [r2, #4]
 80022da:	4293      	cmp	r3, r2
 80022dc:	d901      	bls.n	80022e2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	e04f      	b.n	8002382 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80022e2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	da0f      	bge.n	800230a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80022ea:	78fb      	ldrb	r3, [r7, #3]
 80022ec:	f003 020f 	and.w	r2, r3, #15
 80022f0:	4613      	mov	r3, r2
 80022f2:	00db      	lsls	r3, r3, #3
 80022f4:	4413      	add	r3, r2
 80022f6:	009b      	lsls	r3, r3, #2
 80022f8:	3310      	adds	r3, #16
 80022fa:	687a      	ldr	r2, [r7, #4]
 80022fc:	4413      	add	r3, r2
 80022fe:	3304      	adds	r3, #4
 8002300:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	2201      	movs	r2, #1
 8002306:	705a      	strb	r2, [r3, #1]
 8002308:	e00d      	b.n	8002326 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800230a:	78fa      	ldrb	r2, [r7, #3]
 800230c:	4613      	mov	r3, r2
 800230e:	00db      	lsls	r3, r3, #3
 8002310:	4413      	add	r3, r2
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002318:	687a      	ldr	r2, [r7, #4]
 800231a:	4413      	add	r3, r2
 800231c:	3304      	adds	r3, #4
 800231e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	2200      	movs	r2, #0
 8002324:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	2201      	movs	r2, #1
 800232a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800232c:	78fb      	ldrb	r3, [r7, #3]
 800232e:	f003 030f 	and.w	r3, r3, #15
 8002332:	b2da      	uxtb	r2, r3
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800233e:	2b01      	cmp	r3, #1
 8002340:	d101      	bne.n	8002346 <HAL_PCD_EP_SetStall+0x82>
 8002342:	2302      	movs	r3, #2
 8002344:	e01d      	b.n	8002382 <HAL_PCD_EP_SetStall+0xbe>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2201      	movs	r2, #1
 800234a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	68f9      	ldr	r1, [r7, #12]
 8002354:	4618      	mov	r0, r3
 8002356:	f002 facd 	bl	80048f4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800235a:	78fb      	ldrb	r3, [r7, #3]
 800235c:	f003 030f 	and.w	r3, r3, #15
 8002360:	2b00      	cmp	r3, #0
 8002362:	d109      	bne.n	8002378 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6818      	ldr	r0, [r3, #0]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	7999      	ldrb	r1, [r3, #6]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002372:	461a      	mov	r2, r3
 8002374:	f002 fcbe 	bl	8004cf4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2200      	movs	r2, #0
 800237c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002380:	2300      	movs	r3, #0
}
 8002382:	4618      	mov	r0, r3
 8002384:	3710      	adds	r7, #16
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}

0800238a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800238a:	b580      	push	{r7, lr}
 800238c:	b084      	sub	sp, #16
 800238e:	af00      	add	r7, sp, #0
 8002390:	6078      	str	r0, [r7, #4]
 8002392:	460b      	mov	r3, r1
 8002394:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002396:	78fb      	ldrb	r3, [r7, #3]
 8002398:	f003 030f 	and.w	r3, r3, #15
 800239c:	687a      	ldr	r2, [r7, #4]
 800239e:	7912      	ldrb	r2, [r2, #4]
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d901      	bls.n	80023a8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	e042      	b.n	800242e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80023a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	da0f      	bge.n	80023d0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80023b0:	78fb      	ldrb	r3, [r7, #3]
 80023b2:	f003 020f 	and.w	r2, r3, #15
 80023b6:	4613      	mov	r3, r2
 80023b8:	00db      	lsls	r3, r3, #3
 80023ba:	4413      	add	r3, r2
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	3310      	adds	r3, #16
 80023c0:	687a      	ldr	r2, [r7, #4]
 80023c2:	4413      	add	r3, r2
 80023c4:	3304      	adds	r3, #4
 80023c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	2201      	movs	r2, #1
 80023cc:	705a      	strb	r2, [r3, #1]
 80023ce:	e00f      	b.n	80023f0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80023d0:	78fb      	ldrb	r3, [r7, #3]
 80023d2:	f003 020f 	and.w	r2, r3, #15
 80023d6:	4613      	mov	r3, r2
 80023d8:	00db      	lsls	r3, r3, #3
 80023da:	4413      	add	r3, r2
 80023dc:	009b      	lsls	r3, r3, #2
 80023de:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80023e2:	687a      	ldr	r2, [r7, #4]
 80023e4:	4413      	add	r3, r2
 80023e6:	3304      	adds	r3, #4
 80023e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	2200      	movs	r2, #0
 80023ee:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	2200      	movs	r2, #0
 80023f4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80023f6:	78fb      	ldrb	r3, [r7, #3]
 80023f8:	f003 030f 	and.w	r3, r3, #15
 80023fc:	b2da      	uxtb	r2, r3
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002408:	2b01      	cmp	r3, #1
 800240a:	d101      	bne.n	8002410 <HAL_PCD_EP_ClrStall+0x86>
 800240c:	2302      	movs	r3, #2
 800240e:	e00e      	b.n	800242e <HAL_PCD_EP_ClrStall+0xa4>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2201      	movs	r2, #1
 8002414:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	68f9      	ldr	r1, [r7, #12]
 800241e:	4618      	mov	r0, r3
 8002420:	f002 fad6 	bl	80049d0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2200      	movs	r2, #0
 8002428:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800242c:	2300      	movs	r3, #0
}
 800242e:	4618      	mov	r0, r3
 8002430:	3710      	adds	r7, #16
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}

08002436 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002436:	b580      	push	{r7, lr}
 8002438:	b084      	sub	sp, #16
 800243a:	af00      	add	r7, sp, #0
 800243c:	6078      	str	r0, [r7, #4]
 800243e:	460b      	mov	r3, r1
 8002440:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002442:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002446:	2b00      	cmp	r3, #0
 8002448:	da0c      	bge.n	8002464 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800244a:	78fb      	ldrb	r3, [r7, #3]
 800244c:	f003 020f 	and.w	r2, r3, #15
 8002450:	4613      	mov	r3, r2
 8002452:	00db      	lsls	r3, r3, #3
 8002454:	4413      	add	r3, r2
 8002456:	009b      	lsls	r3, r3, #2
 8002458:	3310      	adds	r3, #16
 800245a:	687a      	ldr	r2, [r7, #4]
 800245c:	4413      	add	r3, r2
 800245e:	3304      	adds	r3, #4
 8002460:	60fb      	str	r3, [r7, #12]
 8002462:	e00c      	b.n	800247e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002464:	78fb      	ldrb	r3, [r7, #3]
 8002466:	f003 020f 	and.w	r2, r3, #15
 800246a:	4613      	mov	r3, r2
 800246c:	00db      	lsls	r3, r3, #3
 800246e:	4413      	add	r3, r2
 8002470:	009b      	lsls	r3, r3, #2
 8002472:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002476:	687a      	ldr	r2, [r7, #4]
 8002478:	4413      	add	r3, r2
 800247a:	3304      	adds	r3, #4
 800247c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	68f9      	ldr	r1, [r7, #12]
 8002484:	4618      	mov	r0, r3
 8002486:	f002 f8f5 	bl	8004674 <USB_EPStopXfer>
 800248a:	4603      	mov	r3, r0
 800248c:	72fb      	strb	r3, [r7, #11]

  return ret;
 800248e:	7afb      	ldrb	r3, [r7, #11]
}
 8002490:	4618      	mov	r0, r3
 8002492:	3710      	adds	r7, #16
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}

08002498 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b08a      	sub	sp, #40	@ 0x28
 800249c:	af02      	add	r7, sp, #8
 800249e:	6078      	str	r0, [r7, #4]
 80024a0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80024ac:	683a      	ldr	r2, [r7, #0]
 80024ae:	4613      	mov	r3, r2
 80024b0:	00db      	lsls	r3, r3, #3
 80024b2:	4413      	add	r3, r2
 80024b4:	009b      	lsls	r3, r3, #2
 80024b6:	3310      	adds	r3, #16
 80024b8:	687a      	ldr	r2, [r7, #4]
 80024ba:	4413      	add	r3, r2
 80024bc:	3304      	adds	r3, #4
 80024be:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	695a      	ldr	r2, [r3, #20]
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	691b      	ldr	r3, [r3, #16]
 80024c8:	429a      	cmp	r2, r3
 80024ca:	d901      	bls.n	80024d0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	e06b      	b.n	80025a8 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	691a      	ldr	r2, [r3, #16]
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	695b      	ldr	r3, [r3, #20]
 80024d8:	1ad3      	subs	r3, r2, r3
 80024da:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	69fa      	ldr	r2, [r7, #28]
 80024e2:	429a      	cmp	r2, r3
 80024e4:	d902      	bls.n	80024ec <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80024ec:	69fb      	ldr	r3, [r7, #28]
 80024ee:	3303      	adds	r3, #3
 80024f0:	089b      	lsrs	r3, r3, #2
 80024f2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80024f4:	e02a      	b.n	800254c <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	691a      	ldr	r2, [r3, #16]
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	695b      	ldr	r3, [r3, #20]
 80024fe:	1ad3      	subs	r3, r2, r3
 8002500:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	69fa      	ldr	r2, [r7, #28]
 8002508:	429a      	cmp	r2, r3
 800250a:	d902      	bls.n	8002512 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	3303      	adds	r3, #3
 8002516:	089b      	lsrs	r3, r3, #2
 8002518:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	68d9      	ldr	r1, [r3, #12]
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	b2da      	uxtb	r2, r3
 8002522:	69fb      	ldr	r3, [r7, #28]
 8002524:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800252a:	9300      	str	r3, [sp, #0]
 800252c:	4603      	mov	r3, r0
 800252e:	6978      	ldr	r0, [r7, #20]
 8002530:	f002 f94a 	bl	80047c8 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	68da      	ldr	r2, [r3, #12]
 8002538:	69fb      	ldr	r3, [r7, #28]
 800253a:	441a      	add	r2, r3
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	695a      	ldr	r2, [r3, #20]
 8002544:	69fb      	ldr	r3, [r7, #28]
 8002546:	441a      	add	r2, r3
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	015a      	lsls	r2, r3, #5
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	4413      	add	r3, r2
 8002554:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002558:	699b      	ldr	r3, [r3, #24]
 800255a:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800255c:	69ba      	ldr	r2, [r7, #24]
 800255e:	429a      	cmp	r2, r3
 8002560:	d809      	bhi.n	8002576 <PCD_WriteEmptyTxFifo+0xde>
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	695a      	ldr	r2, [r3, #20]
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800256a:	429a      	cmp	r2, r3
 800256c:	d203      	bcs.n	8002576 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	691b      	ldr	r3, [r3, #16]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d1bf      	bne.n	80024f6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	691a      	ldr	r2, [r3, #16]
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	695b      	ldr	r3, [r3, #20]
 800257e:	429a      	cmp	r2, r3
 8002580:	d811      	bhi.n	80025a6 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	f003 030f 	and.w	r3, r3, #15
 8002588:	2201      	movs	r2, #1
 800258a:	fa02 f303 	lsl.w	r3, r2, r3
 800258e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002596:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	43db      	mvns	r3, r3
 800259c:	6939      	ldr	r1, [r7, #16]
 800259e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80025a2:	4013      	ands	r3, r2
 80025a4:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80025a6:	2300      	movs	r3, #0
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	3720      	adds	r7, #32
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}

080025b0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b088      	sub	sp, #32
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
 80025b8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80025c0:	69fb      	ldr	r3, [r7, #28]
 80025c2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80025c4:	69fb      	ldr	r3, [r7, #28]
 80025c6:	333c      	adds	r3, #60	@ 0x3c
 80025c8:	3304      	adds	r3, #4
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	015a      	lsls	r2, r3, #5
 80025d2:	69bb      	ldr	r3, [r7, #24]
 80025d4:	4413      	add	r3, r2
 80025d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	799b      	ldrb	r3, [r3, #6]
 80025e2:	2b01      	cmp	r3, #1
 80025e4:	d17b      	bne.n	80026de <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	f003 0308 	and.w	r3, r3, #8
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d015      	beq.n	800261c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	4a61      	ldr	r2, [pc, #388]	@ (8002778 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	f240 80b9 	bls.w	800276c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002600:	2b00      	cmp	r3, #0
 8002602:	f000 80b3 	beq.w	800276c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	015a      	lsls	r2, r3, #5
 800260a:	69bb      	ldr	r3, [r7, #24]
 800260c:	4413      	add	r3, r2
 800260e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002612:	461a      	mov	r2, r3
 8002614:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002618:	6093      	str	r3, [r2, #8]
 800261a:	e0a7      	b.n	800276c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	f003 0320 	and.w	r3, r3, #32
 8002622:	2b00      	cmp	r3, #0
 8002624:	d009      	beq.n	800263a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	015a      	lsls	r2, r3, #5
 800262a:	69bb      	ldr	r3, [r7, #24]
 800262c:	4413      	add	r3, r2
 800262e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002632:	461a      	mov	r2, r3
 8002634:	2320      	movs	r3, #32
 8002636:	6093      	str	r3, [r2, #8]
 8002638:	e098      	b.n	800276c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002640:	2b00      	cmp	r3, #0
 8002642:	f040 8093 	bne.w	800276c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	4a4b      	ldr	r2, [pc, #300]	@ (8002778 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d90f      	bls.n	800266e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002654:	2b00      	cmp	r3, #0
 8002656:	d00a      	beq.n	800266e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	015a      	lsls	r2, r3, #5
 800265c:	69bb      	ldr	r3, [r7, #24]
 800265e:	4413      	add	r3, r2
 8002660:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002664:	461a      	mov	r2, r3
 8002666:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800266a:	6093      	str	r3, [r2, #8]
 800266c:	e07e      	b.n	800276c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800266e:	683a      	ldr	r2, [r7, #0]
 8002670:	4613      	mov	r3, r2
 8002672:	00db      	lsls	r3, r3, #3
 8002674:	4413      	add	r3, r2
 8002676:	009b      	lsls	r3, r3, #2
 8002678:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800267c:	687a      	ldr	r2, [r7, #4]
 800267e:	4413      	add	r3, r2
 8002680:	3304      	adds	r3, #4
 8002682:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	6a1a      	ldr	r2, [r3, #32]
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	0159      	lsls	r1, r3, #5
 800268c:	69bb      	ldr	r3, [r7, #24]
 800268e:	440b      	add	r3, r1
 8002690:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002694:	691b      	ldr	r3, [r3, #16]
 8002696:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800269a:	1ad2      	subs	r2, r2, r3
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d114      	bne.n	80026d0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	691b      	ldr	r3, [r3, #16]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d109      	bne.n	80026c2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6818      	ldr	r0, [r3, #0]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80026b8:	461a      	mov	r2, r3
 80026ba:	2101      	movs	r1, #1
 80026bc:	f002 fb1a 	bl	8004cf4 <USB_EP0_OutStart>
 80026c0:	e006      	b.n	80026d0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	68da      	ldr	r2, [r3, #12]
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	695b      	ldr	r3, [r3, #20]
 80026ca:	441a      	add	r2, r3
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	b2db      	uxtb	r3, r3
 80026d4:	4619      	mov	r1, r3
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	f007 f8d0 	bl	800987c <HAL_PCD_DataOutStageCallback>
 80026dc:	e046      	b.n	800276c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	4a26      	ldr	r2, [pc, #152]	@ (800277c <PCD_EP_OutXfrComplete_int+0x1cc>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d124      	bne.n	8002730 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d00a      	beq.n	8002706 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	015a      	lsls	r2, r3, #5
 80026f4:	69bb      	ldr	r3, [r7, #24]
 80026f6:	4413      	add	r3, r2
 80026f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80026fc:	461a      	mov	r2, r3
 80026fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002702:	6093      	str	r3, [r2, #8]
 8002704:	e032      	b.n	800276c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	f003 0320 	and.w	r3, r3, #32
 800270c:	2b00      	cmp	r3, #0
 800270e:	d008      	beq.n	8002722 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	015a      	lsls	r2, r3, #5
 8002714:	69bb      	ldr	r3, [r7, #24]
 8002716:	4413      	add	r3, r2
 8002718:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800271c:	461a      	mov	r2, r3
 800271e:	2320      	movs	r3, #32
 8002720:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	b2db      	uxtb	r3, r3
 8002726:	4619      	mov	r1, r3
 8002728:	6878      	ldr	r0, [r7, #4]
 800272a:	f007 f8a7 	bl	800987c <HAL_PCD_DataOutStageCallback>
 800272e:	e01d      	b.n	800276c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d114      	bne.n	8002760 <PCD_EP_OutXfrComplete_int+0x1b0>
 8002736:	6879      	ldr	r1, [r7, #4]
 8002738:	683a      	ldr	r2, [r7, #0]
 800273a:	4613      	mov	r3, r2
 800273c:	00db      	lsls	r3, r3, #3
 800273e:	4413      	add	r3, r2
 8002740:	009b      	lsls	r3, r3, #2
 8002742:	440b      	add	r3, r1
 8002744:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d108      	bne.n	8002760 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6818      	ldr	r0, [r3, #0]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002758:	461a      	mov	r2, r3
 800275a:	2100      	movs	r1, #0
 800275c:	f002 faca 	bl	8004cf4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	b2db      	uxtb	r3, r3
 8002764:	4619      	mov	r1, r3
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	f007 f888 	bl	800987c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800276c:	2300      	movs	r3, #0
}
 800276e:	4618      	mov	r0, r3
 8002770:	3720      	adds	r7, #32
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}
 8002776:	bf00      	nop
 8002778:	4f54300a 	.word	0x4f54300a
 800277c:	4f54310a 	.word	0x4f54310a

08002780 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b086      	sub	sp, #24
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
 8002788:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	333c      	adds	r3, #60	@ 0x3c
 8002798:	3304      	adds	r3, #4
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	015a      	lsls	r2, r3, #5
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	4413      	add	r3, r2
 80027a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	4a15      	ldr	r2, [pc, #84]	@ (8002808 <PCD_EP_OutSetupPacket_int+0x88>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d90e      	bls.n	80027d4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d009      	beq.n	80027d4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	015a      	lsls	r2, r3, #5
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	4413      	add	r3, r2
 80027c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80027cc:	461a      	mov	r2, r3
 80027ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80027d2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80027d4:	6878      	ldr	r0, [r7, #4]
 80027d6:	f007 f83f 	bl	8009858 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	4a0a      	ldr	r2, [pc, #40]	@ (8002808 <PCD_EP_OutSetupPacket_int+0x88>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d90c      	bls.n	80027fc <PCD_EP_OutSetupPacket_int+0x7c>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	799b      	ldrb	r3, [r3, #6]
 80027e6:	2b01      	cmp	r3, #1
 80027e8:	d108      	bne.n	80027fc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6818      	ldr	r0, [r3, #0]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80027f4:	461a      	mov	r2, r3
 80027f6:	2101      	movs	r1, #1
 80027f8:	f002 fa7c 	bl	8004cf4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80027fc:	2300      	movs	r3, #0
}
 80027fe:	4618      	mov	r0, r3
 8002800:	3718      	adds	r7, #24
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	4f54300a 	.word	0x4f54300a

0800280c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800280c:	b480      	push	{r7}
 800280e:	b085      	sub	sp, #20
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
 8002814:	460b      	mov	r3, r1
 8002816:	70fb      	strb	r3, [r7, #3]
 8002818:	4613      	mov	r3, r2
 800281a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002822:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002824:	78fb      	ldrb	r3, [r7, #3]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d107      	bne.n	800283a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800282a:	883b      	ldrh	r3, [r7, #0]
 800282c:	0419      	lsls	r1, r3, #16
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	68ba      	ldr	r2, [r7, #8]
 8002834:	430a      	orrs	r2, r1
 8002836:	629a      	str	r2, [r3, #40]	@ 0x28
 8002838:	e028      	b.n	800288c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002840:	0c1b      	lsrs	r3, r3, #16
 8002842:	68ba      	ldr	r2, [r7, #8]
 8002844:	4413      	add	r3, r2
 8002846:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002848:	2300      	movs	r3, #0
 800284a:	73fb      	strb	r3, [r7, #15]
 800284c:	e00d      	b.n	800286a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681a      	ldr	r2, [r3, #0]
 8002852:	7bfb      	ldrb	r3, [r7, #15]
 8002854:	3340      	adds	r3, #64	@ 0x40
 8002856:	009b      	lsls	r3, r3, #2
 8002858:	4413      	add	r3, r2
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	0c1b      	lsrs	r3, r3, #16
 800285e:	68ba      	ldr	r2, [r7, #8]
 8002860:	4413      	add	r3, r2
 8002862:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002864:	7bfb      	ldrb	r3, [r7, #15]
 8002866:	3301      	adds	r3, #1
 8002868:	73fb      	strb	r3, [r7, #15]
 800286a:	7bfa      	ldrb	r2, [r7, #15]
 800286c:	78fb      	ldrb	r3, [r7, #3]
 800286e:	3b01      	subs	r3, #1
 8002870:	429a      	cmp	r2, r3
 8002872:	d3ec      	bcc.n	800284e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002874:	883b      	ldrh	r3, [r7, #0]
 8002876:	0418      	lsls	r0, r3, #16
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6819      	ldr	r1, [r3, #0]
 800287c:	78fb      	ldrb	r3, [r7, #3]
 800287e:	3b01      	subs	r3, #1
 8002880:	68ba      	ldr	r2, [r7, #8]
 8002882:	4302      	orrs	r2, r0
 8002884:	3340      	adds	r3, #64	@ 0x40
 8002886:	009b      	lsls	r3, r3, #2
 8002888:	440b      	add	r3, r1
 800288a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800288c:	2300      	movs	r3, #0
}
 800288e:	4618      	mov	r0, r3
 8002890:	3714      	adds	r7, #20
 8002892:	46bd      	mov	sp, r7
 8002894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002898:	4770      	bx	lr

0800289a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800289a:	b480      	push	{r7}
 800289c:	b083      	sub	sp, #12
 800289e:	af00      	add	r7, sp, #0
 80028a0:	6078      	str	r0, [r7, #4]
 80028a2:	460b      	mov	r3, r1
 80028a4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	887a      	ldrh	r2, [r7, #2]
 80028ac:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80028ae:	2300      	movs	r3, #0
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	370c      	adds	r7, #12
 80028b4:	46bd      	mov	sp, r7
 80028b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ba:	4770      	bx	lr

080028bc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80028bc:	b480      	push	{r7}
 80028be:	b083      	sub	sp, #12
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
 80028c4:	460b      	mov	r3, r1
 80028c6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80028c8:	bf00      	nop
 80028ca:	370c      	adds	r7, #12
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr

080028d4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b086      	sub	sp, #24
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d101      	bne.n	80028e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e267      	b.n	8002db6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 0301 	and.w	r3, r3, #1
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d075      	beq.n	80029de <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80028f2:	4b88      	ldr	r3, [pc, #544]	@ (8002b14 <HAL_RCC_OscConfig+0x240>)
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	f003 030c 	and.w	r3, r3, #12
 80028fa:	2b04      	cmp	r3, #4
 80028fc:	d00c      	beq.n	8002918 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028fe:	4b85      	ldr	r3, [pc, #532]	@ (8002b14 <HAL_RCC_OscConfig+0x240>)
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002906:	2b08      	cmp	r3, #8
 8002908:	d112      	bne.n	8002930 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800290a:	4b82      	ldr	r3, [pc, #520]	@ (8002b14 <HAL_RCC_OscConfig+0x240>)
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002912:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002916:	d10b      	bne.n	8002930 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002918:	4b7e      	ldr	r3, [pc, #504]	@ (8002b14 <HAL_RCC_OscConfig+0x240>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002920:	2b00      	cmp	r3, #0
 8002922:	d05b      	beq.n	80029dc <HAL_RCC_OscConfig+0x108>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d157      	bne.n	80029dc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	e242      	b.n	8002db6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002938:	d106      	bne.n	8002948 <HAL_RCC_OscConfig+0x74>
 800293a:	4b76      	ldr	r3, [pc, #472]	@ (8002b14 <HAL_RCC_OscConfig+0x240>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a75      	ldr	r2, [pc, #468]	@ (8002b14 <HAL_RCC_OscConfig+0x240>)
 8002940:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002944:	6013      	str	r3, [r2, #0]
 8002946:	e01d      	b.n	8002984 <HAL_RCC_OscConfig+0xb0>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002950:	d10c      	bne.n	800296c <HAL_RCC_OscConfig+0x98>
 8002952:	4b70      	ldr	r3, [pc, #448]	@ (8002b14 <HAL_RCC_OscConfig+0x240>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a6f      	ldr	r2, [pc, #444]	@ (8002b14 <HAL_RCC_OscConfig+0x240>)
 8002958:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800295c:	6013      	str	r3, [r2, #0]
 800295e:	4b6d      	ldr	r3, [pc, #436]	@ (8002b14 <HAL_RCC_OscConfig+0x240>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a6c      	ldr	r2, [pc, #432]	@ (8002b14 <HAL_RCC_OscConfig+0x240>)
 8002964:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002968:	6013      	str	r3, [r2, #0]
 800296a:	e00b      	b.n	8002984 <HAL_RCC_OscConfig+0xb0>
 800296c:	4b69      	ldr	r3, [pc, #420]	@ (8002b14 <HAL_RCC_OscConfig+0x240>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a68      	ldr	r2, [pc, #416]	@ (8002b14 <HAL_RCC_OscConfig+0x240>)
 8002972:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002976:	6013      	str	r3, [r2, #0]
 8002978:	4b66      	ldr	r3, [pc, #408]	@ (8002b14 <HAL_RCC_OscConfig+0x240>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a65      	ldr	r2, [pc, #404]	@ (8002b14 <HAL_RCC_OscConfig+0x240>)
 800297e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002982:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d013      	beq.n	80029b4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800298c:	f7fe fa58 	bl	8000e40 <HAL_GetTick>
 8002990:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002992:	e008      	b.n	80029a6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002994:	f7fe fa54 	bl	8000e40 <HAL_GetTick>
 8002998:	4602      	mov	r2, r0
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	2b64      	cmp	r3, #100	@ 0x64
 80029a0:	d901      	bls.n	80029a6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80029a2:	2303      	movs	r3, #3
 80029a4:	e207      	b.n	8002db6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029a6:	4b5b      	ldr	r3, [pc, #364]	@ (8002b14 <HAL_RCC_OscConfig+0x240>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d0f0      	beq.n	8002994 <HAL_RCC_OscConfig+0xc0>
 80029b2:	e014      	b.n	80029de <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029b4:	f7fe fa44 	bl	8000e40 <HAL_GetTick>
 80029b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029ba:	e008      	b.n	80029ce <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029bc:	f7fe fa40 	bl	8000e40 <HAL_GetTick>
 80029c0:	4602      	mov	r2, r0
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	1ad3      	subs	r3, r2, r3
 80029c6:	2b64      	cmp	r3, #100	@ 0x64
 80029c8:	d901      	bls.n	80029ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80029ca:	2303      	movs	r3, #3
 80029cc:	e1f3      	b.n	8002db6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029ce:	4b51      	ldr	r3, [pc, #324]	@ (8002b14 <HAL_RCC_OscConfig+0x240>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d1f0      	bne.n	80029bc <HAL_RCC_OscConfig+0xe8>
 80029da:	e000      	b.n	80029de <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 0302 	and.w	r3, r3, #2
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d063      	beq.n	8002ab2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80029ea:	4b4a      	ldr	r3, [pc, #296]	@ (8002b14 <HAL_RCC_OscConfig+0x240>)
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	f003 030c 	and.w	r3, r3, #12
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d00b      	beq.n	8002a0e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029f6:	4b47      	ldr	r3, [pc, #284]	@ (8002b14 <HAL_RCC_OscConfig+0x240>)
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80029fe:	2b08      	cmp	r3, #8
 8002a00:	d11c      	bne.n	8002a3c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a02:	4b44      	ldr	r3, [pc, #272]	@ (8002b14 <HAL_RCC_OscConfig+0x240>)
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d116      	bne.n	8002a3c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a0e:	4b41      	ldr	r3, [pc, #260]	@ (8002b14 <HAL_RCC_OscConfig+0x240>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 0302 	and.w	r3, r3, #2
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d005      	beq.n	8002a26 <HAL_RCC_OscConfig+0x152>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	68db      	ldr	r3, [r3, #12]
 8002a1e:	2b01      	cmp	r3, #1
 8002a20:	d001      	beq.n	8002a26 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	e1c7      	b.n	8002db6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a26:	4b3b      	ldr	r3, [pc, #236]	@ (8002b14 <HAL_RCC_OscConfig+0x240>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	691b      	ldr	r3, [r3, #16]
 8002a32:	00db      	lsls	r3, r3, #3
 8002a34:	4937      	ldr	r1, [pc, #220]	@ (8002b14 <HAL_RCC_OscConfig+0x240>)
 8002a36:	4313      	orrs	r3, r2
 8002a38:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a3a:	e03a      	b.n	8002ab2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	68db      	ldr	r3, [r3, #12]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d020      	beq.n	8002a86 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a44:	4b34      	ldr	r3, [pc, #208]	@ (8002b18 <HAL_RCC_OscConfig+0x244>)
 8002a46:	2201      	movs	r2, #1
 8002a48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a4a:	f7fe f9f9 	bl	8000e40 <HAL_GetTick>
 8002a4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a50:	e008      	b.n	8002a64 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a52:	f7fe f9f5 	bl	8000e40 <HAL_GetTick>
 8002a56:	4602      	mov	r2, r0
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	1ad3      	subs	r3, r2, r3
 8002a5c:	2b02      	cmp	r3, #2
 8002a5e:	d901      	bls.n	8002a64 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002a60:	2303      	movs	r3, #3
 8002a62:	e1a8      	b.n	8002db6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a64:	4b2b      	ldr	r3, [pc, #172]	@ (8002b14 <HAL_RCC_OscConfig+0x240>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 0302 	and.w	r3, r3, #2
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d0f0      	beq.n	8002a52 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a70:	4b28      	ldr	r3, [pc, #160]	@ (8002b14 <HAL_RCC_OscConfig+0x240>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	691b      	ldr	r3, [r3, #16]
 8002a7c:	00db      	lsls	r3, r3, #3
 8002a7e:	4925      	ldr	r1, [pc, #148]	@ (8002b14 <HAL_RCC_OscConfig+0x240>)
 8002a80:	4313      	orrs	r3, r2
 8002a82:	600b      	str	r3, [r1, #0]
 8002a84:	e015      	b.n	8002ab2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a86:	4b24      	ldr	r3, [pc, #144]	@ (8002b18 <HAL_RCC_OscConfig+0x244>)
 8002a88:	2200      	movs	r2, #0
 8002a8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a8c:	f7fe f9d8 	bl	8000e40 <HAL_GetTick>
 8002a90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a92:	e008      	b.n	8002aa6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a94:	f7fe f9d4 	bl	8000e40 <HAL_GetTick>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	1ad3      	subs	r3, r2, r3
 8002a9e:	2b02      	cmp	r3, #2
 8002aa0:	d901      	bls.n	8002aa6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	e187      	b.n	8002db6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002aa6:	4b1b      	ldr	r3, [pc, #108]	@ (8002b14 <HAL_RCC_OscConfig+0x240>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 0302 	and.w	r3, r3, #2
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d1f0      	bne.n	8002a94 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 0308 	and.w	r3, r3, #8
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d036      	beq.n	8002b2c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	695b      	ldr	r3, [r3, #20]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d016      	beq.n	8002af4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ac6:	4b15      	ldr	r3, [pc, #84]	@ (8002b1c <HAL_RCC_OscConfig+0x248>)
 8002ac8:	2201      	movs	r2, #1
 8002aca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002acc:	f7fe f9b8 	bl	8000e40 <HAL_GetTick>
 8002ad0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ad2:	e008      	b.n	8002ae6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ad4:	f7fe f9b4 	bl	8000e40 <HAL_GetTick>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	1ad3      	subs	r3, r2, r3
 8002ade:	2b02      	cmp	r3, #2
 8002ae0:	d901      	bls.n	8002ae6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002ae2:	2303      	movs	r3, #3
 8002ae4:	e167      	b.n	8002db6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ae6:	4b0b      	ldr	r3, [pc, #44]	@ (8002b14 <HAL_RCC_OscConfig+0x240>)
 8002ae8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002aea:	f003 0302 	and.w	r3, r3, #2
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d0f0      	beq.n	8002ad4 <HAL_RCC_OscConfig+0x200>
 8002af2:	e01b      	b.n	8002b2c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002af4:	4b09      	ldr	r3, [pc, #36]	@ (8002b1c <HAL_RCC_OscConfig+0x248>)
 8002af6:	2200      	movs	r2, #0
 8002af8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002afa:	f7fe f9a1 	bl	8000e40 <HAL_GetTick>
 8002afe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b00:	e00e      	b.n	8002b20 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b02:	f7fe f99d 	bl	8000e40 <HAL_GetTick>
 8002b06:	4602      	mov	r2, r0
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	1ad3      	subs	r3, r2, r3
 8002b0c:	2b02      	cmp	r3, #2
 8002b0e:	d907      	bls.n	8002b20 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002b10:	2303      	movs	r3, #3
 8002b12:	e150      	b.n	8002db6 <HAL_RCC_OscConfig+0x4e2>
 8002b14:	40023800 	.word	0x40023800
 8002b18:	42470000 	.word	0x42470000
 8002b1c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b20:	4b88      	ldr	r3, [pc, #544]	@ (8002d44 <HAL_RCC_OscConfig+0x470>)
 8002b22:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b24:	f003 0302 	and.w	r3, r3, #2
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d1ea      	bne.n	8002b02 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 0304 	and.w	r3, r3, #4
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	f000 8097 	beq.w	8002c68 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b3e:	4b81      	ldr	r3, [pc, #516]	@ (8002d44 <HAL_RCC_OscConfig+0x470>)
 8002b40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d10f      	bne.n	8002b6a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	60bb      	str	r3, [r7, #8]
 8002b4e:	4b7d      	ldr	r3, [pc, #500]	@ (8002d44 <HAL_RCC_OscConfig+0x470>)
 8002b50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b52:	4a7c      	ldr	r2, [pc, #496]	@ (8002d44 <HAL_RCC_OscConfig+0x470>)
 8002b54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b58:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b5a:	4b7a      	ldr	r3, [pc, #488]	@ (8002d44 <HAL_RCC_OscConfig+0x470>)
 8002b5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b62:	60bb      	str	r3, [r7, #8]
 8002b64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b66:	2301      	movs	r3, #1
 8002b68:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b6a:	4b77      	ldr	r3, [pc, #476]	@ (8002d48 <HAL_RCC_OscConfig+0x474>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d118      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b76:	4b74      	ldr	r3, [pc, #464]	@ (8002d48 <HAL_RCC_OscConfig+0x474>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a73      	ldr	r2, [pc, #460]	@ (8002d48 <HAL_RCC_OscConfig+0x474>)
 8002b7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b82:	f7fe f95d 	bl	8000e40 <HAL_GetTick>
 8002b86:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b88:	e008      	b.n	8002b9c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b8a:	f7fe f959 	bl	8000e40 <HAL_GetTick>
 8002b8e:	4602      	mov	r2, r0
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	1ad3      	subs	r3, r2, r3
 8002b94:	2b02      	cmp	r3, #2
 8002b96:	d901      	bls.n	8002b9c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002b98:	2303      	movs	r3, #3
 8002b9a:	e10c      	b.n	8002db6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b9c:	4b6a      	ldr	r3, [pc, #424]	@ (8002d48 <HAL_RCC_OscConfig+0x474>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d0f0      	beq.n	8002b8a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	d106      	bne.n	8002bbe <HAL_RCC_OscConfig+0x2ea>
 8002bb0:	4b64      	ldr	r3, [pc, #400]	@ (8002d44 <HAL_RCC_OscConfig+0x470>)
 8002bb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bb4:	4a63      	ldr	r2, [pc, #396]	@ (8002d44 <HAL_RCC_OscConfig+0x470>)
 8002bb6:	f043 0301 	orr.w	r3, r3, #1
 8002bba:	6713      	str	r3, [r2, #112]	@ 0x70
 8002bbc:	e01c      	b.n	8002bf8 <HAL_RCC_OscConfig+0x324>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	2b05      	cmp	r3, #5
 8002bc4:	d10c      	bne.n	8002be0 <HAL_RCC_OscConfig+0x30c>
 8002bc6:	4b5f      	ldr	r3, [pc, #380]	@ (8002d44 <HAL_RCC_OscConfig+0x470>)
 8002bc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bca:	4a5e      	ldr	r2, [pc, #376]	@ (8002d44 <HAL_RCC_OscConfig+0x470>)
 8002bcc:	f043 0304 	orr.w	r3, r3, #4
 8002bd0:	6713      	str	r3, [r2, #112]	@ 0x70
 8002bd2:	4b5c      	ldr	r3, [pc, #368]	@ (8002d44 <HAL_RCC_OscConfig+0x470>)
 8002bd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bd6:	4a5b      	ldr	r2, [pc, #364]	@ (8002d44 <HAL_RCC_OscConfig+0x470>)
 8002bd8:	f043 0301 	orr.w	r3, r3, #1
 8002bdc:	6713      	str	r3, [r2, #112]	@ 0x70
 8002bde:	e00b      	b.n	8002bf8 <HAL_RCC_OscConfig+0x324>
 8002be0:	4b58      	ldr	r3, [pc, #352]	@ (8002d44 <HAL_RCC_OscConfig+0x470>)
 8002be2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002be4:	4a57      	ldr	r2, [pc, #348]	@ (8002d44 <HAL_RCC_OscConfig+0x470>)
 8002be6:	f023 0301 	bic.w	r3, r3, #1
 8002bea:	6713      	str	r3, [r2, #112]	@ 0x70
 8002bec:	4b55      	ldr	r3, [pc, #340]	@ (8002d44 <HAL_RCC_OscConfig+0x470>)
 8002bee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bf0:	4a54      	ldr	r2, [pc, #336]	@ (8002d44 <HAL_RCC_OscConfig+0x470>)
 8002bf2:	f023 0304 	bic.w	r3, r3, #4
 8002bf6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d015      	beq.n	8002c2c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c00:	f7fe f91e 	bl	8000e40 <HAL_GetTick>
 8002c04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c06:	e00a      	b.n	8002c1e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c08:	f7fe f91a 	bl	8000e40 <HAL_GetTick>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	1ad3      	subs	r3, r2, r3
 8002c12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d901      	bls.n	8002c1e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	e0cb      	b.n	8002db6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c1e:	4b49      	ldr	r3, [pc, #292]	@ (8002d44 <HAL_RCC_OscConfig+0x470>)
 8002c20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c22:	f003 0302 	and.w	r3, r3, #2
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d0ee      	beq.n	8002c08 <HAL_RCC_OscConfig+0x334>
 8002c2a:	e014      	b.n	8002c56 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c2c:	f7fe f908 	bl	8000e40 <HAL_GetTick>
 8002c30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c32:	e00a      	b.n	8002c4a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c34:	f7fe f904 	bl	8000e40 <HAL_GetTick>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	1ad3      	subs	r3, r2, r3
 8002c3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d901      	bls.n	8002c4a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002c46:	2303      	movs	r3, #3
 8002c48:	e0b5      	b.n	8002db6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c4a:	4b3e      	ldr	r3, [pc, #248]	@ (8002d44 <HAL_RCC_OscConfig+0x470>)
 8002c4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c4e:	f003 0302 	and.w	r3, r3, #2
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d1ee      	bne.n	8002c34 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002c56:	7dfb      	ldrb	r3, [r7, #23]
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	d105      	bne.n	8002c68 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c5c:	4b39      	ldr	r3, [pc, #228]	@ (8002d44 <HAL_RCC_OscConfig+0x470>)
 8002c5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c60:	4a38      	ldr	r2, [pc, #224]	@ (8002d44 <HAL_RCC_OscConfig+0x470>)
 8002c62:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c66:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	699b      	ldr	r3, [r3, #24]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	f000 80a1 	beq.w	8002db4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c72:	4b34      	ldr	r3, [pc, #208]	@ (8002d44 <HAL_RCC_OscConfig+0x470>)
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	f003 030c 	and.w	r3, r3, #12
 8002c7a:	2b08      	cmp	r3, #8
 8002c7c:	d05c      	beq.n	8002d38 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	699b      	ldr	r3, [r3, #24]
 8002c82:	2b02      	cmp	r3, #2
 8002c84:	d141      	bne.n	8002d0a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c86:	4b31      	ldr	r3, [pc, #196]	@ (8002d4c <HAL_RCC_OscConfig+0x478>)
 8002c88:	2200      	movs	r2, #0
 8002c8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c8c:	f7fe f8d8 	bl	8000e40 <HAL_GetTick>
 8002c90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c92:	e008      	b.n	8002ca6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c94:	f7fe f8d4 	bl	8000e40 <HAL_GetTick>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	1ad3      	subs	r3, r2, r3
 8002c9e:	2b02      	cmp	r3, #2
 8002ca0:	d901      	bls.n	8002ca6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	e087      	b.n	8002db6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ca6:	4b27      	ldr	r3, [pc, #156]	@ (8002d44 <HAL_RCC_OscConfig+0x470>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d1f0      	bne.n	8002c94 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	69da      	ldr	r2, [r3, #28]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6a1b      	ldr	r3, [r3, #32]
 8002cba:	431a      	orrs	r2, r3
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cc0:	019b      	lsls	r3, r3, #6
 8002cc2:	431a      	orrs	r2, r3
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cc8:	085b      	lsrs	r3, r3, #1
 8002cca:	3b01      	subs	r3, #1
 8002ccc:	041b      	lsls	r3, r3, #16
 8002cce:	431a      	orrs	r2, r3
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cd4:	061b      	lsls	r3, r3, #24
 8002cd6:	491b      	ldr	r1, [pc, #108]	@ (8002d44 <HAL_RCC_OscConfig+0x470>)
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002cdc:	4b1b      	ldr	r3, [pc, #108]	@ (8002d4c <HAL_RCC_OscConfig+0x478>)
 8002cde:	2201      	movs	r2, #1
 8002ce0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ce2:	f7fe f8ad 	bl	8000e40 <HAL_GetTick>
 8002ce6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ce8:	e008      	b.n	8002cfc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cea:	f7fe f8a9 	bl	8000e40 <HAL_GetTick>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	1ad3      	subs	r3, r2, r3
 8002cf4:	2b02      	cmp	r3, #2
 8002cf6:	d901      	bls.n	8002cfc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002cf8:	2303      	movs	r3, #3
 8002cfa:	e05c      	b.n	8002db6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cfc:	4b11      	ldr	r3, [pc, #68]	@ (8002d44 <HAL_RCC_OscConfig+0x470>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d0f0      	beq.n	8002cea <HAL_RCC_OscConfig+0x416>
 8002d08:	e054      	b.n	8002db4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d0a:	4b10      	ldr	r3, [pc, #64]	@ (8002d4c <HAL_RCC_OscConfig+0x478>)
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d10:	f7fe f896 	bl	8000e40 <HAL_GetTick>
 8002d14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d16:	e008      	b.n	8002d2a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d18:	f7fe f892 	bl	8000e40 <HAL_GetTick>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	2b02      	cmp	r3, #2
 8002d24:	d901      	bls.n	8002d2a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002d26:	2303      	movs	r3, #3
 8002d28:	e045      	b.n	8002db6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d2a:	4b06      	ldr	r3, [pc, #24]	@ (8002d44 <HAL_RCC_OscConfig+0x470>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d1f0      	bne.n	8002d18 <HAL_RCC_OscConfig+0x444>
 8002d36:	e03d      	b.n	8002db4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	699b      	ldr	r3, [r3, #24]
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	d107      	bne.n	8002d50 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	e038      	b.n	8002db6 <HAL_RCC_OscConfig+0x4e2>
 8002d44:	40023800 	.word	0x40023800
 8002d48:	40007000 	.word	0x40007000
 8002d4c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002d50:	4b1b      	ldr	r3, [pc, #108]	@ (8002dc0 <HAL_RCC_OscConfig+0x4ec>)
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	699b      	ldr	r3, [r3, #24]
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	d028      	beq.n	8002db0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d121      	bne.n	8002db0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d76:	429a      	cmp	r2, r3
 8002d78:	d11a      	bne.n	8002db0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d7a:	68fa      	ldr	r2, [r7, #12]
 8002d7c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002d80:	4013      	ands	r3, r2
 8002d82:	687a      	ldr	r2, [r7, #4]
 8002d84:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002d86:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d111      	bne.n	8002db0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d96:	085b      	lsrs	r3, r3, #1
 8002d98:	3b01      	subs	r3, #1
 8002d9a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	d107      	bne.n	8002db0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002daa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002dac:	429a      	cmp	r2, r3
 8002dae:	d001      	beq.n	8002db4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	e000      	b.n	8002db6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002db4:	2300      	movs	r3, #0
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	3718      	adds	r7, #24
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}
 8002dbe:	bf00      	nop
 8002dc0:	40023800 	.word	0x40023800

08002dc4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b084      	sub	sp, #16
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
 8002dcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d101      	bne.n	8002dd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e0cc      	b.n	8002f72 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002dd8:	4b68      	ldr	r3, [pc, #416]	@ (8002f7c <HAL_RCC_ClockConfig+0x1b8>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 0307 	and.w	r3, r3, #7
 8002de0:	683a      	ldr	r2, [r7, #0]
 8002de2:	429a      	cmp	r2, r3
 8002de4:	d90c      	bls.n	8002e00 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002de6:	4b65      	ldr	r3, [pc, #404]	@ (8002f7c <HAL_RCC_ClockConfig+0x1b8>)
 8002de8:	683a      	ldr	r2, [r7, #0]
 8002dea:	b2d2      	uxtb	r2, r2
 8002dec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dee:	4b63      	ldr	r3, [pc, #396]	@ (8002f7c <HAL_RCC_ClockConfig+0x1b8>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 0307 	and.w	r3, r3, #7
 8002df6:	683a      	ldr	r2, [r7, #0]
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	d001      	beq.n	8002e00 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	e0b8      	b.n	8002f72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 0302 	and.w	r3, r3, #2
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d020      	beq.n	8002e4e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 0304 	and.w	r3, r3, #4
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d005      	beq.n	8002e24 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e18:	4b59      	ldr	r3, [pc, #356]	@ (8002f80 <HAL_RCC_ClockConfig+0x1bc>)
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	4a58      	ldr	r2, [pc, #352]	@ (8002f80 <HAL_RCC_ClockConfig+0x1bc>)
 8002e1e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002e22:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f003 0308 	and.w	r3, r3, #8
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d005      	beq.n	8002e3c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e30:	4b53      	ldr	r3, [pc, #332]	@ (8002f80 <HAL_RCC_ClockConfig+0x1bc>)
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	4a52      	ldr	r2, [pc, #328]	@ (8002f80 <HAL_RCC_ClockConfig+0x1bc>)
 8002e36:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002e3a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e3c:	4b50      	ldr	r3, [pc, #320]	@ (8002f80 <HAL_RCC_ClockConfig+0x1bc>)
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	494d      	ldr	r1, [pc, #308]	@ (8002f80 <HAL_RCC_ClockConfig+0x1bc>)
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 0301 	and.w	r3, r3, #1
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d044      	beq.n	8002ee4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	d107      	bne.n	8002e72 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e62:	4b47      	ldr	r3, [pc, #284]	@ (8002f80 <HAL_RCC_ClockConfig+0x1bc>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d119      	bne.n	8002ea2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e07f      	b.n	8002f72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	2b02      	cmp	r3, #2
 8002e78:	d003      	beq.n	8002e82 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e7e:	2b03      	cmp	r3, #3
 8002e80:	d107      	bne.n	8002e92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e82:	4b3f      	ldr	r3, [pc, #252]	@ (8002f80 <HAL_RCC_ClockConfig+0x1bc>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d109      	bne.n	8002ea2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e06f      	b.n	8002f72 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e92:	4b3b      	ldr	r3, [pc, #236]	@ (8002f80 <HAL_RCC_ClockConfig+0x1bc>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 0302 	and.w	r3, r3, #2
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d101      	bne.n	8002ea2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e067      	b.n	8002f72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ea2:	4b37      	ldr	r3, [pc, #220]	@ (8002f80 <HAL_RCC_ClockConfig+0x1bc>)
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	f023 0203 	bic.w	r2, r3, #3
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	4934      	ldr	r1, [pc, #208]	@ (8002f80 <HAL_RCC_ClockConfig+0x1bc>)
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002eb4:	f7fd ffc4 	bl	8000e40 <HAL_GetTick>
 8002eb8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eba:	e00a      	b.n	8002ed2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ebc:	f7fd ffc0 	bl	8000e40 <HAL_GetTick>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	1ad3      	subs	r3, r2, r3
 8002ec6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d901      	bls.n	8002ed2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ece:	2303      	movs	r3, #3
 8002ed0:	e04f      	b.n	8002f72 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ed2:	4b2b      	ldr	r3, [pc, #172]	@ (8002f80 <HAL_RCC_ClockConfig+0x1bc>)
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	f003 020c 	and.w	r2, r3, #12
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	009b      	lsls	r3, r3, #2
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d1eb      	bne.n	8002ebc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ee4:	4b25      	ldr	r3, [pc, #148]	@ (8002f7c <HAL_RCC_ClockConfig+0x1b8>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f003 0307 	and.w	r3, r3, #7
 8002eec:	683a      	ldr	r2, [r7, #0]
 8002eee:	429a      	cmp	r2, r3
 8002ef0:	d20c      	bcs.n	8002f0c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ef2:	4b22      	ldr	r3, [pc, #136]	@ (8002f7c <HAL_RCC_ClockConfig+0x1b8>)
 8002ef4:	683a      	ldr	r2, [r7, #0]
 8002ef6:	b2d2      	uxtb	r2, r2
 8002ef8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002efa:	4b20      	ldr	r3, [pc, #128]	@ (8002f7c <HAL_RCC_ClockConfig+0x1b8>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 0307 	and.w	r3, r3, #7
 8002f02:	683a      	ldr	r2, [r7, #0]
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d001      	beq.n	8002f0c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e032      	b.n	8002f72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f003 0304 	and.w	r3, r3, #4
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d008      	beq.n	8002f2a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f18:	4b19      	ldr	r3, [pc, #100]	@ (8002f80 <HAL_RCC_ClockConfig+0x1bc>)
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	68db      	ldr	r3, [r3, #12]
 8002f24:	4916      	ldr	r1, [pc, #88]	@ (8002f80 <HAL_RCC_ClockConfig+0x1bc>)
 8002f26:	4313      	orrs	r3, r2
 8002f28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 0308 	and.w	r3, r3, #8
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d009      	beq.n	8002f4a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f36:	4b12      	ldr	r3, [pc, #72]	@ (8002f80 <HAL_RCC_ClockConfig+0x1bc>)
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	691b      	ldr	r3, [r3, #16]
 8002f42:	00db      	lsls	r3, r3, #3
 8002f44:	490e      	ldr	r1, [pc, #56]	@ (8002f80 <HAL_RCC_ClockConfig+0x1bc>)
 8002f46:	4313      	orrs	r3, r2
 8002f48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002f4a:	f000 f821 	bl	8002f90 <HAL_RCC_GetSysClockFreq>
 8002f4e:	4602      	mov	r2, r0
 8002f50:	4b0b      	ldr	r3, [pc, #44]	@ (8002f80 <HAL_RCC_ClockConfig+0x1bc>)
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	091b      	lsrs	r3, r3, #4
 8002f56:	f003 030f 	and.w	r3, r3, #15
 8002f5a:	490a      	ldr	r1, [pc, #40]	@ (8002f84 <HAL_RCC_ClockConfig+0x1c0>)
 8002f5c:	5ccb      	ldrb	r3, [r1, r3]
 8002f5e:	fa22 f303 	lsr.w	r3, r2, r3
 8002f62:	4a09      	ldr	r2, [pc, #36]	@ (8002f88 <HAL_RCC_ClockConfig+0x1c4>)
 8002f64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002f66:	4b09      	ldr	r3, [pc, #36]	@ (8002f8c <HAL_RCC_ClockConfig+0x1c8>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f7fd fe4c 	bl	8000c08 <HAL_InitTick>

  return HAL_OK;
 8002f70:	2300      	movs	r3, #0
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3710      	adds	r7, #16
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	bf00      	nop
 8002f7c:	40023c00 	.word	0x40023c00
 8002f80:	40023800 	.word	0x40023800
 8002f84:	0800a130 	.word	0x0800a130
 8002f88:	20000000 	.word	0x20000000
 8002f8c:	20000004 	.word	0x20000004

08002f90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f94:	b094      	sub	sp, #80	@ 0x50
 8002f96:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002fa8:	4b79      	ldr	r3, [pc, #484]	@ (8003190 <HAL_RCC_GetSysClockFreq+0x200>)
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	f003 030c 	and.w	r3, r3, #12
 8002fb0:	2b08      	cmp	r3, #8
 8002fb2:	d00d      	beq.n	8002fd0 <HAL_RCC_GetSysClockFreq+0x40>
 8002fb4:	2b08      	cmp	r3, #8
 8002fb6:	f200 80e1 	bhi.w	800317c <HAL_RCC_GetSysClockFreq+0x1ec>
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d002      	beq.n	8002fc4 <HAL_RCC_GetSysClockFreq+0x34>
 8002fbe:	2b04      	cmp	r3, #4
 8002fc0:	d003      	beq.n	8002fca <HAL_RCC_GetSysClockFreq+0x3a>
 8002fc2:	e0db      	b.n	800317c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002fc4:	4b73      	ldr	r3, [pc, #460]	@ (8003194 <HAL_RCC_GetSysClockFreq+0x204>)
 8002fc6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002fc8:	e0db      	b.n	8003182 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002fca:	4b73      	ldr	r3, [pc, #460]	@ (8003198 <HAL_RCC_GetSysClockFreq+0x208>)
 8002fcc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002fce:	e0d8      	b.n	8003182 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002fd0:	4b6f      	ldr	r3, [pc, #444]	@ (8003190 <HAL_RCC_GetSysClockFreq+0x200>)
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002fd8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002fda:	4b6d      	ldr	r3, [pc, #436]	@ (8003190 <HAL_RCC_GetSysClockFreq+0x200>)
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d063      	beq.n	80030ae <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fe6:	4b6a      	ldr	r3, [pc, #424]	@ (8003190 <HAL_RCC_GetSysClockFreq+0x200>)
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	099b      	lsrs	r3, r3, #6
 8002fec:	2200      	movs	r2, #0
 8002fee:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002ff0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002ff2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ff4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ff8:	633b      	str	r3, [r7, #48]	@ 0x30
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	637b      	str	r3, [r7, #52]	@ 0x34
 8002ffe:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003002:	4622      	mov	r2, r4
 8003004:	462b      	mov	r3, r5
 8003006:	f04f 0000 	mov.w	r0, #0
 800300a:	f04f 0100 	mov.w	r1, #0
 800300e:	0159      	lsls	r1, r3, #5
 8003010:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003014:	0150      	lsls	r0, r2, #5
 8003016:	4602      	mov	r2, r0
 8003018:	460b      	mov	r3, r1
 800301a:	4621      	mov	r1, r4
 800301c:	1a51      	subs	r1, r2, r1
 800301e:	6139      	str	r1, [r7, #16]
 8003020:	4629      	mov	r1, r5
 8003022:	eb63 0301 	sbc.w	r3, r3, r1
 8003026:	617b      	str	r3, [r7, #20]
 8003028:	f04f 0200 	mov.w	r2, #0
 800302c:	f04f 0300 	mov.w	r3, #0
 8003030:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003034:	4659      	mov	r1, fp
 8003036:	018b      	lsls	r3, r1, #6
 8003038:	4651      	mov	r1, sl
 800303a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800303e:	4651      	mov	r1, sl
 8003040:	018a      	lsls	r2, r1, #6
 8003042:	4651      	mov	r1, sl
 8003044:	ebb2 0801 	subs.w	r8, r2, r1
 8003048:	4659      	mov	r1, fp
 800304a:	eb63 0901 	sbc.w	r9, r3, r1
 800304e:	f04f 0200 	mov.w	r2, #0
 8003052:	f04f 0300 	mov.w	r3, #0
 8003056:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800305a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800305e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003062:	4690      	mov	r8, r2
 8003064:	4699      	mov	r9, r3
 8003066:	4623      	mov	r3, r4
 8003068:	eb18 0303 	adds.w	r3, r8, r3
 800306c:	60bb      	str	r3, [r7, #8]
 800306e:	462b      	mov	r3, r5
 8003070:	eb49 0303 	adc.w	r3, r9, r3
 8003074:	60fb      	str	r3, [r7, #12]
 8003076:	f04f 0200 	mov.w	r2, #0
 800307a:	f04f 0300 	mov.w	r3, #0
 800307e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003082:	4629      	mov	r1, r5
 8003084:	024b      	lsls	r3, r1, #9
 8003086:	4621      	mov	r1, r4
 8003088:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800308c:	4621      	mov	r1, r4
 800308e:	024a      	lsls	r2, r1, #9
 8003090:	4610      	mov	r0, r2
 8003092:	4619      	mov	r1, r3
 8003094:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003096:	2200      	movs	r2, #0
 8003098:	62bb      	str	r3, [r7, #40]	@ 0x28
 800309a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800309c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80030a0:	f7fd f89e 	bl	80001e0 <__aeabi_uldivmod>
 80030a4:	4602      	mov	r2, r0
 80030a6:	460b      	mov	r3, r1
 80030a8:	4613      	mov	r3, r2
 80030aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80030ac:	e058      	b.n	8003160 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030ae:	4b38      	ldr	r3, [pc, #224]	@ (8003190 <HAL_RCC_GetSysClockFreq+0x200>)
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	099b      	lsrs	r3, r3, #6
 80030b4:	2200      	movs	r2, #0
 80030b6:	4618      	mov	r0, r3
 80030b8:	4611      	mov	r1, r2
 80030ba:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80030be:	623b      	str	r3, [r7, #32]
 80030c0:	2300      	movs	r3, #0
 80030c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80030c4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80030c8:	4642      	mov	r2, r8
 80030ca:	464b      	mov	r3, r9
 80030cc:	f04f 0000 	mov.w	r0, #0
 80030d0:	f04f 0100 	mov.w	r1, #0
 80030d4:	0159      	lsls	r1, r3, #5
 80030d6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030da:	0150      	lsls	r0, r2, #5
 80030dc:	4602      	mov	r2, r0
 80030de:	460b      	mov	r3, r1
 80030e0:	4641      	mov	r1, r8
 80030e2:	ebb2 0a01 	subs.w	sl, r2, r1
 80030e6:	4649      	mov	r1, r9
 80030e8:	eb63 0b01 	sbc.w	fp, r3, r1
 80030ec:	f04f 0200 	mov.w	r2, #0
 80030f0:	f04f 0300 	mov.w	r3, #0
 80030f4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80030f8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80030fc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003100:	ebb2 040a 	subs.w	r4, r2, sl
 8003104:	eb63 050b 	sbc.w	r5, r3, fp
 8003108:	f04f 0200 	mov.w	r2, #0
 800310c:	f04f 0300 	mov.w	r3, #0
 8003110:	00eb      	lsls	r3, r5, #3
 8003112:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003116:	00e2      	lsls	r2, r4, #3
 8003118:	4614      	mov	r4, r2
 800311a:	461d      	mov	r5, r3
 800311c:	4643      	mov	r3, r8
 800311e:	18e3      	adds	r3, r4, r3
 8003120:	603b      	str	r3, [r7, #0]
 8003122:	464b      	mov	r3, r9
 8003124:	eb45 0303 	adc.w	r3, r5, r3
 8003128:	607b      	str	r3, [r7, #4]
 800312a:	f04f 0200 	mov.w	r2, #0
 800312e:	f04f 0300 	mov.w	r3, #0
 8003132:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003136:	4629      	mov	r1, r5
 8003138:	028b      	lsls	r3, r1, #10
 800313a:	4621      	mov	r1, r4
 800313c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003140:	4621      	mov	r1, r4
 8003142:	028a      	lsls	r2, r1, #10
 8003144:	4610      	mov	r0, r2
 8003146:	4619      	mov	r1, r3
 8003148:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800314a:	2200      	movs	r2, #0
 800314c:	61bb      	str	r3, [r7, #24]
 800314e:	61fa      	str	r2, [r7, #28]
 8003150:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003154:	f7fd f844 	bl	80001e0 <__aeabi_uldivmod>
 8003158:	4602      	mov	r2, r0
 800315a:	460b      	mov	r3, r1
 800315c:	4613      	mov	r3, r2
 800315e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003160:	4b0b      	ldr	r3, [pc, #44]	@ (8003190 <HAL_RCC_GetSysClockFreq+0x200>)
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	0c1b      	lsrs	r3, r3, #16
 8003166:	f003 0303 	and.w	r3, r3, #3
 800316a:	3301      	adds	r3, #1
 800316c:	005b      	lsls	r3, r3, #1
 800316e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003170:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003172:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003174:	fbb2 f3f3 	udiv	r3, r2, r3
 8003178:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800317a:	e002      	b.n	8003182 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800317c:	4b05      	ldr	r3, [pc, #20]	@ (8003194 <HAL_RCC_GetSysClockFreq+0x204>)
 800317e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003180:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003182:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003184:	4618      	mov	r0, r3
 8003186:	3750      	adds	r7, #80	@ 0x50
 8003188:	46bd      	mov	sp, r7
 800318a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800318e:	bf00      	nop
 8003190:	40023800 	.word	0x40023800
 8003194:	00f42400 	.word	0x00f42400
 8003198:	007a1200 	.word	0x007a1200

0800319c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800319c:	b480      	push	{r7}
 800319e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031a0:	4b03      	ldr	r3, [pc, #12]	@ (80031b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80031a2:	681b      	ldr	r3, [r3, #0]
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	46bd      	mov	sp, r7
 80031a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ac:	4770      	bx	lr
 80031ae:	bf00      	nop
 80031b0:	20000000 	.word	0x20000000

080031b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80031b8:	f7ff fff0 	bl	800319c <HAL_RCC_GetHCLKFreq>
 80031bc:	4602      	mov	r2, r0
 80031be:	4b05      	ldr	r3, [pc, #20]	@ (80031d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	0b5b      	lsrs	r3, r3, #13
 80031c4:	f003 0307 	and.w	r3, r3, #7
 80031c8:	4903      	ldr	r1, [pc, #12]	@ (80031d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80031ca:	5ccb      	ldrb	r3, [r1, r3]
 80031cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	bd80      	pop	{r7, pc}
 80031d4:	40023800 	.word	0x40023800
 80031d8:	0800a140 	.word	0x0800a140

080031dc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80031dc:	b480      	push	{r7}
 80031de:	b083      	sub	sp, #12
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
 80031e4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	220f      	movs	r2, #15
 80031ea:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80031ec:	4b12      	ldr	r3, [pc, #72]	@ (8003238 <HAL_RCC_GetClockConfig+0x5c>)
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	f003 0203 	and.w	r2, r3, #3
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80031f8:	4b0f      	ldr	r3, [pc, #60]	@ (8003238 <HAL_RCC_GetClockConfig+0x5c>)
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003204:	4b0c      	ldr	r3, [pc, #48]	@ (8003238 <HAL_RCC_GetClockConfig+0x5c>)
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003210:	4b09      	ldr	r3, [pc, #36]	@ (8003238 <HAL_RCC_GetClockConfig+0x5c>)
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	08db      	lsrs	r3, r3, #3
 8003216:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800321e:	4b07      	ldr	r3, [pc, #28]	@ (800323c <HAL_RCC_GetClockConfig+0x60>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 0207 	and.w	r2, r3, #7
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	601a      	str	r2, [r3, #0]
}
 800322a:	bf00      	nop
 800322c:	370c      	adds	r7, #12
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr
 8003236:	bf00      	nop
 8003238:	40023800 	.word	0x40023800
 800323c:	40023c00 	.word	0x40023c00

08003240 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b082      	sub	sp, #8
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d101      	bne.n	8003252 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	e041      	b.n	80032d6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003258:	b2db      	uxtb	r3, r3
 800325a:	2b00      	cmp	r3, #0
 800325c:	d106      	bne.n	800326c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2200      	movs	r2, #0
 8003262:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	f000 f839 	bl	80032de <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2202      	movs	r2, #2
 8003270:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681a      	ldr	r2, [r3, #0]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	3304      	adds	r3, #4
 800327c:	4619      	mov	r1, r3
 800327e:	4610      	mov	r0, r2
 8003280:	f000 f9c0 	bl	8003604 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2201      	movs	r2, #1
 8003288:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2201      	movs	r2, #1
 8003290:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2201      	movs	r2, #1
 8003298:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2201      	movs	r2, #1
 80032a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2201      	movs	r2, #1
 80032a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2201      	movs	r2, #1
 80032b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2201      	movs	r2, #1
 80032b8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2201      	movs	r2, #1
 80032c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2201      	movs	r2, #1
 80032c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2201      	movs	r2, #1
 80032d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80032d4:	2300      	movs	r3, #0
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	3708      	adds	r7, #8
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}

080032de <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80032de:	b480      	push	{r7}
 80032e0:	b083      	sub	sp, #12
 80032e2:	af00      	add	r7, sp, #0
 80032e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80032e6:	bf00      	nop
 80032e8:	370c      	adds	r7, #12
 80032ea:	46bd      	mov	sp, r7
 80032ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f0:	4770      	bx	lr
	...

080032f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b085      	sub	sp, #20
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003302:	b2db      	uxtb	r3, r3
 8003304:	2b01      	cmp	r3, #1
 8003306:	d001      	beq.n	800330c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003308:	2301      	movs	r3, #1
 800330a:	e04e      	b.n	80033aa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2202      	movs	r2, #2
 8003310:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	68da      	ldr	r2, [r3, #12]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f042 0201 	orr.w	r2, r2, #1
 8003322:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a23      	ldr	r2, [pc, #140]	@ (80033b8 <HAL_TIM_Base_Start_IT+0xc4>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d022      	beq.n	8003374 <HAL_TIM_Base_Start_IT+0x80>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003336:	d01d      	beq.n	8003374 <HAL_TIM_Base_Start_IT+0x80>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a1f      	ldr	r2, [pc, #124]	@ (80033bc <HAL_TIM_Base_Start_IT+0xc8>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d018      	beq.n	8003374 <HAL_TIM_Base_Start_IT+0x80>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a1e      	ldr	r2, [pc, #120]	@ (80033c0 <HAL_TIM_Base_Start_IT+0xcc>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d013      	beq.n	8003374 <HAL_TIM_Base_Start_IT+0x80>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a1c      	ldr	r2, [pc, #112]	@ (80033c4 <HAL_TIM_Base_Start_IT+0xd0>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d00e      	beq.n	8003374 <HAL_TIM_Base_Start_IT+0x80>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a1b      	ldr	r2, [pc, #108]	@ (80033c8 <HAL_TIM_Base_Start_IT+0xd4>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d009      	beq.n	8003374 <HAL_TIM_Base_Start_IT+0x80>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a19      	ldr	r2, [pc, #100]	@ (80033cc <HAL_TIM_Base_Start_IT+0xd8>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d004      	beq.n	8003374 <HAL_TIM_Base_Start_IT+0x80>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a18      	ldr	r2, [pc, #96]	@ (80033d0 <HAL_TIM_Base_Start_IT+0xdc>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d111      	bne.n	8003398 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	f003 0307 	and.w	r3, r3, #7
 800337e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2b06      	cmp	r3, #6
 8003384:	d010      	beq.n	80033a8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f042 0201 	orr.w	r2, r2, #1
 8003394:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003396:	e007      	b.n	80033a8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f042 0201 	orr.w	r2, r2, #1
 80033a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80033a8:	2300      	movs	r3, #0
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3714      	adds	r7, #20
 80033ae:	46bd      	mov	sp, r7
 80033b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b4:	4770      	bx	lr
 80033b6:	bf00      	nop
 80033b8:	40010000 	.word	0x40010000
 80033bc:	40000400 	.word	0x40000400
 80033c0:	40000800 	.word	0x40000800
 80033c4:	40000c00 	.word	0x40000c00
 80033c8:	40010400 	.word	0x40010400
 80033cc:	40014000 	.word	0x40014000
 80033d0:	40001800 	.word	0x40001800

080033d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b084      	sub	sp, #16
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	68db      	ldr	r3, [r3, #12]
 80033e2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	691b      	ldr	r3, [r3, #16]
 80033ea:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	f003 0302 	and.w	r3, r3, #2
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d020      	beq.n	8003438 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	f003 0302 	and.w	r3, r3, #2
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d01b      	beq.n	8003438 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f06f 0202 	mvn.w	r2, #2
 8003408:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2201      	movs	r2, #1
 800340e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	699b      	ldr	r3, [r3, #24]
 8003416:	f003 0303 	and.w	r3, r3, #3
 800341a:	2b00      	cmp	r3, #0
 800341c:	d003      	beq.n	8003426 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	f000 f8d2 	bl	80035c8 <HAL_TIM_IC_CaptureCallback>
 8003424:	e005      	b.n	8003432 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	f000 f8c4 	bl	80035b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800342c:	6878      	ldr	r0, [r7, #4]
 800342e:	f000 f8d5 	bl	80035dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2200      	movs	r2, #0
 8003436:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	f003 0304 	and.w	r3, r3, #4
 800343e:	2b00      	cmp	r3, #0
 8003440:	d020      	beq.n	8003484 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	f003 0304 	and.w	r3, r3, #4
 8003448:	2b00      	cmp	r3, #0
 800344a:	d01b      	beq.n	8003484 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f06f 0204 	mvn.w	r2, #4
 8003454:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2202      	movs	r2, #2
 800345a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	699b      	ldr	r3, [r3, #24]
 8003462:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003466:	2b00      	cmp	r3, #0
 8003468:	d003      	beq.n	8003472 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	f000 f8ac 	bl	80035c8 <HAL_TIM_IC_CaptureCallback>
 8003470:	e005      	b.n	800347e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003472:	6878      	ldr	r0, [r7, #4]
 8003474:	f000 f89e 	bl	80035b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003478:	6878      	ldr	r0, [r7, #4]
 800347a:	f000 f8af 	bl	80035dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2200      	movs	r2, #0
 8003482:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	f003 0308 	and.w	r3, r3, #8
 800348a:	2b00      	cmp	r3, #0
 800348c:	d020      	beq.n	80034d0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	f003 0308 	and.w	r3, r3, #8
 8003494:	2b00      	cmp	r3, #0
 8003496:	d01b      	beq.n	80034d0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f06f 0208 	mvn.w	r2, #8
 80034a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2204      	movs	r2, #4
 80034a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	69db      	ldr	r3, [r3, #28]
 80034ae:	f003 0303 	and.w	r3, r3, #3
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d003      	beq.n	80034be <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	f000 f886 	bl	80035c8 <HAL_TIM_IC_CaptureCallback>
 80034bc:	e005      	b.n	80034ca <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	f000 f878 	bl	80035b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034c4:	6878      	ldr	r0, [r7, #4]
 80034c6:	f000 f889 	bl	80035dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2200      	movs	r2, #0
 80034ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	f003 0310 	and.w	r3, r3, #16
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d020      	beq.n	800351c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	f003 0310 	and.w	r3, r3, #16
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d01b      	beq.n	800351c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f06f 0210 	mvn.w	r2, #16
 80034ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2208      	movs	r2, #8
 80034f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	69db      	ldr	r3, [r3, #28]
 80034fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d003      	beq.n	800350a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f000 f860 	bl	80035c8 <HAL_TIM_IC_CaptureCallback>
 8003508:	e005      	b.n	8003516 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f000 f852 	bl	80035b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003510:	6878      	ldr	r0, [r7, #4]
 8003512:	f000 f863 	bl	80035dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2200      	movs	r2, #0
 800351a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	f003 0301 	and.w	r3, r3, #1
 8003522:	2b00      	cmp	r3, #0
 8003524:	d00c      	beq.n	8003540 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	f003 0301 	and.w	r3, r3, #1
 800352c:	2b00      	cmp	r3, #0
 800352e:	d007      	beq.n	8003540 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f06f 0201 	mvn.w	r2, #1
 8003538:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f7fd fb20 	bl	8000b80 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003546:	2b00      	cmp	r3, #0
 8003548:	d00c      	beq.n	8003564 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003550:	2b00      	cmp	r3, #0
 8003552:	d007      	beq.n	8003564 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800355c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	f000 f906 	bl	8003770 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800356a:	2b00      	cmp	r3, #0
 800356c:	d00c      	beq.n	8003588 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003574:	2b00      	cmp	r3, #0
 8003576:	d007      	beq.n	8003588 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003580:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f000 f834 	bl	80035f0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	f003 0320 	and.w	r3, r3, #32
 800358e:	2b00      	cmp	r3, #0
 8003590:	d00c      	beq.n	80035ac <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	f003 0320 	and.w	r3, r3, #32
 8003598:	2b00      	cmp	r3, #0
 800359a:	d007      	beq.n	80035ac <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f06f 0220 	mvn.w	r2, #32
 80035a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f000 f8d8 	bl	800375c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80035ac:	bf00      	nop
 80035ae:	3710      	adds	r7, #16
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}

080035b4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b083      	sub	sp, #12
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80035bc:	bf00      	nop
 80035be:	370c      	adds	r7, #12
 80035c0:	46bd      	mov	sp, r7
 80035c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c6:	4770      	bx	lr

080035c8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b083      	sub	sp, #12
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80035d0:	bf00      	nop
 80035d2:	370c      	adds	r7, #12
 80035d4:	46bd      	mov	sp, r7
 80035d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035da:	4770      	bx	lr

080035dc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80035dc:	b480      	push	{r7}
 80035de:	b083      	sub	sp, #12
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80035e4:	bf00      	nop
 80035e6:	370c      	adds	r7, #12
 80035e8:	46bd      	mov	sp, r7
 80035ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ee:	4770      	bx	lr

080035f0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80035f0:	b480      	push	{r7}
 80035f2:	b083      	sub	sp, #12
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80035f8:	bf00      	nop
 80035fa:	370c      	adds	r7, #12
 80035fc:	46bd      	mov	sp, r7
 80035fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003602:	4770      	bx	lr

08003604 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003604:	b480      	push	{r7}
 8003606:	b085      	sub	sp, #20
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
 800360c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	4a46      	ldr	r2, [pc, #280]	@ (8003730 <TIM_Base_SetConfig+0x12c>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d013      	beq.n	8003644 <TIM_Base_SetConfig+0x40>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003622:	d00f      	beq.n	8003644 <TIM_Base_SetConfig+0x40>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	4a43      	ldr	r2, [pc, #268]	@ (8003734 <TIM_Base_SetConfig+0x130>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d00b      	beq.n	8003644 <TIM_Base_SetConfig+0x40>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	4a42      	ldr	r2, [pc, #264]	@ (8003738 <TIM_Base_SetConfig+0x134>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d007      	beq.n	8003644 <TIM_Base_SetConfig+0x40>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	4a41      	ldr	r2, [pc, #260]	@ (800373c <TIM_Base_SetConfig+0x138>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d003      	beq.n	8003644 <TIM_Base_SetConfig+0x40>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	4a40      	ldr	r2, [pc, #256]	@ (8003740 <TIM_Base_SetConfig+0x13c>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d108      	bne.n	8003656 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800364a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	68fa      	ldr	r2, [r7, #12]
 8003652:	4313      	orrs	r3, r2
 8003654:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	4a35      	ldr	r2, [pc, #212]	@ (8003730 <TIM_Base_SetConfig+0x12c>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d02b      	beq.n	80036b6 <TIM_Base_SetConfig+0xb2>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003664:	d027      	beq.n	80036b6 <TIM_Base_SetConfig+0xb2>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	4a32      	ldr	r2, [pc, #200]	@ (8003734 <TIM_Base_SetConfig+0x130>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d023      	beq.n	80036b6 <TIM_Base_SetConfig+0xb2>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	4a31      	ldr	r2, [pc, #196]	@ (8003738 <TIM_Base_SetConfig+0x134>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d01f      	beq.n	80036b6 <TIM_Base_SetConfig+0xb2>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	4a30      	ldr	r2, [pc, #192]	@ (800373c <TIM_Base_SetConfig+0x138>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d01b      	beq.n	80036b6 <TIM_Base_SetConfig+0xb2>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	4a2f      	ldr	r2, [pc, #188]	@ (8003740 <TIM_Base_SetConfig+0x13c>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d017      	beq.n	80036b6 <TIM_Base_SetConfig+0xb2>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	4a2e      	ldr	r2, [pc, #184]	@ (8003744 <TIM_Base_SetConfig+0x140>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d013      	beq.n	80036b6 <TIM_Base_SetConfig+0xb2>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	4a2d      	ldr	r2, [pc, #180]	@ (8003748 <TIM_Base_SetConfig+0x144>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d00f      	beq.n	80036b6 <TIM_Base_SetConfig+0xb2>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	4a2c      	ldr	r2, [pc, #176]	@ (800374c <TIM_Base_SetConfig+0x148>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d00b      	beq.n	80036b6 <TIM_Base_SetConfig+0xb2>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	4a2b      	ldr	r2, [pc, #172]	@ (8003750 <TIM_Base_SetConfig+0x14c>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d007      	beq.n	80036b6 <TIM_Base_SetConfig+0xb2>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	4a2a      	ldr	r2, [pc, #168]	@ (8003754 <TIM_Base_SetConfig+0x150>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d003      	beq.n	80036b6 <TIM_Base_SetConfig+0xb2>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	4a29      	ldr	r2, [pc, #164]	@ (8003758 <TIM_Base_SetConfig+0x154>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d108      	bne.n	80036c8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80036bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	68db      	ldr	r3, [r3, #12]
 80036c2:	68fa      	ldr	r2, [r7, #12]
 80036c4:	4313      	orrs	r3, r2
 80036c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	695b      	ldr	r3, [r3, #20]
 80036d2:	4313      	orrs	r3, r2
 80036d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	68fa      	ldr	r2, [r7, #12]
 80036da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	689a      	ldr	r2, [r3, #8]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	4a10      	ldr	r2, [pc, #64]	@ (8003730 <TIM_Base_SetConfig+0x12c>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d003      	beq.n	80036fc <TIM_Base_SetConfig+0xf8>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	4a12      	ldr	r2, [pc, #72]	@ (8003740 <TIM_Base_SetConfig+0x13c>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d103      	bne.n	8003704 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	691a      	ldr	r2, [r3, #16]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2201      	movs	r2, #1
 8003708:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	691b      	ldr	r3, [r3, #16]
 800370e:	f003 0301 	and.w	r3, r3, #1
 8003712:	2b01      	cmp	r3, #1
 8003714:	d105      	bne.n	8003722 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	691b      	ldr	r3, [r3, #16]
 800371a:	f023 0201 	bic.w	r2, r3, #1
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	611a      	str	r2, [r3, #16]
  }
}
 8003722:	bf00      	nop
 8003724:	3714      	adds	r7, #20
 8003726:	46bd      	mov	sp, r7
 8003728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372c:	4770      	bx	lr
 800372e:	bf00      	nop
 8003730:	40010000 	.word	0x40010000
 8003734:	40000400 	.word	0x40000400
 8003738:	40000800 	.word	0x40000800
 800373c:	40000c00 	.word	0x40000c00
 8003740:	40010400 	.word	0x40010400
 8003744:	40014000 	.word	0x40014000
 8003748:	40014400 	.word	0x40014400
 800374c:	40014800 	.word	0x40014800
 8003750:	40001800 	.word	0x40001800
 8003754:	40001c00 	.word	0x40001c00
 8003758:	40002000 	.word	0x40002000

0800375c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800375c:	b480      	push	{r7}
 800375e:	b083      	sub	sp, #12
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003764:	bf00      	nop
 8003766:	370c      	adds	r7, #12
 8003768:	46bd      	mov	sp, r7
 800376a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376e:	4770      	bx	lr

08003770 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003770:	b480      	push	{r7}
 8003772:	b083      	sub	sp, #12
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003778:	bf00      	nop
 800377a:	370c      	adds	r7, #12
 800377c:	46bd      	mov	sp, r7
 800377e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003782:	4770      	bx	lr

08003784 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003784:	b084      	sub	sp, #16
 8003786:	b580      	push	{r7, lr}
 8003788:	b084      	sub	sp, #16
 800378a:	af00      	add	r7, sp, #0
 800378c:	6078      	str	r0, [r7, #4]
 800378e:	f107 001c 	add.w	r0, r7, #28
 8003792:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003796:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800379a:	2b01      	cmp	r3, #1
 800379c:	d123      	bne.n	80037e6 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037a2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	68db      	ldr	r3, [r3, #12]
 80037ae:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80037b2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80037b6:	687a      	ldr	r2, [r7, #4]
 80037b8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	68db      	ldr	r3, [r3, #12]
 80037be:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80037c6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80037ca:	2b01      	cmp	r3, #1
 80037cc:	d105      	bne.n	80037da <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	68db      	ldr	r3, [r3, #12]
 80037d2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f001 fae8 	bl	8004db0 <USB_CoreReset>
 80037e0:	4603      	mov	r3, r0
 80037e2:	73fb      	strb	r3, [r7, #15]
 80037e4:	e01b      	b.n	800381e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	68db      	ldr	r3, [r3, #12]
 80037ea:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f001 fadc 	bl	8004db0 <USB_CoreReset>
 80037f8:	4603      	mov	r3, r0
 80037fa:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80037fc:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003800:	2b00      	cmp	r3, #0
 8003802:	d106      	bne.n	8003812 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003808:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	639a      	str	r2, [r3, #56]	@ 0x38
 8003810:	e005      	b.n	800381e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003816:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800381e:	7fbb      	ldrb	r3, [r7, #30]
 8003820:	2b01      	cmp	r3, #1
 8003822:	d10b      	bne.n	800383c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	f043 0206 	orr.w	r2, r3, #6
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	f043 0220 	orr.w	r2, r3, #32
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800383c:	7bfb      	ldrb	r3, [r7, #15]
}
 800383e:	4618      	mov	r0, r3
 8003840:	3710      	adds	r7, #16
 8003842:	46bd      	mov	sp, r7
 8003844:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003848:	b004      	add	sp, #16
 800384a:	4770      	bx	lr

0800384c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800384c:	b480      	push	{r7}
 800384e:	b087      	sub	sp, #28
 8003850:	af00      	add	r7, sp, #0
 8003852:	60f8      	str	r0, [r7, #12]
 8003854:	60b9      	str	r1, [r7, #8]
 8003856:	4613      	mov	r3, r2
 8003858:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800385a:	79fb      	ldrb	r3, [r7, #7]
 800385c:	2b02      	cmp	r3, #2
 800385e:	d165      	bne.n	800392c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	4a41      	ldr	r2, [pc, #260]	@ (8003968 <USB_SetTurnaroundTime+0x11c>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d906      	bls.n	8003876 <USB_SetTurnaroundTime+0x2a>
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	4a40      	ldr	r2, [pc, #256]	@ (800396c <USB_SetTurnaroundTime+0x120>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d202      	bcs.n	8003876 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003870:	230f      	movs	r3, #15
 8003872:	617b      	str	r3, [r7, #20]
 8003874:	e062      	b.n	800393c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	4a3c      	ldr	r2, [pc, #240]	@ (800396c <USB_SetTurnaroundTime+0x120>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d306      	bcc.n	800388c <USB_SetTurnaroundTime+0x40>
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	4a3b      	ldr	r2, [pc, #236]	@ (8003970 <USB_SetTurnaroundTime+0x124>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d202      	bcs.n	800388c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003886:	230e      	movs	r3, #14
 8003888:	617b      	str	r3, [r7, #20]
 800388a:	e057      	b.n	800393c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	4a38      	ldr	r2, [pc, #224]	@ (8003970 <USB_SetTurnaroundTime+0x124>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d306      	bcc.n	80038a2 <USB_SetTurnaroundTime+0x56>
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	4a37      	ldr	r2, [pc, #220]	@ (8003974 <USB_SetTurnaroundTime+0x128>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d202      	bcs.n	80038a2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800389c:	230d      	movs	r3, #13
 800389e:	617b      	str	r3, [r7, #20]
 80038a0:	e04c      	b.n	800393c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	4a33      	ldr	r2, [pc, #204]	@ (8003974 <USB_SetTurnaroundTime+0x128>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d306      	bcc.n	80038b8 <USB_SetTurnaroundTime+0x6c>
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	4a32      	ldr	r2, [pc, #200]	@ (8003978 <USB_SetTurnaroundTime+0x12c>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d802      	bhi.n	80038b8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80038b2:	230c      	movs	r3, #12
 80038b4:	617b      	str	r3, [r7, #20]
 80038b6:	e041      	b.n	800393c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	4a2f      	ldr	r2, [pc, #188]	@ (8003978 <USB_SetTurnaroundTime+0x12c>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d906      	bls.n	80038ce <USB_SetTurnaroundTime+0x82>
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	4a2e      	ldr	r2, [pc, #184]	@ (800397c <USB_SetTurnaroundTime+0x130>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d802      	bhi.n	80038ce <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80038c8:	230b      	movs	r3, #11
 80038ca:	617b      	str	r3, [r7, #20]
 80038cc:	e036      	b.n	800393c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	4a2a      	ldr	r2, [pc, #168]	@ (800397c <USB_SetTurnaroundTime+0x130>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d906      	bls.n	80038e4 <USB_SetTurnaroundTime+0x98>
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	4a29      	ldr	r2, [pc, #164]	@ (8003980 <USB_SetTurnaroundTime+0x134>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d802      	bhi.n	80038e4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80038de:	230a      	movs	r3, #10
 80038e0:	617b      	str	r3, [r7, #20]
 80038e2:	e02b      	b.n	800393c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	4a26      	ldr	r2, [pc, #152]	@ (8003980 <USB_SetTurnaroundTime+0x134>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d906      	bls.n	80038fa <USB_SetTurnaroundTime+0xae>
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	4a25      	ldr	r2, [pc, #148]	@ (8003984 <USB_SetTurnaroundTime+0x138>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d202      	bcs.n	80038fa <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80038f4:	2309      	movs	r3, #9
 80038f6:	617b      	str	r3, [r7, #20]
 80038f8:	e020      	b.n	800393c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	4a21      	ldr	r2, [pc, #132]	@ (8003984 <USB_SetTurnaroundTime+0x138>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d306      	bcc.n	8003910 <USB_SetTurnaroundTime+0xc4>
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	4a20      	ldr	r2, [pc, #128]	@ (8003988 <USB_SetTurnaroundTime+0x13c>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d802      	bhi.n	8003910 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800390a:	2308      	movs	r3, #8
 800390c:	617b      	str	r3, [r7, #20]
 800390e:	e015      	b.n	800393c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	4a1d      	ldr	r2, [pc, #116]	@ (8003988 <USB_SetTurnaroundTime+0x13c>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d906      	bls.n	8003926 <USB_SetTurnaroundTime+0xda>
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	4a1c      	ldr	r2, [pc, #112]	@ (800398c <USB_SetTurnaroundTime+0x140>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d202      	bcs.n	8003926 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003920:	2307      	movs	r3, #7
 8003922:	617b      	str	r3, [r7, #20]
 8003924:	e00a      	b.n	800393c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003926:	2306      	movs	r3, #6
 8003928:	617b      	str	r3, [r7, #20]
 800392a:	e007      	b.n	800393c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800392c:	79fb      	ldrb	r3, [r7, #7]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d102      	bne.n	8003938 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003932:	2309      	movs	r3, #9
 8003934:	617b      	str	r3, [r7, #20]
 8003936:	e001      	b.n	800393c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003938:	2309      	movs	r3, #9
 800393a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	68db      	ldr	r3, [r3, #12]
 8003940:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	68da      	ldr	r2, [r3, #12]
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	029b      	lsls	r3, r3, #10
 8003950:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8003954:	431a      	orrs	r2, r3
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800395a:	2300      	movs	r3, #0
}
 800395c:	4618      	mov	r0, r3
 800395e:	371c      	adds	r7, #28
 8003960:	46bd      	mov	sp, r7
 8003962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003966:	4770      	bx	lr
 8003968:	00d8acbf 	.word	0x00d8acbf
 800396c:	00e4e1c0 	.word	0x00e4e1c0
 8003970:	00f42400 	.word	0x00f42400
 8003974:	01067380 	.word	0x01067380
 8003978:	011a499f 	.word	0x011a499f
 800397c:	01312cff 	.word	0x01312cff
 8003980:	014ca43f 	.word	0x014ca43f
 8003984:	016e3600 	.word	0x016e3600
 8003988:	01a6ab1f 	.word	0x01a6ab1f
 800398c:	01e84800 	.word	0x01e84800

08003990 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003990:	b480      	push	{r7}
 8003992:	b083      	sub	sp, #12
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	689b      	ldr	r3, [r3, #8]
 800399c:	f043 0201 	orr.w	r2, r3, #1
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80039a4:	2300      	movs	r3, #0
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	370c      	adds	r7, #12
 80039aa:	46bd      	mov	sp, r7
 80039ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b0:	4770      	bx	lr

080039b2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80039b2:	b480      	push	{r7}
 80039b4:	b083      	sub	sp, #12
 80039b6:	af00      	add	r7, sp, #0
 80039b8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	f023 0201 	bic.w	r2, r3, #1
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80039c6:	2300      	movs	r3, #0
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	370c      	adds	r7, #12
 80039cc:	46bd      	mov	sp, r7
 80039ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d2:	4770      	bx	lr

080039d4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b084      	sub	sp, #16
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
 80039dc:	460b      	mov	r3, r1
 80039de:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80039e0:	2300      	movs	r3, #0
 80039e2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	68db      	ldr	r3, [r3, #12]
 80039e8:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80039f0:	78fb      	ldrb	r3, [r7, #3]
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	d115      	bne.n	8003a22 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	68db      	ldr	r3, [r3, #12]
 80039fa:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003a02:	200a      	movs	r0, #10
 8003a04:	f7fd fa28 	bl	8000e58 <HAL_Delay>
      ms += 10U;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	330a      	adds	r3, #10
 8003a0c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	f001 f93f 	bl	8004c92 <USB_GetMode>
 8003a14:	4603      	mov	r3, r0
 8003a16:	2b01      	cmp	r3, #1
 8003a18:	d01e      	beq.n	8003a58 <USB_SetCurrentMode+0x84>
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2bc7      	cmp	r3, #199	@ 0xc7
 8003a1e:	d9f0      	bls.n	8003a02 <USB_SetCurrentMode+0x2e>
 8003a20:	e01a      	b.n	8003a58 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003a22:	78fb      	ldrb	r3, [r7, #3]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d115      	bne.n	8003a54 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	68db      	ldr	r3, [r3, #12]
 8003a2c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003a34:	200a      	movs	r0, #10
 8003a36:	f7fd fa0f 	bl	8000e58 <HAL_Delay>
      ms += 10U;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	330a      	adds	r3, #10
 8003a3e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003a40:	6878      	ldr	r0, [r7, #4]
 8003a42:	f001 f926 	bl	8004c92 <USB_GetMode>
 8003a46:	4603      	mov	r3, r0
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d005      	beq.n	8003a58 <USB_SetCurrentMode+0x84>
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2bc7      	cmp	r3, #199	@ 0xc7
 8003a50:	d9f0      	bls.n	8003a34 <USB_SetCurrentMode+0x60>
 8003a52:	e001      	b.n	8003a58 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	e005      	b.n	8003a64 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	2bc8      	cmp	r3, #200	@ 0xc8
 8003a5c:	d101      	bne.n	8003a62 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e000      	b.n	8003a64 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003a62:	2300      	movs	r3, #0
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	3710      	adds	r7, #16
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bd80      	pop	{r7, pc}

08003a6c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003a6c:	b084      	sub	sp, #16
 8003a6e:	b580      	push	{r7, lr}
 8003a70:	b086      	sub	sp, #24
 8003a72:	af00      	add	r7, sp, #0
 8003a74:	6078      	str	r0, [r7, #4]
 8003a76:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8003a7a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003a86:	2300      	movs	r3, #0
 8003a88:	613b      	str	r3, [r7, #16]
 8003a8a:	e009      	b.n	8003aa0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003a8c:	687a      	ldr	r2, [r7, #4]
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	3340      	adds	r3, #64	@ 0x40
 8003a92:	009b      	lsls	r3, r3, #2
 8003a94:	4413      	add	r3, r2
 8003a96:	2200      	movs	r2, #0
 8003a98:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	3301      	adds	r3, #1
 8003a9e:	613b      	str	r3, [r7, #16]
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	2b0e      	cmp	r3, #14
 8003aa4:	d9f2      	bls.n	8003a8c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003aa6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d11c      	bne.n	8003ae8 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	68fa      	ldr	r2, [r7, #12]
 8003ab8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003abc:	f043 0302 	orr.w	r3, r3, #2
 8003ac0:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ac6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ad2:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ade:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	639a      	str	r2, [r3, #56]	@ 0x38
 8003ae6:	e00b      	b.n	8003b00 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003aec:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003af8:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8003b06:	461a      	mov	r2, r3
 8003b08:	2300      	movs	r3, #0
 8003b0a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003b0c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8003b10:	2b01      	cmp	r3, #1
 8003b12:	d10d      	bne.n	8003b30 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003b14:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d104      	bne.n	8003b26 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003b1c:	2100      	movs	r1, #0
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	f000 f968 	bl	8003df4 <USB_SetDevSpeed>
 8003b24:	e008      	b.n	8003b38 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003b26:	2101      	movs	r1, #1
 8003b28:	6878      	ldr	r0, [r7, #4]
 8003b2a:	f000 f963 	bl	8003df4 <USB_SetDevSpeed>
 8003b2e:	e003      	b.n	8003b38 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003b30:	2103      	movs	r1, #3
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	f000 f95e 	bl	8003df4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003b38:	2110      	movs	r1, #16
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	f000 f8fa 	bl	8003d34 <USB_FlushTxFifo>
 8003b40:	4603      	mov	r3, r0
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d001      	beq.n	8003b4a <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003b4a:	6878      	ldr	r0, [r7, #4]
 8003b4c:	f000 f924 	bl	8003d98 <USB_FlushRxFifo>
 8003b50:	4603      	mov	r3, r0
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d001      	beq.n	8003b5a <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b60:	461a      	mov	r2, r3
 8003b62:	2300      	movs	r3, #0
 8003b64:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b6c:	461a      	mov	r2, r3
 8003b6e:	2300      	movs	r3, #0
 8003b70:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b78:	461a      	mov	r2, r3
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003b7e:	2300      	movs	r3, #0
 8003b80:	613b      	str	r3, [r7, #16]
 8003b82:	e043      	b.n	8003c0c <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	015a      	lsls	r2, r3, #5
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	4413      	add	r3, r2
 8003b8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003b96:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003b9a:	d118      	bne.n	8003bce <USB_DevInit+0x162>
    {
      if (i == 0U)
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d10a      	bne.n	8003bb8 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	015a      	lsls	r2, r3, #5
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	4413      	add	r3, r2
 8003baa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003bae:	461a      	mov	r2, r3
 8003bb0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003bb4:	6013      	str	r3, [r2, #0]
 8003bb6:	e013      	b.n	8003be0 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	015a      	lsls	r2, r3, #5
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	4413      	add	r3, r2
 8003bc0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003bc4:	461a      	mov	r2, r3
 8003bc6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003bca:	6013      	str	r3, [r2, #0]
 8003bcc:	e008      	b.n	8003be0 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	015a      	lsls	r2, r3, #5
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	4413      	add	r3, r2
 8003bd6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003bda:	461a      	mov	r2, r3
 8003bdc:	2300      	movs	r3, #0
 8003bde:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	015a      	lsls	r2, r3, #5
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	4413      	add	r3, r2
 8003be8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003bec:	461a      	mov	r2, r3
 8003bee:	2300      	movs	r3, #0
 8003bf0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	015a      	lsls	r2, r3, #5
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	4413      	add	r3, r2
 8003bfa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003bfe:	461a      	mov	r2, r3
 8003c00:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003c04:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	3301      	adds	r3, #1
 8003c0a:	613b      	str	r3, [r7, #16]
 8003c0c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003c10:	461a      	mov	r2, r3
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d3b5      	bcc.n	8003b84 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003c18:	2300      	movs	r3, #0
 8003c1a:	613b      	str	r3, [r7, #16]
 8003c1c:	e043      	b.n	8003ca6 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	015a      	lsls	r2, r3, #5
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	4413      	add	r3, r2
 8003c26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003c30:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003c34:	d118      	bne.n	8003c68 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d10a      	bne.n	8003c52 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	015a      	lsls	r2, r3, #5
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	4413      	add	r3, r2
 8003c44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c48:	461a      	mov	r2, r3
 8003c4a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003c4e:	6013      	str	r3, [r2, #0]
 8003c50:	e013      	b.n	8003c7a <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	015a      	lsls	r2, r3, #5
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	4413      	add	r3, r2
 8003c5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c5e:	461a      	mov	r2, r3
 8003c60:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003c64:	6013      	str	r3, [r2, #0]
 8003c66:	e008      	b.n	8003c7a <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	015a      	lsls	r2, r3, #5
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	4413      	add	r3, r2
 8003c70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c74:	461a      	mov	r2, r3
 8003c76:	2300      	movs	r3, #0
 8003c78:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	015a      	lsls	r2, r3, #5
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	4413      	add	r3, r2
 8003c82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c86:	461a      	mov	r2, r3
 8003c88:	2300      	movs	r3, #0
 8003c8a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	015a      	lsls	r2, r3, #5
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	4413      	add	r3, r2
 8003c94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c98:	461a      	mov	r2, r3
 8003c9a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003c9e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003ca0:	693b      	ldr	r3, [r7, #16]
 8003ca2:	3301      	adds	r3, #1
 8003ca4:	613b      	str	r3, [r7, #16]
 8003ca6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003caa:	461a      	mov	r2, r3
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d3b5      	bcc.n	8003c1e <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003cb8:	691b      	ldr	r3, [r3, #16]
 8003cba:	68fa      	ldr	r2, [r7, #12]
 8003cbc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003cc0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003cc4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8003cd2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003cd4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d105      	bne.n	8003ce8 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	699b      	ldr	r3, [r3, #24]
 8003ce0:	f043 0210 	orr.w	r2, r3, #16
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	699a      	ldr	r2, [r3, #24]
 8003cec:	4b10      	ldr	r3, [pc, #64]	@ (8003d30 <USB_DevInit+0x2c4>)
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	687a      	ldr	r2, [r7, #4]
 8003cf2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003cf4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d005      	beq.n	8003d08 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	699b      	ldr	r3, [r3, #24]
 8003d00:	f043 0208 	orr.w	r2, r3, #8
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003d08:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	d107      	bne.n	8003d20 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	699b      	ldr	r3, [r3, #24]
 8003d14:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003d18:	f043 0304 	orr.w	r3, r3, #4
 8003d1c:	687a      	ldr	r2, [r7, #4]
 8003d1e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003d20:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	3718      	adds	r7, #24
 8003d26:	46bd      	mov	sp, r7
 8003d28:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003d2c:	b004      	add	sp, #16
 8003d2e:	4770      	bx	lr
 8003d30:	803c3800 	.word	0x803c3800

08003d34 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b085      	sub	sp, #20
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
 8003d3c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	3301      	adds	r3, #1
 8003d46:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003d4e:	d901      	bls.n	8003d54 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003d50:	2303      	movs	r3, #3
 8003d52:	e01b      	b.n	8003d8c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	691b      	ldr	r3, [r3, #16]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	daf2      	bge.n	8003d42 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	019b      	lsls	r3, r3, #6
 8003d64:	f043 0220 	orr.w	r2, r3, #32
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	3301      	adds	r3, #1
 8003d70:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003d78:	d901      	bls.n	8003d7e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003d7a:	2303      	movs	r3, #3
 8003d7c:	e006      	b.n	8003d8c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	691b      	ldr	r3, [r3, #16]
 8003d82:	f003 0320 	and.w	r3, r3, #32
 8003d86:	2b20      	cmp	r3, #32
 8003d88:	d0f0      	beq.n	8003d6c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003d8a:	2300      	movs	r3, #0
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	3714      	adds	r7, #20
 8003d90:	46bd      	mov	sp, r7
 8003d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d96:	4770      	bx	lr

08003d98 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b085      	sub	sp, #20
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003da0:	2300      	movs	r3, #0
 8003da2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	3301      	adds	r3, #1
 8003da8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003db0:	d901      	bls.n	8003db6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003db2:	2303      	movs	r3, #3
 8003db4:	e018      	b.n	8003de8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	691b      	ldr	r3, [r3, #16]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	daf2      	bge.n	8003da4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2210      	movs	r2, #16
 8003dc6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	3301      	adds	r3, #1
 8003dcc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003dd4:	d901      	bls.n	8003dda <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003dd6:	2303      	movs	r3, #3
 8003dd8:	e006      	b.n	8003de8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	691b      	ldr	r3, [r3, #16]
 8003dde:	f003 0310 	and.w	r3, r3, #16
 8003de2:	2b10      	cmp	r3, #16
 8003de4:	d0f0      	beq.n	8003dc8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003de6:	2300      	movs	r3, #0
}
 8003de8:	4618      	mov	r0, r3
 8003dea:	3714      	adds	r7, #20
 8003dec:	46bd      	mov	sp, r7
 8003dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df2:	4770      	bx	lr

08003df4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b085      	sub	sp, #20
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
 8003dfc:	460b      	mov	r3, r1
 8003dfe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e0a:	681a      	ldr	r2, [r3, #0]
 8003e0c:	78fb      	ldrb	r3, [r7, #3]
 8003e0e:	68f9      	ldr	r1, [r7, #12]
 8003e10:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003e14:	4313      	orrs	r3, r2
 8003e16:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003e18:	2300      	movs	r3, #0
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3714      	adds	r7, #20
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e24:	4770      	bx	lr

08003e26 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8003e26:	b480      	push	{r7}
 8003e28:	b087      	sub	sp, #28
 8003e2a:	af00      	add	r7, sp, #0
 8003e2c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	f003 0306 	and.w	r3, r3, #6
 8003e3e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d102      	bne.n	8003e4c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003e46:	2300      	movs	r3, #0
 8003e48:	75fb      	strb	r3, [r7, #23]
 8003e4a:	e00a      	b.n	8003e62 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	2b02      	cmp	r3, #2
 8003e50:	d002      	beq.n	8003e58 <USB_GetDevSpeed+0x32>
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2b06      	cmp	r3, #6
 8003e56:	d102      	bne.n	8003e5e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003e58:	2302      	movs	r3, #2
 8003e5a:	75fb      	strb	r3, [r7, #23]
 8003e5c:	e001      	b.n	8003e62 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003e5e:	230f      	movs	r3, #15
 8003e60:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003e62:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e64:	4618      	mov	r0, r3
 8003e66:	371c      	adds	r7, #28
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6e:	4770      	bx	lr

08003e70 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b085      	sub	sp, #20
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
 8003e78:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	781b      	ldrb	r3, [r3, #0]
 8003e82:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	785b      	ldrb	r3, [r3, #1]
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	d13a      	bne.n	8003f02 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e92:	69da      	ldr	r2, [r3, #28]
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	781b      	ldrb	r3, [r3, #0]
 8003e98:	f003 030f 	and.w	r3, r3, #15
 8003e9c:	2101      	movs	r1, #1
 8003e9e:	fa01 f303 	lsl.w	r3, r1, r3
 8003ea2:	b29b      	uxth	r3, r3
 8003ea4:	68f9      	ldr	r1, [r7, #12]
 8003ea6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	015a      	lsls	r2, r3, #5
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	4413      	add	r3, r2
 8003eb6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d155      	bne.n	8003f70 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	015a      	lsls	r2, r3, #5
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	4413      	add	r3, r2
 8003ecc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	791b      	ldrb	r3, [r3, #4]
 8003ede:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003ee0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	059b      	lsls	r3, r3, #22
 8003ee6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	68ba      	ldr	r2, [r7, #8]
 8003eec:	0151      	lsls	r1, r2, #5
 8003eee:	68fa      	ldr	r2, [r7, #12]
 8003ef0:	440a      	add	r2, r1
 8003ef2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003ef6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003efa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003efe:	6013      	str	r3, [r2, #0]
 8003f00:	e036      	b.n	8003f70 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f08:	69da      	ldr	r2, [r3, #28]
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	781b      	ldrb	r3, [r3, #0]
 8003f0e:	f003 030f 	and.w	r3, r3, #15
 8003f12:	2101      	movs	r1, #1
 8003f14:	fa01 f303 	lsl.w	r3, r1, r3
 8003f18:	041b      	lsls	r3, r3, #16
 8003f1a:	68f9      	ldr	r1, [r7, #12]
 8003f1c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003f20:	4313      	orrs	r3, r2
 8003f22:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	015a      	lsls	r2, r3, #5
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	4413      	add	r3, r2
 8003f2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d11a      	bne.n	8003f70 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	015a      	lsls	r2, r3, #5
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	4413      	add	r3, r2
 8003f42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f46:	681a      	ldr	r2, [r3, #0]
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	689b      	ldr	r3, [r3, #8]
 8003f4c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	791b      	ldrb	r3, [r3, #4]
 8003f54:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003f56:	430b      	orrs	r3, r1
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	68ba      	ldr	r2, [r7, #8]
 8003f5c:	0151      	lsls	r1, r2, #5
 8003f5e:	68fa      	ldr	r2, [r7, #12]
 8003f60:	440a      	add	r2, r1
 8003f62:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003f66:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f6a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003f6e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003f70:	2300      	movs	r3, #0
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	3714      	adds	r7, #20
 8003f76:	46bd      	mov	sp, r7
 8003f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7c:	4770      	bx	lr
	...

08003f80 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b085      	sub	sp, #20
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
 8003f88:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	781b      	ldrb	r3, [r3, #0]
 8003f92:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	785b      	ldrb	r3, [r3, #1]
 8003f98:	2b01      	cmp	r3, #1
 8003f9a:	d161      	bne.n	8004060 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	015a      	lsls	r2, r3, #5
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	4413      	add	r3, r2
 8003fa4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003fae:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003fb2:	d11f      	bne.n	8003ff4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	015a      	lsls	r2, r3, #5
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	4413      	add	r3, r2
 8003fbc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	68ba      	ldr	r2, [r7, #8]
 8003fc4:	0151      	lsls	r1, r2, #5
 8003fc6:	68fa      	ldr	r2, [r7, #12]
 8003fc8:	440a      	add	r2, r1
 8003fca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003fce:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003fd2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	015a      	lsls	r2, r3, #5
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	4413      	add	r3, r2
 8003fdc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	68ba      	ldr	r2, [r7, #8]
 8003fe4:	0151      	lsls	r1, r2, #5
 8003fe6:	68fa      	ldr	r2, [r7, #12]
 8003fe8:	440a      	add	r2, r1
 8003fea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003fee:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003ff2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ffa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	781b      	ldrb	r3, [r3, #0]
 8004000:	f003 030f 	and.w	r3, r3, #15
 8004004:	2101      	movs	r1, #1
 8004006:	fa01 f303 	lsl.w	r3, r1, r3
 800400a:	b29b      	uxth	r3, r3
 800400c:	43db      	mvns	r3, r3
 800400e:	68f9      	ldr	r1, [r7, #12]
 8004010:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004014:	4013      	ands	r3, r2
 8004016:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800401e:	69da      	ldr	r2, [r3, #28]
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	781b      	ldrb	r3, [r3, #0]
 8004024:	f003 030f 	and.w	r3, r3, #15
 8004028:	2101      	movs	r1, #1
 800402a:	fa01 f303 	lsl.w	r3, r1, r3
 800402e:	b29b      	uxth	r3, r3
 8004030:	43db      	mvns	r3, r3
 8004032:	68f9      	ldr	r1, [r7, #12]
 8004034:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004038:	4013      	ands	r3, r2
 800403a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	015a      	lsls	r2, r3, #5
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	4413      	add	r3, r2
 8004044:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	0159      	lsls	r1, r3, #5
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	440b      	add	r3, r1
 8004052:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004056:	4619      	mov	r1, r3
 8004058:	4b35      	ldr	r3, [pc, #212]	@ (8004130 <USB_DeactivateEndpoint+0x1b0>)
 800405a:	4013      	ands	r3, r2
 800405c:	600b      	str	r3, [r1, #0]
 800405e:	e060      	b.n	8004122 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	015a      	lsls	r2, r3, #5
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	4413      	add	r3, r2
 8004068:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004072:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004076:	d11f      	bne.n	80040b8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	015a      	lsls	r2, r3, #5
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	4413      	add	r3, r2
 8004080:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	68ba      	ldr	r2, [r7, #8]
 8004088:	0151      	lsls	r1, r2, #5
 800408a:	68fa      	ldr	r2, [r7, #12]
 800408c:	440a      	add	r2, r1
 800408e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004092:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004096:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	015a      	lsls	r2, r3, #5
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	4413      	add	r3, r2
 80040a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	68ba      	ldr	r2, [r7, #8]
 80040a8:	0151      	lsls	r1, r2, #5
 80040aa:	68fa      	ldr	r2, [r7, #12]
 80040ac:	440a      	add	r2, r1
 80040ae:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80040b2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80040b6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80040be:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	781b      	ldrb	r3, [r3, #0]
 80040c4:	f003 030f 	and.w	r3, r3, #15
 80040c8:	2101      	movs	r1, #1
 80040ca:	fa01 f303 	lsl.w	r3, r1, r3
 80040ce:	041b      	lsls	r3, r3, #16
 80040d0:	43db      	mvns	r3, r3
 80040d2:	68f9      	ldr	r1, [r7, #12]
 80040d4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80040d8:	4013      	ands	r3, r2
 80040da:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80040e2:	69da      	ldr	r2, [r3, #28]
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	781b      	ldrb	r3, [r3, #0]
 80040e8:	f003 030f 	and.w	r3, r3, #15
 80040ec:	2101      	movs	r1, #1
 80040ee:	fa01 f303 	lsl.w	r3, r1, r3
 80040f2:	041b      	lsls	r3, r3, #16
 80040f4:	43db      	mvns	r3, r3
 80040f6:	68f9      	ldr	r1, [r7, #12]
 80040f8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80040fc:	4013      	ands	r3, r2
 80040fe:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	015a      	lsls	r2, r3, #5
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	4413      	add	r3, r2
 8004108:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800410c:	681a      	ldr	r2, [r3, #0]
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	0159      	lsls	r1, r3, #5
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	440b      	add	r3, r1
 8004116:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800411a:	4619      	mov	r1, r3
 800411c:	4b05      	ldr	r3, [pc, #20]	@ (8004134 <USB_DeactivateEndpoint+0x1b4>)
 800411e:	4013      	ands	r3, r2
 8004120:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004122:	2300      	movs	r3, #0
}
 8004124:	4618      	mov	r0, r3
 8004126:	3714      	adds	r7, #20
 8004128:	46bd      	mov	sp, r7
 800412a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412e:	4770      	bx	lr
 8004130:	ec337800 	.word	0xec337800
 8004134:	eff37800 	.word	0xeff37800

08004138 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b08a      	sub	sp, #40	@ 0x28
 800413c:	af02      	add	r7, sp, #8
 800413e:	60f8      	str	r0, [r7, #12]
 8004140:	60b9      	str	r1, [r7, #8]
 8004142:	4613      	mov	r3, r2
 8004144:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	781b      	ldrb	r3, [r3, #0]
 800414e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	785b      	ldrb	r3, [r3, #1]
 8004154:	2b01      	cmp	r3, #1
 8004156:	f040 817f 	bne.w	8004458 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	691b      	ldr	r3, [r3, #16]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d132      	bne.n	80041c8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004162:	69bb      	ldr	r3, [r7, #24]
 8004164:	015a      	lsls	r2, r3, #5
 8004166:	69fb      	ldr	r3, [r7, #28]
 8004168:	4413      	add	r3, r2
 800416a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800416e:	691b      	ldr	r3, [r3, #16]
 8004170:	69ba      	ldr	r2, [r7, #24]
 8004172:	0151      	lsls	r1, r2, #5
 8004174:	69fa      	ldr	r2, [r7, #28]
 8004176:	440a      	add	r2, r1
 8004178:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800417c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004180:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004184:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004186:	69bb      	ldr	r3, [r7, #24]
 8004188:	015a      	lsls	r2, r3, #5
 800418a:	69fb      	ldr	r3, [r7, #28]
 800418c:	4413      	add	r3, r2
 800418e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004192:	691b      	ldr	r3, [r3, #16]
 8004194:	69ba      	ldr	r2, [r7, #24]
 8004196:	0151      	lsls	r1, r2, #5
 8004198:	69fa      	ldr	r2, [r7, #28]
 800419a:	440a      	add	r2, r1
 800419c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80041a0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80041a4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80041a6:	69bb      	ldr	r3, [r7, #24]
 80041a8:	015a      	lsls	r2, r3, #5
 80041aa:	69fb      	ldr	r3, [r7, #28]
 80041ac:	4413      	add	r3, r2
 80041ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80041b2:	691b      	ldr	r3, [r3, #16]
 80041b4:	69ba      	ldr	r2, [r7, #24]
 80041b6:	0151      	lsls	r1, r2, #5
 80041b8:	69fa      	ldr	r2, [r7, #28]
 80041ba:	440a      	add	r2, r1
 80041bc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80041c0:	0cdb      	lsrs	r3, r3, #19
 80041c2:	04db      	lsls	r3, r3, #19
 80041c4:	6113      	str	r3, [r2, #16]
 80041c6:	e097      	b.n	80042f8 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80041c8:	69bb      	ldr	r3, [r7, #24]
 80041ca:	015a      	lsls	r2, r3, #5
 80041cc:	69fb      	ldr	r3, [r7, #28]
 80041ce:	4413      	add	r3, r2
 80041d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80041d4:	691b      	ldr	r3, [r3, #16]
 80041d6:	69ba      	ldr	r2, [r7, #24]
 80041d8:	0151      	lsls	r1, r2, #5
 80041da:	69fa      	ldr	r2, [r7, #28]
 80041dc:	440a      	add	r2, r1
 80041de:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80041e2:	0cdb      	lsrs	r3, r3, #19
 80041e4:	04db      	lsls	r3, r3, #19
 80041e6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80041e8:	69bb      	ldr	r3, [r7, #24]
 80041ea:	015a      	lsls	r2, r3, #5
 80041ec:	69fb      	ldr	r3, [r7, #28]
 80041ee:	4413      	add	r3, r2
 80041f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80041f4:	691b      	ldr	r3, [r3, #16]
 80041f6:	69ba      	ldr	r2, [r7, #24]
 80041f8:	0151      	lsls	r1, r2, #5
 80041fa:	69fa      	ldr	r2, [r7, #28]
 80041fc:	440a      	add	r2, r1
 80041fe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004202:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004206:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800420a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800420c:	69bb      	ldr	r3, [r7, #24]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d11a      	bne.n	8004248 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	691a      	ldr	r2, [r3, #16]
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	429a      	cmp	r2, r3
 800421c:	d903      	bls.n	8004226 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	689a      	ldr	r2, [r3, #8]
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004226:	69bb      	ldr	r3, [r7, #24]
 8004228:	015a      	lsls	r2, r3, #5
 800422a:	69fb      	ldr	r3, [r7, #28]
 800422c:	4413      	add	r3, r2
 800422e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004232:	691b      	ldr	r3, [r3, #16]
 8004234:	69ba      	ldr	r2, [r7, #24]
 8004236:	0151      	lsls	r1, r2, #5
 8004238:	69fa      	ldr	r2, [r7, #28]
 800423a:	440a      	add	r2, r1
 800423c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004240:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004244:	6113      	str	r3, [r2, #16]
 8004246:	e044      	b.n	80042d2 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	691a      	ldr	r2, [r3, #16]
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	4413      	add	r3, r2
 8004252:	1e5a      	subs	r2, r3, #1
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	fbb2 f3f3 	udiv	r3, r2, r3
 800425c:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 800425e:	69bb      	ldr	r3, [r7, #24]
 8004260:	015a      	lsls	r2, r3, #5
 8004262:	69fb      	ldr	r3, [r7, #28]
 8004264:	4413      	add	r3, r2
 8004266:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800426a:	691a      	ldr	r2, [r3, #16]
 800426c:	8afb      	ldrh	r3, [r7, #22]
 800426e:	04d9      	lsls	r1, r3, #19
 8004270:	4ba4      	ldr	r3, [pc, #656]	@ (8004504 <USB_EPStartXfer+0x3cc>)
 8004272:	400b      	ands	r3, r1
 8004274:	69b9      	ldr	r1, [r7, #24]
 8004276:	0148      	lsls	r0, r1, #5
 8004278:	69f9      	ldr	r1, [r7, #28]
 800427a:	4401      	add	r1, r0
 800427c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004280:	4313      	orrs	r3, r2
 8004282:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	791b      	ldrb	r3, [r3, #4]
 8004288:	2b01      	cmp	r3, #1
 800428a:	d122      	bne.n	80042d2 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800428c:	69bb      	ldr	r3, [r7, #24]
 800428e:	015a      	lsls	r2, r3, #5
 8004290:	69fb      	ldr	r3, [r7, #28]
 8004292:	4413      	add	r3, r2
 8004294:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004298:	691b      	ldr	r3, [r3, #16]
 800429a:	69ba      	ldr	r2, [r7, #24]
 800429c:	0151      	lsls	r1, r2, #5
 800429e:	69fa      	ldr	r2, [r7, #28]
 80042a0:	440a      	add	r2, r1
 80042a2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80042a6:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80042aa:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 80042ac:	69bb      	ldr	r3, [r7, #24]
 80042ae:	015a      	lsls	r2, r3, #5
 80042b0:	69fb      	ldr	r3, [r7, #28]
 80042b2:	4413      	add	r3, r2
 80042b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80042b8:	691a      	ldr	r2, [r3, #16]
 80042ba:	8afb      	ldrh	r3, [r7, #22]
 80042bc:	075b      	lsls	r3, r3, #29
 80042be:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 80042c2:	69b9      	ldr	r1, [r7, #24]
 80042c4:	0148      	lsls	r0, r1, #5
 80042c6:	69f9      	ldr	r1, [r7, #28]
 80042c8:	4401      	add	r1, r0
 80042ca:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80042ce:	4313      	orrs	r3, r2
 80042d0:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80042d2:	69bb      	ldr	r3, [r7, #24]
 80042d4:	015a      	lsls	r2, r3, #5
 80042d6:	69fb      	ldr	r3, [r7, #28]
 80042d8:	4413      	add	r3, r2
 80042da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80042de:	691a      	ldr	r2, [r3, #16]
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	691b      	ldr	r3, [r3, #16]
 80042e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042e8:	69b9      	ldr	r1, [r7, #24]
 80042ea:	0148      	lsls	r0, r1, #5
 80042ec:	69f9      	ldr	r1, [r7, #28]
 80042ee:	4401      	add	r1, r0
 80042f0:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80042f4:	4313      	orrs	r3, r2
 80042f6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80042f8:	79fb      	ldrb	r3, [r7, #7]
 80042fa:	2b01      	cmp	r3, #1
 80042fc:	d14b      	bne.n	8004396 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	69db      	ldr	r3, [r3, #28]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d009      	beq.n	800431a <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004306:	69bb      	ldr	r3, [r7, #24]
 8004308:	015a      	lsls	r2, r3, #5
 800430a:	69fb      	ldr	r3, [r7, #28]
 800430c:	4413      	add	r3, r2
 800430e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004312:	461a      	mov	r2, r3
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	69db      	ldr	r3, [r3, #28]
 8004318:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	791b      	ldrb	r3, [r3, #4]
 800431e:	2b01      	cmp	r3, #1
 8004320:	d128      	bne.n	8004374 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004322:	69fb      	ldr	r3, [r7, #28]
 8004324:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800432e:	2b00      	cmp	r3, #0
 8004330:	d110      	bne.n	8004354 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004332:	69bb      	ldr	r3, [r7, #24]
 8004334:	015a      	lsls	r2, r3, #5
 8004336:	69fb      	ldr	r3, [r7, #28]
 8004338:	4413      	add	r3, r2
 800433a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	69ba      	ldr	r2, [r7, #24]
 8004342:	0151      	lsls	r1, r2, #5
 8004344:	69fa      	ldr	r2, [r7, #28]
 8004346:	440a      	add	r2, r1
 8004348:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800434c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004350:	6013      	str	r3, [r2, #0]
 8004352:	e00f      	b.n	8004374 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004354:	69bb      	ldr	r3, [r7, #24]
 8004356:	015a      	lsls	r2, r3, #5
 8004358:	69fb      	ldr	r3, [r7, #28]
 800435a:	4413      	add	r3, r2
 800435c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	69ba      	ldr	r2, [r7, #24]
 8004364:	0151      	lsls	r1, r2, #5
 8004366:	69fa      	ldr	r2, [r7, #28]
 8004368:	440a      	add	r2, r1
 800436a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800436e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004372:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004374:	69bb      	ldr	r3, [r7, #24]
 8004376:	015a      	lsls	r2, r3, #5
 8004378:	69fb      	ldr	r3, [r7, #28]
 800437a:	4413      	add	r3, r2
 800437c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	69ba      	ldr	r2, [r7, #24]
 8004384:	0151      	lsls	r1, r2, #5
 8004386:	69fa      	ldr	r2, [r7, #28]
 8004388:	440a      	add	r2, r1
 800438a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800438e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004392:	6013      	str	r3, [r2, #0]
 8004394:	e166      	b.n	8004664 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004396:	69bb      	ldr	r3, [r7, #24]
 8004398:	015a      	lsls	r2, r3, #5
 800439a:	69fb      	ldr	r3, [r7, #28]
 800439c:	4413      	add	r3, r2
 800439e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	69ba      	ldr	r2, [r7, #24]
 80043a6:	0151      	lsls	r1, r2, #5
 80043a8:	69fa      	ldr	r2, [r7, #28]
 80043aa:	440a      	add	r2, r1
 80043ac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80043b0:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80043b4:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	791b      	ldrb	r3, [r3, #4]
 80043ba:	2b01      	cmp	r3, #1
 80043bc:	d015      	beq.n	80043ea <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	691b      	ldr	r3, [r3, #16]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	f000 814e 	beq.w	8004664 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80043c8:	69fb      	ldr	r3, [r7, #28]
 80043ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80043ce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	781b      	ldrb	r3, [r3, #0]
 80043d4:	f003 030f 	and.w	r3, r3, #15
 80043d8:	2101      	movs	r1, #1
 80043da:	fa01 f303 	lsl.w	r3, r1, r3
 80043de:	69f9      	ldr	r1, [r7, #28]
 80043e0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80043e4:	4313      	orrs	r3, r2
 80043e6:	634b      	str	r3, [r1, #52]	@ 0x34
 80043e8:	e13c      	b.n	8004664 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80043ea:	69fb      	ldr	r3, [r7, #28]
 80043ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d110      	bne.n	800441c <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80043fa:	69bb      	ldr	r3, [r7, #24]
 80043fc:	015a      	lsls	r2, r3, #5
 80043fe:	69fb      	ldr	r3, [r7, #28]
 8004400:	4413      	add	r3, r2
 8004402:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	69ba      	ldr	r2, [r7, #24]
 800440a:	0151      	lsls	r1, r2, #5
 800440c:	69fa      	ldr	r2, [r7, #28]
 800440e:	440a      	add	r2, r1
 8004410:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004414:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004418:	6013      	str	r3, [r2, #0]
 800441a:	e00f      	b.n	800443c <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800441c:	69bb      	ldr	r3, [r7, #24]
 800441e:	015a      	lsls	r2, r3, #5
 8004420:	69fb      	ldr	r3, [r7, #28]
 8004422:	4413      	add	r3, r2
 8004424:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	69ba      	ldr	r2, [r7, #24]
 800442c:	0151      	lsls	r1, r2, #5
 800442e:	69fa      	ldr	r2, [r7, #28]
 8004430:	440a      	add	r2, r1
 8004432:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004436:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800443a:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	68d9      	ldr	r1, [r3, #12]
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	781a      	ldrb	r2, [r3, #0]
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	691b      	ldr	r3, [r3, #16]
 8004448:	b298      	uxth	r0, r3
 800444a:	79fb      	ldrb	r3, [r7, #7]
 800444c:	9300      	str	r3, [sp, #0]
 800444e:	4603      	mov	r3, r0
 8004450:	68f8      	ldr	r0, [r7, #12]
 8004452:	f000 f9b9 	bl	80047c8 <USB_WritePacket>
 8004456:	e105      	b.n	8004664 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004458:	69bb      	ldr	r3, [r7, #24]
 800445a:	015a      	lsls	r2, r3, #5
 800445c:	69fb      	ldr	r3, [r7, #28]
 800445e:	4413      	add	r3, r2
 8004460:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004464:	691b      	ldr	r3, [r3, #16]
 8004466:	69ba      	ldr	r2, [r7, #24]
 8004468:	0151      	lsls	r1, r2, #5
 800446a:	69fa      	ldr	r2, [r7, #28]
 800446c:	440a      	add	r2, r1
 800446e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004472:	0cdb      	lsrs	r3, r3, #19
 8004474:	04db      	lsls	r3, r3, #19
 8004476:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004478:	69bb      	ldr	r3, [r7, #24]
 800447a:	015a      	lsls	r2, r3, #5
 800447c:	69fb      	ldr	r3, [r7, #28]
 800447e:	4413      	add	r3, r2
 8004480:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004484:	691b      	ldr	r3, [r3, #16]
 8004486:	69ba      	ldr	r2, [r7, #24]
 8004488:	0151      	lsls	r1, r2, #5
 800448a:	69fa      	ldr	r2, [r7, #28]
 800448c:	440a      	add	r2, r1
 800448e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004492:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004496:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800449a:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800449c:	69bb      	ldr	r3, [r7, #24]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d132      	bne.n	8004508 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	691b      	ldr	r3, [r3, #16]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d003      	beq.n	80044b2 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	689a      	ldr	r2, [r3, #8]
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	689a      	ldr	r2, [r3, #8]
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80044ba:	69bb      	ldr	r3, [r7, #24]
 80044bc:	015a      	lsls	r2, r3, #5
 80044be:	69fb      	ldr	r3, [r7, #28]
 80044c0:	4413      	add	r3, r2
 80044c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044c6:	691a      	ldr	r2, [r3, #16]
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	6a1b      	ldr	r3, [r3, #32]
 80044cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044d0:	69b9      	ldr	r1, [r7, #24]
 80044d2:	0148      	lsls	r0, r1, #5
 80044d4:	69f9      	ldr	r1, [r7, #28]
 80044d6:	4401      	add	r1, r0
 80044d8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80044dc:	4313      	orrs	r3, r2
 80044de:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80044e0:	69bb      	ldr	r3, [r7, #24]
 80044e2:	015a      	lsls	r2, r3, #5
 80044e4:	69fb      	ldr	r3, [r7, #28]
 80044e6:	4413      	add	r3, r2
 80044e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044ec:	691b      	ldr	r3, [r3, #16]
 80044ee:	69ba      	ldr	r2, [r7, #24]
 80044f0:	0151      	lsls	r1, r2, #5
 80044f2:	69fa      	ldr	r2, [r7, #28]
 80044f4:	440a      	add	r2, r1
 80044f6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80044fa:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80044fe:	6113      	str	r3, [r2, #16]
 8004500:	e062      	b.n	80045c8 <USB_EPStartXfer+0x490>
 8004502:	bf00      	nop
 8004504:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	691b      	ldr	r3, [r3, #16]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d123      	bne.n	8004558 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004510:	69bb      	ldr	r3, [r7, #24]
 8004512:	015a      	lsls	r2, r3, #5
 8004514:	69fb      	ldr	r3, [r7, #28]
 8004516:	4413      	add	r3, r2
 8004518:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800451c:	691a      	ldr	r2, [r3, #16]
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	689b      	ldr	r3, [r3, #8]
 8004522:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004526:	69b9      	ldr	r1, [r7, #24]
 8004528:	0148      	lsls	r0, r1, #5
 800452a:	69f9      	ldr	r1, [r7, #28]
 800452c:	4401      	add	r1, r0
 800452e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004532:	4313      	orrs	r3, r2
 8004534:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004536:	69bb      	ldr	r3, [r7, #24]
 8004538:	015a      	lsls	r2, r3, #5
 800453a:	69fb      	ldr	r3, [r7, #28]
 800453c:	4413      	add	r3, r2
 800453e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004542:	691b      	ldr	r3, [r3, #16]
 8004544:	69ba      	ldr	r2, [r7, #24]
 8004546:	0151      	lsls	r1, r2, #5
 8004548:	69fa      	ldr	r2, [r7, #28]
 800454a:	440a      	add	r2, r1
 800454c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004550:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004554:	6113      	str	r3, [r2, #16]
 8004556:	e037      	b.n	80045c8 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	691a      	ldr	r2, [r3, #16]
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	4413      	add	r3, r2
 8004562:	1e5a      	subs	r2, r3, #1
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	689b      	ldr	r3, [r3, #8]
 8004568:	fbb2 f3f3 	udiv	r3, r2, r3
 800456c:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	8afa      	ldrh	r2, [r7, #22]
 8004574:	fb03 f202 	mul.w	r2, r3, r2
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800457c:	69bb      	ldr	r3, [r7, #24]
 800457e:	015a      	lsls	r2, r3, #5
 8004580:	69fb      	ldr	r3, [r7, #28]
 8004582:	4413      	add	r3, r2
 8004584:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004588:	691a      	ldr	r2, [r3, #16]
 800458a:	8afb      	ldrh	r3, [r7, #22]
 800458c:	04d9      	lsls	r1, r3, #19
 800458e:	4b38      	ldr	r3, [pc, #224]	@ (8004670 <USB_EPStartXfer+0x538>)
 8004590:	400b      	ands	r3, r1
 8004592:	69b9      	ldr	r1, [r7, #24]
 8004594:	0148      	lsls	r0, r1, #5
 8004596:	69f9      	ldr	r1, [r7, #28]
 8004598:	4401      	add	r1, r0
 800459a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800459e:	4313      	orrs	r3, r2
 80045a0:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80045a2:	69bb      	ldr	r3, [r7, #24]
 80045a4:	015a      	lsls	r2, r3, #5
 80045a6:	69fb      	ldr	r3, [r7, #28]
 80045a8:	4413      	add	r3, r2
 80045aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045ae:	691a      	ldr	r2, [r3, #16]
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	6a1b      	ldr	r3, [r3, #32]
 80045b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045b8:	69b9      	ldr	r1, [r7, #24]
 80045ba:	0148      	lsls	r0, r1, #5
 80045bc:	69f9      	ldr	r1, [r7, #28]
 80045be:	4401      	add	r1, r0
 80045c0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80045c4:	4313      	orrs	r3, r2
 80045c6:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80045c8:	79fb      	ldrb	r3, [r7, #7]
 80045ca:	2b01      	cmp	r3, #1
 80045cc:	d10d      	bne.n	80045ea <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	68db      	ldr	r3, [r3, #12]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d009      	beq.n	80045ea <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	68d9      	ldr	r1, [r3, #12]
 80045da:	69bb      	ldr	r3, [r7, #24]
 80045dc:	015a      	lsls	r2, r3, #5
 80045de:	69fb      	ldr	r3, [r7, #28]
 80045e0:	4413      	add	r3, r2
 80045e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045e6:	460a      	mov	r2, r1
 80045e8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	791b      	ldrb	r3, [r3, #4]
 80045ee:	2b01      	cmp	r3, #1
 80045f0:	d128      	bne.n	8004644 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80045f2:	69fb      	ldr	r3, [r7, #28]
 80045f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80045f8:	689b      	ldr	r3, [r3, #8]
 80045fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d110      	bne.n	8004624 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004602:	69bb      	ldr	r3, [r7, #24]
 8004604:	015a      	lsls	r2, r3, #5
 8004606:	69fb      	ldr	r3, [r7, #28]
 8004608:	4413      	add	r3, r2
 800460a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	69ba      	ldr	r2, [r7, #24]
 8004612:	0151      	lsls	r1, r2, #5
 8004614:	69fa      	ldr	r2, [r7, #28]
 8004616:	440a      	add	r2, r1
 8004618:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800461c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004620:	6013      	str	r3, [r2, #0]
 8004622:	e00f      	b.n	8004644 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004624:	69bb      	ldr	r3, [r7, #24]
 8004626:	015a      	lsls	r2, r3, #5
 8004628:	69fb      	ldr	r3, [r7, #28]
 800462a:	4413      	add	r3, r2
 800462c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	69ba      	ldr	r2, [r7, #24]
 8004634:	0151      	lsls	r1, r2, #5
 8004636:	69fa      	ldr	r2, [r7, #28]
 8004638:	440a      	add	r2, r1
 800463a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800463e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004642:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004644:	69bb      	ldr	r3, [r7, #24]
 8004646:	015a      	lsls	r2, r3, #5
 8004648:	69fb      	ldr	r3, [r7, #28]
 800464a:	4413      	add	r3, r2
 800464c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	69ba      	ldr	r2, [r7, #24]
 8004654:	0151      	lsls	r1, r2, #5
 8004656:	69fa      	ldr	r2, [r7, #28]
 8004658:	440a      	add	r2, r1
 800465a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800465e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004662:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004664:	2300      	movs	r3, #0
}
 8004666:	4618      	mov	r0, r3
 8004668:	3720      	adds	r7, #32
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}
 800466e:	bf00      	nop
 8004670:	1ff80000 	.word	0x1ff80000

08004674 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004674:	b480      	push	{r7}
 8004676:	b087      	sub	sp, #28
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
 800467c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800467e:	2300      	movs	r3, #0
 8004680:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8004682:	2300      	movs	r3, #0
 8004684:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	785b      	ldrb	r3, [r3, #1]
 800468e:	2b01      	cmp	r3, #1
 8004690:	d14a      	bne.n	8004728 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	781b      	ldrb	r3, [r3, #0]
 8004696:	015a      	lsls	r2, r3, #5
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	4413      	add	r3, r2
 800469c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80046a6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80046aa:	f040 8086 	bne.w	80047ba <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	781b      	ldrb	r3, [r3, #0]
 80046b2:	015a      	lsls	r2, r3, #5
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	4413      	add	r3, r2
 80046b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	683a      	ldr	r2, [r7, #0]
 80046c0:	7812      	ldrb	r2, [r2, #0]
 80046c2:	0151      	lsls	r1, r2, #5
 80046c4:	693a      	ldr	r2, [r7, #16]
 80046c6:	440a      	add	r2, r1
 80046c8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80046cc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80046d0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	781b      	ldrb	r3, [r3, #0]
 80046d6:	015a      	lsls	r2, r3, #5
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	4413      	add	r3, r2
 80046dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	683a      	ldr	r2, [r7, #0]
 80046e4:	7812      	ldrb	r2, [r2, #0]
 80046e6:	0151      	lsls	r1, r2, #5
 80046e8:	693a      	ldr	r2, [r7, #16]
 80046ea:	440a      	add	r2, r1
 80046ec:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80046f0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80046f4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	3301      	adds	r3, #1
 80046fa:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	f242 7210 	movw	r2, #10000	@ 0x2710
 8004702:	4293      	cmp	r3, r2
 8004704:	d902      	bls.n	800470c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	75fb      	strb	r3, [r7, #23]
          break;
 800470a:	e056      	b.n	80047ba <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	781b      	ldrb	r3, [r3, #0]
 8004710:	015a      	lsls	r2, r3, #5
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	4413      	add	r3, r2
 8004716:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004720:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004724:	d0e7      	beq.n	80046f6 <USB_EPStopXfer+0x82>
 8004726:	e048      	b.n	80047ba <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	781b      	ldrb	r3, [r3, #0]
 800472c:	015a      	lsls	r2, r3, #5
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	4413      	add	r3, r2
 8004732:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800473c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004740:	d13b      	bne.n	80047ba <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	781b      	ldrb	r3, [r3, #0]
 8004746:	015a      	lsls	r2, r3, #5
 8004748:	693b      	ldr	r3, [r7, #16]
 800474a:	4413      	add	r3, r2
 800474c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	683a      	ldr	r2, [r7, #0]
 8004754:	7812      	ldrb	r2, [r2, #0]
 8004756:	0151      	lsls	r1, r2, #5
 8004758:	693a      	ldr	r2, [r7, #16]
 800475a:	440a      	add	r2, r1
 800475c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004760:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004764:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	781b      	ldrb	r3, [r3, #0]
 800476a:	015a      	lsls	r2, r3, #5
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	4413      	add	r3, r2
 8004770:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	683a      	ldr	r2, [r7, #0]
 8004778:	7812      	ldrb	r2, [r2, #0]
 800477a:	0151      	lsls	r1, r2, #5
 800477c:	693a      	ldr	r2, [r7, #16]
 800477e:	440a      	add	r2, r1
 8004780:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004784:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004788:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	3301      	adds	r3, #1
 800478e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	f242 7210 	movw	r2, #10000	@ 0x2710
 8004796:	4293      	cmp	r3, r2
 8004798:	d902      	bls.n	80047a0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800479a:	2301      	movs	r3, #1
 800479c:	75fb      	strb	r3, [r7, #23]
          break;
 800479e:	e00c      	b.n	80047ba <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	781b      	ldrb	r3, [r3, #0]
 80047a4:	015a      	lsls	r2, r3, #5
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	4413      	add	r3, r2
 80047aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80047b4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80047b8:	d0e7      	beq.n	800478a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80047ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80047bc:	4618      	mov	r0, r3
 80047be:	371c      	adds	r7, #28
 80047c0:	46bd      	mov	sp, r7
 80047c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c6:	4770      	bx	lr

080047c8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80047c8:	b480      	push	{r7}
 80047ca:	b089      	sub	sp, #36	@ 0x24
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	60f8      	str	r0, [r7, #12]
 80047d0:	60b9      	str	r1, [r7, #8]
 80047d2:	4611      	mov	r1, r2
 80047d4:	461a      	mov	r2, r3
 80047d6:	460b      	mov	r3, r1
 80047d8:	71fb      	strb	r3, [r7, #7]
 80047da:	4613      	mov	r3, r2
 80047dc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80047e6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d123      	bne.n	8004836 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80047ee:	88bb      	ldrh	r3, [r7, #4]
 80047f0:	3303      	adds	r3, #3
 80047f2:	089b      	lsrs	r3, r3, #2
 80047f4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80047f6:	2300      	movs	r3, #0
 80047f8:	61bb      	str	r3, [r7, #24]
 80047fa:	e018      	b.n	800482e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80047fc:	79fb      	ldrb	r3, [r7, #7]
 80047fe:	031a      	lsls	r2, r3, #12
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	4413      	add	r3, r2
 8004804:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004808:	461a      	mov	r2, r3
 800480a:	69fb      	ldr	r3, [r7, #28]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004810:	69fb      	ldr	r3, [r7, #28]
 8004812:	3301      	adds	r3, #1
 8004814:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004816:	69fb      	ldr	r3, [r7, #28]
 8004818:	3301      	adds	r3, #1
 800481a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800481c:	69fb      	ldr	r3, [r7, #28]
 800481e:	3301      	adds	r3, #1
 8004820:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004822:	69fb      	ldr	r3, [r7, #28]
 8004824:	3301      	adds	r3, #1
 8004826:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004828:	69bb      	ldr	r3, [r7, #24]
 800482a:	3301      	adds	r3, #1
 800482c:	61bb      	str	r3, [r7, #24]
 800482e:	69ba      	ldr	r2, [r7, #24]
 8004830:	693b      	ldr	r3, [r7, #16]
 8004832:	429a      	cmp	r2, r3
 8004834:	d3e2      	bcc.n	80047fc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004836:	2300      	movs	r3, #0
}
 8004838:	4618      	mov	r0, r3
 800483a:	3724      	adds	r7, #36	@ 0x24
 800483c:	46bd      	mov	sp, r7
 800483e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004842:	4770      	bx	lr

08004844 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004844:	b480      	push	{r7}
 8004846:	b08b      	sub	sp, #44	@ 0x2c
 8004848:	af00      	add	r7, sp, #0
 800484a:	60f8      	str	r0, [r7, #12]
 800484c:	60b9      	str	r1, [r7, #8]
 800484e:	4613      	mov	r3, r2
 8004850:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800485a:	88fb      	ldrh	r3, [r7, #6]
 800485c:	089b      	lsrs	r3, r3, #2
 800485e:	b29b      	uxth	r3, r3
 8004860:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004862:	88fb      	ldrh	r3, [r7, #6]
 8004864:	f003 0303 	and.w	r3, r3, #3
 8004868:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800486a:	2300      	movs	r3, #0
 800486c:	623b      	str	r3, [r7, #32]
 800486e:	e014      	b.n	800489a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004870:	69bb      	ldr	r3, [r7, #24]
 8004872:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004876:	681a      	ldr	r2, [r3, #0]
 8004878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800487a:	601a      	str	r2, [r3, #0]
    pDest++;
 800487c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800487e:	3301      	adds	r3, #1
 8004880:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004884:	3301      	adds	r3, #1
 8004886:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800488a:	3301      	adds	r3, #1
 800488c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800488e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004890:	3301      	adds	r3, #1
 8004892:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8004894:	6a3b      	ldr	r3, [r7, #32]
 8004896:	3301      	adds	r3, #1
 8004898:	623b      	str	r3, [r7, #32]
 800489a:	6a3a      	ldr	r2, [r7, #32]
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	429a      	cmp	r2, r3
 80048a0:	d3e6      	bcc.n	8004870 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80048a2:	8bfb      	ldrh	r3, [r7, #30]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d01e      	beq.n	80048e6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80048a8:	2300      	movs	r3, #0
 80048aa:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80048ac:	69bb      	ldr	r3, [r7, #24]
 80048ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80048b2:	461a      	mov	r2, r3
 80048b4:	f107 0310 	add.w	r3, r7, #16
 80048b8:	6812      	ldr	r2, [r2, #0]
 80048ba:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80048bc:	693a      	ldr	r2, [r7, #16]
 80048be:	6a3b      	ldr	r3, [r7, #32]
 80048c0:	b2db      	uxtb	r3, r3
 80048c2:	00db      	lsls	r3, r3, #3
 80048c4:	fa22 f303 	lsr.w	r3, r2, r3
 80048c8:	b2da      	uxtb	r2, r3
 80048ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048cc:	701a      	strb	r2, [r3, #0]
      i++;
 80048ce:	6a3b      	ldr	r3, [r7, #32]
 80048d0:	3301      	adds	r3, #1
 80048d2:	623b      	str	r3, [r7, #32]
      pDest++;
 80048d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048d6:	3301      	adds	r3, #1
 80048d8:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80048da:	8bfb      	ldrh	r3, [r7, #30]
 80048dc:	3b01      	subs	r3, #1
 80048de:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80048e0:	8bfb      	ldrh	r3, [r7, #30]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d1ea      	bne.n	80048bc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80048e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	372c      	adds	r7, #44	@ 0x2c
 80048ec:	46bd      	mov	sp, r7
 80048ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f2:	4770      	bx	lr

080048f4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80048f4:	b480      	push	{r7}
 80048f6:	b085      	sub	sp, #20
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
 80048fc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	781b      	ldrb	r3, [r3, #0]
 8004906:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	785b      	ldrb	r3, [r3, #1]
 800490c:	2b01      	cmp	r3, #1
 800490e:	d12c      	bne.n	800496a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	015a      	lsls	r2, r3, #5
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	4413      	add	r3, r2
 8004918:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	2b00      	cmp	r3, #0
 8004920:	db12      	blt.n	8004948 <USB_EPSetStall+0x54>
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d00f      	beq.n	8004948 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	015a      	lsls	r2, r3, #5
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	4413      	add	r3, r2
 8004930:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	68ba      	ldr	r2, [r7, #8]
 8004938:	0151      	lsls	r1, r2, #5
 800493a:	68fa      	ldr	r2, [r7, #12]
 800493c:	440a      	add	r2, r1
 800493e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004942:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004946:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	015a      	lsls	r2, r3, #5
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	4413      	add	r3, r2
 8004950:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	68ba      	ldr	r2, [r7, #8]
 8004958:	0151      	lsls	r1, r2, #5
 800495a:	68fa      	ldr	r2, [r7, #12]
 800495c:	440a      	add	r2, r1
 800495e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004962:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004966:	6013      	str	r3, [r2, #0]
 8004968:	e02b      	b.n	80049c2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	015a      	lsls	r2, r3, #5
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	4413      	add	r3, r2
 8004972:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	2b00      	cmp	r3, #0
 800497a:	db12      	blt.n	80049a2 <USB_EPSetStall+0xae>
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d00f      	beq.n	80049a2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	015a      	lsls	r2, r3, #5
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	4413      	add	r3, r2
 800498a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	68ba      	ldr	r2, [r7, #8]
 8004992:	0151      	lsls	r1, r2, #5
 8004994:	68fa      	ldr	r2, [r7, #12]
 8004996:	440a      	add	r2, r1
 8004998:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800499c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80049a0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	015a      	lsls	r2, r3, #5
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	4413      	add	r3, r2
 80049aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	68ba      	ldr	r2, [r7, #8]
 80049b2:	0151      	lsls	r1, r2, #5
 80049b4:	68fa      	ldr	r2, [r7, #12]
 80049b6:	440a      	add	r2, r1
 80049b8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80049bc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80049c0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80049c2:	2300      	movs	r3, #0
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	3714      	adds	r7, #20
 80049c8:	46bd      	mov	sp, r7
 80049ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ce:	4770      	bx	lr

080049d0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80049d0:	b480      	push	{r7}
 80049d2:	b085      	sub	sp, #20
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
 80049d8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	781b      	ldrb	r3, [r3, #0]
 80049e2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	785b      	ldrb	r3, [r3, #1]
 80049e8:	2b01      	cmp	r3, #1
 80049ea:	d128      	bne.n	8004a3e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	015a      	lsls	r2, r3, #5
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	4413      	add	r3, r2
 80049f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	68ba      	ldr	r2, [r7, #8]
 80049fc:	0151      	lsls	r1, r2, #5
 80049fe:	68fa      	ldr	r2, [r7, #12]
 8004a00:	440a      	add	r2, r1
 8004a02:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004a06:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004a0a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	791b      	ldrb	r3, [r3, #4]
 8004a10:	2b03      	cmp	r3, #3
 8004a12:	d003      	beq.n	8004a1c <USB_EPClearStall+0x4c>
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	791b      	ldrb	r3, [r3, #4]
 8004a18:	2b02      	cmp	r3, #2
 8004a1a:	d138      	bne.n	8004a8e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	015a      	lsls	r2, r3, #5
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	4413      	add	r3, r2
 8004a24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	68ba      	ldr	r2, [r7, #8]
 8004a2c:	0151      	lsls	r1, r2, #5
 8004a2e:	68fa      	ldr	r2, [r7, #12]
 8004a30:	440a      	add	r2, r1
 8004a32:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004a36:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a3a:	6013      	str	r3, [r2, #0]
 8004a3c:	e027      	b.n	8004a8e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	015a      	lsls	r2, r3, #5
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	4413      	add	r3, r2
 8004a46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	68ba      	ldr	r2, [r7, #8]
 8004a4e:	0151      	lsls	r1, r2, #5
 8004a50:	68fa      	ldr	r2, [r7, #12]
 8004a52:	440a      	add	r2, r1
 8004a54:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004a58:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004a5c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	791b      	ldrb	r3, [r3, #4]
 8004a62:	2b03      	cmp	r3, #3
 8004a64:	d003      	beq.n	8004a6e <USB_EPClearStall+0x9e>
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	791b      	ldrb	r3, [r3, #4]
 8004a6a:	2b02      	cmp	r3, #2
 8004a6c:	d10f      	bne.n	8004a8e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004a6e:	68bb      	ldr	r3, [r7, #8]
 8004a70:	015a      	lsls	r2, r3, #5
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	4413      	add	r3, r2
 8004a76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	68ba      	ldr	r2, [r7, #8]
 8004a7e:	0151      	lsls	r1, r2, #5
 8004a80:	68fa      	ldr	r2, [r7, #12]
 8004a82:	440a      	add	r2, r1
 8004a84:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004a88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a8c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004a8e:	2300      	movs	r3, #0
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	3714      	adds	r7, #20
 8004a94:	46bd      	mov	sp, r7
 8004a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9a:	4770      	bx	lr

08004a9c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b085      	sub	sp, #20
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
 8004aa4:	460b      	mov	r3, r1
 8004aa6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	68fa      	ldr	r2, [r7, #12]
 8004ab6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004aba:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8004abe:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ac6:	681a      	ldr	r2, [r3, #0]
 8004ac8:	78fb      	ldrb	r3, [r7, #3]
 8004aca:	011b      	lsls	r3, r3, #4
 8004acc:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8004ad0:	68f9      	ldr	r1, [r7, #12]
 8004ad2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004ada:	2300      	movs	r3, #0
}
 8004adc:	4618      	mov	r0, r3
 8004ade:	3714      	adds	r7, #20
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae6:	4770      	bx	lr

08004ae8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b085      	sub	sp, #20
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	68fa      	ldr	r2, [r7, #12]
 8004afe:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004b02:	f023 0303 	bic.w	r3, r3, #3
 8004b06:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	68fa      	ldr	r2, [r7, #12]
 8004b12:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004b16:	f023 0302 	bic.w	r3, r3, #2
 8004b1a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004b1c:	2300      	movs	r3, #0
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	3714      	adds	r7, #20
 8004b22:	46bd      	mov	sp, r7
 8004b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b28:	4770      	bx	lr

08004b2a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004b2a:	b480      	push	{r7}
 8004b2c:	b085      	sub	sp, #20
 8004b2e:	af00      	add	r7, sp, #0
 8004b30:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	68fa      	ldr	r2, [r7, #12]
 8004b40:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004b44:	f023 0303 	bic.w	r3, r3, #3
 8004b48:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	68fa      	ldr	r2, [r7, #12]
 8004b54:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004b58:	f043 0302 	orr.w	r3, r3, #2
 8004b5c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004b5e:	2300      	movs	r3, #0
}
 8004b60:	4618      	mov	r0, r3
 8004b62:	3714      	adds	r7, #20
 8004b64:	46bd      	mov	sp, r7
 8004b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6a:	4770      	bx	lr

08004b6c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b085      	sub	sp, #20
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	695b      	ldr	r3, [r3, #20]
 8004b78:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	699b      	ldr	r3, [r3, #24]
 8004b7e:	68fa      	ldr	r2, [r7, #12]
 8004b80:	4013      	ands	r3, r2
 8004b82:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004b84:	68fb      	ldr	r3, [r7, #12]
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	3714      	adds	r7, #20
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b90:	4770      	bx	lr

08004b92 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8004b92:	b480      	push	{r7}
 8004b94:	b085      	sub	sp, #20
 8004b96:	af00      	add	r7, sp, #0
 8004b98:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ba4:	699b      	ldr	r3, [r3, #24]
 8004ba6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004bae:	69db      	ldr	r3, [r3, #28]
 8004bb0:	68ba      	ldr	r2, [r7, #8]
 8004bb2:	4013      	ands	r3, r2
 8004bb4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004bb6:	68bb      	ldr	r3, [r7, #8]
 8004bb8:	0c1b      	lsrs	r3, r3, #16
}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	3714      	adds	r7, #20
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc4:	4770      	bx	lr

08004bc6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8004bc6:	b480      	push	{r7}
 8004bc8:	b085      	sub	sp, #20
 8004bca:	af00      	add	r7, sp, #0
 8004bcc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004bd8:	699b      	ldr	r3, [r3, #24]
 8004bda:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004be2:	69db      	ldr	r3, [r3, #28]
 8004be4:	68ba      	ldr	r2, [r7, #8]
 8004be6:	4013      	ands	r3, r2
 8004be8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004bea:	68bb      	ldr	r3, [r7, #8]
 8004bec:	b29b      	uxth	r3, r3
}
 8004bee:	4618      	mov	r0, r3
 8004bf0:	3714      	adds	r7, #20
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf8:	4770      	bx	lr

08004bfa <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004bfa:	b480      	push	{r7}
 8004bfc:	b085      	sub	sp, #20
 8004bfe:	af00      	add	r7, sp, #0
 8004c00:	6078      	str	r0, [r7, #4]
 8004c02:	460b      	mov	r3, r1
 8004c04:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004c0a:	78fb      	ldrb	r3, [r7, #3]
 8004c0c:	015a      	lsls	r2, r3, #5
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	4413      	add	r3, r2
 8004c12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c16:	689b      	ldr	r3, [r3, #8]
 8004c18:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c20:	695b      	ldr	r3, [r3, #20]
 8004c22:	68ba      	ldr	r2, [r7, #8]
 8004c24:	4013      	ands	r3, r2
 8004c26:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004c28:	68bb      	ldr	r3, [r7, #8]
}
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	3714      	adds	r7, #20
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c34:	4770      	bx	lr

08004c36 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004c36:	b480      	push	{r7}
 8004c38:	b087      	sub	sp, #28
 8004c3a:	af00      	add	r7, sp, #0
 8004c3c:	6078      	str	r0, [r7, #4]
 8004c3e:	460b      	mov	r3, r1
 8004c40:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c4c:	691b      	ldr	r3, [r3, #16]
 8004c4e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c58:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004c5a:	78fb      	ldrb	r3, [r7, #3]
 8004c5c:	f003 030f 	and.w	r3, r3, #15
 8004c60:	68fa      	ldr	r2, [r7, #12]
 8004c62:	fa22 f303 	lsr.w	r3, r2, r3
 8004c66:	01db      	lsls	r3, r3, #7
 8004c68:	b2db      	uxtb	r3, r3
 8004c6a:	693a      	ldr	r2, [r7, #16]
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004c70:	78fb      	ldrb	r3, [r7, #3]
 8004c72:	015a      	lsls	r2, r3, #5
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	4413      	add	r3, r2
 8004c78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c7c:	689b      	ldr	r3, [r3, #8]
 8004c7e:	693a      	ldr	r2, [r7, #16]
 8004c80:	4013      	ands	r3, r2
 8004c82:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004c84:	68bb      	ldr	r3, [r7, #8]
}
 8004c86:	4618      	mov	r0, r3
 8004c88:	371c      	adds	r7, #28
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c90:	4770      	bx	lr

08004c92 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8004c92:	b480      	push	{r7}
 8004c94:	b083      	sub	sp, #12
 8004c96:	af00      	add	r7, sp, #0
 8004c98:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	695b      	ldr	r3, [r3, #20]
 8004c9e:	f003 0301 	and.w	r3, r3, #1
}
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	370c      	adds	r7, #12
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cac:	4770      	bx	lr

08004cae <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8004cae:	b480      	push	{r7}
 8004cb0:	b085      	sub	sp, #20
 8004cb2:	af00      	add	r7, sp, #0
 8004cb4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	68fa      	ldr	r2, [r7, #12]
 8004cc4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004cc8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004ccc:	f023 0307 	bic.w	r3, r3, #7
 8004cd0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	68fa      	ldr	r2, [r7, #12]
 8004cdc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004ce0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ce4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004ce6:	2300      	movs	r3, #0
}
 8004ce8:	4618      	mov	r0, r3
 8004cea:	3714      	adds	r7, #20
 8004cec:	46bd      	mov	sp, r7
 8004cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf2:	4770      	bx	lr

08004cf4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b087      	sub	sp, #28
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	60f8      	str	r0, [r7, #12]
 8004cfc:	460b      	mov	r3, r1
 8004cfe:	607a      	str	r2, [r7, #4]
 8004d00:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	333c      	adds	r3, #60	@ 0x3c
 8004d0a:	3304      	adds	r3, #4
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004d10:	693b      	ldr	r3, [r7, #16]
 8004d12:	4a26      	ldr	r2, [pc, #152]	@ (8004dac <USB_EP0_OutStart+0xb8>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d90a      	bls.n	8004d2e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004d24:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004d28:	d101      	bne.n	8004d2e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	e037      	b.n	8004d9e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004d2e:	697b      	ldr	r3, [r7, #20]
 8004d30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d34:	461a      	mov	r2, r3
 8004d36:	2300      	movs	r3, #0
 8004d38:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d40:	691b      	ldr	r3, [r3, #16]
 8004d42:	697a      	ldr	r2, [r7, #20]
 8004d44:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004d48:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004d4c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d54:	691b      	ldr	r3, [r3, #16]
 8004d56:	697a      	ldr	r2, [r7, #20]
 8004d58:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004d5c:	f043 0318 	orr.w	r3, r3, #24
 8004d60:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d68:	691b      	ldr	r3, [r3, #16]
 8004d6a:	697a      	ldr	r2, [r7, #20]
 8004d6c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004d70:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8004d74:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004d76:	7afb      	ldrb	r3, [r7, #11]
 8004d78:	2b01      	cmp	r3, #1
 8004d7a:	d10f      	bne.n	8004d9c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d82:	461a      	mov	r2, r3
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	697a      	ldr	r2, [r7, #20]
 8004d92:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004d96:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8004d9a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004d9c:	2300      	movs	r3, #0
}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	371c      	adds	r7, #28
 8004da2:	46bd      	mov	sp, r7
 8004da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da8:	4770      	bx	lr
 8004daa:	bf00      	nop
 8004dac:	4f54300a 	.word	0x4f54300a

08004db0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004db0:	b480      	push	{r7}
 8004db2:	b085      	sub	sp, #20
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004db8:	2300      	movs	r3, #0
 8004dba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	3301      	adds	r3, #1
 8004dc0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004dc8:	d901      	bls.n	8004dce <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004dca:	2303      	movs	r3, #3
 8004dcc:	e01b      	b.n	8004e06 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	691b      	ldr	r3, [r3, #16]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	daf2      	bge.n	8004dbc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	691b      	ldr	r3, [r3, #16]
 8004dde:	f043 0201 	orr.w	r2, r3, #1
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	3301      	adds	r3, #1
 8004dea:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004df2:	d901      	bls.n	8004df8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004df4:	2303      	movs	r3, #3
 8004df6:	e006      	b.n	8004e06 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	691b      	ldr	r3, [r3, #16]
 8004dfc:	f003 0301 	and.w	r3, r3, #1
 8004e00:	2b01      	cmp	r3, #1
 8004e02:	d0f0      	beq.n	8004de6 <USB_CoreReset+0x36>

  return HAL_OK;
 8004e04:	2300      	movs	r3, #0
}
 8004e06:	4618      	mov	r0, r3
 8004e08:	3714      	adds	r7, #20
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e10:	4770      	bx	lr
	...

08004e14 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b084      	sub	sp, #16
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
 8004e1c:	460b      	mov	r3, r1
 8004e1e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004e20:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8004e24:	f004 ff94 	bl	8009d50 <USBD_static_malloc>
 8004e28:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d109      	bne.n	8004e44 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	32b0      	adds	r2, #176	@ 0xb0
 8004e3a:	2100      	movs	r1, #0
 8004e3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8004e40:	2302      	movs	r3, #2
 8004e42:	e0d4      	b.n	8004fee <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8004e44:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8004e48:	2100      	movs	r1, #0
 8004e4a:	68f8      	ldr	r0, [r7, #12]
 8004e4c:	f004 ffc4 	bl	8009dd8 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	32b0      	adds	r2, #176	@ 0xb0
 8004e5a:	68f9      	ldr	r1, [r7, #12]
 8004e5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	32b0      	adds	r2, #176	@ 0xb0
 8004e6a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	7c1b      	ldrb	r3, [r3, #16]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d138      	bne.n	8004eee <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004e7c:	4b5e      	ldr	r3, [pc, #376]	@ (8004ff8 <USBD_CDC_Init+0x1e4>)
 8004e7e:	7819      	ldrb	r1, [r3, #0]
 8004e80:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004e84:	2202      	movs	r2, #2
 8004e86:	6878      	ldr	r0, [r7, #4]
 8004e88:	f004 fe3f 	bl	8009b0a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004e8c:	4b5a      	ldr	r3, [pc, #360]	@ (8004ff8 <USBD_CDC_Init+0x1e4>)
 8004e8e:	781b      	ldrb	r3, [r3, #0]
 8004e90:	f003 020f 	and.w	r2, r3, #15
 8004e94:	6879      	ldr	r1, [r7, #4]
 8004e96:	4613      	mov	r3, r2
 8004e98:	009b      	lsls	r3, r3, #2
 8004e9a:	4413      	add	r3, r2
 8004e9c:	009b      	lsls	r3, r3, #2
 8004e9e:	440b      	add	r3, r1
 8004ea0:	3324      	adds	r3, #36	@ 0x24
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8004ea6:	4b55      	ldr	r3, [pc, #340]	@ (8004ffc <USBD_CDC_Init+0x1e8>)
 8004ea8:	7819      	ldrb	r1, [r3, #0]
 8004eaa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004eae:	2202      	movs	r2, #2
 8004eb0:	6878      	ldr	r0, [r7, #4]
 8004eb2:	f004 fe2a 	bl	8009b0a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8004eb6:	4b51      	ldr	r3, [pc, #324]	@ (8004ffc <USBD_CDC_Init+0x1e8>)
 8004eb8:	781b      	ldrb	r3, [r3, #0]
 8004eba:	f003 020f 	and.w	r2, r3, #15
 8004ebe:	6879      	ldr	r1, [r7, #4]
 8004ec0:	4613      	mov	r3, r2
 8004ec2:	009b      	lsls	r3, r3, #2
 8004ec4:	4413      	add	r3, r2
 8004ec6:	009b      	lsls	r3, r3, #2
 8004ec8:	440b      	add	r3, r1
 8004eca:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8004ece:	2201      	movs	r2, #1
 8004ed0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8004ed2:	4b4b      	ldr	r3, [pc, #300]	@ (8005000 <USBD_CDC_Init+0x1ec>)
 8004ed4:	781b      	ldrb	r3, [r3, #0]
 8004ed6:	f003 020f 	and.w	r2, r3, #15
 8004eda:	6879      	ldr	r1, [r7, #4]
 8004edc:	4613      	mov	r3, r2
 8004ede:	009b      	lsls	r3, r3, #2
 8004ee0:	4413      	add	r3, r2
 8004ee2:	009b      	lsls	r3, r3, #2
 8004ee4:	440b      	add	r3, r1
 8004ee6:	3326      	adds	r3, #38	@ 0x26
 8004ee8:	2210      	movs	r2, #16
 8004eea:	801a      	strh	r2, [r3, #0]
 8004eec:	e035      	b.n	8004f5a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004eee:	4b42      	ldr	r3, [pc, #264]	@ (8004ff8 <USBD_CDC_Init+0x1e4>)
 8004ef0:	7819      	ldrb	r1, [r3, #0]
 8004ef2:	2340      	movs	r3, #64	@ 0x40
 8004ef4:	2202      	movs	r2, #2
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f004 fe07 	bl	8009b0a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004efc:	4b3e      	ldr	r3, [pc, #248]	@ (8004ff8 <USBD_CDC_Init+0x1e4>)
 8004efe:	781b      	ldrb	r3, [r3, #0]
 8004f00:	f003 020f 	and.w	r2, r3, #15
 8004f04:	6879      	ldr	r1, [r7, #4]
 8004f06:	4613      	mov	r3, r2
 8004f08:	009b      	lsls	r3, r3, #2
 8004f0a:	4413      	add	r3, r2
 8004f0c:	009b      	lsls	r3, r3, #2
 8004f0e:	440b      	add	r3, r1
 8004f10:	3324      	adds	r3, #36	@ 0x24
 8004f12:	2201      	movs	r2, #1
 8004f14:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8004f16:	4b39      	ldr	r3, [pc, #228]	@ (8004ffc <USBD_CDC_Init+0x1e8>)
 8004f18:	7819      	ldrb	r1, [r3, #0]
 8004f1a:	2340      	movs	r3, #64	@ 0x40
 8004f1c:	2202      	movs	r2, #2
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	f004 fdf3 	bl	8009b0a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8004f24:	4b35      	ldr	r3, [pc, #212]	@ (8004ffc <USBD_CDC_Init+0x1e8>)
 8004f26:	781b      	ldrb	r3, [r3, #0]
 8004f28:	f003 020f 	and.w	r2, r3, #15
 8004f2c:	6879      	ldr	r1, [r7, #4]
 8004f2e:	4613      	mov	r3, r2
 8004f30:	009b      	lsls	r3, r3, #2
 8004f32:	4413      	add	r3, r2
 8004f34:	009b      	lsls	r3, r3, #2
 8004f36:	440b      	add	r3, r1
 8004f38:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8004f3c:	2201      	movs	r2, #1
 8004f3e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8004f40:	4b2f      	ldr	r3, [pc, #188]	@ (8005000 <USBD_CDC_Init+0x1ec>)
 8004f42:	781b      	ldrb	r3, [r3, #0]
 8004f44:	f003 020f 	and.w	r2, r3, #15
 8004f48:	6879      	ldr	r1, [r7, #4]
 8004f4a:	4613      	mov	r3, r2
 8004f4c:	009b      	lsls	r3, r3, #2
 8004f4e:	4413      	add	r3, r2
 8004f50:	009b      	lsls	r3, r3, #2
 8004f52:	440b      	add	r3, r1
 8004f54:	3326      	adds	r3, #38	@ 0x26
 8004f56:	2210      	movs	r2, #16
 8004f58:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004f5a:	4b29      	ldr	r3, [pc, #164]	@ (8005000 <USBD_CDC_Init+0x1ec>)
 8004f5c:	7819      	ldrb	r1, [r3, #0]
 8004f5e:	2308      	movs	r3, #8
 8004f60:	2203      	movs	r2, #3
 8004f62:	6878      	ldr	r0, [r7, #4]
 8004f64:	f004 fdd1 	bl	8009b0a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8004f68:	4b25      	ldr	r3, [pc, #148]	@ (8005000 <USBD_CDC_Init+0x1ec>)
 8004f6a:	781b      	ldrb	r3, [r3, #0]
 8004f6c:	f003 020f 	and.w	r2, r3, #15
 8004f70:	6879      	ldr	r1, [r7, #4]
 8004f72:	4613      	mov	r3, r2
 8004f74:	009b      	lsls	r3, r3, #2
 8004f76:	4413      	add	r3, r2
 8004f78:	009b      	lsls	r3, r3, #2
 8004f7a:	440b      	add	r3, r1
 8004f7c:	3324      	adds	r3, #36	@ 0x24
 8004f7e:	2201      	movs	r2, #1
 8004f80:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	2200      	movs	r2, #0
 8004f86:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004f90:	687a      	ldr	r2, [r7, #4]
 8004f92:	33b0      	adds	r3, #176	@ 0xb0
 8004f94:	009b      	lsls	r3, r3, #2
 8004f96:	4413      	add	r3, r2
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d101      	bne.n	8004fbc <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8004fb8:	2302      	movs	r3, #2
 8004fba:	e018      	b.n	8004fee <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	7c1b      	ldrb	r3, [r3, #16]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d10a      	bne.n	8004fda <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004fc4:	4b0d      	ldr	r3, [pc, #52]	@ (8004ffc <USBD_CDC_Init+0x1e8>)
 8004fc6:	7819      	ldrb	r1, [r3, #0]
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8004fce:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004fd2:	6878      	ldr	r0, [r7, #4]
 8004fd4:	f004 fe88 	bl	8009ce8 <USBD_LL_PrepareReceive>
 8004fd8:	e008      	b.n	8004fec <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004fda:	4b08      	ldr	r3, [pc, #32]	@ (8004ffc <USBD_CDC_Init+0x1e8>)
 8004fdc:	7819      	ldrb	r1, [r3, #0]
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8004fe4:	2340      	movs	r3, #64	@ 0x40
 8004fe6:	6878      	ldr	r0, [r7, #4]
 8004fe8:	f004 fe7e 	bl	8009ce8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004fec:	2300      	movs	r3, #0
}
 8004fee:	4618      	mov	r0, r3
 8004ff0:	3710      	adds	r7, #16
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bd80      	pop	{r7, pc}
 8004ff6:	bf00      	nop
 8004ff8:	20000093 	.word	0x20000093
 8004ffc:	20000094 	.word	0x20000094
 8005000:	20000095 	.word	0x20000095

08005004 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b082      	sub	sp, #8
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
 800500c:	460b      	mov	r3, r1
 800500e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8005010:	4b3a      	ldr	r3, [pc, #232]	@ (80050fc <USBD_CDC_DeInit+0xf8>)
 8005012:	781b      	ldrb	r3, [r3, #0]
 8005014:	4619      	mov	r1, r3
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	f004 fd9d 	bl	8009b56 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800501c:	4b37      	ldr	r3, [pc, #220]	@ (80050fc <USBD_CDC_DeInit+0xf8>)
 800501e:	781b      	ldrb	r3, [r3, #0]
 8005020:	f003 020f 	and.w	r2, r3, #15
 8005024:	6879      	ldr	r1, [r7, #4]
 8005026:	4613      	mov	r3, r2
 8005028:	009b      	lsls	r3, r3, #2
 800502a:	4413      	add	r3, r2
 800502c:	009b      	lsls	r3, r3, #2
 800502e:	440b      	add	r3, r1
 8005030:	3324      	adds	r3, #36	@ 0x24
 8005032:	2200      	movs	r2, #0
 8005034:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8005036:	4b32      	ldr	r3, [pc, #200]	@ (8005100 <USBD_CDC_DeInit+0xfc>)
 8005038:	781b      	ldrb	r3, [r3, #0]
 800503a:	4619      	mov	r1, r3
 800503c:	6878      	ldr	r0, [r7, #4]
 800503e:	f004 fd8a 	bl	8009b56 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8005042:	4b2f      	ldr	r3, [pc, #188]	@ (8005100 <USBD_CDC_DeInit+0xfc>)
 8005044:	781b      	ldrb	r3, [r3, #0]
 8005046:	f003 020f 	and.w	r2, r3, #15
 800504a:	6879      	ldr	r1, [r7, #4]
 800504c:	4613      	mov	r3, r2
 800504e:	009b      	lsls	r3, r3, #2
 8005050:	4413      	add	r3, r2
 8005052:	009b      	lsls	r3, r3, #2
 8005054:	440b      	add	r3, r1
 8005056:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800505a:	2200      	movs	r2, #0
 800505c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800505e:	4b29      	ldr	r3, [pc, #164]	@ (8005104 <USBD_CDC_DeInit+0x100>)
 8005060:	781b      	ldrb	r3, [r3, #0]
 8005062:	4619      	mov	r1, r3
 8005064:	6878      	ldr	r0, [r7, #4]
 8005066:	f004 fd76 	bl	8009b56 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800506a:	4b26      	ldr	r3, [pc, #152]	@ (8005104 <USBD_CDC_DeInit+0x100>)
 800506c:	781b      	ldrb	r3, [r3, #0]
 800506e:	f003 020f 	and.w	r2, r3, #15
 8005072:	6879      	ldr	r1, [r7, #4]
 8005074:	4613      	mov	r3, r2
 8005076:	009b      	lsls	r3, r3, #2
 8005078:	4413      	add	r3, r2
 800507a:	009b      	lsls	r3, r3, #2
 800507c:	440b      	add	r3, r1
 800507e:	3324      	adds	r3, #36	@ 0x24
 8005080:	2200      	movs	r2, #0
 8005082:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8005084:	4b1f      	ldr	r3, [pc, #124]	@ (8005104 <USBD_CDC_DeInit+0x100>)
 8005086:	781b      	ldrb	r3, [r3, #0]
 8005088:	f003 020f 	and.w	r2, r3, #15
 800508c:	6879      	ldr	r1, [r7, #4]
 800508e:	4613      	mov	r3, r2
 8005090:	009b      	lsls	r3, r3, #2
 8005092:	4413      	add	r3, r2
 8005094:	009b      	lsls	r3, r3, #2
 8005096:	440b      	add	r3, r1
 8005098:	3326      	adds	r3, #38	@ 0x26
 800509a:	2200      	movs	r2, #0
 800509c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	32b0      	adds	r2, #176	@ 0xb0
 80050a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d01f      	beq.n	80050f0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80050b6:	687a      	ldr	r2, [r7, #4]
 80050b8:	33b0      	adds	r3, #176	@ 0xb0
 80050ba:	009b      	lsls	r3, r3, #2
 80050bc:	4413      	add	r3, r2
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	685b      	ldr	r3, [r3, #4]
 80050c2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	32b0      	adds	r2, #176	@ 0xb0
 80050ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050d2:	4618      	mov	r0, r3
 80050d4:	f004 fe4a 	bl	8009d6c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	32b0      	adds	r2, #176	@ 0xb0
 80050e2:	2100      	movs	r1, #0
 80050e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2200      	movs	r2, #0
 80050ec:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 80050f0:	2300      	movs	r3, #0
}
 80050f2:	4618      	mov	r0, r3
 80050f4:	3708      	adds	r7, #8
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}
 80050fa:	bf00      	nop
 80050fc:	20000093 	.word	0x20000093
 8005100:	20000094 	.word	0x20000094
 8005104:	20000095 	.word	0x20000095

08005108 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b086      	sub	sp, #24
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
 8005110:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	32b0      	adds	r2, #176	@ 0xb0
 800511c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005120:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005122:	2300      	movs	r3, #0
 8005124:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005126:	2300      	movs	r3, #0
 8005128:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800512a:	2300      	movs	r3, #0
 800512c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d101      	bne.n	8005138 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8005134:	2303      	movs	r3, #3
 8005136:	e0bf      	b.n	80052b8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	781b      	ldrb	r3, [r3, #0]
 800513c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005140:	2b00      	cmp	r3, #0
 8005142:	d050      	beq.n	80051e6 <USBD_CDC_Setup+0xde>
 8005144:	2b20      	cmp	r3, #32
 8005146:	f040 80af 	bne.w	80052a8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	88db      	ldrh	r3, [r3, #6]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d03a      	beq.n	80051c8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	781b      	ldrb	r3, [r3, #0]
 8005156:	b25b      	sxtb	r3, r3
 8005158:	2b00      	cmp	r3, #0
 800515a:	da1b      	bge.n	8005194 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005162:	687a      	ldr	r2, [r7, #4]
 8005164:	33b0      	adds	r3, #176	@ 0xb0
 8005166:	009b      	lsls	r3, r3, #2
 8005168:	4413      	add	r3, r2
 800516a:	685b      	ldr	r3, [r3, #4]
 800516c:	689b      	ldr	r3, [r3, #8]
 800516e:	683a      	ldr	r2, [r7, #0]
 8005170:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8005172:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005174:	683a      	ldr	r2, [r7, #0]
 8005176:	88d2      	ldrh	r2, [r2, #6]
 8005178:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	88db      	ldrh	r3, [r3, #6]
 800517e:	2b07      	cmp	r3, #7
 8005180:	bf28      	it	cs
 8005182:	2307      	movcs	r3, #7
 8005184:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005186:	693b      	ldr	r3, [r7, #16]
 8005188:	89fa      	ldrh	r2, [r7, #14]
 800518a:	4619      	mov	r1, r3
 800518c:	6878      	ldr	r0, [r7, #4]
 800518e:	f001 fd93 	bl	8006cb8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8005192:	e090      	b.n	80052b6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	785a      	ldrb	r2, [r3, #1]
 8005198:	693b      	ldr	r3, [r7, #16]
 800519a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	88db      	ldrh	r3, [r3, #6]
 80051a2:	2b3f      	cmp	r3, #63	@ 0x3f
 80051a4:	d803      	bhi.n	80051ae <USBD_CDC_Setup+0xa6>
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	88db      	ldrh	r3, [r3, #6]
 80051aa:	b2da      	uxtb	r2, r3
 80051ac:	e000      	b.n	80051b0 <USBD_CDC_Setup+0xa8>
 80051ae:	2240      	movs	r2, #64	@ 0x40
 80051b0:	693b      	ldr	r3, [r7, #16]
 80051b2:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80051b6:	6939      	ldr	r1, [r7, #16]
 80051b8:	693b      	ldr	r3, [r7, #16]
 80051ba:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 80051be:	461a      	mov	r2, r3
 80051c0:	6878      	ldr	r0, [r7, #4]
 80051c2:	f001 fda5 	bl	8006d10 <USBD_CtlPrepareRx>
      break;
 80051c6:	e076      	b.n	80052b6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80051ce:	687a      	ldr	r2, [r7, #4]
 80051d0:	33b0      	adds	r3, #176	@ 0xb0
 80051d2:	009b      	lsls	r3, r3, #2
 80051d4:	4413      	add	r3, r2
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	689b      	ldr	r3, [r3, #8]
 80051da:	683a      	ldr	r2, [r7, #0]
 80051dc:	7850      	ldrb	r0, [r2, #1]
 80051de:	2200      	movs	r2, #0
 80051e0:	6839      	ldr	r1, [r7, #0]
 80051e2:	4798      	blx	r3
      break;
 80051e4:	e067      	b.n	80052b6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	785b      	ldrb	r3, [r3, #1]
 80051ea:	2b0b      	cmp	r3, #11
 80051ec:	d851      	bhi.n	8005292 <USBD_CDC_Setup+0x18a>
 80051ee:	a201      	add	r2, pc, #4	@ (adr r2, 80051f4 <USBD_CDC_Setup+0xec>)
 80051f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051f4:	08005225 	.word	0x08005225
 80051f8:	080052a1 	.word	0x080052a1
 80051fc:	08005293 	.word	0x08005293
 8005200:	08005293 	.word	0x08005293
 8005204:	08005293 	.word	0x08005293
 8005208:	08005293 	.word	0x08005293
 800520c:	08005293 	.word	0x08005293
 8005210:	08005293 	.word	0x08005293
 8005214:	08005293 	.word	0x08005293
 8005218:	08005293 	.word	0x08005293
 800521c:	0800524f 	.word	0x0800524f
 8005220:	08005279 	.word	0x08005279
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800522a:	b2db      	uxtb	r3, r3
 800522c:	2b03      	cmp	r3, #3
 800522e:	d107      	bne.n	8005240 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005230:	f107 030a 	add.w	r3, r7, #10
 8005234:	2202      	movs	r2, #2
 8005236:	4619      	mov	r1, r3
 8005238:	6878      	ldr	r0, [r7, #4]
 800523a:	f001 fd3d 	bl	8006cb8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800523e:	e032      	b.n	80052a6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005240:	6839      	ldr	r1, [r7, #0]
 8005242:	6878      	ldr	r0, [r7, #4]
 8005244:	f001 fcbb 	bl	8006bbe <USBD_CtlError>
            ret = USBD_FAIL;
 8005248:	2303      	movs	r3, #3
 800524a:	75fb      	strb	r3, [r7, #23]
          break;
 800524c:	e02b      	b.n	80052a6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005254:	b2db      	uxtb	r3, r3
 8005256:	2b03      	cmp	r3, #3
 8005258:	d107      	bne.n	800526a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800525a:	f107 030d 	add.w	r3, r7, #13
 800525e:	2201      	movs	r2, #1
 8005260:	4619      	mov	r1, r3
 8005262:	6878      	ldr	r0, [r7, #4]
 8005264:	f001 fd28 	bl	8006cb8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005268:	e01d      	b.n	80052a6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800526a:	6839      	ldr	r1, [r7, #0]
 800526c:	6878      	ldr	r0, [r7, #4]
 800526e:	f001 fca6 	bl	8006bbe <USBD_CtlError>
            ret = USBD_FAIL;
 8005272:	2303      	movs	r3, #3
 8005274:	75fb      	strb	r3, [r7, #23]
          break;
 8005276:	e016      	b.n	80052a6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800527e:	b2db      	uxtb	r3, r3
 8005280:	2b03      	cmp	r3, #3
 8005282:	d00f      	beq.n	80052a4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8005284:	6839      	ldr	r1, [r7, #0]
 8005286:	6878      	ldr	r0, [r7, #4]
 8005288:	f001 fc99 	bl	8006bbe <USBD_CtlError>
            ret = USBD_FAIL;
 800528c:	2303      	movs	r3, #3
 800528e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005290:	e008      	b.n	80052a4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005292:	6839      	ldr	r1, [r7, #0]
 8005294:	6878      	ldr	r0, [r7, #4]
 8005296:	f001 fc92 	bl	8006bbe <USBD_CtlError>
          ret = USBD_FAIL;
 800529a:	2303      	movs	r3, #3
 800529c:	75fb      	strb	r3, [r7, #23]
          break;
 800529e:	e002      	b.n	80052a6 <USBD_CDC_Setup+0x19e>
          break;
 80052a0:	bf00      	nop
 80052a2:	e008      	b.n	80052b6 <USBD_CDC_Setup+0x1ae>
          break;
 80052a4:	bf00      	nop
      }
      break;
 80052a6:	e006      	b.n	80052b6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80052a8:	6839      	ldr	r1, [r7, #0]
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	f001 fc87 	bl	8006bbe <USBD_CtlError>
      ret = USBD_FAIL;
 80052b0:	2303      	movs	r3, #3
 80052b2:	75fb      	strb	r3, [r7, #23]
      break;
 80052b4:	bf00      	nop
  }

  return (uint8_t)ret;
 80052b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80052b8:	4618      	mov	r0, r3
 80052ba:	3718      	adds	r7, #24
 80052bc:	46bd      	mov	sp, r7
 80052be:	bd80      	pop	{r7, pc}

080052c0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b084      	sub	sp, #16
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
 80052c8:	460b      	mov	r3, r1
 80052ca:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80052d2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	32b0      	adds	r2, #176	@ 0xb0
 80052de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d101      	bne.n	80052ea <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80052e6:	2303      	movs	r3, #3
 80052e8:	e065      	b.n	80053b6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	32b0      	adds	r2, #176	@ 0xb0
 80052f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052f8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80052fa:	78fb      	ldrb	r3, [r7, #3]
 80052fc:	f003 020f 	and.w	r2, r3, #15
 8005300:	6879      	ldr	r1, [r7, #4]
 8005302:	4613      	mov	r3, r2
 8005304:	009b      	lsls	r3, r3, #2
 8005306:	4413      	add	r3, r2
 8005308:	009b      	lsls	r3, r3, #2
 800530a:	440b      	add	r3, r1
 800530c:	3318      	adds	r3, #24
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d02f      	beq.n	8005374 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8005314:	78fb      	ldrb	r3, [r7, #3]
 8005316:	f003 020f 	and.w	r2, r3, #15
 800531a:	6879      	ldr	r1, [r7, #4]
 800531c:	4613      	mov	r3, r2
 800531e:	009b      	lsls	r3, r3, #2
 8005320:	4413      	add	r3, r2
 8005322:	009b      	lsls	r3, r3, #2
 8005324:	440b      	add	r3, r1
 8005326:	3318      	adds	r3, #24
 8005328:	681a      	ldr	r2, [r3, #0]
 800532a:	78fb      	ldrb	r3, [r7, #3]
 800532c:	f003 010f 	and.w	r1, r3, #15
 8005330:	68f8      	ldr	r0, [r7, #12]
 8005332:	460b      	mov	r3, r1
 8005334:	00db      	lsls	r3, r3, #3
 8005336:	440b      	add	r3, r1
 8005338:	009b      	lsls	r3, r3, #2
 800533a:	4403      	add	r3, r0
 800533c:	331c      	adds	r3, #28
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	fbb2 f1f3 	udiv	r1, r2, r3
 8005344:	fb01 f303 	mul.w	r3, r1, r3
 8005348:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800534a:	2b00      	cmp	r3, #0
 800534c:	d112      	bne.n	8005374 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800534e:	78fb      	ldrb	r3, [r7, #3]
 8005350:	f003 020f 	and.w	r2, r3, #15
 8005354:	6879      	ldr	r1, [r7, #4]
 8005356:	4613      	mov	r3, r2
 8005358:	009b      	lsls	r3, r3, #2
 800535a:	4413      	add	r3, r2
 800535c:	009b      	lsls	r3, r3, #2
 800535e:	440b      	add	r3, r1
 8005360:	3318      	adds	r3, #24
 8005362:	2200      	movs	r2, #0
 8005364:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005366:	78f9      	ldrb	r1, [r7, #3]
 8005368:	2300      	movs	r3, #0
 800536a:	2200      	movs	r2, #0
 800536c:	6878      	ldr	r0, [r7, #4]
 800536e:	f004 fc9a 	bl	8009ca6 <USBD_LL_Transmit>
 8005372:	e01f      	b.n	80053b4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	2200      	movs	r2, #0
 8005378:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005382:	687a      	ldr	r2, [r7, #4]
 8005384:	33b0      	adds	r3, #176	@ 0xb0
 8005386:	009b      	lsls	r3, r3, #2
 8005388:	4413      	add	r3, r2
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	691b      	ldr	r3, [r3, #16]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d010      	beq.n	80053b4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005398:	687a      	ldr	r2, [r7, #4]
 800539a:	33b0      	adds	r3, #176	@ 0xb0
 800539c:	009b      	lsls	r3, r3, #2
 800539e:	4413      	add	r3, r2
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	691b      	ldr	r3, [r3, #16]
 80053a4:	68ba      	ldr	r2, [r7, #8]
 80053a6:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 80053aa:	68ba      	ldr	r2, [r7, #8]
 80053ac:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 80053b0:	78fa      	ldrb	r2, [r7, #3]
 80053b2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80053b4:	2300      	movs	r3, #0
}
 80053b6:	4618      	mov	r0, r3
 80053b8:	3710      	adds	r7, #16
 80053ba:	46bd      	mov	sp, r7
 80053bc:	bd80      	pop	{r7, pc}

080053be <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80053be:	b580      	push	{r7, lr}
 80053c0:	b084      	sub	sp, #16
 80053c2:	af00      	add	r7, sp, #0
 80053c4:	6078      	str	r0, [r7, #4]
 80053c6:	460b      	mov	r3, r1
 80053c8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	32b0      	adds	r2, #176	@ 0xb0
 80053d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053d8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	32b0      	adds	r2, #176	@ 0xb0
 80053e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d101      	bne.n	80053f0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80053ec:	2303      	movs	r3, #3
 80053ee:	e01a      	b.n	8005426 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80053f0:	78fb      	ldrb	r3, [r7, #3]
 80053f2:	4619      	mov	r1, r3
 80053f4:	6878      	ldr	r0, [r7, #4]
 80053f6:	f004 fc98 	bl	8009d2a <USBD_LL_GetRxDataSize>
 80053fa:	4602      	mov	r2, r0
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005408:	687a      	ldr	r2, [r7, #4]
 800540a:	33b0      	adds	r3, #176	@ 0xb0
 800540c:	009b      	lsls	r3, r3, #2
 800540e:	4413      	add	r3, r2
 8005410:	685b      	ldr	r3, [r3, #4]
 8005412:	68db      	ldr	r3, [r3, #12]
 8005414:	68fa      	ldr	r2, [r7, #12]
 8005416:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800541a:	68fa      	ldr	r2, [r7, #12]
 800541c:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8005420:	4611      	mov	r1, r2
 8005422:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005424:	2300      	movs	r3, #0
}
 8005426:	4618      	mov	r0, r3
 8005428:	3710      	adds	r7, #16
 800542a:	46bd      	mov	sp, r7
 800542c:	bd80      	pop	{r7, pc}

0800542e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800542e:	b580      	push	{r7, lr}
 8005430:	b084      	sub	sp, #16
 8005432:	af00      	add	r7, sp, #0
 8005434:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	32b0      	adds	r2, #176	@ 0xb0
 8005440:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005444:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d101      	bne.n	8005450 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800544c:	2303      	movs	r3, #3
 800544e:	e024      	b.n	800549a <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005456:	687a      	ldr	r2, [r7, #4]
 8005458:	33b0      	adds	r3, #176	@ 0xb0
 800545a:	009b      	lsls	r3, r3, #2
 800545c:	4413      	add	r3, r2
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d019      	beq.n	8005498 <USBD_CDC_EP0_RxReady+0x6a>
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800546a:	2bff      	cmp	r3, #255	@ 0xff
 800546c:	d014      	beq.n	8005498 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005474:	687a      	ldr	r2, [r7, #4]
 8005476:	33b0      	adds	r3, #176	@ 0xb0
 8005478:	009b      	lsls	r3, r3, #2
 800547a:	4413      	add	r3, r2
 800547c:	685b      	ldr	r3, [r3, #4]
 800547e:	689b      	ldr	r3, [r3, #8]
 8005480:	68fa      	ldr	r2, [r7, #12]
 8005482:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8005486:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8005488:	68fa      	ldr	r2, [r7, #12]
 800548a:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800548e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	22ff      	movs	r2, #255	@ 0xff
 8005494:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8005498:	2300      	movs	r3, #0
}
 800549a:	4618      	mov	r0, r3
 800549c:	3710      	adds	r7, #16
 800549e:	46bd      	mov	sp, r7
 80054a0:	bd80      	pop	{r7, pc}
	...

080054a4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b086      	sub	sp, #24
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80054ac:	2182      	movs	r1, #130	@ 0x82
 80054ae:	4818      	ldr	r0, [pc, #96]	@ (8005510 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80054b0:	f000 fd4f 	bl	8005f52 <USBD_GetEpDesc>
 80054b4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80054b6:	2101      	movs	r1, #1
 80054b8:	4815      	ldr	r0, [pc, #84]	@ (8005510 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80054ba:	f000 fd4a 	bl	8005f52 <USBD_GetEpDesc>
 80054be:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80054c0:	2181      	movs	r1, #129	@ 0x81
 80054c2:	4813      	ldr	r0, [pc, #76]	@ (8005510 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80054c4:	f000 fd45 	bl	8005f52 <USBD_GetEpDesc>
 80054c8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80054ca:	697b      	ldr	r3, [r7, #20]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d002      	beq.n	80054d6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80054d0:	697b      	ldr	r3, [r7, #20]
 80054d2:	2210      	movs	r2, #16
 80054d4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80054d6:	693b      	ldr	r3, [r7, #16]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d006      	beq.n	80054ea <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	2200      	movs	r2, #0
 80054e0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80054e4:	711a      	strb	r2, [r3, #4]
 80054e6:	2200      	movs	r2, #0
 80054e8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d006      	beq.n	80054fe <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	2200      	movs	r2, #0
 80054f4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80054f8:	711a      	strb	r2, [r3, #4]
 80054fa:	2200      	movs	r2, #0
 80054fc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2243      	movs	r2, #67	@ 0x43
 8005502:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005504:	4b02      	ldr	r3, [pc, #8]	@ (8005510 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8005506:	4618      	mov	r0, r3
 8005508:	3718      	adds	r7, #24
 800550a:	46bd      	mov	sp, r7
 800550c:	bd80      	pop	{r7, pc}
 800550e:	bf00      	nop
 8005510:	20000050 	.word	0x20000050

08005514 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b086      	sub	sp, #24
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800551c:	2182      	movs	r1, #130	@ 0x82
 800551e:	4818      	ldr	r0, [pc, #96]	@ (8005580 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005520:	f000 fd17 	bl	8005f52 <USBD_GetEpDesc>
 8005524:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005526:	2101      	movs	r1, #1
 8005528:	4815      	ldr	r0, [pc, #84]	@ (8005580 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800552a:	f000 fd12 	bl	8005f52 <USBD_GetEpDesc>
 800552e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005530:	2181      	movs	r1, #129	@ 0x81
 8005532:	4813      	ldr	r0, [pc, #76]	@ (8005580 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005534:	f000 fd0d 	bl	8005f52 <USBD_GetEpDesc>
 8005538:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d002      	beq.n	8005546 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8005540:	697b      	ldr	r3, [r7, #20]
 8005542:	2210      	movs	r2, #16
 8005544:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005546:	693b      	ldr	r3, [r7, #16]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d006      	beq.n	800555a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	2200      	movs	r2, #0
 8005550:	711a      	strb	r2, [r3, #4]
 8005552:	2200      	movs	r2, #0
 8005554:	f042 0202 	orr.w	r2, r2, #2
 8005558:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d006      	beq.n	800556e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	2200      	movs	r2, #0
 8005564:	711a      	strb	r2, [r3, #4]
 8005566:	2200      	movs	r2, #0
 8005568:	f042 0202 	orr.w	r2, r2, #2
 800556c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2243      	movs	r2, #67	@ 0x43
 8005572:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005574:	4b02      	ldr	r3, [pc, #8]	@ (8005580 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8005576:	4618      	mov	r0, r3
 8005578:	3718      	adds	r7, #24
 800557a:	46bd      	mov	sp, r7
 800557c:	bd80      	pop	{r7, pc}
 800557e:	bf00      	nop
 8005580:	20000050 	.word	0x20000050

08005584 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b086      	sub	sp, #24
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800558c:	2182      	movs	r1, #130	@ 0x82
 800558e:	4818      	ldr	r0, [pc, #96]	@ (80055f0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005590:	f000 fcdf 	bl	8005f52 <USBD_GetEpDesc>
 8005594:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005596:	2101      	movs	r1, #1
 8005598:	4815      	ldr	r0, [pc, #84]	@ (80055f0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800559a:	f000 fcda 	bl	8005f52 <USBD_GetEpDesc>
 800559e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80055a0:	2181      	movs	r1, #129	@ 0x81
 80055a2:	4813      	ldr	r0, [pc, #76]	@ (80055f0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80055a4:	f000 fcd5 	bl	8005f52 <USBD_GetEpDesc>
 80055a8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d002      	beq.n	80055b6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80055b0:	697b      	ldr	r3, [r7, #20]
 80055b2:	2210      	movs	r2, #16
 80055b4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80055b6:	693b      	ldr	r3, [r7, #16]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d006      	beq.n	80055ca <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80055bc:	693b      	ldr	r3, [r7, #16]
 80055be:	2200      	movs	r2, #0
 80055c0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80055c4:	711a      	strb	r2, [r3, #4]
 80055c6:	2200      	movs	r2, #0
 80055c8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d006      	beq.n	80055de <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	2200      	movs	r2, #0
 80055d4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80055d8:	711a      	strb	r2, [r3, #4]
 80055da:	2200      	movs	r2, #0
 80055dc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2243      	movs	r2, #67	@ 0x43
 80055e2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80055e4:	4b02      	ldr	r3, [pc, #8]	@ (80055f0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80055e6:	4618      	mov	r0, r3
 80055e8:	3718      	adds	r7, #24
 80055ea:	46bd      	mov	sp, r7
 80055ec:	bd80      	pop	{r7, pc}
 80055ee:	bf00      	nop
 80055f0:	20000050 	.word	0x20000050

080055f4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80055f4:	b480      	push	{r7}
 80055f6:	b083      	sub	sp, #12
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	220a      	movs	r2, #10
 8005600:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005602:	4b03      	ldr	r3, [pc, #12]	@ (8005610 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005604:	4618      	mov	r0, r3
 8005606:	370c      	adds	r7, #12
 8005608:	46bd      	mov	sp, r7
 800560a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560e:	4770      	bx	lr
 8005610:	2000000c 	.word	0x2000000c

08005614 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005614:	b480      	push	{r7}
 8005616:	b083      	sub	sp, #12
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
 800561c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d101      	bne.n	8005628 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005624:	2303      	movs	r3, #3
 8005626:	e009      	b.n	800563c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800562e:	687a      	ldr	r2, [r7, #4]
 8005630:	33b0      	adds	r3, #176	@ 0xb0
 8005632:	009b      	lsls	r3, r3, #2
 8005634:	4413      	add	r3, r2
 8005636:	683a      	ldr	r2, [r7, #0]
 8005638:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800563a:	2300      	movs	r3, #0
}
 800563c:	4618      	mov	r0, r3
 800563e:	370c      	adds	r7, #12
 8005640:	46bd      	mov	sp, r7
 8005642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005646:	4770      	bx	lr

08005648 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005648:	b480      	push	{r7}
 800564a:	b087      	sub	sp, #28
 800564c:	af00      	add	r7, sp, #0
 800564e:	60f8      	str	r0, [r7, #12]
 8005650:	60b9      	str	r1, [r7, #8]
 8005652:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	32b0      	adds	r2, #176	@ 0xb0
 800565e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005662:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8005664:	697b      	ldr	r3, [r7, #20]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d101      	bne.n	800566e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800566a:	2303      	movs	r3, #3
 800566c:	e008      	b.n	8005680 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800566e:	697b      	ldr	r3, [r7, #20]
 8005670:	68ba      	ldr	r2, [r7, #8]
 8005672:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8005676:	697b      	ldr	r3, [r7, #20]
 8005678:	687a      	ldr	r2, [r7, #4]
 800567a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800567e:	2300      	movs	r3, #0
}
 8005680:	4618      	mov	r0, r3
 8005682:	371c      	adds	r7, #28
 8005684:	46bd      	mov	sp, r7
 8005686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568a:	4770      	bx	lr

0800568c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800568c:	b480      	push	{r7}
 800568e:	b085      	sub	sp, #20
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
 8005694:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	32b0      	adds	r2, #176	@ 0xb0
 80056a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056a4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d101      	bne.n	80056b0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80056ac:	2303      	movs	r3, #3
 80056ae:	e004      	b.n	80056ba <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	683a      	ldr	r2, [r7, #0]
 80056b4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80056b8:	2300      	movs	r3, #0
}
 80056ba:	4618      	mov	r0, r3
 80056bc:	3714      	adds	r7, #20
 80056be:	46bd      	mov	sp, r7
 80056c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c4:	4770      	bx	lr
	...

080056c8 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b084      	sub	sp, #16
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	32b0      	adds	r2, #176	@ 0xb0
 80056da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056de:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 80056e0:	2301      	movs	r3, #1
 80056e2:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d101      	bne.n	80056ee <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80056ea:	2303      	movs	r3, #3
 80056ec:	e025      	b.n	800573a <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d11f      	bne.n	8005738 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	2201      	movs	r2, #1
 80056fc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8005700:	4b10      	ldr	r3, [pc, #64]	@ (8005744 <USBD_CDC_TransmitPacket+0x7c>)
 8005702:	781b      	ldrb	r3, [r3, #0]
 8005704:	f003 020f 	and.w	r2, r3, #15
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800570e:	6878      	ldr	r0, [r7, #4]
 8005710:	4613      	mov	r3, r2
 8005712:	009b      	lsls	r3, r3, #2
 8005714:	4413      	add	r3, r2
 8005716:	009b      	lsls	r3, r3, #2
 8005718:	4403      	add	r3, r0
 800571a:	3318      	adds	r3, #24
 800571c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800571e:	4b09      	ldr	r3, [pc, #36]	@ (8005744 <USBD_CDC_TransmitPacket+0x7c>)
 8005720:	7819      	ldrb	r1, [r3, #0]
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800572e:	6878      	ldr	r0, [r7, #4]
 8005730:	f004 fab9 	bl	8009ca6 <USBD_LL_Transmit>

    ret = USBD_OK;
 8005734:	2300      	movs	r3, #0
 8005736:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8005738:	7bfb      	ldrb	r3, [r7, #15]
}
 800573a:	4618      	mov	r0, r3
 800573c:	3710      	adds	r7, #16
 800573e:	46bd      	mov	sp, r7
 8005740:	bd80      	pop	{r7, pc}
 8005742:	bf00      	nop
 8005744:	20000093 	.word	0x20000093

08005748 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b084      	sub	sp, #16
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	32b0      	adds	r2, #176	@ 0xb0
 800575a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800575e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	32b0      	adds	r2, #176	@ 0xb0
 800576a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d101      	bne.n	8005776 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8005772:	2303      	movs	r3, #3
 8005774:	e018      	b.n	80057a8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	7c1b      	ldrb	r3, [r3, #16]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d10a      	bne.n	8005794 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800577e:	4b0c      	ldr	r3, [pc, #48]	@ (80057b0 <USBD_CDC_ReceivePacket+0x68>)
 8005780:	7819      	ldrb	r1, [r3, #0]
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005788:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800578c:	6878      	ldr	r0, [r7, #4]
 800578e:	f004 faab 	bl	8009ce8 <USBD_LL_PrepareReceive>
 8005792:	e008      	b.n	80057a6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005794:	4b06      	ldr	r3, [pc, #24]	@ (80057b0 <USBD_CDC_ReceivePacket+0x68>)
 8005796:	7819      	ldrb	r1, [r3, #0]
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800579e:	2340      	movs	r3, #64	@ 0x40
 80057a0:	6878      	ldr	r0, [r7, #4]
 80057a2:	f004 faa1 	bl	8009ce8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80057a6:	2300      	movs	r3, #0
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	3710      	adds	r7, #16
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bd80      	pop	{r7, pc}
 80057b0:	20000094 	.word	0x20000094

080057b4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b086      	sub	sp, #24
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	60f8      	str	r0, [r7, #12]
 80057bc:	60b9      	str	r1, [r7, #8]
 80057be:	4613      	mov	r3, r2
 80057c0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d101      	bne.n	80057cc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80057c8:	2303      	movs	r3, #3
 80057ca:	e01f      	b.n	800580c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	2200      	movs	r2, #0
 80057d0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	2200      	movs	r2, #0
 80057d8:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	2200      	movs	r2, #0
 80057e0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d003      	beq.n	80057f2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	68ba      	ldr	r2, [r7, #8]
 80057ee:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	2201      	movs	r2, #1
 80057f6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	79fa      	ldrb	r2, [r7, #7]
 80057fe:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005800:	68f8      	ldr	r0, [r7, #12]
 8005802:	f004 f91b 	bl	8009a3c <USBD_LL_Init>
 8005806:	4603      	mov	r3, r0
 8005808:	75fb      	strb	r3, [r7, #23]

  return ret;
 800580a:	7dfb      	ldrb	r3, [r7, #23]
}
 800580c:	4618      	mov	r0, r3
 800580e:	3718      	adds	r7, #24
 8005810:	46bd      	mov	sp, r7
 8005812:	bd80      	pop	{r7, pc}

08005814 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b084      	sub	sp, #16
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
 800581c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800581e:	2300      	movs	r3, #0
 8005820:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d101      	bne.n	800582c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005828:	2303      	movs	r3, #3
 800582a:	e025      	b.n	8005878 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	683a      	ldr	r2, [r7, #0]
 8005830:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	32ae      	adds	r2, #174	@ 0xae
 800583e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005842:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005844:	2b00      	cmp	r3, #0
 8005846:	d00f      	beq.n	8005868 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	32ae      	adds	r2, #174	@ 0xae
 8005852:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005856:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005858:	f107 020e 	add.w	r2, r7, #14
 800585c:	4610      	mov	r0, r2
 800585e:	4798      	blx	r3
 8005860:	4602      	mov	r2, r0
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800586e:	1c5a      	adds	r2, r3, #1
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8005876:	2300      	movs	r3, #0
}
 8005878:	4618      	mov	r0, r3
 800587a:	3710      	adds	r7, #16
 800587c:	46bd      	mov	sp, r7
 800587e:	bd80      	pop	{r7, pc}

08005880 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b082      	sub	sp, #8
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005888:	6878      	ldr	r0, [r7, #4]
 800588a:	f004 f923 	bl	8009ad4 <USBD_LL_Start>
 800588e:	4603      	mov	r3, r0
}
 8005890:	4618      	mov	r0, r3
 8005892:	3708      	adds	r7, #8
 8005894:	46bd      	mov	sp, r7
 8005896:	bd80      	pop	{r7, pc}

08005898 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8005898:	b480      	push	{r7}
 800589a:	b083      	sub	sp, #12
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80058a0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80058a2:	4618      	mov	r0, r3
 80058a4:	370c      	adds	r7, #12
 80058a6:	46bd      	mov	sp, r7
 80058a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ac:	4770      	bx	lr

080058ae <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80058ae:	b580      	push	{r7, lr}
 80058b0:	b084      	sub	sp, #16
 80058b2:	af00      	add	r7, sp, #0
 80058b4:	6078      	str	r0, [r7, #4]
 80058b6:	460b      	mov	r3, r1
 80058b8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80058ba:	2300      	movs	r3, #0
 80058bc:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d009      	beq.n	80058dc <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	78fa      	ldrb	r2, [r7, #3]
 80058d2:	4611      	mov	r1, r2
 80058d4:	6878      	ldr	r0, [r7, #4]
 80058d6:	4798      	blx	r3
 80058d8:	4603      	mov	r3, r0
 80058da:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80058dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80058de:	4618      	mov	r0, r3
 80058e0:	3710      	adds	r7, #16
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bd80      	pop	{r7, pc}

080058e6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80058e6:	b580      	push	{r7, lr}
 80058e8:	b084      	sub	sp, #16
 80058ea:	af00      	add	r7, sp, #0
 80058ec:	6078      	str	r0, [r7, #4]
 80058ee:	460b      	mov	r3, r1
 80058f0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80058f2:	2300      	movs	r3, #0
 80058f4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80058fc:	685b      	ldr	r3, [r3, #4]
 80058fe:	78fa      	ldrb	r2, [r7, #3]
 8005900:	4611      	mov	r1, r2
 8005902:	6878      	ldr	r0, [r7, #4]
 8005904:	4798      	blx	r3
 8005906:	4603      	mov	r3, r0
 8005908:	2b00      	cmp	r3, #0
 800590a:	d001      	beq.n	8005910 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800590c:	2303      	movs	r3, #3
 800590e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005910:	7bfb      	ldrb	r3, [r7, #15]
}
 8005912:	4618      	mov	r0, r3
 8005914:	3710      	adds	r7, #16
 8005916:	46bd      	mov	sp, r7
 8005918:	bd80      	pop	{r7, pc}

0800591a <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800591a:	b580      	push	{r7, lr}
 800591c:	b084      	sub	sp, #16
 800591e:	af00      	add	r7, sp, #0
 8005920:	6078      	str	r0, [r7, #4]
 8005922:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800592a:	6839      	ldr	r1, [r7, #0]
 800592c:	4618      	mov	r0, r3
 800592e:	f001 f90c 	bl	8006b4a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2201      	movs	r2, #1
 8005936:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8005940:	461a      	mov	r2, r3
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800594e:	f003 031f 	and.w	r3, r3, #31
 8005952:	2b02      	cmp	r3, #2
 8005954:	d01a      	beq.n	800598c <USBD_LL_SetupStage+0x72>
 8005956:	2b02      	cmp	r3, #2
 8005958:	d822      	bhi.n	80059a0 <USBD_LL_SetupStage+0x86>
 800595a:	2b00      	cmp	r3, #0
 800595c:	d002      	beq.n	8005964 <USBD_LL_SetupStage+0x4a>
 800595e:	2b01      	cmp	r3, #1
 8005960:	d00a      	beq.n	8005978 <USBD_LL_SetupStage+0x5e>
 8005962:	e01d      	b.n	80059a0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800596a:	4619      	mov	r1, r3
 800596c:	6878      	ldr	r0, [r7, #4]
 800596e:	f000 fb63 	bl	8006038 <USBD_StdDevReq>
 8005972:	4603      	mov	r3, r0
 8005974:	73fb      	strb	r3, [r7, #15]
      break;
 8005976:	e020      	b.n	80059ba <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800597e:	4619      	mov	r1, r3
 8005980:	6878      	ldr	r0, [r7, #4]
 8005982:	f000 fbcb 	bl	800611c <USBD_StdItfReq>
 8005986:	4603      	mov	r3, r0
 8005988:	73fb      	strb	r3, [r7, #15]
      break;
 800598a:	e016      	b.n	80059ba <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005992:	4619      	mov	r1, r3
 8005994:	6878      	ldr	r0, [r7, #4]
 8005996:	f000 fc2d 	bl	80061f4 <USBD_StdEPReq>
 800599a:	4603      	mov	r3, r0
 800599c:	73fb      	strb	r3, [r7, #15]
      break;
 800599e:	e00c      	b.n	80059ba <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80059a6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80059aa:	b2db      	uxtb	r3, r3
 80059ac:	4619      	mov	r1, r3
 80059ae:	6878      	ldr	r0, [r7, #4]
 80059b0:	f004 f8f0 	bl	8009b94 <USBD_LL_StallEP>
 80059b4:	4603      	mov	r3, r0
 80059b6:	73fb      	strb	r3, [r7, #15]
      break;
 80059b8:	bf00      	nop
  }

  return ret;
 80059ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80059bc:	4618      	mov	r0, r3
 80059be:	3710      	adds	r7, #16
 80059c0:	46bd      	mov	sp, r7
 80059c2:	bd80      	pop	{r7, pc}

080059c4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b086      	sub	sp, #24
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	60f8      	str	r0, [r7, #12]
 80059cc:	460b      	mov	r3, r1
 80059ce:	607a      	str	r2, [r7, #4]
 80059d0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80059d2:	2300      	movs	r3, #0
 80059d4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80059d6:	7afb      	ldrb	r3, [r7, #11]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d16e      	bne.n	8005aba <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80059e2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80059ea:	2b03      	cmp	r3, #3
 80059ec:	f040 8098 	bne.w	8005b20 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80059f0:	693b      	ldr	r3, [r7, #16]
 80059f2:	689a      	ldr	r2, [r3, #8]
 80059f4:	693b      	ldr	r3, [r7, #16]
 80059f6:	68db      	ldr	r3, [r3, #12]
 80059f8:	429a      	cmp	r2, r3
 80059fa:	d913      	bls.n	8005a24 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80059fc:	693b      	ldr	r3, [r7, #16]
 80059fe:	689a      	ldr	r2, [r3, #8]
 8005a00:	693b      	ldr	r3, [r7, #16]
 8005a02:	68db      	ldr	r3, [r3, #12]
 8005a04:	1ad2      	subs	r2, r2, r3
 8005a06:	693b      	ldr	r3, [r7, #16]
 8005a08:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005a0a:	693b      	ldr	r3, [r7, #16]
 8005a0c:	68da      	ldr	r2, [r3, #12]
 8005a0e:	693b      	ldr	r3, [r7, #16]
 8005a10:	689b      	ldr	r3, [r3, #8]
 8005a12:	4293      	cmp	r3, r2
 8005a14:	bf28      	it	cs
 8005a16:	4613      	movcs	r3, r2
 8005a18:	461a      	mov	r2, r3
 8005a1a:	6879      	ldr	r1, [r7, #4]
 8005a1c:	68f8      	ldr	r0, [r7, #12]
 8005a1e:	f001 f994 	bl	8006d4a <USBD_CtlContinueRx>
 8005a22:	e07d      	b.n	8005b20 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8005a2a:	f003 031f 	and.w	r3, r3, #31
 8005a2e:	2b02      	cmp	r3, #2
 8005a30:	d014      	beq.n	8005a5c <USBD_LL_DataOutStage+0x98>
 8005a32:	2b02      	cmp	r3, #2
 8005a34:	d81d      	bhi.n	8005a72 <USBD_LL_DataOutStage+0xae>
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d002      	beq.n	8005a40 <USBD_LL_DataOutStage+0x7c>
 8005a3a:	2b01      	cmp	r3, #1
 8005a3c:	d003      	beq.n	8005a46 <USBD_LL_DataOutStage+0x82>
 8005a3e:	e018      	b.n	8005a72 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8005a40:	2300      	movs	r3, #0
 8005a42:	75bb      	strb	r3, [r7, #22]
            break;
 8005a44:	e018      	b.n	8005a78 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8005a4c:	b2db      	uxtb	r3, r3
 8005a4e:	4619      	mov	r1, r3
 8005a50:	68f8      	ldr	r0, [r7, #12]
 8005a52:	f000 fa64 	bl	8005f1e <USBD_CoreFindIF>
 8005a56:	4603      	mov	r3, r0
 8005a58:	75bb      	strb	r3, [r7, #22]
            break;
 8005a5a:	e00d      	b.n	8005a78 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8005a62:	b2db      	uxtb	r3, r3
 8005a64:	4619      	mov	r1, r3
 8005a66:	68f8      	ldr	r0, [r7, #12]
 8005a68:	f000 fa66 	bl	8005f38 <USBD_CoreFindEP>
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	75bb      	strb	r3, [r7, #22]
            break;
 8005a70:	e002      	b.n	8005a78 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8005a72:	2300      	movs	r3, #0
 8005a74:	75bb      	strb	r3, [r7, #22]
            break;
 8005a76:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8005a78:	7dbb      	ldrb	r3, [r7, #22]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d119      	bne.n	8005ab2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005a84:	b2db      	uxtb	r3, r3
 8005a86:	2b03      	cmp	r3, #3
 8005a88:	d113      	bne.n	8005ab2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8005a8a:	7dba      	ldrb	r2, [r7, #22]
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	32ae      	adds	r2, #174	@ 0xae
 8005a90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a94:	691b      	ldr	r3, [r3, #16]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d00b      	beq.n	8005ab2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8005a9a:	7dba      	ldrb	r2, [r7, #22]
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8005aa2:	7dba      	ldrb	r2, [r7, #22]
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	32ae      	adds	r2, #174	@ 0xae
 8005aa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005aac:	691b      	ldr	r3, [r3, #16]
 8005aae:	68f8      	ldr	r0, [r7, #12]
 8005ab0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005ab2:	68f8      	ldr	r0, [r7, #12]
 8005ab4:	f001 f95a 	bl	8006d6c <USBD_CtlSendStatus>
 8005ab8:	e032      	b.n	8005b20 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8005aba:	7afb      	ldrb	r3, [r7, #11]
 8005abc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005ac0:	b2db      	uxtb	r3, r3
 8005ac2:	4619      	mov	r1, r3
 8005ac4:	68f8      	ldr	r0, [r7, #12]
 8005ac6:	f000 fa37 	bl	8005f38 <USBD_CoreFindEP>
 8005aca:	4603      	mov	r3, r0
 8005acc:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005ace:	7dbb      	ldrb	r3, [r7, #22]
 8005ad0:	2bff      	cmp	r3, #255	@ 0xff
 8005ad2:	d025      	beq.n	8005b20 <USBD_LL_DataOutStage+0x15c>
 8005ad4:	7dbb      	ldrb	r3, [r7, #22]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d122      	bne.n	8005b20 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005ae0:	b2db      	uxtb	r3, r3
 8005ae2:	2b03      	cmp	r3, #3
 8005ae4:	d117      	bne.n	8005b16 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8005ae6:	7dba      	ldrb	r2, [r7, #22]
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	32ae      	adds	r2, #174	@ 0xae
 8005aec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005af0:	699b      	ldr	r3, [r3, #24]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d00f      	beq.n	8005b16 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8005af6:	7dba      	ldrb	r2, [r7, #22]
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8005afe:	7dba      	ldrb	r2, [r7, #22]
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	32ae      	adds	r2, #174	@ 0xae
 8005b04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b08:	699b      	ldr	r3, [r3, #24]
 8005b0a:	7afa      	ldrb	r2, [r7, #11]
 8005b0c:	4611      	mov	r1, r2
 8005b0e:	68f8      	ldr	r0, [r7, #12]
 8005b10:	4798      	blx	r3
 8005b12:	4603      	mov	r3, r0
 8005b14:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8005b16:	7dfb      	ldrb	r3, [r7, #23]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d001      	beq.n	8005b20 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8005b1c:	7dfb      	ldrb	r3, [r7, #23]
 8005b1e:	e000      	b.n	8005b22 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8005b20:	2300      	movs	r3, #0
}
 8005b22:	4618      	mov	r0, r3
 8005b24:	3718      	adds	r7, #24
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bd80      	pop	{r7, pc}

08005b2a <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005b2a:	b580      	push	{r7, lr}
 8005b2c:	b086      	sub	sp, #24
 8005b2e:	af00      	add	r7, sp, #0
 8005b30:	60f8      	str	r0, [r7, #12]
 8005b32:	460b      	mov	r3, r1
 8005b34:	607a      	str	r2, [r7, #4]
 8005b36:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8005b38:	7afb      	ldrb	r3, [r7, #11]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d16f      	bne.n	8005c1e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	3314      	adds	r3, #20
 8005b42:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8005b4a:	2b02      	cmp	r3, #2
 8005b4c:	d15a      	bne.n	8005c04 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8005b4e:	693b      	ldr	r3, [r7, #16]
 8005b50:	689a      	ldr	r2, [r3, #8]
 8005b52:	693b      	ldr	r3, [r7, #16]
 8005b54:	68db      	ldr	r3, [r3, #12]
 8005b56:	429a      	cmp	r2, r3
 8005b58:	d914      	bls.n	8005b84 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005b5a:	693b      	ldr	r3, [r7, #16]
 8005b5c:	689a      	ldr	r2, [r3, #8]
 8005b5e:	693b      	ldr	r3, [r7, #16]
 8005b60:	68db      	ldr	r3, [r3, #12]
 8005b62:	1ad2      	subs	r2, r2, r3
 8005b64:	693b      	ldr	r3, [r7, #16]
 8005b66:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005b68:	693b      	ldr	r3, [r7, #16]
 8005b6a:	689b      	ldr	r3, [r3, #8]
 8005b6c:	461a      	mov	r2, r3
 8005b6e:	6879      	ldr	r1, [r7, #4]
 8005b70:	68f8      	ldr	r0, [r7, #12]
 8005b72:	f001 f8bc 	bl	8006cee <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005b76:	2300      	movs	r3, #0
 8005b78:	2200      	movs	r2, #0
 8005b7a:	2100      	movs	r1, #0
 8005b7c:	68f8      	ldr	r0, [r7, #12]
 8005b7e:	f004 f8b3 	bl	8009ce8 <USBD_LL_PrepareReceive>
 8005b82:	e03f      	b.n	8005c04 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005b84:	693b      	ldr	r3, [r7, #16]
 8005b86:	68da      	ldr	r2, [r3, #12]
 8005b88:	693b      	ldr	r3, [r7, #16]
 8005b8a:	689b      	ldr	r3, [r3, #8]
 8005b8c:	429a      	cmp	r2, r3
 8005b8e:	d11c      	bne.n	8005bca <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005b90:	693b      	ldr	r3, [r7, #16]
 8005b92:	685a      	ldr	r2, [r3, #4]
 8005b94:	693b      	ldr	r3, [r7, #16]
 8005b96:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005b98:	429a      	cmp	r2, r3
 8005b9a:	d316      	bcc.n	8005bca <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005b9c:	693b      	ldr	r3, [r7, #16]
 8005b9e:	685a      	ldr	r2, [r3, #4]
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005ba6:	429a      	cmp	r2, r3
 8005ba8:	d20f      	bcs.n	8005bca <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005baa:	2200      	movs	r2, #0
 8005bac:	2100      	movs	r1, #0
 8005bae:	68f8      	ldr	r0, [r7, #12]
 8005bb0:	f001 f89d 	bl	8006cee <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	2100      	movs	r1, #0
 8005bc2:	68f8      	ldr	r0, [r7, #12]
 8005bc4:	f004 f890 	bl	8009ce8 <USBD_LL_PrepareReceive>
 8005bc8:	e01c      	b.n	8005c04 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005bd0:	b2db      	uxtb	r3, r3
 8005bd2:	2b03      	cmp	r3, #3
 8005bd4:	d10f      	bne.n	8005bf6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005bdc:	68db      	ldr	r3, [r3, #12]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d009      	beq.n	8005bf6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	2200      	movs	r2, #0
 8005be6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005bf0:	68db      	ldr	r3, [r3, #12]
 8005bf2:	68f8      	ldr	r0, [r7, #12]
 8005bf4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005bf6:	2180      	movs	r1, #128	@ 0x80
 8005bf8:	68f8      	ldr	r0, [r7, #12]
 8005bfa:	f003 ffcb 	bl	8009b94 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005bfe:	68f8      	ldr	r0, [r7, #12]
 8005c00:	f001 f8c7 	bl	8006d92 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d03a      	beq.n	8005c84 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8005c0e:	68f8      	ldr	r0, [r7, #12]
 8005c10:	f7ff fe42 	bl	8005898 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	2200      	movs	r2, #0
 8005c18:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8005c1c:	e032      	b.n	8005c84 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8005c1e:	7afb      	ldrb	r3, [r7, #11]
 8005c20:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005c24:	b2db      	uxtb	r3, r3
 8005c26:	4619      	mov	r1, r3
 8005c28:	68f8      	ldr	r0, [r7, #12]
 8005c2a:	f000 f985 	bl	8005f38 <USBD_CoreFindEP>
 8005c2e:	4603      	mov	r3, r0
 8005c30:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005c32:	7dfb      	ldrb	r3, [r7, #23]
 8005c34:	2bff      	cmp	r3, #255	@ 0xff
 8005c36:	d025      	beq.n	8005c84 <USBD_LL_DataInStage+0x15a>
 8005c38:	7dfb      	ldrb	r3, [r7, #23]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d122      	bne.n	8005c84 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005c44:	b2db      	uxtb	r3, r3
 8005c46:	2b03      	cmp	r3, #3
 8005c48:	d11c      	bne.n	8005c84 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8005c4a:	7dfa      	ldrb	r2, [r7, #23]
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	32ae      	adds	r2, #174	@ 0xae
 8005c50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c54:	695b      	ldr	r3, [r3, #20]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d014      	beq.n	8005c84 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8005c5a:	7dfa      	ldrb	r2, [r7, #23]
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8005c62:	7dfa      	ldrb	r2, [r7, #23]
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	32ae      	adds	r2, #174	@ 0xae
 8005c68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c6c:	695b      	ldr	r3, [r3, #20]
 8005c6e:	7afa      	ldrb	r2, [r7, #11]
 8005c70:	4611      	mov	r1, r2
 8005c72:	68f8      	ldr	r0, [r7, #12]
 8005c74:	4798      	blx	r3
 8005c76:	4603      	mov	r3, r0
 8005c78:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8005c7a:	7dbb      	ldrb	r3, [r7, #22]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d001      	beq.n	8005c84 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8005c80:	7dbb      	ldrb	r3, [r7, #22]
 8005c82:	e000      	b.n	8005c86 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8005c84:	2300      	movs	r3, #0
}
 8005c86:	4618      	mov	r0, r3
 8005c88:	3718      	adds	r7, #24
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	bd80      	pop	{r7, pc}

08005c8e <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005c8e:	b580      	push	{r7, lr}
 8005c90:	b084      	sub	sp, #16
 8005c92:	af00      	add	r7, sp, #0
 8005c94:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8005c96:	2300      	movs	r3, #0
 8005c98:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2201      	movs	r2, #1
 8005c9e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2200      	movs	r2, #0
 8005cae:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d014      	beq.n	8005cf4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005cd0:	685b      	ldr	r3, [r3, #4]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d00e      	beq.n	8005cf4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005cdc:	685b      	ldr	r3, [r3, #4]
 8005cde:	687a      	ldr	r2, [r7, #4]
 8005ce0:	6852      	ldr	r2, [r2, #4]
 8005ce2:	b2d2      	uxtb	r2, r2
 8005ce4:	4611      	mov	r1, r2
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	4798      	blx	r3
 8005cea:	4603      	mov	r3, r0
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d001      	beq.n	8005cf4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8005cf0:	2303      	movs	r3, #3
 8005cf2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005cf4:	2340      	movs	r3, #64	@ 0x40
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	2100      	movs	r1, #0
 8005cfa:	6878      	ldr	r0, [r7, #4]
 8005cfc:	f003 ff05 	bl	8009b0a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2201      	movs	r2, #1
 8005d04:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2240      	movs	r2, #64	@ 0x40
 8005d0c:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005d10:	2340      	movs	r3, #64	@ 0x40
 8005d12:	2200      	movs	r2, #0
 8005d14:	2180      	movs	r1, #128	@ 0x80
 8005d16:	6878      	ldr	r0, [r7, #4]
 8005d18:	f003 fef7 	bl	8009b0a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2201      	movs	r2, #1
 8005d20:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2240      	movs	r2, #64	@ 0x40
 8005d26:	621a      	str	r2, [r3, #32]

  return ret;
 8005d28:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	3710      	adds	r7, #16
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bd80      	pop	{r7, pc}

08005d32 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005d32:	b480      	push	{r7}
 8005d34:	b083      	sub	sp, #12
 8005d36:	af00      	add	r7, sp, #0
 8005d38:	6078      	str	r0, [r7, #4]
 8005d3a:	460b      	mov	r3, r1
 8005d3c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	78fa      	ldrb	r2, [r7, #3]
 8005d42:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005d44:	2300      	movs	r3, #0
}
 8005d46:	4618      	mov	r0, r3
 8005d48:	370c      	adds	r7, #12
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d50:	4770      	bx	lr

08005d52 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005d52:	b480      	push	{r7}
 8005d54:	b083      	sub	sp, #12
 8005d56:	af00      	add	r7, sp, #0
 8005d58:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005d60:	b2db      	uxtb	r3, r3
 8005d62:	2b04      	cmp	r3, #4
 8005d64:	d006      	beq.n	8005d74 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005d6c:	b2da      	uxtb	r2, r3
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2204      	movs	r2, #4
 8005d78:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8005d7c:	2300      	movs	r3, #0
}
 8005d7e:	4618      	mov	r0, r3
 8005d80:	370c      	adds	r7, #12
 8005d82:	46bd      	mov	sp, r7
 8005d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d88:	4770      	bx	lr

08005d8a <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005d8a:	b480      	push	{r7}
 8005d8c:	b083      	sub	sp, #12
 8005d8e:	af00      	add	r7, sp, #0
 8005d90:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005d98:	b2db      	uxtb	r3, r3
 8005d9a:	2b04      	cmp	r3, #4
 8005d9c:	d106      	bne.n	8005dac <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8005da4:	b2da      	uxtb	r2, r3
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8005dac:	2300      	movs	r3, #0
}
 8005dae:	4618      	mov	r0, r3
 8005db0:	370c      	adds	r7, #12
 8005db2:	46bd      	mov	sp, r7
 8005db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db8:	4770      	bx	lr

08005dba <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005dba:	b580      	push	{r7, lr}
 8005dbc:	b082      	sub	sp, #8
 8005dbe:	af00      	add	r7, sp, #0
 8005dc0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005dc8:	b2db      	uxtb	r3, r3
 8005dca:	2b03      	cmp	r3, #3
 8005dcc:	d110      	bne.n	8005df0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d00b      	beq.n	8005df0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005dde:	69db      	ldr	r3, [r3, #28]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d005      	beq.n	8005df0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005dea:	69db      	ldr	r3, [r3, #28]
 8005dec:	6878      	ldr	r0, [r7, #4]
 8005dee:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8005df0:	2300      	movs	r3, #0
}
 8005df2:	4618      	mov	r0, r3
 8005df4:	3708      	adds	r7, #8
 8005df6:	46bd      	mov	sp, r7
 8005df8:	bd80      	pop	{r7, pc}

08005dfa <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005dfa:	b580      	push	{r7, lr}
 8005dfc:	b082      	sub	sp, #8
 8005dfe:	af00      	add	r7, sp, #0
 8005e00:	6078      	str	r0, [r7, #4]
 8005e02:	460b      	mov	r3, r1
 8005e04:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	32ae      	adds	r2, #174	@ 0xae
 8005e10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d101      	bne.n	8005e1c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8005e18:	2303      	movs	r3, #3
 8005e1a:	e01c      	b.n	8005e56 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005e22:	b2db      	uxtb	r3, r3
 8005e24:	2b03      	cmp	r3, #3
 8005e26:	d115      	bne.n	8005e54 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	32ae      	adds	r2, #174	@ 0xae
 8005e32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e36:	6a1b      	ldr	r3, [r3, #32]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d00b      	beq.n	8005e54 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	32ae      	adds	r2, #174	@ 0xae
 8005e46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e4a:	6a1b      	ldr	r3, [r3, #32]
 8005e4c:	78fa      	ldrb	r2, [r7, #3]
 8005e4e:	4611      	mov	r1, r2
 8005e50:	6878      	ldr	r0, [r7, #4]
 8005e52:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005e54:	2300      	movs	r3, #0
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	3708      	adds	r7, #8
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd80      	pop	{r7, pc}

08005e5e <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005e5e:	b580      	push	{r7, lr}
 8005e60:	b082      	sub	sp, #8
 8005e62:	af00      	add	r7, sp, #0
 8005e64:	6078      	str	r0, [r7, #4]
 8005e66:	460b      	mov	r3, r1
 8005e68:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	32ae      	adds	r2, #174	@ 0xae
 8005e74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d101      	bne.n	8005e80 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8005e7c:	2303      	movs	r3, #3
 8005e7e:	e01c      	b.n	8005eba <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005e86:	b2db      	uxtb	r3, r3
 8005e88:	2b03      	cmp	r3, #3
 8005e8a:	d115      	bne.n	8005eb8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	32ae      	adds	r2, #174	@ 0xae
 8005e96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d00b      	beq.n	8005eb8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	32ae      	adds	r2, #174	@ 0xae
 8005eaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005eae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eb0:	78fa      	ldrb	r2, [r7, #3]
 8005eb2:	4611      	mov	r1, r2
 8005eb4:	6878      	ldr	r0, [r7, #4]
 8005eb6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005eb8:	2300      	movs	r3, #0
}
 8005eba:	4618      	mov	r0, r3
 8005ebc:	3708      	adds	r7, #8
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bd80      	pop	{r7, pc}

08005ec2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005ec2:	b480      	push	{r7}
 8005ec4:	b083      	sub	sp, #12
 8005ec6:	af00      	add	r7, sp, #0
 8005ec8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005eca:	2300      	movs	r3, #0
}
 8005ecc:	4618      	mov	r0, r3
 8005ece:	370c      	adds	r7, #12
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed6:	4770      	bx	lr

08005ed8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b084      	sub	sp, #16
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2201      	movs	r2, #1
 8005ee8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d00e      	beq.n	8005f14 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005efc:	685b      	ldr	r3, [r3, #4]
 8005efe:	687a      	ldr	r2, [r7, #4]
 8005f00:	6852      	ldr	r2, [r2, #4]
 8005f02:	b2d2      	uxtb	r2, r2
 8005f04:	4611      	mov	r1, r2
 8005f06:	6878      	ldr	r0, [r7, #4]
 8005f08:	4798      	blx	r3
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d001      	beq.n	8005f14 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8005f10:	2303      	movs	r3, #3
 8005f12:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005f14:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f16:	4618      	mov	r0, r3
 8005f18:	3710      	adds	r7, #16
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	bd80      	pop	{r7, pc}

08005f1e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005f1e:	b480      	push	{r7}
 8005f20:	b083      	sub	sp, #12
 8005f22:	af00      	add	r7, sp, #0
 8005f24:	6078      	str	r0, [r7, #4]
 8005f26:	460b      	mov	r3, r1
 8005f28:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005f2a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	370c      	adds	r7, #12
 8005f30:	46bd      	mov	sp, r7
 8005f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f36:	4770      	bx	lr

08005f38 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005f38:	b480      	push	{r7}
 8005f3a:	b083      	sub	sp, #12
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
 8005f40:	460b      	mov	r3, r1
 8005f42:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005f44:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005f46:	4618      	mov	r0, r3
 8005f48:	370c      	adds	r7, #12
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f50:	4770      	bx	lr

08005f52 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8005f52:	b580      	push	{r7, lr}
 8005f54:	b086      	sub	sp, #24
 8005f56:	af00      	add	r7, sp, #0
 8005f58:	6078      	str	r0, [r7, #4]
 8005f5a:	460b      	mov	r3, r1
 8005f5c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8005f66:	2300      	movs	r3, #0
 8005f68:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	885b      	ldrh	r3, [r3, #2]
 8005f6e:	b29b      	uxth	r3, r3
 8005f70:	68fa      	ldr	r2, [r7, #12]
 8005f72:	7812      	ldrb	r2, [r2, #0]
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d91f      	bls.n	8005fb8 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	781b      	ldrb	r3, [r3, #0]
 8005f7c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8005f7e:	e013      	b.n	8005fa8 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8005f80:	f107 030a 	add.w	r3, r7, #10
 8005f84:	4619      	mov	r1, r3
 8005f86:	6978      	ldr	r0, [r7, #20]
 8005f88:	f000 f81b 	bl	8005fc2 <USBD_GetNextDesc>
 8005f8c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8005f8e:	697b      	ldr	r3, [r7, #20]
 8005f90:	785b      	ldrb	r3, [r3, #1]
 8005f92:	2b05      	cmp	r3, #5
 8005f94:	d108      	bne.n	8005fa8 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8005f96:	697b      	ldr	r3, [r7, #20]
 8005f98:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8005f9a:	693b      	ldr	r3, [r7, #16]
 8005f9c:	789b      	ldrb	r3, [r3, #2]
 8005f9e:	78fa      	ldrb	r2, [r7, #3]
 8005fa0:	429a      	cmp	r2, r3
 8005fa2:	d008      	beq.n	8005fb6 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	885b      	ldrh	r3, [r3, #2]
 8005fac:	b29a      	uxth	r2, r3
 8005fae:	897b      	ldrh	r3, [r7, #10]
 8005fb0:	429a      	cmp	r2, r3
 8005fb2:	d8e5      	bhi.n	8005f80 <USBD_GetEpDesc+0x2e>
 8005fb4:	e000      	b.n	8005fb8 <USBD_GetEpDesc+0x66>
          break;
 8005fb6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8005fb8:	693b      	ldr	r3, [r7, #16]
}
 8005fba:	4618      	mov	r0, r3
 8005fbc:	3718      	adds	r7, #24
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bd80      	pop	{r7, pc}

08005fc2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8005fc2:	b480      	push	{r7}
 8005fc4:	b085      	sub	sp, #20
 8005fc6:	af00      	add	r7, sp, #0
 8005fc8:	6078      	str	r0, [r7, #4]
 8005fca:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	881b      	ldrh	r3, [r3, #0]
 8005fd4:	68fa      	ldr	r2, [r7, #12]
 8005fd6:	7812      	ldrb	r2, [r2, #0]
 8005fd8:	4413      	add	r3, r2
 8005fda:	b29a      	uxth	r2, r3
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	781b      	ldrb	r3, [r3, #0]
 8005fe4:	461a      	mov	r2, r3
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	4413      	add	r3, r2
 8005fea:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8005fec:	68fb      	ldr	r3, [r7, #12]
}
 8005fee:	4618      	mov	r0, r3
 8005ff0:	3714      	adds	r7, #20
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff8:	4770      	bx	lr

08005ffa <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005ffa:	b480      	push	{r7}
 8005ffc:	b087      	sub	sp, #28
 8005ffe:	af00      	add	r7, sp, #0
 8006000:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006006:	697b      	ldr	r3, [r7, #20]
 8006008:	781b      	ldrb	r3, [r3, #0]
 800600a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800600c:	697b      	ldr	r3, [r7, #20]
 800600e:	3301      	adds	r3, #1
 8006010:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006012:	697b      	ldr	r3, [r7, #20]
 8006014:	781b      	ldrb	r3, [r3, #0]
 8006016:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006018:	8a3b      	ldrh	r3, [r7, #16]
 800601a:	021b      	lsls	r3, r3, #8
 800601c:	b21a      	sxth	r2, r3
 800601e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006022:	4313      	orrs	r3, r2
 8006024:	b21b      	sxth	r3, r3
 8006026:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006028:	89fb      	ldrh	r3, [r7, #14]
}
 800602a:	4618      	mov	r0, r3
 800602c:	371c      	adds	r7, #28
 800602e:	46bd      	mov	sp, r7
 8006030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006034:	4770      	bx	lr
	...

08006038 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b084      	sub	sp, #16
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
 8006040:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006042:	2300      	movs	r3, #0
 8006044:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	781b      	ldrb	r3, [r3, #0]
 800604a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800604e:	2b40      	cmp	r3, #64	@ 0x40
 8006050:	d005      	beq.n	800605e <USBD_StdDevReq+0x26>
 8006052:	2b40      	cmp	r3, #64	@ 0x40
 8006054:	d857      	bhi.n	8006106 <USBD_StdDevReq+0xce>
 8006056:	2b00      	cmp	r3, #0
 8006058:	d00f      	beq.n	800607a <USBD_StdDevReq+0x42>
 800605a:	2b20      	cmp	r3, #32
 800605c:	d153      	bne.n	8006106 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	32ae      	adds	r2, #174	@ 0xae
 8006068:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800606c:	689b      	ldr	r3, [r3, #8]
 800606e:	6839      	ldr	r1, [r7, #0]
 8006070:	6878      	ldr	r0, [r7, #4]
 8006072:	4798      	blx	r3
 8006074:	4603      	mov	r3, r0
 8006076:	73fb      	strb	r3, [r7, #15]
      break;
 8006078:	e04a      	b.n	8006110 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	785b      	ldrb	r3, [r3, #1]
 800607e:	2b09      	cmp	r3, #9
 8006080:	d83b      	bhi.n	80060fa <USBD_StdDevReq+0xc2>
 8006082:	a201      	add	r2, pc, #4	@ (adr r2, 8006088 <USBD_StdDevReq+0x50>)
 8006084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006088:	080060dd 	.word	0x080060dd
 800608c:	080060f1 	.word	0x080060f1
 8006090:	080060fb 	.word	0x080060fb
 8006094:	080060e7 	.word	0x080060e7
 8006098:	080060fb 	.word	0x080060fb
 800609c:	080060bb 	.word	0x080060bb
 80060a0:	080060b1 	.word	0x080060b1
 80060a4:	080060fb 	.word	0x080060fb
 80060a8:	080060d3 	.word	0x080060d3
 80060ac:	080060c5 	.word	0x080060c5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80060b0:	6839      	ldr	r1, [r7, #0]
 80060b2:	6878      	ldr	r0, [r7, #4]
 80060b4:	f000 fa3c 	bl	8006530 <USBD_GetDescriptor>
          break;
 80060b8:	e024      	b.n	8006104 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80060ba:	6839      	ldr	r1, [r7, #0]
 80060bc:	6878      	ldr	r0, [r7, #4]
 80060be:	f000 fba1 	bl	8006804 <USBD_SetAddress>
          break;
 80060c2:	e01f      	b.n	8006104 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80060c4:	6839      	ldr	r1, [r7, #0]
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	f000 fbe0 	bl	800688c <USBD_SetConfig>
 80060cc:	4603      	mov	r3, r0
 80060ce:	73fb      	strb	r3, [r7, #15]
          break;
 80060d0:	e018      	b.n	8006104 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80060d2:	6839      	ldr	r1, [r7, #0]
 80060d4:	6878      	ldr	r0, [r7, #4]
 80060d6:	f000 fc83 	bl	80069e0 <USBD_GetConfig>
          break;
 80060da:	e013      	b.n	8006104 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80060dc:	6839      	ldr	r1, [r7, #0]
 80060de:	6878      	ldr	r0, [r7, #4]
 80060e0:	f000 fcb4 	bl	8006a4c <USBD_GetStatus>
          break;
 80060e4:	e00e      	b.n	8006104 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80060e6:	6839      	ldr	r1, [r7, #0]
 80060e8:	6878      	ldr	r0, [r7, #4]
 80060ea:	f000 fce3 	bl	8006ab4 <USBD_SetFeature>
          break;
 80060ee:	e009      	b.n	8006104 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80060f0:	6839      	ldr	r1, [r7, #0]
 80060f2:	6878      	ldr	r0, [r7, #4]
 80060f4:	f000 fd07 	bl	8006b06 <USBD_ClrFeature>
          break;
 80060f8:	e004      	b.n	8006104 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80060fa:	6839      	ldr	r1, [r7, #0]
 80060fc:	6878      	ldr	r0, [r7, #4]
 80060fe:	f000 fd5e 	bl	8006bbe <USBD_CtlError>
          break;
 8006102:	bf00      	nop
      }
      break;
 8006104:	e004      	b.n	8006110 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8006106:	6839      	ldr	r1, [r7, #0]
 8006108:	6878      	ldr	r0, [r7, #4]
 800610a:	f000 fd58 	bl	8006bbe <USBD_CtlError>
      break;
 800610e:	bf00      	nop
  }

  return ret;
 8006110:	7bfb      	ldrb	r3, [r7, #15]
}
 8006112:	4618      	mov	r0, r3
 8006114:	3710      	adds	r7, #16
 8006116:	46bd      	mov	sp, r7
 8006118:	bd80      	pop	{r7, pc}
 800611a:	bf00      	nop

0800611c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b084      	sub	sp, #16
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
 8006124:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006126:	2300      	movs	r3, #0
 8006128:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	781b      	ldrb	r3, [r3, #0]
 800612e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006132:	2b40      	cmp	r3, #64	@ 0x40
 8006134:	d005      	beq.n	8006142 <USBD_StdItfReq+0x26>
 8006136:	2b40      	cmp	r3, #64	@ 0x40
 8006138:	d852      	bhi.n	80061e0 <USBD_StdItfReq+0xc4>
 800613a:	2b00      	cmp	r3, #0
 800613c:	d001      	beq.n	8006142 <USBD_StdItfReq+0x26>
 800613e:	2b20      	cmp	r3, #32
 8006140:	d14e      	bne.n	80061e0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006148:	b2db      	uxtb	r3, r3
 800614a:	3b01      	subs	r3, #1
 800614c:	2b02      	cmp	r3, #2
 800614e:	d840      	bhi.n	80061d2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	889b      	ldrh	r3, [r3, #4]
 8006154:	b2db      	uxtb	r3, r3
 8006156:	2b01      	cmp	r3, #1
 8006158:	d836      	bhi.n	80061c8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	889b      	ldrh	r3, [r3, #4]
 800615e:	b2db      	uxtb	r3, r3
 8006160:	4619      	mov	r1, r3
 8006162:	6878      	ldr	r0, [r7, #4]
 8006164:	f7ff fedb 	bl	8005f1e <USBD_CoreFindIF>
 8006168:	4603      	mov	r3, r0
 800616a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800616c:	7bbb      	ldrb	r3, [r7, #14]
 800616e:	2bff      	cmp	r3, #255	@ 0xff
 8006170:	d01d      	beq.n	80061ae <USBD_StdItfReq+0x92>
 8006172:	7bbb      	ldrb	r3, [r7, #14]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d11a      	bne.n	80061ae <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006178:	7bba      	ldrb	r2, [r7, #14]
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	32ae      	adds	r2, #174	@ 0xae
 800617e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006182:	689b      	ldr	r3, [r3, #8]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d00f      	beq.n	80061a8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006188:	7bba      	ldrb	r2, [r7, #14]
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006190:	7bba      	ldrb	r2, [r7, #14]
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	32ae      	adds	r2, #174	@ 0xae
 8006196:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800619a:	689b      	ldr	r3, [r3, #8]
 800619c:	6839      	ldr	r1, [r7, #0]
 800619e:	6878      	ldr	r0, [r7, #4]
 80061a0:	4798      	blx	r3
 80061a2:	4603      	mov	r3, r0
 80061a4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80061a6:	e004      	b.n	80061b2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80061a8:	2303      	movs	r3, #3
 80061aa:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80061ac:	e001      	b.n	80061b2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80061ae:	2303      	movs	r3, #3
 80061b0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	88db      	ldrh	r3, [r3, #6]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d110      	bne.n	80061dc <USBD_StdItfReq+0xc0>
 80061ba:	7bfb      	ldrb	r3, [r7, #15]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d10d      	bne.n	80061dc <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80061c0:	6878      	ldr	r0, [r7, #4]
 80061c2:	f000 fdd3 	bl	8006d6c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80061c6:	e009      	b.n	80061dc <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80061c8:	6839      	ldr	r1, [r7, #0]
 80061ca:	6878      	ldr	r0, [r7, #4]
 80061cc:	f000 fcf7 	bl	8006bbe <USBD_CtlError>
          break;
 80061d0:	e004      	b.n	80061dc <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80061d2:	6839      	ldr	r1, [r7, #0]
 80061d4:	6878      	ldr	r0, [r7, #4]
 80061d6:	f000 fcf2 	bl	8006bbe <USBD_CtlError>
          break;
 80061da:	e000      	b.n	80061de <USBD_StdItfReq+0xc2>
          break;
 80061dc:	bf00      	nop
      }
      break;
 80061de:	e004      	b.n	80061ea <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80061e0:	6839      	ldr	r1, [r7, #0]
 80061e2:	6878      	ldr	r0, [r7, #4]
 80061e4:	f000 fceb 	bl	8006bbe <USBD_CtlError>
      break;
 80061e8:	bf00      	nop
  }

  return ret;
 80061ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80061ec:	4618      	mov	r0, r3
 80061ee:	3710      	adds	r7, #16
 80061f0:	46bd      	mov	sp, r7
 80061f2:	bd80      	pop	{r7, pc}

080061f4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b084      	sub	sp, #16
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
 80061fc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80061fe:	2300      	movs	r3, #0
 8006200:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	889b      	ldrh	r3, [r3, #4]
 8006206:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	781b      	ldrb	r3, [r3, #0]
 800620c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006210:	2b40      	cmp	r3, #64	@ 0x40
 8006212:	d007      	beq.n	8006224 <USBD_StdEPReq+0x30>
 8006214:	2b40      	cmp	r3, #64	@ 0x40
 8006216:	f200 817f 	bhi.w	8006518 <USBD_StdEPReq+0x324>
 800621a:	2b00      	cmp	r3, #0
 800621c:	d02a      	beq.n	8006274 <USBD_StdEPReq+0x80>
 800621e:	2b20      	cmp	r3, #32
 8006220:	f040 817a 	bne.w	8006518 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006224:	7bbb      	ldrb	r3, [r7, #14]
 8006226:	4619      	mov	r1, r3
 8006228:	6878      	ldr	r0, [r7, #4]
 800622a:	f7ff fe85 	bl	8005f38 <USBD_CoreFindEP>
 800622e:	4603      	mov	r3, r0
 8006230:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006232:	7b7b      	ldrb	r3, [r7, #13]
 8006234:	2bff      	cmp	r3, #255	@ 0xff
 8006236:	f000 8174 	beq.w	8006522 <USBD_StdEPReq+0x32e>
 800623a:	7b7b      	ldrb	r3, [r7, #13]
 800623c:	2b00      	cmp	r3, #0
 800623e:	f040 8170 	bne.w	8006522 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8006242:	7b7a      	ldrb	r2, [r7, #13]
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800624a:	7b7a      	ldrb	r2, [r7, #13]
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	32ae      	adds	r2, #174	@ 0xae
 8006250:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006254:	689b      	ldr	r3, [r3, #8]
 8006256:	2b00      	cmp	r3, #0
 8006258:	f000 8163 	beq.w	8006522 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800625c:	7b7a      	ldrb	r2, [r7, #13]
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	32ae      	adds	r2, #174	@ 0xae
 8006262:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006266:	689b      	ldr	r3, [r3, #8]
 8006268:	6839      	ldr	r1, [r7, #0]
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	4798      	blx	r3
 800626e:	4603      	mov	r3, r0
 8006270:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006272:	e156      	b.n	8006522 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	785b      	ldrb	r3, [r3, #1]
 8006278:	2b03      	cmp	r3, #3
 800627a:	d008      	beq.n	800628e <USBD_StdEPReq+0x9a>
 800627c:	2b03      	cmp	r3, #3
 800627e:	f300 8145 	bgt.w	800650c <USBD_StdEPReq+0x318>
 8006282:	2b00      	cmp	r3, #0
 8006284:	f000 809b 	beq.w	80063be <USBD_StdEPReq+0x1ca>
 8006288:	2b01      	cmp	r3, #1
 800628a:	d03c      	beq.n	8006306 <USBD_StdEPReq+0x112>
 800628c:	e13e      	b.n	800650c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006294:	b2db      	uxtb	r3, r3
 8006296:	2b02      	cmp	r3, #2
 8006298:	d002      	beq.n	80062a0 <USBD_StdEPReq+0xac>
 800629a:	2b03      	cmp	r3, #3
 800629c:	d016      	beq.n	80062cc <USBD_StdEPReq+0xd8>
 800629e:	e02c      	b.n	80062fa <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80062a0:	7bbb      	ldrb	r3, [r7, #14]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d00d      	beq.n	80062c2 <USBD_StdEPReq+0xce>
 80062a6:	7bbb      	ldrb	r3, [r7, #14]
 80062a8:	2b80      	cmp	r3, #128	@ 0x80
 80062aa:	d00a      	beq.n	80062c2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80062ac:	7bbb      	ldrb	r3, [r7, #14]
 80062ae:	4619      	mov	r1, r3
 80062b0:	6878      	ldr	r0, [r7, #4]
 80062b2:	f003 fc6f 	bl	8009b94 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80062b6:	2180      	movs	r1, #128	@ 0x80
 80062b8:	6878      	ldr	r0, [r7, #4]
 80062ba:	f003 fc6b 	bl	8009b94 <USBD_LL_StallEP>
 80062be:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80062c0:	e020      	b.n	8006304 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80062c2:	6839      	ldr	r1, [r7, #0]
 80062c4:	6878      	ldr	r0, [r7, #4]
 80062c6:	f000 fc7a 	bl	8006bbe <USBD_CtlError>
              break;
 80062ca:	e01b      	b.n	8006304 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	885b      	ldrh	r3, [r3, #2]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d10e      	bne.n	80062f2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80062d4:	7bbb      	ldrb	r3, [r7, #14]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d00b      	beq.n	80062f2 <USBD_StdEPReq+0xfe>
 80062da:	7bbb      	ldrb	r3, [r7, #14]
 80062dc:	2b80      	cmp	r3, #128	@ 0x80
 80062de:	d008      	beq.n	80062f2 <USBD_StdEPReq+0xfe>
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	88db      	ldrh	r3, [r3, #6]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d104      	bne.n	80062f2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80062e8:	7bbb      	ldrb	r3, [r7, #14]
 80062ea:	4619      	mov	r1, r3
 80062ec:	6878      	ldr	r0, [r7, #4]
 80062ee:	f003 fc51 	bl	8009b94 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80062f2:	6878      	ldr	r0, [r7, #4]
 80062f4:	f000 fd3a 	bl	8006d6c <USBD_CtlSendStatus>

              break;
 80062f8:	e004      	b.n	8006304 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80062fa:	6839      	ldr	r1, [r7, #0]
 80062fc:	6878      	ldr	r0, [r7, #4]
 80062fe:	f000 fc5e 	bl	8006bbe <USBD_CtlError>
              break;
 8006302:	bf00      	nop
          }
          break;
 8006304:	e107      	b.n	8006516 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800630c:	b2db      	uxtb	r3, r3
 800630e:	2b02      	cmp	r3, #2
 8006310:	d002      	beq.n	8006318 <USBD_StdEPReq+0x124>
 8006312:	2b03      	cmp	r3, #3
 8006314:	d016      	beq.n	8006344 <USBD_StdEPReq+0x150>
 8006316:	e04b      	b.n	80063b0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006318:	7bbb      	ldrb	r3, [r7, #14]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d00d      	beq.n	800633a <USBD_StdEPReq+0x146>
 800631e:	7bbb      	ldrb	r3, [r7, #14]
 8006320:	2b80      	cmp	r3, #128	@ 0x80
 8006322:	d00a      	beq.n	800633a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006324:	7bbb      	ldrb	r3, [r7, #14]
 8006326:	4619      	mov	r1, r3
 8006328:	6878      	ldr	r0, [r7, #4]
 800632a:	f003 fc33 	bl	8009b94 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800632e:	2180      	movs	r1, #128	@ 0x80
 8006330:	6878      	ldr	r0, [r7, #4]
 8006332:	f003 fc2f 	bl	8009b94 <USBD_LL_StallEP>
 8006336:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006338:	e040      	b.n	80063bc <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800633a:	6839      	ldr	r1, [r7, #0]
 800633c:	6878      	ldr	r0, [r7, #4]
 800633e:	f000 fc3e 	bl	8006bbe <USBD_CtlError>
              break;
 8006342:	e03b      	b.n	80063bc <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	885b      	ldrh	r3, [r3, #2]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d136      	bne.n	80063ba <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800634c:	7bbb      	ldrb	r3, [r7, #14]
 800634e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006352:	2b00      	cmp	r3, #0
 8006354:	d004      	beq.n	8006360 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006356:	7bbb      	ldrb	r3, [r7, #14]
 8006358:	4619      	mov	r1, r3
 800635a:	6878      	ldr	r0, [r7, #4]
 800635c:	f003 fc39 	bl	8009bd2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006360:	6878      	ldr	r0, [r7, #4]
 8006362:	f000 fd03 	bl	8006d6c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8006366:	7bbb      	ldrb	r3, [r7, #14]
 8006368:	4619      	mov	r1, r3
 800636a:	6878      	ldr	r0, [r7, #4]
 800636c:	f7ff fde4 	bl	8005f38 <USBD_CoreFindEP>
 8006370:	4603      	mov	r3, r0
 8006372:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006374:	7b7b      	ldrb	r3, [r7, #13]
 8006376:	2bff      	cmp	r3, #255	@ 0xff
 8006378:	d01f      	beq.n	80063ba <USBD_StdEPReq+0x1c6>
 800637a:	7b7b      	ldrb	r3, [r7, #13]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d11c      	bne.n	80063ba <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006380:	7b7a      	ldrb	r2, [r7, #13]
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006388:	7b7a      	ldrb	r2, [r7, #13]
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	32ae      	adds	r2, #174	@ 0xae
 800638e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006392:	689b      	ldr	r3, [r3, #8]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d010      	beq.n	80063ba <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006398:	7b7a      	ldrb	r2, [r7, #13]
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	32ae      	adds	r2, #174	@ 0xae
 800639e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063a2:	689b      	ldr	r3, [r3, #8]
 80063a4:	6839      	ldr	r1, [r7, #0]
 80063a6:	6878      	ldr	r0, [r7, #4]
 80063a8:	4798      	blx	r3
 80063aa:	4603      	mov	r3, r0
 80063ac:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80063ae:	e004      	b.n	80063ba <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80063b0:	6839      	ldr	r1, [r7, #0]
 80063b2:	6878      	ldr	r0, [r7, #4]
 80063b4:	f000 fc03 	bl	8006bbe <USBD_CtlError>
              break;
 80063b8:	e000      	b.n	80063bc <USBD_StdEPReq+0x1c8>
              break;
 80063ba:	bf00      	nop
          }
          break;
 80063bc:	e0ab      	b.n	8006516 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80063c4:	b2db      	uxtb	r3, r3
 80063c6:	2b02      	cmp	r3, #2
 80063c8:	d002      	beq.n	80063d0 <USBD_StdEPReq+0x1dc>
 80063ca:	2b03      	cmp	r3, #3
 80063cc:	d032      	beq.n	8006434 <USBD_StdEPReq+0x240>
 80063ce:	e097      	b.n	8006500 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80063d0:	7bbb      	ldrb	r3, [r7, #14]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d007      	beq.n	80063e6 <USBD_StdEPReq+0x1f2>
 80063d6:	7bbb      	ldrb	r3, [r7, #14]
 80063d8:	2b80      	cmp	r3, #128	@ 0x80
 80063da:	d004      	beq.n	80063e6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80063dc:	6839      	ldr	r1, [r7, #0]
 80063de:	6878      	ldr	r0, [r7, #4]
 80063e0:	f000 fbed 	bl	8006bbe <USBD_CtlError>
                break;
 80063e4:	e091      	b.n	800650a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80063e6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	da0b      	bge.n	8006406 <USBD_StdEPReq+0x212>
 80063ee:	7bbb      	ldrb	r3, [r7, #14]
 80063f0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80063f4:	4613      	mov	r3, r2
 80063f6:	009b      	lsls	r3, r3, #2
 80063f8:	4413      	add	r3, r2
 80063fa:	009b      	lsls	r3, r3, #2
 80063fc:	3310      	adds	r3, #16
 80063fe:	687a      	ldr	r2, [r7, #4]
 8006400:	4413      	add	r3, r2
 8006402:	3304      	adds	r3, #4
 8006404:	e00b      	b.n	800641e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006406:	7bbb      	ldrb	r3, [r7, #14]
 8006408:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800640c:	4613      	mov	r3, r2
 800640e:	009b      	lsls	r3, r3, #2
 8006410:	4413      	add	r3, r2
 8006412:	009b      	lsls	r3, r3, #2
 8006414:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006418:	687a      	ldr	r2, [r7, #4]
 800641a:	4413      	add	r3, r2
 800641c:	3304      	adds	r3, #4
 800641e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006420:	68bb      	ldr	r3, [r7, #8]
 8006422:	2200      	movs	r2, #0
 8006424:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	2202      	movs	r2, #2
 800642a:	4619      	mov	r1, r3
 800642c:	6878      	ldr	r0, [r7, #4]
 800642e:	f000 fc43 	bl	8006cb8 <USBD_CtlSendData>
              break;
 8006432:	e06a      	b.n	800650a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006434:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006438:	2b00      	cmp	r3, #0
 800643a:	da11      	bge.n	8006460 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800643c:	7bbb      	ldrb	r3, [r7, #14]
 800643e:	f003 020f 	and.w	r2, r3, #15
 8006442:	6879      	ldr	r1, [r7, #4]
 8006444:	4613      	mov	r3, r2
 8006446:	009b      	lsls	r3, r3, #2
 8006448:	4413      	add	r3, r2
 800644a:	009b      	lsls	r3, r3, #2
 800644c:	440b      	add	r3, r1
 800644e:	3324      	adds	r3, #36	@ 0x24
 8006450:	881b      	ldrh	r3, [r3, #0]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d117      	bne.n	8006486 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006456:	6839      	ldr	r1, [r7, #0]
 8006458:	6878      	ldr	r0, [r7, #4]
 800645a:	f000 fbb0 	bl	8006bbe <USBD_CtlError>
                  break;
 800645e:	e054      	b.n	800650a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006460:	7bbb      	ldrb	r3, [r7, #14]
 8006462:	f003 020f 	and.w	r2, r3, #15
 8006466:	6879      	ldr	r1, [r7, #4]
 8006468:	4613      	mov	r3, r2
 800646a:	009b      	lsls	r3, r3, #2
 800646c:	4413      	add	r3, r2
 800646e:	009b      	lsls	r3, r3, #2
 8006470:	440b      	add	r3, r1
 8006472:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006476:	881b      	ldrh	r3, [r3, #0]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d104      	bne.n	8006486 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800647c:	6839      	ldr	r1, [r7, #0]
 800647e:	6878      	ldr	r0, [r7, #4]
 8006480:	f000 fb9d 	bl	8006bbe <USBD_CtlError>
                  break;
 8006484:	e041      	b.n	800650a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006486:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800648a:	2b00      	cmp	r3, #0
 800648c:	da0b      	bge.n	80064a6 <USBD_StdEPReq+0x2b2>
 800648e:	7bbb      	ldrb	r3, [r7, #14]
 8006490:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006494:	4613      	mov	r3, r2
 8006496:	009b      	lsls	r3, r3, #2
 8006498:	4413      	add	r3, r2
 800649a:	009b      	lsls	r3, r3, #2
 800649c:	3310      	adds	r3, #16
 800649e:	687a      	ldr	r2, [r7, #4]
 80064a0:	4413      	add	r3, r2
 80064a2:	3304      	adds	r3, #4
 80064a4:	e00b      	b.n	80064be <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80064a6:	7bbb      	ldrb	r3, [r7, #14]
 80064a8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80064ac:	4613      	mov	r3, r2
 80064ae:	009b      	lsls	r3, r3, #2
 80064b0:	4413      	add	r3, r2
 80064b2:	009b      	lsls	r3, r3, #2
 80064b4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80064b8:	687a      	ldr	r2, [r7, #4]
 80064ba:	4413      	add	r3, r2
 80064bc:	3304      	adds	r3, #4
 80064be:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80064c0:	7bbb      	ldrb	r3, [r7, #14]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d002      	beq.n	80064cc <USBD_StdEPReq+0x2d8>
 80064c6:	7bbb      	ldrb	r3, [r7, #14]
 80064c8:	2b80      	cmp	r3, #128	@ 0x80
 80064ca:	d103      	bne.n	80064d4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	2200      	movs	r2, #0
 80064d0:	601a      	str	r2, [r3, #0]
 80064d2:	e00e      	b.n	80064f2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80064d4:	7bbb      	ldrb	r3, [r7, #14]
 80064d6:	4619      	mov	r1, r3
 80064d8:	6878      	ldr	r0, [r7, #4]
 80064da:	f003 fb99 	bl	8009c10 <USBD_LL_IsStallEP>
 80064de:	4603      	mov	r3, r0
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d003      	beq.n	80064ec <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	2201      	movs	r2, #1
 80064e8:	601a      	str	r2, [r3, #0]
 80064ea:	e002      	b.n	80064f2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	2200      	movs	r2, #0
 80064f0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	2202      	movs	r2, #2
 80064f6:	4619      	mov	r1, r3
 80064f8:	6878      	ldr	r0, [r7, #4]
 80064fa:	f000 fbdd 	bl	8006cb8 <USBD_CtlSendData>
              break;
 80064fe:	e004      	b.n	800650a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006500:	6839      	ldr	r1, [r7, #0]
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	f000 fb5b 	bl	8006bbe <USBD_CtlError>
              break;
 8006508:	bf00      	nop
          }
          break;
 800650a:	e004      	b.n	8006516 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800650c:	6839      	ldr	r1, [r7, #0]
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	f000 fb55 	bl	8006bbe <USBD_CtlError>
          break;
 8006514:	bf00      	nop
      }
      break;
 8006516:	e005      	b.n	8006524 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006518:	6839      	ldr	r1, [r7, #0]
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	f000 fb4f 	bl	8006bbe <USBD_CtlError>
      break;
 8006520:	e000      	b.n	8006524 <USBD_StdEPReq+0x330>
      break;
 8006522:	bf00      	nop
  }

  return ret;
 8006524:	7bfb      	ldrb	r3, [r7, #15]
}
 8006526:	4618      	mov	r0, r3
 8006528:	3710      	adds	r7, #16
 800652a:	46bd      	mov	sp, r7
 800652c:	bd80      	pop	{r7, pc}
	...

08006530 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b084      	sub	sp, #16
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
 8006538:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800653a:	2300      	movs	r3, #0
 800653c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800653e:	2300      	movs	r3, #0
 8006540:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006542:	2300      	movs	r3, #0
 8006544:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	885b      	ldrh	r3, [r3, #2]
 800654a:	0a1b      	lsrs	r3, r3, #8
 800654c:	b29b      	uxth	r3, r3
 800654e:	3b01      	subs	r3, #1
 8006550:	2b06      	cmp	r3, #6
 8006552:	f200 8128 	bhi.w	80067a6 <USBD_GetDescriptor+0x276>
 8006556:	a201      	add	r2, pc, #4	@ (adr r2, 800655c <USBD_GetDescriptor+0x2c>)
 8006558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800655c:	08006579 	.word	0x08006579
 8006560:	08006591 	.word	0x08006591
 8006564:	080065d1 	.word	0x080065d1
 8006568:	080067a7 	.word	0x080067a7
 800656c:	080067a7 	.word	0x080067a7
 8006570:	08006747 	.word	0x08006747
 8006574:	08006773 	.word	0x08006773
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	687a      	ldr	r2, [r7, #4]
 8006582:	7c12      	ldrb	r2, [r2, #16]
 8006584:	f107 0108 	add.w	r1, r7, #8
 8006588:	4610      	mov	r0, r2
 800658a:	4798      	blx	r3
 800658c:	60f8      	str	r0, [r7, #12]
      break;
 800658e:	e112      	b.n	80067b6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	7c1b      	ldrb	r3, [r3, #16]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d10d      	bne.n	80065b4 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800659e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065a0:	f107 0208 	add.w	r2, r7, #8
 80065a4:	4610      	mov	r0, r2
 80065a6:	4798      	blx	r3
 80065a8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	3301      	adds	r3, #1
 80065ae:	2202      	movs	r2, #2
 80065b0:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80065b2:	e100      	b.n	80067b6 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80065ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065bc:	f107 0208 	add.w	r2, r7, #8
 80065c0:	4610      	mov	r0, r2
 80065c2:	4798      	blx	r3
 80065c4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	3301      	adds	r3, #1
 80065ca:	2202      	movs	r2, #2
 80065cc:	701a      	strb	r2, [r3, #0]
      break;
 80065ce:	e0f2      	b.n	80067b6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	885b      	ldrh	r3, [r3, #2]
 80065d4:	b2db      	uxtb	r3, r3
 80065d6:	2b05      	cmp	r3, #5
 80065d8:	f200 80ac 	bhi.w	8006734 <USBD_GetDescriptor+0x204>
 80065dc:	a201      	add	r2, pc, #4	@ (adr r2, 80065e4 <USBD_GetDescriptor+0xb4>)
 80065de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065e2:	bf00      	nop
 80065e4:	080065fd 	.word	0x080065fd
 80065e8:	08006631 	.word	0x08006631
 80065ec:	08006665 	.word	0x08006665
 80065f0:	08006699 	.word	0x08006699
 80065f4:	080066cd 	.word	0x080066cd
 80065f8:	08006701 	.word	0x08006701
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006602:	685b      	ldr	r3, [r3, #4]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d00b      	beq.n	8006620 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800660e:	685b      	ldr	r3, [r3, #4]
 8006610:	687a      	ldr	r2, [r7, #4]
 8006612:	7c12      	ldrb	r2, [r2, #16]
 8006614:	f107 0108 	add.w	r1, r7, #8
 8006618:	4610      	mov	r0, r2
 800661a:	4798      	blx	r3
 800661c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800661e:	e091      	b.n	8006744 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006620:	6839      	ldr	r1, [r7, #0]
 8006622:	6878      	ldr	r0, [r7, #4]
 8006624:	f000 facb 	bl	8006bbe <USBD_CtlError>
            err++;
 8006628:	7afb      	ldrb	r3, [r7, #11]
 800662a:	3301      	adds	r3, #1
 800662c:	72fb      	strb	r3, [r7, #11]
          break;
 800662e:	e089      	b.n	8006744 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006636:	689b      	ldr	r3, [r3, #8]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d00b      	beq.n	8006654 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006642:	689b      	ldr	r3, [r3, #8]
 8006644:	687a      	ldr	r2, [r7, #4]
 8006646:	7c12      	ldrb	r2, [r2, #16]
 8006648:	f107 0108 	add.w	r1, r7, #8
 800664c:	4610      	mov	r0, r2
 800664e:	4798      	blx	r3
 8006650:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006652:	e077      	b.n	8006744 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006654:	6839      	ldr	r1, [r7, #0]
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	f000 fab1 	bl	8006bbe <USBD_CtlError>
            err++;
 800665c:	7afb      	ldrb	r3, [r7, #11]
 800665e:	3301      	adds	r3, #1
 8006660:	72fb      	strb	r3, [r7, #11]
          break;
 8006662:	e06f      	b.n	8006744 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800666a:	68db      	ldr	r3, [r3, #12]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d00b      	beq.n	8006688 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006676:	68db      	ldr	r3, [r3, #12]
 8006678:	687a      	ldr	r2, [r7, #4]
 800667a:	7c12      	ldrb	r2, [r2, #16]
 800667c:	f107 0108 	add.w	r1, r7, #8
 8006680:	4610      	mov	r0, r2
 8006682:	4798      	blx	r3
 8006684:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006686:	e05d      	b.n	8006744 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006688:	6839      	ldr	r1, [r7, #0]
 800668a:	6878      	ldr	r0, [r7, #4]
 800668c:	f000 fa97 	bl	8006bbe <USBD_CtlError>
            err++;
 8006690:	7afb      	ldrb	r3, [r7, #11]
 8006692:	3301      	adds	r3, #1
 8006694:	72fb      	strb	r3, [r7, #11]
          break;
 8006696:	e055      	b.n	8006744 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800669e:	691b      	ldr	r3, [r3, #16]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d00b      	beq.n	80066bc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80066aa:	691b      	ldr	r3, [r3, #16]
 80066ac:	687a      	ldr	r2, [r7, #4]
 80066ae:	7c12      	ldrb	r2, [r2, #16]
 80066b0:	f107 0108 	add.w	r1, r7, #8
 80066b4:	4610      	mov	r0, r2
 80066b6:	4798      	blx	r3
 80066b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80066ba:	e043      	b.n	8006744 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80066bc:	6839      	ldr	r1, [r7, #0]
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	f000 fa7d 	bl	8006bbe <USBD_CtlError>
            err++;
 80066c4:	7afb      	ldrb	r3, [r7, #11]
 80066c6:	3301      	adds	r3, #1
 80066c8:	72fb      	strb	r3, [r7, #11]
          break;
 80066ca:	e03b      	b.n	8006744 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80066d2:	695b      	ldr	r3, [r3, #20]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d00b      	beq.n	80066f0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80066de:	695b      	ldr	r3, [r3, #20]
 80066e0:	687a      	ldr	r2, [r7, #4]
 80066e2:	7c12      	ldrb	r2, [r2, #16]
 80066e4:	f107 0108 	add.w	r1, r7, #8
 80066e8:	4610      	mov	r0, r2
 80066ea:	4798      	blx	r3
 80066ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80066ee:	e029      	b.n	8006744 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80066f0:	6839      	ldr	r1, [r7, #0]
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	f000 fa63 	bl	8006bbe <USBD_CtlError>
            err++;
 80066f8:	7afb      	ldrb	r3, [r7, #11]
 80066fa:	3301      	adds	r3, #1
 80066fc:	72fb      	strb	r3, [r7, #11]
          break;
 80066fe:	e021      	b.n	8006744 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006706:	699b      	ldr	r3, [r3, #24]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d00b      	beq.n	8006724 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006712:	699b      	ldr	r3, [r3, #24]
 8006714:	687a      	ldr	r2, [r7, #4]
 8006716:	7c12      	ldrb	r2, [r2, #16]
 8006718:	f107 0108 	add.w	r1, r7, #8
 800671c:	4610      	mov	r0, r2
 800671e:	4798      	blx	r3
 8006720:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006722:	e00f      	b.n	8006744 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006724:	6839      	ldr	r1, [r7, #0]
 8006726:	6878      	ldr	r0, [r7, #4]
 8006728:	f000 fa49 	bl	8006bbe <USBD_CtlError>
            err++;
 800672c:	7afb      	ldrb	r3, [r7, #11]
 800672e:	3301      	adds	r3, #1
 8006730:	72fb      	strb	r3, [r7, #11]
          break;
 8006732:	e007      	b.n	8006744 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006734:	6839      	ldr	r1, [r7, #0]
 8006736:	6878      	ldr	r0, [r7, #4]
 8006738:	f000 fa41 	bl	8006bbe <USBD_CtlError>
          err++;
 800673c:	7afb      	ldrb	r3, [r7, #11]
 800673e:	3301      	adds	r3, #1
 8006740:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8006742:	bf00      	nop
      }
      break;
 8006744:	e037      	b.n	80067b6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	7c1b      	ldrb	r3, [r3, #16]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d109      	bne.n	8006762 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006754:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006756:	f107 0208 	add.w	r2, r7, #8
 800675a:	4610      	mov	r0, r2
 800675c:	4798      	blx	r3
 800675e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006760:	e029      	b.n	80067b6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006762:	6839      	ldr	r1, [r7, #0]
 8006764:	6878      	ldr	r0, [r7, #4]
 8006766:	f000 fa2a 	bl	8006bbe <USBD_CtlError>
        err++;
 800676a:	7afb      	ldrb	r3, [r7, #11]
 800676c:	3301      	adds	r3, #1
 800676e:	72fb      	strb	r3, [r7, #11]
      break;
 8006770:	e021      	b.n	80067b6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	7c1b      	ldrb	r3, [r3, #16]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d10d      	bne.n	8006796 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006782:	f107 0208 	add.w	r2, r7, #8
 8006786:	4610      	mov	r0, r2
 8006788:	4798      	blx	r3
 800678a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	3301      	adds	r3, #1
 8006790:	2207      	movs	r2, #7
 8006792:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006794:	e00f      	b.n	80067b6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006796:	6839      	ldr	r1, [r7, #0]
 8006798:	6878      	ldr	r0, [r7, #4]
 800679a:	f000 fa10 	bl	8006bbe <USBD_CtlError>
        err++;
 800679e:	7afb      	ldrb	r3, [r7, #11]
 80067a0:	3301      	adds	r3, #1
 80067a2:	72fb      	strb	r3, [r7, #11]
      break;
 80067a4:	e007      	b.n	80067b6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80067a6:	6839      	ldr	r1, [r7, #0]
 80067a8:	6878      	ldr	r0, [r7, #4]
 80067aa:	f000 fa08 	bl	8006bbe <USBD_CtlError>
      err++;
 80067ae:	7afb      	ldrb	r3, [r7, #11]
 80067b0:	3301      	adds	r3, #1
 80067b2:	72fb      	strb	r3, [r7, #11]
      break;
 80067b4:	bf00      	nop
  }

  if (err != 0U)
 80067b6:	7afb      	ldrb	r3, [r7, #11]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d11e      	bne.n	80067fa <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	88db      	ldrh	r3, [r3, #6]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d016      	beq.n	80067f2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80067c4:	893b      	ldrh	r3, [r7, #8]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d00e      	beq.n	80067e8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	88da      	ldrh	r2, [r3, #6]
 80067ce:	893b      	ldrh	r3, [r7, #8]
 80067d0:	4293      	cmp	r3, r2
 80067d2:	bf28      	it	cs
 80067d4:	4613      	movcs	r3, r2
 80067d6:	b29b      	uxth	r3, r3
 80067d8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80067da:	893b      	ldrh	r3, [r7, #8]
 80067dc:	461a      	mov	r2, r3
 80067de:	68f9      	ldr	r1, [r7, #12]
 80067e0:	6878      	ldr	r0, [r7, #4]
 80067e2:	f000 fa69 	bl	8006cb8 <USBD_CtlSendData>
 80067e6:	e009      	b.n	80067fc <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80067e8:	6839      	ldr	r1, [r7, #0]
 80067ea:	6878      	ldr	r0, [r7, #4]
 80067ec:	f000 f9e7 	bl	8006bbe <USBD_CtlError>
 80067f0:	e004      	b.n	80067fc <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80067f2:	6878      	ldr	r0, [r7, #4]
 80067f4:	f000 faba 	bl	8006d6c <USBD_CtlSendStatus>
 80067f8:	e000      	b.n	80067fc <USBD_GetDescriptor+0x2cc>
    return;
 80067fa:	bf00      	nop
  }
}
 80067fc:	3710      	adds	r7, #16
 80067fe:	46bd      	mov	sp, r7
 8006800:	bd80      	pop	{r7, pc}
 8006802:	bf00      	nop

08006804 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b084      	sub	sp, #16
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
 800680c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	889b      	ldrh	r3, [r3, #4]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d131      	bne.n	800687a <USBD_SetAddress+0x76>
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	88db      	ldrh	r3, [r3, #6]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d12d      	bne.n	800687a <USBD_SetAddress+0x76>
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	885b      	ldrh	r3, [r3, #2]
 8006822:	2b7f      	cmp	r3, #127	@ 0x7f
 8006824:	d829      	bhi.n	800687a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	885b      	ldrh	r3, [r3, #2]
 800682a:	b2db      	uxtb	r3, r3
 800682c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006830:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006838:	b2db      	uxtb	r3, r3
 800683a:	2b03      	cmp	r3, #3
 800683c:	d104      	bne.n	8006848 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800683e:	6839      	ldr	r1, [r7, #0]
 8006840:	6878      	ldr	r0, [r7, #4]
 8006842:	f000 f9bc 	bl	8006bbe <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006846:	e01d      	b.n	8006884 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	7bfa      	ldrb	r2, [r7, #15]
 800684c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006850:	7bfb      	ldrb	r3, [r7, #15]
 8006852:	4619      	mov	r1, r3
 8006854:	6878      	ldr	r0, [r7, #4]
 8006856:	f003 fa07 	bl	8009c68 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800685a:	6878      	ldr	r0, [r7, #4]
 800685c:	f000 fa86 	bl	8006d6c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006860:	7bfb      	ldrb	r3, [r7, #15]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d004      	beq.n	8006870 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2202      	movs	r2, #2
 800686a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800686e:	e009      	b.n	8006884 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2201      	movs	r2, #1
 8006874:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006878:	e004      	b.n	8006884 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800687a:	6839      	ldr	r1, [r7, #0]
 800687c:	6878      	ldr	r0, [r7, #4]
 800687e:	f000 f99e 	bl	8006bbe <USBD_CtlError>
  }
}
 8006882:	bf00      	nop
 8006884:	bf00      	nop
 8006886:	3710      	adds	r7, #16
 8006888:	46bd      	mov	sp, r7
 800688a:	bd80      	pop	{r7, pc}

0800688c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b084      	sub	sp, #16
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
 8006894:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006896:	2300      	movs	r3, #0
 8006898:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	885b      	ldrh	r3, [r3, #2]
 800689e:	b2da      	uxtb	r2, r3
 80068a0:	4b4e      	ldr	r3, [pc, #312]	@ (80069dc <USBD_SetConfig+0x150>)
 80068a2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80068a4:	4b4d      	ldr	r3, [pc, #308]	@ (80069dc <USBD_SetConfig+0x150>)
 80068a6:	781b      	ldrb	r3, [r3, #0]
 80068a8:	2b01      	cmp	r3, #1
 80068aa:	d905      	bls.n	80068b8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80068ac:	6839      	ldr	r1, [r7, #0]
 80068ae:	6878      	ldr	r0, [r7, #4]
 80068b0:	f000 f985 	bl	8006bbe <USBD_CtlError>
    return USBD_FAIL;
 80068b4:	2303      	movs	r3, #3
 80068b6:	e08c      	b.n	80069d2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80068be:	b2db      	uxtb	r3, r3
 80068c0:	2b02      	cmp	r3, #2
 80068c2:	d002      	beq.n	80068ca <USBD_SetConfig+0x3e>
 80068c4:	2b03      	cmp	r3, #3
 80068c6:	d029      	beq.n	800691c <USBD_SetConfig+0x90>
 80068c8:	e075      	b.n	80069b6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80068ca:	4b44      	ldr	r3, [pc, #272]	@ (80069dc <USBD_SetConfig+0x150>)
 80068cc:	781b      	ldrb	r3, [r3, #0]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d020      	beq.n	8006914 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80068d2:	4b42      	ldr	r3, [pc, #264]	@ (80069dc <USBD_SetConfig+0x150>)
 80068d4:	781b      	ldrb	r3, [r3, #0]
 80068d6:	461a      	mov	r2, r3
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80068dc:	4b3f      	ldr	r3, [pc, #252]	@ (80069dc <USBD_SetConfig+0x150>)
 80068de:	781b      	ldrb	r3, [r3, #0]
 80068e0:	4619      	mov	r1, r3
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	f7fe ffe3 	bl	80058ae <USBD_SetClassConfig>
 80068e8:	4603      	mov	r3, r0
 80068ea:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80068ec:	7bfb      	ldrb	r3, [r7, #15]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d008      	beq.n	8006904 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80068f2:	6839      	ldr	r1, [r7, #0]
 80068f4:	6878      	ldr	r0, [r7, #4]
 80068f6:	f000 f962 	bl	8006bbe <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2202      	movs	r2, #2
 80068fe:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006902:	e065      	b.n	80069d0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006904:	6878      	ldr	r0, [r7, #4]
 8006906:	f000 fa31 	bl	8006d6c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2203      	movs	r2, #3
 800690e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8006912:	e05d      	b.n	80069d0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006914:	6878      	ldr	r0, [r7, #4]
 8006916:	f000 fa29 	bl	8006d6c <USBD_CtlSendStatus>
      break;
 800691a:	e059      	b.n	80069d0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800691c:	4b2f      	ldr	r3, [pc, #188]	@ (80069dc <USBD_SetConfig+0x150>)
 800691e:	781b      	ldrb	r3, [r3, #0]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d112      	bne.n	800694a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2202      	movs	r2, #2
 8006928:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800692c:	4b2b      	ldr	r3, [pc, #172]	@ (80069dc <USBD_SetConfig+0x150>)
 800692e:	781b      	ldrb	r3, [r3, #0]
 8006930:	461a      	mov	r2, r3
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006936:	4b29      	ldr	r3, [pc, #164]	@ (80069dc <USBD_SetConfig+0x150>)
 8006938:	781b      	ldrb	r3, [r3, #0]
 800693a:	4619      	mov	r1, r3
 800693c:	6878      	ldr	r0, [r7, #4]
 800693e:	f7fe ffd2 	bl	80058e6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006942:	6878      	ldr	r0, [r7, #4]
 8006944:	f000 fa12 	bl	8006d6c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006948:	e042      	b.n	80069d0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800694a:	4b24      	ldr	r3, [pc, #144]	@ (80069dc <USBD_SetConfig+0x150>)
 800694c:	781b      	ldrb	r3, [r3, #0]
 800694e:	461a      	mov	r2, r3
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	685b      	ldr	r3, [r3, #4]
 8006954:	429a      	cmp	r2, r3
 8006956:	d02a      	beq.n	80069ae <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	685b      	ldr	r3, [r3, #4]
 800695c:	b2db      	uxtb	r3, r3
 800695e:	4619      	mov	r1, r3
 8006960:	6878      	ldr	r0, [r7, #4]
 8006962:	f7fe ffc0 	bl	80058e6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006966:	4b1d      	ldr	r3, [pc, #116]	@ (80069dc <USBD_SetConfig+0x150>)
 8006968:	781b      	ldrb	r3, [r3, #0]
 800696a:	461a      	mov	r2, r3
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006970:	4b1a      	ldr	r3, [pc, #104]	@ (80069dc <USBD_SetConfig+0x150>)
 8006972:	781b      	ldrb	r3, [r3, #0]
 8006974:	4619      	mov	r1, r3
 8006976:	6878      	ldr	r0, [r7, #4]
 8006978:	f7fe ff99 	bl	80058ae <USBD_SetClassConfig>
 800697c:	4603      	mov	r3, r0
 800697e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006980:	7bfb      	ldrb	r3, [r7, #15]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d00f      	beq.n	80069a6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8006986:	6839      	ldr	r1, [r7, #0]
 8006988:	6878      	ldr	r0, [r7, #4]
 800698a:	f000 f918 	bl	8006bbe <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	685b      	ldr	r3, [r3, #4]
 8006992:	b2db      	uxtb	r3, r3
 8006994:	4619      	mov	r1, r3
 8006996:	6878      	ldr	r0, [r7, #4]
 8006998:	f7fe ffa5 	bl	80058e6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2202      	movs	r2, #2
 80069a0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80069a4:	e014      	b.n	80069d0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80069a6:	6878      	ldr	r0, [r7, #4]
 80069a8:	f000 f9e0 	bl	8006d6c <USBD_CtlSendStatus>
      break;
 80069ac:	e010      	b.n	80069d0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80069ae:	6878      	ldr	r0, [r7, #4]
 80069b0:	f000 f9dc 	bl	8006d6c <USBD_CtlSendStatus>
      break;
 80069b4:	e00c      	b.n	80069d0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80069b6:	6839      	ldr	r1, [r7, #0]
 80069b8:	6878      	ldr	r0, [r7, #4]
 80069ba:	f000 f900 	bl	8006bbe <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80069be:	4b07      	ldr	r3, [pc, #28]	@ (80069dc <USBD_SetConfig+0x150>)
 80069c0:	781b      	ldrb	r3, [r3, #0]
 80069c2:	4619      	mov	r1, r3
 80069c4:	6878      	ldr	r0, [r7, #4]
 80069c6:	f7fe ff8e 	bl	80058e6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80069ca:	2303      	movs	r3, #3
 80069cc:	73fb      	strb	r3, [r7, #15]
      break;
 80069ce:	bf00      	nop
  }

  return ret;
 80069d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80069d2:	4618      	mov	r0, r3
 80069d4:	3710      	adds	r7, #16
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bd80      	pop	{r7, pc}
 80069da:	bf00      	nop
 80069dc:	20000474 	.word	0x20000474

080069e0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b082      	sub	sp, #8
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
 80069e8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	88db      	ldrh	r3, [r3, #6]
 80069ee:	2b01      	cmp	r3, #1
 80069f0:	d004      	beq.n	80069fc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80069f2:	6839      	ldr	r1, [r7, #0]
 80069f4:	6878      	ldr	r0, [r7, #4]
 80069f6:	f000 f8e2 	bl	8006bbe <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80069fa:	e023      	b.n	8006a44 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006a02:	b2db      	uxtb	r3, r3
 8006a04:	2b02      	cmp	r3, #2
 8006a06:	dc02      	bgt.n	8006a0e <USBD_GetConfig+0x2e>
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	dc03      	bgt.n	8006a14 <USBD_GetConfig+0x34>
 8006a0c:	e015      	b.n	8006a3a <USBD_GetConfig+0x5a>
 8006a0e:	2b03      	cmp	r3, #3
 8006a10:	d00b      	beq.n	8006a2a <USBD_GetConfig+0x4a>
 8006a12:	e012      	b.n	8006a3a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2200      	movs	r2, #0
 8006a18:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	3308      	adds	r3, #8
 8006a1e:	2201      	movs	r2, #1
 8006a20:	4619      	mov	r1, r3
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	f000 f948 	bl	8006cb8 <USBD_CtlSendData>
        break;
 8006a28:	e00c      	b.n	8006a44 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	3304      	adds	r3, #4
 8006a2e:	2201      	movs	r2, #1
 8006a30:	4619      	mov	r1, r3
 8006a32:	6878      	ldr	r0, [r7, #4]
 8006a34:	f000 f940 	bl	8006cb8 <USBD_CtlSendData>
        break;
 8006a38:	e004      	b.n	8006a44 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006a3a:	6839      	ldr	r1, [r7, #0]
 8006a3c:	6878      	ldr	r0, [r7, #4]
 8006a3e:	f000 f8be 	bl	8006bbe <USBD_CtlError>
        break;
 8006a42:	bf00      	nop
}
 8006a44:	bf00      	nop
 8006a46:	3708      	adds	r7, #8
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	bd80      	pop	{r7, pc}

08006a4c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b082      	sub	sp, #8
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
 8006a54:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006a5c:	b2db      	uxtb	r3, r3
 8006a5e:	3b01      	subs	r3, #1
 8006a60:	2b02      	cmp	r3, #2
 8006a62:	d81e      	bhi.n	8006aa2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	88db      	ldrh	r3, [r3, #6]
 8006a68:	2b02      	cmp	r3, #2
 8006a6a:	d004      	beq.n	8006a76 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006a6c:	6839      	ldr	r1, [r7, #0]
 8006a6e:	6878      	ldr	r0, [r7, #4]
 8006a70:	f000 f8a5 	bl	8006bbe <USBD_CtlError>
        break;
 8006a74:	e01a      	b.n	8006aac <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2201      	movs	r2, #1
 8006a7a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d005      	beq.n	8006a92 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	68db      	ldr	r3, [r3, #12]
 8006a8a:	f043 0202 	orr.w	r2, r3, #2
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	330c      	adds	r3, #12
 8006a96:	2202      	movs	r2, #2
 8006a98:	4619      	mov	r1, r3
 8006a9a:	6878      	ldr	r0, [r7, #4]
 8006a9c:	f000 f90c 	bl	8006cb8 <USBD_CtlSendData>
      break;
 8006aa0:	e004      	b.n	8006aac <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006aa2:	6839      	ldr	r1, [r7, #0]
 8006aa4:	6878      	ldr	r0, [r7, #4]
 8006aa6:	f000 f88a 	bl	8006bbe <USBD_CtlError>
      break;
 8006aaa:	bf00      	nop
  }
}
 8006aac:	bf00      	nop
 8006aae:	3708      	adds	r7, #8
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	bd80      	pop	{r7, pc}

08006ab4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b082      	sub	sp, #8
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
 8006abc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	885b      	ldrh	r3, [r3, #2]
 8006ac2:	2b01      	cmp	r3, #1
 8006ac4:	d107      	bne.n	8006ad6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	2201      	movs	r2, #1
 8006aca:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006ace:	6878      	ldr	r0, [r7, #4]
 8006ad0:	f000 f94c 	bl	8006d6c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8006ad4:	e013      	b.n	8006afe <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	885b      	ldrh	r3, [r3, #2]
 8006ada:	2b02      	cmp	r3, #2
 8006adc:	d10b      	bne.n	8006af6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	889b      	ldrh	r3, [r3, #4]
 8006ae2:	0a1b      	lsrs	r3, r3, #8
 8006ae4:	b29b      	uxth	r3, r3
 8006ae6:	b2da      	uxtb	r2, r3
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	f000 f93c 	bl	8006d6c <USBD_CtlSendStatus>
}
 8006af4:	e003      	b.n	8006afe <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8006af6:	6839      	ldr	r1, [r7, #0]
 8006af8:	6878      	ldr	r0, [r7, #4]
 8006afa:	f000 f860 	bl	8006bbe <USBD_CtlError>
}
 8006afe:	bf00      	nop
 8006b00:	3708      	adds	r7, #8
 8006b02:	46bd      	mov	sp, r7
 8006b04:	bd80      	pop	{r7, pc}

08006b06 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b06:	b580      	push	{r7, lr}
 8006b08:	b082      	sub	sp, #8
 8006b0a:	af00      	add	r7, sp, #0
 8006b0c:	6078      	str	r0, [r7, #4]
 8006b0e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006b16:	b2db      	uxtb	r3, r3
 8006b18:	3b01      	subs	r3, #1
 8006b1a:	2b02      	cmp	r3, #2
 8006b1c:	d80b      	bhi.n	8006b36 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	885b      	ldrh	r3, [r3, #2]
 8006b22:	2b01      	cmp	r3, #1
 8006b24:	d10c      	bne.n	8006b40 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2200      	movs	r2, #0
 8006b2a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006b2e:	6878      	ldr	r0, [r7, #4]
 8006b30:	f000 f91c 	bl	8006d6c <USBD_CtlSendStatus>
      }
      break;
 8006b34:	e004      	b.n	8006b40 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006b36:	6839      	ldr	r1, [r7, #0]
 8006b38:	6878      	ldr	r0, [r7, #4]
 8006b3a:	f000 f840 	bl	8006bbe <USBD_CtlError>
      break;
 8006b3e:	e000      	b.n	8006b42 <USBD_ClrFeature+0x3c>
      break;
 8006b40:	bf00      	nop
  }
}
 8006b42:	bf00      	nop
 8006b44:	3708      	adds	r7, #8
 8006b46:	46bd      	mov	sp, r7
 8006b48:	bd80      	pop	{r7, pc}

08006b4a <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006b4a:	b580      	push	{r7, lr}
 8006b4c:	b084      	sub	sp, #16
 8006b4e:	af00      	add	r7, sp, #0
 8006b50:	6078      	str	r0, [r7, #4]
 8006b52:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	781a      	ldrb	r2, [r3, #0]
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	3301      	adds	r3, #1
 8006b64:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	781a      	ldrb	r2, [r3, #0]
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	3301      	adds	r3, #1
 8006b72:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006b74:	68f8      	ldr	r0, [r7, #12]
 8006b76:	f7ff fa40 	bl	8005ffa <SWAPBYTE>
 8006b7a:	4603      	mov	r3, r0
 8006b7c:	461a      	mov	r2, r3
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	3301      	adds	r3, #1
 8006b86:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	3301      	adds	r3, #1
 8006b8c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006b8e:	68f8      	ldr	r0, [r7, #12]
 8006b90:	f7ff fa33 	bl	8005ffa <SWAPBYTE>
 8006b94:	4603      	mov	r3, r0
 8006b96:	461a      	mov	r2, r3
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	3301      	adds	r3, #1
 8006ba0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	3301      	adds	r3, #1
 8006ba6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006ba8:	68f8      	ldr	r0, [r7, #12]
 8006baa:	f7ff fa26 	bl	8005ffa <SWAPBYTE>
 8006bae:	4603      	mov	r3, r0
 8006bb0:	461a      	mov	r2, r3
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	80da      	strh	r2, [r3, #6]
}
 8006bb6:	bf00      	nop
 8006bb8:	3710      	adds	r7, #16
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	bd80      	pop	{r7, pc}

08006bbe <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006bbe:	b580      	push	{r7, lr}
 8006bc0:	b082      	sub	sp, #8
 8006bc2:	af00      	add	r7, sp, #0
 8006bc4:	6078      	str	r0, [r7, #4]
 8006bc6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006bc8:	2180      	movs	r1, #128	@ 0x80
 8006bca:	6878      	ldr	r0, [r7, #4]
 8006bcc:	f002 ffe2 	bl	8009b94 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006bd0:	2100      	movs	r1, #0
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	f002 ffde 	bl	8009b94 <USBD_LL_StallEP>
}
 8006bd8:	bf00      	nop
 8006bda:	3708      	adds	r7, #8
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	bd80      	pop	{r7, pc}

08006be0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b086      	sub	sp, #24
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	60f8      	str	r0, [r7, #12]
 8006be8:	60b9      	str	r1, [r7, #8]
 8006bea:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006bec:	2300      	movs	r3, #0
 8006bee:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d042      	beq.n	8006c7c <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8006bfa:	6938      	ldr	r0, [r7, #16]
 8006bfc:	f000 f842 	bl	8006c84 <USBD_GetLen>
 8006c00:	4603      	mov	r3, r0
 8006c02:	3301      	adds	r3, #1
 8006c04:	005b      	lsls	r3, r3, #1
 8006c06:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006c0a:	d808      	bhi.n	8006c1e <USBD_GetString+0x3e>
 8006c0c:	6938      	ldr	r0, [r7, #16]
 8006c0e:	f000 f839 	bl	8006c84 <USBD_GetLen>
 8006c12:	4603      	mov	r3, r0
 8006c14:	3301      	adds	r3, #1
 8006c16:	b29b      	uxth	r3, r3
 8006c18:	005b      	lsls	r3, r3, #1
 8006c1a:	b29a      	uxth	r2, r3
 8006c1c:	e001      	b.n	8006c22 <USBD_GetString+0x42>
 8006c1e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006c26:	7dfb      	ldrb	r3, [r7, #23]
 8006c28:	68ba      	ldr	r2, [r7, #8]
 8006c2a:	4413      	add	r3, r2
 8006c2c:	687a      	ldr	r2, [r7, #4]
 8006c2e:	7812      	ldrb	r2, [r2, #0]
 8006c30:	701a      	strb	r2, [r3, #0]
  idx++;
 8006c32:	7dfb      	ldrb	r3, [r7, #23]
 8006c34:	3301      	adds	r3, #1
 8006c36:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006c38:	7dfb      	ldrb	r3, [r7, #23]
 8006c3a:	68ba      	ldr	r2, [r7, #8]
 8006c3c:	4413      	add	r3, r2
 8006c3e:	2203      	movs	r2, #3
 8006c40:	701a      	strb	r2, [r3, #0]
  idx++;
 8006c42:	7dfb      	ldrb	r3, [r7, #23]
 8006c44:	3301      	adds	r3, #1
 8006c46:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006c48:	e013      	b.n	8006c72 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8006c4a:	7dfb      	ldrb	r3, [r7, #23]
 8006c4c:	68ba      	ldr	r2, [r7, #8]
 8006c4e:	4413      	add	r3, r2
 8006c50:	693a      	ldr	r2, [r7, #16]
 8006c52:	7812      	ldrb	r2, [r2, #0]
 8006c54:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006c56:	693b      	ldr	r3, [r7, #16]
 8006c58:	3301      	adds	r3, #1
 8006c5a:	613b      	str	r3, [r7, #16]
    idx++;
 8006c5c:	7dfb      	ldrb	r3, [r7, #23]
 8006c5e:	3301      	adds	r3, #1
 8006c60:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006c62:	7dfb      	ldrb	r3, [r7, #23]
 8006c64:	68ba      	ldr	r2, [r7, #8]
 8006c66:	4413      	add	r3, r2
 8006c68:	2200      	movs	r2, #0
 8006c6a:	701a      	strb	r2, [r3, #0]
    idx++;
 8006c6c:	7dfb      	ldrb	r3, [r7, #23]
 8006c6e:	3301      	adds	r3, #1
 8006c70:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006c72:	693b      	ldr	r3, [r7, #16]
 8006c74:	781b      	ldrb	r3, [r3, #0]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d1e7      	bne.n	8006c4a <USBD_GetString+0x6a>
 8006c7a:	e000      	b.n	8006c7e <USBD_GetString+0x9e>
    return;
 8006c7c:	bf00      	nop
  }
}
 8006c7e:	3718      	adds	r7, #24
 8006c80:	46bd      	mov	sp, r7
 8006c82:	bd80      	pop	{r7, pc}

08006c84 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006c84:	b480      	push	{r7}
 8006c86:	b085      	sub	sp, #20
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006c94:	e005      	b.n	8006ca2 <USBD_GetLen+0x1e>
  {
    len++;
 8006c96:	7bfb      	ldrb	r3, [r7, #15]
 8006c98:	3301      	adds	r3, #1
 8006c9a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006c9c:	68bb      	ldr	r3, [r7, #8]
 8006c9e:	3301      	adds	r3, #1
 8006ca0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006ca2:	68bb      	ldr	r3, [r7, #8]
 8006ca4:	781b      	ldrb	r3, [r3, #0]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d1f5      	bne.n	8006c96 <USBD_GetLen+0x12>
  }

  return len;
 8006caa:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cac:	4618      	mov	r0, r3
 8006cae:	3714      	adds	r7, #20
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb6:	4770      	bx	lr

08006cb8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b084      	sub	sp, #16
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	60f8      	str	r0, [r7, #12]
 8006cc0:	60b9      	str	r1, [r7, #8]
 8006cc2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	2202      	movs	r2, #2
 8006cc8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	687a      	ldr	r2, [r7, #4]
 8006cd0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	687a      	ldr	r2, [r7, #4]
 8006cd6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	68ba      	ldr	r2, [r7, #8]
 8006cdc:	2100      	movs	r1, #0
 8006cde:	68f8      	ldr	r0, [r7, #12]
 8006ce0:	f002 ffe1 	bl	8009ca6 <USBD_LL_Transmit>

  return USBD_OK;
 8006ce4:	2300      	movs	r3, #0
}
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	3710      	adds	r7, #16
 8006cea:	46bd      	mov	sp, r7
 8006cec:	bd80      	pop	{r7, pc}

08006cee <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006cee:	b580      	push	{r7, lr}
 8006cf0:	b084      	sub	sp, #16
 8006cf2:	af00      	add	r7, sp, #0
 8006cf4:	60f8      	str	r0, [r7, #12]
 8006cf6:	60b9      	str	r1, [r7, #8]
 8006cf8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	68ba      	ldr	r2, [r7, #8]
 8006cfe:	2100      	movs	r1, #0
 8006d00:	68f8      	ldr	r0, [r7, #12]
 8006d02:	f002 ffd0 	bl	8009ca6 <USBD_LL_Transmit>

  return USBD_OK;
 8006d06:	2300      	movs	r3, #0
}
 8006d08:	4618      	mov	r0, r3
 8006d0a:	3710      	adds	r7, #16
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	bd80      	pop	{r7, pc}

08006d10 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b084      	sub	sp, #16
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	60f8      	str	r0, [r7, #12]
 8006d18:	60b9      	str	r1, [r7, #8]
 8006d1a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	2203      	movs	r2, #3
 8006d20:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	687a      	ldr	r2, [r7, #4]
 8006d28:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	687a      	ldr	r2, [r7, #4]
 8006d30:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	68ba      	ldr	r2, [r7, #8]
 8006d38:	2100      	movs	r1, #0
 8006d3a:	68f8      	ldr	r0, [r7, #12]
 8006d3c:	f002 ffd4 	bl	8009ce8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006d40:	2300      	movs	r3, #0
}
 8006d42:	4618      	mov	r0, r3
 8006d44:	3710      	adds	r7, #16
 8006d46:	46bd      	mov	sp, r7
 8006d48:	bd80      	pop	{r7, pc}

08006d4a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006d4a:	b580      	push	{r7, lr}
 8006d4c:	b084      	sub	sp, #16
 8006d4e:	af00      	add	r7, sp, #0
 8006d50:	60f8      	str	r0, [r7, #12]
 8006d52:	60b9      	str	r1, [r7, #8]
 8006d54:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	68ba      	ldr	r2, [r7, #8]
 8006d5a:	2100      	movs	r1, #0
 8006d5c:	68f8      	ldr	r0, [r7, #12]
 8006d5e:	f002 ffc3 	bl	8009ce8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006d62:	2300      	movs	r3, #0
}
 8006d64:	4618      	mov	r0, r3
 8006d66:	3710      	adds	r7, #16
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	bd80      	pop	{r7, pc}

08006d6c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b082      	sub	sp, #8
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2204      	movs	r2, #4
 8006d78:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	2200      	movs	r2, #0
 8006d80:	2100      	movs	r1, #0
 8006d82:	6878      	ldr	r0, [r7, #4]
 8006d84:	f002 ff8f 	bl	8009ca6 <USBD_LL_Transmit>

  return USBD_OK;
 8006d88:	2300      	movs	r3, #0
}
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	3708      	adds	r7, #8
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	bd80      	pop	{r7, pc}

08006d92 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006d92:	b580      	push	{r7, lr}
 8006d94:	b082      	sub	sp, #8
 8006d96:	af00      	add	r7, sp, #0
 8006d98:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2205      	movs	r2, #5
 8006d9e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006da2:	2300      	movs	r3, #0
 8006da4:	2200      	movs	r2, #0
 8006da6:	2100      	movs	r1, #0
 8006da8:	6878      	ldr	r0, [r7, #4]
 8006daa:	f002 ff9d 	bl	8009ce8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006dae:	2300      	movs	r3, #0
}
 8006db0:	4618      	mov	r0, r3
 8006db2:	3708      	adds	r7, #8
 8006db4:	46bd      	mov	sp, r7
 8006db6:	bd80      	pop	{r7, pc}

08006db8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006db8:	b480      	push	{r7}
 8006dba:	b085      	sub	sp, #20
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	4603      	mov	r3, r0
 8006dc0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8006dc6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006dca:	2b84      	cmp	r3, #132	@ 0x84
 8006dcc:	d005      	beq.n	8006dda <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8006dce:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	4413      	add	r3, r2
 8006dd6:	3303      	adds	r3, #3
 8006dd8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8006dda:	68fb      	ldr	r3, [r7, #12]
}
 8006ddc:	4618      	mov	r0, r3
 8006dde:	3714      	adds	r7, #20
 8006de0:	46bd      	mov	sp, r7
 8006de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de6:	4770      	bx	lr

08006de8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006dec:	f001 f896 	bl	8007f1c <vTaskStartScheduler>
  
  return osOK;
 8006df0:	2300      	movs	r3, #0
}
 8006df2:	4618      	mov	r0, r3
 8006df4:	bd80      	pop	{r7, pc}

08006df6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006df6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006df8:	b089      	sub	sp, #36	@ 0x24
 8006dfa:	af04      	add	r7, sp, #16
 8006dfc:	6078      	str	r0, [r7, #4]
 8006dfe:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	695b      	ldr	r3, [r3, #20]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d020      	beq.n	8006e4a <osThreadCreate+0x54>
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	699b      	ldr	r3, [r3, #24]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d01c      	beq.n	8006e4a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	685c      	ldr	r4, [r3, #4]
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	691e      	ldr	r6, [r3, #16]
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006e22:	4618      	mov	r0, r3
 8006e24:	f7ff ffc8 	bl	8006db8 <makeFreeRtosPriority>
 8006e28:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	695b      	ldr	r3, [r3, #20]
 8006e2e:	687a      	ldr	r2, [r7, #4]
 8006e30:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006e32:	9202      	str	r2, [sp, #8]
 8006e34:	9301      	str	r3, [sp, #4]
 8006e36:	9100      	str	r1, [sp, #0]
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	4632      	mov	r2, r6
 8006e3c:	4629      	mov	r1, r5
 8006e3e:	4620      	mov	r0, r4
 8006e40:	f000 fd62 	bl	8007908 <xTaskCreateStatic>
 8006e44:	4603      	mov	r3, r0
 8006e46:	60fb      	str	r3, [r7, #12]
 8006e48:	e01c      	b.n	8006e84 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	685c      	ldr	r4, [r3, #4]
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006e56:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006e5e:	4618      	mov	r0, r3
 8006e60:	f7ff ffaa 	bl	8006db8 <makeFreeRtosPriority>
 8006e64:	4602      	mov	r2, r0
 8006e66:	f107 030c 	add.w	r3, r7, #12
 8006e6a:	9301      	str	r3, [sp, #4]
 8006e6c:	9200      	str	r2, [sp, #0]
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	4632      	mov	r2, r6
 8006e72:	4629      	mov	r1, r5
 8006e74:	4620      	mov	r0, r4
 8006e76:	f000 fda7 	bl	80079c8 <xTaskCreate>
 8006e7a:	4603      	mov	r3, r0
 8006e7c:	2b01      	cmp	r3, #1
 8006e7e:	d001      	beq.n	8006e84 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8006e80:	2300      	movs	r3, #0
 8006e82:	e000      	b.n	8006e86 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006e84:	68fb      	ldr	r3, [r7, #12]
}
 8006e86:	4618      	mov	r0, r3
 8006e88:	3714      	adds	r7, #20
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006e8e <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8006e8e:	b580      	push	{r7, lr}
 8006e90:	b086      	sub	sp, #24
 8006e92:	af02      	add	r7, sp, #8
 8006e94:	6078      	str	r0, [r7, #4]
 8006e96:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	685b      	ldr	r3, [r3, #4]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d00f      	beq.n	8006ec0 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	2b01      	cmp	r3, #1
 8006ea4:	d10a      	bne.n	8006ebc <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	685b      	ldr	r3, [r3, #4]
 8006eaa:	2203      	movs	r2, #3
 8006eac:	9200      	str	r2, [sp, #0]
 8006eae:	2200      	movs	r2, #0
 8006eb0:	2100      	movs	r1, #0
 8006eb2:	2001      	movs	r0, #1
 8006eb4:	f000 f93c 	bl	8007130 <xQueueGenericCreateStatic>
 8006eb8:	4603      	mov	r3, r0
 8006eba:	e016      	b.n	8006eea <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	e014      	b.n	8006eea <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	2b01      	cmp	r3, #1
 8006ec4:	d110      	bne.n	8006ee8 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8006ec6:	2203      	movs	r2, #3
 8006ec8:	2100      	movs	r1, #0
 8006eca:	2001      	movs	r0, #1
 8006ecc:	f000 f9ad 	bl	800722a <xQueueGenericCreate>
 8006ed0:	60f8      	str	r0, [r7, #12]
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d005      	beq.n	8006ee4 <osSemaphoreCreate+0x56>
 8006ed8:	2300      	movs	r3, #0
 8006eda:	2200      	movs	r2, #0
 8006edc:	2100      	movs	r1, #0
 8006ede:	68f8      	ldr	r0, [r7, #12]
 8006ee0:	f000 f9fe 	bl	80072e0 <xQueueGenericSend>
      return sema;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	e000      	b.n	8006eea <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8006ee8:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8006eea:	4618      	mov	r0, r3
 8006eec:	3710      	adds	r7, #16
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	bd80      	pop	{r7, pc}

08006ef2 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006ef2:	b480      	push	{r7}
 8006ef4:	b083      	sub	sp, #12
 8006ef6:	af00      	add	r7, sp, #0
 8006ef8:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	f103 0208 	add.w	r2, r3, #8
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	f04f 32ff 	mov.w	r2, #4294967295
 8006f0a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	f103 0208 	add.w	r2, r3, #8
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	f103 0208 	add.w	r2, r3, #8
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2200      	movs	r2, #0
 8006f24:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006f26:	bf00      	nop
 8006f28:	370c      	adds	r7, #12
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f30:	4770      	bx	lr

08006f32 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006f32:	b480      	push	{r7}
 8006f34:	b083      	sub	sp, #12
 8006f36:	af00      	add	r7, sp, #0
 8006f38:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006f40:	bf00      	nop
 8006f42:	370c      	adds	r7, #12
 8006f44:	46bd      	mov	sp, r7
 8006f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4a:	4770      	bx	lr

08006f4c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006f4c:	b480      	push	{r7}
 8006f4e:	b085      	sub	sp, #20
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
 8006f54:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	685b      	ldr	r3, [r3, #4]
 8006f5a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	68fa      	ldr	r2, [r7, #12]
 8006f60:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	689a      	ldr	r2, [r3, #8]
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	689b      	ldr	r3, [r3, #8]
 8006f6e:	683a      	ldr	r2, [r7, #0]
 8006f70:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	683a      	ldr	r2, [r7, #0]
 8006f76:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	687a      	ldr	r2, [r7, #4]
 8006f7c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	1c5a      	adds	r2, r3, #1
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	601a      	str	r2, [r3, #0]
}
 8006f88:	bf00      	nop
 8006f8a:	3714      	adds	r7, #20
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f92:	4770      	bx	lr

08006f94 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006f94:	b480      	push	{r7}
 8006f96:	b085      	sub	sp, #20
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
 8006f9c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006fa4:	68bb      	ldr	r3, [r7, #8]
 8006fa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006faa:	d103      	bne.n	8006fb4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	691b      	ldr	r3, [r3, #16]
 8006fb0:	60fb      	str	r3, [r7, #12]
 8006fb2:	e00c      	b.n	8006fce <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	3308      	adds	r3, #8
 8006fb8:	60fb      	str	r3, [r7, #12]
 8006fba:	e002      	b.n	8006fc2 <vListInsert+0x2e>
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	685b      	ldr	r3, [r3, #4]
 8006fc0:	60fb      	str	r3, [r7, #12]
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	685b      	ldr	r3, [r3, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	68ba      	ldr	r2, [r7, #8]
 8006fca:	429a      	cmp	r2, r3
 8006fcc:	d2f6      	bcs.n	8006fbc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	685a      	ldr	r2, [r3, #4]
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	685b      	ldr	r3, [r3, #4]
 8006fda:	683a      	ldr	r2, [r7, #0]
 8006fdc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	68fa      	ldr	r2, [r7, #12]
 8006fe2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	683a      	ldr	r2, [r7, #0]
 8006fe8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	687a      	ldr	r2, [r7, #4]
 8006fee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	1c5a      	adds	r2, r3, #1
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	601a      	str	r2, [r3, #0]
}
 8006ffa:	bf00      	nop
 8006ffc:	3714      	adds	r7, #20
 8006ffe:	46bd      	mov	sp, r7
 8007000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007004:	4770      	bx	lr

08007006 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007006:	b480      	push	{r7}
 8007008:	b085      	sub	sp, #20
 800700a:	af00      	add	r7, sp, #0
 800700c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	691b      	ldr	r3, [r3, #16]
 8007012:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	685b      	ldr	r3, [r3, #4]
 8007018:	687a      	ldr	r2, [r7, #4]
 800701a:	6892      	ldr	r2, [r2, #8]
 800701c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	689b      	ldr	r3, [r3, #8]
 8007022:	687a      	ldr	r2, [r7, #4]
 8007024:	6852      	ldr	r2, [r2, #4]
 8007026:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	685b      	ldr	r3, [r3, #4]
 800702c:	687a      	ldr	r2, [r7, #4]
 800702e:	429a      	cmp	r2, r3
 8007030:	d103      	bne.n	800703a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	689a      	ldr	r2, [r3, #8]
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2200      	movs	r2, #0
 800703e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	1e5a      	subs	r2, r3, #1
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	681b      	ldr	r3, [r3, #0]
}
 800704e:	4618      	mov	r0, r3
 8007050:	3714      	adds	r7, #20
 8007052:	46bd      	mov	sp, r7
 8007054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007058:	4770      	bx	lr
	...

0800705c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b084      	sub	sp, #16
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
 8007064:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d10b      	bne.n	8007088 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007070:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007074:	f383 8811 	msr	BASEPRI, r3
 8007078:	f3bf 8f6f 	isb	sy
 800707c:	f3bf 8f4f 	dsb	sy
 8007080:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007082:	bf00      	nop
 8007084:	bf00      	nop
 8007086:	e7fd      	b.n	8007084 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007088:	f001 febe 	bl	8008e08 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	681a      	ldr	r2, [r3, #0]
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007094:	68f9      	ldr	r1, [r7, #12]
 8007096:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007098:	fb01 f303 	mul.w	r3, r1, r3
 800709c:	441a      	add	r2, r3
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	2200      	movs	r2, #0
 80070a6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	681a      	ldr	r2, [r3, #0]
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	681a      	ldr	r2, [r3, #0]
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070b8:	3b01      	subs	r3, #1
 80070ba:	68f9      	ldr	r1, [r7, #12]
 80070bc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80070be:	fb01 f303 	mul.w	r3, r1, r3
 80070c2:	441a      	add	r2, r3
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	22ff      	movs	r2, #255	@ 0xff
 80070cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	22ff      	movs	r2, #255	@ 0xff
 80070d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d114      	bne.n	8007108 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	691b      	ldr	r3, [r3, #16]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d01a      	beq.n	800711c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	3310      	adds	r3, #16
 80070ea:	4618      	mov	r0, r3
 80070ec:	f001 f970 	bl	80083d0 <xTaskRemoveFromEventList>
 80070f0:	4603      	mov	r3, r0
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d012      	beq.n	800711c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80070f6:	4b0d      	ldr	r3, [pc, #52]	@ (800712c <xQueueGenericReset+0xd0>)
 80070f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80070fc:	601a      	str	r2, [r3, #0]
 80070fe:	f3bf 8f4f 	dsb	sy
 8007102:	f3bf 8f6f 	isb	sy
 8007106:	e009      	b.n	800711c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	3310      	adds	r3, #16
 800710c:	4618      	mov	r0, r3
 800710e:	f7ff fef0 	bl	8006ef2 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	3324      	adds	r3, #36	@ 0x24
 8007116:	4618      	mov	r0, r3
 8007118:	f7ff feeb 	bl	8006ef2 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800711c:	f001 fea6 	bl	8008e6c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007120:	2301      	movs	r3, #1
}
 8007122:	4618      	mov	r0, r3
 8007124:	3710      	adds	r7, #16
 8007126:	46bd      	mov	sp, r7
 8007128:	bd80      	pop	{r7, pc}
 800712a:	bf00      	nop
 800712c:	e000ed04 	.word	0xe000ed04

08007130 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007130:	b580      	push	{r7, lr}
 8007132:	b08e      	sub	sp, #56	@ 0x38
 8007134:	af02      	add	r7, sp, #8
 8007136:	60f8      	str	r0, [r7, #12]
 8007138:	60b9      	str	r1, [r7, #8]
 800713a:	607a      	str	r2, [r7, #4]
 800713c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d10b      	bne.n	800715c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8007144:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007148:	f383 8811 	msr	BASEPRI, r3
 800714c:	f3bf 8f6f 	isb	sy
 8007150:	f3bf 8f4f 	dsb	sy
 8007154:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007156:	bf00      	nop
 8007158:	bf00      	nop
 800715a:	e7fd      	b.n	8007158 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d10b      	bne.n	800717a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8007162:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007166:	f383 8811 	msr	BASEPRI, r3
 800716a:	f3bf 8f6f 	isb	sy
 800716e:	f3bf 8f4f 	dsb	sy
 8007172:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007174:	bf00      	nop
 8007176:	bf00      	nop
 8007178:	e7fd      	b.n	8007176 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d002      	beq.n	8007186 <xQueueGenericCreateStatic+0x56>
 8007180:	68bb      	ldr	r3, [r7, #8]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d001      	beq.n	800718a <xQueueGenericCreateStatic+0x5a>
 8007186:	2301      	movs	r3, #1
 8007188:	e000      	b.n	800718c <xQueueGenericCreateStatic+0x5c>
 800718a:	2300      	movs	r3, #0
 800718c:	2b00      	cmp	r3, #0
 800718e:	d10b      	bne.n	80071a8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8007190:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007194:	f383 8811 	msr	BASEPRI, r3
 8007198:	f3bf 8f6f 	isb	sy
 800719c:	f3bf 8f4f 	dsb	sy
 80071a0:	623b      	str	r3, [r7, #32]
}
 80071a2:	bf00      	nop
 80071a4:	bf00      	nop
 80071a6:	e7fd      	b.n	80071a4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d102      	bne.n	80071b4 <xQueueGenericCreateStatic+0x84>
 80071ae:	68bb      	ldr	r3, [r7, #8]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d101      	bne.n	80071b8 <xQueueGenericCreateStatic+0x88>
 80071b4:	2301      	movs	r3, #1
 80071b6:	e000      	b.n	80071ba <xQueueGenericCreateStatic+0x8a>
 80071b8:	2300      	movs	r3, #0
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d10b      	bne.n	80071d6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80071be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071c2:	f383 8811 	msr	BASEPRI, r3
 80071c6:	f3bf 8f6f 	isb	sy
 80071ca:	f3bf 8f4f 	dsb	sy
 80071ce:	61fb      	str	r3, [r7, #28]
}
 80071d0:	bf00      	nop
 80071d2:	bf00      	nop
 80071d4:	e7fd      	b.n	80071d2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80071d6:	2348      	movs	r3, #72	@ 0x48
 80071d8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80071da:	697b      	ldr	r3, [r7, #20]
 80071dc:	2b48      	cmp	r3, #72	@ 0x48
 80071de:	d00b      	beq.n	80071f8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80071e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071e4:	f383 8811 	msr	BASEPRI, r3
 80071e8:	f3bf 8f6f 	isb	sy
 80071ec:	f3bf 8f4f 	dsb	sy
 80071f0:	61bb      	str	r3, [r7, #24]
}
 80071f2:	bf00      	nop
 80071f4:	bf00      	nop
 80071f6:	e7fd      	b.n	80071f4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80071f8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80071fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007200:	2b00      	cmp	r3, #0
 8007202:	d00d      	beq.n	8007220 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007204:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007206:	2201      	movs	r2, #1
 8007208:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800720c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8007210:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007212:	9300      	str	r3, [sp, #0]
 8007214:	4613      	mov	r3, r2
 8007216:	687a      	ldr	r2, [r7, #4]
 8007218:	68b9      	ldr	r1, [r7, #8]
 800721a:	68f8      	ldr	r0, [r7, #12]
 800721c:	f000 f840 	bl	80072a0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007220:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8007222:	4618      	mov	r0, r3
 8007224:	3730      	adds	r7, #48	@ 0x30
 8007226:	46bd      	mov	sp, r7
 8007228:	bd80      	pop	{r7, pc}

0800722a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800722a:	b580      	push	{r7, lr}
 800722c:	b08a      	sub	sp, #40	@ 0x28
 800722e:	af02      	add	r7, sp, #8
 8007230:	60f8      	str	r0, [r7, #12]
 8007232:	60b9      	str	r1, [r7, #8]
 8007234:	4613      	mov	r3, r2
 8007236:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d10b      	bne.n	8007256 <xQueueGenericCreate+0x2c>
	__asm volatile
 800723e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007242:	f383 8811 	msr	BASEPRI, r3
 8007246:	f3bf 8f6f 	isb	sy
 800724a:	f3bf 8f4f 	dsb	sy
 800724e:	613b      	str	r3, [r7, #16]
}
 8007250:	bf00      	nop
 8007252:	bf00      	nop
 8007254:	e7fd      	b.n	8007252 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	68ba      	ldr	r2, [r7, #8]
 800725a:	fb02 f303 	mul.w	r3, r2, r3
 800725e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007260:	69fb      	ldr	r3, [r7, #28]
 8007262:	3348      	adds	r3, #72	@ 0x48
 8007264:	4618      	mov	r0, r3
 8007266:	f001 feaf 	bl	8008fc8 <pvPortMalloc>
 800726a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800726c:	69bb      	ldr	r3, [r7, #24]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d011      	beq.n	8007296 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007272:	69bb      	ldr	r3, [r7, #24]
 8007274:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007276:	697b      	ldr	r3, [r7, #20]
 8007278:	3348      	adds	r3, #72	@ 0x48
 800727a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800727c:	69bb      	ldr	r3, [r7, #24]
 800727e:	2200      	movs	r2, #0
 8007280:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007284:	79fa      	ldrb	r2, [r7, #7]
 8007286:	69bb      	ldr	r3, [r7, #24]
 8007288:	9300      	str	r3, [sp, #0]
 800728a:	4613      	mov	r3, r2
 800728c:	697a      	ldr	r2, [r7, #20]
 800728e:	68b9      	ldr	r1, [r7, #8]
 8007290:	68f8      	ldr	r0, [r7, #12]
 8007292:	f000 f805 	bl	80072a0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007296:	69bb      	ldr	r3, [r7, #24]
	}
 8007298:	4618      	mov	r0, r3
 800729a:	3720      	adds	r7, #32
 800729c:	46bd      	mov	sp, r7
 800729e:	bd80      	pop	{r7, pc}

080072a0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b084      	sub	sp, #16
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	60f8      	str	r0, [r7, #12]
 80072a8:	60b9      	str	r1, [r7, #8]
 80072aa:	607a      	str	r2, [r7, #4]
 80072ac:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80072ae:	68bb      	ldr	r3, [r7, #8]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d103      	bne.n	80072bc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80072b4:	69bb      	ldr	r3, [r7, #24]
 80072b6:	69ba      	ldr	r2, [r7, #24]
 80072b8:	601a      	str	r2, [r3, #0]
 80072ba:	e002      	b.n	80072c2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80072bc:	69bb      	ldr	r3, [r7, #24]
 80072be:	687a      	ldr	r2, [r7, #4]
 80072c0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80072c2:	69bb      	ldr	r3, [r7, #24]
 80072c4:	68fa      	ldr	r2, [r7, #12]
 80072c6:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80072c8:	69bb      	ldr	r3, [r7, #24]
 80072ca:	68ba      	ldr	r2, [r7, #8]
 80072cc:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80072ce:	2101      	movs	r1, #1
 80072d0:	69b8      	ldr	r0, [r7, #24]
 80072d2:	f7ff fec3 	bl	800705c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80072d6:	bf00      	nop
 80072d8:	3710      	adds	r7, #16
 80072da:	46bd      	mov	sp, r7
 80072dc:	bd80      	pop	{r7, pc}
	...

080072e0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b08e      	sub	sp, #56	@ 0x38
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	60f8      	str	r0, [r7, #12]
 80072e8:	60b9      	str	r1, [r7, #8]
 80072ea:	607a      	str	r2, [r7, #4]
 80072ec:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80072ee:	2300      	movs	r3, #0
 80072f0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80072f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d10b      	bne.n	8007314 <xQueueGenericSend+0x34>
	__asm volatile
 80072fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007300:	f383 8811 	msr	BASEPRI, r3
 8007304:	f3bf 8f6f 	isb	sy
 8007308:	f3bf 8f4f 	dsb	sy
 800730c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800730e:	bf00      	nop
 8007310:	bf00      	nop
 8007312:	e7fd      	b.n	8007310 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007314:	68bb      	ldr	r3, [r7, #8]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d103      	bne.n	8007322 <xQueueGenericSend+0x42>
 800731a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800731c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800731e:	2b00      	cmp	r3, #0
 8007320:	d101      	bne.n	8007326 <xQueueGenericSend+0x46>
 8007322:	2301      	movs	r3, #1
 8007324:	e000      	b.n	8007328 <xQueueGenericSend+0x48>
 8007326:	2300      	movs	r3, #0
 8007328:	2b00      	cmp	r3, #0
 800732a:	d10b      	bne.n	8007344 <xQueueGenericSend+0x64>
	__asm volatile
 800732c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007330:	f383 8811 	msr	BASEPRI, r3
 8007334:	f3bf 8f6f 	isb	sy
 8007338:	f3bf 8f4f 	dsb	sy
 800733c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800733e:	bf00      	nop
 8007340:	bf00      	nop
 8007342:	e7fd      	b.n	8007340 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007344:	683b      	ldr	r3, [r7, #0]
 8007346:	2b02      	cmp	r3, #2
 8007348:	d103      	bne.n	8007352 <xQueueGenericSend+0x72>
 800734a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800734c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800734e:	2b01      	cmp	r3, #1
 8007350:	d101      	bne.n	8007356 <xQueueGenericSend+0x76>
 8007352:	2301      	movs	r3, #1
 8007354:	e000      	b.n	8007358 <xQueueGenericSend+0x78>
 8007356:	2300      	movs	r3, #0
 8007358:	2b00      	cmp	r3, #0
 800735a:	d10b      	bne.n	8007374 <xQueueGenericSend+0x94>
	__asm volatile
 800735c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007360:	f383 8811 	msr	BASEPRI, r3
 8007364:	f3bf 8f6f 	isb	sy
 8007368:	f3bf 8f4f 	dsb	sy
 800736c:	623b      	str	r3, [r7, #32]
}
 800736e:	bf00      	nop
 8007370:	bf00      	nop
 8007372:	e7fd      	b.n	8007370 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007374:	f001 f9f2 	bl	800875c <xTaskGetSchedulerState>
 8007378:	4603      	mov	r3, r0
 800737a:	2b00      	cmp	r3, #0
 800737c:	d102      	bne.n	8007384 <xQueueGenericSend+0xa4>
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d101      	bne.n	8007388 <xQueueGenericSend+0xa8>
 8007384:	2301      	movs	r3, #1
 8007386:	e000      	b.n	800738a <xQueueGenericSend+0xaa>
 8007388:	2300      	movs	r3, #0
 800738a:	2b00      	cmp	r3, #0
 800738c:	d10b      	bne.n	80073a6 <xQueueGenericSend+0xc6>
	__asm volatile
 800738e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007392:	f383 8811 	msr	BASEPRI, r3
 8007396:	f3bf 8f6f 	isb	sy
 800739a:	f3bf 8f4f 	dsb	sy
 800739e:	61fb      	str	r3, [r7, #28]
}
 80073a0:	bf00      	nop
 80073a2:	bf00      	nop
 80073a4:	e7fd      	b.n	80073a2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80073a6:	f001 fd2f 	bl	8008e08 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80073aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073ac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80073ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073b2:	429a      	cmp	r2, r3
 80073b4:	d302      	bcc.n	80073bc <xQueueGenericSend+0xdc>
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	2b02      	cmp	r3, #2
 80073ba:	d129      	bne.n	8007410 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80073bc:	683a      	ldr	r2, [r7, #0]
 80073be:	68b9      	ldr	r1, [r7, #8]
 80073c0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80073c2:	f000 f9b7 	bl	8007734 <prvCopyDataToQueue>
 80073c6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80073c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d010      	beq.n	80073f2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80073d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073d2:	3324      	adds	r3, #36	@ 0x24
 80073d4:	4618      	mov	r0, r3
 80073d6:	f000 fffb 	bl	80083d0 <xTaskRemoveFromEventList>
 80073da:	4603      	mov	r3, r0
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d013      	beq.n	8007408 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80073e0:	4b3f      	ldr	r3, [pc, #252]	@ (80074e0 <xQueueGenericSend+0x200>)
 80073e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80073e6:	601a      	str	r2, [r3, #0]
 80073e8:	f3bf 8f4f 	dsb	sy
 80073ec:	f3bf 8f6f 	isb	sy
 80073f0:	e00a      	b.n	8007408 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80073f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d007      	beq.n	8007408 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80073f8:	4b39      	ldr	r3, [pc, #228]	@ (80074e0 <xQueueGenericSend+0x200>)
 80073fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80073fe:	601a      	str	r2, [r3, #0]
 8007400:	f3bf 8f4f 	dsb	sy
 8007404:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007408:	f001 fd30 	bl	8008e6c <vPortExitCritical>
				return pdPASS;
 800740c:	2301      	movs	r3, #1
 800740e:	e063      	b.n	80074d8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d103      	bne.n	800741e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007416:	f001 fd29 	bl	8008e6c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800741a:	2300      	movs	r3, #0
 800741c:	e05c      	b.n	80074d8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800741e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007420:	2b00      	cmp	r3, #0
 8007422:	d106      	bne.n	8007432 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007424:	f107 0314 	add.w	r3, r7, #20
 8007428:	4618      	mov	r0, r3
 800742a:	f001 f835 	bl	8008498 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800742e:	2301      	movs	r3, #1
 8007430:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007432:	f001 fd1b 	bl	8008e6c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007436:	f000 fddb 	bl	8007ff0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800743a:	f001 fce5 	bl	8008e08 <vPortEnterCritical>
 800743e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007440:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007444:	b25b      	sxtb	r3, r3
 8007446:	f1b3 3fff 	cmp.w	r3, #4294967295
 800744a:	d103      	bne.n	8007454 <xQueueGenericSend+0x174>
 800744c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800744e:	2200      	movs	r2, #0
 8007450:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007454:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007456:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800745a:	b25b      	sxtb	r3, r3
 800745c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007460:	d103      	bne.n	800746a <xQueueGenericSend+0x18a>
 8007462:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007464:	2200      	movs	r2, #0
 8007466:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800746a:	f001 fcff 	bl	8008e6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800746e:	1d3a      	adds	r2, r7, #4
 8007470:	f107 0314 	add.w	r3, r7, #20
 8007474:	4611      	mov	r1, r2
 8007476:	4618      	mov	r0, r3
 8007478:	f001 f824 	bl	80084c4 <xTaskCheckForTimeOut>
 800747c:	4603      	mov	r3, r0
 800747e:	2b00      	cmp	r3, #0
 8007480:	d124      	bne.n	80074cc <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007482:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007484:	f000 fa28 	bl	80078d8 <prvIsQueueFull>
 8007488:	4603      	mov	r3, r0
 800748a:	2b00      	cmp	r3, #0
 800748c:	d018      	beq.n	80074c0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800748e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007490:	3310      	adds	r3, #16
 8007492:	687a      	ldr	r2, [r7, #4]
 8007494:	4611      	mov	r1, r2
 8007496:	4618      	mov	r0, r3
 8007498:	f000 ff74 	bl	8008384 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800749c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800749e:	f000 f9b3 	bl	8007808 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80074a2:	f000 fdb3 	bl	800800c <xTaskResumeAll>
 80074a6:	4603      	mov	r3, r0
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	f47f af7c 	bne.w	80073a6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80074ae:	4b0c      	ldr	r3, [pc, #48]	@ (80074e0 <xQueueGenericSend+0x200>)
 80074b0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80074b4:	601a      	str	r2, [r3, #0]
 80074b6:	f3bf 8f4f 	dsb	sy
 80074ba:	f3bf 8f6f 	isb	sy
 80074be:	e772      	b.n	80073a6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80074c0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80074c2:	f000 f9a1 	bl	8007808 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80074c6:	f000 fda1 	bl	800800c <xTaskResumeAll>
 80074ca:	e76c      	b.n	80073a6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80074cc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80074ce:	f000 f99b 	bl	8007808 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80074d2:	f000 fd9b 	bl	800800c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80074d6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80074d8:	4618      	mov	r0, r3
 80074da:	3738      	adds	r7, #56	@ 0x38
 80074dc:	46bd      	mov	sp, r7
 80074de:	bd80      	pop	{r7, pc}
 80074e0:	e000ed04 	.word	0xe000ed04

080074e4 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b08e      	sub	sp, #56	@ 0x38
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
 80074ec:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80074ee:	2300      	movs	r3, #0
 80074f0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80074f6:	2300      	movs	r3, #0
 80074f8:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80074fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d10b      	bne.n	8007518 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8007500:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007504:	f383 8811 	msr	BASEPRI, r3
 8007508:	f3bf 8f6f 	isb	sy
 800750c:	f3bf 8f4f 	dsb	sy
 8007510:	623b      	str	r3, [r7, #32]
}
 8007512:	bf00      	nop
 8007514:	bf00      	nop
 8007516:	e7fd      	b.n	8007514 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007518:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800751a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800751c:	2b00      	cmp	r3, #0
 800751e:	d00b      	beq.n	8007538 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8007520:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007524:	f383 8811 	msr	BASEPRI, r3
 8007528:	f3bf 8f6f 	isb	sy
 800752c:	f3bf 8f4f 	dsb	sy
 8007530:	61fb      	str	r3, [r7, #28]
}
 8007532:	bf00      	nop
 8007534:	bf00      	nop
 8007536:	e7fd      	b.n	8007534 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007538:	f001 f910 	bl	800875c <xTaskGetSchedulerState>
 800753c:	4603      	mov	r3, r0
 800753e:	2b00      	cmp	r3, #0
 8007540:	d102      	bne.n	8007548 <xQueueSemaphoreTake+0x64>
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d101      	bne.n	800754c <xQueueSemaphoreTake+0x68>
 8007548:	2301      	movs	r3, #1
 800754a:	e000      	b.n	800754e <xQueueSemaphoreTake+0x6a>
 800754c:	2300      	movs	r3, #0
 800754e:	2b00      	cmp	r3, #0
 8007550:	d10b      	bne.n	800756a <xQueueSemaphoreTake+0x86>
	__asm volatile
 8007552:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007556:	f383 8811 	msr	BASEPRI, r3
 800755a:	f3bf 8f6f 	isb	sy
 800755e:	f3bf 8f4f 	dsb	sy
 8007562:	61bb      	str	r3, [r7, #24]
}
 8007564:	bf00      	nop
 8007566:	bf00      	nop
 8007568:	e7fd      	b.n	8007566 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800756a:	f001 fc4d 	bl	8008e08 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800756e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007570:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007572:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007574:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007576:	2b00      	cmp	r3, #0
 8007578:	d024      	beq.n	80075c4 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800757a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800757c:	1e5a      	subs	r2, r3, #1
 800757e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007580:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007582:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d104      	bne.n	8007594 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800758a:	f001 fa93 	bl	8008ab4 <pvTaskIncrementMutexHeldCount>
 800758e:	4602      	mov	r2, r0
 8007590:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007592:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007594:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007596:	691b      	ldr	r3, [r3, #16]
 8007598:	2b00      	cmp	r3, #0
 800759a:	d00f      	beq.n	80075bc <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800759c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800759e:	3310      	adds	r3, #16
 80075a0:	4618      	mov	r0, r3
 80075a2:	f000 ff15 	bl	80083d0 <xTaskRemoveFromEventList>
 80075a6:	4603      	mov	r3, r0
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d007      	beq.n	80075bc <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80075ac:	4b54      	ldr	r3, [pc, #336]	@ (8007700 <xQueueSemaphoreTake+0x21c>)
 80075ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80075b2:	601a      	str	r2, [r3, #0]
 80075b4:	f3bf 8f4f 	dsb	sy
 80075b8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80075bc:	f001 fc56 	bl	8008e6c <vPortExitCritical>
				return pdPASS;
 80075c0:	2301      	movs	r3, #1
 80075c2:	e098      	b.n	80076f6 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d112      	bne.n	80075f0 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80075ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d00b      	beq.n	80075e8 <xQueueSemaphoreTake+0x104>
	__asm volatile
 80075d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075d4:	f383 8811 	msr	BASEPRI, r3
 80075d8:	f3bf 8f6f 	isb	sy
 80075dc:	f3bf 8f4f 	dsb	sy
 80075e0:	617b      	str	r3, [r7, #20]
}
 80075e2:	bf00      	nop
 80075e4:	bf00      	nop
 80075e6:	e7fd      	b.n	80075e4 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80075e8:	f001 fc40 	bl	8008e6c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80075ec:	2300      	movs	r3, #0
 80075ee:	e082      	b.n	80076f6 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 80075f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d106      	bne.n	8007604 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80075f6:	f107 030c 	add.w	r3, r7, #12
 80075fa:	4618      	mov	r0, r3
 80075fc:	f000 ff4c 	bl	8008498 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007600:	2301      	movs	r3, #1
 8007602:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007604:	f001 fc32 	bl	8008e6c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007608:	f000 fcf2 	bl	8007ff0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800760c:	f001 fbfc 	bl	8008e08 <vPortEnterCritical>
 8007610:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007612:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007616:	b25b      	sxtb	r3, r3
 8007618:	f1b3 3fff 	cmp.w	r3, #4294967295
 800761c:	d103      	bne.n	8007626 <xQueueSemaphoreTake+0x142>
 800761e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007620:	2200      	movs	r2, #0
 8007622:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007626:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007628:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800762c:	b25b      	sxtb	r3, r3
 800762e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007632:	d103      	bne.n	800763c <xQueueSemaphoreTake+0x158>
 8007634:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007636:	2200      	movs	r2, #0
 8007638:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800763c:	f001 fc16 	bl	8008e6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007640:	463a      	mov	r2, r7
 8007642:	f107 030c 	add.w	r3, r7, #12
 8007646:	4611      	mov	r1, r2
 8007648:	4618      	mov	r0, r3
 800764a:	f000 ff3b 	bl	80084c4 <xTaskCheckForTimeOut>
 800764e:	4603      	mov	r3, r0
 8007650:	2b00      	cmp	r3, #0
 8007652:	d132      	bne.n	80076ba <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007654:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007656:	f000 f929 	bl	80078ac <prvIsQueueEmpty>
 800765a:	4603      	mov	r3, r0
 800765c:	2b00      	cmp	r3, #0
 800765e:	d026      	beq.n	80076ae <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007660:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d109      	bne.n	800767c <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8007668:	f001 fbce 	bl	8008e08 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800766c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800766e:	689b      	ldr	r3, [r3, #8]
 8007670:	4618      	mov	r0, r3
 8007672:	f001 f891 	bl	8008798 <xTaskPriorityInherit>
 8007676:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8007678:	f001 fbf8 	bl	8008e6c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800767c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800767e:	3324      	adds	r3, #36	@ 0x24
 8007680:	683a      	ldr	r2, [r7, #0]
 8007682:	4611      	mov	r1, r2
 8007684:	4618      	mov	r0, r3
 8007686:	f000 fe7d 	bl	8008384 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800768a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800768c:	f000 f8bc 	bl	8007808 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007690:	f000 fcbc 	bl	800800c <xTaskResumeAll>
 8007694:	4603      	mov	r3, r0
 8007696:	2b00      	cmp	r3, #0
 8007698:	f47f af67 	bne.w	800756a <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800769c:	4b18      	ldr	r3, [pc, #96]	@ (8007700 <xQueueSemaphoreTake+0x21c>)
 800769e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80076a2:	601a      	str	r2, [r3, #0]
 80076a4:	f3bf 8f4f 	dsb	sy
 80076a8:	f3bf 8f6f 	isb	sy
 80076ac:	e75d      	b.n	800756a <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80076ae:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80076b0:	f000 f8aa 	bl	8007808 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80076b4:	f000 fcaa 	bl	800800c <xTaskResumeAll>
 80076b8:	e757      	b.n	800756a <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80076ba:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80076bc:	f000 f8a4 	bl	8007808 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80076c0:	f000 fca4 	bl	800800c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80076c4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80076c6:	f000 f8f1 	bl	80078ac <prvIsQueueEmpty>
 80076ca:	4603      	mov	r3, r0
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	f43f af4c 	beq.w	800756a <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80076d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d00d      	beq.n	80076f4 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 80076d8:	f001 fb96 	bl	8008e08 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80076dc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80076de:	f000 f811 	bl	8007704 <prvGetDisinheritPriorityAfterTimeout>
 80076e2:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80076e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076e6:	689b      	ldr	r3, [r3, #8]
 80076e8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80076ea:	4618      	mov	r0, r3
 80076ec:	f001 f952 	bl	8008994 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80076f0:	f001 fbbc 	bl	8008e6c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80076f4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80076f6:	4618      	mov	r0, r3
 80076f8:	3738      	adds	r7, #56	@ 0x38
 80076fa:	46bd      	mov	sp, r7
 80076fc:	bd80      	pop	{r7, pc}
 80076fe:	bf00      	nop
 8007700:	e000ed04 	.word	0xe000ed04

08007704 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007704:	b480      	push	{r7}
 8007706:	b085      	sub	sp, #20
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007710:	2b00      	cmp	r3, #0
 8007712:	d006      	beq.n	8007722 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f1c3 0307 	rsb	r3, r3, #7
 800771e:	60fb      	str	r3, [r7, #12]
 8007720:	e001      	b.n	8007726 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007722:	2300      	movs	r3, #0
 8007724:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007726:	68fb      	ldr	r3, [r7, #12]
	}
 8007728:	4618      	mov	r0, r3
 800772a:	3714      	adds	r7, #20
 800772c:	46bd      	mov	sp, r7
 800772e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007732:	4770      	bx	lr

08007734 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007734:	b580      	push	{r7, lr}
 8007736:	b086      	sub	sp, #24
 8007738:	af00      	add	r7, sp, #0
 800773a:	60f8      	str	r0, [r7, #12]
 800773c:	60b9      	str	r1, [r7, #8]
 800773e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007740:	2300      	movs	r3, #0
 8007742:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007748:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800774e:	2b00      	cmp	r3, #0
 8007750:	d10d      	bne.n	800776e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d14d      	bne.n	80077f6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	689b      	ldr	r3, [r3, #8]
 800775e:	4618      	mov	r0, r3
 8007760:	f001 f890 	bl	8008884 <xTaskPriorityDisinherit>
 8007764:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	2200      	movs	r2, #0
 800776a:	609a      	str	r2, [r3, #8]
 800776c:	e043      	b.n	80077f6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d119      	bne.n	80077a8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	6858      	ldr	r0, [r3, #4]
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800777c:	461a      	mov	r2, r3
 800777e:	68b9      	ldr	r1, [r7, #8]
 8007780:	f002 fbae 	bl	8009ee0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	685a      	ldr	r2, [r3, #4]
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800778c:	441a      	add	r2, r3
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	685a      	ldr	r2, [r3, #4]
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	689b      	ldr	r3, [r3, #8]
 800779a:	429a      	cmp	r2, r3
 800779c:	d32b      	bcc.n	80077f6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	681a      	ldr	r2, [r3, #0]
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	605a      	str	r2, [r3, #4]
 80077a6:	e026      	b.n	80077f6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	68d8      	ldr	r0, [r3, #12]
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077b0:	461a      	mov	r2, r3
 80077b2:	68b9      	ldr	r1, [r7, #8]
 80077b4:	f002 fb94 	bl	8009ee0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	68da      	ldr	r2, [r3, #12]
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077c0:	425b      	negs	r3, r3
 80077c2:	441a      	add	r2, r3
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	68da      	ldr	r2, [r3, #12]
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	429a      	cmp	r2, r3
 80077d2:	d207      	bcs.n	80077e4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	689a      	ldr	r2, [r3, #8]
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077dc:	425b      	negs	r3, r3
 80077de:	441a      	add	r2, r3
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2b02      	cmp	r3, #2
 80077e8:	d105      	bne.n	80077f6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80077ea:	693b      	ldr	r3, [r7, #16]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d002      	beq.n	80077f6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80077f0:	693b      	ldr	r3, [r7, #16]
 80077f2:	3b01      	subs	r3, #1
 80077f4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80077f6:	693b      	ldr	r3, [r7, #16]
 80077f8:	1c5a      	adds	r2, r3, #1
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80077fe:	697b      	ldr	r3, [r7, #20]
}
 8007800:	4618      	mov	r0, r3
 8007802:	3718      	adds	r7, #24
 8007804:	46bd      	mov	sp, r7
 8007806:	bd80      	pop	{r7, pc}

08007808 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b084      	sub	sp, #16
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007810:	f001 fafa 	bl	8008e08 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800781a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800781c:	e011      	b.n	8007842 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007822:	2b00      	cmp	r3, #0
 8007824:	d012      	beq.n	800784c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	3324      	adds	r3, #36	@ 0x24
 800782a:	4618      	mov	r0, r3
 800782c:	f000 fdd0 	bl	80083d0 <xTaskRemoveFromEventList>
 8007830:	4603      	mov	r3, r0
 8007832:	2b00      	cmp	r3, #0
 8007834:	d001      	beq.n	800783a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007836:	f000 fea9 	bl	800858c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800783a:	7bfb      	ldrb	r3, [r7, #15]
 800783c:	3b01      	subs	r3, #1
 800783e:	b2db      	uxtb	r3, r3
 8007840:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007842:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007846:	2b00      	cmp	r3, #0
 8007848:	dce9      	bgt.n	800781e <prvUnlockQueue+0x16>
 800784a:	e000      	b.n	800784e <prvUnlockQueue+0x46>
					break;
 800784c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	22ff      	movs	r2, #255	@ 0xff
 8007852:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8007856:	f001 fb09 	bl	8008e6c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800785a:	f001 fad5 	bl	8008e08 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007864:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007866:	e011      	b.n	800788c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	691b      	ldr	r3, [r3, #16]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d012      	beq.n	8007896 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	3310      	adds	r3, #16
 8007874:	4618      	mov	r0, r3
 8007876:	f000 fdab 	bl	80083d0 <xTaskRemoveFromEventList>
 800787a:	4603      	mov	r3, r0
 800787c:	2b00      	cmp	r3, #0
 800787e:	d001      	beq.n	8007884 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007880:	f000 fe84 	bl	800858c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007884:	7bbb      	ldrb	r3, [r7, #14]
 8007886:	3b01      	subs	r3, #1
 8007888:	b2db      	uxtb	r3, r3
 800788a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800788c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007890:	2b00      	cmp	r3, #0
 8007892:	dce9      	bgt.n	8007868 <prvUnlockQueue+0x60>
 8007894:	e000      	b.n	8007898 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007896:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	22ff      	movs	r2, #255	@ 0xff
 800789c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80078a0:	f001 fae4 	bl	8008e6c <vPortExitCritical>
}
 80078a4:	bf00      	nop
 80078a6:	3710      	adds	r7, #16
 80078a8:	46bd      	mov	sp, r7
 80078aa:	bd80      	pop	{r7, pc}

080078ac <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b084      	sub	sp, #16
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80078b4:	f001 faa8 	bl	8008e08 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d102      	bne.n	80078c6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80078c0:	2301      	movs	r3, #1
 80078c2:	60fb      	str	r3, [r7, #12]
 80078c4:	e001      	b.n	80078ca <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80078c6:	2300      	movs	r3, #0
 80078c8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80078ca:	f001 facf 	bl	8008e6c <vPortExitCritical>

	return xReturn;
 80078ce:	68fb      	ldr	r3, [r7, #12]
}
 80078d0:	4618      	mov	r0, r3
 80078d2:	3710      	adds	r7, #16
 80078d4:	46bd      	mov	sp, r7
 80078d6:	bd80      	pop	{r7, pc}

080078d8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b084      	sub	sp, #16
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80078e0:	f001 fa92 	bl	8008e08 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078ec:	429a      	cmp	r2, r3
 80078ee:	d102      	bne.n	80078f6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80078f0:	2301      	movs	r3, #1
 80078f2:	60fb      	str	r3, [r7, #12]
 80078f4:	e001      	b.n	80078fa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80078f6:	2300      	movs	r3, #0
 80078f8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80078fa:	f001 fab7 	bl	8008e6c <vPortExitCritical>

	return xReturn;
 80078fe:	68fb      	ldr	r3, [r7, #12]
}
 8007900:	4618      	mov	r0, r3
 8007902:	3710      	adds	r7, #16
 8007904:	46bd      	mov	sp, r7
 8007906:	bd80      	pop	{r7, pc}

08007908 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007908:	b580      	push	{r7, lr}
 800790a:	b08e      	sub	sp, #56	@ 0x38
 800790c:	af04      	add	r7, sp, #16
 800790e:	60f8      	str	r0, [r7, #12]
 8007910:	60b9      	str	r1, [r7, #8]
 8007912:	607a      	str	r2, [r7, #4]
 8007914:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007916:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007918:	2b00      	cmp	r3, #0
 800791a:	d10b      	bne.n	8007934 <xTaskCreateStatic+0x2c>
	__asm volatile
 800791c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007920:	f383 8811 	msr	BASEPRI, r3
 8007924:	f3bf 8f6f 	isb	sy
 8007928:	f3bf 8f4f 	dsb	sy
 800792c:	623b      	str	r3, [r7, #32]
}
 800792e:	bf00      	nop
 8007930:	bf00      	nop
 8007932:	e7fd      	b.n	8007930 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007934:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007936:	2b00      	cmp	r3, #0
 8007938:	d10b      	bne.n	8007952 <xTaskCreateStatic+0x4a>
	__asm volatile
 800793a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800793e:	f383 8811 	msr	BASEPRI, r3
 8007942:	f3bf 8f6f 	isb	sy
 8007946:	f3bf 8f4f 	dsb	sy
 800794a:	61fb      	str	r3, [r7, #28]
}
 800794c:	bf00      	nop
 800794e:	bf00      	nop
 8007950:	e7fd      	b.n	800794e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007952:	23a0      	movs	r3, #160	@ 0xa0
 8007954:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007956:	693b      	ldr	r3, [r7, #16]
 8007958:	2ba0      	cmp	r3, #160	@ 0xa0
 800795a:	d00b      	beq.n	8007974 <xTaskCreateStatic+0x6c>
	__asm volatile
 800795c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007960:	f383 8811 	msr	BASEPRI, r3
 8007964:	f3bf 8f6f 	isb	sy
 8007968:	f3bf 8f4f 	dsb	sy
 800796c:	61bb      	str	r3, [r7, #24]
}
 800796e:	bf00      	nop
 8007970:	bf00      	nop
 8007972:	e7fd      	b.n	8007970 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007974:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007976:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007978:	2b00      	cmp	r3, #0
 800797a:	d01e      	beq.n	80079ba <xTaskCreateStatic+0xb2>
 800797c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800797e:	2b00      	cmp	r3, #0
 8007980:	d01b      	beq.n	80079ba <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007982:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007984:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007988:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800798a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800798c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800798e:	2202      	movs	r2, #2
 8007990:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007994:	2300      	movs	r3, #0
 8007996:	9303      	str	r3, [sp, #12]
 8007998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800799a:	9302      	str	r3, [sp, #8]
 800799c:	f107 0314 	add.w	r3, r7, #20
 80079a0:	9301      	str	r3, [sp, #4]
 80079a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079a4:	9300      	str	r3, [sp, #0]
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	687a      	ldr	r2, [r7, #4]
 80079aa:	68b9      	ldr	r1, [r7, #8]
 80079ac:	68f8      	ldr	r0, [r7, #12]
 80079ae:	f000 f851 	bl	8007a54 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80079b2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80079b4:	f000 f8ee 	bl	8007b94 <prvAddNewTaskToReadyList>
 80079b8:	e001      	b.n	80079be <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80079ba:	2300      	movs	r3, #0
 80079bc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80079be:	697b      	ldr	r3, [r7, #20]
	}
 80079c0:	4618      	mov	r0, r3
 80079c2:	3728      	adds	r7, #40	@ 0x28
 80079c4:	46bd      	mov	sp, r7
 80079c6:	bd80      	pop	{r7, pc}

080079c8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b08c      	sub	sp, #48	@ 0x30
 80079cc:	af04      	add	r7, sp, #16
 80079ce:	60f8      	str	r0, [r7, #12]
 80079d0:	60b9      	str	r1, [r7, #8]
 80079d2:	603b      	str	r3, [r7, #0]
 80079d4:	4613      	mov	r3, r2
 80079d6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80079d8:	88fb      	ldrh	r3, [r7, #6]
 80079da:	009b      	lsls	r3, r3, #2
 80079dc:	4618      	mov	r0, r3
 80079de:	f001 faf3 	bl	8008fc8 <pvPortMalloc>
 80079e2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80079e4:	697b      	ldr	r3, [r7, #20]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d00e      	beq.n	8007a08 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80079ea:	20a0      	movs	r0, #160	@ 0xa0
 80079ec:	f001 faec 	bl	8008fc8 <pvPortMalloc>
 80079f0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80079f2:	69fb      	ldr	r3, [r7, #28]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d003      	beq.n	8007a00 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80079f8:	69fb      	ldr	r3, [r7, #28]
 80079fa:	697a      	ldr	r2, [r7, #20]
 80079fc:	631a      	str	r2, [r3, #48]	@ 0x30
 80079fe:	e005      	b.n	8007a0c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007a00:	6978      	ldr	r0, [r7, #20]
 8007a02:	f001 fbaf 	bl	8009164 <vPortFree>
 8007a06:	e001      	b.n	8007a0c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007a08:	2300      	movs	r3, #0
 8007a0a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007a0c:	69fb      	ldr	r3, [r7, #28]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d017      	beq.n	8007a42 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007a12:	69fb      	ldr	r3, [r7, #28]
 8007a14:	2200      	movs	r2, #0
 8007a16:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007a1a:	88fa      	ldrh	r2, [r7, #6]
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	9303      	str	r3, [sp, #12]
 8007a20:	69fb      	ldr	r3, [r7, #28]
 8007a22:	9302      	str	r3, [sp, #8]
 8007a24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a26:	9301      	str	r3, [sp, #4]
 8007a28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a2a:	9300      	str	r3, [sp, #0]
 8007a2c:	683b      	ldr	r3, [r7, #0]
 8007a2e:	68b9      	ldr	r1, [r7, #8]
 8007a30:	68f8      	ldr	r0, [r7, #12]
 8007a32:	f000 f80f 	bl	8007a54 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007a36:	69f8      	ldr	r0, [r7, #28]
 8007a38:	f000 f8ac 	bl	8007b94 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007a3c:	2301      	movs	r3, #1
 8007a3e:	61bb      	str	r3, [r7, #24]
 8007a40:	e002      	b.n	8007a48 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007a42:	f04f 33ff 	mov.w	r3, #4294967295
 8007a46:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007a48:	69bb      	ldr	r3, [r7, #24]
	}
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	3720      	adds	r7, #32
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	bd80      	pop	{r7, pc}
	...

08007a54 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b088      	sub	sp, #32
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	60f8      	str	r0, [r7, #12]
 8007a5c:	60b9      	str	r1, [r7, #8]
 8007a5e:	607a      	str	r2, [r7, #4]
 8007a60:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007a62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a64:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007a6c:	3b01      	subs	r3, #1
 8007a6e:	009b      	lsls	r3, r3, #2
 8007a70:	4413      	add	r3, r2
 8007a72:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007a74:	69bb      	ldr	r3, [r7, #24]
 8007a76:	f023 0307 	bic.w	r3, r3, #7
 8007a7a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007a7c:	69bb      	ldr	r3, [r7, #24]
 8007a7e:	f003 0307 	and.w	r3, r3, #7
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d00b      	beq.n	8007a9e <prvInitialiseNewTask+0x4a>
	__asm volatile
 8007a86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a8a:	f383 8811 	msr	BASEPRI, r3
 8007a8e:	f3bf 8f6f 	isb	sy
 8007a92:	f3bf 8f4f 	dsb	sy
 8007a96:	617b      	str	r3, [r7, #20]
}
 8007a98:	bf00      	nop
 8007a9a:	bf00      	nop
 8007a9c:	e7fd      	b.n	8007a9a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007a9e:	68bb      	ldr	r3, [r7, #8]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d01f      	beq.n	8007ae4 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	61fb      	str	r3, [r7, #28]
 8007aa8:	e012      	b.n	8007ad0 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007aaa:	68ba      	ldr	r2, [r7, #8]
 8007aac:	69fb      	ldr	r3, [r7, #28]
 8007aae:	4413      	add	r3, r2
 8007ab0:	7819      	ldrb	r1, [r3, #0]
 8007ab2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007ab4:	69fb      	ldr	r3, [r7, #28]
 8007ab6:	4413      	add	r3, r2
 8007ab8:	3334      	adds	r3, #52	@ 0x34
 8007aba:	460a      	mov	r2, r1
 8007abc:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007abe:	68ba      	ldr	r2, [r7, #8]
 8007ac0:	69fb      	ldr	r3, [r7, #28]
 8007ac2:	4413      	add	r3, r2
 8007ac4:	781b      	ldrb	r3, [r3, #0]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d006      	beq.n	8007ad8 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007aca:	69fb      	ldr	r3, [r7, #28]
 8007acc:	3301      	adds	r3, #1
 8007ace:	61fb      	str	r3, [r7, #28]
 8007ad0:	69fb      	ldr	r3, [r7, #28]
 8007ad2:	2b0f      	cmp	r3, #15
 8007ad4:	d9e9      	bls.n	8007aaa <prvInitialiseNewTask+0x56>
 8007ad6:	e000      	b.n	8007ada <prvInitialiseNewTask+0x86>
			{
				break;
 8007ad8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007ada:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007adc:	2200      	movs	r2, #0
 8007ade:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007ae2:	e003      	b.n	8007aec <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007ae4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007aec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007aee:	2b06      	cmp	r3, #6
 8007af0:	d901      	bls.n	8007af6 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007af2:	2306      	movs	r3, #6
 8007af4:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007af6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007af8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007afa:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007afc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007afe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007b00:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007b02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b04:	2200      	movs	r2, #0
 8007b06:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007b08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b0a:	3304      	adds	r3, #4
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	f7ff fa10 	bl	8006f32 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007b12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b14:	3318      	adds	r3, #24
 8007b16:	4618      	mov	r0, r3
 8007b18:	f7ff fa0b 	bl	8006f32 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007b1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007b20:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b24:	f1c3 0207 	rsb	r2, r3, #7
 8007b28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b2a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007b2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b2e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007b30:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007b32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b34:	2200      	movs	r2, #0
 8007b36:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007b3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007b42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b44:	334c      	adds	r3, #76	@ 0x4c
 8007b46:	224c      	movs	r2, #76	@ 0x4c
 8007b48:	2100      	movs	r1, #0
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	f002 f944 	bl	8009dd8 <memset>
 8007b50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b52:	4a0d      	ldr	r2, [pc, #52]	@ (8007b88 <prvInitialiseNewTask+0x134>)
 8007b54:	651a      	str	r2, [r3, #80]	@ 0x50
 8007b56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b58:	4a0c      	ldr	r2, [pc, #48]	@ (8007b8c <prvInitialiseNewTask+0x138>)
 8007b5a:	655a      	str	r2, [r3, #84]	@ 0x54
 8007b5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b5e:	4a0c      	ldr	r2, [pc, #48]	@ (8007b90 <prvInitialiseNewTask+0x13c>)
 8007b60:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007b62:	683a      	ldr	r2, [r7, #0]
 8007b64:	68f9      	ldr	r1, [r7, #12]
 8007b66:	69b8      	ldr	r0, [r7, #24]
 8007b68:	f001 f81e 	bl	8008ba8 <pxPortInitialiseStack>
 8007b6c:	4602      	mov	r2, r0
 8007b6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b70:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007b72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d002      	beq.n	8007b7e <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007b78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b7a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007b7c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007b7e:	bf00      	nop
 8007b80:	3720      	adds	r7, #32
 8007b82:	46bd      	mov	sp, r7
 8007b84:	bd80      	pop	{r7, pc}
 8007b86:	bf00      	nop
 8007b88:	20005dac 	.word	0x20005dac
 8007b8c:	20005e14 	.word	0x20005e14
 8007b90:	20005e7c 	.word	0x20005e7c

08007b94 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b082      	sub	sp, #8
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007b9c:	f001 f934 	bl	8008e08 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007ba0:	4b2a      	ldr	r3, [pc, #168]	@ (8007c4c <prvAddNewTaskToReadyList+0xb8>)
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	3301      	adds	r3, #1
 8007ba6:	4a29      	ldr	r2, [pc, #164]	@ (8007c4c <prvAddNewTaskToReadyList+0xb8>)
 8007ba8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007baa:	4b29      	ldr	r3, [pc, #164]	@ (8007c50 <prvAddNewTaskToReadyList+0xbc>)
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d109      	bne.n	8007bc6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007bb2:	4a27      	ldr	r2, [pc, #156]	@ (8007c50 <prvAddNewTaskToReadyList+0xbc>)
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007bb8:	4b24      	ldr	r3, [pc, #144]	@ (8007c4c <prvAddNewTaskToReadyList+0xb8>)
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	2b01      	cmp	r3, #1
 8007bbe:	d110      	bne.n	8007be2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007bc0:	f000 fd08 	bl	80085d4 <prvInitialiseTaskLists>
 8007bc4:	e00d      	b.n	8007be2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007bc6:	4b23      	ldr	r3, [pc, #140]	@ (8007c54 <prvAddNewTaskToReadyList+0xc0>)
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d109      	bne.n	8007be2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007bce:	4b20      	ldr	r3, [pc, #128]	@ (8007c50 <prvAddNewTaskToReadyList+0xbc>)
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bd8:	429a      	cmp	r2, r3
 8007bda:	d802      	bhi.n	8007be2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007bdc:	4a1c      	ldr	r2, [pc, #112]	@ (8007c50 <prvAddNewTaskToReadyList+0xbc>)
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007be2:	4b1d      	ldr	r3, [pc, #116]	@ (8007c58 <prvAddNewTaskToReadyList+0xc4>)
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	3301      	adds	r3, #1
 8007be8:	4a1b      	ldr	r2, [pc, #108]	@ (8007c58 <prvAddNewTaskToReadyList+0xc4>)
 8007bea:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bf0:	2201      	movs	r2, #1
 8007bf2:	409a      	lsls	r2, r3
 8007bf4:	4b19      	ldr	r3, [pc, #100]	@ (8007c5c <prvAddNewTaskToReadyList+0xc8>)
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	4313      	orrs	r3, r2
 8007bfa:	4a18      	ldr	r2, [pc, #96]	@ (8007c5c <prvAddNewTaskToReadyList+0xc8>)
 8007bfc:	6013      	str	r3, [r2, #0]
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c02:	4613      	mov	r3, r2
 8007c04:	009b      	lsls	r3, r3, #2
 8007c06:	4413      	add	r3, r2
 8007c08:	009b      	lsls	r3, r3, #2
 8007c0a:	4a15      	ldr	r2, [pc, #84]	@ (8007c60 <prvAddNewTaskToReadyList+0xcc>)
 8007c0c:	441a      	add	r2, r3
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	3304      	adds	r3, #4
 8007c12:	4619      	mov	r1, r3
 8007c14:	4610      	mov	r0, r2
 8007c16:	f7ff f999 	bl	8006f4c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007c1a:	f001 f927 	bl	8008e6c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007c1e:	4b0d      	ldr	r3, [pc, #52]	@ (8007c54 <prvAddNewTaskToReadyList+0xc0>)
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d00e      	beq.n	8007c44 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007c26:	4b0a      	ldr	r3, [pc, #40]	@ (8007c50 <prvAddNewTaskToReadyList+0xbc>)
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c30:	429a      	cmp	r2, r3
 8007c32:	d207      	bcs.n	8007c44 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007c34:	4b0b      	ldr	r3, [pc, #44]	@ (8007c64 <prvAddNewTaskToReadyList+0xd0>)
 8007c36:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007c3a:	601a      	str	r2, [r3, #0]
 8007c3c:	f3bf 8f4f 	dsb	sy
 8007c40:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007c44:	bf00      	nop
 8007c46:	3708      	adds	r7, #8
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	bd80      	pop	{r7, pc}
 8007c4c:	20000578 	.word	0x20000578
 8007c50:	20000478 	.word	0x20000478
 8007c54:	20000584 	.word	0x20000584
 8007c58:	20000594 	.word	0x20000594
 8007c5c:	20000580 	.word	0x20000580
 8007c60:	2000047c 	.word	0x2000047c
 8007c64:	e000ed04 	.word	0xe000ed04

08007c68 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b084      	sub	sp, #16
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007c70:	2300      	movs	r3, #0
 8007c72:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d018      	beq.n	8007cac <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007c7a:	4b14      	ldr	r3, [pc, #80]	@ (8007ccc <vTaskDelay+0x64>)
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d00b      	beq.n	8007c9a <vTaskDelay+0x32>
	__asm volatile
 8007c82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c86:	f383 8811 	msr	BASEPRI, r3
 8007c8a:	f3bf 8f6f 	isb	sy
 8007c8e:	f3bf 8f4f 	dsb	sy
 8007c92:	60bb      	str	r3, [r7, #8]
}
 8007c94:	bf00      	nop
 8007c96:	bf00      	nop
 8007c98:	e7fd      	b.n	8007c96 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007c9a:	f000 f9a9 	bl	8007ff0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007c9e:	2100      	movs	r1, #0
 8007ca0:	6878      	ldr	r0, [r7, #4]
 8007ca2:	f000 ff1b 	bl	8008adc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007ca6:	f000 f9b1 	bl	800800c <xTaskResumeAll>
 8007caa:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d107      	bne.n	8007cc2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8007cb2:	4b07      	ldr	r3, [pc, #28]	@ (8007cd0 <vTaskDelay+0x68>)
 8007cb4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007cb8:	601a      	str	r2, [r3, #0]
 8007cba:	f3bf 8f4f 	dsb	sy
 8007cbe:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007cc2:	bf00      	nop
 8007cc4:	3710      	adds	r7, #16
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	bd80      	pop	{r7, pc}
 8007cca:	bf00      	nop
 8007ccc:	200005a0 	.word	0x200005a0
 8007cd0:	e000ed04 	.word	0xe000ed04

08007cd4 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	b084      	sub	sp, #16
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8007cdc:	f001 f894 	bl	8008e08 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d102      	bne.n	8007cec <vTaskSuspend+0x18>
 8007ce6:	4b3d      	ldr	r3, [pc, #244]	@ (8007ddc <vTaskSuspend+0x108>)
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	e000      	b.n	8007cee <vTaskSuspend+0x1a>
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	3304      	adds	r3, #4
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	f7ff f986 	bl	8007006 <uxListRemove>
 8007cfa:	4603      	mov	r3, r0
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d115      	bne.n	8007d2c <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d04:	4936      	ldr	r1, [pc, #216]	@ (8007de0 <vTaskSuspend+0x10c>)
 8007d06:	4613      	mov	r3, r2
 8007d08:	009b      	lsls	r3, r3, #2
 8007d0a:	4413      	add	r3, r2
 8007d0c:	009b      	lsls	r3, r3, #2
 8007d0e:	440b      	add	r3, r1
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d10a      	bne.n	8007d2c <vTaskSuspend+0x58>
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d1a:	2201      	movs	r2, #1
 8007d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8007d20:	43da      	mvns	r2, r3
 8007d22:	4b30      	ldr	r3, [pc, #192]	@ (8007de4 <vTaskSuspend+0x110>)
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	4013      	ands	r3, r2
 8007d28:	4a2e      	ldr	r2, [pc, #184]	@ (8007de4 <vTaskSuspend+0x110>)
 8007d2a:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d004      	beq.n	8007d3e <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	3318      	adds	r3, #24
 8007d38:	4618      	mov	r0, r3
 8007d3a:	f7ff f964 	bl	8007006 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	3304      	adds	r3, #4
 8007d42:	4619      	mov	r1, r3
 8007d44:	4828      	ldr	r0, [pc, #160]	@ (8007de8 <vTaskSuspend+0x114>)
 8007d46:	f7ff f901 	bl	8006f4c <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 8007d50:	b2db      	uxtb	r3, r3
 8007d52:	2b01      	cmp	r3, #1
 8007d54:	d103      	bne.n	8007d5e <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	2200      	movs	r2, #0
 8007d5a:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8007d5e:	f001 f885 	bl	8008e6c <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8007d62:	4b22      	ldr	r3, [pc, #136]	@ (8007dec <vTaskSuspend+0x118>)
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d005      	beq.n	8007d76 <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8007d6a:	f001 f84d 	bl	8008e08 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8007d6e:	f000 fcd5 	bl	800871c <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8007d72:	f001 f87b 	bl	8008e6c <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8007d76:	4b19      	ldr	r3, [pc, #100]	@ (8007ddc <vTaskSuspend+0x108>)
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	68fa      	ldr	r2, [r7, #12]
 8007d7c:	429a      	cmp	r2, r3
 8007d7e:	d128      	bne.n	8007dd2 <vTaskSuspend+0xfe>
		{
			if( xSchedulerRunning != pdFALSE )
 8007d80:	4b1a      	ldr	r3, [pc, #104]	@ (8007dec <vTaskSuspend+0x118>)
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d018      	beq.n	8007dba <vTaskSuspend+0xe6>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8007d88:	4b19      	ldr	r3, [pc, #100]	@ (8007df0 <vTaskSuspend+0x11c>)
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d00b      	beq.n	8007da8 <vTaskSuspend+0xd4>
	__asm volatile
 8007d90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d94:	f383 8811 	msr	BASEPRI, r3
 8007d98:	f3bf 8f6f 	isb	sy
 8007d9c:	f3bf 8f4f 	dsb	sy
 8007da0:	60bb      	str	r3, [r7, #8]
}
 8007da2:	bf00      	nop
 8007da4:	bf00      	nop
 8007da6:	e7fd      	b.n	8007da4 <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 8007da8:	4b12      	ldr	r3, [pc, #72]	@ (8007df4 <vTaskSuspend+0x120>)
 8007daa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007dae:	601a      	str	r2, [r3, #0]
 8007db0:	f3bf 8f4f 	dsb	sy
 8007db4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007db8:	e00b      	b.n	8007dd2 <vTaskSuspend+0xfe>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8007dba:	4b0b      	ldr	r3, [pc, #44]	@ (8007de8 <vTaskSuspend+0x114>)
 8007dbc:	681a      	ldr	r2, [r3, #0]
 8007dbe:	4b0e      	ldr	r3, [pc, #56]	@ (8007df8 <vTaskSuspend+0x124>)
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	429a      	cmp	r2, r3
 8007dc4:	d103      	bne.n	8007dce <vTaskSuspend+0xfa>
					pxCurrentTCB = NULL;
 8007dc6:	4b05      	ldr	r3, [pc, #20]	@ (8007ddc <vTaskSuspend+0x108>)
 8007dc8:	2200      	movs	r2, #0
 8007dca:	601a      	str	r2, [r3, #0]
	}
 8007dcc:	e001      	b.n	8007dd2 <vTaskSuspend+0xfe>
					vTaskSwitchContext();
 8007dce:	f000 fa75 	bl	80082bc <vTaskSwitchContext>
	}
 8007dd2:	bf00      	nop
 8007dd4:	3710      	adds	r7, #16
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	bd80      	pop	{r7, pc}
 8007dda:	bf00      	nop
 8007ddc:	20000478 	.word	0x20000478
 8007de0:	2000047c 	.word	0x2000047c
 8007de4:	20000580 	.word	0x20000580
 8007de8:	20000564 	.word	0x20000564
 8007dec:	20000584 	.word	0x20000584
 8007df0:	200005a0 	.word	0x200005a0
 8007df4:	e000ed04 	.word	0xe000ed04
 8007df8:	20000578 	.word	0x20000578

08007dfc <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8007dfc:	b480      	push	{r7}
 8007dfe:	b087      	sub	sp, #28
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8007e04:	2300      	movs	r3, #0
 8007e06:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d10b      	bne.n	8007e2a <prvTaskIsTaskSuspended+0x2e>
	__asm volatile
 8007e12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e16:	f383 8811 	msr	BASEPRI, r3
 8007e1a:	f3bf 8f6f 	isb	sy
 8007e1e:	f3bf 8f4f 	dsb	sy
 8007e22:	60fb      	str	r3, [r7, #12]
}
 8007e24:	bf00      	nop
 8007e26:	bf00      	nop
 8007e28:	e7fd      	b.n	8007e26 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007e2a:	693b      	ldr	r3, [r7, #16]
 8007e2c:	695b      	ldr	r3, [r3, #20]
 8007e2e:	4a0a      	ldr	r2, [pc, #40]	@ (8007e58 <prvTaskIsTaskSuspended+0x5c>)
 8007e30:	4293      	cmp	r3, r2
 8007e32:	d10a      	bne.n	8007e4a <prvTaskIsTaskSuspended+0x4e>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8007e34:	693b      	ldr	r3, [r7, #16]
 8007e36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e38:	4a08      	ldr	r2, [pc, #32]	@ (8007e5c <prvTaskIsTaskSuspended+0x60>)
 8007e3a:	4293      	cmp	r3, r2
 8007e3c:	d005      	beq.n	8007e4a <prvTaskIsTaskSuspended+0x4e>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8007e3e:	693b      	ldr	r3, [r7, #16]
 8007e40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d101      	bne.n	8007e4a <prvTaskIsTaskSuspended+0x4e>
				{
					xReturn = pdTRUE;
 8007e46:	2301      	movs	r3, #1
 8007e48:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007e4a:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	371c      	adds	r7, #28
 8007e50:	46bd      	mov	sp, r7
 8007e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e56:	4770      	bx	lr
 8007e58:	20000564 	.word	0x20000564
 8007e5c:	20000538 	.word	0x20000538

08007e60 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b084      	sub	sp, #16
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d10b      	bne.n	8007e8a <vTaskResume+0x2a>
	__asm volatile
 8007e72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e76:	f383 8811 	msr	BASEPRI, r3
 8007e7a:	f3bf 8f6f 	isb	sy
 8007e7e:	f3bf 8f4f 	dsb	sy
 8007e82:	60bb      	str	r3, [r7, #8]
}
 8007e84:	bf00      	nop
 8007e86:	bf00      	nop
 8007e88:	e7fd      	b.n	8007e86 <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8007e8a:	4b20      	ldr	r3, [pc, #128]	@ (8007f0c <vTaskResume+0xac>)
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	68fa      	ldr	r2, [r7, #12]
 8007e90:	429a      	cmp	r2, r3
 8007e92:	d037      	beq.n	8007f04 <vTaskResume+0xa4>
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d034      	beq.n	8007f04 <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 8007e9a:	f000 ffb5 	bl	8008e08 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8007e9e:	68f8      	ldr	r0, [r7, #12]
 8007ea0:	f7ff ffac 	bl	8007dfc <prvTaskIsTaskSuspended>
 8007ea4:	4603      	mov	r3, r0
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d02a      	beq.n	8007f00 <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	3304      	adds	r3, #4
 8007eae:	4618      	mov	r0, r3
 8007eb0:	f7ff f8a9 	bl	8007006 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007eb8:	2201      	movs	r2, #1
 8007eba:	409a      	lsls	r2, r3
 8007ebc:	4b14      	ldr	r3, [pc, #80]	@ (8007f10 <vTaskResume+0xb0>)
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	4313      	orrs	r3, r2
 8007ec2:	4a13      	ldr	r2, [pc, #76]	@ (8007f10 <vTaskResume+0xb0>)
 8007ec4:	6013      	str	r3, [r2, #0]
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007eca:	4613      	mov	r3, r2
 8007ecc:	009b      	lsls	r3, r3, #2
 8007ece:	4413      	add	r3, r2
 8007ed0:	009b      	lsls	r3, r3, #2
 8007ed2:	4a10      	ldr	r2, [pc, #64]	@ (8007f14 <vTaskResume+0xb4>)
 8007ed4:	441a      	add	r2, r3
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	3304      	adds	r3, #4
 8007eda:	4619      	mov	r1, r3
 8007edc:	4610      	mov	r0, r2
 8007ede:	f7ff f835 	bl	8006f4c <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ee6:	4b09      	ldr	r3, [pc, #36]	@ (8007f0c <vTaskResume+0xac>)
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007eec:	429a      	cmp	r2, r3
 8007eee:	d307      	bcc.n	8007f00 <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8007ef0:	4b09      	ldr	r3, [pc, #36]	@ (8007f18 <vTaskResume+0xb8>)
 8007ef2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007ef6:	601a      	str	r2, [r3, #0]
 8007ef8:	f3bf 8f4f 	dsb	sy
 8007efc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8007f00:	f000 ffb4 	bl	8008e6c <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007f04:	bf00      	nop
 8007f06:	3710      	adds	r7, #16
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	bd80      	pop	{r7, pc}
 8007f0c:	20000478 	.word	0x20000478
 8007f10:	20000580 	.word	0x20000580
 8007f14:	2000047c 	.word	0x2000047c
 8007f18:	e000ed04 	.word	0xe000ed04

08007f1c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	b08a      	sub	sp, #40	@ 0x28
 8007f20:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007f22:	2300      	movs	r3, #0
 8007f24:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007f26:	2300      	movs	r3, #0
 8007f28:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007f2a:	463a      	mov	r2, r7
 8007f2c:	1d39      	adds	r1, r7, #4
 8007f2e:	f107 0308 	add.w	r3, r7, #8
 8007f32:	4618      	mov	r0, r3
 8007f34:	f7f8 facc 	bl	80004d0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007f38:	6839      	ldr	r1, [r7, #0]
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	68ba      	ldr	r2, [r7, #8]
 8007f3e:	9202      	str	r2, [sp, #8]
 8007f40:	9301      	str	r3, [sp, #4]
 8007f42:	2300      	movs	r3, #0
 8007f44:	9300      	str	r3, [sp, #0]
 8007f46:	2300      	movs	r3, #0
 8007f48:	460a      	mov	r2, r1
 8007f4a:	4921      	ldr	r1, [pc, #132]	@ (8007fd0 <vTaskStartScheduler+0xb4>)
 8007f4c:	4821      	ldr	r0, [pc, #132]	@ (8007fd4 <vTaskStartScheduler+0xb8>)
 8007f4e:	f7ff fcdb 	bl	8007908 <xTaskCreateStatic>
 8007f52:	4603      	mov	r3, r0
 8007f54:	4a20      	ldr	r2, [pc, #128]	@ (8007fd8 <vTaskStartScheduler+0xbc>)
 8007f56:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007f58:	4b1f      	ldr	r3, [pc, #124]	@ (8007fd8 <vTaskStartScheduler+0xbc>)
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d002      	beq.n	8007f66 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007f60:	2301      	movs	r3, #1
 8007f62:	617b      	str	r3, [r7, #20]
 8007f64:	e001      	b.n	8007f6a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007f66:	2300      	movs	r3, #0
 8007f68:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007f6a:	697b      	ldr	r3, [r7, #20]
 8007f6c:	2b01      	cmp	r3, #1
 8007f6e:	d11b      	bne.n	8007fa8 <vTaskStartScheduler+0x8c>
	__asm volatile
 8007f70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f74:	f383 8811 	msr	BASEPRI, r3
 8007f78:	f3bf 8f6f 	isb	sy
 8007f7c:	f3bf 8f4f 	dsb	sy
 8007f80:	613b      	str	r3, [r7, #16]
}
 8007f82:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007f84:	4b15      	ldr	r3, [pc, #84]	@ (8007fdc <vTaskStartScheduler+0xc0>)
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	334c      	adds	r3, #76	@ 0x4c
 8007f8a:	4a15      	ldr	r2, [pc, #84]	@ (8007fe0 <vTaskStartScheduler+0xc4>)
 8007f8c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007f8e:	4b15      	ldr	r3, [pc, #84]	@ (8007fe4 <vTaskStartScheduler+0xc8>)
 8007f90:	f04f 32ff 	mov.w	r2, #4294967295
 8007f94:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007f96:	4b14      	ldr	r3, [pc, #80]	@ (8007fe8 <vTaskStartScheduler+0xcc>)
 8007f98:	2201      	movs	r2, #1
 8007f9a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007f9c:	4b13      	ldr	r3, [pc, #76]	@ (8007fec <vTaskStartScheduler+0xd0>)
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007fa2:	f000 fe8d 	bl	8008cc0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007fa6:	e00f      	b.n	8007fc8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007fa8:	697b      	ldr	r3, [r7, #20]
 8007faa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fae:	d10b      	bne.n	8007fc8 <vTaskStartScheduler+0xac>
	__asm volatile
 8007fb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fb4:	f383 8811 	msr	BASEPRI, r3
 8007fb8:	f3bf 8f6f 	isb	sy
 8007fbc:	f3bf 8f4f 	dsb	sy
 8007fc0:	60fb      	str	r3, [r7, #12]
}
 8007fc2:	bf00      	nop
 8007fc4:	bf00      	nop
 8007fc6:	e7fd      	b.n	8007fc4 <vTaskStartScheduler+0xa8>
}
 8007fc8:	bf00      	nop
 8007fca:	3718      	adds	r7, #24
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	bd80      	pop	{r7, pc}
 8007fd0:	0800a0e0 	.word	0x0800a0e0
 8007fd4:	080085a5 	.word	0x080085a5
 8007fd8:	2000059c 	.word	0x2000059c
 8007fdc:	20000478 	.word	0x20000478
 8007fe0:	20000100 	.word	0x20000100
 8007fe4:	20000598 	.word	0x20000598
 8007fe8:	20000584 	.word	0x20000584
 8007fec:	2000057c 	.word	0x2000057c

08007ff0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007ff0:	b480      	push	{r7}
 8007ff2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007ff4:	4b04      	ldr	r3, [pc, #16]	@ (8008008 <vTaskSuspendAll+0x18>)
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	3301      	adds	r3, #1
 8007ffa:	4a03      	ldr	r2, [pc, #12]	@ (8008008 <vTaskSuspendAll+0x18>)
 8007ffc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007ffe:	bf00      	nop
 8008000:	46bd      	mov	sp, r7
 8008002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008006:	4770      	bx	lr
 8008008:	200005a0 	.word	0x200005a0

0800800c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800800c:	b580      	push	{r7, lr}
 800800e:	b084      	sub	sp, #16
 8008010:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008012:	2300      	movs	r3, #0
 8008014:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008016:	2300      	movs	r3, #0
 8008018:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800801a:	4b42      	ldr	r3, [pc, #264]	@ (8008124 <xTaskResumeAll+0x118>)
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d10b      	bne.n	800803a <xTaskResumeAll+0x2e>
	__asm volatile
 8008022:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008026:	f383 8811 	msr	BASEPRI, r3
 800802a:	f3bf 8f6f 	isb	sy
 800802e:	f3bf 8f4f 	dsb	sy
 8008032:	603b      	str	r3, [r7, #0]
}
 8008034:	bf00      	nop
 8008036:	bf00      	nop
 8008038:	e7fd      	b.n	8008036 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800803a:	f000 fee5 	bl	8008e08 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800803e:	4b39      	ldr	r3, [pc, #228]	@ (8008124 <xTaskResumeAll+0x118>)
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	3b01      	subs	r3, #1
 8008044:	4a37      	ldr	r2, [pc, #220]	@ (8008124 <xTaskResumeAll+0x118>)
 8008046:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008048:	4b36      	ldr	r3, [pc, #216]	@ (8008124 <xTaskResumeAll+0x118>)
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d161      	bne.n	8008114 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008050:	4b35      	ldr	r3, [pc, #212]	@ (8008128 <xTaskResumeAll+0x11c>)
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d05d      	beq.n	8008114 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008058:	e02e      	b.n	80080b8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800805a:	4b34      	ldr	r3, [pc, #208]	@ (800812c <xTaskResumeAll+0x120>)
 800805c:	68db      	ldr	r3, [r3, #12]
 800805e:	68db      	ldr	r3, [r3, #12]
 8008060:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	3318      	adds	r3, #24
 8008066:	4618      	mov	r0, r3
 8008068:	f7fe ffcd 	bl	8007006 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	3304      	adds	r3, #4
 8008070:	4618      	mov	r0, r3
 8008072:	f7fe ffc8 	bl	8007006 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800807a:	2201      	movs	r2, #1
 800807c:	409a      	lsls	r2, r3
 800807e:	4b2c      	ldr	r3, [pc, #176]	@ (8008130 <xTaskResumeAll+0x124>)
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	4313      	orrs	r3, r2
 8008084:	4a2a      	ldr	r2, [pc, #168]	@ (8008130 <xTaskResumeAll+0x124>)
 8008086:	6013      	str	r3, [r2, #0]
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800808c:	4613      	mov	r3, r2
 800808e:	009b      	lsls	r3, r3, #2
 8008090:	4413      	add	r3, r2
 8008092:	009b      	lsls	r3, r3, #2
 8008094:	4a27      	ldr	r2, [pc, #156]	@ (8008134 <xTaskResumeAll+0x128>)
 8008096:	441a      	add	r2, r3
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	3304      	adds	r3, #4
 800809c:	4619      	mov	r1, r3
 800809e:	4610      	mov	r0, r2
 80080a0:	f7fe ff54 	bl	8006f4c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80080a8:	4b23      	ldr	r3, [pc, #140]	@ (8008138 <xTaskResumeAll+0x12c>)
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080ae:	429a      	cmp	r2, r3
 80080b0:	d302      	bcc.n	80080b8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80080b2:	4b22      	ldr	r3, [pc, #136]	@ (800813c <xTaskResumeAll+0x130>)
 80080b4:	2201      	movs	r2, #1
 80080b6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80080b8:	4b1c      	ldr	r3, [pc, #112]	@ (800812c <xTaskResumeAll+0x120>)
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d1cc      	bne.n	800805a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d001      	beq.n	80080ca <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80080c6:	f000 fb29 	bl	800871c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80080ca:	4b1d      	ldr	r3, [pc, #116]	@ (8008140 <xTaskResumeAll+0x134>)
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d010      	beq.n	80080f8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80080d6:	f000 f837 	bl	8008148 <xTaskIncrementTick>
 80080da:	4603      	mov	r3, r0
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d002      	beq.n	80080e6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80080e0:	4b16      	ldr	r3, [pc, #88]	@ (800813c <xTaskResumeAll+0x130>)
 80080e2:	2201      	movs	r2, #1
 80080e4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	3b01      	subs	r3, #1
 80080ea:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d1f1      	bne.n	80080d6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80080f2:	4b13      	ldr	r3, [pc, #76]	@ (8008140 <xTaskResumeAll+0x134>)
 80080f4:	2200      	movs	r2, #0
 80080f6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80080f8:	4b10      	ldr	r3, [pc, #64]	@ (800813c <xTaskResumeAll+0x130>)
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d009      	beq.n	8008114 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008100:	2301      	movs	r3, #1
 8008102:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008104:	4b0f      	ldr	r3, [pc, #60]	@ (8008144 <xTaskResumeAll+0x138>)
 8008106:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800810a:	601a      	str	r2, [r3, #0]
 800810c:	f3bf 8f4f 	dsb	sy
 8008110:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008114:	f000 feaa 	bl	8008e6c <vPortExitCritical>

	return xAlreadyYielded;
 8008118:	68bb      	ldr	r3, [r7, #8]
}
 800811a:	4618      	mov	r0, r3
 800811c:	3710      	adds	r7, #16
 800811e:	46bd      	mov	sp, r7
 8008120:	bd80      	pop	{r7, pc}
 8008122:	bf00      	nop
 8008124:	200005a0 	.word	0x200005a0
 8008128:	20000578 	.word	0x20000578
 800812c:	20000538 	.word	0x20000538
 8008130:	20000580 	.word	0x20000580
 8008134:	2000047c 	.word	0x2000047c
 8008138:	20000478 	.word	0x20000478
 800813c:	2000058c 	.word	0x2000058c
 8008140:	20000588 	.word	0x20000588
 8008144:	e000ed04 	.word	0xe000ed04

08008148 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b086      	sub	sp, #24
 800814c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800814e:	2300      	movs	r3, #0
 8008150:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008152:	4b4f      	ldr	r3, [pc, #316]	@ (8008290 <xTaskIncrementTick+0x148>)
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	2b00      	cmp	r3, #0
 8008158:	f040 808f 	bne.w	800827a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800815c:	4b4d      	ldr	r3, [pc, #308]	@ (8008294 <xTaskIncrementTick+0x14c>)
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	3301      	adds	r3, #1
 8008162:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008164:	4a4b      	ldr	r2, [pc, #300]	@ (8008294 <xTaskIncrementTick+0x14c>)
 8008166:	693b      	ldr	r3, [r7, #16]
 8008168:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800816a:	693b      	ldr	r3, [r7, #16]
 800816c:	2b00      	cmp	r3, #0
 800816e:	d121      	bne.n	80081b4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8008170:	4b49      	ldr	r3, [pc, #292]	@ (8008298 <xTaskIncrementTick+0x150>)
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d00b      	beq.n	8008192 <xTaskIncrementTick+0x4a>
	__asm volatile
 800817a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800817e:	f383 8811 	msr	BASEPRI, r3
 8008182:	f3bf 8f6f 	isb	sy
 8008186:	f3bf 8f4f 	dsb	sy
 800818a:	603b      	str	r3, [r7, #0]
}
 800818c:	bf00      	nop
 800818e:	bf00      	nop
 8008190:	e7fd      	b.n	800818e <xTaskIncrementTick+0x46>
 8008192:	4b41      	ldr	r3, [pc, #260]	@ (8008298 <xTaskIncrementTick+0x150>)
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	60fb      	str	r3, [r7, #12]
 8008198:	4b40      	ldr	r3, [pc, #256]	@ (800829c <xTaskIncrementTick+0x154>)
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	4a3e      	ldr	r2, [pc, #248]	@ (8008298 <xTaskIncrementTick+0x150>)
 800819e:	6013      	str	r3, [r2, #0]
 80081a0:	4a3e      	ldr	r2, [pc, #248]	@ (800829c <xTaskIncrementTick+0x154>)
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	6013      	str	r3, [r2, #0]
 80081a6:	4b3e      	ldr	r3, [pc, #248]	@ (80082a0 <xTaskIncrementTick+0x158>)
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	3301      	adds	r3, #1
 80081ac:	4a3c      	ldr	r2, [pc, #240]	@ (80082a0 <xTaskIncrementTick+0x158>)
 80081ae:	6013      	str	r3, [r2, #0]
 80081b0:	f000 fab4 	bl	800871c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80081b4:	4b3b      	ldr	r3, [pc, #236]	@ (80082a4 <xTaskIncrementTick+0x15c>)
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	693a      	ldr	r2, [r7, #16]
 80081ba:	429a      	cmp	r2, r3
 80081bc:	d348      	bcc.n	8008250 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80081be:	4b36      	ldr	r3, [pc, #216]	@ (8008298 <xTaskIncrementTick+0x150>)
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d104      	bne.n	80081d2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80081c8:	4b36      	ldr	r3, [pc, #216]	@ (80082a4 <xTaskIncrementTick+0x15c>)
 80081ca:	f04f 32ff 	mov.w	r2, #4294967295
 80081ce:	601a      	str	r2, [r3, #0]
					break;
 80081d0:	e03e      	b.n	8008250 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80081d2:	4b31      	ldr	r3, [pc, #196]	@ (8008298 <xTaskIncrementTick+0x150>)
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	68db      	ldr	r3, [r3, #12]
 80081d8:	68db      	ldr	r3, [r3, #12]
 80081da:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80081dc:	68bb      	ldr	r3, [r7, #8]
 80081de:	685b      	ldr	r3, [r3, #4]
 80081e0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80081e2:	693a      	ldr	r2, [r7, #16]
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	429a      	cmp	r2, r3
 80081e8:	d203      	bcs.n	80081f2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80081ea:	4a2e      	ldr	r2, [pc, #184]	@ (80082a4 <xTaskIncrementTick+0x15c>)
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80081f0:	e02e      	b.n	8008250 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80081f2:	68bb      	ldr	r3, [r7, #8]
 80081f4:	3304      	adds	r3, #4
 80081f6:	4618      	mov	r0, r3
 80081f8:	f7fe ff05 	bl	8007006 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80081fc:	68bb      	ldr	r3, [r7, #8]
 80081fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008200:	2b00      	cmp	r3, #0
 8008202:	d004      	beq.n	800820e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008204:	68bb      	ldr	r3, [r7, #8]
 8008206:	3318      	adds	r3, #24
 8008208:	4618      	mov	r0, r3
 800820a:	f7fe fefc 	bl	8007006 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800820e:	68bb      	ldr	r3, [r7, #8]
 8008210:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008212:	2201      	movs	r2, #1
 8008214:	409a      	lsls	r2, r3
 8008216:	4b24      	ldr	r3, [pc, #144]	@ (80082a8 <xTaskIncrementTick+0x160>)
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	4313      	orrs	r3, r2
 800821c:	4a22      	ldr	r2, [pc, #136]	@ (80082a8 <xTaskIncrementTick+0x160>)
 800821e:	6013      	str	r3, [r2, #0]
 8008220:	68bb      	ldr	r3, [r7, #8]
 8008222:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008224:	4613      	mov	r3, r2
 8008226:	009b      	lsls	r3, r3, #2
 8008228:	4413      	add	r3, r2
 800822a:	009b      	lsls	r3, r3, #2
 800822c:	4a1f      	ldr	r2, [pc, #124]	@ (80082ac <xTaskIncrementTick+0x164>)
 800822e:	441a      	add	r2, r3
 8008230:	68bb      	ldr	r3, [r7, #8]
 8008232:	3304      	adds	r3, #4
 8008234:	4619      	mov	r1, r3
 8008236:	4610      	mov	r0, r2
 8008238:	f7fe fe88 	bl	8006f4c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800823c:	68bb      	ldr	r3, [r7, #8]
 800823e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008240:	4b1b      	ldr	r3, [pc, #108]	@ (80082b0 <xTaskIncrementTick+0x168>)
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008246:	429a      	cmp	r2, r3
 8008248:	d3b9      	bcc.n	80081be <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800824a:	2301      	movs	r3, #1
 800824c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800824e:	e7b6      	b.n	80081be <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008250:	4b17      	ldr	r3, [pc, #92]	@ (80082b0 <xTaskIncrementTick+0x168>)
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008256:	4915      	ldr	r1, [pc, #84]	@ (80082ac <xTaskIncrementTick+0x164>)
 8008258:	4613      	mov	r3, r2
 800825a:	009b      	lsls	r3, r3, #2
 800825c:	4413      	add	r3, r2
 800825e:	009b      	lsls	r3, r3, #2
 8008260:	440b      	add	r3, r1
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	2b01      	cmp	r3, #1
 8008266:	d901      	bls.n	800826c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8008268:	2301      	movs	r3, #1
 800826a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800826c:	4b11      	ldr	r3, [pc, #68]	@ (80082b4 <xTaskIncrementTick+0x16c>)
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	2b00      	cmp	r3, #0
 8008272:	d007      	beq.n	8008284 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8008274:	2301      	movs	r3, #1
 8008276:	617b      	str	r3, [r7, #20]
 8008278:	e004      	b.n	8008284 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800827a:	4b0f      	ldr	r3, [pc, #60]	@ (80082b8 <xTaskIncrementTick+0x170>)
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	3301      	adds	r3, #1
 8008280:	4a0d      	ldr	r2, [pc, #52]	@ (80082b8 <xTaskIncrementTick+0x170>)
 8008282:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008284:	697b      	ldr	r3, [r7, #20]
}
 8008286:	4618      	mov	r0, r3
 8008288:	3718      	adds	r7, #24
 800828a:	46bd      	mov	sp, r7
 800828c:	bd80      	pop	{r7, pc}
 800828e:	bf00      	nop
 8008290:	200005a0 	.word	0x200005a0
 8008294:	2000057c 	.word	0x2000057c
 8008298:	20000530 	.word	0x20000530
 800829c:	20000534 	.word	0x20000534
 80082a0:	20000590 	.word	0x20000590
 80082a4:	20000598 	.word	0x20000598
 80082a8:	20000580 	.word	0x20000580
 80082ac:	2000047c 	.word	0x2000047c
 80082b0:	20000478 	.word	0x20000478
 80082b4:	2000058c 	.word	0x2000058c
 80082b8:	20000588 	.word	0x20000588

080082bc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80082bc:	b480      	push	{r7}
 80082be:	b087      	sub	sp, #28
 80082c0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80082c2:	4b2a      	ldr	r3, [pc, #168]	@ (800836c <vTaskSwitchContext+0xb0>)
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d003      	beq.n	80082d2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80082ca:	4b29      	ldr	r3, [pc, #164]	@ (8008370 <vTaskSwitchContext+0xb4>)
 80082cc:	2201      	movs	r2, #1
 80082ce:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80082d0:	e045      	b.n	800835e <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 80082d2:	4b27      	ldr	r3, [pc, #156]	@ (8008370 <vTaskSwitchContext+0xb4>)
 80082d4:	2200      	movs	r2, #0
 80082d6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80082d8:	4b26      	ldr	r3, [pc, #152]	@ (8008374 <vTaskSwitchContext+0xb8>)
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	fab3 f383 	clz	r3, r3
 80082e4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80082e6:	7afb      	ldrb	r3, [r7, #11]
 80082e8:	f1c3 031f 	rsb	r3, r3, #31
 80082ec:	617b      	str	r3, [r7, #20]
 80082ee:	4922      	ldr	r1, [pc, #136]	@ (8008378 <vTaskSwitchContext+0xbc>)
 80082f0:	697a      	ldr	r2, [r7, #20]
 80082f2:	4613      	mov	r3, r2
 80082f4:	009b      	lsls	r3, r3, #2
 80082f6:	4413      	add	r3, r2
 80082f8:	009b      	lsls	r3, r3, #2
 80082fa:	440b      	add	r3, r1
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d10b      	bne.n	800831a <vTaskSwitchContext+0x5e>
	__asm volatile
 8008302:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008306:	f383 8811 	msr	BASEPRI, r3
 800830a:	f3bf 8f6f 	isb	sy
 800830e:	f3bf 8f4f 	dsb	sy
 8008312:	607b      	str	r3, [r7, #4]
}
 8008314:	bf00      	nop
 8008316:	bf00      	nop
 8008318:	e7fd      	b.n	8008316 <vTaskSwitchContext+0x5a>
 800831a:	697a      	ldr	r2, [r7, #20]
 800831c:	4613      	mov	r3, r2
 800831e:	009b      	lsls	r3, r3, #2
 8008320:	4413      	add	r3, r2
 8008322:	009b      	lsls	r3, r3, #2
 8008324:	4a14      	ldr	r2, [pc, #80]	@ (8008378 <vTaskSwitchContext+0xbc>)
 8008326:	4413      	add	r3, r2
 8008328:	613b      	str	r3, [r7, #16]
 800832a:	693b      	ldr	r3, [r7, #16]
 800832c:	685b      	ldr	r3, [r3, #4]
 800832e:	685a      	ldr	r2, [r3, #4]
 8008330:	693b      	ldr	r3, [r7, #16]
 8008332:	605a      	str	r2, [r3, #4]
 8008334:	693b      	ldr	r3, [r7, #16]
 8008336:	685a      	ldr	r2, [r3, #4]
 8008338:	693b      	ldr	r3, [r7, #16]
 800833a:	3308      	adds	r3, #8
 800833c:	429a      	cmp	r2, r3
 800833e:	d104      	bne.n	800834a <vTaskSwitchContext+0x8e>
 8008340:	693b      	ldr	r3, [r7, #16]
 8008342:	685b      	ldr	r3, [r3, #4]
 8008344:	685a      	ldr	r2, [r3, #4]
 8008346:	693b      	ldr	r3, [r7, #16]
 8008348:	605a      	str	r2, [r3, #4]
 800834a:	693b      	ldr	r3, [r7, #16]
 800834c:	685b      	ldr	r3, [r3, #4]
 800834e:	68db      	ldr	r3, [r3, #12]
 8008350:	4a0a      	ldr	r2, [pc, #40]	@ (800837c <vTaskSwitchContext+0xc0>)
 8008352:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008354:	4b09      	ldr	r3, [pc, #36]	@ (800837c <vTaskSwitchContext+0xc0>)
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	334c      	adds	r3, #76	@ 0x4c
 800835a:	4a09      	ldr	r2, [pc, #36]	@ (8008380 <vTaskSwitchContext+0xc4>)
 800835c:	6013      	str	r3, [r2, #0]
}
 800835e:	bf00      	nop
 8008360:	371c      	adds	r7, #28
 8008362:	46bd      	mov	sp, r7
 8008364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008368:	4770      	bx	lr
 800836a:	bf00      	nop
 800836c:	200005a0 	.word	0x200005a0
 8008370:	2000058c 	.word	0x2000058c
 8008374:	20000580 	.word	0x20000580
 8008378:	2000047c 	.word	0x2000047c
 800837c:	20000478 	.word	0x20000478
 8008380:	20000100 	.word	0x20000100

08008384 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008384:	b580      	push	{r7, lr}
 8008386:	b084      	sub	sp, #16
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]
 800838c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	2b00      	cmp	r3, #0
 8008392:	d10b      	bne.n	80083ac <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8008394:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008398:	f383 8811 	msr	BASEPRI, r3
 800839c:	f3bf 8f6f 	isb	sy
 80083a0:	f3bf 8f4f 	dsb	sy
 80083a4:	60fb      	str	r3, [r7, #12]
}
 80083a6:	bf00      	nop
 80083a8:	bf00      	nop
 80083aa:	e7fd      	b.n	80083a8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80083ac:	4b07      	ldr	r3, [pc, #28]	@ (80083cc <vTaskPlaceOnEventList+0x48>)
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	3318      	adds	r3, #24
 80083b2:	4619      	mov	r1, r3
 80083b4:	6878      	ldr	r0, [r7, #4]
 80083b6:	f7fe fded 	bl	8006f94 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80083ba:	2101      	movs	r1, #1
 80083bc:	6838      	ldr	r0, [r7, #0]
 80083be:	f000 fb8d 	bl	8008adc <prvAddCurrentTaskToDelayedList>
}
 80083c2:	bf00      	nop
 80083c4:	3710      	adds	r7, #16
 80083c6:	46bd      	mov	sp, r7
 80083c8:	bd80      	pop	{r7, pc}
 80083ca:	bf00      	nop
 80083cc:	20000478 	.word	0x20000478

080083d0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80083d0:	b580      	push	{r7, lr}
 80083d2:	b086      	sub	sp, #24
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	68db      	ldr	r3, [r3, #12]
 80083dc:	68db      	ldr	r3, [r3, #12]
 80083de:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80083e0:	693b      	ldr	r3, [r7, #16]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d10b      	bne.n	80083fe <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80083e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083ea:	f383 8811 	msr	BASEPRI, r3
 80083ee:	f3bf 8f6f 	isb	sy
 80083f2:	f3bf 8f4f 	dsb	sy
 80083f6:	60fb      	str	r3, [r7, #12]
}
 80083f8:	bf00      	nop
 80083fa:	bf00      	nop
 80083fc:	e7fd      	b.n	80083fa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80083fe:	693b      	ldr	r3, [r7, #16]
 8008400:	3318      	adds	r3, #24
 8008402:	4618      	mov	r0, r3
 8008404:	f7fe fdff 	bl	8007006 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008408:	4b1d      	ldr	r3, [pc, #116]	@ (8008480 <xTaskRemoveFromEventList+0xb0>)
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d11c      	bne.n	800844a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008410:	693b      	ldr	r3, [r7, #16]
 8008412:	3304      	adds	r3, #4
 8008414:	4618      	mov	r0, r3
 8008416:	f7fe fdf6 	bl	8007006 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800841a:	693b      	ldr	r3, [r7, #16]
 800841c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800841e:	2201      	movs	r2, #1
 8008420:	409a      	lsls	r2, r3
 8008422:	4b18      	ldr	r3, [pc, #96]	@ (8008484 <xTaskRemoveFromEventList+0xb4>)
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	4313      	orrs	r3, r2
 8008428:	4a16      	ldr	r2, [pc, #88]	@ (8008484 <xTaskRemoveFromEventList+0xb4>)
 800842a:	6013      	str	r3, [r2, #0]
 800842c:	693b      	ldr	r3, [r7, #16]
 800842e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008430:	4613      	mov	r3, r2
 8008432:	009b      	lsls	r3, r3, #2
 8008434:	4413      	add	r3, r2
 8008436:	009b      	lsls	r3, r3, #2
 8008438:	4a13      	ldr	r2, [pc, #76]	@ (8008488 <xTaskRemoveFromEventList+0xb8>)
 800843a:	441a      	add	r2, r3
 800843c:	693b      	ldr	r3, [r7, #16]
 800843e:	3304      	adds	r3, #4
 8008440:	4619      	mov	r1, r3
 8008442:	4610      	mov	r0, r2
 8008444:	f7fe fd82 	bl	8006f4c <vListInsertEnd>
 8008448:	e005      	b.n	8008456 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800844a:	693b      	ldr	r3, [r7, #16]
 800844c:	3318      	adds	r3, #24
 800844e:	4619      	mov	r1, r3
 8008450:	480e      	ldr	r0, [pc, #56]	@ (800848c <xTaskRemoveFromEventList+0xbc>)
 8008452:	f7fe fd7b 	bl	8006f4c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008456:	693b      	ldr	r3, [r7, #16]
 8008458:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800845a:	4b0d      	ldr	r3, [pc, #52]	@ (8008490 <xTaskRemoveFromEventList+0xc0>)
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008460:	429a      	cmp	r2, r3
 8008462:	d905      	bls.n	8008470 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008464:	2301      	movs	r3, #1
 8008466:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008468:	4b0a      	ldr	r3, [pc, #40]	@ (8008494 <xTaskRemoveFromEventList+0xc4>)
 800846a:	2201      	movs	r2, #1
 800846c:	601a      	str	r2, [r3, #0]
 800846e:	e001      	b.n	8008474 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008470:	2300      	movs	r3, #0
 8008472:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008474:	697b      	ldr	r3, [r7, #20]
}
 8008476:	4618      	mov	r0, r3
 8008478:	3718      	adds	r7, #24
 800847a:	46bd      	mov	sp, r7
 800847c:	bd80      	pop	{r7, pc}
 800847e:	bf00      	nop
 8008480:	200005a0 	.word	0x200005a0
 8008484:	20000580 	.word	0x20000580
 8008488:	2000047c 	.word	0x2000047c
 800848c:	20000538 	.word	0x20000538
 8008490:	20000478 	.word	0x20000478
 8008494:	2000058c 	.word	0x2000058c

08008498 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008498:	b480      	push	{r7}
 800849a:	b083      	sub	sp, #12
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80084a0:	4b06      	ldr	r3, [pc, #24]	@ (80084bc <vTaskInternalSetTimeOutState+0x24>)
 80084a2:	681a      	ldr	r2, [r3, #0]
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80084a8:	4b05      	ldr	r3, [pc, #20]	@ (80084c0 <vTaskInternalSetTimeOutState+0x28>)
 80084aa:	681a      	ldr	r2, [r3, #0]
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	605a      	str	r2, [r3, #4]
}
 80084b0:	bf00      	nop
 80084b2:	370c      	adds	r7, #12
 80084b4:	46bd      	mov	sp, r7
 80084b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ba:	4770      	bx	lr
 80084bc:	20000590 	.word	0x20000590
 80084c0:	2000057c 	.word	0x2000057c

080084c4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80084c4:	b580      	push	{r7, lr}
 80084c6:	b088      	sub	sp, #32
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]
 80084cc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d10b      	bne.n	80084ec <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80084d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084d8:	f383 8811 	msr	BASEPRI, r3
 80084dc:	f3bf 8f6f 	isb	sy
 80084e0:	f3bf 8f4f 	dsb	sy
 80084e4:	613b      	str	r3, [r7, #16]
}
 80084e6:	bf00      	nop
 80084e8:	bf00      	nop
 80084ea:	e7fd      	b.n	80084e8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80084ec:	683b      	ldr	r3, [r7, #0]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d10b      	bne.n	800850a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80084f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084f6:	f383 8811 	msr	BASEPRI, r3
 80084fa:	f3bf 8f6f 	isb	sy
 80084fe:	f3bf 8f4f 	dsb	sy
 8008502:	60fb      	str	r3, [r7, #12]
}
 8008504:	bf00      	nop
 8008506:	bf00      	nop
 8008508:	e7fd      	b.n	8008506 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800850a:	f000 fc7d 	bl	8008e08 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800850e:	4b1d      	ldr	r3, [pc, #116]	@ (8008584 <xTaskCheckForTimeOut+0xc0>)
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	685b      	ldr	r3, [r3, #4]
 8008518:	69ba      	ldr	r2, [r7, #24]
 800851a:	1ad3      	subs	r3, r2, r3
 800851c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800851e:	683b      	ldr	r3, [r7, #0]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008526:	d102      	bne.n	800852e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008528:	2300      	movs	r3, #0
 800852a:	61fb      	str	r3, [r7, #28]
 800852c:	e023      	b.n	8008576 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681a      	ldr	r2, [r3, #0]
 8008532:	4b15      	ldr	r3, [pc, #84]	@ (8008588 <xTaskCheckForTimeOut+0xc4>)
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	429a      	cmp	r2, r3
 8008538:	d007      	beq.n	800854a <xTaskCheckForTimeOut+0x86>
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	685b      	ldr	r3, [r3, #4]
 800853e:	69ba      	ldr	r2, [r7, #24]
 8008540:	429a      	cmp	r2, r3
 8008542:	d302      	bcc.n	800854a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008544:	2301      	movs	r3, #1
 8008546:	61fb      	str	r3, [r7, #28]
 8008548:	e015      	b.n	8008576 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800854a:	683b      	ldr	r3, [r7, #0]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	697a      	ldr	r2, [r7, #20]
 8008550:	429a      	cmp	r2, r3
 8008552:	d20b      	bcs.n	800856c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008554:	683b      	ldr	r3, [r7, #0]
 8008556:	681a      	ldr	r2, [r3, #0]
 8008558:	697b      	ldr	r3, [r7, #20]
 800855a:	1ad2      	subs	r2, r2, r3
 800855c:	683b      	ldr	r3, [r7, #0]
 800855e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008560:	6878      	ldr	r0, [r7, #4]
 8008562:	f7ff ff99 	bl	8008498 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008566:	2300      	movs	r3, #0
 8008568:	61fb      	str	r3, [r7, #28]
 800856a:	e004      	b.n	8008576 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800856c:	683b      	ldr	r3, [r7, #0]
 800856e:	2200      	movs	r2, #0
 8008570:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008572:	2301      	movs	r3, #1
 8008574:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008576:	f000 fc79 	bl	8008e6c <vPortExitCritical>

	return xReturn;
 800857a:	69fb      	ldr	r3, [r7, #28]
}
 800857c:	4618      	mov	r0, r3
 800857e:	3720      	adds	r7, #32
 8008580:	46bd      	mov	sp, r7
 8008582:	bd80      	pop	{r7, pc}
 8008584:	2000057c 	.word	0x2000057c
 8008588:	20000590 	.word	0x20000590

0800858c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800858c:	b480      	push	{r7}
 800858e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008590:	4b03      	ldr	r3, [pc, #12]	@ (80085a0 <vTaskMissedYield+0x14>)
 8008592:	2201      	movs	r2, #1
 8008594:	601a      	str	r2, [r3, #0]
}
 8008596:	bf00      	nop
 8008598:	46bd      	mov	sp, r7
 800859a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859e:	4770      	bx	lr
 80085a0:	2000058c 	.word	0x2000058c

080085a4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80085a4:	b580      	push	{r7, lr}
 80085a6:	b082      	sub	sp, #8
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80085ac:	f000 f852 	bl	8008654 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80085b0:	4b06      	ldr	r3, [pc, #24]	@ (80085cc <prvIdleTask+0x28>)
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	2b01      	cmp	r3, #1
 80085b6:	d9f9      	bls.n	80085ac <prvIdleTask+0x8>
			{
				taskYIELD();
 80085b8:	4b05      	ldr	r3, [pc, #20]	@ (80085d0 <prvIdleTask+0x2c>)
 80085ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80085be:	601a      	str	r2, [r3, #0]
 80085c0:	f3bf 8f4f 	dsb	sy
 80085c4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80085c8:	e7f0      	b.n	80085ac <prvIdleTask+0x8>
 80085ca:	bf00      	nop
 80085cc:	2000047c 	.word	0x2000047c
 80085d0:	e000ed04 	.word	0xe000ed04

080085d4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b082      	sub	sp, #8
 80085d8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80085da:	2300      	movs	r3, #0
 80085dc:	607b      	str	r3, [r7, #4]
 80085de:	e00c      	b.n	80085fa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80085e0:	687a      	ldr	r2, [r7, #4]
 80085e2:	4613      	mov	r3, r2
 80085e4:	009b      	lsls	r3, r3, #2
 80085e6:	4413      	add	r3, r2
 80085e8:	009b      	lsls	r3, r3, #2
 80085ea:	4a12      	ldr	r2, [pc, #72]	@ (8008634 <prvInitialiseTaskLists+0x60>)
 80085ec:	4413      	add	r3, r2
 80085ee:	4618      	mov	r0, r3
 80085f0:	f7fe fc7f 	bl	8006ef2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	3301      	adds	r3, #1
 80085f8:	607b      	str	r3, [r7, #4]
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	2b06      	cmp	r3, #6
 80085fe:	d9ef      	bls.n	80085e0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008600:	480d      	ldr	r0, [pc, #52]	@ (8008638 <prvInitialiseTaskLists+0x64>)
 8008602:	f7fe fc76 	bl	8006ef2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008606:	480d      	ldr	r0, [pc, #52]	@ (800863c <prvInitialiseTaskLists+0x68>)
 8008608:	f7fe fc73 	bl	8006ef2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800860c:	480c      	ldr	r0, [pc, #48]	@ (8008640 <prvInitialiseTaskLists+0x6c>)
 800860e:	f7fe fc70 	bl	8006ef2 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008612:	480c      	ldr	r0, [pc, #48]	@ (8008644 <prvInitialiseTaskLists+0x70>)
 8008614:	f7fe fc6d 	bl	8006ef2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008618:	480b      	ldr	r0, [pc, #44]	@ (8008648 <prvInitialiseTaskLists+0x74>)
 800861a:	f7fe fc6a 	bl	8006ef2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800861e:	4b0b      	ldr	r3, [pc, #44]	@ (800864c <prvInitialiseTaskLists+0x78>)
 8008620:	4a05      	ldr	r2, [pc, #20]	@ (8008638 <prvInitialiseTaskLists+0x64>)
 8008622:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008624:	4b0a      	ldr	r3, [pc, #40]	@ (8008650 <prvInitialiseTaskLists+0x7c>)
 8008626:	4a05      	ldr	r2, [pc, #20]	@ (800863c <prvInitialiseTaskLists+0x68>)
 8008628:	601a      	str	r2, [r3, #0]
}
 800862a:	bf00      	nop
 800862c:	3708      	adds	r7, #8
 800862e:	46bd      	mov	sp, r7
 8008630:	bd80      	pop	{r7, pc}
 8008632:	bf00      	nop
 8008634:	2000047c 	.word	0x2000047c
 8008638:	20000508 	.word	0x20000508
 800863c:	2000051c 	.word	0x2000051c
 8008640:	20000538 	.word	0x20000538
 8008644:	2000054c 	.word	0x2000054c
 8008648:	20000564 	.word	0x20000564
 800864c:	20000530 	.word	0x20000530
 8008650:	20000534 	.word	0x20000534

08008654 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008654:	b580      	push	{r7, lr}
 8008656:	b082      	sub	sp, #8
 8008658:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800865a:	e019      	b.n	8008690 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800865c:	f000 fbd4 	bl	8008e08 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008660:	4b10      	ldr	r3, [pc, #64]	@ (80086a4 <prvCheckTasksWaitingTermination+0x50>)
 8008662:	68db      	ldr	r3, [r3, #12]
 8008664:	68db      	ldr	r3, [r3, #12]
 8008666:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	3304      	adds	r3, #4
 800866c:	4618      	mov	r0, r3
 800866e:	f7fe fcca 	bl	8007006 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008672:	4b0d      	ldr	r3, [pc, #52]	@ (80086a8 <prvCheckTasksWaitingTermination+0x54>)
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	3b01      	subs	r3, #1
 8008678:	4a0b      	ldr	r2, [pc, #44]	@ (80086a8 <prvCheckTasksWaitingTermination+0x54>)
 800867a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800867c:	4b0b      	ldr	r3, [pc, #44]	@ (80086ac <prvCheckTasksWaitingTermination+0x58>)
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	3b01      	subs	r3, #1
 8008682:	4a0a      	ldr	r2, [pc, #40]	@ (80086ac <prvCheckTasksWaitingTermination+0x58>)
 8008684:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008686:	f000 fbf1 	bl	8008e6c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800868a:	6878      	ldr	r0, [r7, #4]
 800868c:	f000 f810 	bl	80086b0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008690:	4b06      	ldr	r3, [pc, #24]	@ (80086ac <prvCheckTasksWaitingTermination+0x58>)
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d1e1      	bne.n	800865c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008698:	bf00      	nop
 800869a:	bf00      	nop
 800869c:	3708      	adds	r7, #8
 800869e:	46bd      	mov	sp, r7
 80086a0:	bd80      	pop	{r7, pc}
 80086a2:	bf00      	nop
 80086a4:	2000054c 	.word	0x2000054c
 80086a8:	20000578 	.word	0x20000578
 80086ac:	20000560 	.word	0x20000560

080086b0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b084      	sub	sp, #16
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	334c      	adds	r3, #76	@ 0x4c
 80086bc:	4618      	mov	r0, r3
 80086be:	f001 fb93 	bl	8009de8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d108      	bne.n	80086de <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086d0:	4618      	mov	r0, r3
 80086d2:	f000 fd47 	bl	8009164 <vPortFree>
				vPortFree( pxTCB );
 80086d6:	6878      	ldr	r0, [r7, #4]
 80086d8:	f000 fd44 	bl	8009164 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80086dc:	e019      	b.n	8008712 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80086e4:	2b01      	cmp	r3, #1
 80086e6:	d103      	bne.n	80086f0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80086e8:	6878      	ldr	r0, [r7, #4]
 80086ea:	f000 fd3b 	bl	8009164 <vPortFree>
	}
 80086ee:	e010      	b.n	8008712 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80086f6:	2b02      	cmp	r3, #2
 80086f8:	d00b      	beq.n	8008712 <prvDeleteTCB+0x62>
	__asm volatile
 80086fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086fe:	f383 8811 	msr	BASEPRI, r3
 8008702:	f3bf 8f6f 	isb	sy
 8008706:	f3bf 8f4f 	dsb	sy
 800870a:	60fb      	str	r3, [r7, #12]
}
 800870c:	bf00      	nop
 800870e:	bf00      	nop
 8008710:	e7fd      	b.n	800870e <prvDeleteTCB+0x5e>
	}
 8008712:	bf00      	nop
 8008714:	3710      	adds	r7, #16
 8008716:	46bd      	mov	sp, r7
 8008718:	bd80      	pop	{r7, pc}
	...

0800871c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800871c:	b480      	push	{r7}
 800871e:	b083      	sub	sp, #12
 8008720:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008722:	4b0c      	ldr	r3, [pc, #48]	@ (8008754 <prvResetNextTaskUnblockTime+0x38>)
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d104      	bne.n	8008736 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800872c:	4b0a      	ldr	r3, [pc, #40]	@ (8008758 <prvResetNextTaskUnblockTime+0x3c>)
 800872e:	f04f 32ff 	mov.w	r2, #4294967295
 8008732:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008734:	e008      	b.n	8008748 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008736:	4b07      	ldr	r3, [pc, #28]	@ (8008754 <prvResetNextTaskUnblockTime+0x38>)
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	68db      	ldr	r3, [r3, #12]
 800873c:	68db      	ldr	r3, [r3, #12]
 800873e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	685b      	ldr	r3, [r3, #4]
 8008744:	4a04      	ldr	r2, [pc, #16]	@ (8008758 <prvResetNextTaskUnblockTime+0x3c>)
 8008746:	6013      	str	r3, [r2, #0]
}
 8008748:	bf00      	nop
 800874a:	370c      	adds	r7, #12
 800874c:	46bd      	mov	sp, r7
 800874e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008752:	4770      	bx	lr
 8008754:	20000530 	.word	0x20000530
 8008758:	20000598 	.word	0x20000598

0800875c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800875c:	b480      	push	{r7}
 800875e:	b083      	sub	sp, #12
 8008760:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008762:	4b0b      	ldr	r3, [pc, #44]	@ (8008790 <xTaskGetSchedulerState+0x34>)
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d102      	bne.n	8008770 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800876a:	2301      	movs	r3, #1
 800876c:	607b      	str	r3, [r7, #4]
 800876e:	e008      	b.n	8008782 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008770:	4b08      	ldr	r3, [pc, #32]	@ (8008794 <xTaskGetSchedulerState+0x38>)
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	2b00      	cmp	r3, #0
 8008776:	d102      	bne.n	800877e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008778:	2302      	movs	r3, #2
 800877a:	607b      	str	r3, [r7, #4]
 800877c:	e001      	b.n	8008782 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800877e:	2300      	movs	r3, #0
 8008780:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008782:	687b      	ldr	r3, [r7, #4]
	}
 8008784:	4618      	mov	r0, r3
 8008786:	370c      	adds	r7, #12
 8008788:	46bd      	mov	sp, r7
 800878a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878e:	4770      	bx	lr
 8008790:	20000584 	.word	0x20000584
 8008794:	200005a0 	.word	0x200005a0

08008798 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008798:	b580      	push	{r7, lr}
 800879a:	b084      	sub	sp, #16
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80087a4:	2300      	movs	r3, #0
 80087a6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d05e      	beq.n	800886c <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80087ae:	68bb      	ldr	r3, [r7, #8]
 80087b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80087b2:	4b31      	ldr	r3, [pc, #196]	@ (8008878 <xTaskPriorityInherit+0xe0>)
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087b8:	429a      	cmp	r2, r3
 80087ba:	d24e      	bcs.n	800885a <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80087bc:	68bb      	ldr	r3, [r7, #8]
 80087be:	699b      	ldr	r3, [r3, #24]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	db06      	blt.n	80087d2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80087c4:	4b2c      	ldr	r3, [pc, #176]	@ (8008878 <xTaskPriorityInherit+0xe0>)
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087ca:	f1c3 0207 	rsb	r2, r3, #7
 80087ce:	68bb      	ldr	r3, [r7, #8]
 80087d0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80087d2:	68bb      	ldr	r3, [r7, #8]
 80087d4:	6959      	ldr	r1, [r3, #20]
 80087d6:	68bb      	ldr	r3, [r7, #8]
 80087d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80087da:	4613      	mov	r3, r2
 80087dc:	009b      	lsls	r3, r3, #2
 80087de:	4413      	add	r3, r2
 80087e0:	009b      	lsls	r3, r3, #2
 80087e2:	4a26      	ldr	r2, [pc, #152]	@ (800887c <xTaskPriorityInherit+0xe4>)
 80087e4:	4413      	add	r3, r2
 80087e6:	4299      	cmp	r1, r3
 80087e8:	d12f      	bne.n	800884a <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80087ea:	68bb      	ldr	r3, [r7, #8]
 80087ec:	3304      	adds	r3, #4
 80087ee:	4618      	mov	r0, r3
 80087f0:	f7fe fc09 	bl	8007006 <uxListRemove>
 80087f4:	4603      	mov	r3, r0
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d10a      	bne.n	8008810 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80087fa:	68bb      	ldr	r3, [r7, #8]
 80087fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087fe:	2201      	movs	r2, #1
 8008800:	fa02 f303 	lsl.w	r3, r2, r3
 8008804:	43da      	mvns	r2, r3
 8008806:	4b1e      	ldr	r3, [pc, #120]	@ (8008880 <xTaskPriorityInherit+0xe8>)
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	4013      	ands	r3, r2
 800880c:	4a1c      	ldr	r2, [pc, #112]	@ (8008880 <xTaskPriorityInherit+0xe8>)
 800880e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008810:	4b19      	ldr	r3, [pc, #100]	@ (8008878 <xTaskPriorityInherit+0xe0>)
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008816:	68bb      	ldr	r3, [r7, #8]
 8008818:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800881a:	68bb      	ldr	r3, [r7, #8]
 800881c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800881e:	2201      	movs	r2, #1
 8008820:	409a      	lsls	r2, r3
 8008822:	4b17      	ldr	r3, [pc, #92]	@ (8008880 <xTaskPriorityInherit+0xe8>)
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	4313      	orrs	r3, r2
 8008828:	4a15      	ldr	r2, [pc, #84]	@ (8008880 <xTaskPriorityInherit+0xe8>)
 800882a:	6013      	str	r3, [r2, #0]
 800882c:	68bb      	ldr	r3, [r7, #8]
 800882e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008830:	4613      	mov	r3, r2
 8008832:	009b      	lsls	r3, r3, #2
 8008834:	4413      	add	r3, r2
 8008836:	009b      	lsls	r3, r3, #2
 8008838:	4a10      	ldr	r2, [pc, #64]	@ (800887c <xTaskPriorityInherit+0xe4>)
 800883a:	441a      	add	r2, r3
 800883c:	68bb      	ldr	r3, [r7, #8]
 800883e:	3304      	adds	r3, #4
 8008840:	4619      	mov	r1, r3
 8008842:	4610      	mov	r0, r2
 8008844:	f7fe fb82 	bl	8006f4c <vListInsertEnd>
 8008848:	e004      	b.n	8008854 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800884a:	4b0b      	ldr	r3, [pc, #44]	@ (8008878 <xTaskPriorityInherit+0xe0>)
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008850:	68bb      	ldr	r3, [r7, #8]
 8008852:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008854:	2301      	movs	r3, #1
 8008856:	60fb      	str	r3, [r7, #12]
 8008858:	e008      	b.n	800886c <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800885a:	68bb      	ldr	r3, [r7, #8]
 800885c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800885e:	4b06      	ldr	r3, [pc, #24]	@ (8008878 <xTaskPriorityInherit+0xe0>)
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008864:	429a      	cmp	r2, r3
 8008866:	d201      	bcs.n	800886c <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008868:	2301      	movs	r3, #1
 800886a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800886c:	68fb      	ldr	r3, [r7, #12]
	}
 800886e:	4618      	mov	r0, r3
 8008870:	3710      	adds	r7, #16
 8008872:	46bd      	mov	sp, r7
 8008874:	bd80      	pop	{r7, pc}
 8008876:	bf00      	nop
 8008878:	20000478 	.word	0x20000478
 800887c:	2000047c 	.word	0x2000047c
 8008880:	20000580 	.word	0x20000580

08008884 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008884:	b580      	push	{r7, lr}
 8008886:	b086      	sub	sp, #24
 8008888:	af00      	add	r7, sp, #0
 800888a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008890:	2300      	movs	r3, #0
 8008892:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d070      	beq.n	800897c <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800889a:	4b3b      	ldr	r3, [pc, #236]	@ (8008988 <xTaskPriorityDisinherit+0x104>)
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	693a      	ldr	r2, [r7, #16]
 80088a0:	429a      	cmp	r2, r3
 80088a2:	d00b      	beq.n	80088bc <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80088a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088a8:	f383 8811 	msr	BASEPRI, r3
 80088ac:	f3bf 8f6f 	isb	sy
 80088b0:	f3bf 8f4f 	dsb	sy
 80088b4:	60fb      	str	r3, [r7, #12]
}
 80088b6:	bf00      	nop
 80088b8:	bf00      	nop
 80088ba:	e7fd      	b.n	80088b8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80088bc:	693b      	ldr	r3, [r7, #16]
 80088be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d10b      	bne.n	80088dc <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80088c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088c8:	f383 8811 	msr	BASEPRI, r3
 80088cc:	f3bf 8f6f 	isb	sy
 80088d0:	f3bf 8f4f 	dsb	sy
 80088d4:	60bb      	str	r3, [r7, #8]
}
 80088d6:	bf00      	nop
 80088d8:	bf00      	nop
 80088da:	e7fd      	b.n	80088d8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80088dc:	693b      	ldr	r3, [r7, #16]
 80088de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80088e0:	1e5a      	subs	r2, r3, #1
 80088e2:	693b      	ldr	r3, [r7, #16]
 80088e4:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80088e6:	693b      	ldr	r3, [r7, #16]
 80088e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80088ea:	693b      	ldr	r3, [r7, #16]
 80088ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80088ee:	429a      	cmp	r2, r3
 80088f0:	d044      	beq.n	800897c <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80088f2:	693b      	ldr	r3, [r7, #16]
 80088f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d140      	bne.n	800897c <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80088fa:	693b      	ldr	r3, [r7, #16]
 80088fc:	3304      	adds	r3, #4
 80088fe:	4618      	mov	r0, r3
 8008900:	f7fe fb81 	bl	8007006 <uxListRemove>
 8008904:	4603      	mov	r3, r0
 8008906:	2b00      	cmp	r3, #0
 8008908:	d115      	bne.n	8008936 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800890a:	693b      	ldr	r3, [r7, #16]
 800890c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800890e:	491f      	ldr	r1, [pc, #124]	@ (800898c <xTaskPriorityDisinherit+0x108>)
 8008910:	4613      	mov	r3, r2
 8008912:	009b      	lsls	r3, r3, #2
 8008914:	4413      	add	r3, r2
 8008916:	009b      	lsls	r3, r3, #2
 8008918:	440b      	add	r3, r1
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	2b00      	cmp	r3, #0
 800891e:	d10a      	bne.n	8008936 <xTaskPriorityDisinherit+0xb2>
 8008920:	693b      	ldr	r3, [r7, #16]
 8008922:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008924:	2201      	movs	r2, #1
 8008926:	fa02 f303 	lsl.w	r3, r2, r3
 800892a:	43da      	mvns	r2, r3
 800892c:	4b18      	ldr	r3, [pc, #96]	@ (8008990 <xTaskPriorityDisinherit+0x10c>)
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	4013      	ands	r3, r2
 8008932:	4a17      	ldr	r2, [pc, #92]	@ (8008990 <xTaskPriorityDisinherit+0x10c>)
 8008934:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008936:	693b      	ldr	r3, [r7, #16]
 8008938:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800893a:	693b      	ldr	r3, [r7, #16]
 800893c:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800893e:	693b      	ldr	r3, [r7, #16]
 8008940:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008942:	f1c3 0207 	rsb	r2, r3, #7
 8008946:	693b      	ldr	r3, [r7, #16]
 8008948:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800894a:	693b      	ldr	r3, [r7, #16]
 800894c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800894e:	2201      	movs	r2, #1
 8008950:	409a      	lsls	r2, r3
 8008952:	4b0f      	ldr	r3, [pc, #60]	@ (8008990 <xTaskPriorityDisinherit+0x10c>)
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	4313      	orrs	r3, r2
 8008958:	4a0d      	ldr	r2, [pc, #52]	@ (8008990 <xTaskPriorityDisinherit+0x10c>)
 800895a:	6013      	str	r3, [r2, #0]
 800895c:	693b      	ldr	r3, [r7, #16]
 800895e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008960:	4613      	mov	r3, r2
 8008962:	009b      	lsls	r3, r3, #2
 8008964:	4413      	add	r3, r2
 8008966:	009b      	lsls	r3, r3, #2
 8008968:	4a08      	ldr	r2, [pc, #32]	@ (800898c <xTaskPriorityDisinherit+0x108>)
 800896a:	441a      	add	r2, r3
 800896c:	693b      	ldr	r3, [r7, #16]
 800896e:	3304      	adds	r3, #4
 8008970:	4619      	mov	r1, r3
 8008972:	4610      	mov	r0, r2
 8008974:	f7fe faea 	bl	8006f4c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008978:	2301      	movs	r3, #1
 800897a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800897c:	697b      	ldr	r3, [r7, #20]
	}
 800897e:	4618      	mov	r0, r3
 8008980:	3718      	adds	r7, #24
 8008982:	46bd      	mov	sp, r7
 8008984:	bd80      	pop	{r7, pc}
 8008986:	bf00      	nop
 8008988:	20000478 	.word	0x20000478
 800898c:	2000047c 	.word	0x2000047c
 8008990:	20000580 	.word	0x20000580

08008994 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008994:	b580      	push	{r7, lr}
 8008996:	b088      	sub	sp, #32
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]
 800899c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80089a2:	2301      	movs	r3, #1
 80089a4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d079      	beq.n	8008aa0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80089ac:	69bb      	ldr	r3, [r7, #24]
 80089ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d10b      	bne.n	80089cc <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 80089b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089b8:	f383 8811 	msr	BASEPRI, r3
 80089bc:	f3bf 8f6f 	isb	sy
 80089c0:	f3bf 8f4f 	dsb	sy
 80089c4:	60fb      	str	r3, [r7, #12]
}
 80089c6:	bf00      	nop
 80089c8:	bf00      	nop
 80089ca:	e7fd      	b.n	80089c8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80089cc:	69bb      	ldr	r3, [r7, #24]
 80089ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80089d0:	683a      	ldr	r2, [r7, #0]
 80089d2:	429a      	cmp	r2, r3
 80089d4:	d902      	bls.n	80089dc <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80089d6:	683b      	ldr	r3, [r7, #0]
 80089d8:	61fb      	str	r3, [r7, #28]
 80089da:	e002      	b.n	80089e2 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80089dc:	69bb      	ldr	r3, [r7, #24]
 80089de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80089e0:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80089e2:	69bb      	ldr	r3, [r7, #24]
 80089e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089e6:	69fa      	ldr	r2, [r7, #28]
 80089e8:	429a      	cmp	r2, r3
 80089ea:	d059      	beq.n	8008aa0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80089ec:	69bb      	ldr	r3, [r7, #24]
 80089ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80089f0:	697a      	ldr	r2, [r7, #20]
 80089f2:	429a      	cmp	r2, r3
 80089f4:	d154      	bne.n	8008aa0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80089f6:	4b2c      	ldr	r3, [pc, #176]	@ (8008aa8 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	69ba      	ldr	r2, [r7, #24]
 80089fc:	429a      	cmp	r2, r3
 80089fe:	d10b      	bne.n	8008a18 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8008a00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a04:	f383 8811 	msr	BASEPRI, r3
 8008a08:	f3bf 8f6f 	isb	sy
 8008a0c:	f3bf 8f4f 	dsb	sy
 8008a10:	60bb      	str	r3, [r7, #8]
}
 8008a12:	bf00      	nop
 8008a14:	bf00      	nop
 8008a16:	e7fd      	b.n	8008a14 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008a18:	69bb      	ldr	r3, [r7, #24]
 8008a1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a1c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008a1e:	69bb      	ldr	r3, [r7, #24]
 8008a20:	69fa      	ldr	r2, [r7, #28]
 8008a22:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008a24:	69bb      	ldr	r3, [r7, #24]
 8008a26:	699b      	ldr	r3, [r3, #24]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	db04      	blt.n	8008a36 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a2c:	69fb      	ldr	r3, [r7, #28]
 8008a2e:	f1c3 0207 	rsb	r2, r3, #7
 8008a32:	69bb      	ldr	r3, [r7, #24]
 8008a34:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008a36:	69bb      	ldr	r3, [r7, #24]
 8008a38:	6959      	ldr	r1, [r3, #20]
 8008a3a:	693a      	ldr	r2, [r7, #16]
 8008a3c:	4613      	mov	r3, r2
 8008a3e:	009b      	lsls	r3, r3, #2
 8008a40:	4413      	add	r3, r2
 8008a42:	009b      	lsls	r3, r3, #2
 8008a44:	4a19      	ldr	r2, [pc, #100]	@ (8008aac <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8008a46:	4413      	add	r3, r2
 8008a48:	4299      	cmp	r1, r3
 8008a4a:	d129      	bne.n	8008aa0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008a4c:	69bb      	ldr	r3, [r7, #24]
 8008a4e:	3304      	adds	r3, #4
 8008a50:	4618      	mov	r0, r3
 8008a52:	f7fe fad8 	bl	8007006 <uxListRemove>
 8008a56:	4603      	mov	r3, r0
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d10a      	bne.n	8008a72 <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8008a5c:	69bb      	ldr	r3, [r7, #24]
 8008a5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a60:	2201      	movs	r2, #1
 8008a62:	fa02 f303 	lsl.w	r3, r2, r3
 8008a66:	43da      	mvns	r2, r3
 8008a68:	4b11      	ldr	r3, [pc, #68]	@ (8008ab0 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	4013      	ands	r3, r2
 8008a6e:	4a10      	ldr	r2, [pc, #64]	@ (8008ab0 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8008a70:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008a72:	69bb      	ldr	r3, [r7, #24]
 8008a74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a76:	2201      	movs	r2, #1
 8008a78:	409a      	lsls	r2, r3
 8008a7a:	4b0d      	ldr	r3, [pc, #52]	@ (8008ab0 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	4313      	orrs	r3, r2
 8008a80:	4a0b      	ldr	r2, [pc, #44]	@ (8008ab0 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8008a82:	6013      	str	r3, [r2, #0]
 8008a84:	69bb      	ldr	r3, [r7, #24]
 8008a86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a88:	4613      	mov	r3, r2
 8008a8a:	009b      	lsls	r3, r3, #2
 8008a8c:	4413      	add	r3, r2
 8008a8e:	009b      	lsls	r3, r3, #2
 8008a90:	4a06      	ldr	r2, [pc, #24]	@ (8008aac <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8008a92:	441a      	add	r2, r3
 8008a94:	69bb      	ldr	r3, [r7, #24]
 8008a96:	3304      	adds	r3, #4
 8008a98:	4619      	mov	r1, r3
 8008a9a:	4610      	mov	r0, r2
 8008a9c:	f7fe fa56 	bl	8006f4c <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008aa0:	bf00      	nop
 8008aa2:	3720      	adds	r7, #32
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	bd80      	pop	{r7, pc}
 8008aa8:	20000478 	.word	0x20000478
 8008aac:	2000047c 	.word	0x2000047c
 8008ab0:	20000580 	.word	0x20000580

08008ab4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008ab4:	b480      	push	{r7}
 8008ab6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008ab8:	4b07      	ldr	r3, [pc, #28]	@ (8008ad8 <pvTaskIncrementMutexHeldCount+0x24>)
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d004      	beq.n	8008aca <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008ac0:	4b05      	ldr	r3, [pc, #20]	@ (8008ad8 <pvTaskIncrementMutexHeldCount+0x24>)
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008ac6:	3201      	adds	r2, #1
 8008ac8:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 8008aca:	4b03      	ldr	r3, [pc, #12]	@ (8008ad8 <pvTaskIncrementMutexHeldCount+0x24>)
 8008acc:	681b      	ldr	r3, [r3, #0]
	}
 8008ace:	4618      	mov	r0, r3
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad6:	4770      	bx	lr
 8008ad8:	20000478 	.word	0x20000478

08008adc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b084      	sub	sp, #16
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
 8008ae4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008ae6:	4b29      	ldr	r3, [pc, #164]	@ (8008b8c <prvAddCurrentTaskToDelayedList+0xb0>)
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008aec:	4b28      	ldr	r3, [pc, #160]	@ (8008b90 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	3304      	adds	r3, #4
 8008af2:	4618      	mov	r0, r3
 8008af4:	f7fe fa87 	bl	8007006 <uxListRemove>
 8008af8:	4603      	mov	r3, r0
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d10b      	bne.n	8008b16 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8008afe:	4b24      	ldr	r3, [pc, #144]	@ (8008b90 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b04:	2201      	movs	r2, #1
 8008b06:	fa02 f303 	lsl.w	r3, r2, r3
 8008b0a:	43da      	mvns	r2, r3
 8008b0c:	4b21      	ldr	r3, [pc, #132]	@ (8008b94 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	4013      	ands	r3, r2
 8008b12:	4a20      	ldr	r2, [pc, #128]	@ (8008b94 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008b14:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b1c:	d10a      	bne.n	8008b34 <prvAddCurrentTaskToDelayedList+0x58>
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d007      	beq.n	8008b34 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008b24:	4b1a      	ldr	r3, [pc, #104]	@ (8008b90 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	3304      	adds	r3, #4
 8008b2a:	4619      	mov	r1, r3
 8008b2c:	481a      	ldr	r0, [pc, #104]	@ (8008b98 <prvAddCurrentTaskToDelayedList+0xbc>)
 8008b2e:	f7fe fa0d 	bl	8006f4c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008b32:	e026      	b.n	8008b82 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008b34:	68fa      	ldr	r2, [r7, #12]
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	4413      	add	r3, r2
 8008b3a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008b3c:	4b14      	ldr	r3, [pc, #80]	@ (8008b90 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	68ba      	ldr	r2, [r7, #8]
 8008b42:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008b44:	68ba      	ldr	r2, [r7, #8]
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	429a      	cmp	r2, r3
 8008b4a:	d209      	bcs.n	8008b60 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008b4c:	4b13      	ldr	r3, [pc, #76]	@ (8008b9c <prvAddCurrentTaskToDelayedList+0xc0>)
 8008b4e:	681a      	ldr	r2, [r3, #0]
 8008b50:	4b0f      	ldr	r3, [pc, #60]	@ (8008b90 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	3304      	adds	r3, #4
 8008b56:	4619      	mov	r1, r3
 8008b58:	4610      	mov	r0, r2
 8008b5a:	f7fe fa1b 	bl	8006f94 <vListInsert>
}
 8008b5e:	e010      	b.n	8008b82 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008b60:	4b0f      	ldr	r3, [pc, #60]	@ (8008ba0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8008b62:	681a      	ldr	r2, [r3, #0]
 8008b64:	4b0a      	ldr	r3, [pc, #40]	@ (8008b90 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	3304      	adds	r3, #4
 8008b6a:	4619      	mov	r1, r3
 8008b6c:	4610      	mov	r0, r2
 8008b6e:	f7fe fa11 	bl	8006f94 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008b72:	4b0c      	ldr	r3, [pc, #48]	@ (8008ba4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	68ba      	ldr	r2, [r7, #8]
 8008b78:	429a      	cmp	r2, r3
 8008b7a:	d202      	bcs.n	8008b82 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008b7c:	4a09      	ldr	r2, [pc, #36]	@ (8008ba4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008b7e:	68bb      	ldr	r3, [r7, #8]
 8008b80:	6013      	str	r3, [r2, #0]
}
 8008b82:	bf00      	nop
 8008b84:	3710      	adds	r7, #16
 8008b86:	46bd      	mov	sp, r7
 8008b88:	bd80      	pop	{r7, pc}
 8008b8a:	bf00      	nop
 8008b8c:	2000057c 	.word	0x2000057c
 8008b90:	20000478 	.word	0x20000478
 8008b94:	20000580 	.word	0x20000580
 8008b98:	20000564 	.word	0x20000564
 8008b9c:	20000534 	.word	0x20000534
 8008ba0:	20000530 	.word	0x20000530
 8008ba4:	20000598 	.word	0x20000598

08008ba8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008ba8:	b480      	push	{r7}
 8008baa:	b085      	sub	sp, #20
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	60f8      	str	r0, [r7, #12]
 8008bb0:	60b9      	str	r1, [r7, #8]
 8008bb2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	3b04      	subs	r3, #4
 8008bb8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008bc0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	3b04      	subs	r3, #4
 8008bc6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008bc8:	68bb      	ldr	r3, [r7, #8]
 8008bca:	f023 0201 	bic.w	r2, r3, #1
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	3b04      	subs	r3, #4
 8008bd6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008bd8:	4a0c      	ldr	r2, [pc, #48]	@ (8008c0c <pxPortInitialiseStack+0x64>)
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	3b14      	subs	r3, #20
 8008be2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008be4:	687a      	ldr	r2, [r7, #4]
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	3b04      	subs	r3, #4
 8008bee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	f06f 0202 	mvn.w	r2, #2
 8008bf6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	3b20      	subs	r3, #32
 8008bfc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008bfe:	68fb      	ldr	r3, [r7, #12]
}
 8008c00:	4618      	mov	r0, r3
 8008c02:	3714      	adds	r7, #20
 8008c04:	46bd      	mov	sp, r7
 8008c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0a:	4770      	bx	lr
 8008c0c:	08008c11 	.word	0x08008c11

08008c10 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008c10:	b480      	push	{r7}
 8008c12:	b085      	sub	sp, #20
 8008c14:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008c16:	2300      	movs	r3, #0
 8008c18:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008c1a:	4b13      	ldr	r3, [pc, #76]	@ (8008c68 <prvTaskExitError+0x58>)
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c22:	d00b      	beq.n	8008c3c <prvTaskExitError+0x2c>
	__asm volatile
 8008c24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c28:	f383 8811 	msr	BASEPRI, r3
 8008c2c:	f3bf 8f6f 	isb	sy
 8008c30:	f3bf 8f4f 	dsb	sy
 8008c34:	60fb      	str	r3, [r7, #12]
}
 8008c36:	bf00      	nop
 8008c38:	bf00      	nop
 8008c3a:	e7fd      	b.n	8008c38 <prvTaskExitError+0x28>
	__asm volatile
 8008c3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c40:	f383 8811 	msr	BASEPRI, r3
 8008c44:	f3bf 8f6f 	isb	sy
 8008c48:	f3bf 8f4f 	dsb	sy
 8008c4c:	60bb      	str	r3, [r7, #8]
}
 8008c4e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008c50:	bf00      	nop
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d0fc      	beq.n	8008c52 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008c58:	bf00      	nop
 8008c5a:	bf00      	nop
 8008c5c:	3714      	adds	r7, #20
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c64:	4770      	bx	lr
 8008c66:	bf00      	nop
 8008c68:	20000098 	.word	0x20000098
 8008c6c:	00000000 	.word	0x00000000

08008c70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008c70:	4b07      	ldr	r3, [pc, #28]	@ (8008c90 <pxCurrentTCBConst2>)
 8008c72:	6819      	ldr	r1, [r3, #0]
 8008c74:	6808      	ldr	r0, [r1, #0]
 8008c76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c7a:	f380 8809 	msr	PSP, r0
 8008c7e:	f3bf 8f6f 	isb	sy
 8008c82:	f04f 0000 	mov.w	r0, #0
 8008c86:	f380 8811 	msr	BASEPRI, r0
 8008c8a:	4770      	bx	lr
 8008c8c:	f3af 8000 	nop.w

08008c90 <pxCurrentTCBConst2>:
 8008c90:	20000478 	.word	0x20000478
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008c94:	bf00      	nop
 8008c96:	bf00      	nop

08008c98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008c98:	4808      	ldr	r0, [pc, #32]	@ (8008cbc <prvPortStartFirstTask+0x24>)
 8008c9a:	6800      	ldr	r0, [r0, #0]
 8008c9c:	6800      	ldr	r0, [r0, #0]
 8008c9e:	f380 8808 	msr	MSP, r0
 8008ca2:	f04f 0000 	mov.w	r0, #0
 8008ca6:	f380 8814 	msr	CONTROL, r0
 8008caa:	b662      	cpsie	i
 8008cac:	b661      	cpsie	f
 8008cae:	f3bf 8f4f 	dsb	sy
 8008cb2:	f3bf 8f6f 	isb	sy
 8008cb6:	df00      	svc	0
 8008cb8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008cba:	bf00      	nop
 8008cbc:	e000ed08 	.word	0xe000ed08

08008cc0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008cc0:	b580      	push	{r7, lr}
 8008cc2:	b086      	sub	sp, #24
 8008cc4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008cc6:	4b47      	ldr	r3, [pc, #284]	@ (8008de4 <xPortStartScheduler+0x124>)
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	4a47      	ldr	r2, [pc, #284]	@ (8008de8 <xPortStartScheduler+0x128>)
 8008ccc:	4293      	cmp	r3, r2
 8008cce:	d10b      	bne.n	8008ce8 <xPortStartScheduler+0x28>
	__asm volatile
 8008cd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cd4:	f383 8811 	msr	BASEPRI, r3
 8008cd8:	f3bf 8f6f 	isb	sy
 8008cdc:	f3bf 8f4f 	dsb	sy
 8008ce0:	613b      	str	r3, [r7, #16]
}
 8008ce2:	bf00      	nop
 8008ce4:	bf00      	nop
 8008ce6:	e7fd      	b.n	8008ce4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008ce8:	4b3e      	ldr	r3, [pc, #248]	@ (8008de4 <xPortStartScheduler+0x124>)
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	4a3f      	ldr	r2, [pc, #252]	@ (8008dec <xPortStartScheduler+0x12c>)
 8008cee:	4293      	cmp	r3, r2
 8008cf0:	d10b      	bne.n	8008d0a <xPortStartScheduler+0x4a>
	__asm volatile
 8008cf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cf6:	f383 8811 	msr	BASEPRI, r3
 8008cfa:	f3bf 8f6f 	isb	sy
 8008cfe:	f3bf 8f4f 	dsb	sy
 8008d02:	60fb      	str	r3, [r7, #12]
}
 8008d04:	bf00      	nop
 8008d06:	bf00      	nop
 8008d08:	e7fd      	b.n	8008d06 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008d0a:	4b39      	ldr	r3, [pc, #228]	@ (8008df0 <xPortStartScheduler+0x130>)
 8008d0c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008d0e:	697b      	ldr	r3, [r7, #20]
 8008d10:	781b      	ldrb	r3, [r3, #0]
 8008d12:	b2db      	uxtb	r3, r3
 8008d14:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008d16:	697b      	ldr	r3, [r7, #20]
 8008d18:	22ff      	movs	r2, #255	@ 0xff
 8008d1a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008d1c:	697b      	ldr	r3, [r7, #20]
 8008d1e:	781b      	ldrb	r3, [r3, #0]
 8008d20:	b2db      	uxtb	r3, r3
 8008d22:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008d24:	78fb      	ldrb	r3, [r7, #3]
 8008d26:	b2db      	uxtb	r3, r3
 8008d28:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8008d2c:	b2da      	uxtb	r2, r3
 8008d2e:	4b31      	ldr	r3, [pc, #196]	@ (8008df4 <xPortStartScheduler+0x134>)
 8008d30:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008d32:	4b31      	ldr	r3, [pc, #196]	@ (8008df8 <xPortStartScheduler+0x138>)
 8008d34:	2207      	movs	r2, #7
 8008d36:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008d38:	e009      	b.n	8008d4e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8008d3a:	4b2f      	ldr	r3, [pc, #188]	@ (8008df8 <xPortStartScheduler+0x138>)
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	3b01      	subs	r3, #1
 8008d40:	4a2d      	ldr	r2, [pc, #180]	@ (8008df8 <xPortStartScheduler+0x138>)
 8008d42:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008d44:	78fb      	ldrb	r3, [r7, #3]
 8008d46:	b2db      	uxtb	r3, r3
 8008d48:	005b      	lsls	r3, r3, #1
 8008d4a:	b2db      	uxtb	r3, r3
 8008d4c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008d4e:	78fb      	ldrb	r3, [r7, #3]
 8008d50:	b2db      	uxtb	r3, r3
 8008d52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008d56:	2b80      	cmp	r3, #128	@ 0x80
 8008d58:	d0ef      	beq.n	8008d3a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008d5a:	4b27      	ldr	r3, [pc, #156]	@ (8008df8 <xPortStartScheduler+0x138>)
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	f1c3 0307 	rsb	r3, r3, #7
 8008d62:	2b04      	cmp	r3, #4
 8008d64:	d00b      	beq.n	8008d7e <xPortStartScheduler+0xbe>
	__asm volatile
 8008d66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d6a:	f383 8811 	msr	BASEPRI, r3
 8008d6e:	f3bf 8f6f 	isb	sy
 8008d72:	f3bf 8f4f 	dsb	sy
 8008d76:	60bb      	str	r3, [r7, #8]
}
 8008d78:	bf00      	nop
 8008d7a:	bf00      	nop
 8008d7c:	e7fd      	b.n	8008d7a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008d7e:	4b1e      	ldr	r3, [pc, #120]	@ (8008df8 <xPortStartScheduler+0x138>)
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	021b      	lsls	r3, r3, #8
 8008d84:	4a1c      	ldr	r2, [pc, #112]	@ (8008df8 <xPortStartScheduler+0x138>)
 8008d86:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008d88:	4b1b      	ldr	r3, [pc, #108]	@ (8008df8 <xPortStartScheduler+0x138>)
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008d90:	4a19      	ldr	r2, [pc, #100]	@ (8008df8 <xPortStartScheduler+0x138>)
 8008d92:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	b2da      	uxtb	r2, r3
 8008d98:	697b      	ldr	r3, [r7, #20]
 8008d9a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008d9c:	4b17      	ldr	r3, [pc, #92]	@ (8008dfc <xPortStartScheduler+0x13c>)
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	4a16      	ldr	r2, [pc, #88]	@ (8008dfc <xPortStartScheduler+0x13c>)
 8008da2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008da6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008da8:	4b14      	ldr	r3, [pc, #80]	@ (8008dfc <xPortStartScheduler+0x13c>)
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	4a13      	ldr	r2, [pc, #76]	@ (8008dfc <xPortStartScheduler+0x13c>)
 8008dae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008db2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008db4:	f000 f8da 	bl	8008f6c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008db8:	4b11      	ldr	r3, [pc, #68]	@ (8008e00 <xPortStartScheduler+0x140>)
 8008dba:	2200      	movs	r2, #0
 8008dbc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008dbe:	f000 f8f9 	bl	8008fb4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008dc2:	4b10      	ldr	r3, [pc, #64]	@ (8008e04 <xPortStartScheduler+0x144>)
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	4a0f      	ldr	r2, [pc, #60]	@ (8008e04 <xPortStartScheduler+0x144>)
 8008dc8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8008dcc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008dce:	f7ff ff63 	bl	8008c98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008dd2:	f7ff fa73 	bl	80082bc <vTaskSwitchContext>
	prvTaskExitError();
 8008dd6:	f7ff ff1b 	bl	8008c10 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008dda:	2300      	movs	r3, #0
}
 8008ddc:	4618      	mov	r0, r3
 8008dde:	3718      	adds	r7, #24
 8008de0:	46bd      	mov	sp, r7
 8008de2:	bd80      	pop	{r7, pc}
 8008de4:	e000ed00 	.word	0xe000ed00
 8008de8:	410fc271 	.word	0x410fc271
 8008dec:	410fc270 	.word	0x410fc270
 8008df0:	e000e400 	.word	0xe000e400
 8008df4:	200005a4 	.word	0x200005a4
 8008df8:	200005a8 	.word	0x200005a8
 8008dfc:	e000ed20 	.word	0xe000ed20
 8008e00:	20000098 	.word	0x20000098
 8008e04:	e000ef34 	.word	0xe000ef34

08008e08 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008e08:	b480      	push	{r7}
 8008e0a:	b083      	sub	sp, #12
 8008e0c:	af00      	add	r7, sp, #0
	__asm volatile
 8008e0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e12:	f383 8811 	msr	BASEPRI, r3
 8008e16:	f3bf 8f6f 	isb	sy
 8008e1a:	f3bf 8f4f 	dsb	sy
 8008e1e:	607b      	str	r3, [r7, #4]
}
 8008e20:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008e22:	4b10      	ldr	r3, [pc, #64]	@ (8008e64 <vPortEnterCritical+0x5c>)
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	3301      	adds	r3, #1
 8008e28:	4a0e      	ldr	r2, [pc, #56]	@ (8008e64 <vPortEnterCritical+0x5c>)
 8008e2a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008e2c:	4b0d      	ldr	r3, [pc, #52]	@ (8008e64 <vPortEnterCritical+0x5c>)
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	2b01      	cmp	r3, #1
 8008e32:	d110      	bne.n	8008e56 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008e34:	4b0c      	ldr	r3, [pc, #48]	@ (8008e68 <vPortEnterCritical+0x60>)
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	b2db      	uxtb	r3, r3
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d00b      	beq.n	8008e56 <vPortEnterCritical+0x4e>
	__asm volatile
 8008e3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e42:	f383 8811 	msr	BASEPRI, r3
 8008e46:	f3bf 8f6f 	isb	sy
 8008e4a:	f3bf 8f4f 	dsb	sy
 8008e4e:	603b      	str	r3, [r7, #0]
}
 8008e50:	bf00      	nop
 8008e52:	bf00      	nop
 8008e54:	e7fd      	b.n	8008e52 <vPortEnterCritical+0x4a>
	}
}
 8008e56:	bf00      	nop
 8008e58:	370c      	adds	r7, #12
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e60:	4770      	bx	lr
 8008e62:	bf00      	nop
 8008e64:	20000098 	.word	0x20000098
 8008e68:	e000ed04 	.word	0xe000ed04

08008e6c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008e6c:	b480      	push	{r7}
 8008e6e:	b083      	sub	sp, #12
 8008e70:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008e72:	4b12      	ldr	r3, [pc, #72]	@ (8008ebc <vPortExitCritical+0x50>)
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d10b      	bne.n	8008e92 <vPortExitCritical+0x26>
	__asm volatile
 8008e7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e7e:	f383 8811 	msr	BASEPRI, r3
 8008e82:	f3bf 8f6f 	isb	sy
 8008e86:	f3bf 8f4f 	dsb	sy
 8008e8a:	607b      	str	r3, [r7, #4]
}
 8008e8c:	bf00      	nop
 8008e8e:	bf00      	nop
 8008e90:	e7fd      	b.n	8008e8e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008e92:	4b0a      	ldr	r3, [pc, #40]	@ (8008ebc <vPortExitCritical+0x50>)
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	3b01      	subs	r3, #1
 8008e98:	4a08      	ldr	r2, [pc, #32]	@ (8008ebc <vPortExitCritical+0x50>)
 8008e9a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008e9c:	4b07      	ldr	r3, [pc, #28]	@ (8008ebc <vPortExitCritical+0x50>)
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d105      	bne.n	8008eb0 <vPortExitCritical+0x44>
 8008ea4:	2300      	movs	r3, #0
 8008ea6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008ea8:	683b      	ldr	r3, [r7, #0]
 8008eaa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008eae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008eb0:	bf00      	nop
 8008eb2:	370c      	adds	r7, #12
 8008eb4:	46bd      	mov	sp, r7
 8008eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eba:	4770      	bx	lr
 8008ebc:	20000098 	.word	0x20000098

08008ec0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008ec0:	f3ef 8009 	mrs	r0, PSP
 8008ec4:	f3bf 8f6f 	isb	sy
 8008ec8:	4b15      	ldr	r3, [pc, #84]	@ (8008f20 <pxCurrentTCBConst>)
 8008eca:	681a      	ldr	r2, [r3, #0]
 8008ecc:	f01e 0f10 	tst.w	lr, #16
 8008ed0:	bf08      	it	eq
 8008ed2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008ed6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008eda:	6010      	str	r0, [r2, #0]
 8008edc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008ee0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008ee4:	f380 8811 	msr	BASEPRI, r0
 8008ee8:	f3bf 8f4f 	dsb	sy
 8008eec:	f3bf 8f6f 	isb	sy
 8008ef0:	f7ff f9e4 	bl	80082bc <vTaskSwitchContext>
 8008ef4:	f04f 0000 	mov.w	r0, #0
 8008ef8:	f380 8811 	msr	BASEPRI, r0
 8008efc:	bc09      	pop	{r0, r3}
 8008efe:	6819      	ldr	r1, [r3, #0]
 8008f00:	6808      	ldr	r0, [r1, #0]
 8008f02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f06:	f01e 0f10 	tst.w	lr, #16
 8008f0a:	bf08      	it	eq
 8008f0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008f10:	f380 8809 	msr	PSP, r0
 8008f14:	f3bf 8f6f 	isb	sy
 8008f18:	4770      	bx	lr
 8008f1a:	bf00      	nop
 8008f1c:	f3af 8000 	nop.w

08008f20 <pxCurrentTCBConst>:
 8008f20:	20000478 	.word	0x20000478
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008f24:	bf00      	nop
 8008f26:	bf00      	nop

08008f28 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008f28:	b580      	push	{r7, lr}
 8008f2a:	b082      	sub	sp, #8
 8008f2c:	af00      	add	r7, sp, #0
	__asm volatile
 8008f2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f32:	f383 8811 	msr	BASEPRI, r3
 8008f36:	f3bf 8f6f 	isb	sy
 8008f3a:	f3bf 8f4f 	dsb	sy
 8008f3e:	607b      	str	r3, [r7, #4]
}
 8008f40:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008f42:	f7ff f901 	bl	8008148 <xTaskIncrementTick>
 8008f46:	4603      	mov	r3, r0
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d003      	beq.n	8008f54 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008f4c:	4b06      	ldr	r3, [pc, #24]	@ (8008f68 <SysTick_Handler+0x40>)
 8008f4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008f52:	601a      	str	r2, [r3, #0]
 8008f54:	2300      	movs	r3, #0
 8008f56:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008f58:	683b      	ldr	r3, [r7, #0]
 8008f5a:	f383 8811 	msr	BASEPRI, r3
}
 8008f5e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008f60:	bf00      	nop
 8008f62:	3708      	adds	r7, #8
 8008f64:	46bd      	mov	sp, r7
 8008f66:	bd80      	pop	{r7, pc}
 8008f68:	e000ed04 	.word	0xe000ed04

08008f6c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008f6c:	b480      	push	{r7}
 8008f6e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008f70:	4b0b      	ldr	r3, [pc, #44]	@ (8008fa0 <vPortSetupTimerInterrupt+0x34>)
 8008f72:	2200      	movs	r2, #0
 8008f74:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008f76:	4b0b      	ldr	r3, [pc, #44]	@ (8008fa4 <vPortSetupTimerInterrupt+0x38>)
 8008f78:	2200      	movs	r2, #0
 8008f7a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008f7c:	4b0a      	ldr	r3, [pc, #40]	@ (8008fa8 <vPortSetupTimerInterrupt+0x3c>)
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	4a0a      	ldr	r2, [pc, #40]	@ (8008fac <vPortSetupTimerInterrupt+0x40>)
 8008f82:	fba2 2303 	umull	r2, r3, r2, r3
 8008f86:	099b      	lsrs	r3, r3, #6
 8008f88:	4a09      	ldr	r2, [pc, #36]	@ (8008fb0 <vPortSetupTimerInterrupt+0x44>)
 8008f8a:	3b01      	subs	r3, #1
 8008f8c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008f8e:	4b04      	ldr	r3, [pc, #16]	@ (8008fa0 <vPortSetupTimerInterrupt+0x34>)
 8008f90:	2207      	movs	r2, #7
 8008f92:	601a      	str	r2, [r3, #0]
}
 8008f94:	bf00      	nop
 8008f96:	46bd      	mov	sp, r7
 8008f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9c:	4770      	bx	lr
 8008f9e:	bf00      	nop
 8008fa0:	e000e010 	.word	0xe000e010
 8008fa4:	e000e018 	.word	0xe000e018
 8008fa8:	20000000 	.word	0x20000000
 8008fac:	10624dd3 	.word	0x10624dd3
 8008fb0:	e000e014 	.word	0xe000e014

08008fb4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008fb4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008fc4 <vPortEnableVFP+0x10>
 8008fb8:	6801      	ldr	r1, [r0, #0]
 8008fba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8008fbe:	6001      	str	r1, [r0, #0]
 8008fc0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008fc2:	bf00      	nop
 8008fc4:	e000ed88 	.word	0xe000ed88

08008fc8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b08a      	sub	sp, #40	@ 0x28
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008fd4:	f7ff f80c 	bl	8007ff0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008fd8:	4b5c      	ldr	r3, [pc, #368]	@ (800914c <pvPortMalloc+0x184>)
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d101      	bne.n	8008fe4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008fe0:	f000 f924 	bl	800922c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008fe4:	4b5a      	ldr	r3, [pc, #360]	@ (8009150 <pvPortMalloc+0x188>)
 8008fe6:	681a      	ldr	r2, [r3, #0]
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	4013      	ands	r3, r2
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	f040 8095 	bne.w	800911c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d01e      	beq.n	8009036 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8008ff8:	2208      	movs	r2, #8
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	4413      	add	r3, r2
 8008ffe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	f003 0307 	and.w	r3, r3, #7
 8009006:	2b00      	cmp	r3, #0
 8009008:	d015      	beq.n	8009036 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	f023 0307 	bic.w	r3, r3, #7
 8009010:	3308      	adds	r3, #8
 8009012:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	f003 0307 	and.w	r3, r3, #7
 800901a:	2b00      	cmp	r3, #0
 800901c:	d00b      	beq.n	8009036 <pvPortMalloc+0x6e>
	__asm volatile
 800901e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009022:	f383 8811 	msr	BASEPRI, r3
 8009026:	f3bf 8f6f 	isb	sy
 800902a:	f3bf 8f4f 	dsb	sy
 800902e:	617b      	str	r3, [r7, #20]
}
 8009030:	bf00      	nop
 8009032:	bf00      	nop
 8009034:	e7fd      	b.n	8009032 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	2b00      	cmp	r3, #0
 800903a:	d06f      	beq.n	800911c <pvPortMalloc+0x154>
 800903c:	4b45      	ldr	r3, [pc, #276]	@ (8009154 <pvPortMalloc+0x18c>)
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	687a      	ldr	r2, [r7, #4]
 8009042:	429a      	cmp	r2, r3
 8009044:	d86a      	bhi.n	800911c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009046:	4b44      	ldr	r3, [pc, #272]	@ (8009158 <pvPortMalloc+0x190>)
 8009048:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800904a:	4b43      	ldr	r3, [pc, #268]	@ (8009158 <pvPortMalloc+0x190>)
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009050:	e004      	b.n	800905c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8009052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009054:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800905c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800905e:	685b      	ldr	r3, [r3, #4]
 8009060:	687a      	ldr	r2, [r7, #4]
 8009062:	429a      	cmp	r2, r3
 8009064:	d903      	bls.n	800906e <pvPortMalloc+0xa6>
 8009066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	2b00      	cmp	r3, #0
 800906c:	d1f1      	bne.n	8009052 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800906e:	4b37      	ldr	r3, [pc, #220]	@ (800914c <pvPortMalloc+0x184>)
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009074:	429a      	cmp	r2, r3
 8009076:	d051      	beq.n	800911c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009078:	6a3b      	ldr	r3, [r7, #32]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	2208      	movs	r2, #8
 800907e:	4413      	add	r3, r2
 8009080:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009084:	681a      	ldr	r2, [r3, #0]
 8009086:	6a3b      	ldr	r3, [r7, #32]
 8009088:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800908a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800908c:	685a      	ldr	r2, [r3, #4]
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	1ad2      	subs	r2, r2, r3
 8009092:	2308      	movs	r3, #8
 8009094:	005b      	lsls	r3, r3, #1
 8009096:	429a      	cmp	r2, r3
 8009098:	d920      	bls.n	80090dc <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800909a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	4413      	add	r3, r2
 80090a0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80090a2:	69bb      	ldr	r3, [r7, #24]
 80090a4:	f003 0307 	and.w	r3, r3, #7
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d00b      	beq.n	80090c4 <pvPortMalloc+0xfc>
	__asm volatile
 80090ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090b0:	f383 8811 	msr	BASEPRI, r3
 80090b4:	f3bf 8f6f 	isb	sy
 80090b8:	f3bf 8f4f 	dsb	sy
 80090bc:	613b      	str	r3, [r7, #16]
}
 80090be:	bf00      	nop
 80090c0:	bf00      	nop
 80090c2:	e7fd      	b.n	80090c0 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80090c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090c6:	685a      	ldr	r2, [r3, #4]
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	1ad2      	subs	r2, r2, r3
 80090cc:	69bb      	ldr	r3, [r7, #24]
 80090ce:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80090d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090d2:	687a      	ldr	r2, [r7, #4]
 80090d4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80090d6:	69b8      	ldr	r0, [r7, #24]
 80090d8:	f000 f90a 	bl	80092f0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80090dc:	4b1d      	ldr	r3, [pc, #116]	@ (8009154 <pvPortMalloc+0x18c>)
 80090de:	681a      	ldr	r2, [r3, #0]
 80090e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090e2:	685b      	ldr	r3, [r3, #4]
 80090e4:	1ad3      	subs	r3, r2, r3
 80090e6:	4a1b      	ldr	r2, [pc, #108]	@ (8009154 <pvPortMalloc+0x18c>)
 80090e8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80090ea:	4b1a      	ldr	r3, [pc, #104]	@ (8009154 <pvPortMalloc+0x18c>)
 80090ec:	681a      	ldr	r2, [r3, #0]
 80090ee:	4b1b      	ldr	r3, [pc, #108]	@ (800915c <pvPortMalloc+0x194>)
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	429a      	cmp	r2, r3
 80090f4:	d203      	bcs.n	80090fe <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80090f6:	4b17      	ldr	r3, [pc, #92]	@ (8009154 <pvPortMalloc+0x18c>)
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	4a18      	ldr	r2, [pc, #96]	@ (800915c <pvPortMalloc+0x194>)
 80090fc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80090fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009100:	685a      	ldr	r2, [r3, #4]
 8009102:	4b13      	ldr	r3, [pc, #76]	@ (8009150 <pvPortMalloc+0x188>)
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	431a      	orrs	r2, r3
 8009108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800910a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800910c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800910e:	2200      	movs	r2, #0
 8009110:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009112:	4b13      	ldr	r3, [pc, #76]	@ (8009160 <pvPortMalloc+0x198>)
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	3301      	adds	r3, #1
 8009118:	4a11      	ldr	r2, [pc, #68]	@ (8009160 <pvPortMalloc+0x198>)
 800911a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800911c:	f7fe ff76 	bl	800800c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009120:	69fb      	ldr	r3, [r7, #28]
 8009122:	f003 0307 	and.w	r3, r3, #7
 8009126:	2b00      	cmp	r3, #0
 8009128:	d00b      	beq.n	8009142 <pvPortMalloc+0x17a>
	__asm volatile
 800912a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800912e:	f383 8811 	msr	BASEPRI, r3
 8009132:	f3bf 8f6f 	isb	sy
 8009136:	f3bf 8f4f 	dsb	sy
 800913a:	60fb      	str	r3, [r7, #12]
}
 800913c:	bf00      	nop
 800913e:	bf00      	nop
 8009140:	e7fd      	b.n	800913e <pvPortMalloc+0x176>
	return pvReturn;
 8009142:	69fb      	ldr	r3, [r7, #28]
}
 8009144:	4618      	mov	r0, r3
 8009146:	3728      	adds	r7, #40	@ 0x28
 8009148:	46bd      	mov	sp, r7
 800914a:	bd80      	pop	{r7, pc}
 800914c:	200041b4 	.word	0x200041b4
 8009150:	200041c8 	.word	0x200041c8
 8009154:	200041b8 	.word	0x200041b8
 8009158:	200041ac 	.word	0x200041ac
 800915c:	200041bc 	.word	0x200041bc
 8009160:	200041c0 	.word	0x200041c0

08009164 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009164:	b580      	push	{r7, lr}
 8009166:	b086      	sub	sp, #24
 8009168:	af00      	add	r7, sp, #0
 800916a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	2b00      	cmp	r3, #0
 8009174:	d04f      	beq.n	8009216 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009176:	2308      	movs	r3, #8
 8009178:	425b      	negs	r3, r3
 800917a:	697a      	ldr	r2, [r7, #20]
 800917c:	4413      	add	r3, r2
 800917e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009180:	697b      	ldr	r3, [r7, #20]
 8009182:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009184:	693b      	ldr	r3, [r7, #16]
 8009186:	685a      	ldr	r2, [r3, #4]
 8009188:	4b25      	ldr	r3, [pc, #148]	@ (8009220 <vPortFree+0xbc>)
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	4013      	ands	r3, r2
 800918e:	2b00      	cmp	r3, #0
 8009190:	d10b      	bne.n	80091aa <vPortFree+0x46>
	__asm volatile
 8009192:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009196:	f383 8811 	msr	BASEPRI, r3
 800919a:	f3bf 8f6f 	isb	sy
 800919e:	f3bf 8f4f 	dsb	sy
 80091a2:	60fb      	str	r3, [r7, #12]
}
 80091a4:	bf00      	nop
 80091a6:	bf00      	nop
 80091a8:	e7fd      	b.n	80091a6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80091aa:	693b      	ldr	r3, [r7, #16]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d00b      	beq.n	80091ca <vPortFree+0x66>
	__asm volatile
 80091b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091b6:	f383 8811 	msr	BASEPRI, r3
 80091ba:	f3bf 8f6f 	isb	sy
 80091be:	f3bf 8f4f 	dsb	sy
 80091c2:	60bb      	str	r3, [r7, #8]
}
 80091c4:	bf00      	nop
 80091c6:	bf00      	nop
 80091c8:	e7fd      	b.n	80091c6 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80091ca:	693b      	ldr	r3, [r7, #16]
 80091cc:	685a      	ldr	r2, [r3, #4]
 80091ce:	4b14      	ldr	r3, [pc, #80]	@ (8009220 <vPortFree+0xbc>)
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	4013      	ands	r3, r2
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d01e      	beq.n	8009216 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80091d8:	693b      	ldr	r3, [r7, #16]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d11a      	bne.n	8009216 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80091e0:	693b      	ldr	r3, [r7, #16]
 80091e2:	685a      	ldr	r2, [r3, #4]
 80091e4:	4b0e      	ldr	r3, [pc, #56]	@ (8009220 <vPortFree+0xbc>)
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	43db      	mvns	r3, r3
 80091ea:	401a      	ands	r2, r3
 80091ec:	693b      	ldr	r3, [r7, #16]
 80091ee:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80091f0:	f7fe fefe 	bl	8007ff0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80091f4:	693b      	ldr	r3, [r7, #16]
 80091f6:	685a      	ldr	r2, [r3, #4]
 80091f8:	4b0a      	ldr	r3, [pc, #40]	@ (8009224 <vPortFree+0xc0>)
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	4413      	add	r3, r2
 80091fe:	4a09      	ldr	r2, [pc, #36]	@ (8009224 <vPortFree+0xc0>)
 8009200:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009202:	6938      	ldr	r0, [r7, #16]
 8009204:	f000 f874 	bl	80092f0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009208:	4b07      	ldr	r3, [pc, #28]	@ (8009228 <vPortFree+0xc4>)
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	3301      	adds	r3, #1
 800920e:	4a06      	ldr	r2, [pc, #24]	@ (8009228 <vPortFree+0xc4>)
 8009210:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009212:	f7fe fefb 	bl	800800c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009216:	bf00      	nop
 8009218:	3718      	adds	r7, #24
 800921a:	46bd      	mov	sp, r7
 800921c:	bd80      	pop	{r7, pc}
 800921e:	bf00      	nop
 8009220:	200041c8 	.word	0x200041c8
 8009224:	200041b8 	.word	0x200041b8
 8009228:	200041c4 	.word	0x200041c4

0800922c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800922c:	b480      	push	{r7}
 800922e:	b085      	sub	sp, #20
 8009230:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009232:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8009236:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009238:	4b27      	ldr	r3, [pc, #156]	@ (80092d8 <prvHeapInit+0xac>)
 800923a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	f003 0307 	and.w	r3, r3, #7
 8009242:	2b00      	cmp	r3, #0
 8009244:	d00c      	beq.n	8009260 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	3307      	adds	r3, #7
 800924a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	f023 0307 	bic.w	r3, r3, #7
 8009252:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009254:	68ba      	ldr	r2, [r7, #8]
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	1ad3      	subs	r3, r2, r3
 800925a:	4a1f      	ldr	r2, [pc, #124]	@ (80092d8 <prvHeapInit+0xac>)
 800925c:	4413      	add	r3, r2
 800925e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009264:	4a1d      	ldr	r2, [pc, #116]	@ (80092dc <prvHeapInit+0xb0>)
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800926a:	4b1c      	ldr	r3, [pc, #112]	@ (80092dc <prvHeapInit+0xb0>)
 800926c:	2200      	movs	r2, #0
 800926e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	68ba      	ldr	r2, [r7, #8]
 8009274:	4413      	add	r3, r2
 8009276:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009278:	2208      	movs	r2, #8
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	1a9b      	subs	r3, r3, r2
 800927e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	f023 0307 	bic.w	r3, r3, #7
 8009286:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	4a15      	ldr	r2, [pc, #84]	@ (80092e0 <prvHeapInit+0xb4>)
 800928c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800928e:	4b14      	ldr	r3, [pc, #80]	@ (80092e0 <prvHeapInit+0xb4>)
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	2200      	movs	r2, #0
 8009294:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009296:	4b12      	ldr	r3, [pc, #72]	@ (80092e0 <prvHeapInit+0xb4>)
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	2200      	movs	r2, #0
 800929c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80092a2:	683b      	ldr	r3, [r7, #0]
 80092a4:	68fa      	ldr	r2, [r7, #12]
 80092a6:	1ad2      	subs	r2, r2, r3
 80092a8:	683b      	ldr	r3, [r7, #0]
 80092aa:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80092ac:	4b0c      	ldr	r3, [pc, #48]	@ (80092e0 <prvHeapInit+0xb4>)
 80092ae:	681a      	ldr	r2, [r3, #0]
 80092b0:	683b      	ldr	r3, [r7, #0]
 80092b2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80092b4:	683b      	ldr	r3, [r7, #0]
 80092b6:	685b      	ldr	r3, [r3, #4]
 80092b8:	4a0a      	ldr	r2, [pc, #40]	@ (80092e4 <prvHeapInit+0xb8>)
 80092ba:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80092bc:	683b      	ldr	r3, [r7, #0]
 80092be:	685b      	ldr	r3, [r3, #4]
 80092c0:	4a09      	ldr	r2, [pc, #36]	@ (80092e8 <prvHeapInit+0xbc>)
 80092c2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80092c4:	4b09      	ldr	r3, [pc, #36]	@ (80092ec <prvHeapInit+0xc0>)
 80092c6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80092ca:	601a      	str	r2, [r3, #0]
}
 80092cc:	bf00      	nop
 80092ce:	3714      	adds	r7, #20
 80092d0:	46bd      	mov	sp, r7
 80092d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d6:	4770      	bx	lr
 80092d8:	200005ac 	.word	0x200005ac
 80092dc:	200041ac 	.word	0x200041ac
 80092e0:	200041b4 	.word	0x200041b4
 80092e4:	200041bc 	.word	0x200041bc
 80092e8:	200041b8 	.word	0x200041b8
 80092ec:	200041c8 	.word	0x200041c8

080092f0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80092f0:	b480      	push	{r7}
 80092f2:	b085      	sub	sp, #20
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80092f8:	4b28      	ldr	r3, [pc, #160]	@ (800939c <prvInsertBlockIntoFreeList+0xac>)
 80092fa:	60fb      	str	r3, [r7, #12]
 80092fc:	e002      	b.n	8009304 <prvInsertBlockIntoFreeList+0x14>
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	60fb      	str	r3, [r7, #12]
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	687a      	ldr	r2, [r7, #4]
 800930a:	429a      	cmp	r2, r3
 800930c:	d8f7      	bhi.n	80092fe <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	685b      	ldr	r3, [r3, #4]
 8009316:	68ba      	ldr	r2, [r7, #8]
 8009318:	4413      	add	r3, r2
 800931a:	687a      	ldr	r2, [r7, #4]
 800931c:	429a      	cmp	r2, r3
 800931e:	d108      	bne.n	8009332 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	685a      	ldr	r2, [r3, #4]
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	685b      	ldr	r3, [r3, #4]
 8009328:	441a      	add	r2, r3
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	685b      	ldr	r3, [r3, #4]
 800933a:	68ba      	ldr	r2, [r7, #8]
 800933c:	441a      	add	r2, r3
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	429a      	cmp	r2, r3
 8009344:	d118      	bne.n	8009378 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	681a      	ldr	r2, [r3, #0]
 800934a:	4b15      	ldr	r3, [pc, #84]	@ (80093a0 <prvInsertBlockIntoFreeList+0xb0>)
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	429a      	cmp	r2, r3
 8009350:	d00d      	beq.n	800936e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	685a      	ldr	r2, [r3, #4]
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	685b      	ldr	r3, [r3, #4]
 800935c:	441a      	add	r2, r3
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	681a      	ldr	r2, [r3, #0]
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	601a      	str	r2, [r3, #0]
 800936c:	e008      	b.n	8009380 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800936e:	4b0c      	ldr	r3, [pc, #48]	@ (80093a0 <prvInsertBlockIntoFreeList+0xb0>)
 8009370:	681a      	ldr	r2, [r3, #0]
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	601a      	str	r2, [r3, #0]
 8009376:	e003      	b.n	8009380 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	681a      	ldr	r2, [r3, #0]
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009380:	68fa      	ldr	r2, [r7, #12]
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	429a      	cmp	r2, r3
 8009386:	d002      	beq.n	800938e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	687a      	ldr	r2, [r7, #4]
 800938c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800938e:	bf00      	nop
 8009390:	3714      	adds	r7, #20
 8009392:	46bd      	mov	sp, r7
 8009394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009398:	4770      	bx	lr
 800939a:	bf00      	nop
 800939c:	200041ac 	.word	0x200041ac
 80093a0:	200041b4 	.word	0x200041b4

080093a4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80093a4:	b580      	push	{r7, lr}
 80093a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80093a8:	2200      	movs	r2, #0
 80093aa:	4912      	ldr	r1, [pc, #72]	@ (80093f4 <MX_USB_DEVICE_Init+0x50>)
 80093ac:	4812      	ldr	r0, [pc, #72]	@ (80093f8 <MX_USB_DEVICE_Init+0x54>)
 80093ae:	f7fc fa01 	bl	80057b4 <USBD_Init>
 80093b2:	4603      	mov	r3, r0
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d001      	beq.n	80093bc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80093b8:	f7f7 fbf4 	bl	8000ba4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80093bc:	490f      	ldr	r1, [pc, #60]	@ (80093fc <MX_USB_DEVICE_Init+0x58>)
 80093be:	480e      	ldr	r0, [pc, #56]	@ (80093f8 <MX_USB_DEVICE_Init+0x54>)
 80093c0:	f7fc fa28 	bl	8005814 <USBD_RegisterClass>
 80093c4:	4603      	mov	r3, r0
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d001      	beq.n	80093ce <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80093ca:	f7f7 fbeb 	bl	8000ba4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80093ce:	490c      	ldr	r1, [pc, #48]	@ (8009400 <MX_USB_DEVICE_Init+0x5c>)
 80093d0:	4809      	ldr	r0, [pc, #36]	@ (80093f8 <MX_USB_DEVICE_Init+0x54>)
 80093d2:	f7fc f91f 	bl	8005614 <USBD_CDC_RegisterInterface>
 80093d6:	4603      	mov	r3, r0
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d001      	beq.n	80093e0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80093dc:	f7f7 fbe2 	bl	8000ba4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80093e0:	4805      	ldr	r0, [pc, #20]	@ (80093f8 <MX_USB_DEVICE_Init+0x54>)
 80093e2:	f7fc fa4d 	bl	8005880 <USBD_Start>
 80093e6:	4603      	mov	r3, r0
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d001      	beq.n	80093f0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80093ec:	f7f7 fbda 	bl	8000ba4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80093f0:	bf00      	nop
 80093f2:	bd80      	pop	{r7, pc}
 80093f4:	200000b0 	.word	0x200000b0
 80093f8:	200041cc 	.word	0x200041cc
 80093fc:	20000018 	.word	0x20000018
 8009400:	2000009c 	.word	0x2000009c

08009404 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009404:	b580      	push	{r7, lr}
 8009406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009408:	2200      	movs	r2, #0
 800940a:	4905      	ldr	r1, [pc, #20]	@ (8009420 <CDC_Init_FS+0x1c>)
 800940c:	4805      	ldr	r0, [pc, #20]	@ (8009424 <CDC_Init_FS+0x20>)
 800940e:	f7fc f91b 	bl	8005648 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009412:	4905      	ldr	r1, [pc, #20]	@ (8009428 <CDC_Init_FS+0x24>)
 8009414:	4803      	ldr	r0, [pc, #12]	@ (8009424 <CDC_Init_FS+0x20>)
 8009416:	f7fc f939 	bl	800568c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800941a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800941c:	4618      	mov	r0, r3
 800941e:	bd80      	pop	{r7, pc}
 8009420:	20004ca8 	.word	0x20004ca8
 8009424:	200041cc 	.word	0x200041cc
 8009428:	200044a8 	.word	0x200044a8

0800942c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800942c:	b480      	push	{r7}
 800942e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009430:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009432:	4618      	mov	r0, r3
 8009434:	46bd      	mov	sp, r7
 8009436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943a:	4770      	bx	lr

0800943c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800943c:	b480      	push	{r7}
 800943e:	b083      	sub	sp, #12
 8009440:	af00      	add	r7, sp, #0
 8009442:	4603      	mov	r3, r0
 8009444:	6039      	str	r1, [r7, #0]
 8009446:	71fb      	strb	r3, [r7, #7]
 8009448:	4613      	mov	r3, r2
 800944a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800944c:	79fb      	ldrb	r3, [r7, #7]
 800944e:	2b23      	cmp	r3, #35	@ 0x23
 8009450:	d84a      	bhi.n	80094e8 <CDC_Control_FS+0xac>
 8009452:	a201      	add	r2, pc, #4	@ (adr r2, 8009458 <CDC_Control_FS+0x1c>)
 8009454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009458:	080094e9 	.word	0x080094e9
 800945c:	080094e9 	.word	0x080094e9
 8009460:	080094e9 	.word	0x080094e9
 8009464:	080094e9 	.word	0x080094e9
 8009468:	080094e9 	.word	0x080094e9
 800946c:	080094e9 	.word	0x080094e9
 8009470:	080094e9 	.word	0x080094e9
 8009474:	080094e9 	.word	0x080094e9
 8009478:	080094e9 	.word	0x080094e9
 800947c:	080094e9 	.word	0x080094e9
 8009480:	080094e9 	.word	0x080094e9
 8009484:	080094e9 	.word	0x080094e9
 8009488:	080094e9 	.word	0x080094e9
 800948c:	080094e9 	.word	0x080094e9
 8009490:	080094e9 	.word	0x080094e9
 8009494:	080094e9 	.word	0x080094e9
 8009498:	080094e9 	.word	0x080094e9
 800949c:	080094e9 	.word	0x080094e9
 80094a0:	080094e9 	.word	0x080094e9
 80094a4:	080094e9 	.word	0x080094e9
 80094a8:	080094e9 	.word	0x080094e9
 80094ac:	080094e9 	.word	0x080094e9
 80094b0:	080094e9 	.word	0x080094e9
 80094b4:	080094e9 	.word	0x080094e9
 80094b8:	080094e9 	.word	0x080094e9
 80094bc:	080094e9 	.word	0x080094e9
 80094c0:	080094e9 	.word	0x080094e9
 80094c4:	080094e9 	.word	0x080094e9
 80094c8:	080094e9 	.word	0x080094e9
 80094cc:	080094e9 	.word	0x080094e9
 80094d0:	080094e9 	.word	0x080094e9
 80094d4:	080094e9 	.word	0x080094e9
 80094d8:	080094e9 	.word	0x080094e9
 80094dc:	080094e9 	.word	0x080094e9
 80094e0:	080094e9 	.word	0x080094e9
 80094e4:	080094e9 	.word	0x080094e9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80094e8:	bf00      	nop
  }

  return (USBD_OK);
 80094ea:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80094ec:	4618      	mov	r0, r3
 80094ee:	370c      	adds	r7, #12
 80094f0:	46bd      	mov	sp, r7
 80094f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f6:	4770      	bx	lr

080094f8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b082      	sub	sp, #8
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
 8009500:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009502:	6879      	ldr	r1, [r7, #4]
 8009504:	4805      	ldr	r0, [pc, #20]	@ (800951c <CDC_Receive_FS+0x24>)
 8009506:	f7fc f8c1 	bl	800568c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800950a:	4804      	ldr	r0, [pc, #16]	@ (800951c <CDC_Receive_FS+0x24>)
 800950c:	f7fc f91c 	bl	8005748 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009510:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009512:	4618      	mov	r0, r3
 8009514:	3708      	adds	r7, #8
 8009516:	46bd      	mov	sp, r7
 8009518:	bd80      	pop	{r7, pc}
 800951a:	bf00      	nop
 800951c:	200041cc 	.word	0x200041cc

08009520 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009520:	b580      	push	{r7, lr}
 8009522:	b084      	sub	sp, #16
 8009524:	af00      	add	r7, sp, #0
 8009526:	6078      	str	r0, [r7, #4]
 8009528:	460b      	mov	r3, r1
 800952a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800952c:	2300      	movs	r3, #0
 800952e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009530:	4b0d      	ldr	r3, [pc, #52]	@ (8009568 <CDC_Transmit_FS+0x48>)
 8009532:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009536:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009538:	68bb      	ldr	r3, [r7, #8]
 800953a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800953e:	2b00      	cmp	r3, #0
 8009540:	d001      	beq.n	8009546 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8009542:	2301      	movs	r3, #1
 8009544:	e00b      	b.n	800955e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009546:	887b      	ldrh	r3, [r7, #2]
 8009548:	461a      	mov	r2, r3
 800954a:	6879      	ldr	r1, [r7, #4]
 800954c:	4806      	ldr	r0, [pc, #24]	@ (8009568 <CDC_Transmit_FS+0x48>)
 800954e:	f7fc f87b 	bl	8005648 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009552:	4805      	ldr	r0, [pc, #20]	@ (8009568 <CDC_Transmit_FS+0x48>)
 8009554:	f7fc f8b8 	bl	80056c8 <USBD_CDC_TransmitPacket>
 8009558:	4603      	mov	r3, r0
 800955a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800955c:	7bfb      	ldrb	r3, [r7, #15]
}
 800955e:	4618      	mov	r0, r3
 8009560:	3710      	adds	r7, #16
 8009562:	46bd      	mov	sp, r7
 8009564:	bd80      	pop	{r7, pc}
 8009566:	bf00      	nop
 8009568:	200041cc 	.word	0x200041cc

0800956c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800956c:	b480      	push	{r7}
 800956e:	b087      	sub	sp, #28
 8009570:	af00      	add	r7, sp, #0
 8009572:	60f8      	str	r0, [r7, #12]
 8009574:	60b9      	str	r1, [r7, #8]
 8009576:	4613      	mov	r3, r2
 8009578:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800957a:	2300      	movs	r3, #0
 800957c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800957e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009582:	4618      	mov	r0, r3
 8009584:	371c      	adds	r7, #28
 8009586:	46bd      	mov	sp, r7
 8009588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958c:	4770      	bx	lr
	...

08009590 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009590:	b480      	push	{r7}
 8009592:	b083      	sub	sp, #12
 8009594:	af00      	add	r7, sp, #0
 8009596:	4603      	mov	r3, r0
 8009598:	6039      	str	r1, [r7, #0]
 800959a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800959c:	683b      	ldr	r3, [r7, #0]
 800959e:	2212      	movs	r2, #18
 80095a0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80095a2:	4b03      	ldr	r3, [pc, #12]	@ (80095b0 <USBD_FS_DeviceDescriptor+0x20>)
}
 80095a4:	4618      	mov	r0, r3
 80095a6:	370c      	adds	r7, #12
 80095a8:	46bd      	mov	sp, r7
 80095aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ae:	4770      	bx	lr
 80095b0:	200000cc 	.word	0x200000cc

080095b4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80095b4:	b480      	push	{r7}
 80095b6:	b083      	sub	sp, #12
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	4603      	mov	r3, r0
 80095bc:	6039      	str	r1, [r7, #0]
 80095be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80095c0:	683b      	ldr	r3, [r7, #0]
 80095c2:	2204      	movs	r2, #4
 80095c4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80095c6:	4b03      	ldr	r3, [pc, #12]	@ (80095d4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80095c8:	4618      	mov	r0, r3
 80095ca:	370c      	adds	r7, #12
 80095cc:	46bd      	mov	sp, r7
 80095ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d2:	4770      	bx	lr
 80095d4:	200000e0 	.word	0x200000e0

080095d8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80095d8:	b580      	push	{r7, lr}
 80095da:	b082      	sub	sp, #8
 80095dc:	af00      	add	r7, sp, #0
 80095de:	4603      	mov	r3, r0
 80095e0:	6039      	str	r1, [r7, #0]
 80095e2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80095e4:	79fb      	ldrb	r3, [r7, #7]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d105      	bne.n	80095f6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80095ea:	683a      	ldr	r2, [r7, #0]
 80095ec:	4907      	ldr	r1, [pc, #28]	@ (800960c <USBD_FS_ProductStrDescriptor+0x34>)
 80095ee:	4808      	ldr	r0, [pc, #32]	@ (8009610 <USBD_FS_ProductStrDescriptor+0x38>)
 80095f0:	f7fd faf6 	bl	8006be0 <USBD_GetString>
 80095f4:	e004      	b.n	8009600 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80095f6:	683a      	ldr	r2, [r7, #0]
 80095f8:	4904      	ldr	r1, [pc, #16]	@ (800960c <USBD_FS_ProductStrDescriptor+0x34>)
 80095fa:	4805      	ldr	r0, [pc, #20]	@ (8009610 <USBD_FS_ProductStrDescriptor+0x38>)
 80095fc:	f7fd faf0 	bl	8006be0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009600:	4b02      	ldr	r3, [pc, #8]	@ (800960c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009602:	4618      	mov	r0, r3
 8009604:	3708      	adds	r7, #8
 8009606:	46bd      	mov	sp, r7
 8009608:	bd80      	pop	{r7, pc}
 800960a:	bf00      	nop
 800960c:	200054a8 	.word	0x200054a8
 8009610:	0800a0e8 	.word	0x0800a0e8

08009614 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009614:	b580      	push	{r7, lr}
 8009616:	b082      	sub	sp, #8
 8009618:	af00      	add	r7, sp, #0
 800961a:	4603      	mov	r3, r0
 800961c:	6039      	str	r1, [r7, #0]
 800961e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009620:	683a      	ldr	r2, [r7, #0]
 8009622:	4904      	ldr	r1, [pc, #16]	@ (8009634 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009624:	4804      	ldr	r0, [pc, #16]	@ (8009638 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009626:	f7fd fadb 	bl	8006be0 <USBD_GetString>
  return USBD_StrDesc;
 800962a:	4b02      	ldr	r3, [pc, #8]	@ (8009634 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800962c:	4618      	mov	r0, r3
 800962e:	3708      	adds	r7, #8
 8009630:	46bd      	mov	sp, r7
 8009632:	bd80      	pop	{r7, pc}
 8009634:	200054a8 	.word	0x200054a8
 8009638:	0800a100 	.word	0x0800a100

0800963c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800963c:	b580      	push	{r7, lr}
 800963e:	b082      	sub	sp, #8
 8009640:	af00      	add	r7, sp, #0
 8009642:	4603      	mov	r3, r0
 8009644:	6039      	str	r1, [r7, #0]
 8009646:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009648:	683b      	ldr	r3, [r7, #0]
 800964a:	221a      	movs	r2, #26
 800964c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800964e:	f000 f843 	bl	80096d8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009652:	4b02      	ldr	r3, [pc, #8]	@ (800965c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009654:	4618      	mov	r0, r3
 8009656:	3708      	adds	r7, #8
 8009658:	46bd      	mov	sp, r7
 800965a:	bd80      	pop	{r7, pc}
 800965c:	200000e4 	.word	0x200000e4

08009660 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009660:	b580      	push	{r7, lr}
 8009662:	b082      	sub	sp, #8
 8009664:	af00      	add	r7, sp, #0
 8009666:	4603      	mov	r3, r0
 8009668:	6039      	str	r1, [r7, #0]
 800966a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800966c:	79fb      	ldrb	r3, [r7, #7]
 800966e:	2b00      	cmp	r3, #0
 8009670:	d105      	bne.n	800967e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009672:	683a      	ldr	r2, [r7, #0]
 8009674:	4907      	ldr	r1, [pc, #28]	@ (8009694 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009676:	4808      	ldr	r0, [pc, #32]	@ (8009698 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009678:	f7fd fab2 	bl	8006be0 <USBD_GetString>
 800967c:	e004      	b.n	8009688 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800967e:	683a      	ldr	r2, [r7, #0]
 8009680:	4904      	ldr	r1, [pc, #16]	@ (8009694 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009682:	4805      	ldr	r0, [pc, #20]	@ (8009698 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009684:	f7fd faac 	bl	8006be0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009688:	4b02      	ldr	r3, [pc, #8]	@ (8009694 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800968a:	4618      	mov	r0, r3
 800968c:	3708      	adds	r7, #8
 800968e:	46bd      	mov	sp, r7
 8009690:	bd80      	pop	{r7, pc}
 8009692:	bf00      	nop
 8009694:	200054a8 	.word	0x200054a8
 8009698:	0800a114 	.word	0x0800a114

0800969c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800969c:	b580      	push	{r7, lr}
 800969e:	b082      	sub	sp, #8
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	4603      	mov	r3, r0
 80096a4:	6039      	str	r1, [r7, #0]
 80096a6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80096a8:	79fb      	ldrb	r3, [r7, #7]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d105      	bne.n	80096ba <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80096ae:	683a      	ldr	r2, [r7, #0]
 80096b0:	4907      	ldr	r1, [pc, #28]	@ (80096d0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80096b2:	4808      	ldr	r0, [pc, #32]	@ (80096d4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80096b4:	f7fd fa94 	bl	8006be0 <USBD_GetString>
 80096b8:	e004      	b.n	80096c4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80096ba:	683a      	ldr	r2, [r7, #0]
 80096bc:	4904      	ldr	r1, [pc, #16]	@ (80096d0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80096be:	4805      	ldr	r0, [pc, #20]	@ (80096d4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80096c0:	f7fd fa8e 	bl	8006be0 <USBD_GetString>
  }
  return USBD_StrDesc;
 80096c4:	4b02      	ldr	r3, [pc, #8]	@ (80096d0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80096c6:	4618      	mov	r0, r3
 80096c8:	3708      	adds	r7, #8
 80096ca:	46bd      	mov	sp, r7
 80096cc:	bd80      	pop	{r7, pc}
 80096ce:	bf00      	nop
 80096d0:	200054a8 	.word	0x200054a8
 80096d4:	0800a120 	.word	0x0800a120

080096d8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80096d8:	b580      	push	{r7, lr}
 80096da:	b084      	sub	sp, #16
 80096dc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80096de:	4b0f      	ldr	r3, [pc, #60]	@ (800971c <Get_SerialNum+0x44>)
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80096e4:	4b0e      	ldr	r3, [pc, #56]	@ (8009720 <Get_SerialNum+0x48>)
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80096ea:	4b0e      	ldr	r3, [pc, #56]	@ (8009724 <Get_SerialNum+0x4c>)
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80096f0:	68fa      	ldr	r2, [r7, #12]
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	4413      	add	r3, r2
 80096f6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d009      	beq.n	8009712 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80096fe:	2208      	movs	r2, #8
 8009700:	4909      	ldr	r1, [pc, #36]	@ (8009728 <Get_SerialNum+0x50>)
 8009702:	68f8      	ldr	r0, [r7, #12]
 8009704:	f000 f814 	bl	8009730 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009708:	2204      	movs	r2, #4
 800970a:	4908      	ldr	r1, [pc, #32]	@ (800972c <Get_SerialNum+0x54>)
 800970c:	68b8      	ldr	r0, [r7, #8]
 800970e:	f000 f80f 	bl	8009730 <IntToUnicode>
  }
}
 8009712:	bf00      	nop
 8009714:	3710      	adds	r7, #16
 8009716:	46bd      	mov	sp, r7
 8009718:	bd80      	pop	{r7, pc}
 800971a:	bf00      	nop
 800971c:	1fff7a10 	.word	0x1fff7a10
 8009720:	1fff7a14 	.word	0x1fff7a14
 8009724:	1fff7a18 	.word	0x1fff7a18
 8009728:	200000e6 	.word	0x200000e6
 800972c:	200000f6 	.word	0x200000f6

08009730 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009730:	b480      	push	{r7}
 8009732:	b087      	sub	sp, #28
 8009734:	af00      	add	r7, sp, #0
 8009736:	60f8      	str	r0, [r7, #12]
 8009738:	60b9      	str	r1, [r7, #8]
 800973a:	4613      	mov	r3, r2
 800973c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800973e:	2300      	movs	r3, #0
 8009740:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009742:	2300      	movs	r3, #0
 8009744:	75fb      	strb	r3, [r7, #23]
 8009746:	e027      	b.n	8009798 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	0f1b      	lsrs	r3, r3, #28
 800974c:	2b09      	cmp	r3, #9
 800974e:	d80b      	bhi.n	8009768 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	0f1b      	lsrs	r3, r3, #28
 8009754:	b2da      	uxtb	r2, r3
 8009756:	7dfb      	ldrb	r3, [r7, #23]
 8009758:	005b      	lsls	r3, r3, #1
 800975a:	4619      	mov	r1, r3
 800975c:	68bb      	ldr	r3, [r7, #8]
 800975e:	440b      	add	r3, r1
 8009760:	3230      	adds	r2, #48	@ 0x30
 8009762:	b2d2      	uxtb	r2, r2
 8009764:	701a      	strb	r2, [r3, #0]
 8009766:	e00a      	b.n	800977e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	0f1b      	lsrs	r3, r3, #28
 800976c:	b2da      	uxtb	r2, r3
 800976e:	7dfb      	ldrb	r3, [r7, #23]
 8009770:	005b      	lsls	r3, r3, #1
 8009772:	4619      	mov	r1, r3
 8009774:	68bb      	ldr	r3, [r7, #8]
 8009776:	440b      	add	r3, r1
 8009778:	3237      	adds	r2, #55	@ 0x37
 800977a:	b2d2      	uxtb	r2, r2
 800977c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	011b      	lsls	r3, r3, #4
 8009782:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009784:	7dfb      	ldrb	r3, [r7, #23]
 8009786:	005b      	lsls	r3, r3, #1
 8009788:	3301      	adds	r3, #1
 800978a:	68ba      	ldr	r2, [r7, #8]
 800978c:	4413      	add	r3, r2
 800978e:	2200      	movs	r2, #0
 8009790:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009792:	7dfb      	ldrb	r3, [r7, #23]
 8009794:	3301      	adds	r3, #1
 8009796:	75fb      	strb	r3, [r7, #23]
 8009798:	7dfa      	ldrb	r2, [r7, #23]
 800979a:	79fb      	ldrb	r3, [r7, #7]
 800979c:	429a      	cmp	r2, r3
 800979e:	d3d3      	bcc.n	8009748 <IntToUnicode+0x18>
  }
}
 80097a0:	bf00      	nop
 80097a2:	bf00      	nop
 80097a4:	371c      	adds	r7, #28
 80097a6:	46bd      	mov	sp, r7
 80097a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ac:	4770      	bx	lr
	...

080097b0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80097b0:	b580      	push	{r7, lr}
 80097b2:	b08a      	sub	sp, #40	@ 0x28
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80097b8:	f107 0314 	add.w	r3, r7, #20
 80097bc:	2200      	movs	r2, #0
 80097be:	601a      	str	r2, [r3, #0]
 80097c0:	605a      	str	r2, [r3, #4]
 80097c2:	609a      	str	r2, [r3, #8]
 80097c4:	60da      	str	r2, [r3, #12]
 80097c6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80097d0:	d13a      	bne.n	8009848 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80097d2:	2300      	movs	r3, #0
 80097d4:	613b      	str	r3, [r7, #16]
 80097d6:	4b1e      	ldr	r3, [pc, #120]	@ (8009850 <HAL_PCD_MspInit+0xa0>)
 80097d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80097da:	4a1d      	ldr	r2, [pc, #116]	@ (8009850 <HAL_PCD_MspInit+0xa0>)
 80097dc:	f043 0301 	orr.w	r3, r3, #1
 80097e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80097e2:	4b1b      	ldr	r3, [pc, #108]	@ (8009850 <HAL_PCD_MspInit+0xa0>)
 80097e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80097e6:	f003 0301 	and.w	r3, r3, #1
 80097ea:	613b      	str	r3, [r7, #16]
 80097ec:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80097ee:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80097f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80097f4:	2302      	movs	r3, #2
 80097f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80097f8:	2300      	movs	r3, #0
 80097fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80097fc:	2303      	movs	r3, #3
 80097fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009800:	230a      	movs	r3, #10
 8009802:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009804:	f107 0314 	add.w	r3, r7, #20
 8009808:	4619      	mov	r1, r3
 800980a:	4812      	ldr	r0, [pc, #72]	@ (8009854 <HAL_PCD_MspInit+0xa4>)
 800980c:	f7f7 fc2a 	bl	8001064 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009810:	4b0f      	ldr	r3, [pc, #60]	@ (8009850 <HAL_PCD_MspInit+0xa0>)
 8009812:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009814:	4a0e      	ldr	r2, [pc, #56]	@ (8009850 <HAL_PCD_MspInit+0xa0>)
 8009816:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800981a:	6353      	str	r3, [r2, #52]	@ 0x34
 800981c:	2300      	movs	r3, #0
 800981e:	60fb      	str	r3, [r7, #12]
 8009820:	4b0b      	ldr	r3, [pc, #44]	@ (8009850 <HAL_PCD_MspInit+0xa0>)
 8009822:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009824:	4a0a      	ldr	r2, [pc, #40]	@ (8009850 <HAL_PCD_MspInit+0xa0>)
 8009826:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800982a:	6453      	str	r3, [r2, #68]	@ 0x44
 800982c:	4b08      	ldr	r3, [pc, #32]	@ (8009850 <HAL_PCD_MspInit+0xa0>)
 800982e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009830:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009834:	60fb      	str	r3, [r7, #12]
 8009836:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8009838:	2200      	movs	r2, #0
 800983a:	2105      	movs	r1, #5
 800983c:	2043      	movs	r0, #67	@ 0x43
 800983e:	f7f7 fbe7 	bl	8001010 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009842:	2043      	movs	r0, #67	@ 0x43
 8009844:	f7f7 fc00 	bl	8001048 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009848:	bf00      	nop
 800984a:	3728      	adds	r7, #40	@ 0x28
 800984c:	46bd      	mov	sp, r7
 800984e:	bd80      	pop	{r7, pc}
 8009850:	40023800 	.word	0x40023800
 8009854:	40020000 	.word	0x40020000

08009858 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009858:	b580      	push	{r7, lr}
 800985a:	b082      	sub	sp, #8
 800985c:	af00      	add	r7, sp, #0
 800985e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800986c:	4619      	mov	r1, r3
 800986e:	4610      	mov	r0, r2
 8009870:	f7fc f853 	bl	800591a <USBD_LL_SetupStage>
}
 8009874:	bf00      	nop
 8009876:	3708      	adds	r7, #8
 8009878:	46bd      	mov	sp, r7
 800987a:	bd80      	pop	{r7, pc}

0800987c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800987c:	b580      	push	{r7, lr}
 800987e:	b082      	sub	sp, #8
 8009880:	af00      	add	r7, sp, #0
 8009882:	6078      	str	r0, [r7, #4]
 8009884:	460b      	mov	r3, r1
 8009886:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800988e:	78fa      	ldrb	r2, [r7, #3]
 8009890:	6879      	ldr	r1, [r7, #4]
 8009892:	4613      	mov	r3, r2
 8009894:	00db      	lsls	r3, r3, #3
 8009896:	4413      	add	r3, r2
 8009898:	009b      	lsls	r3, r3, #2
 800989a:	440b      	add	r3, r1
 800989c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80098a0:	681a      	ldr	r2, [r3, #0]
 80098a2:	78fb      	ldrb	r3, [r7, #3]
 80098a4:	4619      	mov	r1, r3
 80098a6:	f7fc f88d 	bl	80059c4 <USBD_LL_DataOutStage>
}
 80098aa:	bf00      	nop
 80098ac:	3708      	adds	r7, #8
 80098ae:	46bd      	mov	sp, r7
 80098b0:	bd80      	pop	{r7, pc}

080098b2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80098b2:	b580      	push	{r7, lr}
 80098b4:	b082      	sub	sp, #8
 80098b6:	af00      	add	r7, sp, #0
 80098b8:	6078      	str	r0, [r7, #4]
 80098ba:	460b      	mov	r3, r1
 80098bc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80098c4:	78fa      	ldrb	r2, [r7, #3]
 80098c6:	6879      	ldr	r1, [r7, #4]
 80098c8:	4613      	mov	r3, r2
 80098ca:	00db      	lsls	r3, r3, #3
 80098cc:	4413      	add	r3, r2
 80098ce:	009b      	lsls	r3, r3, #2
 80098d0:	440b      	add	r3, r1
 80098d2:	3320      	adds	r3, #32
 80098d4:	681a      	ldr	r2, [r3, #0]
 80098d6:	78fb      	ldrb	r3, [r7, #3]
 80098d8:	4619      	mov	r1, r3
 80098da:	f7fc f926 	bl	8005b2a <USBD_LL_DataInStage>
}
 80098de:	bf00      	nop
 80098e0:	3708      	adds	r7, #8
 80098e2:	46bd      	mov	sp, r7
 80098e4:	bd80      	pop	{r7, pc}

080098e6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80098e6:	b580      	push	{r7, lr}
 80098e8:	b082      	sub	sp, #8
 80098ea:	af00      	add	r7, sp, #0
 80098ec:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80098f4:	4618      	mov	r0, r3
 80098f6:	f7fc fa60 	bl	8005dba <USBD_LL_SOF>
}
 80098fa:	bf00      	nop
 80098fc:	3708      	adds	r7, #8
 80098fe:	46bd      	mov	sp, r7
 8009900:	bd80      	pop	{r7, pc}

08009902 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009902:	b580      	push	{r7, lr}
 8009904:	b084      	sub	sp, #16
 8009906:	af00      	add	r7, sp, #0
 8009908:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800990a:	2301      	movs	r3, #1
 800990c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	79db      	ldrb	r3, [r3, #7]
 8009912:	2b00      	cmp	r3, #0
 8009914:	d102      	bne.n	800991c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8009916:	2300      	movs	r3, #0
 8009918:	73fb      	strb	r3, [r7, #15]
 800991a:	e008      	b.n	800992e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	79db      	ldrb	r3, [r3, #7]
 8009920:	2b02      	cmp	r3, #2
 8009922:	d102      	bne.n	800992a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8009924:	2301      	movs	r3, #1
 8009926:	73fb      	strb	r3, [r7, #15]
 8009928:	e001      	b.n	800992e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800992a:	f7f7 f93b 	bl	8000ba4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009934:	7bfa      	ldrb	r2, [r7, #15]
 8009936:	4611      	mov	r1, r2
 8009938:	4618      	mov	r0, r3
 800993a:	f7fc f9fa 	bl	8005d32 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009944:	4618      	mov	r0, r3
 8009946:	f7fc f9a2 	bl	8005c8e <USBD_LL_Reset>
}
 800994a:	bf00      	nop
 800994c:	3710      	adds	r7, #16
 800994e:	46bd      	mov	sp, r7
 8009950:	bd80      	pop	{r7, pc}
	...

08009954 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009954:	b580      	push	{r7, lr}
 8009956:	b082      	sub	sp, #8
 8009958:	af00      	add	r7, sp, #0
 800995a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009962:	4618      	mov	r0, r3
 8009964:	f7fc f9f5 	bl	8005d52 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	687a      	ldr	r2, [r7, #4]
 8009974:	6812      	ldr	r2, [r2, #0]
 8009976:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800997a:	f043 0301 	orr.w	r3, r3, #1
 800997e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	7adb      	ldrb	r3, [r3, #11]
 8009984:	2b00      	cmp	r3, #0
 8009986:	d005      	beq.n	8009994 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009988:	4b04      	ldr	r3, [pc, #16]	@ (800999c <HAL_PCD_SuspendCallback+0x48>)
 800998a:	691b      	ldr	r3, [r3, #16]
 800998c:	4a03      	ldr	r2, [pc, #12]	@ (800999c <HAL_PCD_SuspendCallback+0x48>)
 800998e:	f043 0306 	orr.w	r3, r3, #6
 8009992:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009994:	bf00      	nop
 8009996:	3708      	adds	r7, #8
 8009998:	46bd      	mov	sp, r7
 800999a:	bd80      	pop	{r7, pc}
 800999c:	e000ed00 	.word	0xe000ed00

080099a0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80099a0:	b580      	push	{r7, lr}
 80099a2:	b082      	sub	sp, #8
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80099ae:	4618      	mov	r0, r3
 80099b0:	f7fc f9eb 	bl	8005d8a <USBD_LL_Resume>
}
 80099b4:	bf00      	nop
 80099b6:	3708      	adds	r7, #8
 80099b8:	46bd      	mov	sp, r7
 80099ba:	bd80      	pop	{r7, pc}

080099bc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80099bc:	b580      	push	{r7, lr}
 80099be:	b082      	sub	sp, #8
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	6078      	str	r0, [r7, #4]
 80099c4:	460b      	mov	r3, r1
 80099c6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80099ce:	78fa      	ldrb	r2, [r7, #3]
 80099d0:	4611      	mov	r1, r2
 80099d2:	4618      	mov	r0, r3
 80099d4:	f7fc fa43 	bl	8005e5e <USBD_LL_IsoOUTIncomplete>
}
 80099d8:	bf00      	nop
 80099da:	3708      	adds	r7, #8
 80099dc:	46bd      	mov	sp, r7
 80099de:	bd80      	pop	{r7, pc}

080099e0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b082      	sub	sp, #8
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	6078      	str	r0, [r7, #4]
 80099e8:	460b      	mov	r3, r1
 80099ea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80099f2:	78fa      	ldrb	r2, [r7, #3]
 80099f4:	4611      	mov	r1, r2
 80099f6:	4618      	mov	r0, r3
 80099f8:	f7fc f9ff 	bl	8005dfa <USBD_LL_IsoINIncomplete>
}
 80099fc:	bf00      	nop
 80099fe:	3708      	adds	r7, #8
 8009a00:	46bd      	mov	sp, r7
 8009a02:	bd80      	pop	{r7, pc}

08009a04 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a04:	b580      	push	{r7, lr}
 8009a06:	b082      	sub	sp, #8
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009a12:	4618      	mov	r0, r3
 8009a14:	f7fc fa55 	bl	8005ec2 <USBD_LL_DevConnected>
}
 8009a18:	bf00      	nop
 8009a1a:	3708      	adds	r7, #8
 8009a1c:	46bd      	mov	sp, r7
 8009a1e:	bd80      	pop	{r7, pc}

08009a20 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a20:	b580      	push	{r7, lr}
 8009a22:	b082      	sub	sp, #8
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009a2e:	4618      	mov	r0, r3
 8009a30:	f7fc fa52 	bl	8005ed8 <USBD_LL_DevDisconnected>
}
 8009a34:	bf00      	nop
 8009a36:	3708      	adds	r7, #8
 8009a38:	46bd      	mov	sp, r7
 8009a3a:	bd80      	pop	{r7, pc}

08009a3c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009a3c:	b580      	push	{r7, lr}
 8009a3e:	b082      	sub	sp, #8
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	781b      	ldrb	r3, [r3, #0]
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d13c      	bne.n	8009ac6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009a4c:	4a20      	ldr	r2, [pc, #128]	@ (8009ad0 <USBD_LL_Init+0x94>)
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	4a1e      	ldr	r2, [pc, #120]	@ (8009ad0 <USBD_LL_Init+0x94>)
 8009a58:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009a5c:	4b1c      	ldr	r3, [pc, #112]	@ (8009ad0 <USBD_LL_Init+0x94>)
 8009a5e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8009a62:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009a64:	4b1a      	ldr	r3, [pc, #104]	@ (8009ad0 <USBD_LL_Init+0x94>)
 8009a66:	2204      	movs	r2, #4
 8009a68:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009a6a:	4b19      	ldr	r3, [pc, #100]	@ (8009ad0 <USBD_LL_Init+0x94>)
 8009a6c:	2202      	movs	r2, #2
 8009a6e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009a70:	4b17      	ldr	r3, [pc, #92]	@ (8009ad0 <USBD_LL_Init+0x94>)
 8009a72:	2200      	movs	r2, #0
 8009a74:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009a76:	4b16      	ldr	r3, [pc, #88]	@ (8009ad0 <USBD_LL_Init+0x94>)
 8009a78:	2202      	movs	r2, #2
 8009a7a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009a7c:	4b14      	ldr	r3, [pc, #80]	@ (8009ad0 <USBD_LL_Init+0x94>)
 8009a7e:	2200      	movs	r2, #0
 8009a80:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009a82:	4b13      	ldr	r3, [pc, #76]	@ (8009ad0 <USBD_LL_Init+0x94>)
 8009a84:	2200      	movs	r2, #0
 8009a86:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009a88:	4b11      	ldr	r3, [pc, #68]	@ (8009ad0 <USBD_LL_Init+0x94>)
 8009a8a:	2200      	movs	r2, #0
 8009a8c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009a8e:	4b10      	ldr	r3, [pc, #64]	@ (8009ad0 <USBD_LL_Init+0x94>)
 8009a90:	2200      	movs	r2, #0
 8009a92:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009a94:	4b0e      	ldr	r3, [pc, #56]	@ (8009ad0 <USBD_LL_Init+0x94>)
 8009a96:	2200      	movs	r2, #0
 8009a98:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009a9a:	480d      	ldr	r0, [pc, #52]	@ (8009ad0 <USBD_LL_Init+0x94>)
 8009a9c:	f7f7 fcc8 	bl	8001430 <HAL_PCD_Init>
 8009aa0:	4603      	mov	r3, r0
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d001      	beq.n	8009aaa <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8009aa6:	f7f7 f87d 	bl	8000ba4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009aaa:	2180      	movs	r1, #128	@ 0x80
 8009aac:	4808      	ldr	r0, [pc, #32]	@ (8009ad0 <USBD_LL_Init+0x94>)
 8009aae:	f7f8 fef4 	bl	800289a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009ab2:	2240      	movs	r2, #64	@ 0x40
 8009ab4:	2100      	movs	r1, #0
 8009ab6:	4806      	ldr	r0, [pc, #24]	@ (8009ad0 <USBD_LL_Init+0x94>)
 8009ab8:	f7f8 fea8 	bl	800280c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009abc:	2280      	movs	r2, #128	@ 0x80
 8009abe:	2101      	movs	r1, #1
 8009ac0:	4803      	ldr	r0, [pc, #12]	@ (8009ad0 <USBD_LL_Init+0x94>)
 8009ac2:	f7f8 fea3 	bl	800280c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009ac6:	2300      	movs	r3, #0
}
 8009ac8:	4618      	mov	r0, r3
 8009aca:	3708      	adds	r7, #8
 8009acc:	46bd      	mov	sp, r7
 8009ace:	bd80      	pop	{r7, pc}
 8009ad0:	200056a8 	.word	0x200056a8

08009ad4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009ad4:	b580      	push	{r7, lr}
 8009ad6:	b084      	sub	sp, #16
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009adc:	2300      	movs	r3, #0
 8009ade:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ae0:	2300      	movs	r3, #0
 8009ae2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009aea:	4618      	mov	r0, r3
 8009aec:	f7f7 fdaf 	bl	800164e <HAL_PCD_Start>
 8009af0:	4603      	mov	r3, r0
 8009af2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009af4:	7bfb      	ldrb	r3, [r7, #15]
 8009af6:	4618      	mov	r0, r3
 8009af8:	f000 f942 	bl	8009d80 <USBD_Get_USB_Status>
 8009afc:	4603      	mov	r3, r0
 8009afe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009b00:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b02:	4618      	mov	r0, r3
 8009b04:	3710      	adds	r7, #16
 8009b06:	46bd      	mov	sp, r7
 8009b08:	bd80      	pop	{r7, pc}

08009b0a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009b0a:	b580      	push	{r7, lr}
 8009b0c:	b084      	sub	sp, #16
 8009b0e:	af00      	add	r7, sp, #0
 8009b10:	6078      	str	r0, [r7, #4]
 8009b12:	4608      	mov	r0, r1
 8009b14:	4611      	mov	r1, r2
 8009b16:	461a      	mov	r2, r3
 8009b18:	4603      	mov	r3, r0
 8009b1a:	70fb      	strb	r3, [r7, #3]
 8009b1c:	460b      	mov	r3, r1
 8009b1e:	70bb      	strb	r3, [r7, #2]
 8009b20:	4613      	mov	r3, r2
 8009b22:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b24:	2300      	movs	r3, #0
 8009b26:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b28:	2300      	movs	r3, #0
 8009b2a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009b32:	78bb      	ldrb	r3, [r7, #2]
 8009b34:	883a      	ldrh	r2, [r7, #0]
 8009b36:	78f9      	ldrb	r1, [r7, #3]
 8009b38:	f7f8 fa83 	bl	8002042 <HAL_PCD_EP_Open>
 8009b3c:	4603      	mov	r3, r0
 8009b3e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b40:	7bfb      	ldrb	r3, [r7, #15]
 8009b42:	4618      	mov	r0, r3
 8009b44:	f000 f91c 	bl	8009d80 <USBD_Get_USB_Status>
 8009b48:	4603      	mov	r3, r0
 8009b4a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009b4c:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b4e:	4618      	mov	r0, r3
 8009b50:	3710      	adds	r7, #16
 8009b52:	46bd      	mov	sp, r7
 8009b54:	bd80      	pop	{r7, pc}

08009b56 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009b56:	b580      	push	{r7, lr}
 8009b58:	b084      	sub	sp, #16
 8009b5a:	af00      	add	r7, sp, #0
 8009b5c:	6078      	str	r0, [r7, #4]
 8009b5e:	460b      	mov	r3, r1
 8009b60:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b62:	2300      	movs	r3, #0
 8009b64:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b66:	2300      	movs	r3, #0
 8009b68:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009b70:	78fa      	ldrb	r2, [r7, #3]
 8009b72:	4611      	mov	r1, r2
 8009b74:	4618      	mov	r0, r3
 8009b76:	f7f8 face 	bl	8002116 <HAL_PCD_EP_Close>
 8009b7a:	4603      	mov	r3, r0
 8009b7c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b7e:	7bfb      	ldrb	r3, [r7, #15]
 8009b80:	4618      	mov	r0, r3
 8009b82:	f000 f8fd 	bl	8009d80 <USBD_Get_USB_Status>
 8009b86:	4603      	mov	r3, r0
 8009b88:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009b8a:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b8c:	4618      	mov	r0, r3
 8009b8e:	3710      	adds	r7, #16
 8009b90:	46bd      	mov	sp, r7
 8009b92:	bd80      	pop	{r7, pc}

08009b94 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009b94:	b580      	push	{r7, lr}
 8009b96:	b084      	sub	sp, #16
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	6078      	str	r0, [r7, #4]
 8009b9c:	460b      	mov	r3, r1
 8009b9e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ba0:	2300      	movs	r3, #0
 8009ba2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009bae:	78fa      	ldrb	r2, [r7, #3]
 8009bb0:	4611      	mov	r1, r2
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	f7f8 fb86 	bl	80022c4 <HAL_PCD_EP_SetStall>
 8009bb8:	4603      	mov	r3, r0
 8009bba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009bbc:	7bfb      	ldrb	r3, [r7, #15]
 8009bbe:	4618      	mov	r0, r3
 8009bc0:	f000 f8de 	bl	8009d80 <USBD_Get_USB_Status>
 8009bc4:	4603      	mov	r3, r0
 8009bc6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009bc8:	7bbb      	ldrb	r3, [r7, #14]
}
 8009bca:	4618      	mov	r0, r3
 8009bcc:	3710      	adds	r7, #16
 8009bce:	46bd      	mov	sp, r7
 8009bd0:	bd80      	pop	{r7, pc}

08009bd2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009bd2:	b580      	push	{r7, lr}
 8009bd4:	b084      	sub	sp, #16
 8009bd6:	af00      	add	r7, sp, #0
 8009bd8:	6078      	str	r0, [r7, #4]
 8009bda:	460b      	mov	r3, r1
 8009bdc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009bde:	2300      	movs	r3, #0
 8009be0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009be2:	2300      	movs	r3, #0
 8009be4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009bec:	78fa      	ldrb	r2, [r7, #3]
 8009bee:	4611      	mov	r1, r2
 8009bf0:	4618      	mov	r0, r3
 8009bf2:	f7f8 fbca 	bl	800238a <HAL_PCD_EP_ClrStall>
 8009bf6:	4603      	mov	r3, r0
 8009bf8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009bfa:	7bfb      	ldrb	r3, [r7, #15]
 8009bfc:	4618      	mov	r0, r3
 8009bfe:	f000 f8bf 	bl	8009d80 <USBD_Get_USB_Status>
 8009c02:	4603      	mov	r3, r0
 8009c04:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009c06:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c08:	4618      	mov	r0, r3
 8009c0a:	3710      	adds	r7, #16
 8009c0c:	46bd      	mov	sp, r7
 8009c0e:	bd80      	pop	{r7, pc}

08009c10 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009c10:	b480      	push	{r7}
 8009c12:	b085      	sub	sp, #20
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	6078      	str	r0, [r7, #4]
 8009c18:	460b      	mov	r3, r1
 8009c1a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009c22:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009c24:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	da0b      	bge.n	8009c44 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009c2c:	78fb      	ldrb	r3, [r7, #3]
 8009c2e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009c32:	68f9      	ldr	r1, [r7, #12]
 8009c34:	4613      	mov	r3, r2
 8009c36:	00db      	lsls	r3, r3, #3
 8009c38:	4413      	add	r3, r2
 8009c3a:	009b      	lsls	r3, r3, #2
 8009c3c:	440b      	add	r3, r1
 8009c3e:	3316      	adds	r3, #22
 8009c40:	781b      	ldrb	r3, [r3, #0]
 8009c42:	e00b      	b.n	8009c5c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009c44:	78fb      	ldrb	r3, [r7, #3]
 8009c46:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009c4a:	68f9      	ldr	r1, [r7, #12]
 8009c4c:	4613      	mov	r3, r2
 8009c4e:	00db      	lsls	r3, r3, #3
 8009c50:	4413      	add	r3, r2
 8009c52:	009b      	lsls	r3, r3, #2
 8009c54:	440b      	add	r3, r1
 8009c56:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8009c5a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009c5c:	4618      	mov	r0, r3
 8009c5e:	3714      	adds	r7, #20
 8009c60:	46bd      	mov	sp, r7
 8009c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c66:	4770      	bx	lr

08009c68 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009c68:	b580      	push	{r7, lr}
 8009c6a:	b084      	sub	sp, #16
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	6078      	str	r0, [r7, #4]
 8009c70:	460b      	mov	r3, r1
 8009c72:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c74:	2300      	movs	r3, #0
 8009c76:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c78:	2300      	movs	r3, #0
 8009c7a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009c82:	78fa      	ldrb	r2, [r7, #3]
 8009c84:	4611      	mov	r1, r2
 8009c86:	4618      	mov	r0, r3
 8009c88:	f7f8 f9b7 	bl	8001ffa <HAL_PCD_SetAddress>
 8009c8c:	4603      	mov	r3, r0
 8009c8e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c90:	7bfb      	ldrb	r3, [r7, #15]
 8009c92:	4618      	mov	r0, r3
 8009c94:	f000 f874 	bl	8009d80 <USBD_Get_USB_Status>
 8009c98:	4603      	mov	r3, r0
 8009c9a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009c9c:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c9e:	4618      	mov	r0, r3
 8009ca0:	3710      	adds	r7, #16
 8009ca2:	46bd      	mov	sp, r7
 8009ca4:	bd80      	pop	{r7, pc}

08009ca6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009ca6:	b580      	push	{r7, lr}
 8009ca8:	b086      	sub	sp, #24
 8009caa:	af00      	add	r7, sp, #0
 8009cac:	60f8      	str	r0, [r7, #12]
 8009cae:	607a      	str	r2, [r7, #4]
 8009cb0:	603b      	str	r3, [r7, #0]
 8009cb2:	460b      	mov	r3, r1
 8009cb4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009cb6:	2300      	movs	r3, #0
 8009cb8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009cba:	2300      	movs	r3, #0
 8009cbc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009cc4:	7af9      	ldrb	r1, [r7, #11]
 8009cc6:	683b      	ldr	r3, [r7, #0]
 8009cc8:	687a      	ldr	r2, [r7, #4]
 8009cca:	f7f8 fac1 	bl	8002250 <HAL_PCD_EP_Transmit>
 8009cce:	4603      	mov	r3, r0
 8009cd0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009cd2:	7dfb      	ldrb	r3, [r7, #23]
 8009cd4:	4618      	mov	r0, r3
 8009cd6:	f000 f853 	bl	8009d80 <USBD_Get_USB_Status>
 8009cda:	4603      	mov	r3, r0
 8009cdc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009cde:	7dbb      	ldrb	r3, [r7, #22]
}
 8009ce0:	4618      	mov	r0, r3
 8009ce2:	3718      	adds	r7, #24
 8009ce4:	46bd      	mov	sp, r7
 8009ce6:	bd80      	pop	{r7, pc}

08009ce8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009ce8:	b580      	push	{r7, lr}
 8009cea:	b086      	sub	sp, #24
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	60f8      	str	r0, [r7, #12]
 8009cf0:	607a      	str	r2, [r7, #4]
 8009cf2:	603b      	str	r3, [r7, #0]
 8009cf4:	460b      	mov	r3, r1
 8009cf6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009cf8:	2300      	movs	r3, #0
 8009cfa:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009d06:	7af9      	ldrb	r1, [r7, #11]
 8009d08:	683b      	ldr	r3, [r7, #0]
 8009d0a:	687a      	ldr	r2, [r7, #4]
 8009d0c:	f7f8 fa4d 	bl	80021aa <HAL_PCD_EP_Receive>
 8009d10:	4603      	mov	r3, r0
 8009d12:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d14:	7dfb      	ldrb	r3, [r7, #23]
 8009d16:	4618      	mov	r0, r3
 8009d18:	f000 f832 	bl	8009d80 <USBD_Get_USB_Status>
 8009d1c:	4603      	mov	r3, r0
 8009d1e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009d20:	7dbb      	ldrb	r3, [r7, #22]
}
 8009d22:	4618      	mov	r0, r3
 8009d24:	3718      	adds	r7, #24
 8009d26:	46bd      	mov	sp, r7
 8009d28:	bd80      	pop	{r7, pc}

08009d2a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009d2a:	b580      	push	{r7, lr}
 8009d2c:	b082      	sub	sp, #8
 8009d2e:	af00      	add	r7, sp, #0
 8009d30:	6078      	str	r0, [r7, #4]
 8009d32:	460b      	mov	r3, r1
 8009d34:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009d3c:	78fa      	ldrb	r2, [r7, #3]
 8009d3e:	4611      	mov	r1, r2
 8009d40:	4618      	mov	r0, r3
 8009d42:	f7f8 fa6d 	bl	8002220 <HAL_PCD_EP_GetRxCount>
 8009d46:	4603      	mov	r3, r0
}
 8009d48:	4618      	mov	r0, r3
 8009d4a:	3708      	adds	r7, #8
 8009d4c:	46bd      	mov	sp, r7
 8009d4e:	bd80      	pop	{r7, pc}

08009d50 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009d50:	b480      	push	{r7}
 8009d52:	b083      	sub	sp, #12
 8009d54:	af00      	add	r7, sp, #0
 8009d56:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009d58:	4b03      	ldr	r3, [pc, #12]	@ (8009d68 <USBD_static_malloc+0x18>)
}
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	370c      	adds	r7, #12
 8009d5e:	46bd      	mov	sp, r7
 8009d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d64:	4770      	bx	lr
 8009d66:	bf00      	nop
 8009d68:	20005b8c 	.word	0x20005b8c

08009d6c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009d6c:	b480      	push	{r7}
 8009d6e:	b083      	sub	sp, #12
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	6078      	str	r0, [r7, #4]

}
 8009d74:	bf00      	nop
 8009d76:	370c      	adds	r7, #12
 8009d78:	46bd      	mov	sp, r7
 8009d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d7e:	4770      	bx	lr

08009d80 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009d80:	b480      	push	{r7}
 8009d82:	b085      	sub	sp, #20
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	4603      	mov	r3, r0
 8009d88:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d8a:	2300      	movs	r3, #0
 8009d8c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009d8e:	79fb      	ldrb	r3, [r7, #7]
 8009d90:	2b03      	cmp	r3, #3
 8009d92:	d817      	bhi.n	8009dc4 <USBD_Get_USB_Status+0x44>
 8009d94:	a201      	add	r2, pc, #4	@ (adr r2, 8009d9c <USBD_Get_USB_Status+0x1c>)
 8009d96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d9a:	bf00      	nop
 8009d9c:	08009dad 	.word	0x08009dad
 8009da0:	08009db3 	.word	0x08009db3
 8009da4:	08009db9 	.word	0x08009db9
 8009da8:	08009dbf 	.word	0x08009dbf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009dac:	2300      	movs	r3, #0
 8009dae:	73fb      	strb	r3, [r7, #15]
    break;
 8009db0:	e00b      	b.n	8009dca <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009db2:	2303      	movs	r3, #3
 8009db4:	73fb      	strb	r3, [r7, #15]
    break;
 8009db6:	e008      	b.n	8009dca <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009db8:	2301      	movs	r3, #1
 8009dba:	73fb      	strb	r3, [r7, #15]
    break;
 8009dbc:	e005      	b.n	8009dca <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009dbe:	2303      	movs	r3, #3
 8009dc0:	73fb      	strb	r3, [r7, #15]
    break;
 8009dc2:	e002      	b.n	8009dca <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009dc4:	2303      	movs	r3, #3
 8009dc6:	73fb      	strb	r3, [r7, #15]
    break;
 8009dc8:	bf00      	nop
  }
  return usb_status;
 8009dca:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dcc:	4618      	mov	r0, r3
 8009dce:	3714      	adds	r7, #20
 8009dd0:	46bd      	mov	sp, r7
 8009dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd6:	4770      	bx	lr

08009dd8 <memset>:
 8009dd8:	4402      	add	r2, r0
 8009dda:	4603      	mov	r3, r0
 8009ddc:	4293      	cmp	r3, r2
 8009dde:	d100      	bne.n	8009de2 <memset+0xa>
 8009de0:	4770      	bx	lr
 8009de2:	f803 1b01 	strb.w	r1, [r3], #1
 8009de6:	e7f9      	b.n	8009ddc <memset+0x4>

08009de8 <_reclaim_reent>:
 8009de8:	4b29      	ldr	r3, [pc, #164]	@ (8009e90 <_reclaim_reent+0xa8>)
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	4283      	cmp	r3, r0
 8009dee:	b570      	push	{r4, r5, r6, lr}
 8009df0:	4604      	mov	r4, r0
 8009df2:	d04b      	beq.n	8009e8c <_reclaim_reent+0xa4>
 8009df4:	69c3      	ldr	r3, [r0, #28]
 8009df6:	b1ab      	cbz	r3, 8009e24 <_reclaim_reent+0x3c>
 8009df8:	68db      	ldr	r3, [r3, #12]
 8009dfa:	b16b      	cbz	r3, 8009e18 <_reclaim_reent+0x30>
 8009dfc:	2500      	movs	r5, #0
 8009dfe:	69e3      	ldr	r3, [r4, #28]
 8009e00:	68db      	ldr	r3, [r3, #12]
 8009e02:	5959      	ldr	r1, [r3, r5]
 8009e04:	2900      	cmp	r1, #0
 8009e06:	d13b      	bne.n	8009e80 <_reclaim_reent+0x98>
 8009e08:	3504      	adds	r5, #4
 8009e0a:	2d80      	cmp	r5, #128	@ 0x80
 8009e0c:	d1f7      	bne.n	8009dfe <_reclaim_reent+0x16>
 8009e0e:	69e3      	ldr	r3, [r4, #28]
 8009e10:	4620      	mov	r0, r4
 8009e12:	68d9      	ldr	r1, [r3, #12]
 8009e14:	f000 f872 	bl	8009efc <_free_r>
 8009e18:	69e3      	ldr	r3, [r4, #28]
 8009e1a:	6819      	ldr	r1, [r3, #0]
 8009e1c:	b111      	cbz	r1, 8009e24 <_reclaim_reent+0x3c>
 8009e1e:	4620      	mov	r0, r4
 8009e20:	f000 f86c 	bl	8009efc <_free_r>
 8009e24:	6961      	ldr	r1, [r4, #20]
 8009e26:	b111      	cbz	r1, 8009e2e <_reclaim_reent+0x46>
 8009e28:	4620      	mov	r0, r4
 8009e2a:	f000 f867 	bl	8009efc <_free_r>
 8009e2e:	69e1      	ldr	r1, [r4, #28]
 8009e30:	b111      	cbz	r1, 8009e38 <_reclaim_reent+0x50>
 8009e32:	4620      	mov	r0, r4
 8009e34:	f000 f862 	bl	8009efc <_free_r>
 8009e38:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8009e3a:	b111      	cbz	r1, 8009e42 <_reclaim_reent+0x5a>
 8009e3c:	4620      	mov	r0, r4
 8009e3e:	f000 f85d 	bl	8009efc <_free_r>
 8009e42:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009e44:	b111      	cbz	r1, 8009e4c <_reclaim_reent+0x64>
 8009e46:	4620      	mov	r0, r4
 8009e48:	f000 f858 	bl	8009efc <_free_r>
 8009e4c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8009e4e:	b111      	cbz	r1, 8009e56 <_reclaim_reent+0x6e>
 8009e50:	4620      	mov	r0, r4
 8009e52:	f000 f853 	bl	8009efc <_free_r>
 8009e56:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8009e58:	b111      	cbz	r1, 8009e60 <_reclaim_reent+0x78>
 8009e5a:	4620      	mov	r0, r4
 8009e5c:	f000 f84e 	bl	8009efc <_free_r>
 8009e60:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8009e62:	b111      	cbz	r1, 8009e6a <_reclaim_reent+0x82>
 8009e64:	4620      	mov	r0, r4
 8009e66:	f000 f849 	bl	8009efc <_free_r>
 8009e6a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8009e6c:	b111      	cbz	r1, 8009e74 <_reclaim_reent+0x8c>
 8009e6e:	4620      	mov	r0, r4
 8009e70:	f000 f844 	bl	8009efc <_free_r>
 8009e74:	6a23      	ldr	r3, [r4, #32]
 8009e76:	b14b      	cbz	r3, 8009e8c <_reclaim_reent+0xa4>
 8009e78:	4620      	mov	r0, r4
 8009e7a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009e7e:	4718      	bx	r3
 8009e80:	680e      	ldr	r6, [r1, #0]
 8009e82:	4620      	mov	r0, r4
 8009e84:	f000 f83a 	bl	8009efc <_free_r>
 8009e88:	4631      	mov	r1, r6
 8009e8a:	e7bb      	b.n	8009e04 <_reclaim_reent+0x1c>
 8009e8c:	bd70      	pop	{r4, r5, r6, pc}
 8009e8e:	bf00      	nop
 8009e90:	20000100 	.word	0x20000100

08009e94 <__libc_init_array>:
 8009e94:	b570      	push	{r4, r5, r6, lr}
 8009e96:	4d0d      	ldr	r5, [pc, #52]	@ (8009ecc <__libc_init_array+0x38>)
 8009e98:	4c0d      	ldr	r4, [pc, #52]	@ (8009ed0 <__libc_init_array+0x3c>)
 8009e9a:	1b64      	subs	r4, r4, r5
 8009e9c:	10a4      	asrs	r4, r4, #2
 8009e9e:	2600      	movs	r6, #0
 8009ea0:	42a6      	cmp	r6, r4
 8009ea2:	d109      	bne.n	8009eb8 <__libc_init_array+0x24>
 8009ea4:	4d0b      	ldr	r5, [pc, #44]	@ (8009ed4 <__libc_init_array+0x40>)
 8009ea6:	4c0c      	ldr	r4, [pc, #48]	@ (8009ed8 <__libc_init_array+0x44>)
 8009ea8:	f000 f87e 	bl	8009fa8 <_init>
 8009eac:	1b64      	subs	r4, r4, r5
 8009eae:	10a4      	asrs	r4, r4, #2
 8009eb0:	2600      	movs	r6, #0
 8009eb2:	42a6      	cmp	r6, r4
 8009eb4:	d105      	bne.n	8009ec2 <__libc_init_array+0x2e>
 8009eb6:	bd70      	pop	{r4, r5, r6, pc}
 8009eb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ebc:	4798      	blx	r3
 8009ebe:	3601      	adds	r6, #1
 8009ec0:	e7ee      	b.n	8009ea0 <__libc_init_array+0xc>
 8009ec2:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ec6:	4798      	blx	r3
 8009ec8:	3601      	adds	r6, #1
 8009eca:	e7f2      	b.n	8009eb2 <__libc_init_array+0x1e>
 8009ecc:	0800a150 	.word	0x0800a150
 8009ed0:	0800a150 	.word	0x0800a150
 8009ed4:	0800a150 	.word	0x0800a150
 8009ed8:	0800a154 	.word	0x0800a154

08009edc <__retarget_lock_acquire_recursive>:
 8009edc:	4770      	bx	lr

08009ede <__retarget_lock_release_recursive>:
 8009ede:	4770      	bx	lr

08009ee0 <memcpy>:
 8009ee0:	440a      	add	r2, r1
 8009ee2:	4291      	cmp	r1, r2
 8009ee4:	f100 33ff 	add.w	r3, r0, #4294967295
 8009ee8:	d100      	bne.n	8009eec <memcpy+0xc>
 8009eea:	4770      	bx	lr
 8009eec:	b510      	push	{r4, lr}
 8009eee:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009ef2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009ef6:	4291      	cmp	r1, r2
 8009ef8:	d1f9      	bne.n	8009eee <memcpy+0xe>
 8009efa:	bd10      	pop	{r4, pc}

08009efc <_free_r>:
 8009efc:	b538      	push	{r3, r4, r5, lr}
 8009efe:	4605      	mov	r5, r0
 8009f00:	2900      	cmp	r1, #0
 8009f02:	d041      	beq.n	8009f88 <_free_r+0x8c>
 8009f04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009f08:	1f0c      	subs	r4, r1, #4
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	bfb8      	it	lt
 8009f0e:	18e4      	addlt	r4, r4, r3
 8009f10:	f000 f83e 	bl	8009f90 <__malloc_lock>
 8009f14:	4a1d      	ldr	r2, [pc, #116]	@ (8009f8c <_free_r+0x90>)
 8009f16:	6813      	ldr	r3, [r2, #0]
 8009f18:	b933      	cbnz	r3, 8009f28 <_free_r+0x2c>
 8009f1a:	6063      	str	r3, [r4, #4]
 8009f1c:	6014      	str	r4, [r2, #0]
 8009f1e:	4628      	mov	r0, r5
 8009f20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009f24:	f000 b83a 	b.w	8009f9c <__malloc_unlock>
 8009f28:	42a3      	cmp	r3, r4
 8009f2a:	d908      	bls.n	8009f3e <_free_r+0x42>
 8009f2c:	6820      	ldr	r0, [r4, #0]
 8009f2e:	1821      	adds	r1, r4, r0
 8009f30:	428b      	cmp	r3, r1
 8009f32:	bf01      	itttt	eq
 8009f34:	6819      	ldreq	r1, [r3, #0]
 8009f36:	685b      	ldreq	r3, [r3, #4]
 8009f38:	1809      	addeq	r1, r1, r0
 8009f3a:	6021      	streq	r1, [r4, #0]
 8009f3c:	e7ed      	b.n	8009f1a <_free_r+0x1e>
 8009f3e:	461a      	mov	r2, r3
 8009f40:	685b      	ldr	r3, [r3, #4]
 8009f42:	b10b      	cbz	r3, 8009f48 <_free_r+0x4c>
 8009f44:	42a3      	cmp	r3, r4
 8009f46:	d9fa      	bls.n	8009f3e <_free_r+0x42>
 8009f48:	6811      	ldr	r1, [r2, #0]
 8009f4a:	1850      	adds	r0, r2, r1
 8009f4c:	42a0      	cmp	r0, r4
 8009f4e:	d10b      	bne.n	8009f68 <_free_r+0x6c>
 8009f50:	6820      	ldr	r0, [r4, #0]
 8009f52:	4401      	add	r1, r0
 8009f54:	1850      	adds	r0, r2, r1
 8009f56:	4283      	cmp	r3, r0
 8009f58:	6011      	str	r1, [r2, #0]
 8009f5a:	d1e0      	bne.n	8009f1e <_free_r+0x22>
 8009f5c:	6818      	ldr	r0, [r3, #0]
 8009f5e:	685b      	ldr	r3, [r3, #4]
 8009f60:	6053      	str	r3, [r2, #4]
 8009f62:	4408      	add	r0, r1
 8009f64:	6010      	str	r0, [r2, #0]
 8009f66:	e7da      	b.n	8009f1e <_free_r+0x22>
 8009f68:	d902      	bls.n	8009f70 <_free_r+0x74>
 8009f6a:	230c      	movs	r3, #12
 8009f6c:	602b      	str	r3, [r5, #0]
 8009f6e:	e7d6      	b.n	8009f1e <_free_r+0x22>
 8009f70:	6820      	ldr	r0, [r4, #0]
 8009f72:	1821      	adds	r1, r4, r0
 8009f74:	428b      	cmp	r3, r1
 8009f76:	bf04      	itt	eq
 8009f78:	6819      	ldreq	r1, [r3, #0]
 8009f7a:	685b      	ldreq	r3, [r3, #4]
 8009f7c:	6063      	str	r3, [r4, #4]
 8009f7e:	bf04      	itt	eq
 8009f80:	1809      	addeq	r1, r1, r0
 8009f82:	6021      	streq	r1, [r4, #0]
 8009f84:	6054      	str	r4, [r2, #4]
 8009f86:	e7ca      	b.n	8009f1e <_free_r+0x22>
 8009f88:	bd38      	pop	{r3, r4, r5, pc}
 8009f8a:	bf00      	nop
 8009f8c:	20005ee8 	.word	0x20005ee8

08009f90 <__malloc_lock>:
 8009f90:	4801      	ldr	r0, [pc, #4]	@ (8009f98 <__malloc_lock+0x8>)
 8009f92:	f7ff bfa3 	b.w	8009edc <__retarget_lock_acquire_recursive>
 8009f96:	bf00      	nop
 8009f98:	20005ee4 	.word	0x20005ee4

08009f9c <__malloc_unlock>:
 8009f9c:	4801      	ldr	r0, [pc, #4]	@ (8009fa4 <__malloc_unlock+0x8>)
 8009f9e:	f7ff bf9e 	b.w	8009ede <__retarget_lock_release_recursive>
 8009fa2:	bf00      	nop
 8009fa4:	20005ee4 	.word	0x20005ee4

08009fa8 <_init>:
 8009fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009faa:	bf00      	nop
 8009fac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009fae:	bc08      	pop	{r3}
 8009fb0:	469e      	mov	lr, r3
 8009fb2:	4770      	bx	lr

08009fb4 <_fini>:
 8009fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fb6:	bf00      	nop
 8009fb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009fba:	bc08      	pop	{r3}
 8009fbc:	469e      	mov	lr, r3
 8009fbe:	4770      	bx	lr
