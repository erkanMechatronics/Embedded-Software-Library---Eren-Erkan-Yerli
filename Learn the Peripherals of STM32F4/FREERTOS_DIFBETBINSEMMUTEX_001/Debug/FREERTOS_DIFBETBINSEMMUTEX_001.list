
FREERTOS_DIFBETBINSEMMUTEX_001.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009cf4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000140  08009e84  08009e84  0000ae84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009fc4  08009fc4  0000b150  2**0
                  CONTENTS
  4 .ARM          00000008  08009fc4  08009fc4  0000afc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009fcc  08009fcc  0000b150  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009fcc  08009fcc  0000afcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009fd0  08009fd0  0000afd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000150  20000000  08009fd4  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b150  2**0
                  CONTENTS
 10 .bss          00005c38  20000150  20000150  0000b150  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20005d88  20005d88  0000b150  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b150  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b118  00000000  00000000  0000b180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000044b1  00000000  00000000  00026298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016a8  00000000  00000000  0002a750  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001142  00000000  00000000  0002bdf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025635  00000000  00000000  0002cf3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001bce0  00000000  00000000  0005256f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d5cf7  00000000  00000000  0006e24f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00143f46  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000060b0  00000000  00000000  00143f8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007a  00000000  00000000  0014a03c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000150 	.word	0x20000150
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009e6c 	.word	0x08009e6c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000154 	.word	0x20000154
 80001cc:	08009e6c 	.word	0x08009e6c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b96a 	b.w	80004cc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	460c      	mov	r4, r1
 8000218:	2b00      	cmp	r3, #0
 800021a:	d14e      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021c:	4694      	mov	ip, r2
 800021e:	458c      	cmp	ip, r1
 8000220:	4686      	mov	lr, r0
 8000222:	fab2 f282 	clz	r2, r2
 8000226:	d962      	bls.n	80002ee <__udivmoddi4+0xde>
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0320 	rsb	r3, r2, #32
 800022e:	4091      	lsls	r1, r2
 8000230:	fa20 f303 	lsr.w	r3, r0, r3
 8000234:	fa0c fc02 	lsl.w	ip, ip, r2
 8000238:	4319      	orrs	r1, r3
 800023a:	fa00 fe02 	lsl.w	lr, r0, r2
 800023e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000242:	fa1f f68c 	uxth.w	r6, ip
 8000246:	fbb1 f4f7 	udiv	r4, r1, r7
 800024a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800024e:	fb07 1114 	mls	r1, r7, r4, r1
 8000252:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000256:	fb04 f106 	mul.w	r1, r4, r6
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f104 30ff 	add.w	r0, r4, #4294967295
 8000266:	f080 8112 	bcs.w	800048e <__udivmoddi4+0x27e>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 810f 	bls.w	800048e <__udivmoddi4+0x27e>
 8000270:	3c02      	subs	r4, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a59      	subs	r1, r3, r1
 8000276:	fa1f f38e 	uxth.w	r3, lr
 800027a:	fbb1 f0f7 	udiv	r0, r1, r7
 800027e:	fb07 1110 	mls	r1, r7, r0, r1
 8000282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000286:	fb00 f606 	mul.w	r6, r0, r6
 800028a:	429e      	cmp	r6, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x94>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f100 31ff 	add.w	r1, r0, #4294967295
 8000296:	f080 80fc 	bcs.w	8000492 <__udivmoddi4+0x282>
 800029a:	429e      	cmp	r6, r3
 800029c:	f240 80f9 	bls.w	8000492 <__udivmoddi4+0x282>
 80002a0:	4463      	add	r3, ip
 80002a2:	3802      	subs	r0, #2
 80002a4:	1b9b      	subs	r3, r3, r6
 80002a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002aa:	2100      	movs	r1, #0
 80002ac:	b11d      	cbz	r5, 80002b6 <__udivmoddi4+0xa6>
 80002ae:	40d3      	lsrs	r3, r2
 80002b0:	2200      	movs	r2, #0
 80002b2:	e9c5 3200 	strd	r3, r2, [r5]
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d905      	bls.n	80002ca <__udivmoddi4+0xba>
 80002be:	b10d      	cbz	r5, 80002c4 <__udivmoddi4+0xb4>
 80002c0:	e9c5 0100 	strd	r0, r1, [r5]
 80002c4:	2100      	movs	r1, #0
 80002c6:	4608      	mov	r0, r1
 80002c8:	e7f5      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ca:	fab3 f183 	clz	r1, r3
 80002ce:	2900      	cmp	r1, #0
 80002d0:	d146      	bne.n	8000360 <__udivmoddi4+0x150>
 80002d2:	42a3      	cmp	r3, r4
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xcc>
 80002d6:	4290      	cmp	r0, r2
 80002d8:	f0c0 80f0 	bcc.w	80004bc <__udivmoddi4+0x2ac>
 80002dc:	1a86      	subs	r6, r0, r2
 80002de:	eb64 0303 	sbc.w	r3, r4, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	2d00      	cmp	r5, #0
 80002e6:	d0e6      	beq.n	80002b6 <__udivmoddi4+0xa6>
 80002e8:	e9c5 6300 	strd	r6, r3, [r5]
 80002ec:	e7e3      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x204>
 80002f4:	eba1 040c 	sub.w	r4, r1, ip
 80002f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002fc:	fa1f f78c 	uxth.w	r7, ip
 8000300:	2101      	movs	r1, #1
 8000302:	fbb4 f6f8 	udiv	r6, r4, r8
 8000306:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030a:	fb08 4416 	mls	r4, r8, r6, r4
 800030e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000312:	fb07 f006 	mul.w	r0, r7, r6
 8000316:	4298      	cmp	r0, r3
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x11c>
 800031a:	eb1c 0303 	adds.w	r3, ip, r3
 800031e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x11a>
 8000324:	4298      	cmp	r0, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2b4>
 800032a:	4626      	mov	r6, r4
 800032c:	1a1c      	subs	r4, r3, r0
 800032e:	fa1f f38e 	uxth.w	r3, lr
 8000332:	fbb4 f0f8 	udiv	r0, r4, r8
 8000336:	fb08 4410 	mls	r4, r8, r0, r4
 800033a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800033e:	fb00 f707 	mul.w	r7, r0, r7
 8000342:	429f      	cmp	r7, r3
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x148>
 8000346:	eb1c 0303 	adds.w	r3, ip, r3
 800034a:	f100 34ff 	add.w	r4, r0, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x146>
 8000350:	429f      	cmp	r7, r3
 8000352:	f200 80b0 	bhi.w	80004b6 <__udivmoddi4+0x2a6>
 8000356:	4620      	mov	r0, r4
 8000358:	1bdb      	subs	r3, r3, r7
 800035a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800035e:	e7a5      	b.n	80002ac <__udivmoddi4+0x9c>
 8000360:	f1c1 0620 	rsb	r6, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 f706 	lsr.w	r7, r2, r6
 800036a:	431f      	orrs	r7, r3
 800036c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000370:	fa04 f301 	lsl.w	r3, r4, r1
 8000374:	ea43 030c 	orr.w	r3, r3, ip
 8000378:	40f4      	lsrs	r4, r6
 800037a:	fa00 f801 	lsl.w	r8, r0, r1
 800037e:	0c38      	lsrs	r0, r7, #16
 8000380:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000384:	fbb4 fef0 	udiv	lr, r4, r0
 8000388:	fa1f fc87 	uxth.w	ip, r7
 800038c:	fb00 441e 	mls	r4, r0, lr, r4
 8000390:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000394:	fb0e f90c 	mul.w	r9, lr, ip
 8000398:	45a1      	cmp	r9, r4
 800039a:	fa02 f201 	lsl.w	r2, r2, r1
 800039e:	d90a      	bls.n	80003b6 <__udivmoddi4+0x1a6>
 80003a0:	193c      	adds	r4, r7, r4
 80003a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003a6:	f080 8084 	bcs.w	80004b2 <__udivmoddi4+0x2a2>
 80003aa:	45a1      	cmp	r9, r4
 80003ac:	f240 8081 	bls.w	80004b2 <__udivmoddi4+0x2a2>
 80003b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003b4:	443c      	add	r4, r7
 80003b6:	eba4 0409 	sub.w	r4, r4, r9
 80003ba:	fa1f f983 	uxth.w	r9, r3
 80003be:	fbb4 f3f0 	udiv	r3, r4, r0
 80003c2:	fb00 4413 	mls	r4, r0, r3, r4
 80003c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d907      	bls.n	80003e2 <__udivmoddi4+0x1d2>
 80003d2:	193c      	adds	r4, r7, r4
 80003d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d8:	d267      	bcs.n	80004aa <__udivmoddi4+0x29a>
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d965      	bls.n	80004aa <__udivmoddi4+0x29a>
 80003de:	3b02      	subs	r3, #2
 80003e0:	443c      	add	r4, r7
 80003e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003e6:	fba0 9302 	umull	r9, r3, r0, r2
 80003ea:	eba4 040c 	sub.w	r4, r4, ip
 80003ee:	429c      	cmp	r4, r3
 80003f0:	46ce      	mov	lr, r9
 80003f2:	469c      	mov	ip, r3
 80003f4:	d351      	bcc.n	800049a <__udivmoddi4+0x28a>
 80003f6:	d04e      	beq.n	8000496 <__udivmoddi4+0x286>
 80003f8:	b155      	cbz	r5, 8000410 <__udivmoddi4+0x200>
 80003fa:	ebb8 030e 	subs.w	r3, r8, lr
 80003fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000402:	fa04 f606 	lsl.w	r6, r4, r6
 8000406:	40cb      	lsrs	r3, r1
 8000408:	431e      	orrs	r6, r3
 800040a:	40cc      	lsrs	r4, r1
 800040c:	e9c5 6400 	strd	r6, r4, [r5]
 8000410:	2100      	movs	r1, #0
 8000412:	e750      	b.n	80002b6 <__udivmoddi4+0xa6>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f103 	lsr.w	r1, r0, r3
 800041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000420:	fa24 f303 	lsr.w	r3, r4, r3
 8000424:	4094      	lsls	r4, r2
 8000426:	430c      	orrs	r4, r1
 8000428:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800042c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000430:	fa1f f78c 	uxth.w	r7, ip
 8000434:	fbb3 f0f8 	udiv	r0, r3, r8
 8000438:	fb08 3110 	mls	r1, r8, r0, r3
 800043c:	0c23      	lsrs	r3, r4, #16
 800043e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000442:	fb00 f107 	mul.w	r1, r0, r7
 8000446:	4299      	cmp	r1, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x24c>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000452:	d22c      	bcs.n	80004ae <__udivmoddi4+0x29e>
 8000454:	4299      	cmp	r1, r3
 8000456:	d92a      	bls.n	80004ae <__udivmoddi4+0x29e>
 8000458:	3802      	subs	r0, #2
 800045a:	4463      	add	r3, ip
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b2a4      	uxth	r4, r4
 8000460:	fbb3 f1f8 	udiv	r1, r3, r8
 8000464:	fb08 3311 	mls	r3, r8, r1, r3
 8000468:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800046c:	fb01 f307 	mul.w	r3, r1, r7
 8000470:	42a3      	cmp	r3, r4
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x276>
 8000474:	eb1c 0404 	adds.w	r4, ip, r4
 8000478:	f101 36ff 	add.w	r6, r1, #4294967295
 800047c:	d213      	bcs.n	80004a6 <__udivmoddi4+0x296>
 800047e:	42a3      	cmp	r3, r4
 8000480:	d911      	bls.n	80004a6 <__udivmoddi4+0x296>
 8000482:	3902      	subs	r1, #2
 8000484:	4464      	add	r4, ip
 8000486:	1ae4      	subs	r4, r4, r3
 8000488:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800048c:	e739      	b.n	8000302 <__udivmoddi4+0xf2>
 800048e:	4604      	mov	r4, r0
 8000490:	e6f0      	b.n	8000274 <__udivmoddi4+0x64>
 8000492:	4608      	mov	r0, r1
 8000494:	e706      	b.n	80002a4 <__udivmoddi4+0x94>
 8000496:	45c8      	cmp	r8, r9
 8000498:	d2ae      	bcs.n	80003f8 <__udivmoddi4+0x1e8>
 800049a:	ebb9 0e02 	subs.w	lr, r9, r2
 800049e:	eb63 0c07 	sbc.w	ip, r3, r7
 80004a2:	3801      	subs	r0, #1
 80004a4:	e7a8      	b.n	80003f8 <__udivmoddi4+0x1e8>
 80004a6:	4631      	mov	r1, r6
 80004a8:	e7ed      	b.n	8000486 <__udivmoddi4+0x276>
 80004aa:	4603      	mov	r3, r0
 80004ac:	e799      	b.n	80003e2 <__udivmoddi4+0x1d2>
 80004ae:	4630      	mov	r0, r6
 80004b0:	e7d4      	b.n	800045c <__udivmoddi4+0x24c>
 80004b2:	46d6      	mov	lr, sl
 80004b4:	e77f      	b.n	80003b6 <__udivmoddi4+0x1a6>
 80004b6:	4463      	add	r3, ip
 80004b8:	3802      	subs	r0, #2
 80004ba:	e74d      	b.n	8000358 <__udivmoddi4+0x148>
 80004bc:	4606      	mov	r6, r0
 80004be:	4623      	mov	r3, r4
 80004c0:	4608      	mov	r0, r1
 80004c2:	e70f      	b.n	80002e4 <__udivmoddi4+0xd4>
 80004c4:	3e02      	subs	r6, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	e730      	b.n	800032c <__udivmoddi4+0x11c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004d0:	b480      	push	{r7}
 80004d2:	b085      	sub	sp, #20
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	60f8      	str	r0, [r7, #12]
 80004d8:	60b9      	str	r1, [r7, #8]
 80004da:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004dc:	68fb      	ldr	r3, [r7, #12]
 80004de:	4a07      	ldr	r2, [pc, #28]	@ (80004fc <vApplicationGetIdleTaskMemory+0x2c>)
 80004e0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004e2:	68bb      	ldr	r3, [r7, #8]
 80004e4:	4a06      	ldr	r2, [pc, #24]	@ (8000500 <vApplicationGetIdleTaskMemory+0x30>)
 80004e6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	2280      	movs	r2, #128	@ 0x80
 80004ec:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004ee:	bf00      	nop
 80004f0:	3714      	adds	r7, #20
 80004f2:	46bd      	mov	sp, r7
 80004f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop
 80004fc:	2000016c 	.word	0x2000016c
 8000500:	2000020c 	.word	0x2000020c

08000504 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000504:	b5b0      	push	{r4, r5, r7, lr}
 8000506:	b09e      	sub	sp, #120	@ 0x78
 8000508:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050a:	f000 fb97 	bl	8000c3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800050e:	f000 f883 	bl	8000618 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000512:	f000 f8eb 	bl	80006ec <MX_GPIO_Init>

  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of myMutex01 */
  osMutexDef(myMutex01);
 8000516:	2300      	movs	r3, #0
 8000518:	673b      	str	r3, [r7, #112]	@ 0x70
 800051a:	2300      	movs	r3, #0
 800051c:	677b      	str	r3, [r7, #116]	@ 0x74
  myMutex01Handle = osMutexCreate(osMutex(myMutex01));
 800051e:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000522:	4618      	mov	r0, r3
 8000524:	f006 fc01 	bl	8006d2a <osMutexCreate>
 8000528:	4603      	mov	r3, r0
 800052a:	4a31      	ldr	r2, [pc, #196]	@ (80005f0 <main+0xec>)
 800052c:	6013      	str	r3, [r2, #0]

  /* definition and creation of myMutex02 */
  osMutexDef(myMutex02);
 800052e:	2300      	movs	r3, #0
 8000530:	66bb      	str	r3, [r7, #104]	@ 0x68
 8000532:	2300      	movs	r3, #0
 8000534:	66fb      	str	r3, [r7, #108]	@ 0x6c
  myMutex02Handle = osMutexCreate(osMutex(myMutex02));
 8000536:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800053a:	4618      	mov	r0, r3
 800053c:	f006 fbf5 	bl	8006d2a <osMutexCreate>
 8000540:	4603      	mov	r3, r0
 8000542:	4a2c      	ldr	r2, [pc, #176]	@ (80005f4 <main+0xf0>)
 8000544:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of myBinarySem01 */
  osSemaphoreDef(myBinarySem01);
 8000546:	2300      	movs	r3, #0
 8000548:	663b      	str	r3, [r7, #96]	@ 0x60
 800054a:	2300      	movs	r3, #0
 800054c:	667b      	str	r3, [r7, #100]	@ 0x64
  myBinarySem01Handle = osSemaphoreCreate(osSemaphore(myBinarySem01), 1);
 800054e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000552:	2101      	movs	r1, #1
 8000554:	4618      	mov	r0, r3
 8000556:	f006 fc00 	bl	8006d5a <osSemaphoreCreate>
 800055a:	4603      	mov	r3, r0
 800055c:	4a26      	ldr	r2, [pc, #152]	@ (80005f8 <main+0xf4>)
 800055e:	6013      	str	r3, [r2, #0]

  /* definition and creation of myBinarySem02 */
  osSemaphoreDef(myBinarySem02);
 8000560:	2300      	movs	r3, #0
 8000562:	65bb      	str	r3, [r7, #88]	@ 0x58
 8000564:	2300      	movs	r3, #0
 8000566:	65fb      	str	r3, [r7, #92]	@ 0x5c
  myBinarySem02Handle = osSemaphoreCreate(osSemaphore(myBinarySem02), 1);
 8000568:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800056c:	2101      	movs	r1, #1
 800056e:	4618      	mov	r0, r3
 8000570:	f006 fbf3 	bl	8006d5a <osSemaphoreCreate>
 8000574:	4603      	mov	r3, r0
 8000576:	4a21      	ldr	r2, [pc, #132]	@ (80005fc <main+0xf8>)
 8000578:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Task1 */
  osThreadDef(Task1, StartTask1, osPriorityAboveNormal, 0, 256);
 800057a:	4b21      	ldr	r3, [pc, #132]	@ (8000600 <main+0xfc>)
 800057c:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8000580:	461d      	mov	r5, r3
 8000582:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000584:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000586:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800058a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task1Handle = osThreadCreate(osThread(Task1), NULL);
 800058e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000592:	2100      	movs	r1, #0
 8000594:	4618      	mov	r0, r3
 8000596:	f006 fb7c 	bl	8006c92 <osThreadCreate>
 800059a:	4603      	mov	r3, r0
 800059c:	4a19      	ldr	r2, [pc, #100]	@ (8000604 <main+0x100>)
 800059e:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task2 */
  osThreadDef(Task2, StartTask2, osPriorityNormal, 0, 256);
 80005a0:	4b19      	ldr	r3, [pc, #100]	@ (8000608 <main+0x104>)
 80005a2:	f107 0420 	add.w	r4, r7, #32
 80005a6:	461d      	mov	r5, r3
 80005a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005ac:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005b0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task2Handle = osThreadCreate(osThread(Task2), NULL);
 80005b4:	f107 0320 	add.w	r3, r7, #32
 80005b8:	2100      	movs	r1, #0
 80005ba:	4618      	mov	r0, r3
 80005bc:	f006 fb69 	bl	8006c92 <osThreadCreate>
 80005c0:	4603      	mov	r3, r0
 80005c2:	4a12      	ldr	r2, [pc, #72]	@ (800060c <main+0x108>)
 80005c4:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask03 */
  osThreadDef(myTask03, StartTask03, osPriorityBelowNormal, 0, 128);
 80005c6:	4b12      	ldr	r3, [pc, #72]	@ (8000610 <main+0x10c>)
 80005c8:	1d3c      	adds	r4, r7, #4
 80005ca:	461d      	mov	r5, r3
 80005cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005d0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005d4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask03Handle = osThreadCreate(osThread(myTask03), NULL);
 80005d8:	1d3b      	adds	r3, r7, #4
 80005da:	2100      	movs	r1, #0
 80005dc:	4618      	mov	r0, r3
 80005de:	f006 fb58 	bl	8006c92 <osThreadCreate>
 80005e2:	4603      	mov	r3, r0
 80005e4:	4a0b      	ldr	r2, [pc, #44]	@ (8000614 <main+0x110>)
 80005e6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80005e8:	f006 fb4c 	bl	8006c84 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005ec:	bf00      	nop
 80005ee:	e7fd      	b.n	80005ec <main+0xe8>
 80005f0:	2000041c 	.word	0x2000041c
 80005f4:	20000420 	.word	0x20000420
 80005f8:	20000424 	.word	0x20000424
 80005fc:	20000428 	.word	0x20000428
 8000600:	08009e8c 	.word	0x08009e8c
 8000604:	20000410 	.word	0x20000410
 8000608:	08009eb0 	.word	0x08009eb0
 800060c:	20000414 	.word	0x20000414
 8000610:	08009ed8 	.word	0x08009ed8
 8000614:	20000418 	.word	0x20000418

08000618 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b094      	sub	sp, #80	@ 0x50
 800061c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800061e:	f107 0320 	add.w	r3, r7, #32
 8000622:	2230      	movs	r2, #48	@ 0x30
 8000624:	2100      	movs	r1, #0
 8000626:	4618      	mov	r0, r3
 8000628:	f009 fb38 	bl	8009c9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800062c:	f107 030c 	add.w	r3, r7, #12
 8000630:	2200      	movs	r2, #0
 8000632:	601a      	str	r2, [r3, #0]
 8000634:	605a      	str	r2, [r3, #4]
 8000636:	609a      	str	r2, [r3, #8]
 8000638:	60da      	str	r2, [r3, #12]
 800063a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800063c:	2300      	movs	r3, #0
 800063e:	60bb      	str	r3, [r7, #8]
 8000640:	4b28      	ldr	r3, [pc, #160]	@ (80006e4 <SystemClock_Config+0xcc>)
 8000642:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000644:	4a27      	ldr	r2, [pc, #156]	@ (80006e4 <SystemClock_Config+0xcc>)
 8000646:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800064a:	6413      	str	r3, [r2, #64]	@ 0x40
 800064c:	4b25      	ldr	r3, [pc, #148]	@ (80006e4 <SystemClock_Config+0xcc>)
 800064e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000650:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000654:	60bb      	str	r3, [r7, #8]
 8000656:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000658:	2300      	movs	r3, #0
 800065a:	607b      	str	r3, [r7, #4]
 800065c:	4b22      	ldr	r3, [pc, #136]	@ (80006e8 <SystemClock_Config+0xd0>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	4a21      	ldr	r2, [pc, #132]	@ (80006e8 <SystemClock_Config+0xd0>)
 8000662:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000666:	6013      	str	r3, [r2, #0]
 8000668:	4b1f      	ldr	r3, [pc, #124]	@ (80006e8 <SystemClock_Config+0xd0>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000670:	607b      	str	r3, [r7, #4]
 8000672:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000674:	2301      	movs	r3, #1
 8000676:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000678:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800067c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800067e:	2302      	movs	r3, #2
 8000680:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000682:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000686:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000688:	2304      	movs	r3, #4
 800068a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800068c:	23a8      	movs	r3, #168	@ 0xa8
 800068e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000690:	2302      	movs	r3, #2
 8000692:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000694:	2307      	movs	r3, #7
 8000696:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000698:	f107 0320 	add.w	r3, r7, #32
 800069c:	4618      	mov	r0, r3
 800069e:	f002 f867 	bl	8002770 <HAL_RCC_OscConfig>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006a8:	f000 f9a7 	bl	80009fa <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ac:	230f      	movs	r3, #15
 80006ae:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b0:	2302      	movs	r3, #2
 80006b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80006b4:	2380      	movs	r3, #128	@ 0x80
 80006b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006bc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006be:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006c2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006c4:	f107 030c 	add.w	r3, r7, #12
 80006c8:	2102      	movs	r1, #2
 80006ca:	4618      	mov	r0, r3
 80006cc:	f002 fac8 	bl	8002c60 <HAL_RCC_ClockConfig>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006d6:	f000 f990 	bl	80009fa <Error_Handler>
  }
}
 80006da:	bf00      	nop
 80006dc:	3750      	adds	r7, #80	@ 0x50
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	40023800 	.word	0x40023800
 80006e8:	40007000 	.word	0x40007000

080006ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b088      	sub	sp, #32
 80006f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f2:	f107 030c 	add.w	r3, r7, #12
 80006f6:	2200      	movs	r2, #0
 80006f8:	601a      	str	r2, [r3, #0]
 80006fa:	605a      	str	r2, [r3, #4]
 80006fc:	609a      	str	r2, [r3, #8]
 80006fe:	60da      	str	r2, [r3, #12]
 8000700:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000702:	2300      	movs	r3, #0
 8000704:	60bb      	str	r3, [r7, #8]
 8000706:	4b2b      	ldr	r3, [pc, #172]	@ (80007b4 <MX_GPIO_Init+0xc8>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800070a:	4a2a      	ldr	r2, [pc, #168]	@ (80007b4 <MX_GPIO_Init+0xc8>)
 800070c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000710:	6313      	str	r3, [r2, #48]	@ 0x30
 8000712:	4b28      	ldr	r3, [pc, #160]	@ (80007b4 <MX_GPIO_Init+0xc8>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000716:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800071a:	60bb      	str	r3, [r7, #8]
 800071c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800071e:	2300      	movs	r3, #0
 8000720:	607b      	str	r3, [r7, #4]
 8000722:	4b24      	ldr	r3, [pc, #144]	@ (80007b4 <MX_GPIO_Init+0xc8>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000726:	4a23      	ldr	r2, [pc, #140]	@ (80007b4 <MX_GPIO_Init+0xc8>)
 8000728:	f043 0301 	orr.w	r3, r3, #1
 800072c:	6313      	str	r3, [r2, #48]	@ 0x30
 800072e:	4b21      	ldr	r3, [pc, #132]	@ (80007b4 <MX_GPIO_Init+0xc8>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000732:	f003 0301 	and.w	r3, r3, #1
 8000736:	607b      	str	r3, [r7, #4]
 8000738:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800073a:	2300      	movs	r3, #0
 800073c:	603b      	str	r3, [r7, #0]
 800073e:	4b1d      	ldr	r3, [pc, #116]	@ (80007b4 <MX_GPIO_Init+0xc8>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000742:	4a1c      	ldr	r2, [pc, #112]	@ (80007b4 <MX_GPIO_Init+0xc8>)
 8000744:	f043 0308 	orr.w	r3, r3, #8
 8000748:	6313      	str	r3, [r2, #48]	@ 0x30
 800074a:	4b1a      	ldr	r3, [pc, #104]	@ (80007b4 <MX_GPIO_Init+0xc8>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800074e:	f003 0308 	and.w	r3, r3, #8
 8000752:	603b      	str	r3, [r7, #0]
 8000754:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000756:	2200      	movs	r2, #0
 8000758:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 800075c:	4816      	ldr	r0, [pc, #88]	@ (80007b8 <MX_GPIO_Init+0xcc>)
 800075e:	f000 fd69 	bl	8001234 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000762:	2301      	movs	r3, #1
 8000764:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000766:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800076a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800076c:	2302      	movs	r3, #2
 800076e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000770:	f107 030c 	add.w	r3, r7, #12
 8000774:	4619      	mov	r1, r3
 8000776:	4811      	ldr	r0, [pc, #68]	@ (80007bc <MX_GPIO_Init+0xd0>)
 8000778:	f000 fba8 	bl	8000ecc <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800077c:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000780:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000782:	2301      	movs	r3, #1
 8000784:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000786:	2300      	movs	r3, #0
 8000788:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800078a:	2300      	movs	r3, #0
 800078c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800078e:	f107 030c 	add.w	r3, r7, #12
 8000792:	4619      	mov	r1, r3
 8000794:	4808      	ldr	r0, [pc, #32]	@ (80007b8 <MX_GPIO_Init+0xcc>)
 8000796:	f000 fb99 	bl	8000ecc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 800079a:	2200      	movs	r2, #0
 800079c:	2105      	movs	r1, #5
 800079e:	2006      	movs	r0, #6
 80007a0:	f000 fb6a 	bl	8000e78 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80007a4:	2006      	movs	r0, #6
 80007a6:	f000 fb83 	bl	8000eb0 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007aa:	bf00      	nop
 80007ac:	3720      	adds	r7, #32
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	40023800 	.word	0x40023800
 80007b8:	40020c00 	.word	0x40020c00
 80007bc:	40020000 	.word	0x40020000

080007c0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b084      	sub	sp, #16
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	4603      	mov	r3, r0
 80007c8:	80fb      	strh	r3, [r7, #6]
	while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0));
 80007ca:	bf00      	nop
 80007cc:	2101      	movs	r1, #1
 80007ce:	4811      	ldr	r0, [pc, #68]	@ (8000814 <HAL_GPIO_EXTI_Callback+0x54>)
 80007d0:	f000 fd18 	bl	8001204 <HAL_GPIO_ReadPin>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d1f8      	bne.n	80007cc <HAL_GPIO_EXTI_Callback+0xc>

	if (GPIO_Pin == GPIO_PIN_0)
 80007da:	88fb      	ldrh	r3, [r7, #6]
 80007dc:	2b01      	cmp	r3, #1
 80007de:	d114      	bne.n	800080a <HAL_GPIO_EXTI_Callback+0x4a>
	{
		BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80007e0:	2300      	movs	r3, #0
 80007e2:	60fb      	str	r3, [r7, #12]

		// Release (give) the semaphore from ISR
		xSemaphoreGiveFromISR(myMutex02Handle, &xHigherPriorityTaskWoken);
 80007e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000818 <HAL_GPIO_EXTI_Callback+0x58>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	f107 020c 	add.w	r2, r7, #12
 80007ec:	4611      	mov	r1, r2
 80007ee:	4618      	mov	r0, r3
 80007f0:	f006 fe2a 	bl	8007448 <xQueueGiveFromISR>

		// Perform a context switch if needed
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d007      	beq.n	800080a <HAL_GPIO_EXTI_Callback+0x4a>
 80007fa:	4b08      	ldr	r3, [pc, #32]	@ (800081c <HAL_GPIO_EXTI_Callback+0x5c>)
 80007fc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000800:	601a      	str	r2, [r3, #0]
 8000802:	f3bf 8f4f 	dsb	sy
 8000806:	f3bf 8f6f 	isb	sy
	}
}
 800080a:	bf00      	nop
 800080c:	3710      	adds	r7, #16
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	40020000 	.word	0x40020000
 8000818:	20000420 	.word	0x20000420
 800081c:	e000ed04 	.word	0xe000ed04

08000820 <StartTask1>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask1 */
void StartTask1(void const * argument)
{
 8000820:	b5b0      	push	{r4, r5, r7, lr}
 8000822:	b08c      	sub	sp, #48	@ 0x30
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000828:	f008 fd1e 	bl	8009268 <MX_USB_DEVICE_Init>


  /* Infinite loop */
  for(;;)
  {
	  if(xSemaphoreTake(myMutex01Handle,portMAX_DELAY) == pdTRUE)
 800082c:	4b1f      	ldr	r3, [pc, #124]	@ (80008ac <StartTask1+0x8c>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	f04f 31ff 	mov.w	r1, #4294967295
 8000834:	4618      	mov	r0, r3
 8000836:	f006 fe97 	bl	8007568 <xQueueSemaphoreTake>
 800083a:	4603      	mov	r3, r0
 800083c:	2b01      	cmp	r3, #1
 800083e:	d130      	bne.n	80008a2 <StartTask1+0x82>
	  {
		  if(control == 1)
 8000840:	4b1b      	ldr	r3, [pc, #108]	@ (80008b0 <StartTask1+0x90>)
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	b2db      	uxtb	r3, r3
 8000846:	2b01      	cmp	r3, #1
 8000848:	d108      	bne.n	800085c <StartTask1+0x3c>
		  {
			  HAL_Delay(1000);
 800084a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800084e:	f000 fa37 	bl	8000cc0 <HAL_Delay>
			  HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_14);
 8000852:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000856:	4817      	ldr	r0, [pc, #92]	@ (80008b4 <StartTask1+0x94>)
 8000858:	f000 fd05 	bl	8001266 <HAL_GPIO_TogglePin>
		  }

		  char str1[] = "Entered Task1 and toggling led!\n";
 800085c:	4b16      	ldr	r3, [pc, #88]	@ (80008b8 <StartTask1+0x98>)
 800085e:	f107 040c 	add.w	r4, r7, #12
 8000862:	461d      	mov	r5, r3
 8000864:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000866:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000868:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800086a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800086c:	682b      	ldr	r3, [r5, #0]
 800086e:	7023      	strb	r3, [r4, #0]
		  CDC_Transmit_FS((uint8_t *)str1, strlen(str1));
 8000870:	f107 030c 	add.w	r3, r7, #12
 8000874:	4618      	mov	r0, r3
 8000876:	f7ff fcab 	bl	80001d0 <strlen>
 800087a:	4603      	mov	r3, r0
 800087c:	b29a      	uxth	r2, r3
 800087e:	f107 030c 	add.w	r3, r7, #12
 8000882:	4611      	mov	r1, r2
 8000884:	4618      	mov	r0, r3
 8000886:	f008 fdad 	bl	80093e4 <CDC_Transmit_FS>

		  HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_12);
 800088a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800088e:	4809      	ldr	r0, [pc, #36]	@ (80008b4 <StartTask1+0x94>)
 8000890:	f000 fce9 	bl	8001266 <HAL_GPIO_TogglePin>
		  xSemaphoreGive(myMutex01Handle);
 8000894:	4b05      	ldr	r3, [pc, #20]	@ (80008ac <StartTask1+0x8c>)
 8000896:	6818      	ldr	r0, [r3, #0]
 8000898:	2300      	movs	r3, #0
 800089a:	2200      	movs	r2, #0
 800089c:	2100      	movs	r1, #0
 800089e:	f006 fcd1 	bl	8007244 <xQueueGenericSend>


	  }
	  vTaskDelay(3000);
 80008a2:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80008a6:	f007 fa21 	bl	8007cec <vTaskDelay>
	  if(xSemaphoreTake(myMutex01Handle,portMAX_DELAY) == pdTRUE)
 80008aa:	e7bf      	b.n	800082c <StartTask1+0xc>
 80008ac:	2000041c 	.word	0x2000041c
 80008b0:	2000040c 	.word	0x2000040c
 80008b4:	40020c00 	.word	0x40020c00
 80008b8:	08009ef4 	.word	0x08009ef4

080008bc <StartTask2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask2 */
void StartTask2(void const * argument)
{
 80008bc:	b5b0      	push	{r4, r5, r7, lr}
 80008be:	b08c      	sub	sp, #48	@ 0x30
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask2 */
  /* Infinite loop */
  for(;;)
  {
	  if(xSemaphoreTake(myMutex01Handle,portMAX_DELAY) == pdTRUE)
 80008c4:	4b1d      	ldr	r3, [pc, #116]	@ (800093c <StartTask2+0x80>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	f04f 31ff 	mov.w	r1, #4294967295
 80008cc:	4618      	mov	r0, r3
 80008ce:	f006 fe4b 	bl	8007568 <xQueueSemaphoreTake>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b01      	cmp	r3, #1
 80008d6:	d12b      	bne.n	8000930 <StartTask2+0x74>
	  {
		  HAL_Delay(1000);
 80008d8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80008dc:	f000 f9f0 	bl	8000cc0 <HAL_Delay>
		  HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_12);
 80008e0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80008e4:	4816      	ldr	r0, [pc, #88]	@ (8000940 <StartTask2+0x84>)
 80008e6:	f000 fcbe 	bl	8001266 <HAL_GPIO_TogglePin>

		  char str2[] = "Entered Task2 and toggling led!\n";
 80008ea:	4b16      	ldr	r3, [pc, #88]	@ (8000944 <StartTask2+0x88>)
 80008ec:	f107 040c 	add.w	r4, r7, #12
 80008f0:	461d      	mov	r5, r3
 80008f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008fa:	682b      	ldr	r3, [r5, #0]
 80008fc:	7023      	strb	r3, [r4, #0]
		  CDC_Transmit_FS((uint8_t *)str2, strlen(str2));
 80008fe:	f107 030c 	add.w	r3, r7, #12
 8000902:	4618      	mov	r0, r3
 8000904:	f7ff fc64 	bl	80001d0 <strlen>
 8000908:	4603      	mov	r3, r0
 800090a:	b29a      	uxth	r2, r3
 800090c:	f107 030c 	add.w	r3, r7, #12
 8000910:	4611      	mov	r1, r2
 8000912:	4618      	mov	r0, r3
 8000914:	f008 fd66 	bl	80093e4 <CDC_Transmit_FS>

		  HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_13);
 8000918:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800091c:	4808      	ldr	r0, [pc, #32]	@ (8000940 <StartTask2+0x84>)
 800091e:	f000 fca2 	bl	8001266 <HAL_GPIO_TogglePin>

		  xSemaphoreGive(myMutex01Handle);
 8000922:	4b06      	ldr	r3, [pc, #24]	@ (800093c <StartTask2+0x80>)
 8000924:	6818      	ldr	r0, [r3, #0]
 8000926:	2300      	movs	r3, #0
 8000928:	2200      	movs	r2, #0
 800092a:	2100      	movs	r1, #0
 800092c:	f006 fc8a 	bl	8007244 <xQueueGenericSend>
	  }
	  vTaskDelay(3000);
 8000930:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000934:	f007 f9da 	bl	8007cec <vTaskDelay>
	  if(xSemaphoreTake(myMutex01Handle,portMAX_DELAY) == pdTRUE)
 8000938:	e7c4      	b.n	80008c4 <StartTask2+0x8>
 800093a:	bf00      	nop
 800093c:	2000041c 	.word	0x2000041c
 8000940:	40020c00 	.word	0x40020c00
 8000944:	08009f18 	.word	0x08009f18

08000948 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void const * argument)
{
 8000948:	b5b0      	push	{r4, r5, r7, lr}
 800094a:	b08c      	sub	sp, #48	@ 0x30
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
    if(xSemaphoreTake(myMutex01Handle,portMAX_DELAY) == pdTRUE)
 8000950:	4b1e      	ldr	r3, [pc, #120]	@ (80009cc <StartTask03+0x84>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	f04f 31ff 	mov.w	r1, #4294967295
 8000958:	4618      	mov	r0, r3
 800095a:	f006 fe05 	bl	8007568 <xQueueSemaphoreTake>
 800095e:	4603      	mov	r3, r0
 8000960:	2b01      	cmp	r3, #1
 8000962:	d12e      	bne.n	80009c2 <StartTask03+0x7a>
    {
    	HAL_Delay(1000);
 8000964:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000968:	f000 f9aa 	bl	8000cc0 <HAL_Delay>
    	HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_13);
 800096c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000970:	4817      	ldr	r0, [pc, #92]	@ (80009d0 <StartTask03+0x88>)
 8000972:	f000 fc78 	bl	8001266 <HAL_GPIO_TogglePin>

    	char str3[] = "Entered Task3 and toggling led!\n";
 8000976:	4b17      	ldr	r3, [pc, #92]	@ (80009d4 <StartTask03+0x8c>)
 8000978:	f107 040c 	add.w	r4, r7, #12
 800097c:	461d      	mov	r5, r3
 800097e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000980:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000982:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000984:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000986:	682b      	ldr	r3, [r5, #0]
 8000988:	7023      	strb	r3, [r4, #0]
    	CDC_Transmit_FS((uint8_t *)str3,strlen(str3));
 800098a:	f107 030c 	add.w	r3, r7, #12
 800098e:	4618      	mov	r0, r3
 8000990:	f7ff fc1e 	bl	80001d0 <strlen>
 8000994:	4603      	mov	r3, r0
 8000996:	b29a      	uxth	r2, r3
 8000998:	f107 030c 	add.w	r3, r7, #12
 800099c:	4611      	mov	r1, r2
 800099e:	4618      	mov	r0, r3
 80009a0:	f008 fd20 	bl	80093e4 <CDC_Transmit_FS>

    	HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_14);
 80009a4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80009a8:	4809      	ldr	r0, [pc, #36]	@ (80009d0 <StartTask03+0x88>)
 80009aa:	f000 fc5c 	bl	8001266 <HAL_GPIO_TogglePin>

    	control = 1;
 80009ae:	4b0a      	ldr	r3, [pc, #40]	@ (80009d8 <StartTask03+0x90>)
 80009b0:	2201      	movs	r2, #1
 80009b2:	701a      	strb	r2, [r3, #0]
    	xSemaphoreGive(myMutex01Handle);
 80009b4:	4b05      	ldr	r3, [pc, #20]	@ (80009cc <StartTask03+0x84>)
 80009b6:	6818      	ldr	r0, [r3, #0]
 80009b8:	2300      	movs	r3, #0
 80009ba:	2200      	movs	r2, #0
 80009bc:	2100      	movs	r1, #0
 80009be:	f006 fc41 	bl	8007244 <xQueueGenericSend>
    }
    vTaskDelay(3000);
 80009c2:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80009c6:	f007 f991 	bl	8007cec <vTaskDelay>
    if(xSemaphoreTake(myMutex01Handle,portMAX_DELAY) == pdTRUE)
 80009ca:	e7c1      	b.n	8000950 <StartTask03+0x8>
 80009cc:	2000041c 	.word	0x2000041c
 80009d0:	40020c00 	.word	0x40020c00
 80009d4:	08009f3c 	.word	0x08009f3c
 80009d8:	2000040c 	.word	0x2000040c

080009dc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80009ec:	d101      	bne.n	80009f2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80009ee:	f000 f947 	bl	8000c80 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80009f2:	bf00      	nop
 80009f4:	3708      	adds	r7, #8
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}

080009fa <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009fa:	b480      	push	{r7}
 80009fc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009fe:	b672      	cpsid	i
}
 8000a00:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a02:	bf00      	nop
 8000a04:	e7fd      	b.n	8000a02 <Error_Handler+0x8>
	...

08000a08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a0e:	2300      	movs	r3, #0
 8000a10:	607b      	str	r3, [r7, #4]
 8000a12:	4b12      	ldr	r3, [pc, #72]	@ (8000a5c <HAL_MspInit+0x54>)
 8000a14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a16:	4a11      	ldr	r2, [pc, #68]	@ (8000a5c <HAL_MspInit+0x54>)
 8000a18:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a1c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a1e:	4b0f      	ldr	r3, [pc, #60]	@ (8000a5c <HAL_MspInit+0x54>)
 8000a20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a22:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a26:	607b      	str	r3, [r7, #4]
 8000a28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	603b      	str	r3, [r7, #0]
 8000a2e:	4b0b      	ldr	r3, [pc, #44]	@ (8000a5c <HAL_MspInit+0x54>)
 8000a30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a32:	4a0a      	ldr	r2, [pc, #40]	@ (8000a5c <HAL_MspInit+0x54>)
 8000a34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a38:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a3a:	4b08      	ldr	r3, [pc, #32]	@ (8000a5c <HAL_MspInit+0x54>)
 8000a3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a42:	603b      	str	r3, [r7, #0]
 8000a44:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a46:	2200      	movs	r2, #0
 8000a48:	210f      	movs	r1, #15
 8000a4a:	f06f 0001 	mvn.w	r0, #1
 8000a4e:	f000 fa13 	bl	8000e78 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a52:	bf00      	nop
 8000a54:	3708      	adds	r7, #8
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	40023800 	.word	0x40023800

08000a60 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b08e      	sub	sp, #56	@ 0x38
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8000a70:	2300      	movs	r3, #0
 8000a72:	60fb      	str	r3, [r7, #12]
 8000a74:	4b34      	ldr	r3, [pc, #208]	@ (8000b48 <HAL_InitTick+0xe8>)
 8000a76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a78:	4a33      	ldr	r2, [pc, #204]	@ (8000b48 <HAL_InitTick+0xe8>)
 8000a7a:	f043 0301 	orr.w	r3, r3, #1
 8000a7e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a80:	4b31      	ldr	r3, [pc, #196]	@ (8000b48 <HAL_InitTick+0xe8>)
 8000a82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a84:	f003 0301 	and.w	r3, r3, #1
 8000a88:	60fb      	str	r3, [r7, #12]
 8000a8a:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a8c:	f107 0210 	add.w	r2, r7, #16
 8000a90:	f107 0314 	add.w	r3, r7, #20
 8000a94:	4611      	mov	r1, r2
 8000a96:	4618      	mov	r0, r3
 8000a98:	f002 faee 	bl	8003078 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000a9c:	6a3b      	ldr	r3, [r7, #32]
 8000a9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000aa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d103      	bne.n	8000aae <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000aa6:	f002 fad3 	bl	8003050 <HAL_RCC_GetPCLK1Freq>
 8000aaa:	6378      	str	r0, [r7, #52]	@ 0x34
 8000aac:	e004      	b.n	8000ab8 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000aae:	f002 facf 	bl	8003050 <HAL_RCC_GetPCLK1Freq>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	005b      	lsls	r3, r3, #1
 8000ab6:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ab8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000aba:	4a24      	ldr	r2, [pc, #144]	@ (8000b4c <HAL_InitTick+0xec>)
 8000abc:	fba2 2303 	umull	r2, r3, r2, r3
 8000ac0:	0c9b      	lsrs	r3, r3, #18
 8000ac2:	3b01      	subs	r3, #1
 8000ac4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8000ac6:	4b22      	ldr	r3, [pc, #136]	@ (8000b50 <HAL_InitTick+0xf0>)
 8000ac8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000acc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8000ace:	4b20      	ldr	r3, [pc, #128]	@ (8000b50 <HAL_InitTick+0xf0>)
 8000ad0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000ad4:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8000ad6:	4a1e      	ldr	r2, [pc, #120]	@ (8000b50 <HAL_InitTick+0xf0>)
 8000ad8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ada:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8000adc:	4b1c      	ldr	r3, [pc, #112]	@ (8000b50 <HAL_InitTick+0xf0>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ae2:	4b1b      	ldr	r3, [pc, #108]	@ (8000b50 <HAL_InitTick+0xf0>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ae8:	4b19      	ldr	r3, [pc, #100]	@ (8000b50 <HAL_InitTick+0xf0>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8000aee:	4818      	ldr	r0, [pc, #96]	@ (8000b50 <HAL_InitTick+0xf0>)
 8000af0:	f002 faf4 	bl	80030dc <HAL_TIM_Base_Init>
 8000af4:	4603      	mov	r3, r0
 8000af6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000afa:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d11b      	bne.n	8000b3a <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8000b02:	4813      	ldr	r0, [pc, #76]	@ (8000b50 <HAL_InitTick+0xf0>)
 8000b04:	f002 fb44 	bl	8003190 <HAL_TIM_Base_Start_IT>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000b0e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d111      	bne.n	8000b3a <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000b16:	201c      	movs	r0, #28
 8000b18:	f000 f9ca 	bl	8000eb0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	2b0f      	cmp	r3, #15
 8000b20:	d808      	bhi.n	8000b34 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8000b22:	2200      	movs	r2, #0
 8000b24:	6879      	ldr	r1, [r7, #4]
 8000b26:	201c      	movs	r0, #28
 8000b28:	f000 f9a6 	bl	8000e78 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b2c:	4a09      	ldr	r2, [pc, #36]	@ (8000b54 <HAL_InitTick+0xf4>)
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	6013      	str	r3, [r2, #0]
 8000b32:	e002      	b.n	8000b3a <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8000b34:	2301      	movs	r3, #1
 8000b36:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000b3a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	3738      	adds	r7, #56	@ 0x38
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	40023800 	.word	0x40023800
 8000b4c:	431bde83 	.word	0x431bde83
 8000b50:	2000042c 	.word	0x2000042c
 8000b54:	20000004 	.word	0x20000004

08000b58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b5c:	bf00      	nop
 8000b5e:	e7fd      	b.n	8000b5c <NMI_Handler+0x4>

08000b60 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b64:	bf00      	nop
 8000b66:	e7fd      	b.n	8000b64 <HardFault_Handler+0x4>

08000b68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b6c:	bf00      	nop
 8000b6e:	e7fd      	b.n	8000b6c <MemManage_Handler+0x4>

08000b70 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b74:	bf00      	nop
 8000b76:	e7fd      	b.n	8000b74 <BusFault_Handler+0x4>

08000b78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b7c:	bf00      	nop
 8000b7e:	e7fd      	b.n	8000b7c <UsageFault_Handler+0x4>

08000b80 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b84:	bf00      	nop
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr

08000b8e <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000b8e:	b580      	push	{r7, lr}
 8000b90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000b92:	2001      	movs	r0, #1
 8000b94:	f000 fb82 	bl	800129c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000b98:	bf00      	nop
 8000b9a:	bd80      	pop	{r7, pc}

08000b9c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000ba0:	4802      	ldr	r0, [pc, #8]	@ (8000bac <TIM2_IRQHandler+0x10>)
 8000ba2:	f002 fb65 	bl	8003270 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000ba6:	bf00      	nop
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	2000042c 	.word	0x2000042c

08000bb0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000bb4:	4802      	ldr	r0, [pc, #8]	@ (8000bc0 <OTG_FS_IRQHandler+0x10>)
 8000bb6:	f000 fccd 	bl	8001554 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000bba:	bf00      	nop
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	20005544 	.word	0x20005544

08000bc4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bc8:	4b06      	ldr	r3, [pc, #24]	@ (8000be4 <SystemInit+0x20>)
 8000bca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000bce:	4a05      	ldr	r2, [pc, #20]	@ (8000be4 <SystemInit+0x20>)
 8000bd0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000bd4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bd8:	bf00      	nop
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop
 8000be4:	e000ed00 	.word	0xe000ed00

08000be8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000be8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c20 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bec:	480d      	ldr	r0, [pc, #52]	@ (8000c24 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000bee:	490e      	ldr	r1, [pc, #56]	@ (8000c28 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000bf0:	4a0e      	ldr	r2, [pc, #56]	@ (8000c2c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bf2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bf4:	e002      	b.n	8000bfc <LoopCopyDataInit>

08000bf6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bf6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bf8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bfa:	3304      	adds	r3, #4

08000bfc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bfc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bfe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c00:	d3f9      	bcc.n	8000bf6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c02:	4a0b      	ldr	r2, [pc, #44]	@ (8000c30 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c04:	4c0b      	ldr	r4, [pc, #44]	@ (8000c34 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c08:	e001      	b.n	8000c0e <LoopFillZerobss>

08000c0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c0c:	3204      	adds	r2, #4

08000c0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c10:	d3fb      	bcc.n	8000c0a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c12:	f7ff ffd7 	bl	8000bc4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c16:	f009 f89f 	bl	8009d58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c1a:	f7ff fc73 	bl	8000504 <main>
  bx  lr    
 8000c1e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c20:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c28:	20000150 	.word	0x20000150
  ldr r2, =_sidata
 8000c2c:	08009fd4 	.word	0x08009fd4
  ldr r2, =_sbss
 8000c30:	20000150 	.word	0x20000150
  ldr r4, =_ebss
 8000c34:	20005d88 	.word	0x20005d88

08000c38 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c38:	e7fe      	b.n	8000c38 <ADC_IRQHandler>
	...

08000c3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c40:	4b0e      	ldr	r3, [pc, #56]	@ (8000c7c <HAL_Init+0x40>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a0d      	ldr	r2, [pc, #52]	@ (8000c7c <HAL_Init+0x40>)
 8000c46:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c4a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c4c:	4b0b      	ldr	r3, [pc, #44]	@ (8000c7c <HAL_Init+0x40>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4a0a      	ldr	r2, [pc, #40]	@ (8000c7c <HAL_Init+0x40>)
 8000c52:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000c56:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c58:	4b08      	ldr	r3, [pc, #32]	@ (8000c7c <HAL_Init+0x40>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a07      	ldr	r2, [pc, #28]	@ (8000c7c <HAL_Init+0x40>)
 8000c5e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c64:	2003      	movs	r0, #3
 8000c66:	f000 f8fc 	bl	8000e62 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c6a:	200f      	movs	r0, #15
 8000c6c:	f7ff fef8 	bl	8000a60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c70:	f7ff feca 	bl	8000a08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c74:	2300      	movs	r3, #0
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	40023c00 	.word	0x40023c00

08000c80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c84:	4b06      	ldr	r3, [pc, #24]	@ (8000ca0 <HAL_IncTick+0x20>)
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	461a      	mov	r2, r3
 8000c8a:	4b06      	ldr	r3, [pc, #24]	@ (8000ca4 <HAL_IncTick+0x24>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	4413      	add	r3, r2
 8000c90:	4a04      	ldr	r2, [pc, #16]	@ (8000ca4 <HAL_IncTick+0x24>)
 8000c92:	6013      	str	r3, [r2, #0]
}
 8000c94:	bf00      	nop
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop
 8000ca0:	20000008 	.word	0x20000008
 8000ca4:	20000474 	.word	0x20000474

08000ca8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  return uwTick;
 8000cac:	4b03      	ldr	r3, [pc, #12]	@ (8000cbc <HAL_GetTick+0x14>)
 8000cae:	681b      	ldr	r3, [r3, #0]
}
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	20000474 	.word	0x20000474

08000cc0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b084      	sub	sp, #16
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cc8:	f7ff ffee 	bl	8000ca8 <HAL_GetTick>
 8000ccc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cd8:	d005      	beq.n	8000ce6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cda:	4b0a      	ldr	r3, [pc, #40]	@ (8000d04 <HAL_Delay+0x44>)
 8000cdc:	781b      	ldrb	r3, [r3, #0]
 8000cde:	461a      	mov	r2, r3
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	4413      	add	r3, r2
 8000ce4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ce6:	bf00      	nop
 8000ce8:	f7ff ffde 	bl	8000ca8 <HAL_GetTick>
 8000cec:	4602      	mov	r2, r0
 8000cee:	68bb      	ldr	r3, [r7, #8]
 8000cf0:	1ad3      	subs	r3, r2, r3
 8000cf2:	68fa      	ldr	r2, [r7, #12]
 8000cf4:	429a      	cmp	r2, r3
 8000cf6:	d8f7      	bhi.n	8000ce8 <HAL_Delay+0x28>
  {
  }
}
 8000cf8:	bf00      	nop
 8000cfa:	bf00      	nop
 8000cfc:	3710      	adds	r7, #16
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	20000008 	.word	0x20000008

08000d08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b085      	sub	sp, #20
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	f003 0307 	and.w	r3, r3, #7
 8000d16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d18:	4b0c      	ldr	r3, [pc, #48]	@ (8000d4c <__NVIC_SetPriorityGrouping+0x44>)
 8000d1a:	68db      	ldr	r3, [r3, #12]
 8000d1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d1e:	68ba      	ldr	r2, [r7, #8]
 8000d20:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d24:	4013      	ands	r3, r2
 8000d26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d2c:	68bb      	ldr	r3, [r7, #8]
 8000d2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d30:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d34:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d3a:	4a04      	ldr	r2, [pc, #16]	@ (8000d4c <__NVIC_SetPriorityGrouping+0x44>)
 8000d3c:	68bb      	ldr	r3, [r7, #8]
 8000d3e:	60d3      	str	r3, [r2, #12]
}
 8000d40:	bf00      	nop
 8000d42:	3714      	adds	r7, #20
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr
 8000d4c:	e000ed00 	.word	0xe000ed00

08000d50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d54:	4b04      	ldr	r3, [pc, #16]	@ (8000d68 <__NVIC_GetPriorityGrouping+0x18>)
 8000d56:	68db      	ldr	r3, [r3, #12]
 8000d58:	0a1b      	lsrs	r3, r3, #8
 8000d5a:	f003 0307 	and.w	r3, r3, #7
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr
 8000d68:	e000ed00 	.word	0xe000ed00

08000d6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b083      	sub	sp, #12
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	4603      	mov	r3, r0
 8000d74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	db0b      	blt.n	8000d96 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d7e:	79fb      	ldrb	r3, [r7, #7]
 8000d80:	f003 021f 	and.w	r2, r3, #31
 8000d84:	4907      	ldr	r1, [pc, #28]	@ (8000da4 <__NVIC_EnableIRQ+0x38>)
 8000d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8a:	095b      	lsrs	r3, r3, #5
 8000d8c:	2001      	movs	r0, #1
 8000d8e:	fa00 f202 	lsl.w	r2, r0, r2
 8000d92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d96:	bf00      	nop
 8000d98:	370c      	adds	r7, #12
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop
 8000da4:	e000e100 	.word	0xe000e100

08000da8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b083      	sub	sp, #12
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	4603      	mov	r3, r0
 8000db0:	6039      	str	r1, [r7, #0]
 8000db2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000db4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	db0a      	blt.n	8000dd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	b2da      	uxtb	r2, r3
 8000dc0:	490c      	ldr	r1, [pc, #48]	@ (8000df4 <__NVIC_SetPriority+0x4c>)
 8000dc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc6:	0112      	lsls	r2, r2, #4
 8000dc8:	b2d2      	uxtb	r2, r2
 8000dca:	440b      	add	r3, r1
 8000dcc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dd0:	e00a      	b.n	8000de8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	b2da      	uxtb	r2, r3
 8000dd6:	4908      	ldr	r1, [pc, #32]	@ (8000df8 <__NVIC_SetPriority+0x50>)
 8000dd8:	79fb      	ldrb	r3, [r7, #7]
 8000dda:	f003 030f 	and.w	r3, r3, #15
 8000dde:	3b04      	subs	r3, #4
 8000de0:	0112      	lsls	r2, r2, #4
 8000de2:	b2d2      	uxtb	r2, r2
 8000de4:	440b      	add	r3, r1
 8000de6:	761a      	strb	r2, [r3, #24]
}
 8000de8:	bf00      	nop
 8000dea:	370c      	adds	r7, #12
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr
 8000df4:	e000e100 	.word	0xe000e100
 8000df8:	e000ed00 	.word	0xe000ed00

08000dfc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b089      	sub	sp, #36	@ 0x24
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	60f8      	str	r0, [r7, #12]
 8000e04:	60b9      	str	r1, [r7, #8]
 8000e06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	f003 0307 	and.w	r3, r3, #7
 8000e0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e10:	69fb      	ldr	r3, [r7, #28]
 8000e12:	f1c3 0307 	rsb	r3, r3, #7
 8000e16:	2b04      	cmp	r3, #4
 8000e18:	bf28      	it	cs
 8000e1a:	2304      	movcs	r3, #4
 8000e1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e1e:	69fb      	ldr	r3, [r7, #28]
 8000e20:	3304      	adds	r3, #4
 8000e22:	2b06      	cmp	r3, #6
 8000e24:	d902      	bls.n	8000e2c <NVIC_EncodePriority+0x30>
 8000e26:	69fb      	ldr	r3, [r7, #28]
 8000e28:	3b03      	subs	r3, #3
 8000e2a:	e000      	b.n	8000e2e <NVIC_EncodePriority+0x32>
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e30:	f04f 32ff 	mov.w	r2, #4294967295
 8000e34:	69bb      	ldr	r3, [r7, #24]
 8000e36:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3a:	43da      	mvns	r2, r3
 8000e3c:	68bb      	ldr	r3, [r7, #8]
 8000e3e:	401a      	ands	r2, r3
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e44:	f04f 31ff 	mov.w	r1, #4294967295
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e4e:	43d9      	mvns	r1, r3
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e54:	4313      	orrs	r3, r2
         );
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	3724      	adds	r7, #36	@ 0x24
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr

08000e62 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e62:	b580      	push	{r7, lr}
 8000e64:	b082      	sub	sp, #8
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e6a:	6878      	ldr	r0, [r7, #4]
 8000e6c:	f7ff ff4c 	bl	8000d08 <__NVIC_SetPriorityGrouping>
}
 8000e70:	bf00      	nop
 8000e72:	3708      	adds	r7, #8
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}

08000e78 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b086      	sub	sp, #24
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	4603      	mov	r3, r0
 8000e80:	60b9      	str	r1, [r7, #8]
 8000e82:	607a      	str	r2, [r7, #4]
 8000e84:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e86:	2300      	movs	r3, #0
 8000e88:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e8a:	f7ff ff61 	bl	8000d50 <__NVIC_GetPriorityGrouping>
 8000e8e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e90:	687a      	ldr	r2, [r7, #4]
 8000e92:	68b9      	ldr	r1, [r7, #8]
 8000e94:	6978      	ldr	r0, [r7, #20]
 8000e96:	f7ff ffb1 	bl	8000dfc <NVIC_EncodePriority>
 8000e9a:	4602      	mov	r2, r0
 8000e9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ea0:	4611      	mov	r1, r2
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f7ff ff80 	bl	8000da8 <__NVIC_SetPriority>
}
 8000ea8:	bf00      	nop
 8000eaa:	3718      	adds	r7, #24
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}

08000eb0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000eba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f7ff ff54 	bl	8000d6c <__NVIC_EnableIRQ>
}
 8000ec4:	bf00      	nop
 8000ec6:	3708      	adds	r7, #8
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}

08000ecc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b089      	sub	sp, #36	@ 0x24
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
 8000ed4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000eda:	2300      	movs	r3, #0
 8000edc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	61fb      	str	r3, [r7, #28]
 8000ee6:	e16b      	b.n	80011c0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ee8:	2201      	movs	r2, #1
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	697a      	ldr	r2, [r7, #20]
 8000ef8:	4013      	ands	r3, r2
 8000efa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000efc:	693a      	ldr	r2, [r7, #16]
 8000efe:	697b      	ldr	r3, [r7, #20]
 8000f00:	429a      	cmp	r2, r3
 8000f02:	f040 815a 	bne.w	80011ba <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	f003 0303 	and.w	r3, r3, #3
 8000f0e:	2b01      	cmp	r3, #1
 8000f10:	d005      	beq.n	8000f1e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f1a:	2b02      	cmp	r3, #2
 8000f1c:	d130      	bne.n	8000f80 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	689b      	ldr	r3, [r3, #8]
 8000f22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f24:	69fb      	ldr	r3, [r7, #28]
 8000f26:	005b      	lsls	r3, r3, #1
 8000f28:	2203      	movs	r2, #3
 8000f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2e:	43db      	mvns	r3, r3
 8000f30:	69ba      	ldr	r2, [r7, #24]
 8000f32:	4013      	ands	r3, r2
 8000f34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	68da      	ldr	r2, [r3, #12]
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	005b      	lsls	r3, r3, #1
 8000f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f42:	69ba      	ldr	r2, [r7, #24]
 8000f44:	4313      	orrs	r3, r2
 8000f46:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	69ba      	ldr	r2, [r7, #24]
 8000f4c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	685b      	ldr	r3, [r3, #4]
 8000f52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f54:	2201      	movs	r2, #1
 8000f56:	69fb      	ldr	r3, [r7, #28]
 8000f58:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5c:	43db      	mvns	r3, r3
 8000f5e:	69ba      	ldr	r2, [r7, #24]
 8000f60:	4013      	ands	r3, r2
 8000f62:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	091b      	lsrs	r3, r3, #4
 8000f6a:	f003 0201 	and.w	r2, r3, #1
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	fa02 f303 	lsl.w	r3, r2, r3
 8000f74:	69ba      	ldr	r2, [r7, #24]
 8000f76:	4313      	orrs	r3, r2
 8000f78:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	69ba      	ldr	r2, [r7, #24]
 8000f7e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	f003 0303 	and.w	r3, r3, #3
 8000f88:	2b03      	cmp	r3, #3
 8000f8a:	d017      	beq.n	8000fbc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	68db      	ldr	r3, [r3, #12]
 8000f90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f92:	69fb      	ldr	r3, [r7, #28]
 8000f94:	005b      	lsls	r3, r3, #1
 8000f96:	2203      	movs	r2, #3
 8000f98:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9c:	43db      	mvns	r3, r3
 8000f9e:	69ba      	ldr	r2, [r7, #24]
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	689a      	ldr	r2, [r3, #8]
 8000fa8:	69fb      	ldr	r3, [r7, #28]
 8000faa:	005b      	lsls	r3, r3, #1
 8000fac:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb0:	69ba      	ldr	r2, [r7, #24]
 8000fb2:	4313      	orrs	r3, r2
 8000fb4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	69ba      	ldr	r2, [r7, #24]
 8000fba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	f003 0303 	and.w	r3, r3, #3
 8000fc4:	2b02      	cmp	r3, #2
 8000fc6:	d123      	bne.n	8001010 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fc8:	69fb      	ldr	r3, [r7, #28]
 8000fca:	08da      	lsrs	r2, r3, #3
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	3208      	adds	r2, #8
 8000fd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	f003 0307 	and.w	r3, r3, #7
 8000fdc:	009b      	lsls	r3, r3, #2
 8000fde:	220f      	movs	r2, #15
 8000fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe4:	43db      	mvns	r3, r3
 8000fe6:	69ba      	ldr	r2, [r7, #24]
 8000fe8:	4013      	ands	r3, r2
 8000fea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	691a      	ldr	r2, [r3, #16]
 8000ff0:	69fb      	ldr	r3, [r7, #28]
 8000ff2:	f003 0307 	and.w	r3, r3, #7
 8000ff6:	009b      	lsls	r3, r3, #2
 8000ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffc:	69ba      	ldr	r2, [r7, #24]
 8000ffe:	4313      	orrs	r3, r2
 8001000:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	08da      	lsrs	r2, r3, #3
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	3208      	adds	r2, #8
 800100a:	69b9      	ldr	r1, [r7, #24]
 800100c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001016:	69fb      	ldr	r3, [r7, #28]
 8001018:	005b      	lsls	r3, r3, #1
 800101a:	2203      	movs	r2, #3
 800101c:	fa02 f303 	lsl.w	r3, r2, r3
 8001020:	43db      	mvns	r3, r3
 8001022:	69ba      	ldr	r2, [r7, #24]
 8001024:	4013      	ands	r3, r2
 8001026:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	f003 0203 	and.w	r2, r3, #3
 8001030:	69fb      	ldr	r3, [r7, #28]
 8001032:	005b      	lsls	r3, r3, #1
 8001034:	fa02 f303 	lsl.w	r3, r2, r3
 8001038:	69ba      	ldr	r2, [r7, #24]
 800103a:	4313      	orrs	r3, r2
 800103c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	69ba      	ldr	r2, [r7, #24]
 8001042:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800104c:	2b00      	cmp	r3, #0
 800104e:	f000 80b4 	beq.w	80011ba <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001052:	2300      	movs	r3, #0
 8001054:	60fb      	str	r3, [r7, #12]
 8001056:	4b60      	ldr	r3, [pc, #384]	@ (80011d8 <HAL_GPIO_Init+0x30c>)
 8001058:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800105a:	4a5f      	ldr	r2, [pc, #380]	@ (80011d8 <HAL_GPIO_Init+0x30c>)
 800105c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001060:	6453      	str	r3, [r2, #68]	@ 0x44
 8001062:	4b5d      	ldr	r3, [pc, #372]	@ (80011d8 <HAL_GPIO_Init+0x30c>)
 8001064:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001066:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800106a:	60fb      	str	r3, [r7, #12]
 800106c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800106e:	4a5b      	ldr	r2, [pc, #364]	@ (80011dc <HAL_GPIO_Init+0x310>)
 8001070:	69fb      	ldr	r3, [r7, #28]
 8001072:	089b      	lsrs	r3, r3, #2
 8001074:	3302      	adds	r3, #2
 8001076:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800107a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800107c:	69fb      	ldr	r3, [r7, #28]
 800107e:	f003 0303 	and.w	r3, r3, #3
 8001082:	009b      	lsls	r3, r3, #2
 8001084:	220f      	movs	r2, #15
 8001086:	fa02 f303 	lsl.w	r3, r2, r3
 800108a:	43db      	mvns	r3, r3
 800108c:	69ba      	ldr	r2, [r7, #24]
 800108e:	4013      	ands	r3, r2
 8001090:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	4a52      	ldr	r2, [pc, #328]	@ (80011e0 <HAL_GPIO_Init+0x314>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d02b      	beq.n	80010f2 <HAL_GPIO_Init+0x226>
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4a51      	ldr	r2, [pc, #324]	@ (80011e4 <HAL_GPIO_Init+0x318>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d025      	beq.n	80010ee <HAL_GPIO_Init+0x222>
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	4a50      	ldr	r2, [pc, #320]	@ (80011e8 <HAL_GPIO_Init+0x31c>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d01f      	beq.n	80010ea <HAL_GPIO_Init+0x21e>
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4a4f      	ldr	r2, [pc, #316]	@ (80011ec <HAL_GPIO_Init+0x320>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d019      	beq.n	80010e6 <HAL_GPIO_Init+0x21a>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	4a4e      	ldr	r2, [pc, #312]	@ (80011f0 <HAL_GPIO_Init+0x324>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d013      	beq.n	80010e2 <HAL_GPIO_Init+0x216>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	4a4d      	ldr	r2, [pc, #308]	@ (80011f4 <HAL_GPIO_Init+0x328>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d00d      	beq.n	80010de <HAL_GPIO_Init+0x212>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4a4c      	ldr	r2, [pc, #304]	@ (80011f8 <HAL_GPIO_Init+0x32c>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d007      	beq.n	80010da <HAL_GPIO_Init+0x20e>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4a4b      	ldr	r2, [pc, #300]	@ (80011fc <HAL_GPIO_Init+0x330>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d101      	bne.n	80010d6 <HAL_GPIO_Init+0x20a>
 80010d2:	2307      	movs	r3, #7
 80010d4:	e00e      	b.n	80010f4 <HAL_GPIO_Init+0x228>
 80010d6:	2308      	movs	r3, #8
 80010d8:	e00c      	b.n	80010f4 <HAL_GPIO_Init+0x228>
 80010da:	2306      	movs	r3, #6
 80010dc:	e00a      	b.n	80010f4 <HAL_GPIO_Init+0x228>
 80010de:	2305      	movs	r3, #5
 80010e0:	e008      	b.n	80010f4 <HAL_GPIO_Init+0x228>
 80010e2:	2304      	movs	r3, #4
 80010e4:	e006      	b.n	80010f4 <HAL_GPIO_Init+0x228>
 80010e6:	2303      	movs	r3, #3
 80010e8:	e004      	b.n	80010f4 <HAL_GPIO_Init+0x228>
 80010ea:	2302      	movs	r3, #2
 80010ec:	e002      	b.n	80010f4 <HAL_GPIO_Init+0x228>
 80010ee:	2301      	movs	r3, #1
 80010f0:	e000      	b.n	80010f4 <HAL_GPIO_Init+0x228>
 80010f2:	2300      	movs	r3, #0
 80010f4:	69fa      	ldr	r2, [r7, #28]
 80010f6:	f002 0203 	and.w	r2, r2, #3
 80010fa:	0092      	lsls	r2, r2, #2
 80010fc:	4093      	lsls	r3, r2
 80010fe:	69ba      	ldr	r2, [r7, #24]
 8001100:	4313      	orrs	r3, r2
 8001102:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001104:	4935      	ldr	r1, [pc, #212]	@ (80011dc <HAL_GPIO_Init+0x310>)
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	089b      	lsrs	r3, r3, #2
 800110a:	3302      	adds	r3, #2
 800110c:	69ba      	ldr	r2, [r7, #24]
 800110e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001112:	4b3b      	ldr	r3, [pc, #236]	@ (8001200 <HAL_GPIO_Init+0x334>)
 8001114:	689b      	ldr	r3, [r3, #8]
 8001116:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001118:	693b      	ldr	r3, [r7, #16]
 800111a:	43db      	mvns	r3, r3
 800111c:	69ba      	ldr	r2, [r7, #24]
 800111e:	4013      	ands	r3, r2
 8001120:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800112a:	2b00      	cmp	r3, #0
 800112c:	d003      	beq.n	8001136 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800112e:	69ba      	ldr	r2, [r7, #24]
 8001130:	693b      	ldr	r3, [r7, #16]
 8001132:	4313      	orrs	r3, r2
 8001134:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001136:	4a32      	ldr	r2, [pc, #200]	@ (8001200 <HAL_GPIO_Init+0x334>)
 8001138:	69bb      	ldr	r3, [r7, #24]
 800113a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800113c:	4b30      	ldr	r3, [pc, #192]	@ (8001200 <HAL_GPIO_Init+0x334>)
 800113e:	68db      	ldr	r3, [r3, #12]
 8001140:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001142:	693b      	ldr	r3, [r7, #16]
 8001144:	43db      	mvns	r3, r3
 8001146:	69ba      	ldr	r2, [r7, #24]
 8001148:	4013      	ands	r3, r2
 800114a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001154:	2b00      	cmp	r3, #0
 8001156:	d003      	beq.n	8001160 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001158:	69ba      	ldr	r2, [r7, #24]
 800115a:	693b      	ldr	r3, [r7, #16]
 800115c:	4313      	orrs	r3, r2
 800115e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001160:	4a27      	ldr	r2, [pc, #156]	@ (8001200 <HAL_GPIO_Init+0x334>)
 8001162:	69bb      	ldr	r3, [r7, #24]
 8001164:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001166:	4b26      	ldr	r3, [pc, #152]	@ (8001200 <HAL_GPIO_Init+0x334>)
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800116c:	693b      	ldr	r3, [r7, #16]
 800116e:	43db      	mvns	r3, r3
 8001170:	69ba      	ldr	r2, [r7, #24]
 8001172:	4013      	ands	r3, r2
 8001174:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800117e:	2b00      	cmp	r3, #0
 8001180:	d003      	beq.n	800118a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001182:	69ba      	ldr	r2, [r7, #24]
 8001184:	693b      	ldr	r3, [r7, #16]
 8001186:	4313      	orrs	r3, r2
 8001188:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800118a:	4a1d      	ldr	r2, [pc, #116]	@ (8001200 <HAL_GPIO_Init+0x334>)
 800118c:	69bb      	ldr	r3, [r7, #24]
 800118e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001190:	4b1b      	ldr	r3, [pc, #108]	@ (8001200 <HAL_GPIO_Init+0x334>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001196:	693b      	ldr	r3, [r7, #16]
 8001198:	43db      	mvns	r3, r3
 800119a:	69ba      	ldr	r2, [r7, #24]
 800119c:	4013      	ands	r3, r2
 800119e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d003      	beq.n	80011b4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80011ac:	69ba      	ldr	r2, [r7, #24]
 80011ae:	693b      	ldr	r3, [r7, #16]
 80011b0:	4313      	orrs	r3, r2
 80011b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011b4:	4a12      	ldr	r2, [pc, #72]	@ (8001200 <HAL_GPIO_Init+0x334>)
 80011b6:	69bb      	ldr	r3, [r7, #24]
 80011b8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	3301      	adds	r3, #1
 80011be:	61fb      	str	r3, [r7, #28]
 80011c0:	69fb      	ldr	r3, [r7, #28]
 80011c2:	2b0f      	cmp	r3, #15
 80011c4:	f67f ae90 	bls.w	8000ee8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011c8:	bf00      	nop
 80011ca:	bf00      	nop
 80011cc:	3724      	adds	r7, #36	@ 0x24
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop
 80011d8:	40023800 	.word	0x40023800
 80011dc:	40013800 	.word	0x40013800
 80011e0:	40020000 	.word	0x40020000
 80011e4:	40020400 	.word	0x40020400
 80011e8:	40020800 	.word	0x40020800
 80011ec:	40020c00 	.word	0x40020c00
 80011f0:	40021000 	.word	0x40021000
 80011f4:	40021400 	.word	0x40021400
 80011f8:	40021800 	.word	0x40021800
 80011fc:	40021c00 	.word	0x40021c00
 8001200:	40013c00 	.word	0x40013c00

08001204 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001204:	b480      	push	{r7}
 8001206:	b085      	sub	sp, #20
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
 800120c:	460b      	mov	r3, r1
 800120e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	691a      	ldr	r2, [r3, #16]
 8001214:	887b      	ldrh	r3, [r7, #2]
 8001216:	4013      	ands	r3, r2
 8001218:	2b00      	cmp	r3, #0
 800121a:	d002      	beq.n	8001222 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800121c:	2301      	movs	r3, #1
 800121e:	73fb      	strb	r3, [r7, #15]
 8001220:	e001      	b.n	8001226 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001222:	2300      	movs	r3, #0
 8001224:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001226:	7bfb      	ldrb	r3, [r7, #15]
}
 8001228:	4618      	mov	r0, r3
 800122a:	3714      	adds	r7, #20
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr

08001234 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001234:	b480      	push	{r7}
 8001236:	b083      	sub	sp, #12
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
 800123c:	460b      	mov	r3, r1
 800123e:	807b      	strh	r3, [r7, #2]
 8001240:	4613      	mov	r3, r2
 8001242:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001244:	787b      	ldrb	r3, [r7, #1]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d003      	beq.n	8001252 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800124a:	887a      	ldrh	r2, [r7, #2]
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001250:	e003      	b.n	800125a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001252:	887b      	ldrh	r3, [r7, #2]
 8001254:	041a      	lsls	r2, r3, #16
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	619a      	str	r2, [r3, #24]
}
 800125a:	bf00      	nop
 800125c:	370c      	adds	r7, #12
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr

08001266 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001266:	b480      	push	{r7}
 8001268:	b085      	sub	sp, #20
 800126a:	af00      	add	r7, sp, #0
 800126c:	6078      	str	r0, [r7, #4]
 800126e:	460b      	mov	r3, r1
 8001270:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	695b      	ldr	r3, [r3, #20]
 8001276:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001278:	887a      	ldrh	r2, [r7, #2]
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	4013      	ands	r3, r2
 800127e:	041a      	lsls	r2, r3, #16
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	43d9      	mvns	r1, r3
 8001284:	887b      	ldrh	r3, [r7, #2]
 8001286:	400b      	ands	r3, r1
 8001288:	431a      	orrs	r2, r3
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	619a      	str	r2, [r3, #24]
}
 800128e:	bf00      	nop
 8001290:	3714      	adds	r7, #20
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr
	...

0800129c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	4603      	mov	r3, r0
 80012a4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80012a6:	4b08      	ldr	r3, [pc, #32]	@ (80012c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80012a8:	695a      	ldr	r2, [r3, #20]
 80012aa:	88fb      	ldrh	r3, [r7, #6]
 80012ac:	4013      	ands	r3, r2
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d006      	beq.n	80012c0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80012b2:	4a05      	ldr	r2, [pc, #20]	@ (80012c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80012b4:	88fb      	ldrh	r3, [r7, #6]
 80012b6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80012b8:	88fb      	ldrh	r3, [r7, #6]
 80012ba:	4618      	mov	r0, r3
 80012bc:	f7ff fa80 	bl	80007c0 <HAL_GPIO_EXTI_Callback>
  }
}
 80012c0:	bf00      	nop
 80012c2:	3708      	adds	r7, #8
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	40013c00 	.word	0x40013c00

080012cc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b086      	sub	sp, #24
 80012d0:	af02      	add	r7, sp, #8
 80012d2:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d101      	bne.n	80012de <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80012da:	2301      	movs	r3, #1
 80012dc:	e101      	b.n	80014e2 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80012ea:	b2db      	uxtb	r3, r3
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d106      	bne.n	80012fe <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2200      	movs	r2, #0
 80012f4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80012f8:	6878      	ldr	r0, [r7, #4]
 80012fa:	f008 f9bb 	bl	8009674 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	2203      	movs	r2, #3
 8001302:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001306:	68bb      	ldr	r3, [r7, #8]
 8001308:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800130c:	d102      	bne.n	8001314 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2200      	movs	r2, #0
 8001312:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4618      	mov	r0, r3
 800131a:	f002 fa98 	bl	800384e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6818      	ldr	r0, [r3, #0]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	7c1a      	ldrb	r2, [r3, #16]
 8001326:	f88d 2000 	strb.w	r2, [sp]
 800132a:	3304      	adds	r3, #4
 800132c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800132e:	f002 f977 	bl	8003620 <USB_CoreInit>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d005      	beq.n	8001344 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2202      	movs	r2, #2
 800133c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001340:	2301      	movs	r3, #1
 8001342:	e0ce      	b.n	80014e2 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	2100      	movs	r1, #0
 800134a:	4618      	mov	r0, r3
 800134c:	f002 fa90 	bl	8003870 <USB_SetCurrentMode>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d005      	beq.n	8001362 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2202      	movs	r2, #2
 800135a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800135e:	2301      	movs	r3, #1
 8001360:	e0bf      	b.n	80014e2 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001362:	2300      	movs	r3, #0
 8001364:	73fb      	strb	r3, [r7, #15]
 8001366:	e04a      	b.n	80013fe <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001368:	7bfa      	ldrb	r2, [r7, #15]
 800136a:	6879      	ldr	r1, [r7, #4]
 800136c:	4613      	mov	r3, r2
 800136e:	00db      	lsls	r3, r3, #3
 8001370:	4413      	add	r3, r2
 8001372:	009b      	lsls	r3, r3, #2
 8001374:	440b      	add	r3, r1
 8001376:	3315      	adds	r3, #21
 8001378:	2201      	movs	r2, #1
 800137a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800137c:	7bfa      	ldrb	r2, [r7, #15]
 800137e:	6879      	ldr	r1, [r7, #4]
 8001380:	4613      	mov	r3, r2
 8001382:	00db      	lsls	r3, r3, #3
 8001384:	4413      	add	r3, r2
 8001386:	009b      	lsls	r3, r3, #2
 8001388:	440b      	add	r3, r1
 800138a:	3314      	adds	r3, #20
 800138c:	7bfa      	ldrb	r2, [r7, #15]
 800138e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001390:	7bfa      	ldrb	r2, [r7, #15]
 8001392:	7bfb      	ldrb	r3, [r7, #15]
 8001394:	b298      	uxth	r0, r3
 8001396:	6879      	ldr	r1, [r7, #4]
 8001398:	4613      	mov	r3, r2
 800139a:	00db      	lsls	r3, r3, #3
 800139c:	4413      	add	r3, r2
 800139e:	009b      	lsls	r3, r3, #2
 80013a0:	440b      	add	r3, r1
 80013a2:	332e      	adds	r3, #46	@ 0x2e
 80013a4:	4602      	mov	r2, r0
 80013a6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80013a8:	7bfa      	ldrb	r2, [r7, #15]
 80013aa:	6879      	ldr	r1, [r7, #4]
 80013ac:	4613      	mov	r3, r2
 80013ae:	00db      	lsls	r3, r3, #3
 80013b0:	4413      	add	r3, r2
 80013b2:	009b      	lsls	r3, r3, #2
 80013b4:	440b      	add	r3, r1
 80013b6:	3318      	adds	r3, #24
 80013b8:	2200      	movs	r2, #0
 80013ba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80013bc:	7bfa      	ldrb	r2, [r7, #15]
 80013be:	6879      	ldr	r1, [r7, #4]
 80013c0:	4613      	mov	r3, r2
 80013c2:	00db      	lsls	r3, r3, #3
 80013c4:	4413      	add	r3, r2
 80013c6:	009b      	lsls	r3, r3, #2
 80013c8:	440b      	add	r3, r1
 80013ca:	331c      	adds	r3, #28
 80013cc:	2200      	movs	r2, #0
 80013ce:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80013d0:	7bfa      	ldrb	r2, [r7, #15]
 80013d2:	6879      	ldr	r1, [r7, #4]
 80013d4:	4613      	mov	r3, r2
 80013d6:	00db      	lsls	r3, r3, #3
 80013d8:	4413      	add	r3, r2
 80013da:	009b      	lsls	r3, r3, #2
 80013dc:	440b      	add	r3, r1
 80013de:	3320      	adds	r3, #32
 80013e0:	2200      	movs	r2, #0
 80013e2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80013e4:	7bfa      	ldrb	r2, [r7, #15]
 80013e6:	6879      	ldr	r1, [r7, #4]
 80013e8:	4613      	mov	r3, r2
 80013ea:	00db      	lsls	r3, r3, #3
 80013ec:	4413      	add	r3, r2
 80013ee:	009b      	lsls	r3, r3, #2
 80013f0:	440b      	add	r3, r1
 80013f2:	3324      	adds	r3, #36	@ 0x24
 80013f4:	2200      	movs	r2, #0
 80013f6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013f8:	7bfb      	ldrb	r3, [r7, #15]
 80013fa:	3301      	adds	r3, #1
 80013fc:	73fb      	strb	r3, [r7, #15]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	791b      	ldrb	r3, [r3, #4]
 8001402:	7bfa      	ldrb	r2, [r7, #15]
 8001404:	429a      	cmp	r2, r3
 8001406:	d3af      	bcc.n	8001368 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001408:	2300      	movs	r3, #0
 800140a:	73fb      	strb	r3, [r7, #15]
 800140c:	e044      	b.n	8001498 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800140e:	7bfa      	ldrb	r2, [r7, #15]
 8001410:	6879      	ldr	r1, [r7, #4]
 8001412:	4613      	mov	r3, r2
 8001414:	00db      	lsls	r3, r3, #3
 8001416:	4413      	add	r3, r2
 8001418:	009b      	lsls	r3, r3, #2
 800141a:	440b      	add	r3, r1
 800141c:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001420:	2200      	movs	r2, #0
 8001422:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001424:	7bfa      	ldrb	r2, [r7, #15]
 8001426:	6879      	ldr	r1, [r7, #4]
 8001428:	4613      	mov	r3, r2
 800142a:	00db      	lsls	r3, r3, #3
 800142c:	4413      	add	r3, r2
 800142e:	009b      	lsls	r3, r3, #2
 8001430:	440b      	add	r3, r1
 8001432:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8001436:	7bfa      	ldrb	r2, [r7, #15]
 8001438:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800143a:	7bfa      	ldrb	r2, [r7, #15]
 800143c:	6879      	ldr	r1, [r7, #4]
 800143e:	4613      	mov	r3, r2
 8001440:	00db      	lsls	r3, r3, #3
 8001442:	4413      	add	r3, r2
 8001444:	009b      	lsls	r3, r3, #2
 8001446:	440b      	add	r3, r1
 8001448:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800144c:	2200      	movs	r2, #0
 800144e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001450:	7bfa      	ldrb	r2, [r7, #15]
 8001452:	6879      	ldr	r1, [r7, #4]
 8001454:	4613      	mov	r3, r2
 8001456:	00db      	lsls	r3, r3, #3
 8001458:	4413      	add	r3, r2
 800145a:	009b      	lsls	r3, r3, #2
 800145c:	440b      	add	r3, r1
 800145e:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001462:	2200      	movs	r2, #0
 8001464:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001466:	7bfa      	ldrb	r2, [r7, #15]
 8001468:	6879      	ldr	r1, [r7, #4]
 800146a:	4613      	mov	r3, r2
 800146c:	00db      	lsls	r3, r3, #3
 800146e:	4413      	add	r3, r2
 8001470:	009b      	lsls	r3, r3, #2
 8001472:	440b      	add	r3, r1
 8001474:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001478:	2200      	movs	r2, #0
 800147a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800147c:	7bfa      	ldrb	r2, [r7, #15]
 800147e:	6879      	ldr	r1, [r7, #4]
 8001480:	4613      	mov	r3, r2
 8001482:	00db      	lsls	r3, r3, #3
 8001484:	4413      	add	r3, r2
 8001486:	009b      	lsls	r3, r3, #2
 8001488:	440b      	add	r3, r1
 800148a:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800148e:	2200      	movs	r2, #0
 8001490:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001492:	7bfb      	ldrb	r3, [r7, #15]
 8001494:	3301      	adds	r3, #1
 8001496:	73fb      	strb	r3, [r7, #15]
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	791b      	ldrb	r3, [r3, #4]
 800149c:	7bfa      	ldrb	r2, [r7, #15]
 800149e:	429a      	cmp	r2, r3
 80014a0:	d3b5      	bcc.n	800140e <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6818      	ldr	r0, [r3, #0]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	7c1a      	ldrb	r2, [r3, #16]
 80014aa:	f88d 2000 	strb.w	r2, [sp]
 80014ae:	3304      	adds	r3, #4
 80014b0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014b2:	f002 fa29 	bl	8003908 <USB_DevInit>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d005      	beq.n	80014c8 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2202      	movs	r2, #2
 80014c0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80014c4:	2301      	movs	r3, #1
 80014c6:	e00c      	b.n	80014e2 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2200      	movs	r2, #0
 80014cc:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2201      	movs	r2, #1
 80014d2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4618      	mov	r0, r3
 80014dc:	f003 fa73 	bl	80049c6 <USB_DevDisconnect>

  return HAL_OK;
 80014e0:	2300      	movs	r3, #0
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	3710      	adds	r7, #16
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}

080014ea <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80014ea:	b580      	push	{r7, lr}
 80014ec:	b084      	sub	sp, #16
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80014fe:	2b01      	cmp	r3, #1
 8001500:	d101      	bne.n	8001506 <HAL_PCD_Start+0x1c>
 8001502:	2302      	movs	r3, #2
 8001504:	e022      	b.n	800154c <HAL_PCD_Start+0x62>
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2201      	movs	r2, #1
 800150a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	68db      	ldr	r3, [r3, #12]
 8001512:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001516:	2b00      	cmp	r3, #0
 8001518:	d009      	beq.n	800152e <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800151e:	2b01      	cmp	r3, #1
 8001520:	d105      	bne.n	800152e <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001526:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4618      	mov	r0, r3
 8001534:	f002 f97a 	bl	800382c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4618      	mov	r0, r3
 800153e:	f003 fa21 	bl	8004984 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2200      	movs	r2, #0
 8001546:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800154a:	2300      	movs	r3, #0
}
 800154c:	4618      	mov	r0, r3
 800154e:	3710      	adds	r7, #16
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}

08001554 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001554:	b590      	push	{r4, r7, lr}
 8001556:	b08d      	sub	sp, #52	@ 0x34
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001562:	6a3b      	ldr	r3, [r7, #32]
 8001564:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4618      	mov	r0, r3
 800156c:	f003 fadf 	bl	8004b2e <USB_GetMode>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	f040 848c 	bne.w	8001e90 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4618      	mov	r0, r3
 800157e:	f003 fa43 	bl	8004a08 <USB_ReadInterrupts>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	f000 8482 	beq.w	8001e8e <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800158a:	69fb      	ldr	r3, [r7, #28]
 800158c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001590:	689b      	ldr	r3, [r3, #8]
 8001592:	0a1b      	lsrs	r3, r3, #8
 8001594:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4618      	mov	r0, r3
 80015a4:	f003 fa30 	bl	8004a08 <USB_ReadInterrupts>
 80015a8:	4603      	mov	r3, r0
 80015aa:	f003 0302 	and.w	r3, r3, #2
 80015ae:	2b02      	cmp	r3, #2
 80015b0:	d107      	bne.n	80015c2 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	695a      	ldr	r2, [r3, #20]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f002 0202 	and.w	r2, r2, #2
 80015c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4618      	mov	r0, r3
 80015c8:	f003 fa1e 	bl	8004a08 <USB_ReadInterrupts>
 80015cc:	4603      	mov	r3, r0
 80015ce:	f003 0310 	and.w	r3, r3, #16
 80015d2:	2b10      	cmp	r3, #16
 80015d4:	d161      	bne.n	800169a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	699a      	ldr	r2, [r3, #24]
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f022 0210 	bic.w	r2, r2, #16
 80015e4:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80015e6:	6a3b      	ldr	r3, [r7, #32]
 80015e8:	6a1b      	ldr	r3, [r3, #32]
 80015ea:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80015ec:	69bb      	ldr	r3, [r7, #24]
 80015ee:	f003 020f 	and.w	r2, r3, #15
 80015f2:	4613      	mov	r3, r2
 80015f4:	00db      	lsls	r3, r3, #3
 80015f6:	4413      	add	r3, r2
 80015f8:	009b      	lsls	r3, r3, #2
 80015fa:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80015fe:	687a      	ldr	r2, [r7, #4]
 8001600:	4413      	add	r3, r2
 8001602:	3304      	adds	r3, #4
 8001604:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001606:	69bb      	ldr	r3, [r7, #24]
 8001608:	0c5b      	lsrs	r3, r3, #17
 800160a:	f003 030f 	and.w	r3, r3, #15
 800160e:	2b02      	cmp	r3, #2
 8001610:	d124      	bne.n	800165c <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001612:	69ba      	ldr	r2, [r7, #24]
 8001614:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8001618:	4013      	ands	r3, r2
 800161a:	2b00      	cmp	r3, #0
 800161c:	d035      	beq.n	800168a <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001622:	69bb      	ldr	r3, [r7, #24]
 8001624:	091b      	lsrs	r3, r3, #4
 8001626:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001628:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800162c:	b29b      	uxth	r3, r3
 800162e:	461a      	mov	r2, r3
 8001630:	6a38      	ldr	r0, [r7, #32]
 8001632:	f003 f855 	bl	80046e0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001636:	697b      	ldr	r3, [r7, #20]
 8001638:	68da      	ldr	r2, [r3, #12]
 800163a:	69bb      	ldr	r3, [r7, #24]
 800163c:	091b      	lsrs	r3, r3, #4
 800163e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001642:	441a      	add	r2, r3
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	695a      	ldr	r2, [r3, #20]
 800164c:	69bb      	ldr	r3, [r7, #24]
 800164e:	091b      	lsrs	r3, r3, #4
 8001650:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001654:	441a      	add	r2, r3
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	615a      	str	r2, [r3, #20]
 800165a:	e016      	b.n	800168a <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800165c:	69bb      	ldr	r3, [r7, #24]
 800165e:	0c5b      	lsrs	r3, r3, #17
 8001660:	f003 030f 	and.w	r3, r3, #15
 8001664:	2b06      	cmp	r3, #6
 8001666:	d110      	bne.n	800168a <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800166e:	2208      	movs	r2, #8
 8001670:	4619      	mov	r1, r3
 8001672:	6a38      	ldr	r0, [r7, #32]
 8001674:	f003 f834 	bl	80046e0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	695a      	ldr	r2, [r3, #20]
 800167c:	69bb      	ldr	r3, [r7, #24]
 800167e:	091b      	lsrs	r3, r3, #4
 8001680:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001684:	441a      	add	r2, r3
 8001686:	697b      	ldr	r3, [r7, #20]
 8001688:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	699a      	ldr	r2, [r3, #24]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f042 0210 	orr.w	r2, r2, #16
 8001698:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4618      	mov	r0, r3
 80016a0:	f003 f9b2 	bl	8004a08 <USB_ReadInterrupts>
 80016a4:	4603      	mov	r3, r0
 80016a6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80016aa:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80016ae:	f040 80a7 	bne.w	8001800 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80016b2:	2300      	movs	r3, #0
 80016b4:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4618      	mov	r0, r3
 80016bc:	f003 f9b7 	bl	8004a2e <USB_ReadDevAllOutEpInterrupt>
 80016c0:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80016c2:	e099      	b.n	80017f8 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80016c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016c6:	f003 0301 	and.w	r3, r3, #1
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	f000 808e 	beq.w	80017ec <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80016d6:	b2d2      	uxtb	r2, r2
 80016d8:	4611      	mov	r1, r2
 80016da:	4618      	mov	r0, r3
 80016dc:	f003 f9db 	bl	8004a96 <USB_ReadDevOutEPInterrupt>
 80016e0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	f003 0301 	and.w	r3, r3, #1
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d00c      	beq.n	8001706 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80016ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016ee:	015a      	lsls	r2, r3, #5
 80016f0:	69fb      	ldr	r3, [r7, #28]
 80016f2:	4413      	add	r3, r2
 80016f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80016f8:	461a      	mov	r2, r3
 80016fa:	2301      	movs	r3, #1
 80016fc:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80016fe:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001700:	6878      	ldr	r0, [r7, #4]
 8001702:	f000 fea3 	bl	800244c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001706:	693b      	ldr	r3, [r7, #16]
 8001708:	f003 0308 	and.w	r3, r3, #8
 800170c:	2b00      	cmp	r3, #0
 800170e:	d00c      	beq.n	800172a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001712:	015a      	lsls	r2, r3, #5
 8001714:	69fb      	ldr	r3, [r7, #28]
 8001716:	4413      	add	r3, r2
 8001718:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800171c:	461a      	mov	r2, r3
 800171e:	2308      	movs	r3, #8
 8001720:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001722:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001724:	6878      	ldr	r0, [r7, #4]
 8001726:	f000 ff79 	bl	800261c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	f003 0310 	and.w	r3, r3, #16
 8001730:	2b00      	cmp	r3, #0
 8001732:	d008      	beq.n	8001746 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001736:	015a      	lsls	r2, r3, #5
 8001738:	69fb      	ldr	r3, [r7, #28]
 800173a:	4413      	add	r3, r2
 800173c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001740:	461a      	mov	r2, r3
 8001742:	2310      	movs	r3, #16
 8001744:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	f003 0302 	and.w	r3, r3, #2
 800174c:	2b00      	cmp	r3, #0
 800174e:	d030      	beq.n	80017b2 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001750:	6a3b      	ldr	r3, [r7, #32]
 8001752:	695b      	ldr	r3, [r3, #20]
 8001754:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001758:	2b80      	cmp	r3, #128	@ 0x80
 800175a:	d109      	bne.n	8001770 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800175c:	69fb      	ldr	r3, [r7, #28]
 800175e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	69fa      	ldr	r2, [r7, #28]
 8001766:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800176a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800176e:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001770:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001772:	4613      	mov	r3, r2
 8001774:	00db      	lsls	r3, r3, #3
 8001776:	4413      	add	r3, r2
 8001778:	009b      	lsls	r3, r3, #2
 800177a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800177e:	687a      	ldr	r2, [r7, #4]
 8001780:	4413      	add	r3, r2
 8001782:	3304      	adds	r3, #4
 8001784:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	78db      	ldrb	r3, [r3, #3]
 800178a:	2b01      	cmp	r3, #1
 800178c:	d108      	bne.n	80017a0 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	2200      	movs	r2, #0
 8001792:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001796:	b2db      	uxtb	r3, r3
 8001798:	4619      	mov	r1, r3
 800179a:	6878      	ldr	r0, [r7, #4]
 800179c:	f008 f870 	bl	8009880 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80017a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017a2:	015a      	lsls	r2, r3, #5
 80017a4:	69fb      	ldr	r3, [r7, #28]
 80017a6:	4413      	add	r3, r2
 80017a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80017ac:	461a      	mov	r2, r3
 80017ae:	2302      	movs	r3, #2
 80017b0:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	f003 0320 	and.w	r3, r3, #32
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d008      	beq.n	80017ce <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80017bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017be:	015a      	lsls	r2, r3, #5
 80017c0:	69fb      	ldr	r3, [r7, #28]
 80017c2:	4413      	add	r3, r2
 80017c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80017c8:	461a      	mov	r2, r3
 80017ca:	2320      	movs	r3, #32
 80017cc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d009      	beq.n	80017ec <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80017d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017da:	015a      	lsls	r2, r3, #5
 80017dc:	69fb      	ldr	r3, [r7, #28]
 80017de:	4413      	add	r3, r2
 80017e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80017e4:	461a      	mov	r2, r3
 80017e6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80017ea:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80017ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017ee:	3301      	adds	r3, #1
 80017f0:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80017f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017f4:	085b      	lsrs	r3, r3, #1
 80017f6:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80017f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	f47f af62 	bne.w	80016c4 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4618      	mov	r0, r3
 8001806:	f003 f8ff 	bl	8004a08 <USB_ReadInterrupts>
 800180a:	4603      	mov	r3, r0
 800180c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001810:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001814:	f040 80db 	bne.w	80019ce <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4618      	mov	r0, r3
 800181e:	f003 f920 	bl	8004a62 <USB_ReadDevAllInEpInterrupt>
 8001822:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8001824:	2300      	movs	r3, #0
 8001826:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8001828:	e0cd      	b.n	80019c6 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800182a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800182c:	f003 0301 	and.w	r3, r3, #1
 8001830:	2b00      	cmp	r3, #0
 8001832:	f000 80c2 	beq.w	80019ba <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800183c:	b2d2      	uxtb	r2, r2
 800183e:	4611      	mov	r1, r2
 8001840:	4618      	mov	r0, r3
 8001842:	f003 f946 	bl	8004ad2 <USB_ReadDevInEPInterrupt>
 8001846:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	f003 0301 	and.w	r3, r3, #1
 800184e:	2b00      	cmp	r3, #0
 8001850:	d057      	beq.n	8001902 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001854:	f003 030f 	and.w	r3, r3, #15
 8001858:	2201      	movs	r2, #1
 800185a:	fa02 f303 	lsl.w	r3, r2, r3
 800185e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001860:	69fb      	ldr	r3, [r7, #28]
 8001862:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001866:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	43db      	mvns	r3, r3
 800186c:	69f9      	ldr	r1, [r7, #28]
 800186e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8001872:	4013      	ands	r3, r2
 8001874:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001878:	015a      	lsls	r2, r3, #5
 800187a:	69fb      	ldr	r3, [r7, #28]
 800187c:	4413      	add	r3, r2
 800187e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001882:	461a      	mov	r2, r3
 8001884:	2301      	movs	r3, #1
 8001886:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	799b      	ldrb	r3, [r3, #6]
 800188c:	2b01      	cmp	r3, #1
 800188e:	d132      	bne.n	80018f6 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001890:	6879      	ldr	r1, [r7, #4]
 8001892:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001894:	4613      	mov	r3, r2
 8001896:	00db      	lsls	r3, r3, #3
 8001898:	4413      	add	r3, r2
 800189a:	009b      	lsls	r3, r3, #2
 800189c:	440b      	add	r3, r1
 800189e:	3320      	adds	r3, #32
 80018a0:	6819      	ldr	r1, [r3, #0]
 80018a2:	6878      	ldr	r0, [r7, #4]
 80018a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80018a6:	4613      	mov	r3, r2
 80018a8:	00db      	lsls	r3, r3, #3
 80018aa:	4413      	add	r3, r2
 80018ac:	009b      	lsls	r3, r3, #2
 80018ae:	4403      	add	r3, r0
 80018b0:	331c      	adds	r3, #28
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4419      	add	r1, r3
 80018b6:	6878      	ldr	r0, [r7, #4]
 80018b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80018ba:	4613      	mov	r3, r2
 80018bc:	00db      	lsls	r3, r3, #3
 80018be:	4413      	add	r3, r2
 80018c0:	009b      	lsls	r3, r3, #2
 80018c2:	4403      	add	r3, r0
 80018c4:	3320      	adds	r3, #32
 80018c6:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80018c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d113      	bne.n	80018f6 <HAL_PCD_IRQHandler+0x3a2>
 80018ce:	6879      	ldr	r1, [r7, #4]
 80018d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80018d2:	4613      	mov	r3, r2
 80018d4:	00db      	lsls	r3, r3, #3
 80018d6:	4413      	add	r3, r2
 80018d8:	009b      	lsls	r3, r3, #2
 80018da:	440b      	add	r3, r1
 80018dc:	3324      	adds	r3, #36	@ 0x24
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d108      	bne.n	80018f6 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6818      	ldr	r0, [r3, #0]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80018ee:	461a      	mov	r2, r3
 80018f0:	2101      	movs	r1, #1
 80018f2:	f003 f94d 	bl	8004b90 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80018f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	4619      	mov	r1, r3
 80018fc:	6878      	ldr	r0, [r7, #4]
 80018fe:	f007 ff3a 	bl	8009776 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001902:	693b      	ldr	r3, [r7, #16]
 8001904:	f003 0308 	and.w	r3, r3, #8
 8001908:	2b00      	cmp	r3, #0
 800190a:	d008      	beq.n	800191e <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800190c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800190e:	015a      	lsls	r2, r3, #5
 8001910:	69fb      	ldr	r3, [r7, #28]
 8001912:	4413      	add	r3, r2
 8001914:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001918:	461a      	mov	r2, r3
 800191a:	2308      	movs	r3, #8
 800191c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	f003 0310 	and.w	r3, r3, #16
 8001924:	2b00      	cmp	r3, #0
 8001926:	d008      	beq.n	800193a <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001928:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800192a:	015a      	lsls	r2, r3, #5
 800192c:	69fb      	ldr	r3, [r7, #28]
 800192e:	4413      	add	r3, r2
 8001930:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001934:	461a      	mov	r2, r3
 8001936:	2310      	movs	r3, #16
 8001938:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001940:	2b00      	cmp	r3, #0
 8001942:	d008      	beq.n	8001956 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001946:	015a      	lsls	r2, r3, #5
 8001948:	69fb      	ldr	r3, [r7, #28]
 800194a:	4413      	add	r3, r2
 800194c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001950:	461a      	mov	r2, r3
 8001952:	2340      	movs	r3, #64	@ 0x40
 8001954:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	f003 0302 	and.w	r3, r3, #2
 800195c:	2b00      	cmp	r3, #0
 800195e:	d023      	beq.n	80019a8 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001960:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001962:	6a38      	ldr	r0, [r7, #32]
 8001964:	f002 f934 	bl	8003bd0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001968:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800196a:	4613      	mov	r3, r2
 800196c:	00db      	lsls	r3, r3, #3
 800196e:	4413      	add	r3, r2
 8001970:	009b      	lsls	r3, r3, #2
 8001972:	3310      	adds	r3, #16
 8001974:	687a      	ldr	r2, [r7, #4]
 8001976:	4413      	add	r3, r2
 8001978:	3304      	adds	r3, #4
 800197a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	78db      	ldrb	r3, [r3, #3]
 8001980:	2b01      	cmp	r3, #1
 8001982:	d108      	bne.n	8001996 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	2200      	movs	r2, #0
 8001988:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800198a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800198c:	b2db      	uxtb	r3, r3
 800198e:	4619      	mov	r1, r3
 8001990:	6878      	ldr	r0, [r7, #4]
 8001992:	f007 ff87 	bl	80098a4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001998:	015a      	lsls	r2, r3, #5
 800199a:	69fb      	ldr	r3, [r7, #28]
 800199c:	4413      	add	r3, r2
 800199e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80019a2:	461a      	mov	r2, r3
 80019a4:	2302      	movs	r3, #2
 80019a6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80019a8:	693b      	ldr	r3, [r7, #16]
 80019aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d003      	beq.n	80019ba <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80019b2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80019b4:	6878      	ldr	r0, [r7, #4]
 80019b6:	f000 fcbd 	bl	8002334 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80019ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019bc:	3301      	adds	r3, #1
 80019be:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80019c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019c2:	085b      	lsrs	r3, r3, #1
 80019c4:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80019c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	f47f af2e 	bne.w	800182a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4618      	mov	r0, r3
 80019d4:	f003 f818 	bl	8004a08 <USB_ReadInterrupts>
 80019d8:	4603      	mov	r3, r0
 80019da:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80019de:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80019e2:	d122      	bne.n	8001a2a <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80019e4:	69fb      	ldr	r3, [r7, #28]
 80019e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	69fa      	ldr	r2, [r7, #28]
 80019ee:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80019f2:	f023 0301 	bic.w	r3, r3, #1
 80019f6:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	d108      	bne.n	8001a14 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2200      	movs	r2, #0
 8001a06:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001a0a:	2100      	movs	r1, #0
 8001a0c:	6878      	ldr	r0, [r7, #4]
 8001a0e:	f000 fea3 	bl	8002758 <HAL_PCDEx_LPM_Callback>
 8001a12:	e002      	b.n	8001a1a <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001a14:	6878      	ldr	r0, [r7, #4]
 8001a16:	f007 ff25 	bl	8009864 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	695a      	ldr	r2, [r3, #20]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8001a28:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f002 ffea 	bl	8004a08 <USB_ReadInterrupts>
 8001a34:	4603      	mov	r3, r0
 8001a36:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001a3a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001a3e:	d112      	bne.n	8001a66 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001a40:	69fb      	ldr	r3, [r7, #28]
 8001a42:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	f003 0301 	and.w	r3, r3, #1
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	d102      	bne.n	8001a56 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001a50:	6878      	ldr	r0, [r7, #4]
 8001a52:	f007 fee1 	bl	8009818 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	695a      	ldr	r2, [r3, #20]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8001a64:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f002 ffcc 	bl	8004a08 <USB_ReadInterrupts>
 8001a70:	4603      	mov	r3, r0
 8001a72:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001a76:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001a7a:	f040 80b7 	bne.w	8001bec <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	69fa      	ldr	r2, [r7, #28]
 8001a88:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001a8c:	f023 0301 	bic.w	r3, r3, #1
 8001a90:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	2110      	movs	r1, #16
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f002 f899 	bl	8003bd0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001aa2:	e046      	b.n	8001b32 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001aa4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001aa6:	015a      	lsls	r2, r3, #5
 8001aa8:	69fb      	ldr	r3, [r7, #28]
 8001aaa:	4413      	add	r3, r2
 8001aac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8001ab6:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001ab8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001aba:	015a      	lsls	r2, r3, #5
 8001abc:	69fb      	ldr	r3, [r7, #28]
 8001abe:	4413      	add	r3, r2
 8001ac0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001ac8:	0151      	lsls	r1, r2, #5
 8001aca:	69fa      	ldr	r2, [r7, #28]
 8001acc:	440a      	add	r2, r1
 8001ace:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8001ad2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001ad6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001ad8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ada:	015a      	lsls	r2, r3, #5
 8001adc:	69fb      	ldr	r3, [r7, #28]
 8001ade:	4413      	add	r3, r2
 8001ae0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001ae4:	461a      	mov	r2, r3
 8001ae6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8001aea:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001aec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001aee:	015a      	lsls	r2, r3, #5
 8001af0:	69fb      	ldr	r3, [r7, #28]
 8001af2:	4413      	add	r3, r2
 8001af4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001afc:	0151      	lsls	r1, r2, #5
 8001afe:	69fa      	ldr	r2, [r7, #28]
 8001b00:	440a      	add	r2, r1
 8001b02:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8001b06:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001b0a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001b0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b0e:	015a      	lsls	r2, r3, #5
 8001b10:	69fb      	ldr	r3, [r7, #28]
 8001b12:	4413      	add	r3, r2
 8001b14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001b1c:	0151      	lsls	r1, r2, #5
 8001b1e:	69fa      	ldr	r2, [r7, #28]
 8001b20:	440a      	add	r2, r1
 8001b22:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8001b26:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001b2a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b2e:	3301      	adds	r3, #1
 8001b30:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	791b      	ldrb	r3, [r3, #4]
 8001b36:	461a      	mov	r2, r3
 8001b38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d3b2      	bcc.n	8001aa4 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001b3e:	69fb      	ldr	r3, [r7, #28]
 8001b40:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001b44:	69db      	ldr	r3, [r3, #28]
 8001b46:	69fa      	ldr	r2, [r7, #28]
 8001b48:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001b4c:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8001b50:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	7bdb      	ldrb	r3, [r3, #15]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d016      	beq.n	8001b88 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001b5a:	69fb      	ldr	r3, [r7, #28]
 8001b5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001b60:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001b64:	69fa      	ldr	r2, [r7, #28]
 8001b66:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001b6a:	f043 030b 	orr.w	r3, r3, #11
 8001b6e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001b78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b7a:	69fa      	ldr	r2, [r7, #28]
 8001b7c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001b80:	f043 030b 	orr.w	r3, r3, #11
 8001b84:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b86:	e015      	b.n	8001bb4 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001b88:	69fb      	ldr	r3, [r7, #28]
 8001b8a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001b8e:	695b      	ldr	r3, [r3, #20]
 8001b90:	69fa      	ldr	r2, [r7, #28]
 8001b92:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001b96:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001b9a:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8001b9e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001ba0:	69fb      	ldr	r3, [r7, #28]
 8001ba2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001ba6:	691b      	ldr	r3, [r3, #16]
 8001ba8:	69fa      	ldr	r2, [r7, #28]
 8001baa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001bae:	f043 030b 	orr.w	r3, r3, #11
 8001bb2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001bb4:	69fb      	ldr	r3, [r7, #28]
 8001bb6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	69fa      	ldr	r2, [r7, #28]
 8001bbe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001bc2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8001bc6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6818      	ldr	r0, [r3, #0]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001bd6:	461a      	mov	r2, r3
 8001bd8:	f002 ffda 	bl	8004b90 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	695a      	ldr	r2, [r3, #20]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8001bea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f002 ff09 	bl	8004a08 <USB_ReadInterrupts>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001bfc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001c00:	d123      	bne.n	8001c4a <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4618      	mov	r0, r3
 8001c08:	f002 ff9f 	bl	8004b4a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4618      	mov	r0, r3
 8001c12:	f002 f856 	bl	8003cc2 <USB_GetDevSpeed>
 8001c16:	4603      	mov	r3, r0
 8001c18:	461a      	mov	r2, r3
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681c      	ldr	r4, [r3, #0]
 8001c22:	f001 fa09 	bl	8003038 <HAL_RCC_GetHCLKFreq>
 8001c26:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001c2c:	461a      	mov	r2, r3
 8001c2e:	4620      	mov	r0, r4
 8001c30:	f001 fd5a 	bl	80036e8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001c34:	6878      	ldr	r0, [r7, #4]
 8001c36:	f007 fdc6 	bl	80097c6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	695a      	ldr	r2, [r3, #20]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8001c48:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f002 feda 	bl	8004a08 <USB_ReadInterrupts>
 8001c54:	4603      	mov	r3, r0
 8001c56:	f003 0308 	and.w	r3, r3, #8
 8001c5a:	2b08      	cmp	r3, #8
 8001c5c:	d10a      	bne.n	8001c74 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	f007 fda3 	bl	80097aa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	695a      	ldr	r2, [r3, #20]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f002 0208 	and.w	r2, r2, #8
 8001c72:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f002 fec5 	bl	8004a08 <USB_ReadInterrupts>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c84:	2b80      	cmp	r3, #128	@ 0x80
 8001c86:	d123      	bne.n	8001cd0 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001c88:	6a3b      	ldr	r3, [r7, #32]
 8001c8a:	699b      	ldr	r3, [r3, #24]
 8001c8c:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001c90:	6a3b      	ldr	r3, [r7, #32]
 8001c92:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001c94:	2301      	movs	r3, #1
 8001c96:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c98:	e014      	b.n	8001cc4 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001c9a:	6879      	ldr	r1, [r7, #4]
 8001c9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c9e:	4613      	mov	r3, r2
 8001ca0:	00db      	lsls	r3, r3, #3
 8001ca2:	4413      	add	r3, r2
 8001ca4:	009b      	lsls	r3, r3, #2
 8001ca6:	440b      	add	r3, r1
 8001ca8:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8001cac:	781b      	ldrb	r3, [r3, #0]
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	d105      	bne.n	8001cbe <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001cb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cb4:	b2db      	uxtb	r3, r3
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	6878      	ldr	r0, [r7, #4]
 8001cba:	f000 fb0a 	bl	80022d2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001cbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cc0:	3301      	adds	r3, #1
 8001cc2:	627b      	str	r3, [r7, #36]	@ 0x24
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	791b      	ldrb	r3, [r3, #4]
 8001cc8:	461a      	mov	r2, r3
 8001cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d3e4      	bcc.n	8001c9a <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f002 fe97 	bl	8004a08 <USB_ReadInterrupts>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ce0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001ce4:	d13c      	bne.n	8001d60 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	627b      	str	r3, [r7, #36]	@ 0x24
 8001cea:	e02b      	b.n	8001d44 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001cec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cee:	015a      	lsls	r2, r3, #5
 8001cf0:	69fb      	ldr	r3, [r7, #28]
 8001cf2:	4413      	add	r3, r2
 8001cf4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001cfc:	6879      	ldr	r1, [r7, #4]
 8001cfe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d00:	4613      	mov	r3, r2
 8001d02:	00db      	lsls	r3, r3, #3
 8001d04:	4413      	add	r3, r2
 8001d06:	009b      	lsls	r3, r3, #2
 8001d08:	440b      	add	r3, r1
 8001d0a:	3318      	adds	r3, #24
 8001d0c:	781b      	ldrb	r3, [r3, #0]
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d115      	bne.n	8001d3e <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001d12:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	da12      	bge.n	8001d3e <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001d18:	6879      	ldr	r1, [r7, #4]
 8001d1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d1c:	4613      	mov	r3, r2
 8001d1e:	00db      	lsls	r3, r3, #3
 8001d20:	4413      	add	r3, r2
 8001d22:	009b      	lsls	r3, r3, #2
 8001d24:	440b      	add	r3, r1
 8001d26:	3317      	adds	r3, #23
 8001d28:	2201      	movs	r2, #1
 8001d2a:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001d2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d2e:	b2db      	uxtb	r3, r3
 8001d30:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001d34:	b2db      	uxtb	r3, r3
 8001d36:	4619      	mov	r1, r3
 8001d38:	6878      	ldr	r0, [r7, #4]
 8001d3a:	f000 faca 	bl	80022d2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d40:	3301      	adds	r3, #1
 8001d42:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	791b      	ldrb	r3, [r3, #4]
 8001d48:	461a      	mov	r2, r3
 8001d4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d3cd      	bcc.n	8001cec <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	695a      	ldr	r2, [r3, #20]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8001d5e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4618      	mov	r0, r3
 8001d66:	f002 fe4f 	bl	8004a08 <USB_ReadInterrupts>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d70:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001d74:	d156      	bne.n	8001e24 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001d76:	2301      	movs	r3, #1
 8001d78:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d7a:	e045      	b.n	8001e08 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001d7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d7e:	015a      	lsls	r2, r3, #5
 8001d80:	69fb      	ldr	r3, [r7, #28]
 8001d82:	4413      	add	r3, r2
 8001d84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001d8c:	6879      	ldr	r1, [r7, #4]
 8001d8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d90:	4613      	mov	r3, r2
 8001d92:	00db      	lsls	r3, r3, #3
 8001d94:	4413      	add	r3, r2
 8001d96:	009b      	lsls	r3, r3, #2
 8001d98:	440b      	add	r3, r1
 8001d9a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	2b01      	cmp	r3, #1
 8001da2:	d12e      	bne.n	8001e02 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001da4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	da2b      	bge.n	8001e02 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001daa:	69bb      	ldr	r3, [r7, #24]
 8001dac:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8001db6:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001dba:	429a      	cmp	r2, r3
 8001dbc:	d121      	bne.n	8001e02 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001dbe:	6879      	ldr	r1, [r7, #4]
 8001dc0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001dc2:	4613      	mov	r3, r2
 8001dc4:	00db      	lsls	r3, r3, #3
 8001dc6:	4413      	add	r3, r2
 8001dc8:	009b      	lsls	r3, r3, #2
 8001dca:	440b      	add	r3, r1
 8001dcc:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001dd4:	6a3b      	ldr	r3, [r7, #32]
 8001dd6:	699b      	ldr	r3, [r3, #24]
 8001dd8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001ddc:	6a3b      	ldr	r3, [r7, #32]
 8001dde:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001de0:	6a3b      	ldr	r3, [r7, #32]
 8001de2:	695b      	ldr	r3, [r3, #20]
 8001de4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d10a      	bne.n	8001e02 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001dec:	69fb      	ldr	r3, [r7, #28]
 8001dee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	69fa      	ldr	r2, [r7, #28]
 8001df6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001dfa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001dfe:	6053      	str	r3, [r2, #4]
            break;
 8001e00:	e008      	b.n	8001e14 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001e02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e04:	3301      	adds	r3, #1
 8001e06:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	791b      	ldrb	r3, [r3, #4]
 8001e0c:	461a      	mov	r2, r3
 8001e0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d3b3      	bcc.n	8001d7c <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	695a      	ldr	r2, [r3, #20]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8001e22:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f002 fded 	bl	8004a08 <USB_ReadInterrupts>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001e34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e38:	d10a      	bne.n	8001e50 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	f007 fd44 	bl	80098c8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	695a      	ldr	r2, [r3, #20]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8001e4e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4618      	mov	r0, r3
 8001e56:	f002 fdd7 	bl	8004a08 <USB_ReadInterrupts>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	f003 0304 	and.w	r3, r3, #4
 8001e60:	2b04      	cmp	r3, #4
 8001e62:	d115      	bne.n	8001e90 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001e6c:	69bb      	ldr	r3, [r7, #24]
 8001e6e:	f003 0304 	and.w	r3, r3, #4
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d002      	beq.n	8001e7c <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	f007 fd34 	bl	80098e4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	6859      	ldr	r1, [r3, #4]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	69ba      	ldr	r2, [r7, #24]
 8001e88:	430a      	orrs	r2, r1
 8001e8a:	605a      	str	r2, [r3, #4]
 8001e8c:	e000      	b.n	8001e90 <HAL_PCD_IRQHandler+0x93c>
      return;
 8001e8e:	bf00      	nop
    }
  }
}
 8001e90:	3734      	adds	r7, #52	@ 0x34
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd90      	pop	{r4, r7, pc}

08001e96 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001e96:	b580      	push	{r7, lr}
 8001e98:	b082      	sub	sp, #8
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	6078      	str	r0, [r7, #4]
 8001e9e:	460b      	mov	r3, r1
 8001ea0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	d101      	bne.n	8001eb0 <HAL_PCD_SetAddress+0x1a>
 8001eac:	2302      	movs	r3, #2
 8001eae:	e012      	b.n	8001ed6 <HAL_PCD_SetAddress+0x40>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	78fa      	ldrb	r2, [r7, #3]
 8001ebc:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	78fa      	ldrb	r2, [r7, #3]
 8001ec4:	4611      	mov	r1, r2
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f002 fd36 	bl	8004938 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2200      	movs	r2, #0
 8001ed0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001ed4:	2300      	movs	r3, #0
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	3708      	adds	r7, #8
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}

08001ede <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001ede:	b580      	push	{r7, lr}
 8001ee0:	b084      	sub	sp, #16
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	6078      	str	r0, [r7, #4]
 8001ee6:	4608      	mov	r0, r1
 8001ee8:	4611      	mov	r1, r2
 8001eea:	461a      	mov	r2, r3
 8001eec:	4603      	mov	r3, r0
 8001eee:	70fb      	strb	r3, [r7, #3]
 8001ef0:	460b      	mov	r3, r1
 8001ef2:	803b      	strh	r3, [r7, #0]
 8001ef4:	4613      	mov	r3, r2
 8001ef6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001efc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	da0f      	bge.n	8001f24 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f04:	78fb      	ldrb	r3, [r7, #3]
 8001f06:	f003 020f 	and.w	r2, r3, #15
 8001f0a:	4613      	mov	r3, r2
 8001f0c:	00db      	lsls	r3, r3, #3
 8001f0e:	4413      	add	r3, r2
 8001f10:	009b      	lsls	r3, r3, #2
 8001f12:	3310      	adds	r3, #16
 8001f14:	687a      	ldr	r2, [r7, #4]
 8001f16:	4413      	add	r3, r2
 8001f18:	3304      	adds	r3, #4
 8001f1a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	2201      	movs	r2, #1
 8001f20:	705a      	strb	r2, [r3, #1]
 8001f22:	e00f      	b.n	8001f44 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f24:	78fb      	ldrb	r3, [r7, #3]
 8001f26:	f003 020f 	and.w	r2, r3, #15
 8001f2a:	4613      	mov	r3, r2
 8001f2c:	00db      	lsls	r3, r3, #3
 8001f2e:	4413      	add	r3, r2
 8001f30:	009b      	lsls	r3, r3, #2
 8001f32:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001f36:	687a      	ldr	r2, [r7, #4]
 8001f38:	4413      	add	r3, r2
 8001f3a:	3304      	adds	r3, #4
 8001f3c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	2200      	movs	r2, #0
 8001f42:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001f44:	78fb      	ldrb	r3, [r7, #3]
 8001f46:	f003 030f 	and.w	r3, r3, #15
 8001f4a:	b2da      	uxtb	r2, r3
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8001f50:	883b      	ldrh	r3, [r7, #0]
 8001f52:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	78ba      	ldrb	r2, [r7, #2]
 8001f5e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	785b      	ldrb	r3, [r3, #1]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d004      	beq.n	8001f72 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	781b      	ldrb	r3, [r3, #0]
 8001f6c:	461a      	mov	r2, r3
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001f72:	78bb      	ldrb	r3, [r7, #2]
 8001f74:	2b02      	cmp	r3, #2
 8001f76:	d102      	bne.n	8001f7e <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	d101      	bne.n	8001f8c <HAL_PCD_EP_Open+0xae>
 8001f88:	2302      	movs	r3, #2
 8001f8a:	e00e      	b.n	8001faa <HAL_PCD_EP_Open+0xcc>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2201      	movs	r2, #1
 8001f90:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	68f9      	ldr	r1, [r7, #12]
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f001 feb6 	bl	8003d0c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8001fa8:	7afb      	ldrb	r3, [r7, #11]
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3710      	adds	r7, #16
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}

08001fb2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001fb2:	b580      	push	{r7, lr}
 8001fb4:	b084      	sub	sp, #16
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	6078      	str	r0, [r7, #4]
 8001fba:	460b      	mov	r3, r1
 8001fbc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001fbe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	da0f      	bge.n	8001fe6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001fc6:	78fb      	ldrb	r3, [r7, #3]
 8001fc8:	f003 020f 	and.w	r2, r3, #15
 8001fcc:	4613      	mov	r3, r2
 8001fce:	00db      	lsls	r3, r3, #3
 8001fd0:	4413      	add	r3, r2
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	3310      	adds	r3, #16
 8001fd6:	687a      	ldr	r2, [r7, #4]
 8001fd8:	4413      	add	r3, r2
 8001fda:	3304      	adds	r3, #4
 8001fdc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	705a      	strb	r2, [r3, #1]
 8001fe4:	e00f      	b.n	8002006 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001fe6:	78fb      	ldrb	r3, [r7, #3]
 8001fe8:	f003 020f 	and.w	r2, r3, #15
 8001fec:	4613      	mov	r3, r2
 8001fee:	00db      	lsls	r3, r3, #3
 8001ff0:	4413      	add	r3, r2
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001ff8:	687a      	ldr	r2, [r7, #4]
 8001ffa:	4413      	add	r3, r2
 8001ffc:	3304      	adds	r3, #4
 8001ffe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	2200      	movs	r2, #0
 8002004:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002006:	78fb      	ldrb	r3, [r7, #3]
 8002008:	f003 030f 	and.w	r3, r3, #15
 800200c:	b2da      	uxtb	r2, r3
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002018:	2b01      	cmp	r3, #1
 800201a:	d101      	bne.n	8002020 <HAL_PCD_EP_Close+0x6e>
 800201c:	2302      	movs	r3, #2
 800201e:	e00e      	b.n	800203e <HAL_PCD_EP_Close+0x8c>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2201      	movs	r2, #1
 8002024:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	68f9      	ldr	r1, [r7, #12]
 800202e:	4618      	mov	r0, r3
 8002030:	f001 fef4 	bl	8003e1c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2200      	movs	r2, #0
 8002038:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800203c:	2300      	movs	r3, #0
}
 800203e:	4618      	mov	r0, r3
 8002040:	3710      	adds	r7, #16
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}

08002046 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002046:	b580      	push	{r7, lr}
 8002048:	b086      	sub	sp, #24
 800204a:	af00      	add	r7, sp, #0
 800204c:	60f8      	str	r0, [r7, #12]
 800204e:	607a      	str	r2, [r7, #4]
 8002050:	603b      	str	r3, [r7, #0]
 8002052:	460b      	mov	r3, r1
 8002054:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002056:	7afb      	ldrb	r3, [r7, #11]
 8002058:	f003 020f 	and.w	r2, r3, #15
 800205c:	4613      	mov	r3, r2
 800205e:	00db      	lsls	r3, r3, #3
 8002060:	4413      	add	r3, r2
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002068:	68fa      	ldr	r2, [r7, #12]
 800206a:	4413      	add	r3, r2
 800206c:	3304      	adds	r3, #4
 800206e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	687a      	ldr	r2, [r7, #4]
 8002074:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	683a      	ldr	r2, [r7, #0]
 800207a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	2200      	movs	r2, #0
 8002080:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	2200      	movs	r2, #0
 8002086:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002088:	7afb      	ldrb	r3, [r7, #11]
 800208a:	f003 030f 	and.w	r3, r3, #15
 800208e:	b2da      	uxtb	r2, r3
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	799b      	ldrb	r3, [r3, #6]
 8002098:	2b01      	cmp	r3, #1
 800209a:	d102      	bne.n	80020a2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800209c:	687a      	ldr	r2, [r7, #4]
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	6818      	ldr	r0, [r3, #0]
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	799b      	ldrb	r3, [r3, #6]
 80020aa:	461a      	mov	r2, r3
 80020ac:	6979      	ldr	r1, [r7, #20]
 80020ae:	f001 ff91 	bl	8003fd4 <USB_EPStartXfer>

  return HAL_OK;
 80020b2:	2300      	movs	r3, #0
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	3718      	adds	r7, #24
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}

080020bc <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80020bc:	b480      	push	{r7}
 80020be:	b083      	sub	sp, #12
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
 80020c4:	460b      	mov	r3, r1
 80020c6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80020c8:	78fb      	ldrb	r3, [r7, #3]
 80020ca:	f003 020f 	and.w	r2, r3, #15
 80020ce:	6879      	ldr	r1, [r7, #4]
 80020d0:	4613      	mov	r3, r2
 80020d2:	00db      	lsls	r3, r3, #3
 80020d4:	4413      	add	r3, r2
 80020d6:	009b      	lsls	r3, r3, #2
 80020d8:	440b      	add	r3, r1
 80020da:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 80020de:	681b      	ldr	r3, [r3, #0]
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	370c      	adds	r7, #12
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr

080020ec <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b086      	sub	sp, #24
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	60f8      	str	r0, [r7, #12]
 80020f4:	607a      	str	r2, [r7, #4]
 80020f6:	603b      	str	r3, [r7, #0]
 80020f8:	460b      	mov	r3, r1
 80020fa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020fc:	7afb      	ldrb	r3, [r7, #11]
 80020fe:	f003 020f 	and.w	r2, r3, #15
 8002102:	4613      	mov	r3, r2
 8002104:	00db      	lsls	r3, r3, #3
 8002106:	4413      	add	r3, r2
 8002108:	009b      	lsls	r3, r3, #2
 800210a:	3310      	adds	r3, #16
 800210c:	68fa      	ldr	r2, [r7, #12]
 800210e:	4413      	add	r3, r2
 8002110:	3304      	adds	r3, #4
 8002112:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	687a      	ldr	r2, [r7, #4]
 8002118:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	683a      	ldr	r2, [r7, #0]
 800211e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	2200      	movs	r2, #0
 8002124:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	2201      	movs	r2, #1
 800212a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800212c:	7afb      	ldrb	r3, [r7, #11]
 800212e:	f003 030f 	and.w	r3, r3, #15
 8002132:	b2da      	uxtb	r2, r3
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	799b      	ldrb	r3, [r3, #6]
 800213c:	2b01      	cmp	r3, #1
 800213e:	d102      	bne.n	8002146 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002140:	687a      	ldr	r2, [r7, #4]
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	6818      	ldr	r0, [r3, #0]
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	799b      	ldrb	r3, [r3, #6]
 800214e:	461a      	mov	r2, r3
 8002150:	6979      	ldr	r1, [r7, #20]
 8002152:	f001 ff3f 	bl	8003fd4 <USB_EPStartXfer>

  return HAL_OK;
 8002156:	2300      	movs	r3, #0
}
 8002158:	4618      	mov	r0, r3
 800215a:	3718      	adds	r7, #24
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}

08002160 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b084      	sub	sp, #16
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
 8002168:	460b      	mov	r3, r1
 800216a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800216c:	78fb      	ldrb	r3, [r7, #3]
 800216e:	f003 030f 	and.w	r3, r3, #15
 8002172:	687a      	ldr	r2, [r7, #4]
 8002174:	7912      	ldrb	r2, [r2, #4]
 8002176:	4293      	cmp	r3, r2
 8002178:	d901      	bls.n	800217e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	e04f      	b.n	800221e <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800217e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002182:	2b00      	cmp	r3, #0
 8002184:	da0f      	bge.n	80021a6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002186:	78fb      	ldrb	r3, [r7, #3]
 8002188:	f003 020f 	and.w	r2, r3, #15
 800218c:	4613      	mov	r3, r2
 800218e:	00db      	lsls	r3, r3, #3
 8002190:	4413      	add	r3, r2
 8002192:	009b      	lsls	r3, r3, #2
 8002194:	3310      	adds	r3, #16
 8002196:	687a      	ldr	r2, [r7, #4]
 8002198:	4413      	add	r3, r2
 800219a:	3304      	adds	r3, #4
 800219c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	2201      	movs	r2, #1
 80021a2:	705a      	strb	r2, [r3, #1]
 80021a4:	e00d      	b.n	80021c2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80021a6:	78fa      	ldrb	r2, [r7, #3]
 80021a8:	4613      	mov	r3, r2
 80021aa:	00db      	lsls	r3, r3, #3
 80021ac:	4413      	add	r3, r2
 80021ae:	009b      	lsls	r3, r3, #2
 80021b0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80021b4:	687a      	ldr	r2, [r7, #4]
 80021b6:	4413      	add	r3, r2
 80021b8:	3304      	adds	r3, #4
 80021ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	2200      	movs	r2, #0
 80021c0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	2201      	movs	r2, #1
 80021c6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80021c8:	78fb      	ldrb	r3, [r7, #3]
 80021ca:	f003 030f 	and.w	r3, r3, #15
 80021ce:	b2da      	uxtb	r2, r3
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d101      	bne.n	80021e2 <HAL_PCD_EP_SetStall+0x82>
 80021de:	2302      	movs	r3, #2
 80021e0:	e01d      	b.n	800221e <HAL_PCD_EP_SetStall+0xbe>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2201      	movs	r2, #1
 80021e6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	68f9      	ldr	r1, [r7, #12]
 80021f0:	4618      	mov	r0, r3
 80021f2:	f002 facd 	bl	8004790 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80021f6:	78fb      	ldrb	r3, [r7, #3]
 80021f8:	f003 030f 	and.w	r3, r3, #15
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d109      	bne.n	8002214 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6818      	ldr	r0, [r3, #0]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	7999      	ldrb	r1, [r3, #6]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800220e:	461a      	mov	r2, r3
 8002210:	f002 fcbe 	bl	8004b90 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2200      	movs	r2, #0
 8002218:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800221c:	2300      	movs	r3, #0
}
 800221e:	4618      	mov	r0, r3
 8002220:	3710      	adds	r7, #16
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}

08002226 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002226:	b580      	push	{r7, lr}
 8002228:	b084      	sub	sp, #16
 800222a:	af00      	add	r7, sp, #0
 800222c:	6078      	str	r0, [r7, #4]
 800222e:	460b      	mov	r3, r1
 8002230:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002232:	78fb      	ldrb	r3, [r7, #3]
 8002234:	f003 030f 	and.w	r3, r3, #15
 8002238:	687a      	ldr	r2, [r7, #4]
 800223a:	7912      	ldrb	r2, [r2, #4]
 800223c:	4293      	cmp	r3, r2
 800223e:	d901      	bls.n	8002244 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	e042      	b.n	80022ca <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002244:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002248:	2b00      	cmp	r3, #0
 800224a:	da0f      	bge.n	800226c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800224c:	78fb      	ldrb	r3, [r7, #3]
 800224e:	f003 020f 	and.w	r2, r3, #15
 8002252:	4613      	mov	r3, r2
 8002254:	00db      	lsls	r3, r3, #3
 8002256:	4413      	add	r3, r2
 8002258:	009b      	lsls	r3, r3, #2
 800225a:	3310      	adds	r3, #16
 800225c:	687a      	ldr	r2, [r7, #4]
 800225e:	4413      	add	r3, r2
 8002260:	3304      	adds	r3, #4
 8002262:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	2201      	movs	r2, #1
 8002268:	705a      	strb	r2, [r3, #1]
 800226a:	e00f      	b.n	800228c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800226c:	78fb      	ldrb	r3, [r7, #3]
 800226e:	f003 020f 	and.w	r2, r3, #15
 8002272:	4613      	mov	r3, r2
 8002274:	00db      	lsls	r3, r3, #3
 8002276:	4413      	add	r3, r2
 8002278:	009b      	lsls	r3, r3, #2
 800227a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800227e:	687a      	ldr	r2, [r7, #4]
 8002280:	4413      	add	r3, r2
 8002282:	3304      	adds	r3, #4
 8002284:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	2200      	movs	r2, #0
 800228a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	2200      	movs	r2, #0
 8002290:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002292:	78fb      	ldrb	r3, [r7, #3]
 8002294:	f003 030f 	and.w	r3, r3, #15
 8002298:	b2da      	uxtb	r2, r3
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d101      	bne.n	80022ac <HAL_PCD_EP_ClrStall+0x86>
 80022a8:	2302      	movs	r3, #2
 80022aa:	e00e      	b.n	80022ca <HAL_PCD_EP_ClrStall+0xa4>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2201      	movs	r2, #1
 80022b0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	68f9      	ldr	r1, [r7, #12]
 80022ba:	4618      	mov	r0, r3
 80022bc:	f002 fad6 	bl	800486c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2200      	movs	r2, #0
 80022c4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80022c8:	2300      	movs	r3, #0
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	3710      	adds	r7, #16
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}

080022d2 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80022d2:	b580      	push	{r7, lr}
 80022d4:	b084      	sub	sp, #16
 80022d6:	af00      	add	r7, sp, #0
 80022d8:	6078      	str	r0, [r7, #4]
 80022da:	460b      	mov	r3, r1
 80022dc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80022de:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	da0c      	bge.n	8002300 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80022e6:	78fb      	ldrb	r3, [r7, #3]
 80022e8:	f003 020f 	and.w	r2, r3, #15
 80022ec:	4613      	mov	r3, r2
 80022ee:	00db      	lsls	r3, r3, #3
 80022f0:	4413      	add	r3, r2
 80022f2:	009b      	lsls	r3, r3, #2
 80022f4:	3310      	adds	r3, #16
 80022f6:	687a      	ldr	r2, [r7, #4]
 80022f8:	4413      	add	r3, r2
 80022fa:	3304      	adds	r3, #4
 80022fc:	60fb      	str	r3, [r7, #12]
 80022fe:	e00c      	b.n	800231a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002300:	78fb      	ldrb	r3, [r7, #3]
 8002302:	f003 020f 	and.w	r2, r3, #15
 8002306:	4613      	mov	r3, r2
 8002308:	00db      	lsls	r3, r3, #3
 800230a:	4413      	add	r3, r2
 800230c:	009b      	lsls	r3, r3, #2
 800230e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002312:	687a      	ldr	r2, [r7, #4]
 8002314:	4413      	add	r3, r2
 8002316:	3304      	adds	r3, #4
 8002318:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	68f9      	ldr	r1, [r7, #12]
 8002320:	4618      	mov	r0, r3
 8002322:	f002 f8f5 	bl	8004510 <USB_EPStopXfer>
 8002326:	4603      	mov	r3, r0
 8002328:	72fb      	strb	r3, [r7, #11]

  return ret;
 800232a:	7afb      	ldrb	r3, [r7, #11]
}
 800232c:	4618      	mov	r0, r3
 800232e:	3710      	adds	r7, #16
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}

08002334 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b08a      	sub	sp, #40	@ 0x28
 8002338:	af02      	add	r7, sp, #8
 800233a:	6078      	str	r0, [r7, #4]
 800233c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002348:	683a      	ldr	r2, [r7, #0]
 800234a:	4613      	mov	r3, r2
 800234c:	00db      	lsls	r3, r3, #3
 800234e:	4413      	add	r3, r2
 8002350:	009b      	lsls	r3, r3, #2
 8002352:	3310      	adds	r3, #16
 8002354:	687a      	ldr	r2, [r7, #4]
 8002356:	4413      	add	r3, r2
 8002358:	3304      	adds	r3, #4
 800235a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	695a      	ldr	r2, [r3, #20]
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	691b      	ldr	r3, [r3, #16]
 8002364:	429a      	cmp	r2, r3
 8002366:	d901      	bls.n	800236c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	e06b      	b.n	8002444 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	691a      	ldr	r2, [r3, #16]
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	695b      	ldr	r3, [r3, #20]
 8002374:	1ad3      	subs	r3, r2, r3
 8002376:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	69fa      	ldr	r2, [r7, #28]
 800237e:	429a      	cmp	r2, r3
 8002380:	d902      	bls.n	8002388 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002388:	69fb      	ldr	r3, [r7, #28]
 800238a:	3303      	adds	r3, #3
 800238c:	089b      	lsrs	r3, r3, #2
 800238e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002390:	e02a      	b.n	80023e8 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	691a      	ldr	r2, [r3, #16]
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	695b      	ldr	r3, [r3, #20]
 800239a:	1ad3      	subs	r3, r2, r3
 800239c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	69fa      	ldr	r2, [r7, #28]
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d902      	bls.n	80023ae <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80023ae:	69fb      	ldr	r3, [r7, #28]
 80023b0:	3303      	adds	r3, #3
 80023b2:	089b      	lsrs	r3, r3, #2
 80023b4:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	68d9      	ldr	r1, [r3, #12]
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	b2da      	uxtb	r2, r3
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80023c6:	9300      	str	r3, [sp, #0]
 80023c8:	4603      	mov	r3, r0
 80023ca:	6978      	ldr	r0, [r7, #20]
 80023cc:	f002 f94a 	bl	8004664 <USB_WritePacket>

    ep->xfer_buff  += len;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	68da      	ldr	r2, [r3, #12]
 80023d4:	69fb      	ldr	r3, [r7, #28]
 80023d6:	441a      	add	r2, r3
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	695a      	ldr	r2, [r3, #20]
 80023e0:	69fb      	ldr	r3, [r7, #28]
 80023e2:	441a      	add	r2, r3
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	015a      	lsls	r2, r3, #5
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	4413      	add	r3, r2
 80023f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80023f4:	699b      	ldr	r3, [r3, #24]
 80023f6:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80023f8:	69ba      	ldr	r2, [r7, #24]
 80023fa:	429a      	cmp	r2, r3
 80023fc:	d809      	bhi.n	8002412 <PCD_WriteEmptyTxFifo+0xde>
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	695a      	ldr	r2, [r3, #20]
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002406:	429a      	cmp	r2, r3
 8002408:	d203      	bcs.n	8002412 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	691b      	ldr	r3, [r3, #16]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d1bf      	bne.n	8002392 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	691a      	ldr	r2, [r3, #16]
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	695b      	ldr	r3, [r3, #20]
 800241a:	429a      	cmp	r2, r3
 800241c:	d811      	bhi.n	8002442 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	f003 030f 	and.w	r3, r3, #15
 8002424:	2201      	movs	r2, #1
 8002426:	fa02 f303 	lsl.w	r3, r2, r3
 800242a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002432:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	43db      	mvns	r3, r3
 8002438:	6939      	ldr	r1, [r7, #16]
 800243a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800243e:	4013      	ands	r3, r2
 8002440:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8002442:	2300      	movs	r3, #0
}
 8002444:	4618      	mov	r0, r3
 8002446:	3720      	adds	r7, #32
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}

0800244c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b088      	sub	sp, #32
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
 8002454:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800245c:	69fb      	ldr	r3, [r7, #28]
 800245e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002460:	69fb      	ldr	r3, [r7, #28]
 8002462:	333c      	adds	r3, #60	@ 0x3c
 8002464:	3304      	adds	r3, #4
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	015a      	lsls	r2, r3, #5
 800246e:	69bb      	ldr	r3, [r7, #24]
 8002470:	4413      	add	r3, r2
 8002472:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	799b      	ldrb	r3, [r3, #6]
 800247e:	2b01      	cmp	r3, #1
 8002480:	d17b      	bne.n	800257a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	f003 0308 	and.w	r3, r3, #8
 8002488:	2b00      	cmp	r3, #0
 800248a:	d015      	beq.n	80024b8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	4a61      	ldr	r2, [pc, #388]	@ (8002614 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002490:	4293      	cmp	r3, r2
 8002492:	f240 80b9 	bls.w	8002608 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800249c:	2b00      	cmp	r3, #0
 800249e:	f000 80b3 	beq.w	8002608 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	015a      	lsls	r2, r3, #5
 80024a6:	69bb      	ldr	r3, [r7, #24]
 80024a8:	4413      	add	r3, r2
 80024aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80024ae:	461a      	mov	r2, r3
 80024b0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80024b4:	6093      	str	r3, [r2, #8]
 80024b6:	e0a7      	b.n	8002608 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	f003 0320 	and.w	r3, r3, #32
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d009      	beq.n	80024d6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	015a      	lsls	r2, r3, #5
 80024c6:	69bb      	ldr	r3, [r7, #24]
 80024c8:	4413      	add	r3, r2
 80024ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80024ce:	461a      	mov	r2, r3
 80024d0:	2320      	movs	r3, #32
 80024d2:	6093      	str	r3, [r2, #8]
 80024d4:	e098      	b.n	8002608 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80024dc:	2b00      	cmp	r3, #0
 80024de:	f040 8093 	bne.w	8002608 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	4a4b      	ldr	r2, [pc, #300]	@ (8002614 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d90f      	bls.n	800250a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d00a      	beq.n	800250a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	015a      	lsls	r2, r3, #5
 80024f8:	69bb      	ldr	r3, [r7, #24]
 80024fa:	4413      	add	r3, r2
 80024fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002500:	461a      	mov	r2, r3
 8002502:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002506:	6093      	str	r3, [r2, #8]
 8002508:	e07e      	b.n	8002608 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800250a:	683a      	ldr	r2, [r7, #0]
 800250c:	4613      	mov	r3, r2
 800250e:	00db      	lsls	r3, r3, #3
 8002510:	4413      	add	r3, r2
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002518:	687a      	ldr	r2, [r7, #4]
 800251a:	4413      	add	r3, r2
 800251c:	3304      	adds	r3, #4
 800251e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	6a1a      	ldr	r2, [r3, #32]
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	0159      	lsls	r1, r3, #5
 8002528:	69bb      	ldr	r3, [r7, #24]
 800252a:	440b      	add	r3, r1
 800252c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002530:	691b      	ldr	r3, [r3, #16]
 8002532:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002536:	1ad2      	subs	r2, r2, r3
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d114      	bne.n	800256c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	691b      	ldr	r3, [r3, #16]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d109      	bne.n	800255e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6818      	ldr	r0, [r3, #0]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002554:	461a      	mov	r2, r3
 8002556:	2101      	movs	r1, #1
 8002558:	f002 fb1a 	bl	8004b90 <USB_EP0_OutStart>
 800255c:	e006      	b.n	800256c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	68da      	ldr	r2, [r3, #12]
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	695b      	ldr	r3, [r3, #20]
 8002566:	441a      	add	r2, r3
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	b2db      	uxtb	r3, r3
 8002570:	4619      	mov	r1, r3
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	f007 f8e4 	bl	8009740 <HAL_PCD_DataOutStageCallback>
 8002578:	e046      	b.n	8002608 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	4a26      	ldr	r2, [pc, #152]	@ (8002618 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d124      	bne.n	80025cc <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002588:	2b00      	cmp	r3, #0
 800258a:	d00a      	beq.n	80025a2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	015a      	lsls	r2, r3, #5
 8002590:	69bb      	ldr	r3, [r7, #24]
 8002592:	4413      	add	r3, r2
 8002594:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002598:	461a      	mov	r2, r3
 800259a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800259e:	6093      	str	r3, [r2, #8]
 80025a0:	e032      	b.n	8002608 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	f003 0320 	and.w	r3, r3, #32
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d008      	beq.n	80025be <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	015a      	lsls	r2, r3, #5
 80025b0:	69bb      	ldr	r3, [r7, #24]
 80025b2:	4413      	add	r3, r2
 80025b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80025b8:	461a      	mov	r2, r3
 80025ba:	2320      	movs	r3, #32
 80025bc:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	b2db      	uxtb	r3, r3
 80025c2:	4619      	mov	r1, r3
 80025c4:	6878      	ldr	r0, [r7, #4]
 80025c6:	f007 f8bb 	bl	8009740 <HAL_PCD_DataOutStageCallback>
 80025ca:	e01d      	b.n	8002608 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d114      	bne.n	80025fc <PCD_EP_OutXfrComplete_int+0x1b0>
 80025d2:	6879      	ldr	r1, [r7, #4]
 80025d4:	683a      	ldr	r2, [r7, #0]
 80025d6:	4613      	mov	r3, r2
 80025d8:	00db      	lsls	r3, r3, #3
 80025da:	4413      	add	r3, r2
 80025dc:	009b      	lsls	r3, r3, #2
 80025de:	440b      	add	r3, r1
 80025e0:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d108      	bne.n	80025fc <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6818      	ldr	r0, [r3, #0]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80025f4:	461a      	mov	r2, r3
 80025f6:	2100      	movs	r1, #0
 80025f8:	f002 faca 	bl	8004b90 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	b2db      	uxtb	r3, r3
 8002600:	4619      	mov	r1, r3
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f007 f89c 	bl	8009740 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002608:	2300      	movs	r3, #0
}
 800260a:	4618      	mov	r0, r3
 800260c:	3720      	adds	r7, #32
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	4f54300a 	.word	0x4f54300a
 8002618:	4f54310a 	.word	0x4f54310a

0800261c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b086      	sub	sp, #24
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
 8002624:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	333c      	adds	r3, #60	@ 0x3c
 8002634:	3304      	adds	r3, #4
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	015a      	lsls	r2, r3, #5
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	4413      	add	r3, r2
 8002642:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	4a15      	ldr	r2, [pc, #84]	@ (80026a4 <PCD_EP_OutSetupPacket_int+0x88>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d90e      	bls.n	8002670 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002658:	2b00      	cmp	r3, #0
 800265a:	d009      	beq.n	8002670 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	015a      	lsls	r2, r3, #5
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	4413      	add	r3, r2
 8002664:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002668:	461a      	mov	r2, r3
 800266a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800266e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002670:	6878      	ldr	r0, [r7, #4]
 8002672:	f007 f853 	bl	800971c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	4a0a      	ldr	r2, [pc, #40]	@ (80026a4 <PCD_EP_OutSetupPacket_int+0x88>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d90c      	bls.n	8002698 <PCD_EP_OutSetupPacket_int+0x7c>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	799b      	ldrb	r3, [r3, #6]
 8002682:	2b01      	cmp	r3, #1
 8002684:	d108      	bne.n	8002698 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6818      	ldr	r0, [r3, #0]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002690:	461a      	mov	r2, r3
 8002692:	2101      	movs	r1, #1
 8002694:	f002 fa7c 	bl	8004b90 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002698:	2300      	movs	r3, #0
}
 800269a:	4618      	mov	r0, r3
 800269c:	3718      	adds	r7, #24
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	4f54300a 	.word	0x4f54300a

080026a8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b085      	sub	sp, #20
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
 80026b0:	460b      	mov	r3, r1
 80026b2:	70fb      	strb	r3, [r7, #3]
 80026b4:	4613      	mov	r3, r2
 80026b6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026be:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80026c0:	78fb      	ldrb	r3, [r7, #3]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d107      	bne.n	80026d6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80026c6:	883b      	ldrh	r3, [r7, #0]
 80026c8:	0419      	lsls	r1, r3, #16
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	68ba      	ldr	r2, [r7, #8]
 80026d0:	430a      	orrs	r2, r1
 80026d2:	629a      	str	r2, [r3, #40]	@ 0x28
 80026d4:	e028      	b.n	8002728 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026dc:	0c1b      	lsrs	r3, r3, #16
 80026de:	68ba      	ldr	r2, [r7, #8]
 80026e0:	4413      	add	r3, r2
 80026e2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80026e4:	2300      	movs	r3, #0
 80026e6:	73fb      	strb	r3, [r7, #15]
 80026e8:	e00d      	b.n	8002706 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	7bfb      	ldrb	r3, [r7, #15]
 80026f0:	3340      	adds	r3, #64	@ 0x40
 80026f2:	009b      	lsls	r3, r3, #2
 80026f4:	4413      	add	r3, r2
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	0c1b      	lsrs	r3, r3, #16
 80026fa:	68ba      	ldr	r2, [r7, #8]
 80026fc:	4413      	add	r3, r2
 80026fe:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002700:	7bfb      	ldrb	r3, [r7, #15]
 8002702:	3301      	adds	r3, #1
 8002704:	73fb      	strb	r3, [r7, #15]
 8002706:	7bfa      	ldrb	r2, [r7, #15]
 8002708:	78fb      	ldrb	r3, [r7, #3]
 800270a:	3b01      	subs	r3, #1
 800270c:	429a      	cmp	r2, r3
 800270e:	d3ec      	bcc.n	80026ea <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002710:	883b      	ldrh	r3, [r7, #0]
 8002712:	0418      	lsls	r0, r3, #16
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6819      	ldr	r1, [r3, #0]
 8002718:	78fb      	ldrb	r3, [r7, #3]
 800271a:	3b01      	subs	r3, #1
 800271c:	68ba      	ldr	r2, [r7, #8]
 800271e:	4302      	orrs	r2, r0
 8002720:	3340      	adds	r3, #64	@ 0x40
 8002722:	009b      	lsls	r3, r3, #2
 8002724:	440b      	add	r3, r1
 8002726:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002728:	2300      	movs	r3, #0
}
 800272a:	4618      	mov	r0, r3
 800272c:	3714      	adds	r7, #20
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr

08002736 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002736:	b480      	push	{r7}
 8002738:	b083      	sub	sp, #12
 800273a:	af00      	add	r7, sp, #0
 800273c:	6078      	str	r0, [r7, #4]
 800273e:	460b      	mov	r3, r1
 8002740:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	887a      	ldrh	r2, [r7, #2]
 8002748:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800274a:	2300      	movs	r3, #0
}
 800274c:	4618      	mov	r0, r3
 800274e:	370c      	adds	r7, #12
 8002750:	46bd      	mov	sp, r7
 8002752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002756:	4770      	bx	lr

08002758 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002758:	b480      	push	{r7}
 800275a:	b083      	sub	sp, #12
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
 8002760:	460b      	mov	r3, r1
 8002762:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002764:	bf00      	nop
 8002766:	370c      	adds	r7, #12
 8002768:	46bd      	mov	sp, r7
 800276a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276e:	4770      	bx	lr

08002770 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b086      	sub	sp, #24
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d101      	bne.n	8002782 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	e267      	b.n	8002c52 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 0301 	and.w	r3, r3, #1
 800278a:	2b00      	cmp	r3, #0
 800278c:	d075      	beq.n	800287a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800278e:	4b88      	ldr	r3, [pc, #544]	@ (80029b0 <HAL_RCC_OscConfig+0x240>)
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	f003 030c 	and.w	r3, r3, #12
 8002796:	2b04      	cmp	r3, #4
 8002798:	d00c      	beq.n	80027b4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800279a:	4b85      	ldr	r3, [pc, #532]	@ (80029b0 <HAL_RCC_OscConfig+0x240>)
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80027a2:	2b08      	cmp	r3, #8
 80027a4:	d112      	bne.n	80027cc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027a6:	4b82      	ldr	r3, [pc, #520]	@ (80029b0 <HAL_RCC_OscConfig+0x240>)
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80027ae:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80027b2:	d10b      	bne.n	80027cc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027b4:	4b7e      	ldr	r3, [pc, #504]	@ (80029b0 <HAL_RCC_OscConfig+0x240>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d05b      	beq.n	8002878 <HAL_RCC_OscConfig+0x108>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d157      	bne.n	8002878 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	e242      	b.n	8002c52 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80027d4:	d106      	bne.n	80027e4 <HAL_RCC_OscConfig+0x74>
 80027d6:	4b76      	ldr	r3, [pc, #472]	@ (80029b0 <HAL_RCC_OscConfig+0x240>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a75      	ldr	r2, [pc, #468]	@ (80029b0 <HAL_RCC_OscConfig+0x240>)
 80027dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027e0:	6013      	str	r3, [r2, #0]
 80027e2:	e01d      	b.n	8002820 <HAL_RCC_OscConfig+0xb0>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80027ec:	d10c      	bne.n	8002808 <HAL_RCC_OscConfig+0x98>
 80027ee:	4b70      	ldr	r3, [pc, #448]	@ (80029b0 <HAL_RCC_OscConfig+0x240>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a6f      	ldr	r2, [pc, #444]	@ (80029b0 <HAL_RCC_OscConfig+0x240>)
 80027f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80027f8:	6013      	str	r3, [r2, #0]
 80027fa:	4b6d      	ldr	r3, [pc, #436]	@ (80029b0 <HAL_RCC_OscConfig+0x240>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a6c      	ldr	r2, [pc, #432]	@ (80029b0 <HAL_RCC_OscConfig+0x240>)
 8002800:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002804:	6013      	str	r3, [r2, #0]
 8002806:	e00b      	b.n	8002820 <HAL_RCC_OscConfig+0xb0>
 8002808:	4b69      	ldr	r3, [pc, #420]	@ (80029b0 <HAL_RCC_OscConfig+0x240>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a68      	ldr	r2, [pc, #416]	@ (80029b0 <HAL_RCC_OscConfig+0x240>)
 800280e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002812:	6013      	str	r3, [r2, #0]
 8002814:	4b66      	ldr	r3, [pc, #408]	@ (80029b0 <HAL_RCC_OscConfig+0x240>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a65      	ldr	r2, [pc, #404]	@ (80029b0 <HAL_RCC_OscConfig+0x240>)
 800281a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800281e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d013      	beq.n	8002850 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002828:	f7fe fa3e 	bl	8000ca8 <HAL_GetTick>
 800282c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800282e:	e008      	b.n	8002842 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002830:	f7fe fa3a 	bl	8000ca8 <HAL_GetTick>
 8002834:	4602      	mov	r2, r0
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	1ad3      	subs	r3, r2, r3
 800283a:	2b64      	cmp	r3, #100	@ 0x64
 800283c:	d901      	bls.n	8002842 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800283e:	2303      	movs	r3, #3
 8002840:	e207      	b.n	8002c52 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002842:	4b5b      	ldr	r3, [pc, #364]	@ (80029b0 <HAL_RCC_OscConfig+0x240>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800284a:	2b00      	cmp	r3, #0
 800284c:	d0f0      	beq.n	8002830 <HAL_RCC_OscConfig+0xc0>
 800284e:	e014      	b.n	800287a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002850:	f7fe fa2a 	bl	8000ca8 <HAL_GetTick>
 8002854:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002856:	e008      	b.n	800286a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002858:	f7fe fa26 	bl	8000ca8 <HAL_GetTick>
 800285c:	4602      	mov	r2, r0
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	1ad3      	subs	r3, r2, r3
 8002862:	2b64      	cmp	r3, #100	@ 0x64
 8002864:	d901      	bls.n	800286a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002866:	2303      	movs	r3, #3
 8002868:	e1f3      	b.n	8002c52 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800286a:	4b51      	ldr	r3, [pc, #324]	@ (80029b0 <HAL_RCC_OscConfig+0x240>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002872:	2b00      	cmp	r3, #0
 8002874:	d1f0      	bne.n	8002858 <HAL_RCC_OscConfig+0xe8>
 8002876:	e000      	b.n	800287a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002878:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 0302 	and.w	r3, r3, #2
 8002882:	2b00      	cmp	r3, #0
 8002884:	d063      	beq.n	800294e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002886:	4b4a      	ldr	r3, [pc, #296]	@ (80029b0 <HAL_RCC_OscConfig+0x240>)
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	f003 030c 	and.w	r3, r3, #12
 800288e:	2b00      	cmp	r3, #0
 8002890:	d00b      	beq.n	80028aa <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002892:	4b47      	ldr	r3, [pc, #284]	@ (80029b0 <HAL_RCC_OscConfig+0x240>)
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800289a:	2b08      	cmp	r3, #8
 800289c:	d11c      	bne.n	80028d8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800289e:	4b44      	ldr	r3, [pc, #272]	@ (80029b0 <HAL_RCC_OscConfig+0x240>)
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d116      	bne.n	80028d8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028aa:	4b41      	ldr	r3, [pc, #260]	@ (80029b0 <HAL_RCC_OscConfig+0x240>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 0302 	and.w	r3, r3, #2
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d005      	beq.n	80028c2 <HAL_RCC_OscConfig+0x152>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	68db      	ldr	r3, [r3, #12]
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d001      	beq.n	80028c2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	e1c7      	b.n	8002c52 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028c2:	4b3b      	ldr	r3, [pc, #236]	@ (80029b0 <HAL_RCC_OscConfig+0x240>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	691b      	ldr	r3, [r3, #16]
 80028ce:	00db      	lsls	r3, r3, #3
 80028d0:	4937      	ldr	r1, [pc, #220]	@ (80029b0 <HAL_RCC_OscConfig+0x240>)
 80028d2:	4313      	orrs	r3, r2
 80028d4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028d6:	e03a      	b.n	800294e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d020      	beq.n	8002922 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028e0:	4b34      	ldr	r3, [pc, #208]	@ (80029b4 <HAL_RCC_OscConfig+0x244>)
 80028e2:	2201      	movs	r2, #1
 80028e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028e6:	f7fe f9df 	bl	8000ca8 <HAL_GetTick>
 80028ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028ec:	e008      	b.n	8002900 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028ee:	f7fe f9db 	bl	8000ca8 <HAL_GetTick>
 80028f2:	4602      	mov	r2, r0
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	1ad3      	subs	r3, r2, r3
 80028f8:	2b02      	cmp	r3, #2
 80028fa:	d901      	bls.n	8002900 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80028fc:	2303      	movs	r3, #3
 80028fe:	e1a8      	b.n	8002c52 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002900:	4b2b      	ldr	r3, [pc, #172]	@ (80029b0 <HAL_RCC_OscConfig+0x240>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 0302 	and.w	r3, r3, #2
 8002908:	2b00      	cmp	r3, #0
 800290a:	d0f0      	beq.n	80028ee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800290c:	4b28      	ldr	r3, [pc, #160]	@ (80029b0 <HAL_RCC_OscConfig+0x240>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	691b      	ldr	r3, [r3, #16]
 8002918:	00db      	lsls	r3, r3, #3
 800291a:	4925      	ldr	r1, [pc, #148]	@ (80029b0 <HAL_RCC_OscConfig+0x240>)
 800291c:	4313      	orrs	r3, r2
 800291e:	600b      	str	r3, [r1, #0]
 8002920:	e015      	b.n	800294e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002922:	4b24      	ldr	r3, [pc, #144]	@ (80029b4 <HAL_RCC_OscConfig+0x244>)
 8002924:	2200      	movs	r2, #0
 8002926:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002928:	f7fe f9be 	bl	8000ca8 <HAL_GetTick>
 800292c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800292e:	e008      	b.n	8002942 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002930:	f7fe f9ba 	bl	8000ca8 <HAL_GetTick>
 8002934:	4602      	mov	r2, r0
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	1ad3      	subs	r3, r2, r3
 800293a:	2b02      	cmp	r3, #2
 800293c:	d901      	bls.n	8002942 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800293e:	2303      	movs	r3, #3
 8002940:	e187      	b.n	8002c52 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002942:	4b1b      	ldr	r3, [pc, #108]	@ (80029b0 <HAL_RCC_OscConfig+0x240>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 0302 	and.w	r3, r3, #2
 800294a:	2b00      	cmp	r3, #0
 800294c:	d1f0      	bne.n	8002930 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 0308 	and.w	r3, r3, #8
 8002956:	2b00      	cmp	r3, #0
 8002958:	d036      	beq.n	80029c8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	695b      	ldr	r3, [r3, #20]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d016      	beq.n	8002990 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002962:	4b15      	ldr	r3, [pc, #84]	@ (80029b8 <HAL_RCC_OscConfig+0x248>)
 8002964:	2201      	movs	r2, #1
 8002966:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002968:	f7fe f99e 	bl	8000ca8 <HAL_GetTick>
 800296c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800296e:	e008      	b.n	8002982 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002970:	f7fe f99a 	bl	8000ca8 <HAL_GetTick>
 8002974:	4602      	mov	r2, r0
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	1ad3      	subs	r3, r2, r3
 800297a:	2b02      	cmp	r3, #2
 800297c:	d901      	bls.n	8002982 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800297e:	2303      	movs	r3, #3
 8002980:	e167      	b.n	8002c52 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002982:	4b0b      	ldr	r3, [pc, #44]	@ (80029b0 <HAL_RCC_OscConfig+0x240>)
 8002984:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002986:	f003 0302 	and.w	r3, r3, #2
 800298a:	2b00      	cmp	r3, #0
 800298c:	d0f0      	beq.n	8002970 <HAL_RCC_OscConfig+0x200>
 800298e:	e01b      	b.n	80029c8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002990:	4b09      	ldr	r3, [pc, #36]	@ (80029b8 <HAL_RCC_OscConfig+0x248>)
 8002992:	2200      	movs	r2, #0
 8002994:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002996:	f7fe f987 	bl	8000ca8 <HAL_GetTick>
 800299a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800299c:	e00e      	b.n	80029bc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800299e:	f7fe f983 	bl	8000ca8 <HAL_GetTick>
 80029a2:	4602      	mov	r2, r0
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	1ad3      	subs	r3, r2, r3
 80029a8:	2b02      	cmp	r3, #2
 80029aa:	d907      	bls.n	80029bc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80029ac:	2303      	movs	r3, #3
 80029ae:	e150      	b.n	8002c52 <HAL_RCC_OscConfig+0x4e2>
 80029b0:	40023800 	.word	0x40023800
 80029b4:	42470000 	.word	0x42470000
 80029b8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029bc:	4b88      	ldr	r3, [pc, #544]	@ (8002be0 <HAL_RCC_OscConfig+0x470>)
 80029be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80029c0:	f003 0302 	and.w	r3, r3, #2
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d1ea      	bne.n	800299e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f003 0304 	and.w	r3, r3, #4
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	f000 8097 	beq.w	8002b04 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029d6:	2300      	movs	r3, #0
 80029d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029da:	4b81      	ldr	r3, [pc, #516]	@ (8002be0 <HAL_RCC_OscConfig+0x470>)
 80029dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d10f      	bne.n	8002a06 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029e6:	2300      	movs	r3, #0
 80029e8:	60bb      	str	r3, [r7, #8]
 80029ea:	4b7d      	ldr	r3, [pc, #500]	@ (8002be0 <HAL_RCC_OscConfig+0x470>)
 80029ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ee:	4a7c      	ldr	r2, [pc, #496]	@ (8002be0 <HAL_RCC_OscConfig+0x470>)
 80029f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80029f6:	4b7a      	ldr	r3, [pc, #488]	@ (8002be0 <HAL_RCC_OscConfig+0x470>)
 80029f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029fe:	60bb      	str	r3, [r7, #8]
 8002a00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a02:	2301      	movs	r3, #1
 8002a04:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a06:	4b77      	ldr	r3, [pc, #476]	@ (8002be4 <HAL_RCC_OscConfig+0x474>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d118      	bne.n	8002a44 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a12:	4b74      	ldr	r3, [pc, #464]	@ (8002be4 <HAL_RCC_OscConfig+0x474>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a73      	ldr	r2, [pc, #460]	@ (8002be4 <HAL_RCC_OscConfig+0x474>)
 8002a18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a1e:	f7fe f943 	bl	8000ca8 <HAL_GetTick>
 8002a22:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a24:	e008      	b.n	8002a38 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a26:	f7fe f93f 	bl	8000ca8 <HAL_GetTick>
 8002a2a:	4602      	mov	r2, r0
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	1ad3      	subs	r3, r2, r3
 8002a30:	2b02      	cmp	r3, #2
 8002a32:	d901      	bls.n	8002a38 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002a34:	2303      	movs	r3, #3
 8002a36:	e10c      	b.n	8002c52 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a38:	4b6a      	ldr	r3, [pc, #424]	@ (8002be4 <HAL_RCC_OscConfig+0x474>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d0f0      	beq.n	8002a26 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	d106      	bne.n	8002a5a <HAL_RCC_OscConfig+0x2ea>
 8002a4c:	4b64      	ldr	r3, [pc, #400]	@ (8002be0 <HAL_RCC_OscConfig+0x470>)
 8002a4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a50:	4a63      	ldr	r2, [pc, #396]	@ (8002be0 <HAL_RCC_OscConfig+0x470>)
 8002a52:	f043 0301 	orr.w	r3, r3, #1
 8002a56:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a58:	e01c      	b.n	8002a94 <HAL_RCC_OscConfig+0x324>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	2b05      	cmp	r3, #5
 8002a60:	d10c      	bne.n	8002a7c <HAL_RCC_OscConfig+0x30c>
 8002a62:	4b5f      	ldr	r3, [pc, #380]	@ (8002be0 <HAL_RCC_OscConfig+0x470>)
 8002a64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a66:	4a5e      	ldr	r2, [pc, #376]	@ (8002be0 <HAL_RCC_OscConfig+0x470>)
 8002a68:	f043 0304 	orr.w	r3, r3, #4
 8002a6c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a6e:	4b5c      	ldr	r3, [pc, #368]	@ (8002be0 <HAL_RCC_OscConfig+0x470>)
 8002a70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a72:	4a5b      	ldr	r2, [pc, #364]	@ (8002be0 <HAL_RCC_OscConfig+0x470>)
 8002a74:	f043 0301 	orr.w	r3, r3, #1
 8002a78:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a7a:	e00b      	b.n	8002a94 <HAL_RCC_OscConfig+0x324>
 8002a7c:	4b58      	ldr	r3, [pc, #352]	@ (8002be0 <HAL_RCC_OscConfig+0x470>)
 8002a7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a80:	4a57      	ldr	r2, [pc, #348]	@ (8002be0 <HAL_RCC_OscConfig+0x470>)
 8002a82:	f023 0301 	bic.w	r3, r3, #1
 8002a86:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a88:	4b55      	ldr	r3, [pc, #340]	@ (8002be0 <HAL_RCC_OscConfig+0x470>)
 8002a8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a8c:	4a54      	ldr	r2, [pc, #336]	@ (8002be0 <HAL_RCC_OscConfig+0x470>)
 8002a8e:	f023 0304 	bic.w	r3, r3, #4
 8002a92:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d015      	beq.n	8002ac8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a9c:	f7fe f904 	bl	8000ca8 <HAL_GetTick>
 8002aa0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002aa2:	e00a      	b.n	8002aba <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002aa4:	f7fe f900 	bl	8000ca8 <HAL_GetTick>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d901      	bls.n	8002aba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	e0cb      	b.n	8002c52 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002aba:	4b49      	ldr	r3, [pc, #292]	@ (8002be0 <HAL_RCC_OscConfig+0x470>)
 8002abc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002abe:	f003 0302 	and.w	r3, r3, #2
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d0ee      	beq.n	8002aa4 <HAL_RCC_OscConfig+0x334>
 8002ac6:	e014      	b.n	8002af2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ac8:	f7fe f8ee 	bl	8000ca8 <HAL_GetTick>
 8002acc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ace:	e00a      	b.n	8002ae6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ad0:	f7fe f8ea 	bl	8000ca8 <HAL_GetTick>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	1ad3      	subs	r3, r2, r3
 8002ada:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d901      	bls.n	8002ae6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002ae2:	2303      	movs	r3, #3
 8002ae4:	e0b5      	b.n	8002c52 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ae6:	4b3e      	ldr	r3, [pc, #248]	@ (8002be0 <HAL_RCC_OscConfig+0x470>)
 8002ae8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002aea:	f003 0302 	and.w	r3, r3, #2
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d1ee      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002af2:	7dfb      	ldrb	r3, [r7, #23]
 8002af4:	2b01      	cmp	r3, #1
 8002af6:	d105      	bne.n	8002b04 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002af8:	4b39      	ldr	r3, [pc, #228]	@ (8002be0 <HAL_RCC_OscConfig+0x470>)
 8002afa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002afc:	4a38      	ldr	r2, [pc, #224]	@ (8002be0 <HAL_RCC_OscConfig+0x470>)
 8002afe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b02:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	699b      	ldr	r3, [r3, #24]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	f000 80a1 	beq.w	8002c50 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b0e:	4b34      	ldr	r3, [pc, #208]	@ (8002be0 <HAL_RCC_OscConfig+0x470>)
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	f003 030c 	and.w	r3, r3, #12
 8002b16:	2b08      	cmp	r3, #8
 8002b18:	d05c      	beq.n	8002bd4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	699b      	ldr	r3, [r3, #24]
 8002b1e:	2b02      	cmp	r3, #2
 8002b20:	d141      	bne.n	8002ba6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b22:	4b31      	ldr	r3, [pc, #196]	@ (8002be8 <HAL_RCC_OscConfig+0x478>)
 8002b24:	2200      	movs	r2, #0
 8002b26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b28:	f7fe f8be 	bl	8000ca8 <HAL_GetTick>
 8002b2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b2e:	e008      	b.n	8002b42 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b30:	f7fe f8ba 	bl	8000ca8 <HAL_GetTick>
 8002b34:	4602      	mov	r2, r0
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	1ad3      	subs	r3, r2, r3
 8002b3a:	2b02      	cmp	r3, #2
 8002b3c:	d901      	bls.n	8002b42 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002b3e:	2303      	movs	r3, #3
 8002b40:	e087      	b.n	8002c52 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b42:	4b27      	ldr	r3, [pc, #156]	@ (8002be0 <HAL_RCC_OscConfig+0x470>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d1f0      	bne.n	8002b30 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	69da      	ldr	r2, [r3, #28]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6a1b      	ldr	r3, [r3, #32]
 8002b56:	431a      	orrs	r2, r3
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b5c:	019b      	lsls	r3, r3, #6
 8002b5e:	431a      	orrs	r2, r3
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b64:	085b      	lsrs	r3, r3, #1
 8002b66:	3b01      	subs	r3, #1
 8002b68:	041b      	lsls	r3, r3, #16
 8002b6a:	431a      	orrs	r2, r3
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b70:	061b      	lsls	r3, r3, #24
 8002b72:	491b      	ldr	r1, [pc, #108]	@ (8002be0 <HAL_RCC_OscConfig+0x470>)
 8002b74:	4313      	orrs	r3, r2
 8002b76:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b78:	4b1b      	ldr	r3, [pc, #108]	@ (8002be8 <HAL_RCC_OscConfig+0x478>)
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b7e:	f7fe f893 	bl	8000ca8 <HAL_GetTick>
 8002b82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b84:	e008      	b.n	8002b98 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b86:	f7fe f88f 	bl	8000ca8 <HAL_GetTick>
 8002b8a:	4602      	mov	r2, r0
 8002b8c:	693b      	ldr	r3, [r7, #16]
 8002b8e:	1ad3      	subs	r3, r2, r3
 8002b90:	2b02      	cmp	r3, #2
 8002b92:	d901      	bls.n	8002b98 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002b94:	2303      	movs	r3, #3
 8002b96:	e05c      	b.n	8002c52 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b98:	4b11      	ldr	r3, [pc, #68]	@ (8002be0 <HAL_RCC_OscConfig+0x470>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d0f0      	beq.n	8002b86 <HAL_RCC_OscConfig+0x416>
 8002ba4:	e054      	b.n	8002c50 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ba6:	4b10      	ldr	r3, [pc, #64]	@ (8002be8 <HAL_RCC_OscConfig+0x478>)
 8002ba8:	2200      	movs	r2, #0
 8002baa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bac:	f7fe f87c 	bl	8000ca8 <HAL_GetTick>
 8002bb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bb2:	e008      	b.n	8002bc6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bb4:	f7fe f878 	bl	8000ca8 <HAL_GetTick>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	1ad3      	subs	r3, r2, r3
 8002bbe:	2b02      	cmp	r3, #2
 8002bc0:	d901      	bls.n	8002bc6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002bc2:	2303      	movs	r3, #3
 8002bc4:	e045      	b.n	8002c52 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bc6:	4b06      	ldr	r3, [pc, #24]	@ (8002be0 <HAL_RCC_OscConfig+0x470>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d1f0      	bne.n	8002bb4 <HAL_RCC_OscConfig+0x444>
 8002bd2:	e03d      	b.n	8002c50 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	699b      	ldr	r3, [r3, #24]
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	d107      	bne.n	8002bec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	e038      	b.n	8002c52 <HAL_RCC_OscConfig+0x4e2>
 8002be0:	40023800 	.word	0x40023800
 8002be4:	40007000 	.word	0x40007000
 8002be8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002bec:	4b1b      	ldr	r3, [pc, #108]	@ (8002c5c <HAL_RCC_OscConfig+0x4ec>)
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	699b      	ldr	r3, [r3, #24]
 8002bf6:	2b01      	cmp	r3, #1
 8002bf8:	d028      	beq.n	8002c4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d121      	bne.n	8002c4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c12:	429a      	cmp	r2, r3
 8002c14:	d11a      	bne.n	8002c4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c16:	68fa      	ldr	r2, [r7, #12]
 8002c18:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	687a      	ldr	r2, [r7, #4]
 8002c20:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002c22:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d111      	bne.n	8002c4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c32:	085b      	lsrs	r3, r3, #1
 8002c34:	3b01      	subs	r3, #1
 8002c36:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d107      	bne.n	8002c4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c46:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	d001      	beq.n	8002c50 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	e000      	b.n	8002c52 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002c50:	2300      	movs	r3, #0
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3718      	adds	r7, #24
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	40023800 	.word	0x40023800

08002c60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b084      	sub	sp, #16
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
 8002c68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d101      	bne.n	8002c74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	e0cc      	b.n	8002e0e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c74:	4b68      	ldr	r3, [pc, #416]	@ (8002e18 <HAL_RCC_ClockConfig+0x1b8>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f003 0307 	and.w	r3, r3, #7
 8002c7c:	683a      	ldr	r2, [r7, #0]
 8002c7e:	429a      	cmp	r2, r3
 8002c80:	d90c      	bls.n	8002c9c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c82:	4b65      	ldr	r3, [pc, #404]	@ (8002e18 <HAL_RCC_ClockConfig+0x1b8>)
 8002c84:	683a      	ldr	r2, [r7, #0]
 8002c86:	b2d2      	uxtb	r2, r2
 8002c88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c8a:	4b63      	ldr	r3, [pc, #396]	@ (8002e18 <HAL_RCC_ClockConfig+0x1b8>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 0307 	and.w	r3, r3, #7
 8002c92:	683a      	ldr	r2, [r7, #0]
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d001      	beq.n	8002c9c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	e0b8      	b.n	8002e0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f003 0302 	and.w	r3, r3, #2
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d020      	beq.n	8002cea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f003 0304 	and.w	r3, r3, #4
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d005      	beq.n	8002cc0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002cb4:	4b59      	ldr	r3, [pc, #356]	@ (8002e1c <HAL_RCC_ClockConfig+0x1bc>)
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	4a58      	ldr	r2, [pc, #352]	@ (8002e1c <HAL_RCC_ClockConfig+0x1bc>)
 8002cba:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002cbe:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f003 0308 	and.w	r3, r3, #8
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d005      	beq.n	8002cd8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ccc:	4b53      	ldr	r3, [pc, #332]	@ (8002e1c <HAL_RCC_ClockConfig+0x1bc>)
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	4a52      	ldr	r2, [pc, #328]	@ (8002e1c <HAL_RCC_ClockConfig+0x1bc>)
 8002cd2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002cd6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cd8:	4b50      	ldr	r3, [pc, #320]	@ (8002e1c <HAL_RCC_ClockConfig+0x1bc>)
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	494d      	ldr	r1, [pc, #308]	@ (8002e1c <HAL_RCC_ClockConfig+0x1bc>)
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 0301 	and.w	r3, r3, #1
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d044      	beq.n	8002d80 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d107      	bne.n	8002d0e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cfe:	4b47      	ldr	r3, [pc, #284]	@ (8002e1c <HAL_RCC_ClockConfig+0x1bc>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d119      	bne.n	8002d3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e07f      	b.n	8002e0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	2b02      	cmp	r3, #2
 8002d14:	d003      	beq.n	8002d1e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d1a:	2b03      	cmp	r3, #3
 8002d1c:	d107      	bne.n	8002d2e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d1e:	4b3f      	ldr	r3, [pc, #252]	@ (8002e1c <HAL_RCC_ClockConfig+0x1bc>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d109      	bne.n	8002d3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e06f      	b.n	8002e0e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d2e:	4b3b      	ldr	r3, [pc, #236]	@ (8002e1c <HAL_RCC_ClockConfig+0x1bc>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 0302 	and.w	r3, r3, #2
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d101      	bne.n	8002d3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e067      	b.n	8002e0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d3e:	4b37      	ldr	r3, [pc, #220]	@ (8002e1c <HAL_RCC_ClockConfig+0x1bc>)
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	f023 0203 	bic.w	r2, r3, #3
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	4934      	ldr	r1, [pc, #208]	@ (8002e1c <HAL_RCC_ClockConfig+0x1bc>)
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d50:	f7fd ffaa 	bl	8000ca8 <HAL_GetTick>
 8002d54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d56:	e00a      	b.n	8002d6e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d58:	f7fd ffa6 	bl	8000ca8 <HAL_GetTick>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	1ad3      	subs	r3, r2, r3
 8002d62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d901      	bls.n	8002d6e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d6a:	2303      	movs	r3, #3
 8002d6c:	e04f      	b.n	8002e0e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d6e:	4b2b      	ldr	r3, [pc, #172]	@ (8002e1c <HAL_RCC_ClockConfig+0x1bc>)
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	f003 020c 	and.w	r2, r3, #12
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	d1eb      	bne.n	8002d58 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d80:	4b25      	ldr	r3, [pc, #148]	@ (8002e18 <HAL_RCC_ClockConfig+0x1b8>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f003 0307 	and.w	r3, r3, #7
 8002d88:	683a      	ldr	r2, [r7, #0]
 8002d8a:	429a      	cmp	r2, r3
 8002d8c:	d20c      	bcs.n	8002da8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d8e:	4b22      	ldr	r3, [pc, #136]	@ (8002e18 <HAL_RCC_ClockConfig+0x1b8>)
 8002d90:	683a      	ldr	r2, [r7, #0]
 8002d92:	b2d2      	uxtb	r2, r2
 8002d94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d96:	4b20      	ldr	r3, [pc, #128]	@ (8002e18 <HAL_RCC_ClockConfig+0x1b8>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 0307 	and.w	r3, r3, #7
 8002d9e:	683a      	ldr	r2, [r7, #0]
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d001      	beq.n	8002da8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	e032      	b.n	8002e0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f003 0304 	and.w	r3, r3, #4
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d008      	beq.n	8002dc6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002db4:	4b19      	ldr	r3, [pc, #100]	@ (8002e1c <HAL_RCC_ClockConfig+0x1bc>)
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	68db      	ldr	r3, [r3, #12]
 8002dc0:	4916      	ldr	r1, [pc, #88]	@ (8002e1c <HAL_RCC_ClockConfig+0x1bc>)
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 0308 	and.w	r3, r3, #8
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d009      	beq.n	8002de6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002dd2:	4b12      	ldr	r3, [pc, #72]	@ (8002e1c <HAL_RCC_ClockConfig+0x1bc>)
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	691b      	ldr	r3, [r3, #16]
 8002dde:	00db      	lsls	r3, r3, #3
 8002de0:	490e      	ldr	r1, [pc, #56]	@ (8002e1c <HAL_RCC_ClockConfig+0x1bc>)
 8002de2:	4313      	orrs	r3, r2
 8002de4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002de6:	f000 f821 	bl	8002e2c <HAL_RCC_GetSysClockFreq>
 8002dea:	4602      	mov	r2, r0
 8002dec:	4b0b      	ldr	r3, [pc, #44]	@ (8002e1c <HAL_RCC_ClockConfig+0x1bc>)
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	091b      	lsrs	r3, r3, #4
 8002df2:	f003 030f 	and.w	r3, r3, #15
 8002df6:	490a      	ldr	r1, [pc, #40]	@ (8002e20 <HAL_RCC_ClockConfig+0x1c0>)
 8002df8:	5ccb      	ldrb	r3, [r1, r3]
 8002dfa:	fa22 f303 	lsr.w	r3, r2, r3
 8002dfe:	4a09      	ldr	r2, [pc, #36]	@ (8002e24 <HAL_RCC_ClockConfig+0x1c4>)
 8002e00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002e02:	4b09      	ldr	r3, [pc, #36]	@ (8002e28 <HAL_RCC_ClockConfig+0x1c8>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4618      	mov	r0, r3
 8002e08:	f7fd fe2a 	bl	8000a60 <HAL_InitTick>

  return HAL_OK;
 8002e0c:	2300      	movs	r3, #0
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3710      	adds	r7, #16
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop
 8002e18:	40023c00 	.word	0x40023c00
 8002e1c:	40023800 	.word	0x40023800
 8002e20:	08009fac 	.word	0x08009fac
 8002e24:	20000000 	.word	0x20000000
 8002e28:	20000004 	.word	0x20000004

08002e2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e30:	b094      	sub	sp, #80	@ 0x50
 8002e32:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002e34:	2300      	movs	r3, #0
 8002e36:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002e40:	2300      	movs	r3, #0
 8002e42:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e44:	4b79      	ldr	r3, [pc, #484]	@ (800302c <HAL_RCC_GetSysClockFreq+0x200>)
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	f003 030c 	and.w	r3, r3, #12
 8002e4c:	2b08      	cmp	r3, #8
 8002e4e:	d00d      	beq.n	8002e6c <HAL_RCC_GetSysClockFreq+0x40>
 8002e50:	2b08      	cmp	r3, #8
 8002e52:	f200 80e1 	bhi.w	8003018 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d002      	beq.n	8002e60 <HAL_RCC_GetSysClockFreq+0x34>
 8002e5a:	2b04      	cmp	r3, #4
 8002e5c:	d003      	beq.n	8002e66 <HAL_RCC_GetSysClockFreq+0x3a>
 8002e5e:	e0db      	b.n	8003018 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e60:	4b73      	ldr	r3, [pc, #460]	@ (8003030 <HAL_RCC_GetSysClockFreq+0x204>)
 8002e62:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002e64:	e0db      	b.n	800301e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e66:	4b73      	ldr	r3, [pc, #460]	@ (8003034 <HAL_RCC_GetSysClockFreq+0x208>)
 8002e68:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002e6a:	e0d8      	b.n	800301e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e6c:	4b6f      	ldr	r3, [pc, #444]	@ (800302c <HAL_RCC_GetSysClockFreq+0x200>)
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002e74:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e76:	4b6d      	ldr	r3, [pc, #436]	@ (800302c <HAL_RCC_GetSysClockFreq+0x200>)
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d063      	beq.n	8002f4a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e82:	4b6a      	ldr	r3, [pc, #424]	@ (800302c <HAL_RCC_GetSysClockFreq+0x200>)
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	099b      	lsrs	r3, r3, #6
 8002e88:	2200      	movs	r2, #0
 8002e8a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002e8c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002e8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e94:	633b      	str	r3, [r7, #48]	@ 0x30
 8002e96:	2300      	movs	r3, #0
 8002e98:	637b      	str	r3, [r7, #52]	@ 0x34
 8002e9a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002e9e:	4622      	mov	r2, r4
 8002ea0:	462b      	mov	r3, r5
 8002ea2:	f04f 0000 	mov.w	r0, #0
 8002ea6:	f04f 0100 	mov.w	r1, #0
 8002eaa:	0159      	lsls	r1, r3, #5
 8002eac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002eb0:	0150      	lsls	r0, r2, #5
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	460b      	mov	r3, r1
 8002eb6:	4621      	mov	r1, r4
 8002eb8:	1a51      	subs	r1, r2, r1
 8002eba:	6139      	str	r1, [r7, #16]
 8002ebc:	4629      	mov	r1, r5
 8002ebe:	eb63 0301 	sbc.w	r3, r3, r1
 8002ec2:	617b      	str	r3, [r7, #20]
 8002ec4:	f04f 0200 	mov.w	r2, #0
 8002ec8:	f04f 0300 	mov.w	r3, #0
 8002ecc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002ed0:	4659      	mov	r1, fp
 8002ed2:	018b      	lsls	r3, r1, #6
 8002ed4:	4651      	mov	r1, sl
 8002ed6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002eda:	4651      	mov	r1, sl
 8002edc:	018a      	lsls	r2, r1, #6
 8002ede:	4651      	mov	r1, sl
 8002ee0:	ebb2 0801 	subs.w	r8, r2, r1
 8002ee4:	4659      	mov	r1, fp
 8002ee6:	eb63 0901 	sbc.w	r9, r3, r1
 8002eea:	f04f 0200 	mov.w	r2, #0
 8002eee:	f04f 0300 	mov.w	r3, #0
 8002ef2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002ef6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002efa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002efe:	4690      	mov	r8, r2
 8002f00:	4699      	mov	r9, r3
 8002f02:	4623      	mov	r3, r4
 8002f04:	eb18 0303 	adds.w	r3, r8, r3
 8002f08:	60bb      	str	r3, [r7, #8]
 8002f0a:	462b      	mov	r3, r5
 8002f0c:	eb49 0303 	adc.w	r3, r9, r3
 8002f10:	60fb      	str	r3, [r7, #12]
 8002f12:	f04f 0200 	mov.w	r2, #0
 8002f16:	f04f 0300 	mov.w	r3, #0
 8002f1a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002f1e:	4629      	mov	r1, r5
 8002f20:	024b      	lsls	r3, r1, #9
 8002f22:	4621      	mov	r1, r4
 8002f24:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002f28:	4621      	mov	r1, r4
 8002f2a:	024a      	lsls	r2, r1, #9
 8002f2c:	4610      	mov	r0, r2
 8002f2e:	4619      	mov	r1, r3
 8002f30:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f32:	2200      	movs	r2, #0
 8002f34:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002f36:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002f38:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002f3c:	f7fd f950 	bl	80001e0 <__aeabi_uldivmod>
 8002f40:	4602      	mov	r2, r0
 8002f42:	460b      	mov	r3, r1
 8002f44:	4613      	mov	r3, r2
 8002f46:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002f48:	e058      	b.n	8002ffc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f4a:	4b38      	ldr	r3, [pc, #224]	@ (800302c <HAL_RCC_GetSysClockFreq+0x200>)
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	099b      	lsrs	r3, r3, #6
 8002f50:	2200      	movs	r2, #0
 8002f52:	4618      	mov	r0, r3
 8002f54:	4611      	mov	r1, r2
 8002f56:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002f5a:	623b      	str	r3, [r7, #32]
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f60:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002f64:	4642      	mov	r2, r8
 8002f66:	464b      	mov	r3, r9
 8002f68:	f04f 0000 	mov.w	r0, #0
 8002f6c:	f04f 0100 	mov.w	r1, #0
 8002f70:	0159      	lsls	r1, r3, #5
 8002f72:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f76:	0150      	lsls	r0, r2, #5
 8002f78:	4602      	mov	r2, r0
 8002f7a:	460b      	mov	r3, r1
 8002f7c:	4641      	mov	r1, r8
 8002f7e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002f82:	4649      	mov	r1, r9
 8002f84:	eb63 0b01 	sbc.w	fp, r3, r1
 8002f88:	f04f 0200 	mov.w	r2, #0
 8002f8c:	f04f 0300 	mov.w	r3, #0
 8002f90:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002f94:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002f98:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002f9c:	ebb2 040a 	subs.w	r4, r2, sl
 8002fa0:	eb63 050b 	sbc.w	r5, r3, fp
 8002fa4:	f04f 0200 	mov.w	r2, #0
 8002fa8:	f04f 0300 	mov.w	r3, #0
 8002fac:	00eb      	lsls	r3, r5, #3
 8002fae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002fb2:	00e2      	lsls	r2, r4, #3
 8002fb4:	4614      	mov	r4, r2
 8002fb6:	461d      	mov	r5, r3
 8002fb8:	4643      	mov	r3, r8
 8002fba:	18e3      	adds	r3, r4, r3
 8002fbc:	603b      	str	r3, [r7, #0]
 8002fbe:	464b      	mov	r3, r9
 8002fc0:	eb45 0303 	adc.w	r3, r5, r3
 8002fc4:	607b      	str	r3, [r7, #4]
 8002fc6:	f04f 0200 	mov.w	r2, #0
 8002fca:	f04f 0300 	mov.w	r3, #0
 8002fce:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002fd2:	4629      	mov	r1, r5
 8002fd4:	028b      	lsls	r3, r1, #10
 8002fd6:	4621      	mov	r1, r4
 8002fd8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002fdc:	4621      	mov	r1, r4
 8002fde:	028a      	lsls	r2, r1, #10
 8002fe0:	4610      	mov	r0, r2
 8002fe2:	4619      	mov	r1, r3
 8002fe4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	61bb      	str	r3, [r7, #24]
 8002fea:	61fa      	str	r2, [r7, #28]
 8002fec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ff0:	f7fd f8f6 	bl	80001e0 <__aeabi_uldivmod>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	460b      	mov	r3, r1
 8002ff8:	4613      	mov	r3, r2
 8002ffa:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002ffc:	4b0b      	ldr	r3, [pc, #44]	@ (800302c <HAL_RCC_GetSysClockFreq+0x200>)
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	0c1b      	lsrs	r3, r3, #16
 8003002:	f003 0303 	and.w	r3, r3, #3
 8003006:	3301      	adds	r3, #1
 8003008:	005b      	lsls	r3, r3, #1
 800300a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800300c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800300e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003010:	fbb2 f3f3 	udiv	r3, r2, r3
 8003014:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003016:	e002      	b.n	800301e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003018:	4b05      	ldr	r3, [pc, #20]	@ (8003030 <HAL_RCC_GetSysClockFreq+0x204>)
 800301a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800301c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800301e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003020:	4618      	mov	r0, r3
 8003022:	3750      	adds	r7, #80	@ 0x50
 8003024:	46bd      	mov	sp, r7
 8003026:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800302a:	bf00      	nop
 800302c:	40023800 	.word	0x40023800
 8003030:	00f42400 	.word	0x00f42400
 8003034:	007a1200 	.word	0x007a1200

08003038 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003038:	b480      	push	{r7}
 800303a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800303c:	4b03      	ldr	r3, [pc, #12]	@ (800304c <HAL_RCC_GetHCLKFreq+0x14>)
 800303e:	681b      	ldr	r3, [r3, #0]
}
 8003040:	4618      	mov	r0, r3
 8003042:	46bd      	mov	sp, r7
 8003044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003048:	4770      	bx	lr
 800304a:	bf00      	nop
 800304c:	20000000 	.word	0x20000000

08003050 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003054:	f7ff fff0 	bl	8003038 <HAL_RCC_GetHCLKFreq>
 8003058:	4602      	mov	r2, r0
 800305a:	4b05      	ldr	r3, [pc, #20]	@ (8003070 <HAL_RCC_GetPCLK1Freq+0x20>)
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	0a9b      	lsrs	r3, r3, #10
 8003060:	f003 0307 	and.w	r3, r3, #7
 8003064:	4903      	ldr	r1, [pc, #12]	@ (8003074 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003066:	5ccb      	ldrb	r3, [r1, r3]
 8003068:	fa22 f303 	lsr.w	r3, r2, r3
}
 800306c:	4618      	mov	r0, r3
 800306e:	bd80      	pop	{r7, pc}
 8003070:	40023800 	.word	0x40023800
 8003074:	08009fbc 	.word	0x08009fbc

08003078 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003078:	b480      	push	{r7}
 800307a:	b083      	sub	sp, #12
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
 8003080:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	220f      	movs	r2, #15
 8003086:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003088:	4b12      	ldr	r3, [pc, #72]	@ (80030d4 <HAL_RCC_GetClockConfig+0x5c>)
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	f003 0203 	and.w	r2, r3, #3
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003094:	4b0f      	ldr	r3, [pc, #60]	@ (80030d4 <HAL_RCC_GetClockConfig+0x5c>)
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80030a0:	4b0c      	ldr	r3, [pc, #48]	@ (80030d4 <HAL_RCC_GetClockConfig+0x5c>)
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80030ac:	4b09      	ldr	r3, [pc, #36]	@ (80030d4 <HAL_RCC_GetClockConfig+0x5c>)
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	08db      	lsrs	r3, r3, #3
 80030b2:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80030ba:	4b07      	ldr	r3, [pc, #28]	@ (80030d8 <HAL_RCC_GetClockConfig+0x60>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 0207 	and.w	r2, r3, #7
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	601a      	str	r2, [r3, #0]
}
 80030c6:	bf00      	nop
 80030c8:	370c      	adds	r7, #12
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr
 80030d2:	bf00      	nop
 80030d4:	40023800 	.word	0x40023800
 80030d8:	40023c00 	.word	0x40023c00

080030dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b082      	sub	sp, #8
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d101      	bne.n	80030ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e041      	b.n	8003172 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d106      	bne.n	8003108 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2200      	movs	r2, #0
 80030fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003102:	6878      	ldr	r0, [r7, #4]
 8003104:	f000 f839 	bl	800317a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2202      	movs	r2, #2
 800310c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681a      	ldr	r2, [r3, #0]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	3304      	adds	r3, #4
 8003118:	4619      	mov	r1, r3
 800311a:	4610      	mov	r0, r2
 800311c:	f000 f9c0 	bl	80034a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2201      	movs	r2, #1
 8003124:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2201      	movs	r2, #1
 800312c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2201      	movs	r2, #1
 8003134:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2201      	movs	r2, #1
 800313c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2201      	movs	r2, #1
 8003144:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2201      	movs	r2, #1
 800314c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2201      	movs	r2, #1
 8003154:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2201      	movs	r2, #1
 800315c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2201      	movs	r2, #1
 8003164:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2201      	movs	r2, #1
 800316c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003170:	2300      	movs	r3, #0
}
 8003172:	4618      	mov	r0, r3
 8003174:	3708      	adds	r7, #8
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}

0800317a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800317a:	b480      	push	{r7}
 800317c:	b083      	sub	sp, #12
 800317e:	af00      	add	r7, sp, #0
 8003180:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003182:	bf00      	nop
 8003184:	370c      	adds	r7, #12
 8003186:	46bd      	mov	sp, r7
 8003188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318c:	4770      	bx	lr
	...

08003190 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003190:	b480      	push	{r7}
 8003192:	b085      	sub	sp, #20
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800319e:	b2db      	uxtb	r3, r3
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d001      	beq.n	80031a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	e04e      	b.n	8003246 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2202      	movs	r2, #2
 80031ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	68da      	ldr	r2, [r3, #12]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f042 0201 	orr.w	r2, r2, #1
 80031be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a23      	ldr	r2, [pc, #140]	@ (8003254 <HAL_TIM_Base_Start_IT+0xc4>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d022      	beq.n	8003210 <HAL_TIM_Base_Start_IT+0x80>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031d2:	d01d      	beq.n	8003210 <HAL_TIM_Base_Start_IT+0x80>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a1f      	ldr	r2, [pc, #124]	@ (8003258 <HAL_TIM_Base_Start_IT+0xc8>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d018      	beq.n	8003210 <HAL_TIM_Base_Start_IT+0x80>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a1e      	ldr	r2, [pc, #120]	@ (800325c <HAL_TIM_Base_Start_IT+0xcc>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d013      	beq.n	8003210 <HAL_TIM_Base_Start_IT+0x80>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a1c      	ldr	r2, [pc, #112]	@ (8003260 <HAL_TIM_Base_Start_IT+0xd0>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d00e      	beq.n	8003210 <HAL_TIM_Base_Start_IT+0x80>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a1b      	ldr	r2, [pc, #108]	@ (8003264 <HAL_TIM_Base_Start_IT+0xd4>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d009      	beq.n	8003210 <HAL_TIM_Base_Start_IT+0x80>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a19      	ldr	r2, [pc, #100]	@ (8003268 <HAL_TIM_Base_Start_IT+0xd8>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d004      	beq.n	8003210 <HAL_TIM_Base_Start_IT+0x80>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a18      	ldr	r2, [pc, #96]	@ (800326c <HAL_TIM_Base_Start_IT+0xdc>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d111      	bne.n	8003234 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	f003 0307 	and.w	r3, r3, #7
 800321a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2b06      	cmp	r3, #6
 8003220:	d010      	beq.n	8003244 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f042 0201 	orr.w	r2, r2, #1
 8003230:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003232:	e007      	b.n	8003244 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f042 0201 	orr.w	r2, r2, #1
 8003242:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003244:	2300      	movs	r3, #0
}
 8003246:	4618      	mov	r0, r3
 8003248:	3714      	adds	r7, #20
 800324a:	46bd      	mov	sp, r7
 800324c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003250:	4770      	bx	lr
 8003252:	bf00      	nop
 8003254:	40010000 	.word	0x40010000
 8003258:	40000400 	.word	0x40000400
 800325c:	40000800 	.word	0x40000800
 8003260:	40000c00 	.word	0x40000c00
 8003264:	40010400 	.word	0x40010400
 8003268:	40014000 	.word	0x40014000
 800326c:	40001800 	.word	0x40001800

08003270 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b084      	sub	sp, #16
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	68db      	ldr	r3, [r3, #12]
 800327e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	691b      	ldr	r3, [r3, #16]
 8003286:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	f003 0302 	and.w	r3, r3, #2
 800328e:	2b00      	cmp	r3, #0
 8003290:	d020      	beq.n	80032d4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	f003 0302 	and.w	r3, r3, #2
 8003298:	2b00      	cmp	r3, #0
 800329a:	d01b      	beq.n	80032d4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f06f 0202 	mvn.w	r2, #2
 80032a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2201      	movs	r2, #1
 80032aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	699b      	ldr	r3, [r3, #24]
 80032b2:	f003 0303 	and.w	r3, r3, #3
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d003      	beq.n	80032c2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f000 f8d2 	bl	8003464 <HAL_TIM_IC_CaptureCallback>
 80032c0:	e005      	b.n	80032ce <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	f000 f8c4 	bl	8003450 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032c8:	6878      	ldr	r0, [r7, #4]
 80032ca:	f000 f8d5 	bl	8003478 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2200      	movs	r2, #0
 80032d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	f003 0304 	and.w	r3, r3, #4
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d020      	beq.n	8003320 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	f003 0304 	and.w	r3, r3, #4
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d01b      	beq.n	8003320 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f06f 0204 	mvn.w	r2, #4
 80032f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2202      	movs	r2, #2
 80032f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	699b      	ldr	r3, [r3, #24]
 80032fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003302:	2b00      	cmp	r3, #0
 8003304:	d003      	beq.n	800330e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f000 f8ac 	bl	8003464 <HAL_TIM_IC_CaptureCallback>
 800330c:	e005      	b.n	800331a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	f000 f89e 	bl	8003450 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003314:	6878      	ldr	r0, [r7, #4]
 8003316:	f000 f8af 	bl	8003478 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2200      	movs	r2, #0
 800331e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	f003 0308 	and.w	r3, r3, #8
 8003326:	2b00      	cmp	r3, #0
 8003328:	d020      	beq.n	800336c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	f003 0308 	and.w	r3, r3, #8
 8003330:	2b00      	cmp	r3, #0
 8003332:	d01b      	beq.n	800336c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f06f 0208 	mvn.w	r2, #8
 800333c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2204      	movs	r2, #4
 8003342:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	69db      	ldr	r3, [r3, #28]
 800334a:	f003 0303 	and.w	r3, r3, #3
 800334e:	2b00      	cmp	r3, #0
 8003350:	d003      	beq.n	800335a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003352:	6878      	ldr	r0, [r7, #4]
 8003354:	f000 f886 	bl	8003464 <HAL_TIM_IC_CaptureCallback>
 8003358:	e005      	b.n	8003366 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800335a:	6878      	ldr	r0, [r7, #4]
 800335c:	f000 f878 	bl	8003450 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003360:	6878      	ldr	r0, [r7, #4]
 8003362:	f000 f889 	bl	8003478 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2200      	movs	r2, #0
 800336a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	f003 0310 	and.w	r3, r3, #16
 8003372:	2b00      	cmp	r3, #0
 8003374:	d020      	beq.n	80033b8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	f003 0310 	and.w	r3, r3, #16
 800337c:	2b00      	cmp	r3, #0
 800337e:	d01b      	beq.n	80033b8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f06f 0210 	mvn.w	r2, #16
 8003388:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2208      	movs	r2, #8
 800338e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	69db      	ldr	r3, [r3, #28]
 8003396:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800339a:	2b00      	cmp	r3, #0
 800339c:	d003      	beq.n	80033a6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	f000 f860 	bl	8003464 <HAL_TIM_IC_CaptureCallback>
 80033a4:	e005      	b.n	80033b2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033a6:	6878      	ldr	r0, [r7, #4]
 80033a8:	f000 f852 	bl	8003450 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	f000 f863 	bl	8003478 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2200      	movs	r2, #0
 80033b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	f003 0301 	and.w	r3, r3, #1
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d00c      	beq.n	80033dc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	f003 0301 	and.w	r3, r3, #1
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d007      	beq.n	80033dc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f06f 0201 	mvn.w	r2, #1
 80033d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f7fd fb00 	bl	80009dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d00c      	beq.n	8003400 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d007      	beq.n	8003400 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80033f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f000 f906 	bl	800360c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003406:	2b00      	cmp	r3, #0
 8003408:	d00c      	beq.n	8003424 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003410:	2b00      	cmp	r3, #0
 8003412:	d007      	beq.n	8003424 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800341c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	f000 f834 	bl	800348c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	f003 0320 	and.w	r3, r3, #32
 800342a:	2b00      	cmp	r3, #0
 800342c:	d00c      	beq.n	8003448 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	f003 0320 	and.w	r3, r3, #32
 8003434:	2b00      	cmp	r3, #0
 8003436:	d007      	beq.n	8003448 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f06f 0220 	mvn.w	r2, #32
 8003440:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	f000 f8d8 	bl	80035f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003448:	bf00      	nop
 800344a:	3710      	adds	r7, #16
 800344c:	46bd      	mov	sp, r7
 800344e:	bd80      	pop	{r7, pc}

08003450 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003450:	b480      	push	{r7}
 8003452:	b083      	sub	sp, #12
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003458:	bf00      	nop
 800345a:	370c      	adds	r7, #12
 800345c:	46bd      	mov	sp, r7
 800345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003462:	4770      	bx	lr

08003464 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003464:	b480      	push	{r7}
 8003466:	b083      	sub	sp, #12
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800346c:	bf00      	nop
 800346e:	370c      	adds	r7, #12
 8003470:	46bd      	mov	sp, r7
 8003472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003476:	4770      	bx	lr

08003478 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003478:	b480      	push	{r7}
 800347a:	b083      	sub	sp, #12
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003480:	bf00      	nop
 8003482:	370c      	adds	r7, #12
 8003484:	46bd      	mov	sp, r7
 8003486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348a:	4770      	bx	lr

0800348c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800348c:	b480      	push	{r7}
 800348e:	b083      	sub	sp, #12
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003494:	bf00      	nop
 8003496:	370c      	adds	r7, #12
 8003498:	46bd      	mov	sp, r7
 800349a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349e:	4770      	bx	lr

080034a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b085      	sub	sp, #20
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
 80034a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	4a46      	ldr	r2, [pc, #280]	@ (80035cc <TIM_Base_SetConfig+0x12c>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d013      	beq.n	80034e0 <TIM_Base_SetConfig+0x40>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034be:	d00f      	beq.n	80034e0 <TIM_Base_SetConfig+0x40>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	4a43      	ldr	r2, [pc, #268]	@ (80035d0 <TIM_Base_SetConfig+0x130>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d00b      	beq.n	80034e0 <TIM_Base_SetConfig+0x40>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	4a42      	ldr	r2, [pc, #264]	@ (80035d4 <TIM_Base_SetConfig+0x134>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d007      	beq.n	80034e0 <TIM_Base_SetConfig+0x40>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	4a41      	ldr	r2, [pc, #260]	@ (80035d8 <TIM_Base_SetConfig+0x138>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d003      	beq.n	80034e0 <TIM_Base_SetConfig+0x40>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	4a40      	ldr	r2, [pc, #256]	@ (80035dc <TIM_Base_SetConfig+0x13c>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d108      	bne.n	80034f2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	68fa      	ldr	r2, [r7, #12]
 80034ee:	4313      	orrs	r3, r2
 80034f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	4a35      	ldr	r2, [pc, #212]	@ (80035cc <TIM_Base_SetConfig+0x12c>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d02b      	beq.n	8003552 <TIM_Base_SetConfig+0xb2>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003500:	d027      	beq.n	8003552 <TIM_Base_SetConfig+0xb2>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	4a32      	ldr	r2, [pc, #200]	@ (80035d0 <TIM_Base_SetConfig+0x130>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d023      	beq.n	8003552 <TIM_Base_SetConfig+0xb2>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	4a31      	ldr	r2, [pc, #196]	@ (80035d4 <TIM_Base_SetConfig+0x134>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d01f      	beq.n	8003552 <TIM_Base_SetConfig+0xb2>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	4a30      	ldr	r2, [pc, #192]	@ (80035d8 <TIM_Base_SetConfig+0x138>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d01b      	beq.n	8003552 <TIM_Base_SetConfig+0xb2>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	4a2f      	ldr	r2, [pc, #188]	@ (80035dc <TIM_Base_SetConfig+0x13c>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d017      	beq.n	8003552 <TIM_Base_SetConfig+0xb2>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	4a2e      	ldr	r2, [pc, #184]	@ (80035e0 <TIM_Base_SetConfig+0x140>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d013      	beq.n	8003552 <TIM_Base_SetConfig+0xb2>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	4a2d      	ldr	r2, [pc, #180]	@ (80035e4 <TIM_Base_SetConfig+0x144>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d00f      	beq.n	8003552 <TIM_Base_SetConfig+0xb2>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	4a2c      	ldr	r2, [pc, #176]	@ (80035e8 <TIM_Base_SetConfig+0x148>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d00b      	beq.n	8003552 <TIM_Base_SetConfig+0xb2>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	4a2b      	ldr	r2, [pc, #172]	@ (80035ec <TIM_Base_SetConfig+0x14c>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d007      	beq.n	8003552 <TIM_Base_SetConfig+0xb2>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	4a2a      	ldr	r2, [pc, #168]	@ (80035f0 <TIM_Base_SetConfig+0x150>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d003      	beq.n	8003552 <TIM_Base_SetConfig+0xb2>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	4a29      	ldr	r2, [pc, #164]	@ (80035f4 <TIM_Base_SetConfig+0x154>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d108      	bne.n	8003564 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003558:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	68db      	ldr	r3, [r3, #12]
 800355e:	68fa      	ldr	r2, [r7, #12]
 8003560:	4313      	orrs	r3, r2
 8003562:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	695b      	ldr	r3, [r3, #20]
 800356e:	4313      	orrs	r3, r2
 8003570:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	68fa      	ldr	r2, [r7, #12]
 8003576:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	689a      	ldr	r2, [r3, #8]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	681a      	ldr	r2, [r3, #0]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	4a10      	ldr	r2, [pc, #64]	@ (80035cc <TIM_Base_SetConfig+0x12c>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d003      	beq.n	8003598 <TIM_Base_SetConfig+0xf8>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	4a12      	ldr	r2, [pc, #72]	@ (80035dc <TIM_Base_SetConfig+0x13c>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d103      	bne.n	80035a0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	691a      	ldr	r2, [r3, #16]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2201      	movs	r2, #1
 80035a4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	691b      	ldr	r3, [r3, #16]
 80035aa:	f003 0301 	and.w	r3, r3, #1
 80035ae:	2b01      	cmp	r3, #1
 80035b0:	d105      	bne.n	80035be <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	691b      	ldr	r3, [r3, #16]
 80035b6:	f023 0201 	bic.w	r2, r3, #1
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	611a      	str	r2, [r3, #16]
  }
}
 80035be:	bf00      	nop
 80035c0:	3714      	adds	r7, #20
 80035c2:	46bd      	mov	sp, r7
 80035c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c8:	4770      	bx	lr
 80035ca:	bf00      	nop
 80035cc:	40010000 	.word	0x40010000
 80035d0:	40000400 	.word	0x40000400
 80035d4:	40000800 	.word	0x40000800
 80035d8:	40000c00 	.word	0x40000c00
 80035dc:	40010400 	.word	0x40010400
 80035e0:	40014000 	.word	0x40014000
 80035e4:	40014400 	.word	0x40014400
 80035e8:	40014800 	.word	0x40014800
 80035ec:	40001800 	.word	0x40001800
 80035f0:	40001c00 	.word	0x40001c00
 80035f4:	40002000 	.word	0x40002000

080035f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b083      	sub	sp, #12
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003600:	bf00      	nop
 8003602:	370c      	adds	r7, #12
 8003604:	46bd      	mov	sp, r7
 8003606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360a:	4770      	bx	lr

0800360c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800360c:	b480      	push	{r7}
 800360e:	b083      	sub	sp, #12
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003614:	bf00      	nop
 8003616:	370c      	adds	r7, #12
 8003618:	46bd      	mov	sp, r7
 800361a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361e:	4770      	bx	lr

08003620 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003620:	b084      	sub	sp, #16
 8003622:	b580      	push	{r7, lr}
 8003624:	b084      	sub	sp, #16
 8003626:	af00      	add	r7, sp, #0
 8003628:	6078      	str	r0, [r7, #4]
 800362a:	f107 001c 	add.w	r0, r7, #28
 800362e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003632:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8003636:	2b01      	cmp	r3, #1
 8003638:	d123      	bne.n	8003682 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800363e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	68db      	ldr	r3, [r3, #12]
 800364a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800364e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003652:	687a      	ldr	r2, [r7, #4]
 8003654:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	68db      	ldr	r3, [r3, #12]
 800365a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003662:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003666:	2b01      	cmp	r3, #1
 8003668:	d105      	bne.n	8003676 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	68db      	ldr	r3, [r3, #12]
 800366e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	f001 fae8 	bl	8004c4c <USB_CoreReset>
 800367c:	4603      	mov	r3, r0
 800367e:	73fb      	strb	r3, [r7, #15]
 8003680:	e01b      	b.n	80036ba <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	68db      	ldr	r3, [r3, #12]
 8003686:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	f001 fadc 	bl	8004c4c <USB_CoreReset>
 8003694:	4603      	mov	r3, r0
 8003696:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003698:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800369c:	2b00      	cmp	r3, #0
 800369e:	d106      	bne.n	80036ae <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036a4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	639a      	str	r2, [r3, #56]	@ 0x38
 80036ac:	e005      	b.n	80036ba <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036b2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80036ba:	7fbb      	ldrb	r3, [r7, #30]
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d10b      	bne.n	80036d8 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	689b      	ldr	r3, [r3, #8]
 80036c4:	f043 0206 	orr.w	r2, r3, #6
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	f043 0220 	orr.w	r2, r3, #32
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80036d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80036da:	4618      	mov	r0, r3
 80036dc:	3710      	adds	r7, #16
 80036de:	46bd      	mov	sp, r7
 80036e0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80036e4:	b004      	add	sp, #16
 80036e6:	4770      	bx	lr

080036e8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b087      	sub	sp, #28
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	60f8      	str	r0, [r7, #12]
 80036f0:	60b9      	str	r1, [r7, #8]
 80036f2:	4613      	mov	r3, r2
 80036f4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80036f6:	79fb      	ldrb	r3, [r7, #7]
 80036f8:	2b02      	cmp	r3, #2
 80036fa:	d165      	bne.n	80037c8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	4a41      	ldr	r2, [pc, #260]	@ (8003804 <USB_SetTurnaroundTime+0x11c>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d906      	bls.n	8003712 <USB_SetTurnaroundTime+0x2a>
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	4a40      	ldr	r2, [pc, #256]	@ (8003808 <USB_SetTurnaroundTime+0x120>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d202      	bcs.n	8003712 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800370c:	230f      	movs	r3, #15
 800370e:	617b      	str	r3, [r7, #20]
 8003710:	e062      	b.n	80037d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	4a3c      	ldr	r2, [pc, #240]	@ (8003808 <USB_SetTurnaroundTime+0x120>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d306      	bcc.n	8003728 <USB_SetTurnaroundTime+0x40>
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	4a3b      	ldr	r2, [pc, #236]	@ (800380c <USB_SetTurnaroundTime+0x124>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d202      	bcs.n	8003728 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003722:	230e      	movs	r3, #14
 8003724:	617b      	str	r3, [r7, #20]
 8003726:	e057      	b.n	80037d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	4a38      	ldr	r2, [pc, #224]	@ (800380c <USB_SetTurnaroundTime+0x124>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d306      	bcc.n	800373e <USB_SetTurnaroundTime+0x56>
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	4a37      	ldr	r2, [pc, #220]	@ (8003810 <USB_SetTurnaroundTime+0x128>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d202      	bcs.n	800373e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003738:	230d      	movs	r3, #13
 800373a:	617b      	str	r3, [r7, #20]
 800373c:	e04c      	b.n	80037d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	4a33      	ldr	r2, [pc, #204]	@ (8003810 <USB_SetTurnaroundTime+0x128>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d306      	bcc.n	8003754 <USB_SetTurnaroundTime+0x6c>
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	4a32      	ldr	r2, [pc, #200]	@ (8003814 <USB_SetTurnaroundTime+0x12c>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d802      	bhi.n	8003754 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800374e:	230c      	movs	r3, #12
 8003750:	617b      	str	r3, [r7, #20]
 8003752:	e041      	b.n	80037d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	4a2f      	ldr	r2, [pc, #188]	@ (8003814 <USB_SetTurnaroundTime+0x12c>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d906      	bls.n	800376a <USB_SetTurnaroundTime+0x82>
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	4a2e      	ldr	r2, [pc, #184]	@ (8003818 <USB_SetTurnaroundTime+0x130>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d802      	bhi.n	800376a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003764:	230b      	movs	r3, #11
 8003766:	617b      	str	r3, [r7, #20]
 8003768:	e036      	b.n	80037d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	4a2a      	ldr	r2, [pc, #168]	@ (8003818 <USB_SetTurnaroundTime+0x130>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d906      	bls.n	8003780 <USB_SetTurnaroundTime+0x98>
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	4a29      	ldr	r2, [pc, #164]	@ (800381c <USB_SetTurnaroundTime+0x134>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d802      	bhi.n	8003780 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800377a:	230a      	movs	r3, #10
 800377c:	617b      	str	r3, [r7, #20]
 800377e:	e02b      	b.n	80037d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	4a26      	ldr	r2, [pc, #152]	@ (800381c <USB_SetTurnaroundTime+0x134>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d906      	bls.n	8003796 <USB_SetTurnaroundTime+0xae>
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	4a25      	ldr	r2, [pc, #148]	@ (8003820 <USB_SetTurnaroundTime+0x138>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d202      	bcs.n	8003796 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003790:	2309      	movs	r3, #9
 8003792:	617b      	str	r3, [r7, #20]
 8003794:	e020      	b.n	80037d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	4a21      	ldr	r2, [pc, #132]	@ (8003820 <USB_SetTurnaroundTime+0x138>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d306      	bcc.n	80037ac <USB_SetTurnaroundTime+0xc4>
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	4a20      	ldr	r2, [pc, #128]	@ (8003824 <USB_SetTurnaroundTime+0x13c>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d802      	bhi.n	80037ac <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80037a6:	2308      	movs	r3, #8
 80037a8:	617b      	str	r3, [r7, #20]
 80037aa:	e015      	b.n	80037d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	4a1d      	ldr	r2, [pc, #116]	@ (8003824 <USB_SetTurnaroundTime+0x13c>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d906      	bls.n	80037c2 <USB_SetTurnaroundTime+0xda>
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	4a1c      	ldr	r2, [pc, #112]	@ (8003828 <USB_SetTurnaroundTime+0x140>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d202      	bcs.n	80037c2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80037bc:	2307      	movs	r3, #7
 80037be:	617b      	str	r3, [r7, #20]
 80037c0:	e00a      	b.n	80037d8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80037c2:	2306      	movs	r3, #6
 80037c4:	617b      	str	r3, [r7, #20]
 80037c6:	e007      	b.n	80037d8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80037c8:	79fb      	ldrb	r3, [r7, #7]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d102      	bne.n	80037d4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80037ce:	2309      	movs	r3, #9
 80037d0:	617b      	str	r3, [r7, #20]
 80037d2:	e001      	b.n	80037d8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80037d4:	2309      	movs	r3, #9
 80037d6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	68db      	ldr	r3, [r3, #12]
 80037dc:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	68da      	ldr	r2, [r3, #12]
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	029b      	lsls	r3, r3, #10
 80037ec:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80037f0:	431a      	orrs	r2, r3
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80037f6:	2300      	movs	r3, #0
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	371c      	adds	r7, #28
 80037fc:	46bd      	mov	sp, r7
 80037fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003802:	4770      	bx	lr
 8003804:	00d8acbf 	.word	0x00d8acbf
 8003808:	00e4e1c0 	.word	0x00e4e1c0
 800380c:	00f42400 	.word	0x00f42400
 8003810:	01067380 	.word	0x01067380
 8003814:	011a499f 	.word	0x011a499f
 8003818:	01312cff 	.word	0x01312cff
 800381c:	014ca43f 	.word	0x014ca43f
 8003820:	016e3600 	.word	0x016e3600
 8003824:	01a6ab1f 	.word	0x01a6ab1f
 8003828:	01e84800 	.word	0x01e84800

0800382c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800382c:	b480      	push	{r7}
 800382e:	b083      	sub	sp, #12
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	f043 0201 	orr.w	r2, r3, #1
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003840:	2300      	movs	r3, #0
}
 8003842:	4618      	mov	r0, r3
 8003844:	370c      	adds	r7, #12
 8003846:	46bd      	mov	sp, r7
 8003848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384c:	4770      	bx	lr

0800384e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800384e:	b480      	push	{r7}
 8003850:	b083      	sub	sp, #12
 8003852:	af00      	add	r7, sp, #0
 8003854:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	f023 0201 	bic.w	r2, r3, #1
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003862:	2300      	movs	r3, #0
}
 8003864:	4618      	mov	r0, r3
 8003866:	370c      	adds	r7, #12
 8003868:	46bd      	mov	sp, r7
 800386a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386e:	4770      	bx	lr

08003870 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b084      	sub	sp, #16
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
 8003878:	460b      	mov	r3, r1
 800387a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800387c:	2300      	movs	r3, #0
 800387e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	68db      	ldr	r3, [r3, #12]
 8003884:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800388c:	78fb      	ldrb	r3, [r7, #3]
 800388e:	2b01      	cmp	r3, #1
 8003890:	d115      	bne.n	80038be <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	68db      	ldr	r3, [r3, #12]
 8003896:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800389e:	200a      	movs	r0, #10
 80038a0:	f7fd fa0e 	bl	8000cc0 <HAL_Delay>
      ms += 10U;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	330a      	adds	r3, #10
 80038a8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	f001 f93f 	bl	8004b2e <USB_GetMode>
 80038b0:	4603      	mov	r3, r0
 80038b2:	2b01      	cmp	r3, #1
 80038b4:	d01e      	beq.n	80038f4 <USB_SetCurrentMode+0x84>
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2bc7      	cmp	r3, #199	@ 0xc7
 80038ba:	d9f0      	bls.n	800389e <USB_SetCurrentMode+0x2e>
 80038bc:	e01a      	b.n	80038f4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80038be:	78fb      	ldrb	r3, [r7, #3]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d115      	bne.n	80038f0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	68db      	ldr	r3, [r3, #12]
 80038c8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80038d0:	200a      	movs	r0, #10
 80038d2:	f7fd f9f5 	bl	8000cc0 <HAL_Delay>
      ms += 10U;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	330a      	adds	r3, #10
 80038da:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80038dc:	6878      	ldr	r0, [r7, #4]
 80038de:	f001 f926 	bl	8004b2e <USB_GetMode>
 80038e2:	4603      	mov	r3, r0
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d005      	beq.n	80038f4 <USB_SetCurrentMode+0x84>
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2bc7      	cmp	r3, #199	@ 0xc7
 80038ec:	d9f0      	bls.n	80038d0 <USB_SetCurrentMode+0x60>
 80038ee:	e001      	b.n	80038f4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80038f0:	2301      	movs	r3, #1
 80038f2:	e005      	b.n	8003900 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	2bc8      	cmp	r3, #200	@ 0xc8
 80038f8:	d101      	bne.n	80038fe <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	e000      	b.n	8003900 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80038fe:	2300      	movs	r3, #0
}
 8003900:	4618      	mov	r0, r3
 8003902:	3710      	adds	r7, #16
 8003904:	46bd      	mov	sp, r7
 8003906:	bd80      	pop	{r7, pc}

08003908 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003908:	b084      	sub	sp, #16
 800390a:	b580      	push	{r7, lr}
 800390c:	b086      	sub	sp, #24
 800390e:	af00      	add	r7, sp, #0
 8003910:	6078      	str	r0, [r7, #4]
 8003912:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8003916:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800391a:	2300      	movs	r3, #0
 800391c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003922:	2300      	movs	r3, #0
 8003924:	613b      	str	r3, [r7, #16]
 8003926:	e009      	b.n	800393c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003928:	687a      	ldr	r2, [r7, #4]
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	3340      	adds	r3, #64	@ 0x40
 800392e:	009b      	lsls	r3, r3, #2
 8003930:	4413      	add	r3, r2
 8003932:	2200      	movs	r2, #0
 8003934:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	3301      	adds	r3, #1
 800393a:	613b      	str	r3, [r7, #16]
 800393c:	693b      	ldr	r3, [r7, #16]
 800393e:	2b0e      	cmp	r3, #14
 8003940:	d9f2      	bls.n	8003928 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003942:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003946:	2b00      	cmp	r3, #0
 8003948:	d11c      	bne.n	8003984 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	68fa      	ldr	r2, [r7, #12]
 8003954:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003958:	f043 0302 	orr.w	r3, r3, #2
 800395c:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003962:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800396e:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800397a:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	639a      	str	r2, [r3, #56]	@ 0x38
 8003982:	e00b      	b.n	800399c <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003988:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003994:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80039a2:	461a      	mov	r2, r3
 80039a4:	2300      	movs	r3, #0
 80039a6:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80039a8:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80039ac:	2b01      	cmp	r3, #1
 80039ae:	d10d      	bne.n	80039cc <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80039b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d104      	bne.n	80039c2 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80039b8:	2100      	movs	r1, #0
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	f000 f968 	bl	8003c90 <USB_SetDevSpeed>
 80039c0:	e008      	b.n	80039d4 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80039c2:	2101      	movs	r1, #1
 80039c4:	6878      	ldr	r0, [r7, #4]
 80039c6:	f000 f963 	bl	8003c90 <USB_SetDevSpeed>
 80039ca:	e003      	b.n	80039d4 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80039cc:	2103      	movs	r1, #3
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	f000 f95e 	bl	8003c90 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80039d4:	2110      	movs	r1, #16
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f000 f8fa 	bl	8003bd0 <USB_FlushTxFifo>
 80039dc:	4603      	mov	r3, r0
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d001      	beq.n	80039e6 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80039e6:	6878      	ldr	r0, [r7, #4]
 80039e8:	f000 f924 	bl	8003c34 <USB_FlushRxFifo>
 80039ec:	4603      	mov	r3, r0
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d001      	beq.n	80039f6 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80039fc:	461a      	mov	r2, r3
 80039fe:	2300      	movs	r3, #0
 8003a00:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a08:	461a      	mov	r2, r3
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a14:	461a      	mov	r2, r3
 8003a16:	2300      	movs	r3, #0
 8003a18:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	613b      	str	r3, [r7, #16]
 8003a1e:	e043      	b.n	8003aa8 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	015a      	lsls	r2, r3, #5
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	4413      	add	r3, r2
 8003a28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003a32:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003a36:	d118      	bne.n	8003a6a <USB_DevInit+0x162>
    {
      if (i == 0U)
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d10a      	bne.n	8003a54 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	015a      	lsls	r2, r3, #5
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	4413      	add	r3, r2
 8003a46:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a4a:	461a      	mov	r2, r3
 8003a4c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003a50:	6013      	str	r3, [r2, #0]
 8003a52:	e013      	b.n	8003a7c <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003a54:	693b      	ldr	r3, [r7, #16]
 8003a56:	015a      	lsls	r2, r3, #5
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	4413      	add	r3, r2
 8003a5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a60:	461a      	mov	r2, r3
 8003a62:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003a66:	6013      	str	r3, [r2, #0]
 8003a68:	e008      	b.n	8003a7c <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	015a      	lsls	r2, r3, #5
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	4413      	add	r3, r2
 8003a72:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a76:	461a      	mov	r2, r3
 8003a78:	2300      	movs	r3, #0
 8003a7a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	015a      	lsls	r2, r3, #5
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	4413      	add	r3, r2
 8003a84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a88:	461a      	mov	r2, r3
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	015a      	lsls	r2, r3, #5
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	4413      	add	r3, r2
 8003a96:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a9a:	461a      	mov	r2, r3
 8003a9c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003aa0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	3301      	adds	r3, #1
 8003aa6:	613b      	str	r3, [r7, #16]
 8003aa8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003aac:	461a      	mov	r2, r3
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d3b5      	bcc.n	8003a20 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	613b      	str	r3, [r7, #16]
 8003ab8:	e043      	b.n	8003b42 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	015a      	lsls	r2, r3, #5
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	4413      	add	r3, r2
 8003ac2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003acc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003ad0:	d118      	bne.n	8003b04 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d10a      	bne.n	8003aee <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	015a      	lsls	r2, r3, #5
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	4413      	add	r3, r2
 8003ae0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ae4:	461a      	mov	r2, r3
 8003ae6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003aea:	6013      	str	r3, [r2, #0]
 8003aec:	e013      	b.n	8003b16 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	015a      	lsls	r2, r3, #5
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	4413      	add	r3, r2
 8003af6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003afa:	461a      	mov	r2, r3
 8003afc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003b00:	6013      	str	r3, [r2, #0]
 8003b02:	e008      	b.n	8003b16 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	015a      	lsls	r2, r3, #5
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	4413      	add	r3, r2
 8003b0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b10:	461a      	mov	r2, r3
 8003b12:	2300      	movs	r3, #0
 8003b14:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	015a      	lsls	r2, r3, #5
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	4413      	add	r3, r2
 8003b1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b22:	461a      	mov	r2, r3
 8003b24:	2300      	movs	r3, #0
 8003b26:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003b28:	693b      	ldr	r3, [r7, #16]
 8003b2a:	015a      	lsls	r2, r3, #5
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	4413      	add	r3, r2
 8003b30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b34:	461a      	mov	r2, r3
 8003b36:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003b3a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	3301      	adds	r3, #1
 8003b40:	613b      	str	r3, [r7, #16]
 8003b42:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003b46:	461a      	mov	r2, r3
 8003b48:	693b      	ldr	r3, [r7, #16]
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d3b5      	bcc.n	8003aba <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b54:	691b      	ldr	r3, [r3, #16]
 8003b56:	68fa      	ldr	r2, [r7, #12]
 8003b58:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003b5c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003b60:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2200      	movs	r2, #0
 8003b66:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8003b6e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003b70:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d105      	bne.n	8003b84 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	699b      	ldr	r3, [r3, #24]
 8003b7c:	f043 0210 	orr.w	r2, r3, #16
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	699a      	ldr	r2, [r3, #24]
 8003b88:	4b10      	ldr	r3, [pc, #64]	@ (8003bcc <USB_DevInit+0x2c4>)
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	687a      	ldr	r2, [r7, #4]
 8003b8e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003b90:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d005      	beq.n	8003ba4 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	699b      	ldr	r3, [r3, #24]
 8003b9c:	f043 0208 	orr.w	r2, r3, #8
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003ba4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003ba8:	2b01      	cmp	r3, #1
 8003baa:	d107      	bne.n	8003bbc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	699b      	ldr	r3, [r3, #24]
 8003bb0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003bb4:	f043 0304 	orr.w	r3, r3, #4
 8003bb8:	687a      	ldr	r2, [r7, #4]
 8003bba:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003bbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	3718      	adds	r7, #24
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003bc8:	b004      	add	sp, #16
 8003bca:	4770      	bx	lr
 8003bcc:	803c3800 	.word	0x803c3800

08003bd0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b085      	sub	sp, #20
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
 8003bd8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	3301      	adds	r3, #1
 8003be2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003bea:	d901      	bls.n	8003bf0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003bec:	2303      	movs	r3, #3
 8003bee:	e01b      	b.n	8003c28 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	691b      	ldr	r3, [r3, #16]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	daf2      	bge.n	8003bde <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	019b      	lsls	r3, r3, #6
 8003c00:	f043 0220 	orr.w	r2, r3, #32
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	3301      	adds	r3, #1
 8003c0c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003c14:	d901      	bls.n	8003c1a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003c16:	2303      	movs	r3, #3
 8003c18:	e006      	b.n	8003c28 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	691b      	ldr	r3, [r3, #16]
 8003c1e:	f003 0320 	and.w	r3, r3, #32
 8003c22:	2b20      	cmp	r3, #32
 8003c24:	d0f0      	beq.n	8003c08 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003c26:	2300      	movs	r3, #0
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	3714      	adds	r7, #20
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c32:	4770      	bx	lr

08003c34 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b085      	sub	sp, #20
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	3301      	adds	r3, #1
 8003c44:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003c4c:	d901      	bls.n	8003c52 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003c4e:	2303      	movs	r3, #3
 8003c50:	e018      	b.n	8003c84 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	691b      	ldr	r3, [r3, #16]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	daf2      	bge.n	8003c40 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2210      	movs	r2, #16
 8003c62:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	3301      	adds	r3, #1
 8003c68:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003c70:	d901      	bls.n	8003c76 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003c72:	2303      	movs	r3, #3
 8003c74:	e006      	b.n	8003c84 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	691b      	ldr	r3, [r3, #16]
 8003c7a:	f003 0310 	and.w	r3, r3, #16
 8003c7e:	2b10      	cmp	r3, #16
 8003c80:	d0f0      	beq.n	8003c64 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003c82:	2300      	movs	r3, #0
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	3714      	adds	r7, #20
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8e:	4770      	bx	lr

08003c90 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b085      	sub	sp, #20
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
 8003c98:	460b      	mov	r3, r1
 8003c9a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ca6:	681a      	ldr	r2, [r3, #0]
 8003ca8:	78fb      	ldrb	r3, [r7, #3]
 8003caa:	68f9      	ldr	r1, [r7, #12]
 8003cac:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003cb4:	2300      	movs	r3, #0
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	3714      	adds	r7, #20
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc0:	4770      	bx	lr

08003cc2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8003cc2:	b480      	push	{r7}
 8003cc4:	b087      	sub	sp, #28
 8003cc6:	af00      	add	r7, sp, #0
 8003cc8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003cd4:	689b      	ldr	r3, [r3, #8]
 8003cd6:	f003 0306 	and.w	r3, r3, #6
 8003cda:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d102      	bne.n	8003ce8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	75fb      	strb	r3, [r7, #23]
 8003ce6:	e00a      	b.n	8003cfe <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	2b02      	cmp	r3, #2
 8003cec:	d002      	beq.n	8003cf4 <USB_GetDevSpeed+0x32>
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2b06      	cmp	r3, #6
 8003cf2:	d102      	bne.n	8003cfa <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003cf4:	2302      	movs	r3, #2
 8003cf6:	75fb      	strb	r3, [r7, #23]
 8003cf8:	e001      	b.n	8003cfe <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003cfa:	230f      	movs	r3, #15
 8003cfc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003cfe:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	371c      	adds	r7, #28
 8003d04:	46bd      	mov	sp, r7
 8003d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0a:	4770      	bx	lr

08003d0c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b085      	sub	sp, #20
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
 8003d14:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	781b      	ldrb	r3, [r3, #0]
 8003d1e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	785b      	ldrb	r3, [r3, #1]
 8003d24:	2b01      	cmp	r3, #1
 8003d26:	d13a      	bne.n	8003d9e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d2e:	69da      	ldr	r2, [r3, #28]
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	781b      	ldrb	r3, [r3, #0]
 8003d34:	f003 030f 	and.w	r3, r3, #15
 8003d38:	2101      	movs	r1, #1
 8003d3a:	fa01 f303 	lsl.w	r3, r1, r3
 8003d3e:	b29b      	uxth	r3, r3
 8003d40:	68f9      	ldr	r1, [r7, #12]
 8003d42:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003d46:	4313      	orrs	r3, r2
 8003d48:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	015a      	lsls	r2, r3, #5
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	4413      	add	r3, r2
 8003d52:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d155      	bne.n	8003e0c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	015a      	lsls	r2, r3, #5
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	4413      	add	r3, r2
 8003d68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d6c:	681a      	ldr	r2, [r3, #0]
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	689b      	ldr	r3, [r3, #8]
 8003d72:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	791b      	ldrb	r3, [r3, #4]
 8003d7a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003d7c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	059b      	lsls	r3, r3, #22
 8003d82:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003d84:	4313      	orrs	r3, r2
 8003d86:	68ba      	ldr	r2, [r7, #8]
 8003d88:	0151      	lsls	r1, r2, #5
 8003d8a:	68fa      	ldr	r2, [r7, #12]
 8003d8c:	440a      	add	r2, r1
 8003d8e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003d92:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d96:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003d9a:	6013      	str	r3, [r2, #0]
 8003d9c:	e036      	b.n	8003e0c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003da4:	69da      	ldr	r2, [r3, #28]
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	781b      	ldrb	r3, [r3, #0]
 8003daa:	f003 030f 	and.w	r3, r3, #15
 8003dae:	2101      	movs	r1, #1
 8003db0:	fa01 f303 	lsl.w	r3, r1, r3
 8003db4:	041b      	lsls	r3, r3, #16
 8003db6:	68f9      	ldr	r1, [r7, #12]
 8003db8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	015a      	lsls	r2, r3, #5
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	4413      	add	r3, r2
 8003dc8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d11a      	bne.n	8003e0c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	015a      	lsls	r2, r3, #5
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	4413      	add	r3, r2
 8003dde:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	791b      	ldrb	r3, [r3, #4]
 8003df0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003df2:	430b      	orrs	r3, r1
 8003df4:	4313      	orrs	r3, r2
 8003df6:	68ba      	ldr	r2, [r7, #8]
 8003df8:	0151      	lsls	r1, r2, #5
 8003dfa:	68fa      	ldr	r2, [r7, #12]
 8003dfc:	440a      	add	r2, r1
 8003dfe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003e02:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e06:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003e0a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003e0c:	2300      	movs	r3, #0
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	3714      	adds	r7, #20
 8003e12:	46bd      	mov	sp, r7
 8003e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e18:	4770      	bx	lr
	...

08003e1c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b085      	sub	sp, #20
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
 8003e24:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	781b      	ldrb	r3, [r3, #0]
 8003e2e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	785b      	ldrb	r3, [r3, #1]
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	d161      	bne.n	8003efc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	015a      	lsls	r2, r3, #5
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	4413      	add	r3, r2
 8003e40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003e4a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003e4e:	d11f      	bne.n	8003e90 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	015a      	lsls	r2, r3, #5
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	4413      	add	r3, r2
 8003e58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	68ba      	ldr	r2, [r7, #8]
 8003e60:	0151      	lsls	r1, r2, #5
 8003e62:	68fa      	ldr	r2, [r7, #12]
 8003e64:	440a      	add	r2, r1
 8003e66:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003e6a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003e6e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	015a      	lsls	r2, r3, #5
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	4413      	add	r3, r2
 8003e78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	68ba      	ldr	r2, [r7, #8]
 8003e80:	0151      	lsls	r1, r2, #5
 8003e82:	68fa      	ldr	r2, [r7, #12]
 8003e84:	440a      	add	r2, r1
 8003e86:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003e8a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003e8e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e96:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	781b      	ldrb	r3, [r3, #0]
 8003e9c:	f003 030f 	and.w	r3, r3, #15
 8003ea0:	2101      	movs	r1, #1
 8003ea2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ea6:	b29b      	uxth	r3, r3
 8003ea8:	43db      	mvns	r3, r3
 8003eaa:	68f9      	ldr	r1, [r7, #12]
 8003eac:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003eb0:	4013      	ands	r3, r2
 8003eb2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003eba:	69da      	ldr	r2, [r3, #28]
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	781b      	ldrb	r3, [r3, #0]
 8003ec0:	f003 030f 	and.w	r3, r3, #15
 8003ec4:	2101      	movs	r1, #1
 8003ec6:	fa01 f303 	lsl.w	r3, r1, r3
 8003eca:	b29b      	uxth	r3, r3
 8003ecc:	43db      	mvns	r3, r3
 8003ece:	68f9      	ldr	r1, [r7, #12]
 8003ed0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003ed4:	4013      	ands	r3, r2
 8003ed6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	015a      	lsls	r2, r3, #5
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	4413      	add	r3, r2
 8003ee0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ee4:	681a      	ldr	r2, [r3, #0]
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	0159      	lsls	r1, r3, #5
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	440b      	add	r3, r1
 8003eee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ef2:	4619      	mov	r1, r3
 8003ef4:	4b35      	ldr	r3, [pc, #212]	@ (8003fcc <USB_DeactivateEndpoint+0x1b0>)
 8003ef6:	4013      	ands	r3, r2
 8003ef8:	600b      	str	r3, [r1, #0]
 8003efa:	e060      	b.n	8003fbe <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	015a      	lsls	r2, r3, #5
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	4413      	add	r3, r2
 8003f04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003f0e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003f12:	d11f      	bne.n	8003f54 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	015a      	lsls	r2, r3, #5
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	4413      	add	r3, r2
 8003f1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	68ba      	ldr	r2, [r7, #8]
 8003f24:	0151      	lsls	r1, r2, #5
 8003f26:	68fa      	ldr	r2, [r7, #12]
 8003f28:	440a      	add	r2, r1
 8003f2a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003f2e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003f32:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	015a      	lsls	r2, r3, #5
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	4413      	add	r3, r2
 8003f3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	68ba      	ldr	r2, [r7, #8]
 8003f44:	0151      	lsls	r1, r2, #5
 8003f46:	68fa      	ldr	r2, [r7, #12]
 8003f48:	440a      	add	r2, r1
 8003f4a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003f4e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003f52:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f5a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	781b      	ldrb	r3, [r3, #0]
 8003f60:	f003 030f 	and.w	r3, r3, #15
 8003f64:	2101      	movs	r1, #1
 8003f66:	fa01 f303 	lsl.w	r3, r1, r3
 8003f6a:	041b      	lsls	r3, r3, #16
 8003f6c:	43db      	mvns	r3, r3
 8003f6e:	68f9      	ldr	r1, [r7, #12]
 8003f70:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003f74:	4013      	ands	r3, r2
 8003f76:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f7e:	69da      	ldr	r2, [r3, #28]
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	781b      	ldrb	r3, [r3, #0]
 8003f84:	f003 030f 	and.w	r3, r3, #15
 8003f88:	2101      	movs	r1, #1
 8003f8a:	fa01 f303 	lsl.w	r3, r1, r3
 8003f8e:	041b      	lsls	r3, r3, #16
 8003f90:	43db      	mvns	r3, r3
 8003f92:	68f9      	ldr	r1, [r7, #12]
 8003f94:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003f98:	4013      	ands	r3, r2
 8003f9a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	015a      	lsls	r2, r3, #5
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	4413      	add	r3, r2
 8003fa4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003fa8:	681a      	ldr	r2, [r3, #0]
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	0159      	lsls	r1, r3, #5
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	440b      	add	r3, r1
 8003fb2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003fb6:	4619      	mov	r1, r3
 8003fb8:	4b05      	ldr	r3, [pc, #20]	@ (8003fd0 <USB_DeactivateEndpoint+0x1b4>)
 8003fba:	4013      	ands	r3, r2
 8003fbc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003fbe:	2300      	movs	r3, #0
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	3714      	adds	r7, #20
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fca:	4770      	bx	lr
 8003fcc:	ec337800 	.word	0xec337800
 8003fd0:	eff37800 	.word	0xeff37800

08003fd4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b08a      	sub	sp, #40	@ 0x28
 8003fd8:	af02      	add	r7, sp, #8
 8003fda:	60f8      	str	r0, [r7, #12]
 8003fdc:	60b9      	str	r1, [r7, #8]
 8003fde:	4613      	mov	r3, r2
 8003fe0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	781b      	ldrb	r3, [r3, #0]
 8003fea:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	785b      	ldrb	r3, [r3, #1]
 8003ff0:	2b01      	cmp	r3, #1
 8003ff2:	f040 817f 	bne.w	80042f4 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	691b      	ldr	r3, [r3, #16]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d132      	bne.n	8004064 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003ffe:	69bb      	ldr	r3, [r7, #24]
 8004000:	015a      	lsls	r2, r3, #5
 8004002:	69fb      	ldr	r3, [r7, #28]
 8004004:	4413      	add	r3, r2
 8004006:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800400a:	691b      	ldr	r3, [r3, #16]
 800400c:	69ba      	ldr	r2, [r7, #24]
 800400e:	0151      	lsls	r1, r2, #5
 8004010:	69fa      	ldr	r2, [r7, #28]
 8004012:	440a      	add	r2, r1
 8004014:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004018:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800401c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004020:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004022:	69bb      	ldr	r3, [r7, #24]
 8004024:	015a      	lsls	r2, r3, #5
 8004026:	69fb      	ldr	r3, [r7, #28]
 8004028:	4413      	add	r3, r2
 800402a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800402e:	691b      	ldr	r3, [r3, #16]
 8004030:	69ba      	ldr	r2, [r7, #24]
 8004032:	0151      	lsls	r1, r2, #5
 8004034:	69fa      	ldr	r2, [r7, #28]
 8004036:	440a      	add	r2, r1
 8004038:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800403c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004040:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004042:	69bb      	ldr	r3, [r7, #24]
 8004044:	015a      	lsls	r2, r3, #5
 8004046:	69fb      	ldr	r3, [r7, #28]
 8004048:	4413      	add	r3, r2
 800404a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800404e:	691b      	ldr	r3, [r3, #16]
 8004050:	69ba      	ldr	r2, [r7, #24]
 8004052:	0151      	lsls	r1, r2, #5
 8004054:	69fa      	ldr	r2, [r7, #28]
 8004056:	440a      	add	r2, r1
 8004058:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800405c:	0cdb      	lsrs	r3, r3, #19
 800405e:	04db      	lsls	r3, r3, #19
 8004060:	6113      	str	r3, [r2, #16]
 8004062:	e097      	b.n	8004194 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004064:	69bb      	ldr	r3, [r7, #24]
 8004066:	015a      	lsls	r2, r3, #5
 8004068:	69fb      	ldr	r3, [r7, #28]
 800406a:	4413      	add	r3, r2
 800406c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004070:	691b      	ldr	r3, [r3, #16]
 8004072:	69ba      	ldr	r2, [r7, #24]
 8004074:	0151      	lsls	r1, r2, #5
 8004076:	69fa      	ldr	r2, [r7, #28]
 8004078:	440a      	add	r2, r1
 800407a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800407e:	0cdb      	lsrs	r3, r3, #19
 8004080:	04db      	lsls	r3, r3, #19
 8004082:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004084:	69bb      	ldr	r3, [r7, #24]
 8004086:	015a      	lsls	r2, r3, #5
 8004088:	69fb      	ldr	r3, [r7, #28]
 800408a:	4413      	add	r3, r2
 800408c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004090:	691b      	ldr	r3, [r3, #16]
 8004092:	69ba      	ldr	r2, [r7, #24]
 8004094:	0151      	lsls	r1, r2, #5
 8004096:	69fa      	ldr	r2, [r7, #28]
 8004098:	440a      	add	r2, r1
 800409a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800409e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80040a2:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80040a6:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80040a8:	69bb      	ldr	r3, [r7, #24]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d11a      	bne.n	80040e4 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	691a      	ldr	r2, [r3, #16]
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	429a      	cmp	r2, r3
 80040b8:	d903      	bls.n	80040c2 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	689a      	ldr	r2, [r3, #8]
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80040c2:	69bb      	ldr	r3, [r7, #24]
 80040c4:	015a      	lsls	r2, r3, #5
 80040c6:	69fb      	ldr	r3, [r7, #28]
 80040c8:	4413      	add	r3, r2
 80040ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80040ce:	691b      	ldr	r3, [r3, #16]
 80040d0:	69ba      	ldr	r2, [r7, #24]
 80040d2:	0151      	lsls	r1, r2, #5
 80040d4:	69fa      	ldr	r2, [r7, #28]
 80040d6:	440a      	add	r2, r1
 80040d8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80040dc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80040e0:	6113      	str	r3, [r2, #16]
 80040e2:	e044      	b.n	800416e <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	691a      	ldr	r2, [r3, #16]
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	4413      	add	r3, r2
 80040ee:	1e5a      	subs	r2, r3, #1
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80040f8:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 80040fa:	69bb      	ldr	r3, [r7, #24]
 80040fc:	015a      	lsls	r2, r3, #5
 80040fe:	69fb      	ldr	r3, [r7, #28]
 8004100:	4413      	add	r3, r2
 8004102:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004106:	691a      	ldr	r2, [r3, #16]
 8004108:	8afb      	ldrh	r3, [r7, #22]
 800410a:	04d9      	lsls	r1, r3, #19
 800410c:	4ba4      	ldr	r3, [pc, #656]	@ (80043a0 <USB_EPStartXfer+0x3cc>)
 800410e:	400b      	ands	r3, r1
 8004110:	69b9      	ldr	r1, [r7, #24]
 8004112:	0148      	lsls	r0, r1, #5
 8004114:	69f9      	ldr	r1, [r7, #28]
 8004116:	4401      	add	r1, r0
 8004118:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800411c:	4313      	orrs	r3, r2
 800411e:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	791b      	ldrb	r3, [r3, #4]
 8004124:	2b01      	cmp	r3, #1
 8004126:	d122      	bne.n	800416e <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004128:	69bb      	ldr	r3, [r7, #24]
 800412a:	015a      	lsls	r2, r3, #5
 800412c:	69fb      	ldr	r3, [r7, #28]
 800412e:	4413      	add	r3, r2
 8004130:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004134:	691b      	ldr	r3, [r3, #16]
 8004136:	69ba      	ldr	r2, [r7, #24]
 8004138:	0151      	lsls	r1, r2, #5
 800413a:	69fa      	ldr	r2, [r7, #28]
 800413c:	440a      	add	r2, r1
 800413e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004142:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8004146:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8004148:	69bb      	ldr	r3, [r7, #24]
 800414a:	015a      	lsls	r2, r3, #5
 800414c:	69fb      	ldr	r3, [r7, #28]
 800414e:	4413      	add	r3, r2
 8004150:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004154:	691a      	ldr	r2, [r3, #16]
 8004156:	8afb      	ldrh	r3, [r7, #22]
 8004158:	075b      	lsls	r3, r3, #29
 800415a:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800415e:	69b9      	ldr	r1, [r7, #24]
 8004160:	0148      	lsls	r0, r1, #5
 8004162:	69f9      	ldr	r1, [r7, #28]
 8004164:	4401      	add	r1, r0
 8004166:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800416a:	4313      	orrs	r3, r2
 800416c:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800416e:	69bb      	ldr	r3, [r7, #24]
 8004170:	015a      	lsls	r2, r3, #5
 8004172:	69fb      	ldr	r3, [r7, #28]
 8004174:	4413      	add	r3, r2
 8004176:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800417a:	691a      	ldr	r2, [r3, #16]
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	691b      	ldr	r3, [r3, #16]
 8004180:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004184:	69b9      	ldr	r1, [r7, #24]
 8004186:	0148      	lsls	r0, r1, #5
 8004188:	69f9      	ldr	r1, [r7, #28]
 800418a:	4401      	add	r1, r0
 800418c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004190:	4313      	orrs	r3, r2
 8004192:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004194:	79fb      	ldrb	r3, [r7, #7]
 8004196:	2b01      	cmp	r3, #1
 8004198:	d14b      	bne.n	8004232 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	69db      	ldr	r3, [r3, #28]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d009      	beq.n	80041b6 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80041a2:	69bb      	ldr	r3, [r7, #24]
 80041a4:	015a      	lsls	r2, r3, #5
 80041a6:	69fb      	ldr	r3, [r7, #28]
 80041a8:	4413      	add	r3, r2
 80041aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80041ae:	461a      	mov	r2, r3
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	69db      	ldr	r3, [r3, #28]
 80041b4:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	791b      	ldrb	r3, [r3, #4]
 80041ba:	2b01      	cmp	r3, #1
 80041bc:	d128      	bne.n	8004210 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80041be:	69fb      	ldr	r3, [r7, #28]
 80041c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80041c4:	689b      	ldr	r3, [r3, #8]
 80041c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d110      	bne.n	80041f0 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80041ce:	69bb      	ldr	r3, [r7, #24]
 80041d0:	015a      	lsls	r2, r3, #5
 80041d2:	69fb      	ldr	r3, [r7, #28]
 80041d4:	4413      	add	r3, r2
 80041d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	69ba      	ldr	r2, [r7, #24]
 80041de:	0151      	lsls	r1, r2, #5
 80041e0:	69fa      	ldr	r2, [r7, #28]
 80041e2:	440a      	add	r2, r1
 80041e4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80041e8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80041ec:	6013      	str	r3, [r2, #0]
 80041ee:	e00f      	b.n	8004210 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80041f0:	69bb      	ldr	r3, [r7, #24]
 80041f2:	015a      	lsls	r2, r3, #5
 80041f4:	69fb      	ldr	r3, [r7, #28]
 80041f6:	4413      	add	r3, r2
 80041f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	69ba      	ldr	r2, [r7, #24]
 8004200:	0151      	lsls	r1, r2, #5
 8004202:	69fa      	ldr	r2, [r7, #28]
 8004204:	440a      	add	r2, r1
 8004206:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800420a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800420e:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004210:	69bb      	ldr	r3, [r7, #24]
 8004212:	015a      	lsls	r2, r3, #5
 8004214:	69fb      	ldr	r3, [r7, #28]
 8004216:	4413      	add	r3, r2
 8004218:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	69ba      	ldr	r2, [r7, #24]
 8004220:	0151      	lsls	r1, r2, #5
 8004222:	69fa      	ldr	r2, [r7, #28]
 8004224:	440a      	add	r2, r1
 8004226:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800422a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800422e:	6013      	str	r3, [r2, #0]
 8004230:	e166      	b.n	8004500 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004232:	69bb      	ldr	r3, [r7, #24]
 8004234:	015a      	lsls	r2, r3, #5
 8004236:	69fb      	ldr	r3, [r7, #28]
 8004238:	4413      	add	r3, r2
 800423a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	69ba      	ldr	r2, [r7, #24]
 8004242:	0151      	lsls	r1, r2, #5
 8004244:	69fa      	ldr	r2, [r7, #28]
 8004246:	440a      	add	r2, r1
 8004248:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800424c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004250:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	791b      	ldrb	r3, [r3, #4]
 8004256:	2b01      	cmp	r3, #1
 8004258:	d015      	beq.n	8004286 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	691b      	ldr	r3, [r3, #16]
 800425e:	2b00      	cmp	r3, #0
 8004260:	f000 814e 	beq.w	8004500 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004264:	69fb      	ldr	r3, [r7, #28]
 8004266:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800426a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	781b      	ldrb	r3, [r3, #0]
 8004270:	f003 030f 	and.w	r3, r3, #15
 8004274:	2101      	movs	r1, #1
 8004276:	fa01 f303 	lsl.w	r3, r1, r3
 800427a:	69f9      	ldr	r1, [r7, #28]
 800427c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004280:	4313      	orrs	r3, r2
 8004282:	634b      	str	r3, [r1, #52]	@ 0x34
 8004284:	e13c      	b.n	8004500 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004286:	69fb      	ldr	r3, [r7, #28]
 8004288:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004292:	2b00      	cmp	r3, #0
 8004294:	d110      	bne.n	80042b8 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004296:	69bb      	ldr	r3, [r7, #24]
 8004298:	015a      	lsls	r2, r3, #5
 800429a:	69fb      	ldr	r3, [r7, #28]
 800429c:	4413      	add	r3, r2
 800429e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	69ba      	ldr	r2, [r7, #24]
 80042a6:	0151      	lsls	r1, r2, #5
 80042a8:	69fa      	ldr	r2, [r7, #28]
 80042aa:	440a      	add	r2, r1
 80042ac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80042b0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80042b4:	6013      	str	r3, [r2, #0]
 80042b6:	e00f      	b.n	80042d8 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80042b8:	69bb      	ldr	r3, [r7, #24]
 80042ba:	015a      	lsls	r2, r3, #5
 80042bc:	69fb      	ldr	r3, [r7, #28]
 80042be:	4413      	add	r3, r2
 80042c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	69ba      	ldr	r2, [r7, #24]
 80042c8:	0151      	lsls	r1, r2, #5
 80042ca:	69fa      	ldr	r2, [r7, #28]
 80042cc:	440a      	add	r2, r1
 80042ce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80042d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80042d6:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	68d9      	ldr	r1, [r3, #12]
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	781a      	ldrb	r2, [r3, #0]
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	691b      	ldr	r3, [r3, #16]
 80042e4:	b298      	uxth	r0, r3
 80042e6:	79fb      	ldrb	r3, [r7, #7]
 80042e8:	9300      	str	r3, [sp, #0]
 80042ea:	4603      	mov	r3, r0
 80042ec:	68f8      	ldr	r0, [r7, #12]
 80042ee:	f000 f9b9 	bl	8004664 <USB_WritePacket>
 80042f2:	e105      	b.n	8004500 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80042f4:	69bb      	ldr	r3, [r7, #24]
 80042f6:	015a      	lsls	r2, r3, #5
 80042f8:	69fb      	ldr	r3, [r7, #28]
 80042fa:	4413      	add	r3, r2
 80042fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004300:	691b      	ldr	r3, [r3, #16]
 8004302:	69ba      	ldr	r2, [r7, #24]
 8004304:	0151      	lsls	r1, r2, #5
 8004306:	69fa      	ldr	r2, [r7, #28]
 8004308:	440a      	add	r2, r1
 800430a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800430e:	0cdb      	lsrs	r3, r3, #19
 8004310:	04db      	lsls	r3, r3, #19
 8004312:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004314:	69bb      	ldr	r3, [r7, #24]
 8004316:	015a      	lsls	r2, r3, #5
 8004318:	69fb      	ldr	r3, [r7, #28]
 800431a:	4413      	add	r3, r2
 800431c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004320:	691b      	ldr	r3, [r3, #16]
 8004322:	69ba      	ldr	r2, [r7, #24]
 8004324:	0151      	lsls	r1, r2, #5
 8004326:	69fa      	ldr	r2, [r7, #28]
 8004328:	440a      	add	r2, r1
 800432a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800432e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004332:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004336:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8004338:	69bb      	ldr	r3, [r7, #24]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d132      	bne.n	80043a4 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	691b      	ldr	r3, [r3, #16]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d003      	beq.n	800434e <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	689a      	ldr	r2, [r3, #8]
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	689a      	ldr	r2, [r3, #8]
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004356:	69bb      	ldr	r3, [r7, #24]
 8004358:	015a      	lsls	r2, r3, #5
 800435a:	69fb      	ldr	r3, [r7, #28]
 800435c:	4413      	add	r3, r2
 800435e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004362:	691a      	ldr	r2, [r3, #16]
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	6a1b      	ldr	r3, [r3, #32]
 8004368:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800436c:	69b9      	ldr	r1, [r7, #24]
 800436e:	0148      	lsls	r0, r1, #5
 8004370:	69f9      	ldr	r1, [r7, #28]
 8004372:	4401      	add	r1, r0
 8004374:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004378:	4313      	orrs	r3, r2
 800437a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800437c:	69bb      	ldr	r3, [r7, #24]
 800437e:	015a      	lsls	r2, r3, #5
 8004380:	69fb      	ldr	r3, [r7, #28]
 8004382:	4413      	add	r3, r2
 8004384:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004388:	691b      	ldr	r3, [r3, #16]
 800438a:	69ba      	ldr	r2, [r7, #24]
 800438c:	0151      	lsls	r1, r2, #5
 800438e:	69fa      	ldr	r2, [r7, #28]
 8004390:	440a      	add	r2, r1
 8004392:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004396:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800439a:	6113      	str	r3, [r2, #16]
 800439c:	e062      	b.n	8004464 <USB_EPStartXfer+0x490>
 800439e:	bf00      	nop
 80043a0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	691b      	ldr	r3, [r3, #16]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d123      	bne.n	80043f4 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80043ac:	69bb      	ldr	r3, [r7, #24]
 80043ae:	015a      	lsls	r2, r3, #5
 80043b0:	69fb      	ldr	r3, [r7, #28]
 80043b2:	4413      	add	r3, r2
 80043b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043b8:	691a      	ldr	r2, [r3, #16]
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	689b      	ldr	r3, [r3, #8]
 80043be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043c2:	69b9      	ldr	r1, [r7, #24]
 80043c4:	0148      	lsls	r0, r1, #5
 80043c6:	69f9      	ldr	r1, [r7, #28]
 80043c8:	4401      	add	r1, r0
 80043ca:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80043ce:	4313      	orrs	r3, r2
 80043d0:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80043d2:	69bb      	ldr	r3, [r7, #24]
 80043d4:	015a      	lsls	r2, r3, #5
 80043d6:	69fb      	ldr	r3, [r7, #28]
 80043d8:	4413      	add	r3, r2
 80043da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043de:	691b      	ldr	r3, [r3, #16]
 80043e0:	69ba      	ldr	r2, [r7, #24]
 80043e2:	0151      	lsls	r1, r2, #5
 80043e4:	69fa      	ldr	r2, [r7, #28]
 80043e6:	440a      	add	r2, r1
 80043e8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80043ec:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80043f0:	6113      	str	r3, [r2, #16]
 80043f2:	e037      	b.n	8004464 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	691a      	ldr	r2, [r3, #16]
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	689b      	ldr	r3, [r3, #8]
 80043fc:	4413      	add	r3, r2
 80043fe:	1e5a      	subs	r2, r3, #1
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	689b      	ldr	r3, [r3, #8]
 8004404:	fbb2 f3f3 	udiv	r3, r2, r3
 8004408:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	689b      	ldr	r3, [r3, #8]
 800440e:	8afa      	ldrh	r2, [r7, #22]
 8004410:	fb03 f202 	mul.w	r2, r3, r2
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004418:	69bb      	ldr	r3, [r7, #24]
 800441a:	015a      	lsls	r2, r3, #5
 800441c:	69fb      	ldr	r3, [r7, #28]
 800441e:	4413      	add	r3, r2
 8004420:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004424:	691a      	ldr	r2, [r3, #16]
 8004426:	8afb      	ldrh	r3, [r7, #22]
 8004428:	04d9      	lsls	r1, r3, #19
 800442a:	4b38      	ldr	r3, [pc, #224]	@ (800450c <USB_EPStartXfer+0x538>)
 800442c:	400b      	ands	r3, r1
 800442e:	69b9      	ldr	r1, [r7, #24]
 8004430:	0148      	lsls	r0, r1, #5
 8004432:	69f9      	ldr	r1, [r7, #28]
 8004434:	4401      	add	r1, r0
 8004436:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800443a:	4313      	orrs	r3, r2
 800443c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800443e:	69bb      	ldr	r3, [r7, #24]
 8004440:	015a      	lsls	r2, r3, #5
 8004442:	69fb      	ldr	r3, [r7, #28]
 8004444:	4413      	add	r3, r2
 8004446:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800444a:	691a      	ldr	r2, [r3, #16]
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	6a1b      	ldr	r3, [r3, #32]
 8004450:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004454:	69b9      	ldr	r1, [r7, #24]
 8004456:	0148      	lsls	r0, r1, #5
 8004458:	69f9      	ldr	r1, [r7, #28]
 800445a:	4401      	add	r1, r0
 800445c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004460:	4313      	orrs	r3, r2
 8004462:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8004464:	79fb      	ldrb	r3, [r7, #7]
 8004466:	2b01      	cmp	r3, #1
 8004468:	d10d      	bne.n	8004486 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	68db      	ldr	r3, [r3, #12]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d009      	beq.n	8004486 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	68d9      	ldr	r1, [r3, #12]
 8004476:	69bb      	ldr	r3, [r7, #24]
 8004478:	015a      	lsls	r2, r3, #5
 800447a:	69fb      	ldr	r3, [r7, #28]
 800447c:	4413      	add	r3, r2
 800447e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004482:	460a      	mov	r2, r1
 8004484:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	791b      	ldrb	r3, [r3, #4]
 800448a:	2b01      	cmp	r3, #1
 800448c:	d128      	bne.n	80044e0 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800448e:	69fb      	ldr	r3, [r7, #28]
 8004490:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800449a:	2b00      	cmp	r3, #0
 800449c:	d110      	bne.n	80044c0 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800449e:	69bb      	ldr	r3, [r7, #24]
 80044a0:	015a      	lsls	r2, r3, #5
 80044a2:	69fb      	ldr	r3, [r7, #28]
 80044a4:	4413      	add	r3, r2
 80044a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	69ba      	ldr	r2, [r7, #24]
 80044ae:	0151      	lsls	r1, r2, #5
 80044b0:	69fa      	ldr	r2, [r7, #28]
 80044b2:	440a      	add	r2, r1
 80044b4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80044b8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80044bc:	6013      	str	r3, [r2, #0]
 80044be:	e00f      	b.n	80044e0 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80044c0:	69bb      	ldr	r3, [r7, #24]
 80044c2:	015a      	lsls	r2, r3, #5
 80044c4:	69fb      	ldr	r3, [r7, #28]
 80044c6:	4413      	add	r3, r2
 80044c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	69ba      	ldr	r2, [r7, #24]
 80044d0:	0151      	lsls	r1, r2, #5
 80044d2:	69fa      	ldr	r2, [r7, #28]
 80044d4:	440a      	add	r2, r1
 80044d6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80044da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80044de:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80044e0:	69bb      	ldr	r3, [r7, #24]
 80044e2:	015a      	lsls	r2, r3, #5
 80044e4:	69fb      	ldr	r3, [r7, #28]
 80044e6:	4413      	add	r3, r2
 80044e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	69ba      	ldr	r2, [r7, #24]
 80044f0:	0151      	lsls	r1, r2, #5
 80044f2:	69fa      	ldr	r2, [r7, #28]
 80044f4:	440a      	add	r2, r1
 80044f6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80044fa:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80044fe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004500:	2300      	movs	r3, #0
}
 8004502:	4618      	mov	r0, r3
 8004504:	3720      	adds	r7, #32
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}
 800450a:	bf00      	nop
 800450c:	1ff80000 	.word	0x1ff80000

08004510 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004510:	b480      	push	{r7}
 8004512:	b087      	sub	sp, #28
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
 8004518:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800451a:	2300      	movs	r3, #0
 800451c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800451e:	2300      	movs	r3, #0
 8004520:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	785b      	ldrb	r3, [r3, #1]
 800452a:	2b01      	cmp	r3, #1
 800452c:	d14a      	bne.n	80045c4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	781b      	ldrb	r3, [r3, #0]
 8004532:	015a      	lsls	r2, r3, #5
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	4413      	add	r3, r2
 8004538:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004542:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004546:	f040 8086 	bne.w	8004656 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	781b      	ldrb	r3, [r3, #0]
 800454e:	015a      	lsls	r2, r3, #5
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	4413      	add	r3, r2
 8004554:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	683a      	ldr	r2, [r7, #0]
 800455c:	7812      	ldrb	r2, [r2, #0]
 800455e:	0151      	lsls	r1, r2, #5
 8004560:	693a      	ldr	r2, [r7, #16]
 8004562:	440a      	add	r2, r1
 8004564:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004568:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800456c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	781b      	ldrb	r3, [r3, #0]
 8004572:	015a      	lsls	r2, r3, #5
 8004574:	693b      	ldr	r3, [r7, #16]
 8004576:	4413      	add	r3, r2
 8004578:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	683a      	ldr	r2, [r7, #0]
 8004580:	7812      	ldrb	r2, [r2, #0]
 8004582:	0151      	lsls	r1, r2, #5
 8004584:	693a      	ldr	r2, [r7, #16]
 8004586:	440a      	add	r2, r1
 8004588:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800458c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004590:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	3301      	adds	r3, #1
 8004596:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800459e:	4293      	cmp	r3, r2
 80045a0:	d902      	bls.n	80045a8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80045a2:	2301      	movs	r3, #1
 80045a4:	75fb      	strb	r3, [r7, #23]
          break;
 80045a6:	e056      	b.n	8004656 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	781b      	ldrb	r3, [r3, #0]
 80045ac:	015a      	lsls	r2, r3, #5
 80045ae:	693b      	ldr	r3, [r7, #16]
 80045b0:	4413      	add	r3, r2
 80045b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80045bc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80045c0:	d0e7      	beq.n	8004592 <USB_EPStopXfer+0x82>
 80045c2:	e048      	b.n	8004656 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	781b      	ldrb	r3, [r3, #0]
 80045c8:	015a      	lsls	r2, r3, #5
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	4413      	add	r3, r2
 80045ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80045d8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80045dc:	d13b      	bne.n	8004656 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	781b      	ldrb	r3, [r3, #0]
 80045e2:	015a      	lsls	r2, r3, #5
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	4413      	add	r3, r2
 80045e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	683a      	ldr	r2, [r7, #0]
 80045f0:	7812      	ldrb	r2, [r2, #0]
 80045f2:	0151      	lsls	r1, r2, #5
 80045f4:	693a      	ldr	r2, [r7, #16]
 80045f6:	440a      	add	r2, r1
 80045f8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80045fc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004600:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	781b      	ldrb	r3, [r3, #0]
 8004606:	015a      	lsls	r2, r3, #5
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	4413      	add	r3, r2
 800460c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	683a      	ldr	r2, [r7, #0]
 8004614:	7812      	ldrb	r2, [r2, #0]
 8004616:	0151      	lsls	r1, r2, #5
 8004618:	693a      	ldr	r2, [r7, #16]
 800461a:	440a      	add	r2, r1
 800461c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004620:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004624:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	3301      	adds	r3, #1
 800462a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8004632:	4293      	cmp	r3, r2
 8004634:	d902      	bls.n	800463c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	75fb      	strb	r3, [r7, #23]
          break;
 800463a:	e00c      	b.n	8004656 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	781b      	ldrb	r3, [r3, #0]
 8004640:	015a      	lsls	r2, r3, #5
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	4413      	add	r3, r2
 8004646:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004650:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004654:	d0e7      	beq.n	8004626 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8004656:	7dfb      	ldrb	r3, [r7, #23]
}
 8004658:	4618      	mov	r0, r3
 800465a:	371c      	adds	r7, #28
 800465c:	46bd      	mov	sp, r7
 800465e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004662:	4770      	bx	lr

08004664 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004664:	b480      	push	{r7}
 8004666:	b089      	sub	sp, #36	@ 0x24
 8004668:	af00      	add	r7, sp, #0
 800466a:	60f8      	str	r0, [r7, #12]
 800466c:	60b9      	str	r1, [r7, #8]
 800466e:	4611      	mov	r1, r2
 8004670:	461a      	mov	r2, r3
 8004672:	460b      	mov	r3, r1
 8004674:	71fb      	strb	r3, [r7, #7]
 8004676:	4613      	mov	r3, r2
 8004678:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004682:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004686:	2b00      	cmp	r3, #0
 8004688:	d123      	bne.n	80046d2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800468a:	88bb      	ldrh	r3, [r7, #4]
 800468c:	3303      	adds	r3, #3
 800468e:	089b      	lsrs	r3, r3, #2
 8004690:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004692:	2300      	movs	r3, #0
 8004694:	61bb      	str	r3, [r7, #24]
 8004696:	e018      	b.n	80046ca <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004698:	79fb      	ldrb	r3, [r7, #7]
 800469a:	031a      	lsls	r2, r3, #12
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	4413      	add	r3, r2
 80046a0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80046a4:	461a      	mov	r2, r3
 80046a6:	69fb      	ldr	r3, [r7, #28]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	6013      	str	r3, [r2, #0]
      pSrc++;
 80046ac:	69fb      	ldr	r3, [r7, #28]
 80046ae:	3301      	adds	r3, #1
 80046b0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80046b2:	69fb      	ldr	r3, [r7, #28]
 80046b4:	3301      	adds	r3, #1
 80046b6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80046b8:	69fb      	ldr	r3, [r7, #28]
 80046ba:	3301      	adds	r3, #1
 80046bc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80046be:	69fb      	ldr	r3, [r7, #28]
 80046c0:	3301      	adds	r3, #1
 80046c2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80046c4:	69bb      	ldr	r3, [r7, #24]
 80046c6:	3301      	adds	r3, #1
 80046c8:	61bb      	str	r3, [r7, #24]
 80046ca:	69ba      	ldr	r2, [r7, #24]
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	429a      	cmp	r2, r3
 80046d0:	d3e2      	bcc.n	8004698 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80046d2:	2300      	movs	r3, #0
}
 80046d4:	4618      	mov	r0, r3
 80046d6:	3724      	adds	r7, #36	@ 0x24
 80046d8:	46bd      	mov	sp, r7
 80046da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046de:	4770      	bx	lr

080046e0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80046e0:	b480      	push	{r7}
 80046e2:	b08b      	sub	sp, #44	@ 0x2c
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	60f8      	str	r0, [r7, #12]
 80046e8:	60b9      	str	r1, [r7, #8]
 80046ea:	4613      	mov	r3, r2
 80046ec:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80046f6:	88fb      	ldrh	r3, [r7, #6]
 80046f8:	089b      	lsrs	r3, r3, #2
 80046fa:	b29b      	uxth	r3, r3
 80046fc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80046fe:	88fb      	ldrh	r3, [r7, #6]
 8004700:	f003 0303 	and.w	r3, r3, #3
 8004704:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004706:	2300      	movs	r3, #0
 8004708:	623b      	str	r3, [r7, #32]
 800470a:	e014      	b.n	8004736 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800470c:	69bb      	ldr	r3, [r7, #24]
 800470e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004712:	681a      	ldr	r2, [r3, #0]
 8004714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004716:	601a      	str	r2, [r3, #0]
    pDest++;
 8004718:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800471a:	3301      	adds	r3, #1
 800471c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800471e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004720:	3301      	adds	r3, #1
 8004722:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004726:	3301      	adds	r3, #1
 8004728:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800472a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800472c:	3301      	adds	r3, #1
 800472e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8004730:	6a3b      	ldr	r3, [r7, #32]
 8004732:	3301      	adds	r3, #1
 8004734:	623b      	str	r3, [r7, #32]
 8004736:	6a3a      	ldr	r2, [r7, #32]
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	429a      	cmp	r2, r3
 800473c:	d3e6      	bcc.n	800470c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800473e:	8bfb      	ldrh	r3, [r7, #30]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d01e      	beq.n	8004782 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004744:	2300      	movs	r3, #0
 8004746:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004748:	69bb      	ldr	r3, [r7, #24]
 800474a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800474e:	461a      	mov	r2, r3
 8004750:	f107 0310 	add.w	r3, r7, #16
 8004754:	6812      	ldr	r2, [r2, #0]
 8004756:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004758:	693a      	ldr	r2, [r7, #16]
 800475a:	6a3b      	ldr	r3, [r7, #32]
 800475c:	b2db      	uxtb	r3, r3
 800475e:	00db      	lsls	r3, r3, #3
 8004760:	fa22 f303 	lsr.w	r3, r2, r3
 8004764:	b2da      	uxtb	r2, r3
 8004766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004768:	701a      	strb	r2, [r3, #0]
      i++;
 800476a:	6a3b      	ldr	r3, [r7, #32]
 800476c:	3301      	adds	r3, #1
 800476e:	623b      	str	r3, [r7, #32]
      pDest++;
 8004770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004772:	3301      	adds	r3, #1
 8004774:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8004776:	8bfb      	ldrh	r3, [r7, #30]
 8004778:	3b01      	subs	r3, #1
 800477a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800477c:	8bfb      	ldrh	r3, [r7, #30]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d1ea      	bne.n	8004758 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004784:	4618      	mov	r0, r3
 8004786:	372c      	adds	r7, #44	@ 0x2c
 8004788:	46bd      	mov	sp, r7
 800478a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478e:	4770      	bx	lr

08004790 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004790:	b480      	push	{r7}
 8004792:	b085      	sub	sp, #20
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
 8004798:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	781b      	ldrb	r3, [r3, #0]
 80047a2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	785b      	ldrb	r3, [r3, #1]
 80047a8:	2b01      	cmp	r3, #1
 80047aa:	d12c      	bne.n	8004806 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	015a      	lsls	r2, r3, #5
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	4413      	add	r3, r2
 80047b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	db12      	blt.n	80047e4 <USB_EPSetStall+0x54>
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d00f      	beq.n	80047e4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	015a      	lsls	r2, r3, #5
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	4413      	add	r3, r2
 80047cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	68ba      	ldr	r2, [r7, #8]
 80047d4:	0151      	lsls	r1, r2, #5
 80047d6:	68fa      	ldr	r2, [r7, #12]
 80047d8:	440a      	add	r2, r1
 80047da:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80047de:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80047e2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	015a      	lsls	r2, r3, #5
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	4413      	add	r3, r2
 80047ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	68ba      	ldr	r2, [r7, #8]
 80047f4:	0151      	lsls	r1, r2, #5
 80047f6:	68fa      	ldr	r2, [r7, #12]
 80047f8:	440a      	add	r2, r1
 80047fa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80047fe:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004802:	6013      	str	r3, [r2, #0]
 8004804:	e02b      	b.n	800485e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	015a      	lsls	r2, r3, #5
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	4413      	add	r3, r2
 800480e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	2b00      	cmp	r3, #0
 8004816:	db12      	blt.n	800483e <USB_EPSetStall+0xae>
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d00f      	beq.n	800483e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	015a      	lsls	r2, r3, #5
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	4413      	add	r3, r2
 8004826:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	68ba      	ldr	r2, [r7, #8]
 800482e:	0151      	lsls	r1, r2, #5
 8004830:	68fa      	ldr	r2, [r7, #12]
 8004832:	440a      	add	r2, r1
 8004834:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004838:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800483c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	015a      	lsls	r2, r3, #5
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	4413      	add	r3, r2
 8004846:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	68ba      	ldr	r2, [r7, #8]
 800484e:	0151      	lsls	r1, r2, #5
 8004850:	68fa      	ldr	r2, [r7, #12]
 8004852:	440a      	add	r2, r1
 8004854:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004858:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800485c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800485e:	2300      	movs	r3, #0
}
 8004860:	4618      	mov	r0, r3
 8004862:	3714      	adds	r7, #20
 8004864:	46bd      	mov	sp, r7
 8004866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486a:	4770      	bx	lr

0800486c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800486c:	b480      	push	{r7}
 800486e:	b085      	sub	sp, #20
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
 8004874:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	781b      	ldrb	r3, [r3, #0]
 800487e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	785b      	ldrb	r3, [r3, #1]
 8004884:	2b01      	cmp	r3, #1
 8004886:	d128      	bne.n	80048da <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	015a      	lsls	r2, r3, #5
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	4413      	add	r3, r2
 8004890:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	68ba      	ldr	r2, [r7, #8]
 8004898:	0151      	lsls	r1, r2, #5
 800489a:	68fa      	ldr	r2, [r7, #12]
 800489c:	440a      	add	r2, r1
 800489e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80048a2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80048a6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	791b      	ldrb	r3, [r3, #4]
 80048ac:	2b03      	cmp	r3, #3
 80048ae:	d003      	beq.n	80048b8 <USB_EPClearStall+0x4c>
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	791b      	ldrb	r3, [r3, #4]
 80048b4:	2b02      	cmp	r3, #2
 80048b6:	d138      	bne.n	800492a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	015a      	lsls	r2, r3, #5
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	4413      	add	r3, r2
 80048c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	68ba      	ldr	r2, [r7, #8]
 80048c8:	0151      	lsls	r1, r2, #5
 80048ca:	68fa      	ldr	r2, [r7, #12]
 80048cc:	440a      	add	r2, r1
 80048ce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80048d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80048d6:	6013      	str	r3, [r2, #0]
 80048d8:	e027      	b.n	800492a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	015a      	lsls	r2, r3, #5
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	4413      	add	r3, r2
 80048e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	68ba      	ldr	r2, [r7, #8]
 80048ea:	0151      	lsls	r1, r2, #5
 80048ec:	68fa      	ldr	r2, [r7, #12]
 80048ee:	440a      	add	r2, r1
 80048f0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80048f4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80048f8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	791b      	ldrb	r3, [r3, #4]
 80048fe:	2b03      	cmp	r3, #3
 8004900:	d003      	beq.n	800490a <USB_EPClearStall+0x9e>
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	791b      	ldrb	r3, [r3, #4]
 8004906:	2b02      	cmp	r3, #2
 8004908:	d10f      	bne.n	800492a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	015a      	lsls	r2, r3, #5
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	4413      	add	r3, r2
 8004912:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	68ba      	ldr	r2, [r7, #8]
 800491a:	0151      	lsls	r1, r2, #5
 800491c:	68fa      	ldr	r2, [r7, #12]
 800491e:	440a      	add	r2, r1
 8004920:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004924:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004928:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800492a:	2300      	movs	r3, #0
}
 800492c:	4618      	mov	r0, r3
 800492e:	3714      	adds	r7, #20
 8004930:	46bd      	mov	sp, r7
 8004932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004936:	4770      	bx	lr

08004938 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004938:	b480      	push	{r7}
 800493a:	b085      	sub	sp, #20
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
 8004940:	460b      	mov	r3, r1
 8004942:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	68fa      	ldr	r2, [r7, #12]
 8004952:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004956:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800495a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004962:	681a      	ldr	r2, [r3, #0]
 8004964:	78fb      	ldrb	r3, [r7, #3]
 8004966:	011b      	lsls	r3, r3, #4
 8004968:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800496c:	68f9      	ldr	r1, [r7, #12]
 800496e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004972:	4313      	orrs	r3, r2
 8004974:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004976:	2300      	movs	r3, #0
}
 8004978:	4618      	mov	r0, r3
 800497a:	3714      	adds	r7, #20
 800497c:	46bd      	mov	sp, r7
 800497e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004982:	4770      	bx	lr

08004984 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004984:	b480      	push	{r7}
 8004986:	b085      	sub	sp, #20
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	68fa      	ldr	r2, [r7, #12]
 800499a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800499e:	f023 0303 	bic.w	r3, r3, #3
 80049a2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	68fa      	ldr	r2, [r7, #12]
 80049ae:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80049b2:	f023 0302 	bic.w	r3, r3, #2
 80049b6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80049b8:	2300      	movs	r3, #0
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	3714      	adds	r7, #20
 80049be:	46bd      	mov	sp, r7
 80049c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c4:	4770      	bx	lr

080049c6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80049c6:	b480      	push	{r7}
 80049c8:	b085      	sub	sp, #20
 80049ca:	af00      	add	r7, sp, #0
 80049cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	68fa      	ldr	r2, [r7, #12]
 80049dc:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80049e0:	f023 0303 	bic.w	r3, r3, #3
 80049e4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	68fa      	ldr	r2, [r7, #12]
 80049f0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80049f4:	f043 0302 	orr.w	r3, r3, #2
 80049f8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80049fa:	2300      	movs	r3, #0
}
 80049fc:	4618      	mov	r0, r3
 80049fe:	3714      	adds	r7, #20
 8004a00:	46bd      	mov	sp, r7
 8004a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a06:	4770      	bx	lr

08004a08 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8004a08:	b480      	push	{r7}
 8004a0a:	b085      	sub	sp, #20
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	695b      	ldr	r3, [r3, #20]
 8004a14:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	699b      	ldr	r3, [r3, #24]
 8004a1a:	68fa      	ldr	r2, [r7, #12]
 8004a1c:	4013      	ands	r3, r2
 8004a1e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004a20:	68fb      	ldr	r3, [r7, #12]
}
 8004a22:	4618      	mov	r0, r3
 8004a24:	3714      	adds	r7, #20
 8004a26:	46bd      	mov	sp, r7
 8004a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2c:	4770      	bx	lr

08004a2e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8004a2e:	b480      	push	{r7}
 8004a30:	b085      	sub	sp, #20
 8004a32:	af00      	add	r7, sp, #0
 8004a34:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a40:	699b      	ldr	r3, [r3, #24]
 8004a42:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a4a:	69db      	ldr	r3, [r3, #28]
 8004a4c:	68ba      	ldr	r2, [r7, #8]
 8004a4e:	4013      	ands	r3, r2
 8004a50:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	0c1b      	lsrs	r3, r3, #16
}
 8004a56:	4618      	mov	r0, r3
 8004a58:	3714      	adds	r7, #20
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a60:	4770      	bx	lr

08004a62 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8004a62:	b480      	push	{r7}
 8004a64:	b085      	sub	sp, #20
 8004a66:	af00      	add	r7, sp, #0
 8004a68:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a74:	699b      	ldr	r3, [r3, #24]
 8004a76:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a7e:	69db      	ldr	r3, [r3, #28]
 8004a80:	68ba      	ldr	r2, [r7, #8]
 8004a82:	4013      	ands	r3, r2
 8004a84:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	b29b      	uxth	r3, r3
}
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	3714      	adds	r7, #20
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a94:	4770      	bx	lr

08004a96 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004a96:	b480      	push	{r7}
 8004a98:	b085      	sub	sp, #20
 8004a9a:	af00      	add	r7, sp, #0
 8004a9c:	6078      	str	r0, [r7, #4]
 8004a9e:	460b      	mov	r3, r1
 8004aa0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004aa6:	78fb      	ldrb	r3, [r7, #3]
 8004aa8:	015a      	lsls	r2, r3, #5
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	4413      	add	r3, r2
 8004aae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ab2:	689b      	ldr	r3, [r3, #8]
 8004ab4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004abc:	695b      	ldr	r3, [r3, #20]
 8004abe:	68ba      	ldr	r2, [r7, #8]
 8004ac0:	4013      	ands	r3, r2
 8004ac2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004ac4:	68bb      	ldr	r3, [r7, #8]
}
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	3714      	adds	r7, #20
 8004aca:	46bd      	mov	sp, r7
 8004acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad0:	4770      	bx	lr

08004ad2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004ad2:	b480      	push	{r7}
 8004ad4:	b087      	sub	sp, #28
 8004ad6:	af00      	add	r7, sp, #0
 8004ad8:	6078      	str	r0, [r7, #4]
 8004ada:	460b      	mov	r3, r1
 8004adc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004ae2:	697b      	ldr	r3, [r7, #20]
 8004ae4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ae8:	691b      	ldr	r3, [r3, #16]
 8004aea:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004af2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004af4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004af6:	78fb      	ldrb	r3, [r7, #3]
 8004af8:	f003 030f 	and.w	r3, r3, #15
 8004afc:	68fa      	ldr	r2, [r7, #12]
 8004afe:	fa22 f303 	lsr.w	r3, r2, r3
 8004b02:	01db      	lsls	r3, r3, #7
 8004b04:	b2db      	uxtb	r3, r3
 8004b06:	693a      	ldr	r2, [r7, #16]
 8004b08:	4313      	orrs	r3, r2
 8004b0a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004b0c:	78fb      	ldrb	r3, [r7, #3]
 8004b0e:	015a      	lsls	r2, r3, #5
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	4413      	add	r3, r2
 8004b14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b18:	689b      	ldr	r3, [r3, #8]
 8004b1a:	693a      	ldr	r2, [r7, #16]
 8004b1c:	4013      	ands	r3, r2
 8004b1e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004b20:	68bb      	ldr	r3, [r7, #8]
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	371c      	adds	r7, #28
 8004b26:	46bd      	mov	sp, r7
 8004b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2c:	4770      	bx	lr

08004b2e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8004b2e:	b480      	push	{r7}
 8004b30:	b083      	sub	sp, #12
 8004b32:	af00      	add	r7, sp, #0
 8004b34:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	695b      	ldr	r3, [r3, #20]
 8004b3a:	f003 0301 	and.w	r3, r3, #1
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	370c      	adds	r7, #12
 8004b42:	46bd      	mov	sp, r7
 8004b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b48:	4770      	bx	lr

08004b4a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8004b4a:	b480      	push	{r7}
 8004b4c:	b085      	sub	sp, #20
 8004b4e:	af00      	add	r7, sp, #0
 8004b50:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	68fa      	ldr	r2, [r7, #12]
 8004b60:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004b64:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004b68:	f023 0307 	bic.w	r3, r3, #7
 8004b6c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	68fa      	ldr	r2, [r7, #12]
 8004b78:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004b7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b80:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004b82:	2300      	movs	r3, #0
}
 8004b84:	4618      	mov	r0, r3
 8004b86:	3714      	adds	r7, #20
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8e:	4770      	bx	lr

08004b90 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8004b90:	b480      	push	{r7}
 8004b92:	b087      	sub	sp, #28
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	60f8      	str	r0, [r7, #12]
 8004b98:	460b      	mov	r3, r1
 8004b9a:	607a      	str	r2, [r7, #4]
 8004b9c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	333c      	adds	r3, #60	@ 0x3c
 8004ba6:	3304      	adds	r3, #4
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004bac:	693b      	ldr	r3, [r7, #16]
 8004bae:	4a26      	ldr	r2, [pc, #152]	@ (8004c48 <USB_EP0_OutStart+0xb8>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d90a      	bls.n	8004bca <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004bc0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004bc4:	d101      	bne.n	8004bca <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	e037      	b.n	8004c3a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004bca:	697b      	ldr	r3, [r7, #20]
 8004bcc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004bd0:	461a      	mov	r2, r3
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004bd6:	697b      	ldr	r3, [r7, #20]
 8004bd8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004bdc:	691b      	ldr	r3, [r3, #16]
 8004bde:	697a      	ldr	r2, [r7, #20]
 8004be0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004be4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004be8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004bea:	697b      	ldr	r3, [r7, #20]
 8004bec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004bf0:	691b      	ldr	r3, [r3, #16]
 8004bf2:	697a      	ldr	r2, [r7, #20]
 8004bf4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004bf8:	f043 0318 	orr.w	r3, r3, #24
 8004bfc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c04:	691b      	ldr	r3, [r3, #16]
 8004c06:	697a      	ldr	r2, [r7, #20]
 8004c08:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004c0c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8004c10:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004c12:	7afb      	ldrb	r3, [r7, #11]
 8004c14:	2b01      	cmp	r3, #1
 8004c16:	d10f      	bne.n	8004c38 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004c18:	697b      	ldr	r3, [r7, #20]
 8004c1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c1e:	461a      	mov	r2, r3
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	697a      	ldr	r2, [r7, #20]
 8004c2e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004c32:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8004c36:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004c38:	2300      	movs	r3, #0
}
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	371c      	adds	r7, #28
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c44:	4770      	bx	lr
 8004c46:	bf00      	nop
 8004c48:	4f54300a 	.word	0x4f54300a

08004c4c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b085      	sub	sp, #20
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004c54:	2300      	movs	r3, #0
 8004c56:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	3301      	adds	r3, #1
 8004c5c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004c64:	d901      	bls.n	8004c6a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004c66:	2303      	movs	r3, #3
 8004c68:	e01b      	b.n	8004ca2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	691b      	ldr	r3, [r3, #16]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	daf2      	bge.n	8004c58 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004c72:	2300      	movs	r3, #0
 8004c74:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	691b      	ldr	r3, [r3, #16]
 8004c7a:	f043 0201 	orr.w	r2, r3, #1
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	3301      	adds	r3, #1
 8004c86:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004c8e:	d901      	bls.n	8004c94 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004c90:	2303      	movs	r3, #3
 8004c92:	e006      	b.n	8004ca2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	691b      	ldr	r3, [r3, #16]
 8004c98:	f003 0301 	and.w	r3, r3, #1
 8004c9c:	2b01      	cmp	r3, #1
 8004c9e:	d0f0      	beq.n	8004c82 <USB_CoreReset+0x36>

  return HAL_OK;
 8004ca0:	2300      	movs	r3, #0
}
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	3714      	adds	r7, #20
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cac:	4770      	bx	lr
	...

08004cb0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b084      	sub	sp, #16
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
 8004cb8:	460b      	mov	r3, r1
 8004cba:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004cbc:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8004cc0:	f004 ffa8 	bl	8009c14 <USBD_static_malloc>
 8004cc4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d109      	bne.n	8004ce0 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	32b0      	adds	r2, #176	@ 0xb0
 8004cd6:	2100      	movs	r1, #0
 8004cd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8004cdc:	2302      	movs	r3, #2
 8004cde:	e0d4      	b.n	8004e8a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8004ce0:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8004ce4:	2100      	movs	r1, #0
 8004ce6:	68f8      	ldr	r0, [r7, #12]
 8004ce8:	f004 ffd8 	bl	8009c9c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	32b0      	adds	r2, #176	@ 0xb0
 8004cf6:	68f9      	ldr	r1, [r7, #12]
 8004cf8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	32b0      	adds	r2, #176	@ 0xb0
 8004d06:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	7c1b      	ldrb	r3, [r3, #16]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d138      	bne.n	8004d8a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004d18:	4b5e      	ldr	r3, [pc, #376]	@ (8004e94 <USBD_CDC_Init+0x1e4>)
 8004d1a:	7819      	ldrb	r1, [r3, #0]
 8004d1c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004d20:	2202      	movs	r2, #2
 8004d22:	6878      	ldr	r0, [r7, #4]
 8004d24:	f004 fe53 	bl	80099ce <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004d28:	4b5a      	ldr	r3, [pc, #360]	@ (8004e94 <USBD_CDC_Init+0x1e4>)
 8004d2a:	781b      	ldrb	r3, [r3, #0]
 8004d2c:	f003 020f 	and.w	r2, r3, #15
 8004d30:	6879      	ldr	r1, [r7, #4]
 8004d32:	4613      	mov	r3, r2
 8004d34:	009b      	lsls	r3, r3, #2
 8004d36:	4413      	add	r3, r2
 8004d38:	009b      	lsls	r3, r3, #2
 8004d3a:	440b      	add	r3, r1
 8004d3c:	3324      	adds	r3, #36	@ 0x24
 8004d3e:	2201      	movs	r2, #1
 8004d40:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8004d42:	4b55      	ldr	r3, [pc, #340]	@ (8004e98 <USBD_CDC_Init+0x1e8>)
 8004d44:	7819      	ldrb	r1, [r3, #0]
 8004d46:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004d4a:	2202      	movs	r2, #2
 8004d4c:	6878      	ldr	r0, [r7, #4]
 8004d4e:	f004 fe3e 	bl	80099ce <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8004d52:	4b51      	ldr	r3, [pc, #324]	@ (8004e98 <USBD_CDC_Init+0x1e8>)
 8004d54:	781b      	ldrb	r3, [r3, #0]
 8004d56:	f003 020f 	and.w	r2, r3, #15
 8004d5a:	6879      	ldr	r1, [r7, #4]
 8004d5c:	4613      	mov	r3, r2
 8004d5e:	009b      	lsls	r3, r3, #2
 8004d60:	4413      	add	r3, r2
 8004d62:	009b      	lsls	r3, r3, #2
 8004d64:	440b      	add	r3, r1
 8004d66:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8004d6e:	4b4b      	ldr	r3, [pc, #300]	@ (8004e9c <USBD_CDC_Init+0x1ec>)
 8004d70:	781b      	ldrb	r3, [r3, #0]
 8004d72:	f003 020f 	and.w	r2, r3, #15
 8004d76:	6879      	ldr	r1, [r7, #4]
 8004d78:	4613      	mov	r3, r2
 8004d7a:	009b      	lsls	r3, r3, #2
 8004d7c:	4413      	add	r3, r2
 8004d7e:	009b      	lsls	r3, r3, #2
 8004d80:	440b      	add	r3, r1
 8004d82:	3326      	adds	r3, #38	@ 0x26
 8004d84:	2210      	movs	r2, #16
 8004d86:	801a      	strh	r2, [r3, #0]
 8004d88:	e035      	b.n	8004df6 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004d8a:	4b42      	ldr	r3, [pc, #264]	@ (8004e94 <USBD_CDC_Init+0x1e4>)
 8004d8c:	7819      	ldrb	r1, [r3, #0]
 8004d8e:	2340      	movs	r3, #64	@ 0x40
 8004d90:	2202      	movs	r2, #2
 8004d92:	6878      	ldr	r0, [r7, #4]
 8004d94:	f004 fe1b 	bl	80099ce <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004d98:	4b3e      	ldr	r3, [pc, #248]	@ (8004e94 <USBD_CDC_Init+0x1e4>)
 8004d9a:	781b      	ldrb	r3, [r3, #0]
 8004d9c:	f003 020f 	and.w	r2, r3, #15
 8004da0:	6879      	ldr	r1, [r7, #4]
 8004da2:	4613      	mov	r3, r2
 8004da4:	009b      	lsls	r3, r3, #2
 8004da6:	4413      	add	r3, r2
 8004da8:	009b      	lsls	r3, r3, #2
 8004daa:	440b      	add	r3, r1
 8004dac:	3324      	adds	r3, #36	@ 0x24
 8004dae:	2201      	movs	r2, #1
 8004db0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8004db2:	4b39      	ldr	r3, [pc, #228]	@ (8004e98 <USBD_CDC_Init+0x1e8>)
 8004db4:	7819      	ldrb	r1, [r3, #0]
 8004db6:	2340      	movs	r3, #64	@ 0x40
 8004db8:	2202      	movs	r2, #2
 8004dba:	6878      	ldr	r0, [r7, #4]
 8004dbc:	f004 fe07 	bl	80099ce <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8004dc0:	4b35      	ldr	r3, [pc, #212]	@ (8004e98 <USBD_CDC_Init+0x1e8>)
 8004dc2:	781b      	ldrb	r3, [r3, #0]
 8004dc4:	f003 020f 	and.w	r2, r3, #15
 8004dc8:	6879      	ldr	r1, [r7, #4]
 8004dca:	4613      	mov	r3, r2
 8004dcc:	009b      	lsls	r3, r3, #2
 8004dce:	4413      	add	r3, r2
 8004dd0:	009b      	lsls	r3, r3, #2
 8004dd2:	440b      	add	r3, r1
 8004dd4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8004dd8:	2201      	movs	r2, #1
 8004dda:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8004ddc:	4b2f      	ldr	r3, [pc, #188]	@ (8004e9c <USBD_CDC_Init+0x1ec>)
 8004dde:	781b      	ldrb	r3, [r3, #0]
 8004de0:	f003 020f 	and.w	r2, r3, #15
 8004de4:	6879      	ldr	r1, [r7, #4]
 8004de6:	4613      	mov	r3, r2
 8004de8:	009b      	lsls	r3, r3, #2
 8004dea:	4413      	add	r3, r2
 8004dec:	009b      	lsls	r3, r3, #2
 8004dee:	440b      	add	r3, r1
 8004df0:	3326      	adds	r3, #38	@ 0x26
 8004df2:	2210      	movs	r2, #16
 8004df4:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004df6:	4b29      	ldr	r3, [pc, #164]	@ (8004e9c <USBD_CDC_Init+0x1ec>)
 8004df8:	7819      	ldrb	r1, [r3, #0]
 8004dfa:	2308      	movs	r3, #8
 8004dfc:	2203      	movs	r2, #3
 8004dfe:	6878      	ldr	r0, [r7, #4]
 8004e00:	f004 fde5 	bl	80099ce <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8004e04:	4b25      	ldr	r3, [pc, #148]	@ (8004e9c <USBD_CDC_Init+0x1ec>)
 8004e06:	781b      	ldrb	r3, [r3, #0]
 8004e08:	f003 020f 	and.w	r2, r3, #15
 8004e0c:	6879      	ldr	r1, [r7, #4]
 8004e0e:	4613      	mov	r3, r2
 8004e10:	009b      	lsls	r3, r3, #2
 8004e12:	4413      	add	r3, r2
 8004e14:	009b      	lsls	r3, r3, #2
 8004e16:	440b      	add	r3, r1
 8004e18:	3324      	adds	r3, #36	@ 0x24
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	2200      	movs	r2, #0
 8004e22:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004e2c:	687a      	ldr	r2, [r7, #4]
 8004e2e:	33b0      	adds	r3, #176	@ 0xb0
 8004e30:	009b      	lsls	r3, r3, #2
 8004e32:	4413      	add	r3, r2
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	2200      	movs	r2, #0
 8004e46:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d101      	bne.n	8004e58 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8004e54:	2302      	movs	r3, #2
 8004e56:	e018      	b.n	8004e8a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	7c1b      	ldrb	r3, [r3, #16]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d10a      	bne.n	8004e76 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004e60:	4b0d      	ldr	r3, [pc, #52]	@ (8004e98 <USBD_CDC_Init+0x1e8>)
 8004e62:	7819      	ldrb	r1, [r3, #0]
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8004e6a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004e6e:	6878      	ldr	r0, [r7, #4]
 8004e70:	f004 fe9c 	bl	8009bac <USBD_LL_PrepareReceive>
 8004e74:	e008      	b.n	8004e88 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004e76:	4b08      	ldr	r3, [pc, #32]	@ (8004e98 <USBD_CDC_Init+0x1e8>)
 8004e78:	7819      	ldrb	r1, [r3, #0]
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8004e80:	2340      	movs	r3, #64	@ 0x40
 8004e82:	6878      	ldr	r0, [r7, #4]
 8004e84:	f004 fe92 	bl	8009bac <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004e88:	2300      	movs	r3, #0
}
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	3710      	adds	r7, #16
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd80      	pop	{r7, pc}
 8004e92:	bf00      	nop
 8004e94:	20000093 	.word	0x20000093
 8004e98:	20000094 	.word	0x20000094
 8004e9c:	20000095 	.word	0x20000095

08004ea0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b082      	sub	sp, #8
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
 8004ea8:	460b      	mov	r3, r1
 8004eaa:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8004eac:	4b3a      	ldr	r3, [pc, #232]	@ (8004f98 <USBD_CDC_DeInit+0xf8>)
 8004eae:	781b      	ldrb	r3, [r3, #0]
 8004eb0:	4619      	mov	r1, r3
 8004eb2:	6878      	ldr	r0, [r7, #4]
 8004eb4:	f004 fdb1 	bl	8009a1a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8004eb8:	4b37      	ldr	r3, [pc, #220]	@ (8004f98 <USBD_CDC_DeInit+0xf8>)
 8004eba:	781b      	ldrb	r3, [r3, #0]
 8004ebc:	f003 020f 	and.w	r2, r3, #15
 8004ec0:	6879      	ldr	r1, [r7, #4]
 8004ec2:	4613      	mov	r3, r2
 8004ec4:	009b      	lsls	r3, r3, #2
 8004ec6:	4413      	add	r3, r2
 8004ec8:	009b      	lsls	r3, r3, #2
 8004eca:	440b      	add	r3, r1
 8004ecc:	3324      	adds	r3, #36	@ 0x24
 8004ece:	2200      	movs	r2, #0
 8004ed0:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8004ed2:	4b32      	ldr	r3, [pc, #200]	@ (8004f9c <USBD_CDC_DeInit+0xfc>)
 8004ed4:	781b      	ldrb	r3, [r3, #0]
 8004ed6:	4619      	mov	r1, r3
 8004ed8:	6878      	ldr	r0, [r7, #4]
 8004eda:	f004 fd9e 	bl	8009a1a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8004ede:	4b2f      	ldr	r3, [pc, #188]	@ (8004f9c <USBD_CDC_DeInit+0xfc>)
 8004ee0:	781b      	ldrb	r3, [r3, #0]
 8004ee2:	f003 020f 	and.w	r2, r3, #15
 8004ee6:	6879      	ldr	r1, [r7, #4]
 8004ee8:	4613      	mov	r3, r2
 8004eea:	009b      	lsls	r3, r3, #2
 8004eec:	4413      	add	r3, r2
 8004eee:	009b      	lsls	r3, r3, #2
 8004ef0:	440b      	add	r3, r1
 8004ef2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8004efa:	4b29      	ldr	r3, [pc, #164]	@ (8004fa0 <USBD_CDC_DeInit+0x100>)
 8004efc:	781b      	ldrb	r3, [r3, #0]
 8004efe:	4619      	mov	r1, r3
 8004f00:	6878      	ldr	r0, [r7, #4]
 8004f02:	f004 fd8a 	bl	8009a1a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8004f06:	4b26      	ldr	r3, [pc, #152]	@ (8004fa0 <USBD_CDC_DeInit+0x100>)
 8004f08:	781b      	ldrb	r3, [r3, #0]
 8004f0a:	f003 020f 	and.w	r2, r3, #15
 8004f0e:	6879      	ldr	r1, [r7, #4]
 8004f10:	4613      	mov	r3, r2
 8004f12:	009b      	lsls	r3, r3, #2
 8004f14:	4413      	add	r3, r2
 8004f16:	009b      	lsls	r3, r3, #2
 8004f18:	440b      	add	r3, r1
 8004f1a:	3324      	adds	r3, #36	@ 0x24
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8004f20:	4b1f      	ldr	r3, [pc, #124]	@ (8004fa0 <USBD_CDC_DeInit+0x100>)
 8004f22:	781b      	ldrb	r3, [r3, #0]
 8004f24:	f003 020f 	and.w	r2, r3, #15
 8004f28:	6879      	ldr	r1, [r7, #4]
 8004f2a:	4613      	mov	r3, r2
 8004f2c:	009b      	lsls	r3, r3, #2
 8004f2e:	4413      	add	r3, r2
 8004f30:	009b      	lsls	r3, r3, #2
 8004f32:	440b      	add	r3, r1
 8004f34:	3326      	adds	r3, #38	@ 0x26
 8004f36:	2200      	movs	r2, #0
 8004f38:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	32b0      	adds	r2, #176	@ 0xb0
 8004f44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d01f      	beq.n	8004f8c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004f52:	687a      	ldr	r2, [r7, #4]
 8004f54:	33b0      	adds	r3, #176	@ 0xb0
 8004f56:	009b      	lsls	r3, r3, #2
 8004f58:	4413      	add	r3, r2
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	32b0      	adds	r2, #176	@ 0xb0
 8004f6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f6e:	4618      	mov	r0, r3
 8004f70:	f004 fe5e 	bl	8009c30 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	32b0      	adds	r2, #176	@ 0xb0
 8004f7e:	2100      	movs	r1, #0
 8004f80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2200      	movs	r2, #0
 8004f88:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8004f8c:	2300      	movs	r3, #0
}
 8004f8e:	4618      	mov	r0, r3
 8004f90:	3708      	adds	r7, #8
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd80      	pop	{r7, pc}
 8004f96:	bf00      	nop
 8004f98:	20000093 	.word	0x20000093
 8004f9c:	20000094 	.word	0x20000094
 8004fa0:	20000095 	.word	0x20000095

08004fa4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b086      	sub	sp, #24
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
 8004fac:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	32b0      	adds	r2, #176	@ 0xb0
 8004fb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004fbc:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8004fca:	693b      	ldr	r3, [r7, #16]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d101      	bne.n	8004fd4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8004fd0:	2303      	movs	r3, #3
 8004fd2:	e0bf      	b.n	8005154 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	781b      	ldrb	r3, [r3, #0]
 8004fd8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d050      	beq.n	8005082 <USBD_CDC_Setup+0xde>
 8004fe0:	2b20      	cmp	r3, #32
 8004fe2:	f040 80af 	bne.w	8005144 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	88db      	ldrh	r3, [r3, #6]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d03a      	beq.n	8005064 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	781b      	ldrb	r3, [r3, #0]
 8004ff2:	b25b      	sxtb	r3, r3
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	da1b      	bge.n	8005030 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004ffe:	687a      	ldr	r2, [r7, #4]
 8005000:	33b0      	adds	r3, #176	@ 0xb0
 8005002:	009b      	lsls	r3, r3, #2
 8005004:	4413      	add	r3, r2
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	689b      	ldr	r3, [r3, #8]
 800500a:	683a      	ldr	r2, [r7, #0]
 800500c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800500e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005010:	683a      	ldr	r2, [r7, #0]
 8005012:	88d2      	ldrh	r2, [r2, #6]
 8005014:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	88db      	ldrh	r3, [r3, #6]
 800501a:	2b07      	cmp	r3, #7
 800501c:	bf28      	it	cs
 800501e:	2307      	movcs	r3, #7
 8005020:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	89fa      	ldrh	r2, [r7, #14]
 8005026:	4619      	mov	r1, r3
 8005028:	6878      	ldr	r0, [r7, #4]
 800502a:	f001 fd93 	bl	8006b54 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800502e:	e090      	b.n	8005152 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	785a      	ldrb	r2, [r3, #1]
 8005034:	693b      	ldr	r3, [r7, #16]
 8005036:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	88db      	ldrh	r3, [r3, #6]
 800503e:	2b3f      	cmp	r3, #63	@ 0x3f
 8005040:	d803      	bhi.n	800504a <USBD_CDC_Setup+0xa6>
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	88db      	ldrh	r3, [r3, #6]
 8005046:	b2da      	uxtb	r2, r3
 8005048:	e000      	b.n	800504c <USBD_CDC_Setup+0xa8>
 800504a:	2240      	movs	r2, #64	@ 0x40
 800504c:	693b      	ldr	r3, [r7, #16]
 800504e:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8005052:	6939      	ldr	r1, [r7, #16]
 8005054:	693b      	ldr	r3, [r7, #16]
 8005056:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800505a:	461a      	mov	r2, r3
 800505c:	6878      	ldr	r0, [r7, #4]
 800505e:	f001 fda5 	bl	8006bac <USBD_CtlPrepareRx>
      break;
 8005062:	e076      	b.n	8005152 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800506a:	687a      	ldr	r2, [r7, #4]
 800506c:	33b0      	adds	r3, #176	@ 0xb0
 800506e:	009b      	lsls	r3, r3, #2
 8005070:	4413      	add	r3, r2
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	689b      	ldr	r3, [r3, #8]
 8005076:	683a      	ldr	r2, [r7, #0]
 8005078:	7850      	ldrb	r0, [r2, #1]
 800507a:	2200      	movs	r2, #0
 800507c:	6839      	ldr	r1, [r7, #0]
 800507e:	4798      	blx	r3
      break;
 8005080:	e067      	b.n	8005152 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	785b      	ldrb	r3, [r3, #1]
 8005086:	2b0b      	cmp	r3, #11
 8005088:	d851      	bhi.n	800512e <USBD_CDC_Setup+0x18a>
 800508a:	a201      	add	r2, pc, #4	@ (adr r2, 8005090 <USBD_CDC_Setup+0xec>)
 800508c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005090:	080050c1 	.word	0x080050c1
 8005094:	0800513d 	.word	0x0800513d
 8005098:	0800512f 	.word	0x0800512f
 800509c:	0800512f 	.word	0x0800512f
 80050a0:	0800512f 	.word	0x0800512f
 80050a4:	0800512f 	.word	0x0800512f
 80050a8:	0800512f 	.word	0x0800512f
 80050ac:	0800512f 	.word	0x0800512f
 80050b0:	0800512f 	.word	0x0800512f
 80050b4:	0800512f 	.word	0x0800512f
 80050b8:	080050eb 	.word	0x080050eb
 80050bc:	08005115 	.word	0x08005115
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80050c6:	b2db      	uxtb	r3, r3
 80050c8:	2b03      	cmp	r3, #3
 80050ca:	d107      	bne.n	80050dc <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80050cc:	f107 030a 	add.w	r3, r7, #10
 80050d0:	2202      	movs	r2, #2
 80050d2:	4619      	mov	r1, r3
 80050d4:	6878      	ldr	r0, [r7, #4]
 80050d6:	f001 fd3d 	bl	8006b54 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80050da:	e032      	b.n	8005142 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80050dc:	6839      	ldr	r1, [r7, #0]
 80050de:	6878      	ldr	r0, [r7, #4]
 80050e0:	f001 fcbb 	bl	8006a5a <USBD_CtlError>
            ret = USBD_FAIL;
 80050e4:	2303      	movs	r3, #3
 80050e6:	75fb      	strb	r3, [r7, #23]
          break;
 80050e8:	e02b      	b.n	8005142 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80050f0:	b2db      	uxtb	r3, r3
 80050f2:	2b03      	cmp	r3, #3
 80050f4:	d107      	bne.n	8005106 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80050f6:	f107 030d 	add.w	r3, r7, #13
 80050fa:	2201      	movs	r2, #1
 80050fc:	4619      	mov	r1, r3
 80050fe:	6878      	ldr	r0, [r7, #4]
 8005100:	f001 fd28 	bl	8006b54 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005104:	e01d      	b.n	8005142 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005106:	6839      	ldr	r1, [r7, #0]
 8005108:	6878      	ldr	r0, [r7, #4]
 800510a:	f001 fca6 	bl	8006a5a <USBD_CtlError>
            ret = USBD_FAIL;
 800510e:	2303      	movs	r3, #3
 8005110:	75fb      	strb	r3, [r7, #23]
          break;
 8005112:	e016      	b.n	8005142 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800511a:	b2db      	uxtb	r3, r3
 800511c:	2b03      	cmp	r3, #3
 800511e:	d00f      	beq.n	8005140 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8005120:	6839      	ldr	r1, [r7, #0]
 8005122:	6878      	ldr	r0, [r7, #4]
 8005124:	f001 fc99 	bl	8006a5a <USBD_CtlError>
            ret = USBD_FAIL;
 8005128:	2303      	movs	r3, #3
 800512a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800512c:	e008      	b.n	8005140 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800512e:	6839      	ldr	r1, [r7, #0]
 8005130:	6878      	ldr	r0, [r7, #4]
 8005132:	f001 fc92 	bl	8006a5a <USBD_CtlError>
          ret = USBD_FAIL;
 8005136:	2303      	movs	r3, #3
 8005138:	75fb      	strb	r3, [r7, #23]
          break;
 800513a:	e002      	b.n	8005142 <USBD_CDC_Setup+0x19e>
          break;
 800513c:	bf00      	nop
 800513e:	e008      	b.n	8005152 <USBD_CDC_Setup+0x1ae>
          break;
 8005140:	bf00      	nop
      }
      break;
 8005142:	e006      	b.n	8005152 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8005144:	6839      	ldr	r1, [r7, #0]
 8005146:	6878      	ldr	r0, [r7, #4]
 8005148:	f001 fc87 	bl	8006a5a <USBD_CtlError>
      ret = USBD_FAIL;
 800514c:	2303      	movs	r3, #3
 800514e:	75fb      	strb	r3, [r7, #23]
      break;
 8005150:	bf00      	nop
  }

  return (uint8_t)ret;
 8005152:	7dfb      	ldrb	r3, [r7, #23]
}
 8005154:	4618      	mov	r0, r3
 8005156:	3718      	adds	r7, #24
 8005158:	46bd      	mov	sp, r7
 800515a:	bd80      	pop	{r7, pc}

0800515c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b084      	sub	sp, #16
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
 8005164:	460b      	mov	r3, r1
 8005166:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800516e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	32b0      	adds	r2, #176	@ 0xb0
 800517a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d101      	bne.n	8005186 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8005182:	2303      	movs	r3, #3
 8005184:	e065      	b.n	8005252 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	32b0      	adds	r2, #176	@ 0xb0
 8005190:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005194:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005196:	78fb      	ldrb	r3, [r7, #3]
 8005198:	f003 020f 	and.w	r2, r3, #15
 800519c:	6879      	ldr	r1, [r7, #4]
 800519e:	4613      	mov	r3, r2
 80051a0:	009b      	lsls	r3, r3, #2
 80051a2:	4413      	add	r3, r2
 80051a4:	009b      	lsls	r3, r3, #2
 80051a6:	440b      	add	r3, r1
 80051a8:	3318      	adds	r3, #24
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d02f      	beq.n	8005210 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80051b0:	78fb      	ldrb	r3, [r7, #3]
 80051b2:	f003 020f 	and.w	r2, r3, #15
 80051b6:	6879      	ldr	r1, [r7, #4]
 80051b8:	4613      	mov	r3, r2
 80051ba:	009b      	lsls	r3, r3, #2
 80051bc:	4413      	add	r3, r2
 80051be:	009b      	lsls	r3, r3, #2
 80051c0:	440b      	add	r3, r1
 80051c2:	3318      	adds	r3, #24
 80051c4:	681a      	ldr	r2, [r3, #0]
 80051c6:	78fb      	ldrb	r3, [r7, #3]
 80051c8:	f003 010f 	and.w	r1, r3, #15
 80051cc:	68f8      	ldr	r0, [r7, #12]
 80051ce:	460b      	mov	r3, r1
 80051d0:	00db      	lsls	r3, r3, #3
 80051d2:	440b      	add	r3, r1
 80051d4:	009b      	lsls	r3, r3, #2
 80051d6:	4403      	add	r3, r0
 80051d8:	331c      	adds	r3, #28
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	fbb2 f1f3 	udiv	r1, r2, r3
 80051e0:	fb01 f303 	mul.w	r3, r1, r3
 80051e4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d112      	bne.n	8005210 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80051ea:	78fb      	ldrb	r3, [r7, #3]
 80051ec:	f003 020f 	and.w	r2, r3, #15
 80051f0:	6879      	ldr	r1, [r7, #4]
 80051f2:	4613      	mov	r3, r2
 80051f4:	009b      	lsls	r3, r3, #2
 80051f6:	4413      	add	r3, r2
 80051f8:	009b      	lsls	r3, r3, #2
 80051fa:	440b      	add	r3, r1
 80051fc:	3318      	adds	r3, #24
 80051fe:	2200      	movs	r2, #0
 8005200:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005202:	78f9      	ldrb	r1, [r7, #3]
 8005204:	2300      	movs	r3, #0
 8005206:	2200      	movs	r2, #0
 8005208:	6878      	ldr	r0, [r7, #4]
 800520a:	f004 fcae 	bl	8009b6a <USBD_LL_Transmit>
 800520e:	e01f      	b.n	8005250 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	2200      	movs	r2, #0
 8005214:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800521e:	687a      	ldr	r2, [r7, #4]
 8005220:	33b0      	adds	r3, #176	@ 0xb0
 8005222:	009b      	lsls	r3, r3, #2
 8005224:	4413      	add	r3, r2
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	691b      	ldr	r3, [r3, #16]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d010      	beq.n	8005250 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005234:	687a      	ldr	r2, [r7, #4]
 8005236:	33b0      	adds	r3, #176	@ 0xb0
 8005238:	009b      	lsls	r3, r3, #2
 800523a:	4413      	add	r3, r2
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	691b      	ldr	r3, [r3, #16]
 8005240:	68ba      	ldr	r2, [r7, #8]
 8005242:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8005246:	68ba      	ldr	r2, [r7, #8]
 8005248:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800524c:	78fa      	ldrb	r2, [r7, #3]
 800524e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005250:	2300      	movs	r3, #0
}
 8005252:	4618      	mov	r0, r3
 8005254:	3710      	adds	r7, #16
 8005256:	46bd      	mov	sp, r7
 8005258:	bd80      	pop	{r7, pc}

0800525a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800525a:	b580      	push	{r7, lr}
 800525c:	b084      	sub	sp, #16
 800525e:	af00      	add	r7, sp, #0
 8005260:	6078      	str	r0, [r7, #4]
 8005262:	460b      	mov	r3, r1
 8005264:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	32b0      	adds	r2, #176	@ 0xb0
 8005270:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005274:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	32b0      	adds	r2, #176	@ 0xb0
 8005280:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d101      	bne.n	800528c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005288:	2303      	movs	r3, #3
 800528a:	e01a      	b.n	80052c2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800528c:	78fb      	ldrb	r3, [r7, #3]
 800528e:	4619      	mov	r1, r3
 8005290:	6878      	ldr	r0, [r7, #4]
 8005292:	f004 fcac 	bl	8009bee <USBD_LL_GetRxDataSize>
 8005296:	4602      	mov	r2, r0
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80052a4:	687a      	ldr	r2, [r7, #4]
 80052a6:	33b0      	adds	r3, #176	@ 0xb0
 80052a8:	009b      	lsls	r3, r3, #2
 80052aa:	4413      	add	r3, r2
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	68db      	ldr	r3, [r3, #12]
 80052b0:	68fa      	ldr	r2, [r7, #12]
 80052b2:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80052b6:	68fa      	ldr	r2, [r7, #12]
 80052b8:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80052bc:	4611      	mov	r1, r2
 80052be:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80052c0:	2300      	movs	r3, #0
}
 80052c2:	4618      	mov	r0, r3
 80052c4:	3710      	adds	r7, #16
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bd80      	pop	{r7, pc}

080052ca <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80052ca:	b580      	push	{r7, lr}
 80052cc:	b084      	sub	sp, #16
 80052ce:	af00      	add	r7, sp, #0
 80052d0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	32b0      	adds	r2, #176	@ 0xb0
 80052dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052e0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d101      	bne.n	80052ec <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80052e8:	2303      	movs	r3, #3
 80052ea:	e024      	b.n	8005336 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80052f2:	687a      	ldr	r2, [r7, #4]
 80052f4:	33b0      	adds	r3, #176	@ 0xb0
 80052f6:	009b      	lsls	r3, r3, #2
 80052f8:	4413      	add	r3, r2
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d019      	beq.n	8005334 <USBD_CDC_EP0_RxReady+0x6a>
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8005306:	2bff      	cmp	r3, #255	@ 0xff
 8005308:	d014      	beq.n	8005334 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005310:	687a      	ldr	r2, [r7, #4]
 8005312:	33b0      	adds	r3, #176	@ 0xb0
 8005314:	009b      	lsls	r3, r3, #2
 8005316:	4413      	add	r3, r2
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	689b      	ldr	r3, [r3, #8]
 800531c:	68fa      	ldr	r2, [r7, #12]
 800531e:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8005322:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8005324:	68fa      	ldr	r2, [r7, #12]
 8005326:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800532a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	22ff      	movs	r2, #255	@ 0xff
 8005330:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8005334:	2300      	movs	r3, #0
}
 8005336:	4618      	mov	r0, r3
 8005338:	3710      	adds	r7, #16
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}
	...

08005340 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b086      	sub	sp, #24
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005348:	2182      	movs	r1, #130	@ 0x82
 800534a:	4818      	ldr	r0, [pc, #96]	@ (80053ac <USBD_CDC_GetFSCfgDesc+0x6c>)
 800534c:	f000 fd4f 	bl	8005dee <USBD_GetEpDesc>
 8005350:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005352:	2101      	movs	r1, #1
 8005354:	4815      	ldr	r0, [pc, #84]	@ (80053ac <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005356:	f000 fd4a 	bl	8005dee <USBD_GetEpDesc>
 800535a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800535c:	2181      	movs	r1, #129	@ 0x81
 800535e:	4813      	ldr	r0, [pc, #76]	@ (80053ac <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005360:	f000 fd45 	bl	8005dee <USBD_GetEpDesc>
 8005364:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005366:	697b      	ldr	r3, [r7, #20]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d002      	beq.n	8005372 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800536c:	697b      	ldr	r3, [r7, #20]
 800536e:	2210      	movs	r2, #16
 8005370:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d006      	beq.n	8005386 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005378:	693b      	ldr	r3, [r7, #16]
 800537a:	2200      	movs	r2, #0
 800537c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005380:	711a      	strb	r2, [r3, #4]
 8005382:	2200      	movs	r2, #0
 8005384:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d006      	beq.n	800539a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	2200      	movs	r2, #0
 8005390:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005394:	711a      	strb	r2, [r3, #4]
 8005396:	2200      	movs	r2, #0
 8005398:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2243      	movs	r2, #67	@ 0x43
 800539e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80053a0:	4b02      	ldr	r3, [pc, #8]	@ (80053ac <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80053a2:	4618      	mov	r0, r3
 80053a4:	3718      	adds	r7, #24
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd80      	pop	{r7, pc}
 80053aa:	bf00      	nop
 80053ac:	20000050 	.word	0x20000050

080053b0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b086      	sub	sp, #24
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80053b8:	2182      	movs	r1, #130	@ 0x82
 80053ba:	4818      	ldr	r0, [pc, #96]	@ (800541c <USBD_CDC_GetHSCfgDesc+0x6c>)
 80053bc:	f000 fd17 	bl	8005dee <USBD_GetEpDesc>
 80053c0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80053c2:	2101      	movs	r1, #1
 80053c4:	4815      	ldr	r0, [pc, #84]	@ (800541c <USBD_CDC_GetHSCfgDesc+0x6c>)
 80053c6:	f000 fd12 	bl	8005dee <USBD_GetEpDesc>
 80053ca:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80053cc:	2181      	movs	r1, #129	@ 0x81
 80053ce:	4813      	ldr	r0, [pc, #76]	@ (800541c <USBD_CDC_GetHSCfgDesc+0x6c>)
 80053d0:	f000 fd0d 	bl	8005dee <USBD_GetEpDesc>
 80053d4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80053d6:	697b      	ldr	r3, [r7, #20]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d002      	beq.n	80053e2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80053dc:	697b      	ldr	r3, [r7, #20]
 80053de:	2210      	movs	r2, #16
 80053e0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80053e2:	693b      	ldr	r3, [r7, #16]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d006      	beq.n	80053f6 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80053e8:	693b      	ldr	r3, [r7, #16]
 80053ea:	2200      	movs	r2, #0
 80053ec:	711a      	strb	r2, [r3, #4]
 80053ee:	2200      	movs	r2, #0
 80053f0:	f042 0202 	orr.w	r2, r2, #2
 80053f4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d006      	beq.n	800540a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	2200      	movs	r2, #0
 8005400:	711a      	strb	r2, [r3, #4]
 8005402:	2200      	movs	r2, #0
 8005404:	f042 0202 	orr.w	r2, r2, #2
 8005408:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2243      	movs	r2, #67	@ 0x43
 800540e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005410:	4b02      	ldr	r3, [pc, #8]	@ (800541c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8005412:	4618      	mov	r0, r3
 8005414:	3718      	adds	r7, #24
 8005416:	46bd      	mov	sp, r7
 8005418:	bd80      	pop	{r7, pc}
 800541a:	bf00      	nop
 800541c:	20000050 	.word	0x20000050

08005420 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b086      	sub	sp, #24
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005428:	2182      	movs	r1, #130	@ 0x82
 800542a:	4818      	ldr	r0, [pc, #96]	@ (800548c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800542c:	f000 fcdf 	bl	8005dee <USBD_GetEpDesc>
 8005430:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005432:	2101      	movs	r1, #1
 8005434:	4815      	ldr	r0, [pc, #84]	@ (800548c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005436:	f000 fcda 	bl	8005dee <USBD_GetEpDesc>
 800543a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800543c:	2181      	movs	r1, #129	@ 0x81
 800543e:	4813      	ldr	r0, [pc, #76]	@ (800548c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005440:	f000 fcd5 	bl	8005dee <USBD_GetEpDesc>
 8005444:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005446:	697b      	ldr	r3, [r7, #20]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d002      	beq.n	8005452 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	2210      	movs	r2, #16
 8005450:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005452:	693b      	ldr	r3, [r7, #16]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d006      	beq.n	8005466 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005458:	693b      	ldr	r3, [r7, #16]
 800545a:	2200      	movs	r2, #0
 800545c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005460:	711a      	strb	r2, [r3, #4]
 8005462:	2200      	movs	r2, #0
 8005464:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d006      	beq.n	800547a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	2200      	movs	r2, #0
 8005470:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005474:	711a      	strb	r2, [r3, #4]
 8005476:	2200      	movs	r2, #0
 8005478:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2243      	movs	r2, #67	@ 0x43
 800547e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005480:	4b02      	ldr	r3, [pc, #8]	@ (800548c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8005482:	4618      	mov	r0, r3
 8005484:	3718      	adds	r7, #24
 8005486:	46bd      	mov	sp, r7
 8005488:	bd80      	pop	{r7, pc}
 800548a:	bf00      	nop
 800548c:	20000050 	.word	0x20000050

08005490 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005490:	b480      	push	{r7}
 8005492:	b083      	sub	sp, #12
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	220a      	movs	r2, #10
 800549c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800549e:	4b03      	ldr	r3, [pc, #12]	@ (80054ac <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80054a0:	4618      	mov	r0, r3
 80054a2:	370c      	adds	r7, #12
 80054a4:	46bd      	mov	sp, r7
 80054a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054aa:	4770      	bx	lr
 80054ac:	2000000c 	.word	0x2000000c

080054b0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80054b0:	b480      	push	{r7}
 80054b2:	b083      	sub	sp, #12
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
 80054b8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d101      	bne.n	80054c4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80054c0:	2303      	movs	r3, #3
 80054c2:	e009      	b.n	80054d8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80054ca:	687a      	ldr	r2, [r7, #4]
 80054cc:	33b0      	adds	r3, #176	@ 0xb0
 80054ce:	009b      	lsls	r3, r3, #2
 80054d0:	4413      	add	r3, r2
 80054d2:	683a      	ldr	r2, [r7, #0]
 80054d4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80054d6:	2300      	movs	r3, #0
}
 80054d8:	4618      	mov	r0, r3
 80054da:	370c      	adds	r7, #12
 80054dc:	46bd      	mov	sp, r7
 80054de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e2:	4770      	bx	lr

080054e4 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80054e4:	b480      	push	{r7}
 80054e6:	b087      	sub	sp, #28
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	60f8      	str	r0, [r7, #12]
 80054ec:	60b9      	str	r1, [r7, #8]
 80054ee:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	32b0      	adds	r2, #176	@ 0xb0
 80054fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054fe:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8005500:	697b      	ldr	r3, [r7, #20]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d101      	bne.n	800550a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8005506:	2303      	movs	r3, #3
 8005508:	e008      	b.n	800551c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800550a:	697b      	ldr	r3, [r7, #20]
 800550c:	68ba      	ldr	r2, [r7, #8]
 800550e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	687a      	ldr	r2, [r7, #4]
 8005516:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800551a:	2300      	movs	r3, #0
}
 800551c:	4618      	mov	r0, r3
 800551e:	371c      	adds	r7, #28
 8005520:	46bd      	mov	sp, r7
 8005522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005526:	4770      	bx	lr

08005528 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005528:	b480      	push	{r7}
 800552a:	b085      	sub	sp, #20
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
 8005530:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	32b0      	adds	r2, #176	@ 0xb0
 800553c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005540:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d101      	bne.n	800554c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8005548:	2303      	movs	r3, #3
 800554a:	e004      	b.n	8005556 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	683a      	ldr	r2, [r7, #0]
 8005550:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8005554:	2300      	movs	r3, #0
}
 8005556:	4618      	mov	r0, r3
 8005558:	3714      	adds	r7, #20
 800555a:	46bd      	mov	sp, r7
 800555c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005560:	4770      	bx	lr
	...

08005564 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b084      	sub	sp, #16
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	32b0      	adds	r2, #176	@ 0xb0
 8005576:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800557a:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800557c:	2301      	movs	r3, #1
 800557e:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d101      	bne.n	800558a <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8005586:	2303      	movs	r3, #3
 8005588:	e025      	b.n	80055d6 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800558a:	68bb      	ldr	r3, [r7, #8]
 800558c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8005590:	2b00      	cmp	r3, #0
 8005592:	d11f      	bne.n	80055d4 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	2201      	movs	r2, #1
 8005598:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800559c:	4b10      	ldr	r3, [pc, #64]	@ (80055e0 <USBD_CDC_TransmitPacket+0x7c>)
 800559e:	781b      	ldrb	r3, [r3, #0]
 80055a0:	f003 020f 	and.w	r2, r3, #15
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 80055aa:	6878      	ldr	r0, [r7, #4]
 80055ac:	4613      	mov	r3, r2
 80055ae:	009b      	lsls	r3, r3, #2
 80055b0:	4413      	add	r3, r2
 80055b2:	009b      	lsls	r3, r3, #2
 80055b4:	4403      	add	r3, r0
 80055b6:	3318      	adds	r3, #24
 80055b8:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80055ba:	4b09      	ldr	r3, [pc, #36]	@ (80055e0 <USBD_CDC_TransmitPacket+0x7c>)
 80055bc:	7819      	ldrb	r1, [r3, #0]
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	f004 facd 	bl	8009b6a <USBD_LL_Transmit>

    ret = USBD_OK;
 80055d0:	2300      	movs	r3, #0
 80055d2:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80055d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80055d6:	4618      	mov	r0, r3
 80055d8:	3710      	adds	r7, #16
 80055da:	46bd      	mov	sp, r7
 80055dc:	bd80      	pop	{r7, pc}
 80055de:	bf00      	nop
 80055e0:	20000093 	.word	0x20000093

080055e4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b084      	sub	sp, #16
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	32b0      	adds	r2, #176	@ 0xb0
 80055f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055fa:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	32b0      	adds	r2, #176	@ 0xb0
 8005606:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d101      	bne.n	8005612 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800560e:	2303      	movs	r3, #3
 8005610:	e018      	b.n	8005644 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	7c1b      	ldrb	r3, [r3, #16]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d10a      	bne.n	8005630 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800561a:	4b0c      	ldr	r3, [pc, #48]	@ (800564c <USBD_CDC_ReceivePacket+0x68>)
 800561c:	7819      	ldrb	r1, [r3, #0]
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005624:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005628:	6878      	ldr	r0, [r7, #4]
 800562a:	f004 fabf 	bl	8009bac <USBD_LL_PrepareReceive>
 800562e:	e008      	b.n	8005642 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005630:	4b06      	ldr	r3, [pc, #24]	@ (800564c <USBD_CDC_ReceivePacket+0x68>)
 8005632:	7819      	ldrb	r1, [r3, #0]
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800563a:	2340      	movs	r3, #64	@ 0x40
 800563c:	6878      	ldr	r0, [r7, #4]
 800563e:	f004 fab5 	bl	8009bac <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005642:	2300      	movs	r3, #0
}
 8005644:	4618      	mov	r0, r3
 8005646:	3710      	adds	r7, #16
 8005648:	46bd      	mov	sp, r7
 800564a:	bd80      	pop	{r7, pc}
 800564c:	20000094 	.word	0x20000094

08005650 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b086      	sub	sp, #24
 8005654:	af00      	add	r7, sp, #0
 8005656:	60f8      	str	r0, [r7, #12]
 8005658:	60b9      	str	r1, [r7, #8]
 800565a:	4613      	mov	r3, r2
 800565c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d101      	bne.n	8005668 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005664:	2303      	movs	r3, #3
 8005666:	e01f      	b.n	80056a8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	2200      	movs	r2, #0
 800566c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	2200      	movs	r2, #0
 8005674:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	2200      	movs	r2, #0
 800567c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d003      	beq.n	800568e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	68ba      	ldr	r2, [r7, #8]
 800568a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	2201      	movs	r2, #1
 8005692:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	79fa      	ldrb	r2, [r7, #7]
 800569a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800569c:	68f8      	ldr	r0, [r7, #12]
 800569e:	f004 f92f 	bl	8009900 <USBD_LL_Init>
 80056a2:	4603      	mov	r3, r0
 80056a4:	75fb      	strb	r3, [r7, #23]

  return ret;
 80056a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80056a8:	4618      	mov	r0, r3
 80056aa:	3718      	adds	r7, #24
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bd80      	pop	{r7, pc}

080056b0 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b084      	sub	sp, #16
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
 80056b8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80056ba:	2300      	movs	r3, #0
 80056bc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d101      	bne.n	80056c8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80056c4:	2303      	movs	r3, #3
 80056c6:	e025      	b.n	8005714 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	683a      	ldr	r2, [r7, #0]
 80056cc:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	32ae      	adds	r2, #174	@ 0xae
 80056da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d00f      	beq.n	8005704 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	32ae      	adds	r2, #174	@ 0xae
 80056ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056f4:	f107 020e 	add.w	r2, r7, #14
 80056f8:	4610      	mov	r0, r2
 80056fa:	4798      	blx	r3
 80056fc:	4602      	mov	r2, r0
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800570a:	1c5a      	adds	r2, r3, #1
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8005712:	2300      	movs	r3, #0
}
 8005714:	4618      	mov	r0, r3
 8005716:	3710      	adds	r7, #16
 8005718:	46bd      	mov	sp, r7
 800571a:	bd80      	pop	{r7, pc}

0800571c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b082      	sub	sp, #8
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005724:	6878      	ldr	r0, [r7, #4]
 8005726:	f004 f937 	bl	8009998 <USBD_LL_Start>
 800572a:	4603      	mov	r3, r0
}
 800572c:	4618      	mov	r0, r3
 800572e:	3708      	adds	r7, #8
 8005730:	46bd      	mov	sp, r7
 8005732:	bd80      	pop	{r7, pc}

08005734 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8005734:	b480      	push	{r7}
 8005736:	b083      	sub	sp, #12
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800573c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800573e:	4618      	mov	r0, r3
 8005740:	370c      	adds	r7, #12
 8005742:	46bd      	mov	sp, r7
 8005744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005748:	4770      	bx	lr

0800574a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800574a:	b580      	push	{r7, lr}
 800574c:	b084      	sub	sp, #16
 800574e:	af00      	add	r7, sp, #0
 8005750:	6078      	str	r0, [r7, #4]
 8005752:	460b      	mov	r3, r1
 8005754:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005756:	2300      	movs	r3, #0
 8005758:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005760:	2b00      	cmp	r3, #0
 8005762:	d009      	beq.n	8005778 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	78fa      	ldrb	r2, [r7, #3]
 800576e:	4611      	mov	r1, r2
 8005770:	6878      	ldr	r0, [r7, #4]
 8005772:	4798      	blx	r3
 8005774:	4603      	mov	r3, r0
 8005776:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005778:	7bfb      	ldrb	r3, [r7, #15]
}
 800577a:	4618      	mov	r0, r3
 800577c:	3710      	adds	r7, #16
 800577e:	46bd      	mov	sp, r7
 8005780:	bd80      	pop	{r7, pc}

08005782 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005782:	b580      	push	{r7, lr}
 8005784:	b084      	sub	sp, #16
 8005786:	af00      	add	r7, sp, #0
 8005788:	6078      	str	r0, [r7, #4]
 800578a:	460b      	mov	r3, r1
 800578c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800578e:	2300      	movs	r3, #0
 8005790:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005798:	685b      	ldr	r3, [r3, #4]
 800579a:	78fa      	ldrb	r2, [r7, #3]
 800579c:	4611      	mov	r1, r2
 800579e:	6878      	ldr	r0, [r7, #4]
 80057a0:	4798      	blx	r3
 80057a2:	4603      	mov	r3, r0
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d001      	beq.n	80057ac <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80057a8:	2303      	movs	r3, #3
 80057aa:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80057ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80057ae:	4618      	mov	r0, r3
 80057b0:	3710      	adds	r7, #16
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bd80      	pop	{r7, pc}

080057b6 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80057b6:	b580      	push	{r7, lr}
 80057b8:	b084      	sub	sp, #16
 80057ba:	af00      	add	r7, sp, #0
 80057bc:	6078      	str	r0, [r7, #4]
 80057be:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80057c6:	6839      	ldr	r1, [r7, #0]
 80057c8:	4618      	mov	r0, r3
 80057ca:	f001 f90c 	bl	80069e6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2201      	movs	r2, #1
 80057d2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80057dc:	461a      	mov	r2, r3
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80057ea:	f003 031f 	and.w	r3, r3, #31
 80057ee:	2b02      	cmp	r3, #2
 80057f0:	d01a      	beq.n	8005828 <USBD_LL_SetupStage+0x72>
 80057f2:	2b02      	cmp	r3, #2
 80057f4:	d822      	bhi.n	800583c <USBD_LL_SetupStage+0x86>
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d002      	beq.n	8005800 <USBD_LL_SetupStage+0x4a>
 80057fa:	2b01      	cmp	r3, #1
 80057fc:	d00a      	beq.n	8005814 <USBD_LL_SetupStage+0x5e>
 80057fe:	e01d      	b.n	800583c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005806:	4619      	mov	r1, r3
 8005808:	6878      	ldr	r0, [r7, #4]
 800580a:	f000 fb63 	bl	8005ed4 <USBD_StdDevReq>
 800580e:	4603      	mov	r3, r0
 8005810:	73fb      	strb	r3, [r7, #15]
      break;
 8005812:	e020      	b.n	8005856 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800581a:	4619      	mov	r1, r3
 800581c:	6878      	ldr	r0, [r7, #4]
 800581e:	f000 fbcb 	bl	8005fb8 <USBD_StdItfReq>
 8005822:	4603      	mov	r3, r0
 8005824:	73fb      	strb	r3, [r7, #15]
      break;
 8005826:	e016      	b.n	8005856 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800582e:	4619      	mov	r1, r3
 8005830:	6878      	ldr	r0, [r7, #4]
 8005832:	f000 fc2d 	bl	8006090 <USBD_StdEPReq>
 8005836:	4603      	mov	r3, r0
 8005838:	73fb      	strb	r3, [r7, #15]
      break;
 800583a:	e00c      	b.n	8005856 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8005842:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8005846:	b2db      	uxtb	r3, r3
 8005848:	4619      	mov	r1, r3
 800584a:	6878      	ldr	r0, [r7, #4]
 800584c:	f004 f904 	bl	8009a58 <USBD_LL_StallEP>
 8005850:	4603      	mov	r3, r0
 8005852:	73fb      	strb	r3, [r7, #15]
      break;
 8005854:	bf00      	nop
  }

  return ret;
 8005856:	7bfb      	ldrb	r3, [r7, #15]
}
 8005858:	4618      	mov	r0, r3
 800585a:	3710      	adds	r7, #16
 800585c:	46bd      	mov	sp, r7
 800585e:	bd80      	pop	{r7, pc}

08005860 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b086      	sub	sp, #24
 8005864:	af00      	add	r7, sp, #0
 8005866:	60f8      	str	r0, [r7, #12]
 8005868:	460b      	mov	r3, r1
 800586a:	607a      	str	r2, [r7, #4]
 800586c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800586e:	2300      	movs	r3, #0
 8005870:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8005872:	7afb      	ldrb	r3, [r7, #11]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d16e      	bne.n	8005956 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800587e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8005886:	2b03      	cmp	r3, #3
 8005888:	f040 8098 	bne.w	80059bc <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800588c:	693b      	ldr	r3, [r7, #16]
 800588e:	689a      	ldr	r2, [r3, #8]
 8005890:	693b      	ldr	r3, [r7, #16]
 8005892:	68db      	ldr	r3, [r3, #12]
 8005894:	429a      	cmp	r2, r3
 8005896:	d913      	bls.n	80058c0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8005898:	693b      	ldr	r3, [r7, #16]
 800589a:	689a      	ldr	r2, [r3, #8]
 800589c:	693b      	ldr	r3, [r7, #16]
 800589e:	68db      	ldr	r3, [r3, #12]
 80058a0:	1ad2      	subs	r2, r2, r3
 80058a2:	693b      	ldr	r3, [r7, #16]
 80058a4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80058a6:	693b      	ldr	r3, [r7, #16]
 80058a8:	68da      	ldr	r2, [r3, #12]
 80058aa:	693b      	ldr	r3, [r7, #16]
 80058ac:	689b      	ldr	r3, [r3, #8]
 80058ae:	4293      	cmp	r3, r2
 80058b0:	bf28      	it	cs
 80058b2:	4613      	movcs	r3, r2
 80058b4:	461a      	mov	r2, r3
 80058b6:	6879      	ldr	r1, [r7, #4]
 80058b8:	68f8      	ldr	r0, [r7, #12]
 80058ba:	f001 f994 	bl	8006be6 <USBD_CtlContinueRx>
 80058be:	e07d      	b.n	80059bc <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80058c6:	f003 031f 	and.w	r3, r3, #31
 80058ca:	2b02      	cmp	r3, #2
 80058cc:	d014      	beq.n	80058f8 <USBD_LL_DataOutStage+0x98>
 80058ce:	2b02      	cmp	r3, #2
 80058d0:	d81d      	bhi.n	800590e <USBD_LL_DataOutStage+0xae>
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d002      	beq.n	80058dc <USBD_LL_DataOutStage+0x7c>
 80058d6:	2b01      	cmp	r3, #1
 80058d8:	d003      	beq.n	80058e2 <USBD_LL_DataOutStage+0x82>
 80058da:	e018      	b.n	800590e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80058dc:	2300      	movs	r3, #0
 80058de:	75bb      	strb	r3, [r7, #22]
            break;
 80058e0:	e018      	b.n	8005914 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80058e8:	b2db      	uxtb	r3, r3
 80058ea:	4619      	mov	r1, r3
 80058ec:	68f8      	ldr	r0, [r7, #12]
 80058ee:	f000 fa64 	bl	8005dba <USBD_CoreFindIF>
 80058f2:	4603      	mov	r3, r0
 80058f4:	75bb      	strb	r3, [r7, #22]
            break;
 80058f6:	e00d      	b.n	8005914 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80058fe:	b2db      	uxtb	r3, r3
 8005900:	4619      	mov	r1, r3
 8005902:	68f8      	ldr	r0, [r7, #12]
 8005904:	f000 fa66 	bl	8005dd4 <USBD_CoreFindEP>
 8005908:	4603      	mov	r3, r0
 800590a:	75bb      	strb	r3, [r7, #22]
            break;
 800590c:	e002      	b.n	8005914 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800590e:	2300      	movs	r3, #0
 8005910:	75bb      	strb	r3, [r7, #22]
            break;
 8005912:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8005914:	7dbb      	ldrb	r3, [r7, #22]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d119      	bne.n	800594e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005920:	b2db      	uxtb	r3, r3
 8005922:	2b03      	cmp	r3, #3
 8005924:	d113      	bne.n	800594e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8005926:	7dba      	ldrb	r2, [r7, #22]
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	32ae      	adds	r2, #174	@ 0xae
 800592c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005930:	691b      	ldr	r3, [r3, #16]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d00b      	beq.n	800594e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8005936:	7dba      	ldrb	r2, [r7, #22]
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800593e:	7dba      	ldrb	r2, [r7, #22]
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	32ae      	adds	r2, #174	@ 0xae
 8005944:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005948:	691b      	ldr	r3, [r3, #16]
 800594a:	68f8      	ldr	r0, [r7, #12]
 800594c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800594e:	68f8      	ldr	r0, [r7, #12]
 8005950:	f001 f95a 	bl	8006c08 <USBD_CtlSendStatus>
 8005954:	e032      	b.n	80059bc <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8005956:	7afb      	ldrb	r3, [r7, #11]
 8005958:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800595c:	b2db      	uxtb	r3, r3
 800595e:	4619      	mov	r1, r3
 8005960:	68f8      	ldr	r0, [r7, #12]
 8005962:	f000 fa37 	bl	8005dd4 <USBD_CoreFindEP>
 8005966:	4603      	mov	r3, r0
 8005968:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800596a:	7dbb      	ldrb	r3, [r7, #22]
 800596c:	2bff      	cmp	r3, #255	@ 0xff
 800596e:	d025      	beq.n	80059bc <USBD_LL_DataOutStage+0x15c>
 8005970:	7dbb      	ldrb	r3, [r7, #22]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d122      	bne.n	80059bc <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800597c:	b2db      	uxtb	r3, r3
 800597e:	2b03      	cmp	r3, #3
 8005980:	d117      	bne.n	80059b2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8005982:	7dba      	ldrb	r2, [r7, #22]
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	32ae      	adds	r2, #174	@ 0xae
 8005988:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800598c:	699b      	ldr	r3, [r3, #24]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d00f      	beq.n	80059b2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8005992:	7dba      	ldrb	r2, [r7, #22]
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800599a:	7dba      	ldrb	r2, [r7, #22]
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	32ae      	adds	r2, #174	@ 0xae
 80059a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059a4:	699b      	ldr	r3, [r3, #24]
 80059a6:	7afa      	ldrb	r2, [r7, #11]
 80059a8:	4611      	mov	r1, r2
 80059aa:	68f8      	ldr	r0, [r7, #12]
 80059ac:	4798      	blx	r3
 80059ae:	4603      	mov	r3, r0
 80059b0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80059b2:	7dfb      	ldrb	r3, [r7, #23]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d001      	beq.n	80059bc <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80059b8:	7dfb      	ldrb	r3, [r7, #23]
 80059ba:	e000      	b.n	80059be <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80059bc:	2300      	movs	r3, #0
}
 80059be:	4618      	mov	r0, r3
 80059c0:	3718      	adds	r7, #24
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bd80      	pop	{r7, pc}

080059c6 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80059c6:	b580      	push	{r7, lr}
 80059c8:	b086      	sub	sp, #24
 80059ca:	af00      	add	r7, sp, #0
 80059cc:	60f8      	str	r0, [r7, #12]
 80059ce:	460b      	mov	r3, r1
 80059d0:	607a      	str	r2, [r7, #4]
 80059d2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80059d4:	7afb      	ldrb	r3, [r7, #11]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d16f      	bne.n	8005aba <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	3314      	adds	r3, #20
 80059de:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80059e6:	2b02      	cmp	r3, #2
 80059e8:	d15a      	bne.n	8005aa0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80059ea:	693b      	ldr	r3, [r7, #16]
 80059ec:	689a      	ldr	r2, [r3, #8]
 80059ee:	693b      	ldr	r3, [r7, #16]
 80059f0:	68db      	ldr	r3, [r3, #12]
 80059f2:	429a      	cmp	r2, r3
 80059f4:	d914      	bls.n	8005a20 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	689a      	ldr	r2, [r3, #8]
 80059fa:	693b      	ldr	r3, [r7, #16]
 80059fc:	68db      	ldr	r3, [r3, #12]
 80059fe:	1ad2      	subs	r2, r2, r3
 8005a00:	693b      	ldr	r3, [r7, #16]
 8005a02:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005a04:	693b      	ldr	r3, [r7, #16]
 8005a06:	689b      	ldr	r3, [r3, #8]
 8005a08:	461a      	mov	r2, r3
 8005a0a:	6879      	ldr	r1, [r7, #4]
 8005a0c:	68f8      	ldr	r0, [r7, #12]
 8005a0e:	f001 f8bc 	bl	8006b8a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005a12:	2300      	movs	r3, #0
 8005a14:	2200      	movs	r2, #0
 8005a16:	2100      	movs	r1, #0
 8005a18:	68f8      	ldr	r0, [r7, #12]
 8005a1a:	f004 f8c7 	bl	8009bac <USBD_LL_PrepareReceive>
 8005a1e:	e03f      	b.n	8005aa0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005a20:	693b      	ldr	r3, [r7, #16]
 8005a22:	68da      	ldr	r2, [r3, #12]
 8005a24:	693b      	ldr	r3, [r7, #16]
 8005a26:	689b      	ldr	r3, [r3, #8]
 8005a28:	429a      	cmp	r2, r3
 8005a2a:	d11c      	bne.n	8005a66 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005a2c:	693b      	ldr	r3, [r7, #16]
 8005a2e:	685a      	ldr	r2, [r3, #4]
 8005a30:	693b      	ldr	r3, [r7, #16]
 8005a32:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005a34:	429a      	cmp	r2, r3
 8005a36:	d316      	bcc.n	8005a66 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005a38:	693b      	ldr	r3, [r7, #16]
 8005a3a:	685a      	ldr	r2, [r3, #4]
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005a42:	429a      	cmp	r2, r3
 8005a44:	d20f      	bcs.n	8005a66 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005a46:	2200      	movs	r2, #0
 8005a48:	2100      	movs	r1, #0
 8005a4a:	68f8      	ldr	r0, [r7, #12]
 8005a4c:	f001 f89d 	bl	8006b8a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	2200      	movs	r2, #0
 8005a54:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005a58:	2300      	movs	r3, #0
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	2100      	movs	r1, #0
 8005a5e:	68f8      	ldr	r0, [r7, #12]
 8005a60:	f004 f8a4 	bl	8009bac <USBD_LL_PrepareReceive>
 8005a64:	e01c      	b.n	8005aa0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005a6c:	b2db      	uxtb	r3, r3
 8005a6e:	2b03      	cmp	r3, #3
 8005a70:	d10f      	bne.n	8005a92 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005a78:	68db      	ldr	r3, [r3, #12]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d009      	beq.n	8005a92 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	2200      	movs	r2, #0
 8005a82:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005a8c:	68db      	ldr	r3, [r3, #12]
 8005a8e:	68f8      	ldr	r0, [r7, #12]
 8005a90:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005a92:	2180      	movs	r1, #128	@ 0x80
 8005a94:	68f8      	ldr	r0, [r7, #12]
 8005a96:	f003 ffdf 	bl	8009a58 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005a9a:	68f8      	ldr	r0, [r7, #12]
 8005a9c:	f001 f8c7 	bl	8006c2e <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d03a      	beq.n	8005b20 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8005aaa:	68f8      	ldr	r0, [r7, #12]
 8005aac:	f7ff fe42 	bl	8005734 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8005ab8:	e032      	b.n	8005b20 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8005aba:	7afb      	ldrb	r3, [r7, #11]
 8005abc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005ac0:	b2db      	uxtb	r3, r3
 8005ac2:	4619      	mov	r1, r3
 8005ac4:	68f8      	ldr	r0, [r7, #12]
 8005ac6:	f000 f985 	bl	8005dd4 <USBD_CoreFindEP>
 8005aca:	4603      	mov	r3, r0
 8005acc:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005ace:	7dfb      	ldrb	r3, [r7, #23]
 8005ad0:	2bff      	cmp	r3, #255	@ 0xff
 8005ad2:	d025      	beq.n	8005b20 <USBD_LL_DataInStage+0x15a>
 8005ad4:	7dfb      	ldrb	r3, [r7, #23]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d122      	bne.n	8005b20 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005ae0:	b2db      	uxtb	r3, r3
 8005ae2:	2b03      	cmp	r3, #3
 8005ae4:	d11c      	bne.n	8005b20 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8005ae6:	7dfa      	ldrb	r2, [r7, #23]
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	32ae      	adds	r2, #174	@ 0xae
 8005aec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005af0:	695b      	ldr	r3, [r3, #20]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d014      	beq.n	8005b20 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8005af6:	7dfa      	ldrb	r2, [r7, #23]
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8005afe:	7dfa      	ldrb	r2, [r7, #23]
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	32ae      	adds	r2, #174	@ 0xae
 8005b04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b08:	695b      	ldr	r3, [r3, #20]
 8005b0a:	7afa      	ldrb	r2, [r7, #11]
 8005b0c:	4611      	mov	r1, r2
 8005b0e:	68f8      	ldr	r0, [r7, #12]
 8005b10:	4798      	blx	r3
 8005b12:	4603      	mov	r3, r0
 8005b14:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8005b16:	7dbb      	ldrb	r3, [r7, #22]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d001      	beq.n	8005b20 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8005b1c:	7dbb      	ldrb	r3, [r7, #22]
 8005b1e:	e000      	b.n	8005b22 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8005b20:	2300      	movs	r3, #0
}
 8005b22:	4618      	mov	r0, r3
 8005b24:	3718      	adds	r7, #24
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bd80      	pop	{r7, pc}

08005b2a <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005b2a:	b580      	push	{r7, lr}
 8005b2c:	b084      	sub	sp, #16
 8005b2e:	af00      	add	r7, sp, #0
 8005b30:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8005b32:	2300      	movs	r3, #0
 8005b34:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2201      	movs	r2, #1
 8005b3a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2200      	movs	r2, #0
 8005b42:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2200      	movs	r2, #0
 8005b4a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2200      	movs	r2, #0
 8005b58:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d014      	beq.n	8005b90 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005b6c:	685b      	ldr	r3, [r3, #4]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d00e      	beq.n	8005b90 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005b78:	685b      	ldr	r3, [r3, #4]
 8005b7a:	687a      	ldr	r2, [r7, #4]
 8005b7c:	6852      	ldr	r2, [r2, #4]
 8005b7e:	b2d2      	uxtb	r2, r2
 8005b80:	4611      	mov	r1, r2
 8005b82:	6878      	ldr	r0, [r7, #4]
 8005b84:	4798      	blx	r3
 8005b86:	4603      	mov	r3, r0
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d001      	beq.n	8005b90 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8005b8c:	2303      	movs	r3, #3
 8005b8e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005b90:	2340      	movs	r3, #64	@ 0x40
 8005b92:	2200      	movs	r2, #0
 8005b94:	2100      	movs	r1, #0
 8005b96:	6878      	ldr	r0, [r7, #4]
 8005b98:	f003 ff19 	bl	80099ce <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2201      	movs	r2, #1
 8005ba0:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2240      	movs	r2, #64	@ 0x40
 8005ba8:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005bac:	2340      	movs	r3, #64	@ 0x40
 8005bae:	2200      	movs	r2, #0
 8005bb0:	2180      	movs	r1, #128	@ 0x80
 8005bb2:	6878      	ldr	r0, [r7, #4]
 8005bb4:	f003 ff0b 	bl	80099ce <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2201      	movs	r2, #1
 8005bbc:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2240      	movs	r2, #64	@ 0x40
 8005bc2:	621a      	str	r2, [r3, #32]

  return ret;
 8005bc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	3710      	adds	r7, #16
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	bd80      	pop	{r7, pc}

08005bce <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005bce:	b480      	push	{r7}
 8005bd0:	b083      	sub	sp, #12
 8005bd2:	af00      	add	r7, sp, #0
 8005bd4:	6078      	str	r0, [r7, #4]
 8005bd6:	460b      	mov	r3, r1
 8005bd8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	78fa      	ldrb	r2, [r7, #3]
 8005bde:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005be0:	2300      	movs	r3, #0
}
 8005be2:	4618      	mov	r0, r3
 8005be4:	370c      	adds	r7, #12
 8005be6:	46bd      	mov	sp, r7
 8005be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bec:	4770      	bx	lr

08005bee <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005bee:	b480      	push	{r7}
 8005bf0:	b083      	sub	sp, #12
 8005bf2:	af00      	add	r7, sp, #0
 8005bf4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005bfc:	b2db      	uxtb	r3, r3
 8005bfe:	2b04      	cmp	r3, #4
 8005c00:	d006      	beq.n	8005c10 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005c08:	b2da      	uxtb	r2, r3
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2204      	movs	r2, #4
 8005c14:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8005c18:	2300      	movs	r3, #0
}
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	370c      	adds	r7, #12
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c24:	4770      	bx	lr

08005c26 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005c26:	b480      	push	{r7}
 8005c28:	b083      	sub	sp, #12
 8005c2a:	af00      	add	r7, sp, #0
 8005c2c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005c34:	b2db      	uxtb	r3, r3
 8005c36:	2b04      	cmp	r3, #4
 8005c38:	d106      	bne.n	8005c48 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8005c40:	b2da      	uxtb	r2, r3
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8005c48:	2300      	movs	r3, #0
}
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	370c      	adds	r7, #12
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c54:	4770      	bx	lr

08005c56 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005c56:	b580      	push	{r7, lr}
 8005c58:	b082      	sub	sp, #8
 8005c5a:	af00      	add	r7, sp, #0
 8005c5c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005c64:	b2db      	uxtb	r3, r3
 8005c66:	2b03      	cmp	r3, #3
 8005c68:	d110      	bne.n	8005c8c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d00b      	beq.n	8005c8c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005c7a:	69db      	ldr	r3, [r3, #28]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d005      	beq.n	8005c8c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005c86:	69db      	ldr	r3, [r3, #28]
 8005c88:	6878      	ldr	r0, [r7, #4]
 8005c8a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8005c8c:	2300      	movs	r3, #0
}
 8005c8e:	4618      	mov	r0, r3
 8005c90:	3708      	adds	r7, #8
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bd80      	pop	{r7, pc}

08005c96 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005c96:	b580      	push	{r7, lr}
 8005c98:	b082      	sub	sp, #8
 8005c9a:	af00      	add	r7, sp, #0
 8005c9c:	6078      	str	r0, [r7, #4]
 8005c9e:	460b      	mov	r3, r1
 8005ca0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	32ae      	adds	r2, #174	@ 0xae
 8005cac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d101      	bne.n	8005cb8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8005cb4:	2303      	movs	r3, #3
 8005cb6:	e01c      	b.n	8005cf2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005cbe:	b2db      	uxtb	r3, r3
 8005cc0:	2b03      	cmp	r3, #3
 8005cc2:	d115      	bne.n	8005cf0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	32ae      	adds	r2, #174	@ 0xae
 8005cce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cd2:	6a1b      	ldr	r3, [r3, #32]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d00b      	beq.n	8005cf0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	32ae      	adds	r2, #174	@ 0xae
 8005ce2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ce6:	6a1b      	ldr	r3, [r3, #32]
 8005ce8:	78fa      	ldrb	r2, [r7, #3]
 8005cea:	4611      	mov	r1, r2
 8005cec:	6878      	ldr	r0, [r7, #4]
 8005cee:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005cf0:	2300      	movs	r3, #0
}
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	3708      	adds	r7, #8
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	bd80      	pop	{r7, pc}

08005cfa <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005cfa:	b580      	push	{r7, lr}
 8005cfc:	b082      	sub	sp, #8
 8005cfe:	af00      	add	r7, sp, #0
 8005d00:	6078      	str	r0, [r7, #4]
 8005d02:	460b      	mov	r3, r1
 8005d04:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	32ae      	adds	r2, #174	@ 0xae
 8005d10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d101      	bne.n	8005d1c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8005d18:	2303      	movs	r3, #3
 8005d1a:	e01c      	b.n	8005d56 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005d22:	b2db      	uxtb	r3, r3
 8005d24:	2b03      	cmp	r3, #3
 8005d26:	d115      	bne.n	8005d54 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	32ae      	adds	r2, #174	@ 0xae
 8005d32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d00b      	beq.n	8005d54 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	32ae      	adds	r2, #174	@ 0xae
 8005d46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d4c:	78fa      	ldrb	r2, [r7, #3]
 8005d4e:	4611      	mov	r1, r2
 8005d50:	6878      	ldr	r0, [r7, #4]
 8005d52:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005d54:	2300      	movs	r3, #0
}
 8005d56:	4618      	mov	r0, r3
 8005d58:	3708      	adds	r7, #8
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	bd80      	pop	{r7, pc}

08005d5e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005d5e:	b480      	push	{r7}
 8005d60:	b083      	sub	sp, #12
 8005d62:	af00      	add	r7, sp, #0
 8005d64:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005d66:	2300      	movs	r3, #0
}
 8005d68:	4618      	mov	r0, r3
 8005d6a:	370c      	adds	r7, #12
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d72:	4770      	bx	lr

08005d74 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b084      	sub	sp, #16
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2201      	movs	r2, #1
 8005d84:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d00e      	beq.n	8005db0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005d98:	685b      	ldr	r3, [r3, #4]
 8005d9a:	687a      	ldr	r2, [r7, #4]
 8005d9c:	6852      	ldr	r2, [r2, #4]
 8005d9e:	b2d2      	uxtb	r2, r2
 8005da0:	4611      	mov	r1, r2
 8005da2:	6878      	ldr	r0, [r7, #4]
 8005da4:	4798      	blx	r3
 8005da6:	4603      	mov	r3, r0
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d001      	beq.n	8005db0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8005dac:	2303      	movs	r3, #3
 8005dae:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005db0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005db2:	4618      	mov	r0, r3
 8005db4:	3710      	adds	r7, #16
 8005db6:	46bd      	mov	sp, r7
 8005db8:	bd80      	pop	{r7, pc}

08005dba <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005dba:	b480      	push	{r7}
 8005dbc:	b083      	sub	sp, #12
 8005dbe:	af00      	add	r7, sp, #0
 8005dc0:	6078      	str	r0, [r7, #4]
 8005dc2:	460b      	mov	r3, r1
 8005dc4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005dc6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005dc8:	4618      	mov	r0, r3
 8005dca:	370c      	adds	r7, #12
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd2:	4770      	bx	lr

08005dd4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	b083      	sub	sp, #12
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
 8005ddc:	460b      	mov	r3, r1
 8005dde:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005de0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005de2:	4618      	mov	r0, r3
 8005de4:	370c      	adds	r7, #12
 8005de6:	46bd      	mov	sp, r7
 8005de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dec:	4770      	bx	lr

08005dee <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8005dee:	b580      	push	{r7, lr}
 8005df0:	b086      	sub	sp, #24
 8005df2:	af00      	add	r7, sp, #0
 8005df4:	6078      	str	r0, [r7, #4]
 8005df6:	460b      	mov	r3, r1
 8005df8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8005e02:	2300      	movs	r3, #0
 8005e04:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	885b      	ldrh	r3, [r3, #2]
 8005e0a:	b29b      	uxth	r3, r3
 8005e0c:	68fa      	ldr	r2, [r7, #12]
 8005e0e:	7812      	ldrb	r2, [r2, #0]
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d91f      	bls.n	8005e54 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	781b      	ldrb	r3, [r3, #0]
 8005e18:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8005e1a:	e013      	b.n	8005e44 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8005e1c:	f107 030a 	add.w	r3, r7, #10
 8005e20:	4619      	mov	r1, r3
 8005e22:	6978      	ldr	r0, [r7, #20]
 8005e24:	f000 f81b 	bl	8005e5e <USBD_GetNextDesc>
 8005e28:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8005e2a:	697b      	ldr	r3, [r7, #20]
 8005e2c:	785b      	ldrb	r3, [r3, #1]
 8005e2e:	2b05      	cmp	r3, #5
 8005e30:	d108      	bne.n	8005e44 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8005e32:	697b      	ldr	r3, [r7, #20]
 8005e34:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8005e36:	693b      	ldr	r3, [r7, #16]
 8005e38:	789b      	ldrb	r3, [r3, #2]
 8005e3a:	78fa      	ldrb	r2, [r7, #3]
 8005e3c:	429a      	cmp	r2, r3
 8005e3e:	d008      	beq.n	8005e52 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8005e40:	2300      	movs	r3, #0
 8005e42:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	885b      	ldrh	r3, [r3, #2]
 8005e48:	b29a      	uxth	r2, r3
 8005e4a:	897b      	ldrh	r3, [r7, #10]
 8005e4c:	429a      	cmp	r2, r3
 8005e4e:	d8e5      	bhi.n	8005e1c <USBD_GetEpDesc+0x2e>
 8005e50:	e000      	b.n	8005e54 <USBD_GetEpDesc+0x66>
          break;
 8005e52:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8005e54:	693b      	ldr	r3, [r7, #16]
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	3718      	adds	r7, #24
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd80      	pop	{r7, pc}

08005e5e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8005e5e:	b480      	push	{r7}
 8005e60:	b085      	sub	sp, #20
 8005e62:	af00      	add	r7, sp, #0
 8005e64:	6078      	str	r0, [r7, #4]
 8005e66:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	881b      	ldrh	r3, [r3, #0]
 8005e70:	68fa      	ldr	r2, [r7, #12]
 8005e72:	7812      	ldrb	r2, [r2, #0]
 8005e74:	4413      	add	r3, r2
 8005e76:	b29a      	uxth	r2, r3
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	781b      	ldrb	r3, [r3, #0]
 8005e80:	461a      	mov	r2, r3
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	4413      	add	r3, r2
 8005e86:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8005e88:	68fb      	ldr	r3, [r7, #12]
}
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	3714      	adds	r7, #20
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e94:	4770      	bx	lr

08005e96 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005e96:	b480      	push	{r7}
 8005e98:	b087      	sub	sp, #28
 8005e9a:	af00      	add	r7, sp, #0
 8005e9c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005ea2:	697b      	ldr	r3, [r7, #20]
 8005ea4:	781b      	ldrb	r3, [r3, #0]
 8005ea6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005ea8:	697b      	ldr	r3, [r7, #20]
 8005eaa:	3301      	adds	r3, #1
 8005eac:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005eae:	697b      	ldr	r3, [r7, #20]
 8005eb0:	781b      	ldrb	r3, [r3, #0]
 8005eb2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005eb4:	8a3b      	ldrh	r3, [r7, #16]
 8005eb6:	021b      	lsls	r3, r3, #8
 8005eb8:	b21a      	sxth	r2, r3
 8005eba:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005ebe:	4313      	orrs	r3, r2
 8005ec0:	b21b      	sxth	r3, r3
 8005ec2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005ec4:	89fb      	ldrh	r3, [r7, #14]
}
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	371c      	adds	r7, #28
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed0:	4770      	bx	lr
	...

08005ed4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b084      	sub	sp, #16
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
 8005edc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005ede:	2300      	movs	r3, #0
 8005ee0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	781b      	ldrb	r3, [r3, #0]
 8005ee6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005eea:	2b40      	cmp	r3, #64	@ 0x40
 8005eec:	d005      	beq.n	8005efa <USBD_StdDevReq+0x26>
 8005eee:	2b40      	cmp	r3, #64	@ 0x40
 8005ef0:	d857      	bhi.n	8005fa2 <USBD_StdDevReq+0xce>
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d00f      	beq.n	8005f16 <USBD_StdDevReq+0x42>
 8005ef6:	2b20      	cmp	r3, #32
 8005ef8:	d153      	bne.n	8005fa2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	32ae      	adds	r2, #174	@ 0xae
 8005f04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f08:	689b      	ldr	r3, [r3, #8]
 8005f0a:	6839      	ldr	r1, [r7, #0]
 8005f0c:	6878      	ldr	r0, [r7, #4]
 8005f0e:	4798      	blx	r3
 8005f10:	4603      	mov	r3, r0
 8005f12:	73fb      	strb	r3, [r7, #15]
      break;
 8005f14:	e04a      	b.n	8005fac <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	785b      	ldrb	r3, [r3, #1]
 8005f1a:	2b09      	cmp	r3, #9
 8005f1c:	d83b      	bhi.n	8005f96 <USBD_StdDevReq+0xc2>
 8005f1e:	a201      	add	r2, pc, #4	@ (adr r2, 8005f24 <USBD_StdDevReq+0x50>)
 8005f20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f24:	08005f79 	.word	0x08005f79
 8005f28:	08005f8d 	.word	0x08005f8d
 8005f2c:	08005f97 	.word	0x08005f97
 8005f30:	08005f83 	.word	0x08005f83
 8005f34:	08005f97 	.word	0x08005f97
 8005f38:	08005f57 	.word	0x08005f57
 8005f3c:	08005f4d 	.word	0x08005f4d
 8005f40:	08005f97 	.word	0x08005f97
 8005f44:	08005f6f 	.word	0x08005f6f
 8005f48:	08005f61 	.word	0x08005f61
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005f4c:	6839      	ldr	r1, [r7, #0]
 8005f4e:	6878      	ldr	r0, [r7, #4]
 8005f50:	f000 fa3c 	bl	80063cc <USBD_GetDescriptor>
          break;
 8005f54:	e024      	b.n	8005fa0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005f56:	6839      	ldr	r1, [r7, #0]
 8005f58:	6878      	ldr	r0, [r7, #4]
 8005f5a:	f000 fba1 	bl	80066a0 <USBD_SetAddress>
          break;
 8005f5e:	e01f      	b.n	8005fa0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8005f60:	6839      	ldr	r1, [r7, #0]
 8005f62:	6878      	ldr	r0, [r7, #4]
 8005f64:	f000 fbe0 	bl	8006728 <USBD_SetConfig>
 8005f68:	4603      	mov	r3, r0
 8005f6a:	73fb      	strb	r3, [r7, #15]
          break;
 8005f6c:	e018      	b.n	8005fa0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005f6e:	6839      	ldr	r1, [r7, #0]
 8005f70:	6878      	ldr	r0, [r7, #4]
 8005f72:	f000 fc83 	bl	800687c <USBD_GetConfig>
          break;
 8005f76:	e013      	b.n	8005fa0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005f78:	6839      	ldr	r1, [r7, #0]
 8005f7a:	6878      	ldr	r0, [r7, #4]
 8005f7c:	f000 fcb4 	bl	80068e8 <USBD_GetStatus>
          break;
 8005f80:	e00e      	b.n	8005fa0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005f82:	6839      	ldr	r1, [r7, #0]
 8005f84:	6878      	ldr	r0, [r7, #4]
 8005f86:	f000 fce3 	bl	8006950 <USBD_SetFeature>
          break;
 8005f8a:	e009      	b.n	8005fa0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005f8c:	6839      	ldr	r1, [r7, #0]
 8005f8e:	6878      	ldr	r0, [r7, #4]
 8005f90:	f000 fd07 	bl	80069a2 <USBD_ClrFeature>
          break;
 8005f94:	e004      	b.n	8005fa0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8005f96:	6839      	ldr	r1, [r7, #0]
 8005f98:	6878      	ldr	r0, [r7, #4]
 8005f9a:	f000 fd5e 	bl	8006a5a <USBD_CtlError>
          break;
 8005f9e:	bf00      	nop
      }
      break;
 8005fa0:	e004      	b.n	8005fac <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8005fa2:	6839      	ldr	r1, [r7, #0]
 8005fa4:	6878      	ldr	r0, [r7, #4]
 8005fa6:	f000 fd58 	bl	8006a5a <USBD_CtlError>
      break;
 8005faa:	bf00      	nop
  }

  return ret;
 8005fac:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fae:	4618      	mov	r0, r3
 8005fb0:	3710      	adds	r7, #16
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	bd80      	pop	{r7, pc}
 8005fb6:	bf00      	nop

08005fb8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b084      	sub	sp, #16
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
 8005fc0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	781b      	ldrb	r3, [r3, #0]
 8005fca:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005fce:	2b40      	cmp	r3, #64	@ 0x40
 8005fd0:	d005      	beq.n	8005fde <USBD_StdItfReq+0x26>
 8005fd2:	2b40      	cmp	r3, #64	@ 0x40
 8005fd4:	d852      	bhi.n	800607c <USBD_StdItfReq+0xc4>
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d001      	beq.n	8005fde <USBD_StdItfReq+0x26>
 8005fda:	2b20      	cmp	r3, #32
 8005fdc:	d14e      	bne.n	800607c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005fe4:	b2db      	uxtb	r3, r3
 8005fe6:	3b01      	subs	r3, #1
 8005fe8:	2b02      	cmp	r3, #2
 8005fea:	d840      	bhi.n	800606e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	889b      	ldrh	r3, [r3, #4]
 8005ff0:	b2db      	uxtb	r3, r3
 8005ff2:	2b01      	cmp	r3, #1
 8005ff4:	d836      	bhi.n	8006064 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	889b      	ldrh	r3, [r3, #4]
 8005ffa:	b2db      	uxtb	r3, r3
 8005ffc:	4619      	mov	r1, r3
 8005ffe:	6878      	ldr	r0, [r7, #4]
 8006000:	f7ff fedb 	bl	8005dba <USBD_CoreFindIF>
 8006004:	4603      	mov	r3, r0
 8006006:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006008:	7bbb      	ldrb	r3, [r7, #14]
 800600a:	2bff      	cmp	r3, #255	@ 0xff
 800600c:	d01d      	beq.n	800604a <USBD_StdItfReq+0x92>
 800600e:	7bbb      	ldrb	r3, [r7, #14]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d11a      	bne.n	800604a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006014:	7bba      	ldrb	r2, [r7, #14]
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	32ae      	adds	r2, #174	@ 0xae
 800601a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800601e:	689b      	ldr	r3, [r3, #8]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d00f      	beq.n	8006044 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006024:	7bba      	ldrb	r2, [r7, #14]
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800602c:	7bba      	ldrb	r2, [r7, #14]
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	32ae      	adds	r2, #174	@ 0xae
 8006032:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006036:	689b      	ldr	r3, [r3, #8]
 8006038:	6839      	ldr	r1, [r7, #0]
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	4798      	blx	r3
 800603e:	4603      	mov	r3, r0
 8006040:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006042:	e004      	b.n	800604e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006044:	2303      	movs	r3, #3
 8006046:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006048:	e001      	b.n	800604e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800604a:	2303      	movs	r3, #3
 800604c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	88db      	ldrh	r3, [r3, #6]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d110      	bne.n	8006078 <USBD_StdItfReq+0xc0>
 8006056:	7bfb      	ldrb	r3, [r7, #15]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d10d      	bne.n	8006078 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800605c:	6878      	ldr	r0, [r7, #4]
 800605e:	f000 fdd3 	bl	8006c08 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006062:	e009      	b.n	8006078 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006064:	6839      	ldr	r1, [r7, #0]
 8006066:	6878      	ldr	r0, [r7, #4]
 8006068:	f000 fcf7 	bl	8006a5a <USBD_CtlError>
          break;
 800606c:	e004      	b.n	8006078 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800606e:	6839      	ldr	r1, [r7, #0]
 8006070:	6878      	ldr	r0, [r7, #4]
 8006072:	f000 fcf2 	bl	8006a5a <USBD_CtlError>
          break;
 8006076:	e000      	b.n	800607a <USBD_StdItfReq+0xc2>
          break;
 8006078:	bf00      	nop
      }
      break;
 800607a:	e004      	b.n	8006086 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800607c:	6839      	ldr	r1, [r7, #0]
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f000 fceb 	bl	8006a5a <USBD_CtlError>
      break;
 8006084:	bf00      	nop
  }

  return ret;
 8006086:	7bfb      	ldrb	r3, [r7, #15]
}
 8006088:	4618      	mov	r0, r3
 800608a:	3710      	adds	r7, #16
 800608c:	46bd      	mov	sp, r7
 800608e:	bd80      	pop	{r7, pc}

08006090 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b084      	sub	sp, #16
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
 8006098:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800609a:	2300      	movs	r3, #0
 800609c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	889b      	ldrh	r3, [r3, #4]
 80060a2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	781b      	ldrb	r3, [r3, #0]
 80060a8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80060ac:	2b40      	cmp	r3, #64	@ 0x40
 80060ae:	d007      	beq.n	80060c0 <USBD_StdEPReq+0x30>
 80060b0:	2b40      	cmp	r3, #64	@ 0x40
 80060b2:	f200 817f 	bhi.w	80063b4 <USBD_StdEPReq+0x324>
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d02a      	beq.n	8006110 <USBD_StdEPReq+0x80>
 80060ba:	2b20      	cmp	r3, #32
 80060bc:	f040 817a 	bne.w	80063b4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80060c0:	7bbb      	ldrb	r3, [r7, #14]
 80060c2:	4619      	mov	r1, r3
 80060c4:	6878      	ldr	r0, [r7, #4]
 80060c6:	f7ff fe85 	bl	8005dd4 <USBD_CoreFindEP>
 80060ca:	4603      	mov	r3, r0
 80060cc:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80060ce:	7b7b      	ldrb	r3, [r7, #13]
 80060d0:	2bff      	cmp	r3, #255	@ 0xff
 80060d2:	f000 8174 	beq.w	80063be <USBD_StdEPReq+0x32e>
 80060d6:	7b7b      	ldrb	r3, [r7, #13]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	f040 8170 	bne.w	80063be <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80060de:	7b7a      	ldrb	r2, [r7, #13]
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80060e6:	7b7a      	ldrb	r2, [r7, #13]
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	32ae      	adds	r2, #174	@ 0xae
 80060ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060f0:	689b      	ldr	r3, [r3, #8]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	f000 8163 	beq.w	80063be <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80060f8:	7b7a      	ldrb	r2, [r7, #13]
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	32ae      	adds	r2, #174	@ 0xae
 80060fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006102:	689b      	ldr	r3, [r3, #8]
 8006104:	6839      	ldr	r1, [r7, #0]
 8006106:	6878      	ldr	r0, [r7, #4]
 8006108:	4798      	blx	r3
 800610a:	4603      	mov	r3, r0
 800610c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800610e:	e156      	b.n	80063be <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	785b      	ldrb	r3, [r3, #1]
 8006114:	2b03      	cmp	r3, #3
 8006116:	d008      	beq.n	800612a <USBD_StdEPReq+0x9a>
 8006118:	2b03      	cmp	r3, #3
 800611a:	f300 8145 	bgt.w	80063a8 <USBD_StdEPReq+0x318>
 800611e:	2b00      	cmp	r3, #0
 8006120:	f000 809b 	beq.w	800625a <USBD_StdEPReq+0x1ca>
 8006124:	2b01      	cmp	r3, #1
 8006126:	d03c      	beq.n	80061a2 <USBD_StdEPReq+0x112>
 8006128:	e13e      	b.n	80063a8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006130:	b2db      	uxtb	r3, r3
 8006132:	2b02      	cmp	r3, #2
 8006134:	d002      	beq.n	800613c <USBD_StdEPReq+0xac>
 8006136:	2b03      	cmp	r3, #3
 8006138:	d016      	beq.n	8006168 <USBD_StdEPReq+0xd8>
 800613a:	e02c      	b.n	8006196 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800613c:	7bbb      	ldrb	r3, [r7, #14]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d00d      	beq.n	800615e <USBD_StdEPReq+0xce>
 8006142:	7bbb      	ldrb	r3, [r7, #14]
 8006144:	2b80      	cmp	r3, #128	@ 0x80
 8006146:	d00a      	beq.n	800615e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006148:	7bbb      	ldrb	r3, [r7, #14]
 800614a:	4619      	mov	r1, r3
 800614c:	6878      	ldr	r0, [r7, #4]
 800614e:	f003 fc83 	bl	8009a58 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006152:	2180      	movs	r1, #128	@ 0x80
 8006154:	6878      	ldr	r0, [r7, #4]
 8006156:	f003 fc7f 	bl	8009a58 <USBD_LL_StallEP>
 800615a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800615c:	e020      	b.n	80061a0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800615e:	6839      	ldr	r1, [r7, #0]
 8006160:	6878      	ldr	r0, [r7, #4]
 8006162:	f000 fc7a 	bl	8006a5a <USBD_CtlError>
              break;
 8006166:	e01b      	b.n	80061a0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	885b      	ldrh	r3, [r3, #2]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d10e      	bne.n	800618e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006170:	7bbb      	ldrb	r3, [r7, #14]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d00b      	beq.n	800618e <USBD_StdEPReq+0xfe>
 8006176:	7bbb      	ldrb	r3, [r7, #14]
 8006178:	2b80      	cmp	r3, #128	@ 0x80
 800617a:	d008      	beq.n	800618e <USBD_StdEPReq+0xfe>
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	88db      	ldrh	r3, [r3, #6]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d104      	bne.n	800618e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006184:	7bbb      	ldrb	r3, [r7, #14]
 8006186:	4619      	mov	r1, r3
 8006188:	6878      	ldr	r0, [r7, #4]
 800618a:	f003 fc65 	bl	8009a58 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800618e:	6878      	ldr	r0, [r7, #4]
 8006190:	f000 fd3a 	bl	8006c08 <USBD_CtlSendStatus>

              break;
 8006194:	e004      	b.n	80061a0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8006196:	6839      	ldr	r1, [r7, #0]
 8006198:	6878      	ldr	r0, [r7, #4]
 800619a:	f000 fc5e 	bl	8006a5a <USBD_CtlError>
              break;
 800619e:	bf00      	nop
          }
          break;
 80061a0:	e107      	b.n	80063b2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80061a8:	b2db      	uxtb	r3, r3
 80061aa:	2b02      	cmp	r3, #2
 80061ac:	d002      	beq.n	80061b4 <USBD_StdEPReq+0x124>
 80061ae:	2b03      	cmp	r3, #3
 80061b0:	d016      	beq.n	80061e0 <USBD_StdEPReq+0x150>
 80061b2:	e04b      	b.n	800624c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80061b4:	7bbb      	ldrb	r3, [r7, #14]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d00d      	beq.n	80061d6 <USBD_StdEPReq+0x146>
 80061ba:	7bbb      	ldrb	r3, [r7, #14]
 80061bc:	2b80      	cmp	r3, #128	@ 0x80
 80061be:	d00a      	beq.n	80061d6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80061c0:	7bbb      	ldrb	r3, [r7, #14]
 80061c2:	4619      	mov	r1, r3
 80061c4:	6878      	ldr	r0, [r7, #4]
 80061c6:	f003 fc47 	bl	8009a58 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80061ca:	2180      	movs	r1, #128	@ 0x80
 80061cc:	6878      	ldr	r0, [r7, #4]
 80061ce:	f003 fc43 	bl	8009a58 <USBD_LL_StallEP>
 80061d2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80061d4:	e040      	b.n	8006258 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80061d6:	6839      	ldr	r1, [r7, #0]
 80061d8:	6878      	ldr	r0, [r7, #4]
 80061da:	f000 fc3e 	bl	8006a5a <USBD_CtlError>
              break;
 80061de:	e03b      	b.n	8006258 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	885b      	ldrh	r3, [r3, #2]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d136      	bne.n	8006256 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80061e8:	7bbb      	ldrb	r3, [r7, #14]
 80061ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d004      	beq.n	80061fc <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80061f2:	7bbb      	ldrb	r3, [r7, #14]
 80061f4:	4619      	mov	r1, r3
 80061f6:	6878      	ldr	r0, [r7, #4]
 80061f8:	f003 fc4d 	bl	8009a96 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80061fc:	6878      	ldr	r0, [r7, #4]
 80061fe:	f000 fd03 	bl	8006c08 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8006202:	7bbb      	ldrb	r3, [r7, #14]
 8006204:	4619      	mov	r1, r3
 8006206:	6878      	ldr	r0, [r7, #4]
 8006208:	f7ff fde4 	bl	8005dd4 <USBD_CoreFindEP>
 800620c:	4603      	mov	r3, r0
 800620e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006210:	7b7b      	ldrb	r3, [r7, #13]
 8006212:	2bff      	cmp	r3, #255	@ 0xff
 8006214:	d01f      	beq.n	8006256 <USBD_StdEPReq+0x1c6>
 8006216:	7b7b      	ldrb	r3, [r7, #13]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d11c      	bne.n	8006256 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800621c:	7b7a      	ldrb	r2, [r7, #13]
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006224:	7b7a      	ldrb	r2, [r7, #13]
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	32ae      	adds	r2, #174	@ 0xae
 800622a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800622e:	689b      	ldr	r3, [r3, #8]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d010      	beq.n	8006256 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006234:	7b7a      	ldrb	r2, [r7, #13]
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	32ae      	adds	r2, #174	@ 0xae
 800623a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800623e:	689b      	ldr	r3, [r3, #8]
 8006240:	6839      	ldr	r1, [r7, #0]
 8006242:	6878      	ldr	r0, [r7, #4]
 8006244:	4798      	blx	r3
 8006246:	4603      	mov	r3, r0
 8006248:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800624a:	e004      	b.n	8006256 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800624c:	6839      	ldr	r1, [r7, #0]
 800624e:	6878      	ldr	r0, [r7, #4]
 8006250:	f000 fc03 	bl	8006a5a <USBD_CtlError>
              break;
 8006254:	e000      	b.n	8006258 <USBD_StdEPReq+0x1c8>
              break;
 8006256:	bf00      	nop
          }
          break;
 8006258:	e0ab      	b.n	80063b2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006260:	b2db      	uxtb	r3, r3
 8006262:	2b02      	cmp	r3, #2
 8006264:	d002      	beq.n	800626c <USBD_StdEPReq+0x1dc>
 8006266:	2b03      	cmp	r3, #3
 8006268:	d032      	beq.n	80062d0 <USBD_StdEPReq+0x240>
 800626a:	e097      	b.n	800639c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800626c:	7bbb      	ldrb	r3, [r7, #14]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d007      	beq.n	8006282 <USBD_StdEPReq+0x1f2>
 8006272:	7bbb      	ldrb	r3, [r7, #14]
 8006274:	2b80      	cmp	r3, #128	@ 0x80
 8006276:	d004      	beq.n	8006282 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006278:	6839      	ldr	r1, [r7, #0]
 800627a:	6878      	ldr	r0, [r7, #4]
 800627c:	f000 fbed 	bl	8006a5a <USBD_CtlError>
                break;
 8006280:	e091      	b.n	80063a6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006282:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006286:	2b00      	cmp	r3, #0
 8006288:	da0b      	bge.n	80062a2 <USBD_StdEPReq+0x212>
 800628a:	7bbb      	ldrb	r3, [r7, #14]
 800628c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006290:	4613      	mov	r3, r2
 8006292:	009b      	lsls	r3, r3, #2
 8006294:	4413      	add	r3, r2
 8006296:	009b      	lsls	r3, r3, #2
 8006298:	3310      	adds	r3, #16
 800629a:	687a      	ldr	r2, [r7, #4]
 800629c:	4413      	add	r3, r2
 800629e:	3304      	adds	r3, #4
 80062a0:	e00b      	b.n	80062ba <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80062a2:	7bbb      	ldrb	r3, [r7, #14]
 80062a4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80062a8:	4613      	mov	r3, r2
 80062aa:	009b      	lsls	r3, r3, #2
 80062ac:	4413      	add	r3, r2
 80062ae:	009b      	lsls	r3, r3, #2
 80062b0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80062b4:	687a      	ldr	r2, [r7, #4]
 80062b6:	4413      	add	r3, r2
 80062b8:	3304      	adds	r3, #4
 80062ba:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	2200      	movs	r2, #0
 80062c0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	2202      	movs	r2, #2
 80062c6:	4619      	mov	r1, r3
 80062c8:	6878      	ldr	r0, [r7, #4]
 80062ca:	f000 fc43 	bl	8006b54 <USBD_CtlSendData>
              break;
 80062ce:	e06a      	b.n	80063a6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80062d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	da11      	bge.n	80062fc <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80062d8:	7bbb      	ldrb	r3, [r7, #14]
 80062da:	f003 020f 	and.w	r2, r3, #15
 80062de:	6879      	ldr	r1, [r7, #4]
 80062e0:	4613      	mov	r3, r2
 80062e2:	009b      	lsls	r3, r3, #2
 80062e4:	4413      	add	r3, r2
 80062e6:	009b      	lsls	r3, r3, #2
 80062e8:	440b      	add	r3, r1
 80062ea:	3324      	adds	r3, #36	@ 0x24
 80062ec:	881b      	ldrh	r3, [r3, #0]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d117      	bne.n	8006322 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80062f2:	6839      	ldr	r1, [r7, #0]
 80062f4:	6878      	ldr	r0, [r7, #4]
 80062f6:	f000 fbb0 	bl	8006a5a <USBD_CtlError>
                  break;
 80062fa:	e054      	b.n	80063a6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80062fc:	7bbb      	ldrb	r3, [r7, #14]
 80062fe:	f003 020f 	and.w	r2, r3, #15
 8006302:	6879      	ldr	r1, [r7, #4]
 8006304:	4613      	mov	r3, r2
 8006306:	009b      	lsls	r3, r3, #2
 8006308:	4413      	add	r3, r2
 800630a:	009b      	lsls	r3, r3, #2
 800630c:	440b      	add	r3, r1
 800630e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006312:	881b      	ldrh	r3, [r3, #0]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d104      	bne.n	8006322 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006318:	6839      	ldr	r1, [r7, #0]
 800631a:	6878      	ldr	r0, [r7, #4]
 800631c:	f000 fb9d 	bl	8006a5a <USBD_CtlError>
                  break;
 8006320:	e041      	b.n	80063a6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006322:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006326:	2b00      	cmp	r3, #0
 8006328:	da0b      	bge.n	8006342 <USBD_StdEPReq+0x2b2>
 800632a:	7bbb      	ldrb	r3, [r7, #14]
 800632c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006330:	4613      	mov	r3, r2
 8006332:	009b      	lsls	r3, r3, #2
 8006334:	4413      	add	r3, r2
 8006336:	009b      	lsls	r3, r3, #2
 8006338:	3310      	adds	r3, #16
 800633a:	687a      	ldr	r2, [r7, #4]
 800633c:	4413      	add	r3, r2
 800633e:	3304      	adds	r3, #4
 8006340:	e00b      	b.n	800635a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006342:	7bbb      	ldrb	r3, [r7, #14]
 8006344:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006348:	4613      	mov	r3, r2
 800634a:	009b      	lsls	r3, r3, #2
 800634c:	4413      	add	r3, r2
 800634e:	009b      	lsls	r3, r3, #2
 8006350:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006354:	687a      	ldr	r2, [r7, #4]
 8006356:	4413      	add	r3, r2
 8006358:	3304      	adds	r3, #4
 800635a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800635c:	7bbb      	ldrb	r3, [r7, #14]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d002      	beq.n	8006368 <USBD_StdEPReq+0x2d8>
 8006362:	7bbb      	ldrb	r3, [r7, #14]
 8006364:	2b80      	cmp	r3, #128	@ 0x80
 8006366:	d103      	bne.n	8006370 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	2200      	movs	r2, #0
 800636c:	601a      	str	r2, [r3, #0]
 800636e:	e00e      	b.n	800638e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006370:	7bbb      	ldrb	r3, [r7, #14]
 8006372:	4619      	mov	r1, r3
 8006374:	6878      	ldr	r0, [r7, #4]
 8006376:	f003 fbad 	bl	8009ad4 <USBD_LL_IsStallEP>
 800637a:	4603      	mov	r3, r0
 800637c:	2b00      	cmp	r3, #0
 800637e:	d003      	beq.n	8006388 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006380:	68bb      	ldr	r3, [r7, #8]
 8006382:	2201      	movs	r2, #1
 8006384:	601a      	str	r2, [r3, #0]
 8006386:	e002      	b.n	800638e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006388:	68bb      	ldr	r3, [r7, #8]
 800638a:	2200      	movs	r2, #0
 800638c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	2202      	movs	r2, #2
 8006392:	4619      	mov	r1, r3
 8006394:	6878      	ldr	r0, [r7, #4]
 8006396:	f000 fbdd 	bl	8006b54 <USBD_CtlSendData>
              break;
 800639a:	e004      	b.n	80063a6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800639c:	6839      	ldr	r1, [r7, #0]
 800639e:	6878      	ldr	r0, [r7, #4]
 80063a0:	f000 fb5b 	bl	8006a5a <USBD_CtlError>
              break;
 80063a4:	bf00      	nop
          }
          break;
 80063a6:	e004      	b.n	80063b2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80063a8:	6839      	ldr	r1, [r7, #0]
 80063aa:	6878      	ldr	r0, [r7, #4]
 80063ac:	f000 fb55 	bl	8006a5a <USBD_CtlError>
          break;
 80063b0:	bf00      	nop
      }
      break;
 80063b2:	e005      	b.n	80063c0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80063b4:	6839      	ldr	r1, [r7, #0]
 80063b6:	6878      	ldr	r0, [r7, #4]
 80063b8:	f000 fb4f 	bl	8006a5a <USBD_CtlError>
      break;
 80063bc:	e000      	b.n	80063c0 <USBD_StdEPReq+0x330>
      break;
 80063be:	bf00      	nop
  }

  return ret;
 80063c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80063c2:	4618      	mov	r0, r3
 80063c4:	3710      	adds	r7, #16
 80063c6:	46bd      	mov	sp, r7
 80063c8:	bd80      	pop	{r7, pc}
	...

080063cc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b084      	sub	sp, #16
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
 80063d4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80063d6:	2300      	movs	r3, #0
 80063d8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80063da:	2300      	movs	r3, #0
 80063dc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80063de:	2300      	movs	r3, #0
 80063e0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	885b      	ldrh	r3, [r3, #2]
 80063e6:	0a1b      	lsrs	r3, r3, #8
 80063e8:	b29b      	uxth	r3, r3
 80063ea:	3b01      	subs	r3, #1
 80063ec:	2b06      	cmp	r3, #6
 80063ee:	f200 8128 	bhi.w	8006642 <USBD_GetDescriptor+0x276>
 80063f2:	a201      	add	r2, pc, #4	@ (adr r2, 80063f8 <USBD_GetDescriptor+0x2c>)
 80063f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063f8:	08006415 	.word	0x08006415
 80063fc:	0800642d 	.word	0x0800642d
 8006400:	0800646d 	.word	0x0800646d
 8006404:	08006643 	.word	0x08006643
 8006408:	08006643 	.word	0x08006643
 800640c:	080065e3 	.word	0x080065e3
 8006410:	0800660f 	.word	0x0800660f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	687a      	ldr	r2, [r7, #4]
 800641e:	7c12      	ldrb	r2, [r2, #16]
 8006420:	f107 0108 	add.w	r1, r7, #8
 8006424:	4610      	mov	r0, r2
 8006426:	4798      	blx	r3
 8006428:	60f8      	str	r0, [r7, #12]
      break;
 800642a:	e112      	b.n	8006652 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	7c1b      	ldrb	r3, [r3, #16]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d10d      	bne.n	8006450 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800643a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800643c:	f107 0208 	add.w	r2, r7, #8
 8006440:	4610      	mov	r0, r2
 8006442:	4798      	blx	r3
 8006444:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	3301      	adds	r3, #1
 800644a:	2202      	movs	r2, #2
 800644c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800644e:	e100      	b.n	8006652 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006456:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006458:	f107 0208 	add.w	r2, r7, #8
 800645c:	4610      	mov	r0, r2
 800645e:	4798      	blx	r3
 8006460:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	3301      	adds	r3, #1
 8006466:	2202      	movs	r2, #2
 8006468:	701a      	strb	r2, [r3, #0]
      break;
 800646a:	e0f2      	b.n	8006652 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	885b      	ldrh	r3, [r3, #2]
 8006470:	b2db      	uxtb	r3, r3
 8006472:	2b05      	cmp	r3, #5
 8006474:	f200 80ac 	bhi.w	80065d0 <USBD_GetDescriptor+0x204>
 8006478:	a201      	add	r2, pc, #4	@ (adr r2, 8006480 <USBD_GetDescriptor+0xb4>)
 800647a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800647e:	bf00      	nop
 8006480:	08006499 	.word	0x08006499
 8006484:	080064cd 	.word	0x080064cd
 8006488:	08006501 	.word	0x08006501
 800648c:	08006535 	.word	0x08006535
 8006490:	08006569 	.word	0x08006569
 8006494:	0800659d 	.word	0x0800659d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800649e:	685b      	ldr	r3, [r3, #4]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d00b      	beq.n	80064bc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80064aa:	685b      	ldr	r3, [r3, #4]
 80064ac:	687a      	ldr	r2, [r7, #4]
 80064ae:	7c12      	ldrb	r2, [r2, #16]
 80064b0:	f107 0108 	add.w	r1, r7, #8
 80064b4:	4610      	mov	r0, r2
 80064b6:	4798      	blx	r3
 80064b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80064ba:	e091      	b.n	80065e0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80064bc:	6839      	ldr	r1, [r7, #0]
 80064be:	6878      	ldr	r0, [r7, #4]
 80064c0:	f000 facb 	bl	8006a5a <USBD_CtlError>
            err++;
 80064c4:	7afb      	ldrb	r3, [r7, #11]
 80064c6:	3301      	adds	r3, #1
 80064c8:	72fb      	strb	r3, [r7, #11]
          break;
 80064ca:	e089      	b.n	80065e0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80064d2:	689b      	ldr	r3, [r3, #8]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d00b      	beq.n	80064f0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80064de:	689b      	ldr	r3, [r3, #8]
 80064e0:	687a      	ldr	r2, [r7, #4]
 80064e2:	7c12      	ldrb	r2, [r2, #16]
 80064e4:	f107 0108 	add.w	r1, r7, #8
 80064e8:	4610      	mov	r0, r2
 80064ea:	4798      	blx	r3
 80064ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80064ee:	e077      	b.n	80065e0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80064f0:	6839      	ldr	r1, [r7, #0]
 80064f2:	6878      	ldr	r0, [r7, #4]
 80064f4:	f000 fab1 	bl	8006a5a <USBD_CtlError>
            err++;
 80064f8:	7afb      	ldrb	r3, [r7, #11]
 80064fa:	3301      	adds	r3, #1
 80064fc:	72fb      	strb	r3, [r7, #11]
          break;
 80064fe:	e06f      	b.n	80065e0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006506:	68db      	ldr	r3, [r3, #12]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d00b      	beq.n	8006524 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006512:	68db      	ldr	r3, [r3, #12]
 8006514:	687a      	ldr	r2, [r7, #4]
 8006516:	7c12      	ldrb	r2, [r2, #16]
 8006518:	f107 0108 	add.w	r1, r7, #8
 800651c:	4610      	mov	r0, r2
 800651e:	4798      	blx	r3
 8006520:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006522:	e05d      	b.n	80065e0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006524:	6839      	ldr	r1, [r7, #0]
 8006526:	6878      	ldr	r0, [r7, #4]
 8006528:	f000 fa97 	bl	8006a5a <USBD_CtlError>
            err++;
 800652c:	7afb      	ldrb	r3, [r7, #11]
 800652e:	3301      	adds	r3, #1
 8006530:	72fb      	strb	r3, [r7, #11]
          break;
 8006532:	e055      	b.n	80065e0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800653a:	691b      	ldr	r3, [r3, #16]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d00b      	beq.n	8006558 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006546:	691b      	ldr	r3, [r3, #16]
 8006548:	687a      	ldr	r2, [r7, #4]
 800654a:	7c12      	ldrb	r2, [r2, #16]
 800654c:	f107 0108 	add.w	r1, r7, #8
 8006550:	4610      	mov	r0, r2
 8006552:	4798      	blx	r3
 8006554:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006556:	e043      	b.n	80065e0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006558:	6839      	ldr	r1, [r7, #0]
 800655a:	6878      	ldr	r0, [r7, #4]
 800655c:	f000 fa7d 	bl	8006a5a <USBD_CtlError>
            err++;
 8006560:	7afb      	ldrb	r3, [r7, #11]
 8006562:	3301      	adds	r3, #1
 8006564:	72fb      	strb	r3, [r7, #11]
          break;
 8006566:	e03b      	b.n	80065e0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800656e:	695b      	ldr	r3, [r3, #20]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d00b      	beq.n	800658c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800657a:	695b      	ldr	r3, [r3, #20]
 800657c:	687a      	ldr	r2, [r7, #4]
 800657e:	7c12      	ldrb	r2, [r2, #16]
 8006580:	f107 0108 	add.w	r1, r7, #8
 8006584:	4610      	mov	r0, r2
 8006586:	4798      	blx	r3
 8006588:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800658a:	e029      	b.n	80065e0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800658c:	6839      	ldr	r1, [r7, #0]
 800658e:	6878      	ldr	r0, [r7, #4]
 8006590:	f000 fa63 	bl	8006a5a <USBD_CtlError>
            err++;
 8006594:	7afb      	ldrb	r3, [r7, #11]
 8006596:	3301      	adds	r3, #1
 8006598:	72fb      	strb	r3, [r7, #11]
          break;
 800659a:	e021      	b.n	80065e0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80065a2:	699b      	ldr	r3, [r3, #24]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d00b      	beq.n	80065c0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80065ae:	699b      	ldr	r3, [r3, #24]
 80065b0:	687a      	ldr	r2, [r7, #4]
 80065b2:	7c12      	ldrb	r2, [r2, #16]
 80065b4:	f107 0108 	add.w	r1, r7, #8
 80065b8:	4610      	mov	r0, r2
 80065ba:	4798      	blx	r3
 80065bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80065be:	e00f      	b.n	80065e0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80065c0:	6839      	ldr	r1, [r7, #0]
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	f000 fa49 	bl	8006a5a <USBD_CtlError>
            err++;
 80065c8:	7afb      	ldrb	r3, [r7, #11]
 80065ca:	3301      	adds	r3, #1
 80065cc:	72fb      	strb	r3, [r7, #11]
          break;
 80065ce:	e007      	b.n	80065e0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80065d0:	6839      	ldr	r1, [r7, #0]
 80065d2:	6878      	ldr	r0, [r7, #4]
 80065d4:	f000 fa41 	bl	8006a5a <USBD_CtlError>
          err++;
 80065d8:	7afb      	ldrb	r3, [r7, #11]
 80065da:	3301      	adds	r3, #1
 80065dc:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80065de:	bf00      	nop
      }
      break;
 80065e0:	e037      	b.n	8006652 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	7c1b      	ldrb	r3, [r3, #16]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d109      	bne.n	80065fe <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80065f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80065f2:	f107 0208 	add.w	r2, r7, #8
 80065f6:	4610      	mov	r0, r2
 80065f8:	4798      	blx	r3
 80065fa:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80065fc:	e029      	b.n	8006652 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80065fe:	6839      	ldr	r1, [r7, #0]
 8006600:	6878      	ldr	r0, [r7, #4]
 8006602:	f000 fa2a 	bl	8006a5a <USBD_CtlError>
        err++;
 8006606:	7afb      	ldrb	r3, [r7, #11]
 8006608:	3301      	adds	r3, #1
 800660a:	72fb      	strb	r3, [r7, #11]
      break;
 800660c:	e021      	b.n	8006652 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	7c1b      	ldrb	r3, [r3, #16]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d10d      	bne.n	8006632 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800661c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800661e:	f107 0208 	add.w	r2, r7, #8
 8006622:	4610      	mov	r0, r2
 8006624:	4798      	blx	r3
 8006626:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	3301      	adds	r3, #1
 800662c:	2207      	movs	r2, #7
 800662e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006630:	e00f      	b.n	8006652 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006632:	6839      	ldr	r1, [r7, #0]
 8006634:	6878      	ldr	r0, [r7, #4]
 8006636:	f000 fa10 	bl	8006a5a <USBD_CtlError>
        err++;
 800663a:	7afb      	ldrb	r3, [r7, #11]
 800663c:	3301      	adds	r3, #1
 800663e:	72fb      	strb	r3, [r7, #11]
      break;
 8006640:	e007      	b.n	8006652 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006642:	6839      	ldr	r1, [r7, #0]
 8006644:	6878      	ldr	r0, [r7, #4]
 8006646:	f000 fa08 	bl	8006a5a <USBD_CtlError>
      err++;
 800664a:	7afb      	ldrb	r3, [r7, #11]
 800664c:	3301      	adds	r3, #1
 800664e:	72fb      	strb	r3, [r7, #11]
      break;
 8006650:	bf00      	nop
  }

  if (err != 0U)
 8006652:	7afb      	ldrb	r3, [r7, #11]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d11e      	bne.n	8006696 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	88db      	ldrh	r3, [r3, #6]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d016      	beq.n	800668e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006660:	893b      	ldrh	r3, [r7, #8]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d00e      	beq.n	8006684 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	88da      	ldrh	r2, [r3, #6]
 800666a:	893b      	ldrh	r3, [r7, #8]
 800666c:	4293      	cmp	r3, r2
 800666e:	bf28      	it	cs
 8006670:	4613      	movcs	r3, r2
 8006672:	b29b      	uxth	r3, r3
 8006674:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006676:	893b      	ldrh	r3, [r7, #8]
 8006678:	461a      	mov	r2, r3
 800667a:	68f9      	ldr	r1, [r7, #12]
 800667c:	6878      	ldr	r0, [r7, #4]
 800667e:	f000 fa69 	bl	8006b54 <USBD_CtlSendData>
 8006682:	e009      	b.n	8006698 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006684:	6839      	ldr	r1, [r7, #0]
 8006686:	6878      	ldr	r0, [r7, #4]
 8006688:	f000 f9e7 	bl	8006a5a <USBD_CtlError>
 800668c:	e004      	b.n	8006698 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800668e:	6878      	ldr	r0, [r7, #4]
 8006690:	f000 faba 	bl	8006c08 <USBD_CtlSendStatus>
 8006694:	e000      	b.n	8006698 <USBD_GetDescriptor+0x2cc>
    return;
 8006696:	bf00      	nop
  }
}
 8006698:	3710      	adds	r7, #16
 800669a:	46bd      	mov	sp, r7
 800669c:	bd80      	pop	{r7, pc}
 800669e:	bf00      	nop

080066a0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b084      	sub	sp, #16
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
 80066a8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	889b      	ldrh	r3, [r3, #4]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d131      	bne.n	8006716 <USBD_SetAddress+0x76>
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	88db      	ldrh	r3, [r3, #6]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d12d      	bne.n	8006716 <USBD_SetAddress+0x76>
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	885b      	ldrh	r3, [r3, #2]
 80066be:	2b7f      	cmp	r3, #127	@ 0x7f
 80066c0:	d829      	bhi.n	8006716 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	885b      	ldrh	r3, [r3, #2]
 80066c6:	b2db      	uxtb	r3, r3
 80066c8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80066cc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80066d4:	b2db      	uxtb	r3, r3
 80066d6:	2b03      	cmp	r3, #3
 80066d8:	d104      	bne.n	80066e4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80066da:	6839      	ldr	r1, [r7, #0]
 80066dc:	6878      	ldr	r0, [r7, #4]
 80066de:	f000 f9bc 	bl	8006a5a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80066e2:	e01d      	b.n	8006720 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	7bfa      	ldrb	r2, [r7, #15]
 80066e8:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80066ec:	7bfb      	ldrb	r3, [r7, #15]
 80066ee:	4619      	mov	r1, r3
 80066f0:	6878      	ldr	r0, [r7, #4]
 80066f2:	f003 fa1b 	bl	8009b2c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80066f6:	6878      	ldr	r0, [r7, #4]
 80066f8:	f000 fa86 	bl	8006c08 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80066fc:	7bfb      	ldrb	r3, [r7, #15]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d004      	beq.n	800670c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2202      	movs	r2, #2
 8006706:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800670a:	e009      	b.n	8006720 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2201      	movs	r2, #1
 8006710:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006714:	e004      	b.n	8006720 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006716:	6839      	ldr	r1, [r7, #0]
 8006718:	6878      	ldr	r0, [r7, #4]
 800671a:	f000 f99e 	bl	8006a5a <USBD_CtlError>
  }
}
 800671e:	bf00      	nop
 8006720:	bf00      	nop
 8006722:	3710      	adds	r7, #16
 8006724:	46bd      	mov	sp, r7
 8006726:	bd80      	pop	{r7, pc}

08006728 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b084      	sub	sp, #16
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
 8006730:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006732:	2300      	movs	r3, #0
 8006734:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	885b      	ldrh	r3, [r3, #2]
 800673a:	b2da      	uxtb	r2, r3
 800673c:	4b4e      	ldr	r3, [pc, #312]	@ (8006878 <USBD_SetConfig+0x150>)
 800673e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006740:	4b4d      	ldr	r3, [pc, #308]	@ (8006878 <USBD_SetConfig+0x150>)
 8006742:	781b      	ldrb	r3, [r3, #0]
 8006744:	2b01      	cmp	r3, #1
 8006746:	d905      	bls.n	8006754 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006748:	6839      	ldr	r1, [r7, #0]
 800674a:	6878      	ldr	r0, [r7, #4]
 800674c:	f000 f985 	bl	8006a5a <USBD_CtlError>
    return USBD_FAIL;
 8006750:	2303      	movs	r3, #3
 8006752:	e08c      	b.n	800686e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800675a:	b2db      	uxtb	r3, r3
 800675c:	2b02      	cmp	r3, #2
 800675e:	d002      	beq.n	8006766 <USBD_SetConfig+0x3e>
 8006760:	2b03      	cmp	r3, #3
 8006762:	d029      	beq.n	80067b8 <USBD_SetConfig+0x90>
 8006764:	e075      	b.n	8006852 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006766:	4b44      	ldr	r3, [pc, #272]	@ (8006878 <USBD_SetConfig+0x150>)
 8006768:	781b      	ldrb	r3, [r3, #0]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d020      	beq.n	80067b0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800676e:	4b42      	ldr	r3, [pc, #264]	@ (8006878 <USBD_SetConfig+0x150>)
 8006770:	781b      	ldrb	r3, [r3, #0]
 8006772:	461a      	mov	r2, r3
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006778:	4b3f      	ldr	r3, [pc, #252]	@ (8006878 <USBD_SetConfig+0x150>)
 800677a:	781b      	ldrb	r3, [r3, #0]
 800677c:	4619      	mov	r1, r3
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	f7fe ffe3 	bl	800574a <USBD_SetClassConfig>
 8006784:	4603      	mov	r3, r0
 8006786:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006788:	7bfb      	ldrb	r3, [r7, #15]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d008      	beq.n	80067a0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800678e:	6839      	ldr	r1, [r7, #0]
 8006790:	6878      	ldr	r0, [r7, #4]
 8006792:	f000 f962 	bl	8006a5a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2202      	movs	r2, #2
 800679a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800679e:	e065      	b.n	800686c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80067a0:	6878      	ldr	r0, [r7, #4]
 80067a2:	f000 fa31 	bl	8006c08 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	2203      	movs	r2, #3
 80067aa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80067ae:	e05d      	b.n	800686c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80067b0:	6878      	ldr	r0, [r7, #4]
 80067b2:	f000 fa29 	bl	8006c08 <USBD_CtlSendStatus>
      break;
 80067b6:	e059      	b.n	800686c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80067b8:	4b2f      	ldr	r3, [pc, #188]	@ (8006878 <USBD_SetConfig+0x150>)
 80067ba:	781b      	ldrb	r3, [r3, #0]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d112      	bne.n	80067e6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2202      	movs	r2, #2
 80067c4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80067c8:	4b2b      	ldr	r3, [pc, #172]	@ (8006878 <USBD_SetConfig+0x150>)
 80067ca:	781b      	ldrb	r3, [r3, #0]
 80067cc:	461a      	mov	r2, r3
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80067d2:	4b29      	ldr	r3, [pc, #164]	@ (8006878 <USBD_SetConfig+0x150>)
 80067d4:	781b      	ldrb	r3, [r3, #0]
 80067d6:	4619      	mov	r1, r3
 80067d8:	6878      	ldr	r0, [r7, #4]
 80067da:	f7fe ffd2 	bl	8005782 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80067de:	6878      	ldr	r0, [r7, #4]
 80067e0:	f000 fa12 	bl	8006c08 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80067e4:	e042      	b.n	800686c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80067e6:	4b24      	ldr	r3, [pc, #144]	@ (8006878 <USBD_SetConfig+0x150>)
 80067e8:	781b      	ldrb	r3, [r3, #0]
 80067ea:	461a      	mov	r2, r3
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	685b      	ldr	r3, [r3, #4]
 80067f0:	429a      	cmp	r2, r3
 80067f2:	d02a      	beq.n	800684a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	685b      	ldr	r3, [r3, #4]
 80067f8:	b2db      	uxtb	r3, r3
 80067fa:	4619      	mov	r1, r3
 80067fc:	6878      	ldr	r0, [r7, #4]
 80067fe:	f7fe ffc0 	bl	8005782 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006802:	4b1d      	ldr	r3, [pc, #116]	@ (8006878 <USBD_SetConfig+0x150>)
 8006804:	781b      	ldrb	r3, [r3, #0]
 8006806:	461a      	mov	r2, r3
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800680c:	4b1a      	ldr	r3, [pc, #104]	@ (8006878 <USBD_SetConfig+0x150>)
 800680e:	781b      	ldrb	r3, [r3, #0]
 8006810:	4619      	mov	r1, r3
 8006812:	6878      	ldr	r0, [r7, #4]
 8006814:	f7fe ff99 	bl	800574a <USBD_SetClassConfig>
 8006818:	4603      	mov	r3, r0
 800681a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800681c:	7bfb      	ldrb	r3, [r7, #15]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d00f      	beq.n	8006842 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8006822:	6839      	ldr	r1, [r7, #0]
 8006824:	6878      	ldr	r0, [r7, #4]
 8006826:	f000 f918 	bl	8006a5a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	685b      	ldr	r3, [r3, #4]
 800682e:	b2db      	uxtb	r3, r3
 8006830:	4619      	mov	r1, r3
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	f7fe ffa5 	bl	8005782 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2202      	movs	r2, #2
 800683c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8006840:	e014      	b.n	800686c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006842:	6878      	ldr	r0, [r7, #4]
 8006844:	f000 f9e0 	bl	8006c08 <USBD_CtlSendStatus>
      break;
 8006848:	e010      	b.n	800686c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800684a:	6878      	ldr	r0, [r7, #4]
 800684c:	f000 f9dc 	bl	8006c08 <USBD_CtlSendStatus>
      break;
 8006850:	e00c      	b.n	800686c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8006852:	6839      	ldr	r1, [r7, #0]
 8006854:	6878      	ldr	r0, [r7, #4]
 8006856:	f000 f900 	bl	8006a5a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800685a:	4b07      	ldr	r3, [pc, #28]	@ (8006878 <USBD_SetConfig+0x150>)
 800685c:	781b      	ldrb	r3, [r3, #0]
 800685e:	4619      	mov	r1, r3
 8006860:	6878      	ldr	r0, [r7, #4]
 8006862:	f7fe ff8e 	bl	8005782 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006866:	2303      	movs	r3, #3
 8006868:	73fb      	strb	r3, [r7, #15]
      break;
 800686a:	bf00      	nop
  }

  return ret;
 800686c:	7bfb      	ldrb	r3, [r7, #15]
}
 800686e:	4618      	mov	r0, r3
 8006870:	3710      	adds	r7, #16
 8006872:	46bd      	mov	sp, r7
 8006874:	bd80      	pop	{r7, pc}
 8006876:	bf00      	nop
 8006878:	20000478 	.word	0x20000478

0800687c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b082      	sub	sp, #8
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
 8006884:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	88db      	ldrh	r3, [r3, #6]
 800688a:	2b01      	cmp	r3, #1
 800688c:	d004      	beq.n	8006898 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800688e:	6839      	ldr	r1, [r7, #0]
 8006890:	6878      	ldr	r0, [r7, #4]
 8006892:	f000 f8e2 	bl	8006a5a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006896:	e023      	b.n	80068e0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800689e:	b2db      	uxtb	r3, r3
 80068a0:	2b02      	cmp	r3, #2
 80068a2:	dc02      	bgt.n	80068aa <USBD_GetConfig+0x2e>
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	dc03      	bgt.n	80068b0 <USBD_GetConfig+0x34>
 80068a8:	e015      	b.n	80068d6 <USBD_GetConfig+0x5a>
 80068aa:	2b03      	cmp	r3, #3
 80068ac:	d00b      	beq.n	80068c6 <USBD_GetConfig+0x4a>
 80068ae:	e012      	b.n	80068d6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2200      	movs	r2, #0
 80068b4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	3308      	adds	r3, #8
 80068ba:	2201      	movs	r2, #1
 80068bc:	4619      	mov	r1, r3
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	f000 f948 	bl	8006b54 <USBD_CtlSendData>
        break;
 80068c4:	e00c      	b.n	80068e0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	3304      	adds	r3, #4
 80068ca:	2201      	movs	r2, #1
 80068cc:	4619      	mov	r1, r3
 80068ce:	6878      	ldr	r0, [r7, #4]
 80068d0:	f000 f940 	bl	8006b54 <USBD_CtlSendData>
        break;
 80068d4:	e004      	b.n	80068e0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80068d6:	6839      	ldr	r1, [r7, #0]
 80068d8:	6878      	ldr	r0, [r7, #4]
 80068da:	f000 f8be 	bl	8006a5a <USBD_CtlError>
        break;
 80068de:	bf00      	nop
}
 80068e0:	bf00      	nop
 80068e2:	3708      	adds	r7, #8
 80068e4:	46bd      	mov	sp, r7
 80068e6:	bd80      	pop	{r7, pc}

080068e8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b082      	sub	sp, #8
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
 80068f0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80068f8:	b2db      	uxtb	r3, r3
 80068fa:	3b01      	subs	r3, #1
 80068fc:	2b02      	cmp	r3, #2
 80068fe:	d81e      	bhi.n	800693e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	88db      	ldrh	r3, [r3, #6]
 8006904:	2b02      	cmp	r3, #2
 8006906:	d004      	beq.n	8006912 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006908:	6839      	ldr	r1, [r7, #0]
 800690a:	6878      	ldr	r0, [r7, #4]
 800690c:	f000 f8a5 	bl	8006a5a <USBD_CtlError>
        break;
 8006910:	e01a      	b.n	8006948 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2201      	movs	r2, #1
 8006916:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800691e:	2b00      	cmp	r3, #0
 8006920:	d005      	beq.n	800692e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	68db      	ldr	r3, [r3, #12]
 8006926:	f043 0202 	orr.w	r2, r3, #2
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	330c      	adds	r3, #12
 8006932:	2202      	movs	r2, #2
 8006934:	4619      	mov	r1, r3
 8006936:	6878      	ldr	r0, [r7, #4]
 8006938:	f000 f90c 	bl	8006b54 <USBD_CtlSendData>
      break;
 800693c:	e004      	b.n	8006948 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800693e:	6839      	ldr	r1, [r7, #0]
 8006940:	6878      	ldr	r0, [r7, #4]
 8006942:	f000 f88a 	bl	8006a5a <USBD_CtlError>
      break;
 8006946:	bf00      	nop
  }
}
 8006948:	bf00      	nop
 800694a:	3708      	adds	r7, #8
 800694c:	46bd      	mov	sp, r7
 800694e:	bd80      	pop	{r7, pc}

08006950 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b082      	sub	sp, #8
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
 8006958:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	885b      	ldrh	r3, [r3, #2]
 800695e:	2b01      	cmp	r3, #1
 8006960:	d107      	bne.n	8006972 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2201      	movs	r2, #1
 8006966:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f000 f94c 	bl	8006c08 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8006970:	e013      	b.n	800699a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	885b      	ldrh	r3, [r3, #2]
 8006976:	2b02      	cmp	r3, #2
 8006978:	d10b      	bne.n	8006992 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	889b      	ldrh	r3, [r3, #4]
 800697e:	0a1b      	lsrs	r3, r3, #8
 8006980:	b29b      	uxth	r3, r3
 8006982:	b2da      	uxtb	r2, r3
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800698a:	6878      	ldr	r0, [r7, #4]
 800698c:	f000 f93c 	bl	8006c08 <USBD_CtlSendStatus>
}
 8006990:	e003      	b.n	800699a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8006992:	6839      	ldr	r1, [r7, #0]
 8006994:	6878      	ldr	r0, [r7, #4]
 8006996:	f000 f860 	bl	8006a5a <USBD_CtlError>
}
 800699a:	bf00      	nop
 800699c:	3708      	adds	r7, #8
 800699e:	46bd      	mov	sp, r7
 80069a0:	bd80      	pop	{r7, pc}

080069a2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80069a2:	b580      	push	{r7, lr}
 80069a4:	b082      	sub	sp, #8
 80069a6:	af00      	add	r7, sp, #0
 80069a8:	6078      	str	r0, [r7, #4]
 80069aa:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80069b2:	b2db      	uxtb	r3, r3
 80069b4:	3b01      	subs	r3, #1
 80069b6:	2b02      	cmp	r3, #2
 80069b8:	d80b      	bhi.n	80069d2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	885b      	ldrh	r3, [r3, #2]
 80069be:	2b01      	cmp	r3, #1
 80069c0:	d10c      	bne.n	80069dc <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2200      	movs	r2, #0
 80069c6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80069ca:	6878      	ldr	r0, [r7, #4]
 80069cc:	f000 f91c 	bl	8006c08 <USBD_CtlSendStatus>
      }
      break;
 80069d0:	e004      	b.n	80069dc <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80069d2:	6839      	ldr	r1, [r7, #0]
 80069d4:	6878      	ldr	r0, [r7, #4]
 80069d6:	f000 f840 	bl	8006a5a <USBD_CtlError>
      break;
 80069da:	e000      	b.n	80069de <USBD_ClrFeature+0x3c>
      break;
 80069dc:	bf00      	nop
  }
}
 80069de:	bf00      	nop
 80069e0:	3708      	adds	r7, #8
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bd80      	pop	{r7, pc}

080069e6 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80069e6:	b580      	push	{r7, lr}
 80069e8:	b084      	sub	sp, #16
 80069ea:	af00      	add	r7, sp, #0
 80069ec:	6078      	str	r0, [r7, #4]
 80069ee:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	781a      	ldrb	r2, [r3, #0]
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	3301      	adds	r3, #1
 8006a00:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	781a      	ldrb	r2, [r3, #0]
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	3301      	adds	r3, #1
 8006a0e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006a10:	68f8      	ldr	r0, [r7, #12]
 8006a12:	f7ff fa40 	bl	8005e96 <SWAPBYTE>
 8006a16:	4603      	mov	r3, r0
 8006a18:	461a      	mov	r2, r3
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	3301      	adds	r3, #1
 8006a22:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	3301      	adds	r3, #1
 8006a28:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006a2a:	68f8      	ldr	r0, [r7, #12]
 8006a2c:	f7ff fa33 	bl	8005e96 <SWAPBYTE>
 8006a30:	4603      	mov	r3, r0
 8006a32:	461a      	mov	r2, r3
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	3301      	adds	r3, #1
 8006a3c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	3301      	adds	r3, #1
 8006a42:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006a44:	68f8      	ldr	r0, [r7, #12]
 8006a46:	f7ff fa26 	bl	8005e96 <SWAPBYTE>
 8006a4a:	4603      	mov	r3, r0
 8006a4c:	461a      	mov	r2, r3
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	80da      	strh	r2, [r3, #6]
}
 8006a52:	bf00      	nop
 8006a54:	3710      	adds	r7, #16
 8006a56:	46bd      	mov	sp, r7
 8006a58:	bd80      	pop	{r7, pc}

08006a5a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a5a:	b580      	push	{r7, lr}
 8006a5c:	b082      	sub	sp, #8
 8006a5e:	af00      	add	r7, sp, #0
 8006a60:	6078      	str	r0, [r7, #4]
 8006a62:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006a64:	2180      	movs	r1, #128	@ 0x80
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	f002 fff6 	bl	8009a58 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006a6c:	2100      	movs	r1, #0
 8006a6e:	6878      	ldr	r0, [r7, #4]
 8006a70:	f002 fff2 	bl	8009a58 <USBD_LL_StallEP>
}
 8006a74:	bf00      	nop
 8006a76:	3708      	adds	r7, #8
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	bd80      	pop	{r7, pc}

08006a7c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b086      	sub	sp, #24
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	60f8      	str	r0, [r7, #12]
 8006a84:	60b9      	str	r1, [r7, #8]
 8006a86:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006a88:	2300      	movs	r3, #0
 8006a8a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d042      	beq.n	8006b18 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8006a96:	6938      	ldr	r0, [r7, #16]
 8006a98:	f000 f842 	bl	8006b20 <USBD_GetLen>
 8006a9c:	4603      	mov	r3, r0
 8006a9e:	3301      	adds	r3, #1
 8006aa0:	005b      	lsls	r3, r3, #1
 8006aa2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006aa6:	d808      	bhi.n	8006aba <USBD_GetString+0x3e>
 8006aa8:	6938      	ldr	r0, [r7, #16]
 8006aaa:	f000 f839 	bl	8006b20 <USBD_GetLen>
 8006aae:	4603      	mov	r3, r0
 8006ab0:	3301      	adds	r3, #1
 8006ab2:	b29b      	uxth	r3, r3
 8006ab4:	005b      	lsls	r3, r3, #1
 8006ab6:	b29a      	uxth	r2, r3
 8006ab8:	e001      	b.n	8006abe <USBD_GetString+0x42>
 8006aba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006ac2:	7dfb      	ldrb	r3, [r7, #23]
 8006ac4:	68ba      	ldr	r2, [r7, #8]
 8006ac6:	4413      	add	r3, r2
 8006ac8:	687a      	ldr	r2, [r7, #4]
 8006aca:	7812      	ldrb	r2, [r2, #0]
 8006acc:	701a      	strb	r2, [r3, #0]
  idx++;
 8006ace:	7dfb      	ldrb	r3, [r7, #23]
 8006ad0:	3301      	adds	r3, #1
 8006ad2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006ad4:	7dfb      	ldrb	r3, [r7, #23]
 8006ad6:	68ba      	ldr	r2, [r7, #8]
 8006ad8:	4413      	add	r3, r2
 8006ada:	2203      	movs	r2, #3
 8006adc:	701a      	strb	r2, [r3, #0]
  idx++;
 8006ade:	7dfb      	ldrb	r3, [r7, #23]
 8006ae0:	3301      	adds	r3, #1
 8006ae2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006ae4:	e013      	b.n	8006b0e <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8006ae6:	7dfb      	ldrb	r3, [r7, #23]
 8006ae8:	68ba      	ldr	r2, [r7, #8]
 8006aea:	4413      	add	r3, r2
 8006aec:	693a      	ldr	r2, [r7, #16]
 8006aee:	7812      	ldrb	r2, [r2, #0]
 8006af0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006af2:	693b      	ldr	r3, [r7, #16]
 8006af4:	3301      	adds	r3, #1
 8006af6:	613b      	str	r3, [r7, #16]
    idx++;
 8006af8:	7dfb      	ldrb	r3, [r7, #23]
 8006afa:	3301      	adds	r3, #1
 8006afc:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006afe:	7dfb      	ldrb	r3, [r7, #23]
 8006b00:	68ba      	ldr	r2, [r7, #8]
 8006b02:	4413      	add	r3, r2
 8006b04:	2200      	movs	r2, #0
 8006b06:	701a      	strb	r2, [r3, #0]
    idx++;
 8006b08:	7dfb      	ldrb	r3, [r7, #23]
 8006b0a:	3301      	adds	r3, #1
 8006b0c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006b0e:	693b      	ldr	r3, [r7, #16]
 8006b10:	781b      	ldrb	r3, [r3, #0]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d1e7      	bne.n	8006ae6 <USBD_GetString+0x6a>
 8006b16:	e000      	b.n	8006b1a <USBD_GetString+0x9e>
    return;
 8006b18:	bf00      	nop
  }
}
 8006b1a:	3718      	adds	r7, #24
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	bd80      	pop	{r7, pc}

08006b20 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006b20:	b480      	push	{r7}
 8006b22:	b085      	sub	sp, #20
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006b28:	2300      	movs	r3, #0
 8006b2a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006b30:	e005      	b.n	8006b3e <USBD_GetLen+0x1e>
  {
    len++;
 8006b32:	7bfb      	ldrb	r3, [r7, #15]
 8006b34:	3301      	adds	r3, #1
 8006b36:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	3301      	adds	r3, #1
 8006b3c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006b3e:	68bb      	ldr	r3, [r7, #8]
 8006b40:	781b      	ldrb	r3, [r3, #0]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d1f5      	bne.n	8006b32 <USBD_GetLen+0x12>
  }

  return len;
 8006b46:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b48:	4618      	mov	r0, r3
 8006b4a:	3714      	adds	r7, #20
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b52:	4770      	bx	lr

08006b54 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b084      	sub	sp, #16
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	60f8      	str	r0, [r7, #12]
 8006b5c:	60b9      	str	r1, [r7, #8]
 8006b5e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	2202      	movs	r2, #2
 8006b64:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	687a      	ldr	r2, [r7, #4]
 8006b6c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	687a      	ldr	r2, [r7, #4]
 8006b72:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	68ba      	ldr	r2, [r7, #8]
 8006b78:	2100      	movs	r1, #0
 8006b7a:	68f8      	ldr	r0, [r7, #12]
 8006b7c:	f002 fff5 	bl	8009b6a <USBD_LL_Transmit>

  return USBD_OK;
 8006b80:	2300      	movs	r3, #0
}
 8006b82:	4618      	mov	r0, r3
 8006b84:	3710      	adds	r7, #16
 8006b86:	46bd      	mov	sp, r7
 8006b88:	bd80      	pop	{r7, pc}

08006b8a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006b8a:	b580      	push	{r7, lr}
 8006b8c:	b084      	sub	sp, #16
 8006b8e:	af00      	add	r7, sp, #0
 8006b90:	60f8      	str	r0, [r7, #12]
 8006b92:	60b9      	str	r1, [r7, #8]
 8006b94:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	68ba      	ldr	r2, [r7, #8]
 8006b9a:	2100      	movs	r1, #0
 8006b9c:	68f8      	ldr	r0, [r7, #12]
 8006b9e:	f002 ffe4 	bl	8009b6a <USBD_LL_Transmit>

  return USBD_OK;
 8006ba2:	2300      	movs	r3, #0
}
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	3710      	adds	r7, #16
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	bd80      	pop	{r7, pc}

08006bac <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b084      	sub	sp, #16
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	60f8      	str	r0, [r7, #12]
 8006bb4:	60b9      	str	r1, [r7, #8]
 8006bb6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	2203      	movs	r2, #3
 8006bbc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	687a      	ldr	r2, [r7, #4]
 8006bc4:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	687a      	ldr	r2, [r7, #4]
 8006bcc:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	68ba      	ldr	r2, [r7, #8]
 8006bd4:	2100      	movs	r1, #0
 8006bd6:	68f8      	ldr	r0, [r7, #12]
 8006bd8:	f002 ffe8 	bl	8009bac <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006bdc:	2300      	movs	r3, #0
}
 8006bde:	4618      	mov	r0, r3
 8006be0:	3710      	adds	r7, #16
 8006be2:	46bd      	mov	sp, r7
 8006be4:	bd80      	pop	{r7, pc}

08006be6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006be6:	b580      	push	{r7, lr}
 8006be8:	b084      	sub	sp, #16
 8006bea:	af00      	add	r7, sp, #0
 8006bec:	60f8      	str	r0, [r7, #12]
 8006bee:	60b9      	str	r1, [r7, #8]
 8006bf0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	68ba      	ldr	r2, [r7, #8]
 8006bf6:	2100      	movs	r1, #0
 8006bf8:	68f8      	ldr	r0, [r7, #12]
 8006bfa:	f002 ffd7 	bl	8009bac <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006bfe:	2300      	movs	r3, #0
}
 8006c00:	4618      	mov	r0, r3
 8006c02:	3710      	adds	r7, #16
 8006c04:	46bd      	mov	sp, r7
 8006c06:	bd80      	pop	{r7, pc}

08006c08 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b082      	sub	sp, #8
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2204      	movs	r2, #4
 8006c14:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006c18:	2300      	movs	r3, #0
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	2100      	movs	r1, #0
 8006c1e:	6878      	ldr	r0, [r7, #4]
 8006c20:	f002 ffa3 	bl	8009b6a <USBD_LL_Transmit>

  return USBD_OK;
 8006c24:	2300      	movs	r3, #0
}
 8006c26:	4618      	mov	r0, r3
 8006c28:	3708      	adds	r7, #8
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	bd80      	pop	{r7, pc}

08006c2e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006c2e:	b580      	push	{r7, lr}
 8006c30:	b082      	sub	sp, #8
 8006c32:	af00      	add	r7, sp, #0
 8006c34:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2205      	movs	r2, #5
 8006c3a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006c3e:	2300      	movs	r3, #0
 8006c40:	2200      	movs	r2, #0
 8006c42:	2100      	movs	r1, #0
 8006c44:	6878      	ldr	r0, [r7, #4]
 8006c46:	f002 ffb1 	bl	8009bac <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006c4a:	2300      	movs	r3, #0
}
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	3708      	adds	r7, #8
 8006c50:	46bd      	mov	sp, r7
 8006c52:	bd80      	pop	{r7, pc}

08006c54 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006c54:	b480      	push	{r7}
 8006c56:	b085      	sub	sp, #20
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	4603      	mov	r3, r0
 8006c5c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006c5e:	2300      	movs	r3, #0
 8006c60:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8006c62:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006c66:	2b84      	cmp	r3, #132	@ 0x84
 8006c68:	d005      	beq.n	8006c76 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8006c6a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	4413      	add	r3, r2
 8006c72:	3303      	adds	r3, #3
 8006c74:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8006c76:	68fb      	ldr	r3, [r7, #12]
}
 8006c78:	4618      	mov	r0, r3
 8006c7a:	3714      	adds	r7, #20
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c82:	4770      	bx	lr

08006c84 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006c88:	f001 f866 	bl	8007d58 <vTaskStartScheduler>
  
  return osOK;
 8006c8c:	2300      	movs	r3, #0
}
 8006c8e:	4618      	mov	r0, r3
 8006c90:	bd80      	pop	{r7, pc}

08006c92 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006c92:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c94:	b089      	sub	sp, #36	@ 0x24
 8006c96:	af04      	add	r7, sp, #16
 8006c98:	6078      	str	r0, [r7, #4]
 8006c9a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	695b      	ldr	r3, [r3, #20]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d020      	beq.n	8006ce6 <osThreadCreate+0x54>
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	699b      	ldr	r3, [r3, #24]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d01c      	beq.n	8006ce6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	685c      	ldr	r4, [r3, #4]
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	691e      	ldr	r6, [r3, #16]
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	f7ff ffc8 	bl	8006c54 <makeFreeRtosPriority>
 8006cc4:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	695b      	ldr	r3, [r3, #20]
 8006cca:	687a      	ldr	r2, [r7, #4]
 8006ccc:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006cce:	9202      	str	r2, [sp, #8]
 8006cd0:	9301      	str	r3, [sp, #4]
 8006cd2:	9100      	str	r1, [sp, #0]
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	4632      	mov	r2, r6
 8006cd8:	4629      	mov	r1, r5
 8006cda:	4620      	mov	r0, r4
 8006cdc:	f000 fe56 	bl	800798c <xTaskCreateStatic>
 8006ce0:	4603      	mov	r3, r0
 8006ce2:	60fb      	str	r3, [r7, #12]
 8006ce4:	e01c      	b.n	8006d20 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	685c      	ldr	r4, [r3, #4]
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006cf2:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	f7ff ffaa 	bl	8006c54 <makeFreeRtosPriority>
 8006d00:	4602      	mov	r2, r0
 8006d02:	f107 030c 	add.w	r3, r7, #12
 8006d06:	9301      	str	r3, [sp, #4]
 8006d08:	9200      	str	r2, [sp, #0]
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	4632      	mov	r2, r6
 8006d0e:	4629      	mov	r1, r5
 8006d10:	4620      	mov	r0, r4
 8006d12:	f000 fe9b 	bl	8007a4c <xTaskCreate>
 8006d16:	4603      	mov	r3, r0
 8006d18:	2b01      	cmp	r3, #1
 8006d1a:	d001      	beq.n	8006d20 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	e000      	b.n	8006d22 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006d20:	68fb      	ldr	r3, [r7, #12]
}
 8006d22:	4618      	mov	r0, r3
 8006d24:	3714      	adds	r7, #20
 8006d26:	46bd      	mov	sp, r7
 8006d28:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006d2a <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8006d2a:	b580      	push	{r7, lr}
 8006d2c:	b082      	sub	sp, #8
 8006d2e:	af00      	add	r7, sp, #0
 8006d30:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	685b      	ldr	r3, [r3, #4]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d007      	beq.n	8006d4a <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	685b      	ldr	r3, [r3, #4]
 8006d3e:	4619      	mov	r1, r3
 8006d40:	2001      	movs	r0, #1
 8006d42:	f000 fa64 	bl	800720e <xQueueCreateMutexStatic>
 8006d46:	4603      	mov	r3, r0
 8006d48:	e003      	b.n	8006d52 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8006d4a:	2001      	movs	r0, #1
 8006d4c:	f000 fa47 	bl	80071de <xQueueCreateMutex>
 8006d50:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8006d52:	4618      	mov	r0, r3
 8006d54:	3708      	adds	r7, #8
 8006d56:	46bd      	mov	sp, r7
 8006d58:	bd80      	pop	{r7, pc}

08006d5a <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8006d5a:	b580      	push	{r7, lr}
 8006d5c:	b086      	sub	sp, #24
 8006d5e:	af02      	add	r7, sp, #8
 8006d60:	6078      	str	r0, [r7, #4]
 8006d62:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	685b      	ldr	r3, [r3, #4]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d00f      	beq.n	8006d8c <osSemaphoreCreate+0x32>
    if (count == 1) {
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	2b01      	cmp	r3, #1
 8006d70:	d10a      	bne.n	8006d88 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	685b      	ldr	r3, [r3, #4]
 8006d76:	2203      	movs	r2, #3
 8006d78:	9200      	str	r2, [sp, #0]
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	2100      	movs	r1, #0
 8006d7e:	2001      	movs	r0, #1
 8006d80:	f000 f93c 	bl	8006ffc <xQueueGenericCreateStatic>
 8006d84:	4603      	mov	r3, r0
 8006d86:	e016      	b.n	8006db6 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8006d88:	2300      	movs	r3, #0
 8006d8a:	e014      	b.n	8006db6 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	2b01      	cmp	r3, #1
 8006d90:	d110      	bne.n	8006db4 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8006d92:	2203      	movs	r2, #3
 8006d94:	2100      	movs	r1, #0
 8006d96:	2001      	movs	r0, #1
 8006d98:	f000 f9ad 	bl	80070f6 <xQueueGenericCreate>
 8006d9c:	60f8      	str	r0, [r7, #12]
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d005      	beq.n	8006db0 <osSemaphoreCreate+0x56>
 8006da4:	2300      	movs	r3, #0
 8006da6:	2200      	movs	r2, #0
 8006da8:	2100      	movs	r1, #0
 8006daa:	68f8      	ldr	r0, [r7, #12]
 8006dac:	f000 fa4a 	bl	8007244 <xQueueGenericSend>
      return sema;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	e000      	b.n	8006db6 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8006db4:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8006db6:	4618      	mov	r0, r3
 8006db8:	3710      	adds	r7, #16
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	bd80      	pop	{r7, pc}

08006dbe <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006dbe:	b480      	push	{r7}
 8006dc0:	b083      	sub	sp, #12
 8006dc2:	af00      	add	r7, sp, #0
 8006dc4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	f103 0208 	add.w	r2, r3, #8
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	f04f 32ff 	mov.w	r2, #4294967295
 8006dd6:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	f103 0208 	add.w	r2, r3, #8
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	f103 0208 	add.w	r2, r3, #8
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2200      	movs	r2, #0
 8006df0:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006df2:	bf00      	nop
 8006df4:	370c      	adds	r7, #12
 8006df6:	46bd      	mov	sp, r7
 8006df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfc:	4770      	bx	lr

08006dfe <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006dfe:	b480      	push	{r7}
 8006e00:	b083      	sub	sp, #12
 8006e02:	af00      	add	r7, sp, #0
 8006e04:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2200      	movs	r2, #0
 8006e0a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006e0c:	bf00      	nop
 8006e0e:	370c      	adds	r7, #12
 8006e10:	46bd      	mov	sp, r7
 8006e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e16:	4770      	bx	lr

08006e18 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006e18:	b480      	push	{r7}
 8006e1a:	b085      	sub	sp, #20
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
 8006e20:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	685b      	ldr	r3, [r3, #4]
 8006e26:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	68fa      	ldr	r2, [r7, #12]
 8006e2c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	689a      	ldr	r2, [r3, #8]
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	689b      	ldr	r3, [r3, #8]
 8006e3a:	683a      	ldr	r2, [r7, #0]
 8006e3c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	683a      	ldr	r2, [r7, #0]
 8006e42:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	687a      	ldr	r2, [r7, #4]
 8006e48:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	1c5a      	adds	r2, r3, #1
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	601a      	str	r2, [r3, #0]
}
 8006e54:	bf00      	nop
 8006e56:	3714      	adds	r7, #20
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5e:	4770      	bx	lr

08006e60 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006e60:	b480      	push	{r7}
 8006e62:	b085      	sub	sp, #20
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
 8006e68:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006e70:	68bb      	ldr	r3, [r7, #8]
 8006e72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e76:	d103      	bne.n	8006e80 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	691b      	ldr	r3, [r3, #16]
 8006e7c:	60fb      	str	r3, [r7, #12]
 8006e7e:	e00c      	b.n	8006e9a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	3308      	adds	r3, #8
 8006e84:	60fb      	str	r3, [r7, #12]
 8006e86:	e002      	b.n	8006e8e <vListInsert+0x2e>
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	685b      	ldr	r3, [r3, #4]
 8006e8c:	60fb      	str	r3, [r7, #12]
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	685b      	ldr	r3, [r3, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	68ba      	ldr	r2, [r7, #8]
 8006e96:	429a      	cmp	r2, r3
 8006e98:	d2f6      	bcs.n	8006e88 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	685a      	ldr	r2, [r3, #4]
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	685b      	ldr	r3, [r3, #4]
 8006ea6:	683a      	ldr	r2, [r7, #0]
 8006ea8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	68fa      	ldr	r2, [r7, #12]
 8006eae:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	683a      	ldr	r2, [r7, #0]
 8006eb4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	687a      	ldr	r2, [r7, #4]
 8006eba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	1c5a      	adds	r2, r3, #1
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	601a      	str	r2, [r3, #0]
}
 8006ec6:	bf00      	nop
 8006ec8:	3714      	adds	r7, #20
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed0:	4770      	bx	lr

08006ed2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006ed2:	b480      	push	{r7}
 8006ed4:	b085      	sub	sp, #20
 8006ed6:	af00      	add	r7, sp, #0
 8006ed8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	691b      	ldr	r3, [r3, #16]
 8006ede:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	685b      	ldr	r3, [r3, #4]
 8006ee4:	687a      	ldr	r2, [r7, #4]
 8006ee6:	6892      	ldr	r2, [r2, #8]
 8006ee8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	689b      	ldr	r3, [r3, #8]
 8006eee:	687a      	ldr	r2, [r7, #4]
 8006ef0:	6852      	ldr	r2, [r2, #4]
 8006ef2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	685b      	ldr	r3, [r3, #4]
 8006ef8:	687a      	ldr	r2, [r7, #4]
 8006efa:	429a      	cmp	r2, r3
 8006efc:	d103      	bne.n	8006f06 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	689a      	ldr	r2, [r3, #8]
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2200      	movs	r2, #0
 8006f0a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	1e5a      	subs	r2, r3, #1
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	681b      	ldr	r3, [r3, #0]
}
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	3714      	adds	r7, #20
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f24:	4770      	bx	lr
	...

08006f28 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b084      	sub	sp, #16
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
 8006f30:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d10b      	bne.n	8006f54 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006f3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f40:	f383 8811 	msr	BASEPRI, r3
 8006f44:	f3bf 8f6f 	isb	sy
 8006f48:	f3bf 8f4f 	dsb	sy
 8006f4c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006f4e:	bf00      	nop
 8006f50:	bf00      	nop
 8006f52:	e7fd      	b.n	8006f50 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006f54:	f001 fe78 	bl	8008c48 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	681a      	ldr	r2, [r3, #0]
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f60:	68f9      	ldr	r1, [r7, #12]
 8006f62:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006f64:	fb01 f303 	mul.w	r3, r1, r3
 8006f68:	441a      	add	r2, r3
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	2200      	movs	r2, #0
 8006f72:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	681a      	ldr	r2, [r3, #0]
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681a      	ldr	r2, [r3, #0]
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f84:	3b01      	subs	r3, #1
 8006f86:	68f9      	ldr	r1, [r7, #12]
 8006f88:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006f8a:	fb01 f303 	mul.w	r3, r1, r3
 8006f8e:	441a      	add	r2, r3
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	22ff      	movs	r2, #255	@ 0xff
 8006f98:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	22ff      	movs	r2, #255	@ 0xff
 8006fa0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d114      	bne.n	8006fd4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	691b      	ldr	r3, [r3, #16]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d01a      	beq.n	8006fe8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	3310      	adds	r3, #16
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	f001 f928 	bl	800820c <xTaskRemoveFromEventList>
 8006fbc:	4603      	mov	r3, r0
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d012      	beq.n	8006fe8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006fc2:	4b0d      	ldr	r3, [pc, #52]	@ (8006ff8 <xQueueGenericReset+0xd0>)
 8006fc4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006fc8:	601a      	str	r2, [r3, #0]
 8006fca:	f3bf 8f4f 	dsb	sy
 8006fce:	f3bf 8f6f 	isb	sy
 8006fd2:	e009      	b.n	8006fe8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	3310      	adds	r3, #16
 8006fd8:	4618      	mov	r0, r3
 8006fda:	f7ff fef0 	bl	8006dbe <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	3324      	adds	r3, #36	@ 0x24
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	f7ff feeb 	bl	8006dbe <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006fe8:	f001 fe60 	bl	8008cac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006fec:	2301      	movs	r3, #1
}
 8006fee:	4618      	mov	r0, r3
 8006ff0:	3710      	adds	r7, #16
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	bd80      	pop	{r7, pc}
 8006ff6:	bf00      	nop
 8006ff8:	e000ed04 	.word	0xe000ed04

08006ffc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b08e      	sub	sp, #56	@ 0x38
 8007000:	af02      	add	r7, sp, #8
 8007002:	60f8      	str	r0, [r7, #12]
 8007004:	60b9      	str	r1, [r7, #8]
 8007006:	607a      	str	r2, [r7, #4]
 8007008:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d10b      	bne.n	8007028 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8007010:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007014:	f383 8811 	msr	BASEPRI, r3
 8007018:	f3bf 8f6f 	isb	sy
 800701c:	f3bf 8f4f 	dsb	sy
 8007020:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007022:	bf00      	nop
 8007024:	bf00      	nop
 8007026:	e7fd      	b.n	8007024 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d10b      	bne.n	8007046 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800702e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007032:	f383 8811 	msr	BASEPRI, r3
 8007036:	f3bf 8f6f 	isb	sy
 800703a:	f3bf 8f4f 	dsb	sy
 800703e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007040:	bf00      	nop
 8007042:	bf00      	nop
 8007044:	e7fd      	b.n	8007042 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d002      	beq.n	8007052 <xQueueGenericCreateStatic+0x56>
 800704c:	68bb      	ldr	r3, [r7, #8]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d001      	beq.n	8007056 <xQueueGenericCreateStatic+0x5a>
 8007052:	2301      	movs	r3, #1
 8007054:	e000      	b.n	8007058 <xQueueGenericCreateStatic+0x5c>
 8007056:	2300      	movs	r3, #0
 8007058:	2b00      	cmp	r3, #0
 800705a:	d10b      	bne.n	8007074 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800705c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007060:	f383 8811 	msr	BASEPRI, r3
 8007064:	f3bf 8f6f 	isb	sy
 8007068:	f3bf 8f4f 	dsb	sy
 800706c:	623b      	str	r3, [r7, #32]
}
 800706e:	bf00      	nop
 8007070:	bf00      	nop
 8007072:	e7fd      	b.n	8007070 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d102      	bne.n	8007080 <xQueueGenericCreateStatic+0x84>
 800707a:	68bb      	ldr	r3, [r7, #8]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d101      	bne.n	8007084 <xQueueGenericCreateStatic+0x88>
 8007080:	2301      	movs	r3, #1
 8007082:	e000      	b.n	8007086 <xQueueGenericCreateStatic+0x8a>
 8007084:	2300      	movs	r3, #0
 8007086:	2b00      	cmp	r3, #0
 8007088:	d10b      	bne.n	80070a2 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800708a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800708e:	f383 8811 	msr	BASEPRI, r3
 8007092:	f3bf 8f6f 	isb	sy
 8007096:	f3bf 8f4f 	dsb	sy
 800709a:	61fb      	str	r3, [r7, #28]
}
 800709c:	bf00      	nop
 800709e:	bf00      	nop
 80070a0:	e7fd      	b.n	800709e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80070a2:	2348      	movs	r3, #72	@ 0x48
 80070a4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80070a6:	697b      	ldr	r3, [r7, #20]
 80070a8:	2b48      	cmp	r3, #72	@ 0x48
 80070aa:	d00b      	beq.n	80070c4 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80070ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070b0:	f383 8811 	msr	BASEPRI, r3
 80070b4:	f3bf 8f6f 	isb	sy
 80070b8:	f3bf 8f4f 	dsb	sy
 80070bc:	61bb      	str	r3, [r7, #24]
}
 80070be:	bf00      	nop
 80070c0:	bf00      	nop
 80070c2:	e7fd      	b.n	80070c0 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80070c4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80070ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d00d      	beq.n	80070ec <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80070d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070d2:	2201      	movs	r2, #1
 80070d4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80070d8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80070dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070de:	9300      	str	r3, [sp, #0]
 80070e0:	4613      	mov	r3, r2
 80070e2:	687a      	ldr	r2, [r7, #4]
 80070e4:	68b9      	ldr	r1, [r7, #8]
 80070e6:	68f8      	ldr	r0, [r7, #12]
 80070e8:	f000 f840 	bl	800716c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80070ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80070ee:	4618      	mov	r0, r3
 80070f0:	3730      	adds	r7, #48	@ 0x30
 80070f2:	46bd      	mov	sp, r7
 80070f4:	bd80      	pop	{r7, pc}

080070f6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80070f6:	b580      	push	{r7, lr}
 80070f8:	b08a      	sub	sp, #40	@ 0x28
 80070fa:	af02      	add	r7, sp, #8
 80070fc:	60f8      	str	r0, [r7, #12]
 80070fe:	60b9      	str	r1, [r7, #8]
 8007100:	4613      	mov	r3, r2
 8007102:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d10b      	bne.n	8007122 <xQueueGenericCreate+0x2c>
	__asm volatile
 800710a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800710e:	f383 8811 	msr	BASEPRI, r3
 8007112:	f3bf 8f6f 	isb	sy
 8007116:	f3bf 8f4f 	dsb	sy
 800711a:	613b      	str	r3, [r7, #16]
}
 800711c:	bf00      	nop
 800711e:	bf00      	nop
 8007120:	e7fd      	b.n	800711e <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	68ba      	ldr	r2, [r7, #8]
 8007126:	fb02 f303 	mul.w	r3, r2, r3
 800712a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800712c:	69fb      	ldr	r3, [r7, #28]
 800712e:	3348      	adds	r3, #72	@ 0x48
 8007130:	4618      	mov	r0, r3
 8007132:	f001 feab 	bl	8008e8c <pvPortMalloc>
 8007136:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007138:	69bb      	ldr	r3, [r7, #24]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d011      	beq.n	8007162 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800713e:	69bb      	ldr	r3, [r7, #24]
 8007140:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007142:	697b      	ldr	r3, [r7, #20]
 8007144:	3348      	adds	r3, #72	@ 0x48
 8007146:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007148:	69bb      	ldr	r3, [r7, #24]
 800714a:	2200      	movs	r2, #0
 800714c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007150:	79fa      	ldrb	r2, [r7, #7]
 8007152:	69bb      	ldr	r3, [r7, #24]
 8007154:	9300      	str	r3, [sp, #0]
 8007156:	4613      	mov	r3, r2
 8007158:	697a      	ldr	r2, [r7, #20]
 800715a:	68b9      	ldr	r1, [r7, #8]
 800715c:	68f8      	ldr	r0, [r7, #12]
 800715e:	f000 f805 	bl	800716c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007162:	69bb      	ldr	r3, [r7, #24]
	}
 8007164:	4618      	mov	r0, r3
 8007166:	3720      	adds	r7, #32
 8007168:	46bd      	mov	sp, r7
 800716a:	bd80      	pop	{r7, pc}

0800716c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b084      	sub	sp, #16
 8007170:	af00      	add	r7, sp, #0
 8007172:	60f8      	str	r0, [r7, #12]
 8007174:	60b9      	str	r1, [r7, #8]
 8007176:	607a      	str	r2, [r7, #4]
 8007178:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800717a:	68bb      	ldr	r3, [r7, #8]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d103      	bne.n	8007188 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007180:	69bb      	ldr	r3, [r7, #24]
 8007182:	69ba      	ldr	r2, [r7, #24]
 8007184:	601a      	str	r2, [r3, #0]
 8007186:	e002      	b.n	800718e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007188:	69bb      	ldr	r3, [r7, #24]
 800718a:	687a      	ldr	r2, [r7, #4]
 800718c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800718e:	69bb      	ldr	r3, [r7, #24]
 8007190:	68fa      	ldr	r2, [r7, #12]
 8007192:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007194:	69bb      	ldr	r3, [r7, #24]
 8007196:	68ba      	ldr	r2, [r7, #8]
 8007198:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800719a:	2101      	movs	r1, #1
 800719c:	69b8      	ldr	r0, [r7, #24]
 800719e:	f7ff fec3 	bl	8006f28 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80071a2:	bf00      	nop
 80071a4:	3710      	adds	r7, #16
 80071a6:	46bd      	mov	sp, r7
 80071a8:	bd80      	pop	{r7, pc}

080071aa <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80071aa:	b580      	push	{r7, lr}
 80071ac:	b082      	sub	sp, #8
 80071ae:	af00      	add	r7, sp, #0
 80071b0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d00e      	beq.n	80071d6 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2200      	movs	r2, #0
 80071bc:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	2200      	movs	r2, #0
 80071c2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2200      	movs	r2, #0
 80071c8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80071ca:	2300      	movs	r3, #0
 80071cc:	2200      	movs	r2, #0
 80071ce:	2100      	movs	r1, #0
 80071d0:	6878      	ldr	r0, [r7, #4]
 80071d2:	f000 f837 	bl	8007244 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80071d6:	bf00      	nop
 80071d8:	3708      	adds	r7, #8
 80071da:	46bd      	mov	sp, r7
 80071dc:	bd80      	pop	{r7, pc}

080071de <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80071de:	b580      	push	{r7, lr}
 80071e0:	b086      	sub	sp, #24
 80071e2:	af00      	add	r7, sp, #0
 80071e4:	4603      	mov	r3, r0
 80071e6:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80071e8:	2301      	movs	r3, #1
 80071ea:	617b      	str	r3, [r7, #20]
 80071ec:	2300      	movs	r3, #0
 80071ee:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80071f0:	79fb      	ldrb	r3, [r7, #7]
 80071f2:	461a      	mov	r2, r3
 80071f4:	6939      	ldr	r1, [r7, #16]
 80071f6:	6978      	ldr	r0, [r7, #20]
 80071f8:	f7ff ff7d 	bl	80070f6 <xQueueGenericCreate>
 80071fc:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80071fe:	68f8      	ldr	r0, [r7, #12]
 8007200:	f7ff ffd3 	bl	80071aa <prvInitialiseMutex>

		return xNewQueue;
 8007204:	68fb      	ldr	r3, [r7, #12]
	}
 8007206:	4618      	mov	r0, r3
 8007208:	3718      	adds	r7, #24
 800720a:	46bd      	mov	sp, r7
 800720c:	bd80      	pop	{r7, pc}

0800720e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800720e:	b580      	push	{r7, lr}
 8007210:	b088      	sub	sp, #32
 8007212:	af02      	add	r7, sp, #8
 8007214:	4603      	mov	r3, r0
 8007216:	6039      	str	r1, [r7, #0]
 8007218:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800721a:	2301      	movs	r3, #1
 800721c:	617b      	str	r3, [r7, #20]
 800721e:	2300      	movs	r3, #0
 8007220:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8007222:	79fb      	ldrb	r3, [r7, #7]
 8007224:	9300      	str	r3, [sp, #0]
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	2200      	movs	r2, #0
 800722a:	6939      	ldr	r1, [r7, #16]
 800722c:	6978      	ldr	r0, [r7, #20]
 800722e:	f7ff fee5 	bl	8006ffc <xQueueGenericCreateStatic>
 8007232:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007234:	68f8      	ldr	r0, [r7, #12]
 8007236:	f7ff ffb8 	bl	80071aa <prvInitialiseMutex>

		return xNewQueue;
 800723a:	68fb      	ldr	r3, [r7, #12]
	}
 800723c:	4618      	mov	r0, r3
 800723e:	3718      	adds	r7, #24
 8007240:	46bd      	mov	sp, r7
 8007242:	bd80      	pop	{r7, pc}

08007244 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007244:	b580      	push	{r7, lr}
 8007246:	b08e      	sub	sp, #56	@ 0x38
 8007248:	af00      	add	r7, sp, #0
 800724a:	60f8      	str	r0, [r7, #12]
 800724c:	60b9      	str	r1, [r7, #8]
 800724e:	607a      	str	r2, [r7, #4]
 8007250:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007252:	2300      	movs	r3, #0
 8007254:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800725a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800725c:	2b00      	cmp	r3, #0
 800725e:	d10b      	bne.n	8007278 <xQueueGenericSend+0x34>
	__asm volatile
 8007260:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007264:	f383 8811 	msr	BASEPRI, r3
 8007268:	f3bf 8f6f 	isb	sy
 800726c:	f3bf 8f4f 	dsb	sy
 8007270:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007272:	bf00      	nop
 8007274:	bf00      	nop
 8007276:	e7fd      	b.n	8007274 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007278:	68bb      	ldr	r3, [r7, #8]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d103      	bne.n	8007286 <xQueueGenericSend+0x42>
 800727e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007280:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007282:	2b00      	cmp	r3, #0
 8007284:	d101      	bne.n	800728a <xQueueGenericSend+0x46>
 8007286:	2301      	movs	r3, #1
 8007288:	e000      	b.n	800728c <xQueueGenericSend+0x48>
 800728a:	2300      	movs	r3, #0
 800728c:	2b00      	cmp	r3, #0
 800728e:	d10b      	bne.n	80072a8 <xQueueGenericSend+0x64>
	__asm volatile
 8007290:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007294:	f383 8811 	msr	BASEPRI, r3
 8007298:	f3bf 8f6f 	isb	sy
 800729c:	f3bf 8f4f 	dsb	sy
 80072a0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80072a2:	bf00      	nop
 80072a4:	bf00      	nop
 80072a6:	e7fd      	b.n	80072a4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	2b02      	cmp	r3, #2
 80072ac:	d103      	bne.n	80072b6 <xQueueGenericSend+0x72>
 80072ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072b2:	2b01      	cmp	r3, #1
 80072b4:	d101      	bne.n	80072ba <xQueueGenericSend+0x76>
 80072b6:	2301      	movs	r3, #1
 80072b8:	e000      	b.n	80072bc <xQueueGenericSend+0x78>
 80072ba:	2300      	movs	r3, #0
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d10b      	bne.n	80072d8 <xQueueGenericSend+0x94>
	__asm volatile
 80072c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072c4:	f383 8811 	msr	BASEPRI, r3
 80072c8:	f3bf 8f6f 	isb	sy
 80072cc:	f3bf 8f4f 	dsb	sy
 80072d0:	623b      	str	r3, [r7, #32]
}
 80072d2:	bf00      	nop
 80072d4:	bf00      	nop
 80072d6:	e7fd      	b.n	80072d4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80072d8:	f001 f95e 	bl	8008598 <xTaskGetSchedulerState>
 80072dc:	4603      	mov	r3, r0
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d102      	bne.n	80072e8 <xQueueGenericSend+0xa4>
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d101      	bne.n	80072ec <xQueueGenericSend+0xa8>
 80072e8:	2301      	movs	r3, #1
 80072ea:	e000      	b.n	80072ee <xQueueGenericSend+0xaa>
 80072ec:	2300      	movs	r3, #0
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d10b      	bne.n	800730a <xQueueGenericSend+0xc6>
	__asm volatile
 80072f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072f6:	f383 8811 	msr	BASEPRI, r3
 80072fa:	f3bf 8f6f 	isb	sy
 80072fe:	f3bf 8f4f 	dsb	sy
 8007302:	61fb      	str	r3, [r7, #28]
}
 8007304:	bf00      	nop
 8007306:	bf00      	nop
 8007308:	e7fd      	b.n	8007306 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800730a:	f001 fc9d 	bl	8008c48 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800730e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007310:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007312:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007314:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007316:	429a      	cmp	r2, r3
 8007318:	d302      	bcc.n	8007320 <xQueueGenericSend+0xdc>
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	2b02      	cmp	r3, #2
 800731e:	d129      	bne.n	8007374 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007320:	683a      	ldr	r2, [r7, #0]
 8007322:	68b9      	ldr	r1, [r7, #8]
 8007324:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007326:	f000 fa47 	bl	80077b8 <prvCopyDataToQueue>
 800732a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800732c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800732e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007330:	2b00      	cmp	r3, #0
 8007332:	d010      	beq.n	8007356 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007334:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007336:	3324      	adds	r3, #36	@ 0x24
 8007338:	4618      	mov	r0, r3
 800733a:	f000 ff67 	bl	800820c <xTaskRemoveFromEventList>
 800733e:	4603      	mov	r3, r0
 8007340:	2b00      	cmp	r3, #0
 8007342:	d013      	beq.n	800736c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007344:	4b3f      	ldr	r3, [pc, #252]	@ (8007444 <xQueueGenericSend+0x200>)
 8007346:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800734a:	601a      	str	r2, [r3, #0]
 800734c:	f3bf 8f4f 	dsb	sy
 8007350:	f3bf 8f6f 	isb	sy
 8007354:	e00a      	b.n	800736c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007356:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007358:	2b00      	cmp	r3, #0
 800735a:	d007      	beq.n	800736c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800735c:	4b39      	ldr	r3, [pc, #228]	@ (8007444 <xQueueGenericSend+0x200>)
 800735e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007362:	601a      	str	r2, [r3, #0]
 8007364:	f3bf 8f4f 	dsb	sy
 8007368:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800736c:	f001 fc9e 	bl	8008cac <vPortExitCritical>
				return pdPASS;
 8007370:	2301      	movs	r3, #1
 8007372:	e063      	b.n	800743c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d103      	bne.n	8007382 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800737a:	f001 fc97 	bl	8008cac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800737e:	2300      	movs	r3, #0
 8007380:	e05c      	b.n	800743c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007382:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007384:	2b00      	cmp	r3, #0
 8007386:	d106      	bne.n	8007396 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007388:	f107 0314 	add.w	r3, r7, #20
 800738c:	4618      	mov	r0, r3
 800738e:	f000 ffa1 	bl	80082d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007392:	2301      	movs	r3, #1
 8007394:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007396:	f001 fc89 	bl	8008cac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800739a:	f000 fd47 	bl	8007e2c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800739e:	f001 fc53 	bl	8008c48 <vPortEnterCritical>
 80073a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073a4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80073a8:	b25b      	sxtb	r3, r3
 80073aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073ae:	d103      	bne.n	80073b8 <xQueueGenericSend+0x174>
 80073b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073b2:	2200      	movs	r2, #0
 80073b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80073b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073ba:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80073be:	b25b      	sxtb	r3, r3
 80073c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073c4:	d103      	bne.n	80073ce <xQueueGenericSend+0x18a>
 80073c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073c8:	2200      	movs	r2, #0
 80073ca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80073ce:	f001 fc6d 	bl	8008cac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80073d2:	1d3a      	adds	r2, r7, #4
 80073d4:	f107 0314 	add.w	r3, r7, #20
 80073d8:	4611      	mov	r1, r2
 80073da:	4618      	mov	r0, r3
 80073dc:	f000 ff90 	bl	8008300 <xTaskCheckForTimeOut>
 80073e0:	4603      	mov	r3, r0
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d124      	bne.n	8007430 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80073e6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80073e8:	f000 fab8 	bl	800795c <prvIsQueueFull>
 80073ec:	4603      	mov	r3, r0
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d018      	beq.n	8007424 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80073f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073f4:	3310      	adds	r3, #16
 80073f6:	687a      	ldr	r2, [r7, #4]
 80073f8:	4611      	mov	r1, r2
 80073fa:	4618      	mov	r0, r3
 80073fc:	f000 fee0 	bl	80081c0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007400:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007402:	f000 fa43 	bl	800788c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007406:	f000 fd1f 	bl	8007e48 <xTaskResumeAll>
 800740a:	4603      	mov	r3, r0
 800740c:	2b00      	cmp	r3, #0
 800740e:	f47f af7c 	bne.w	800730a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8007412:	4b0c      	ldr	r3, [pc, #48]	@ (8007444 <xQueueGenericSend+0x200>)
 8007414:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007418:	601a      	str	r2, [r3, #0]
 800741a:	f3bf 8f4f 	dsb	sy
 800741e:	f3bf 8f6f 	isb	sy
 8007422:	e772      	b.n	800730a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007424:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007426:	f000 fa31 	bl	800788c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800742a:	f000 fd0d 	bl	8007e48 <xTaskResumeAll>
 800742e:	e76c      	b.n	800730a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007430:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007432:	f000 fa2b 	bl	800788c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007436:	f000 fd07 	bl	8007e48 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800743a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800743c:	4618      	mov	r0, r3
 800743e:	3738      	adds	r7, #56	@ 0x38
 8007440:	46bd      	mov	sp, r7
 8007442:	bd80      	pop	{r7, pc}
 8007444:	e000ed04 	.word	0xe000ed04

08007448 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b08e      	sub	sp, #56	@ 0x38
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
 8007450:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8007456:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007458:	2b00      	cmp	r3, #0
 800745a:	d10b      	bne.n	8007474 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800745c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007460:	f383 8811 	msr	BASEPRI, r3
 8007464:	f3bf 8f6f 	isb	sy
 8007468:	f3bf 8f4f 	dsb	sy
 800746c:	623b      	str	r3, [r7, #32]
}
 800746e:	bf00      	nop
 8007470:	bf00      	nop
 8007472:	e7fd      	b.n	8007470 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007474:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007476:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007478:	2b00      	cmp	r3, #0
 800747a:	d00b      	beq.n	8007494 <xQueueGiveFromISR+0x4c>
	__asm volatile
 800747c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007480:	f383 8811 	msr	BASEPRI, r3
 8007484:	f3bf 8f6f 	isb	sy
 8007488:	f3bf 8f4f 	dsb	sy
 800748c:	61fb      	str	r3, [r7, #28]
}
 800748e:	bf00      	nop
 8007490:	bf00      	nop
 8007492:	e7fd      	b.n	8007490 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8007494:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d103      	bne.n	80074a4 <xQueueGiveFromISR+0x5c>
 800749c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800749e:	689b      	ldr	r3, [r3, #8]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d101      	bne.n	80074a8 <xQueueGiveFromISR+0x60>
 80074a4:	2301      	movs	r3, #1
 80074a6:	e000      	b.n	80074aa <xQueueGiveFromISR+0x62>
 80074a8:	2300      	movs	r3, #0
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d10b      	bne.n	80074c6 <xQueueGiveFromISR+0x7e>
	__asm volatile
 80074ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074b2:	f383 8811 	msr	BASEPRI, r3
 80074b6:	f3bf 8f6f 	isb	sy
 80074ba:	f3bf 8f4f 	dsb	sy
 80074be:	61bb      	str	r3, [r7, #24]
}
 80074c0:	bf00      	nop
 80074c2:	bf00      	nop
 80074c4:	e7fd      	b.n	80074c2 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80074c6:	f001 fc9f 	bl	8008e08 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80074ca:	f3ef 8211 	mrs	r2, BASEPRI
 80074ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074d2:	f383 8811 	msr	BASEPRI, r3
 80074d6:	f3bf 8f6f 	isb	sy
 80074da:	f3bf 8f4f 	dsb	sy
 80074de:	617a      	str	r2, [r7, #20]
 80074e0:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80074e2:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80074e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80074e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074ea:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80074ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074f0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80074f2:	429a      	cmp	r2, r3
 80074f4:	d22b      	bcs.n	800754e <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80074f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074f8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80074fc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007500:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007502:	1c5a      	adds	r2, r3, #1
 8007504:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007506:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007508:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800750c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007510:	d112      	bne.n	8007538 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007512:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007514:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007516:	2b00      	cmp	r3, #0
 8007518:	d016      	beq.n	8007548 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800751a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800751c:	3324      	adds	r3, #36	@ 0x24
 800751e:	4618      	mov	r0, r3
 8007520:	f000 fe74 	bl	800820c <xTaskRemoveFromEventList>
 8007524:	4603      	mov	r3, r0
 8007526:	2b00      	cmp	r3, #0
 8007528:	d00e      	beq.n	8007548 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d00b      	beq.n	8007548 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	2201      	movs	r2, #1
 8007534:	601a      	str	r2, [r3, #0]
 8007536:	e007      	b.n	8007548 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007538:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800753c:	3301      	adds	r3, #1
 800753e:	b2db      	uxtb	r3, r3
 8007540:	b25a      	sxtb	r2, r3
 8007542:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007544:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8007548:	2301      	movs	r3, #1
 800754a:	637b      	str	r3, [r7, #52]	@ 0x34
 800754c:	e001      	b.n	8007552 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800754e:	2300      	movs	r3, #0
 8007550:	637b      	str	r3, [r7, #52]	@ 0x34
 8007552:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007554:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800755c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800755e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8007560:	4618      	mov	r0, r3
 8007562:	3738      	adds	r7, #56	@ 0x38
 8007564:	46bd      	mov	sp, r7
 8007566:	bd80      	pop	{r7, pc}

08007568 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007568:	b580      	push	{r7, lr}
 800756a:	b08e      	sub	sp, #56	@ 0x38
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
 8007570:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8007572:	2300      	movs	r3, #0
 8007574:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800757a:	2300      	movs	r3, #0
 800757c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800757e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007580:	2b00      	cmp	r3, #0
 8007582:	d10b      	bne.n	800759c <xQueueSemaphoreTake+0x34>
	__asm volatile
 8007584:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007588:	f383 8811 	msr	BASEPRI, r3
 800758c:	f3bf 8f6f 	isb	sy
 8007590:	f3bf 8f4f 	dsb	sy
 8007594:	623b      	str	r3, [r7, #32]
}
 8007596:	bf00      	nop
 8007598:	bf00      	nop
 800759a:	e7fd      	b.n	8007598 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800759c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800759e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d00b      	beq.n	80075bc <xQueueSemaphoreTake+0x54>
	__asm volatile
 80075a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075a8:	f383 8811 	msr	BASEPRI, r3
 80075ac:	f3bf 8f6f 	isb	sy
 80075b0:	f3bf 8f4f 	dsb	sy
 80075b4:	61fb      	str	r3, [r7, #28]
}
 80075b6:	bf00      	nop
 80075b8:	bf00      	nop
 80075ba:	e7fd      	b.n	80075b8 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80075bc:	f000 ffec 	bl	8008598 <xTaskGetSchedulerState>
 80075c0:	4603      	mov	r3, r0
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d102      	bne.n	80075cc <xQueueSemaphoreTake+0x64>
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d101      	bne.n	80075d0 <xQueueSemaphoreTake+0x68>
 80075cc:	2301      	movs	r3, #1
 80075ce:	e000      	b.n	80075d2 <xQueueSemaphoreTake+0x6a>
 80075d0:	2300      	movs	r3, #0
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d10b      	bne.n	80075ee <xQueueSemaphoreTake+0x86>
	__asm volatile
 80075d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075da:	f383 8811 	msr	BASEPRI, r3
 80075de:	f3bf 8f6f 	isb	sy
 80075e2:	f3bf 8f4f 	dsb	sy
 80075e6:	61bb      	str	r3, [r7, #24]
}
 80075e8:	bf00      	nop
 80075ea:	bf00      	nop
 80075ec:	e7fd      	b.n	80075ea <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80075ee:	f001 fb2b 	bl	8008c48 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80075f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075f6:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80075f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d024      	beq.n	8007648 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80075fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007600:	1e5a      	subs	r2, r3, #1
 8007602:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007604:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007606:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d104      	bne.n	8007618 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800760e:	f001 f96f 	bl	80088f0 <pvTaskIncrementMutexHeldCount>
 8007612:	4602      	mov	r2, r0
 8007614:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007616:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007618:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800761a:	691b      	ldr	r3, [r3, #16]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d00f      	beq.n	8007640 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007620:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007622:	3310      	adds	r3, #16
 8007624:	4618      	mov	r0, r3
 8007626:	f000 fdf1 	bl	800820c <xTaskRemoveFromEventList>
 800762a:	4603      	mov	r3, r0
 800762c:	2b00      	cmp	r3, #0
 800762e:	d007      	beq.n	8007640 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007630:	4b54      	ldr	r3, [pc, #336]	@ (8007784 <xQueueSemaphoreTake+0x21c>)
 8007632:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007636:	601a      	str	r2, [r3, #0]
 8007638:	f3bf 8f4f 	dsb	sy
 800763c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007640:	f001 fb34 	bl	8008cac <vPortExitCritical>
				return pdPASS;
 8007644:	2301      	movs	r3, #1
 8007646:	e098      	b.n	800777a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d112      	bne.n	8007674 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800764e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007650:	2b00      	cmp	r3, #0
 8007652:	d00b      	beq.n	800766c <xQueueSemaphoreTake+0x104>
	__asm volatile
 8007654:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007658:	f383 8811 	msr	BASEPRI, r3
 800765c:	f3bf 8f6f 	isb	sy
 8007660:	f3bf 8f4f 	dsb	sy
 8007664:	617b      	str	r3, [r7, #20]
}
 8007666:	bf00      	nop
 8007668:	bf00      	nop
 800766a:	e7fd      	b.n	8007668 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800766c:	f001 fb1e 	bl	8008cac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007670:	2300      	movs	r3, #0
 8007672:	e082      	b.n	800777a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007674:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007676:	2b00      	cmp	r3, #0
 8007678:	d106      	bne.n	8007688 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800767a:	f107 030c 	add.w	r3, r7, #12
 800767e:	4618      	mov	r0, r3
 8007680:	f000 fe28 	bl	80082d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007684:	2301      	movs	r3, #1
 8007686:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007688:	f001 fb10 	bl	8008cac <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800768c:	f000 fbce 	bl	8007e2c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007690:	f001 fada 	bl	8008c48 <vPortEnterCritical>
 8007694:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007696:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800769a:	b25b      	sxtb	r3, r3
 800769c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076a0:	d103      	bne.n	80076aa <xQueueSemaphoreTake+0x142>
 80076a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076a4:	2200      	movs	r2, #0
 80076a6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80076aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076ac:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80076b0:	b25b      	sxtb	r3, r3
 80076b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076b6:	d103      	bne.n	80076c0 <xQueueSemaphoreTake+0x158>
 80076b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076ba:	2200      	movs	r2, #0
 80076bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80076c0:	f001 faf4 	bl	8008cac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80076c4:	463a      	mov	r2, r7
 80076c6:	f107 030c 	add.w	r3, r7, #12
 80076ca:	4611      	mov	r1, r2
 80076cc:	4618      	mov	r0, r3
 80076ce:	f000 fe17 	bl	8008300 <xTaskCheckForTimeOut>
 80076d2:	4603      	mov	r3, r0
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d132      	bne.n	800773e <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80076d8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80076da:	f000 f929 	bl	8007930 <prvIsQueueEmpty>
 80076de:	4603      	mov	r3, r0
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d026      	beq.n	8007732 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80076e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d109      	bne.n	8007700 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 80076ec:	f001 faac 	bl	8008c48 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80076f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076f2:	689b      	ldr	r3, [r3, #8]
 80076f4:	4618      	mov	r0, r3
 80076f6:	f000 ff6d 	bl	80085d4 <xTaskPriorityInherit>
 80076fa:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 80076fc:	f001 fad6 	bl	8008cac <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007700:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007702:	3324      	adds	r3, #36	@ 0x24
 8007704:	683a      	ldr	r2, [r7, #0]
 8007706:	4611      	mov	r1, r2
 8007708:	4618      	mov	r0, r3
 800770a:	f000 fd59 	bl	80081c0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800770e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007710:	f000 f8bc 	bl	800788c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007714:	f000 fb98 	bl	8007e48 <xTaskResumeAll>
 8007718:	4603      	mov	r3, r0
 800771a:	2b00      	cmp	r3, #0
 800771c:	f47f af67 	bne.w	80075ee <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8007720:	4b18      	ldr	r3, [pc, #96]	@ (8007784 <xQueueSemaphoreTake+0x21c>)
 8007722:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007726:	601a      	str	r2, [r3, #0]
 8007728:	f3bf 8f4f 	dsb	sy
 800772c:	f3bf 8f6f 	isb	sy
 8007730:	e75d      	b.n	80075ee <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007732:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007734:	f000 f8aa 	bl	800788c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007738:	f000 fb86 	bl	8007e48 <xTaskResumeAll>
 800773c:	e757      	b.n	80075ee <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800773e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007740:	f000 f8a4 	bl	800788c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007744:	f000 fb80 	bl	8007e48 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007748:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800774a:	f000 f8f1 	bl	8007930 <prvIsQueueEmpty>
 800774e:	4603      	mov	r3, r0
 8007750:	2b00      	cmp	r3, #0
 8007752:	f43f af4c 	beq.w	80075ee <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8007756:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007758:	2b00      	cmp	r3, #0
 800775a:	d00d      	beq.n	8007778 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800775c:	f001 fa74 	bl	8008c48 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007760:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007762:	f000 f811 	bl	8007788 <prvGetDisinheritPriorityAfterTimeout>
 8007766:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007768:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800776a:	689b      	ldr	r3, [r3, #8]
 800776c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800776e:	4618      	mov	r0, r3
 8007770:	f001 f82e 	bl	80087d0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007774:	f001 fa9a 	bl	8008cac <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007778:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800777a:	4618      	mov	r0, r3
 800777c:	3738      	adds	r7, #56	@ 0x38
 800777e:	46bd      	mov	sp, r7
 8007780:	bd80      	pop	{r7, pc}
 8007782:	bf00      	nop
 8007784:	e000ed04 	.word	0xe000ed04

08007788 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007788:	b480      	push	{r7}
 800778a:	b085      	sub	sp, #20
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007794:	2b00      	cmp	r3, #0
 8007796:	d006      	beq.n	80077a6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	f1c3 0307 	rsb	r3, r3, #7
 80077a2:	60fb      	str	r3, [r7, #12]
 80077a4:	e001      	b.n	80077aa <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80077a6:	2300      	movs	r3, #0
 80077a8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80077aa:	68fb      	ldr	r3, [r7, #12]
	}
 80077ac:	4618      	mov	r0, r3
 80077ae:	3714      	adds	r7, #20
 80077b0:	46bd      	mov	sp, r7
 80077b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b6:	4770      	bx	lr

080077b8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b086      	sub	sp, #24
 80077bc:	af00      	add	r7, sp, #0
 80077be:	60f8      	str	r0, [r7, #12]
 80077c0:	60b9      	str	r1, [r7, #8]
 80077c2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80077c4:	2300      	movs	r3, #0
 80077c6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077cc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d10d      	bne.n	80077f2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d14d      	bne.n	800787a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	689b      	ldr	r3, [r3, #8]
 80077e2:	4618      	mov	r0, r3
 80077e4:	f000 ff6c 	bl	80086c0 <xTaskPriorityDisinherit>
 80077e8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	2200      	movs	r2, #0
 80077ee:	609a      	str	r2, [r3, #8]
 80077f0:	e043      	b.n	800787a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d119      	bne.n	800782c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	6858      	ldr	r0, [r3, #4]
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007800:	461a      	mov	r2, r3
 8007802:	68b9      	ldr	r1, [r7, #8]
 8007804:	f002 face 	bl	8009da4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	685a      	ldr	r2, [r3, #4]
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007810:	441a      	add	r2, r3
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	685a      	ldr	r2, [r3, #4]
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	689b      	ldr	r3, [r3, #8]
 800781e:	429a      	cmp	r2, r3
 8007820:	d32b      	bcc.n	800787a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	681a      	ldr	r2, [r3, #0]
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	605a      	str	r2, [r3, #4]
 800782a:	e026      	b.n	800787a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	68d8      	ldr	r0, [r3, #12]
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007834:	461a      	mov	r2, r3
 8007836:	68b9      	ldr	r1, [r7, #8]
 8007838:	f002 fab4 	bl	8009da4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	68da      	ldr	r2, [r3, #12]
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007844:	425b      	negs	r3, r3
 8007846:	441a      	add	r2, r3
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	68da      	ldr	r2, [r3, #12]
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	429a      	cmp	r2, r3
 8007856:	d207      	bcs.n	8007868 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	689a      	ldr	r2, [r3, #8]
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007860:	425b      	negs	r3, r3
 8007862:	441a      	add	r2, r3
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2b02      	cmp	r3, #2
 800786c:	d105      	bne.n	800787a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800786e:	693b      	ldr	r3, [r7, #16]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d002      	beq.n	800787a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007874:	693b      	ldr	r3, [r7, #16]
 8007876:	3b01      	subs	r3, #1
 8007878:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800787a:	693b      	ldr	r3, [r7, #16]
 800787c:	1c5a      	adds	r2, r3, #1
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8007882:	697b      	ldr	r3, [r7, #20]
}
 8007884:	4618      	mov	r0, r3
 8007886:	3718      	adds	r7, #24
 8007888:	46bd      	mov	sp, r7
 800788a:	bd80      	pop	{r7, pc}

0800788c <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800788c:	b580      	push	{r7, lr}
 800788e:	b084      	sub	sp, #16
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007894:	f001 f9d8 	bl	8008c48 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800789e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80078a0:	e011      	b.n	80078c6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d012      	beq.n	80078d0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	3324      	adds	r3, #36	@ 0x24
 80078ae:	4618      	mov	r0, r3
 80078b0:	f000 fcac 	bl	800820c <xTaskRemoveFromEventList>
 80078b4:	4603      	mov	r3, r0
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d001      	beq.n	80078be <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80078ba:	f000 fd85 	bl	80083c8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80078be:	7bfb      	ldrb	r3, [r7, #15]
 80078c0:	3b01      	subs	r3, #1
 80078c2:	b2db      	uxtb	r3, r3
 80078c4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80078c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	dce9      	bgt.n	80078a2 <prvUnlockQueue+0x16>
 80078ce:	e000      	b.n	80078d2 <prvUnlockQueue+0x46>
					break;
 80078d0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	22ff      	movs	r2, #255	@ 0xff
 80078d6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80078da:	f001 f9e7 	bl	8008cac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80078de:	f001 f9b3 	bl	8008c48 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80078e8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80078ea:	e011      	b.n	8007910 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	691b      	ldr	r3, [r3, #16]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d012      	beq.n	800791a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	3310      	adds	r3, #16
 80078f8:	4618      	mov	r0, r3
 80078fa:	f000 fc87 	bl	800820c <xTaskRemoveFromEventList>
 80078fe:	4603      	mov	r3, r0
 8007900:	2b00      	cmp	r3, #0
 8007902:	d001      	beq.n	8007908 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007904:	f000 fd60 	bl	80083c8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007908:	7bbb      	ldrb	r3, [r7, #14]
 800790a:	3b01      	subs	r3, #1
 800790c:	b2db      	uxtb	r3, r3
 800790e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007910:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007914:	2b00      	cmp	r3, #0
 8007916:	dce9      	bgt.n	80078ec <prvUnlockQueue+0x60>
 8007918:	e000      	b.n	800791c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800791a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	22ff      	movs	r2, #255	@ 0xff
 8007920:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8007924:	f001 f9c2 	bl	8008cac <vPortExitCritical>
}
 8007928:	bf00      	nop
 800792a:	3710      	adds	r7, #16
 800792c:	46bd      	mov	sp, r7
 800792e:	bd80      	pop	{r7, pc}

08007930 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007930:	b580      	push	{r7, lr}
 8007932:	b084      	sub	sp, #16
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007938:	f001 f986 	bl	8008c48 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007940:	2b00      	cmp	r3, #0
 8007942:	d102      	bne.n	800794a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007944:	2301      	movs	r3, #1
 8007946:	60fb      	str	r3, [r7, #12]
 8007948:	e001      	b.n	800794e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800794a:	2300      	movs	r3, #0
 800794c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800794e:	f001 f9ad 	bl	8008cac <vPortExitCritical>

	return xReturn;
 8007952:	68fb      	ldr	r3, [r7, #12]
}
 8007954:	4618      	mov	r0, r3
 8007956:	3710      	adds	r7, #16
 8007958:	46bd      	mov	sp, r7
 800795a:	bd80      	pop	{r7, pc}

0800795c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800795c:	b580      	push	{r7, lr}
 800795e:	b084      	sub	sp, #16
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007964:	f001 f970 	bl	8008c48 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007970:	429a      	cmp	r2, r3
 8007972:	d102      	bne.n	800797a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007974:	2301      	movs	r3, #1
 8007976:	60fb      	str	r3, [r7, #12]
 8007978:	e001      	b.n	800797e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800797a:	2300      	movs	r3, #0
 800797c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800797e:	f001 f995 	bl	8008cac <vPortExitCritical>

	return xReturn;
 8007982:	68fb      	ldr	r3, [r7, #12]
}
 8007984:	4618      	mov	r0, r3
 8007986:	3710      	adds	r7, #16
 8007988:	46bd      	mov	sp, r7
 800798a:	bd80      	pop	{r7, pc}

0800798c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800798c:	b580      	push	{r7, lr}
 800798e:	b08e      	sub	sp, #56	@ 0x38
 8007990:	af04      	add	r7, sp, #16
 8007992:	60f8      	str	r0, [r7, #12]
 8007994:	60b9      	str	r1, [r7, #8]
 8007996:	607a      	str	r2, [r7, #4]
 8007998:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800799a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800799c:	2b00      	cmp	r3, #0
 800799e:	d10b      	bne.n	80079b8 <xTaskCreateStatic+0x2c>
	__asm volatile
 80079a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079a4:	f383 8811 	msr	BASEPRI, r3
 80079a8:	f3bf 8f6f 	isb	sy
 80079ac:	f3bf 8f4f 	dsb	sy
 80079b0:	623b      	str	r3, [r7, #32]
}
 80079b2:	bf00      	nop
 80079b4:	bf00      	nop
 80079b6:	e7fd      	b.n	80079b4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80079b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d10b      	bne.n	80079d6 <xTaskCreateStatic+0x4a>
	__asm volatile
 80079be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079c2:	f383 8811 	msr	BASEPRI, r3
 80079c6:	f3bf 8f6f 	isb	sy
 80079ca:	f3bf 8f4f 	dsb	sy
 80079ce:	61fb      	str	r3, [r7, #28]
}
 80079d0:	bf00      	nop
 80079d2:	bf00      	nop
 80079d4:	e7fd      	b.n	80079d2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80079d6:	23a0      	movs	r3, #160	@ 0xa0
 80079d8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80079da:	693b      	ldr	r3, [r7, #16]
 80079dc:	2ba0      	cmp	r3, #160	@ 0xa0
 80079de:	d00b      	beq.n	80079f8 <xTaskCreateStatic+0x6c>
	__asm volatile
 80079e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079e4:	f383 8811 	msr	BASEPRI, r3
 80079e8:	f3bf 8f6f 	isb	sy
 80079ec:	f3bf 8f4f 	dsb	sy
 80079f0:	61bb      	str	r3, [r7, #24]
}
 80079f2:	bf00      	nop
 80079f4:	bf00      	nop
 80079f6:	e7fd      	b.n	80079f4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80079f8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80079fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d01e      	beq.n	8007a3e <xTaskCreateStatic+0xb2>
 8007a00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d01b      	beq.n	8007a3e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007a06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a08:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a0c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007a0e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a12:	2202      	movs	r2, #2
 8007a14:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007a18:	2300      	movs	r3, #0
 8007a1a:	9303      	str	r3, [sp, #12]
 8007a1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a1e:	9302      	str	r3, [sp, #8]
 8007a20:	f107 0314 	add.w	r3, r7, #20
 8007a24:	9301      	str	r3, [sp, #4]
 8007a26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a28:	9300      	str	r3, [sp, #0]
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	687a      	ldr	r2, [r7, #4]
 8007a2e:	68b9      	ldr	r1, [r7, #8]
 8007a30:	68f8      	ldr	r0, [r7, #12]
 8007a32:	f000 f851 	bl	8007ad8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007a36:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007a38:	f000 f8ee 	bl	8007c18 <prvAddNewTaskToReadyList>
 8007a3c:	e001      	b.n	8007a42 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8007a3e:	2300      	movs	r3, #0
 8007a40:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007a42:	697b      	ldr	r3, [r7, #20]
	}
 8007a44:	4618      	mov	r0, r3
 8007a46:	3728      	adds	r7, #40	@ 0x28
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	bd80      	pop	{r7, pc}

08007a4c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b08c      	sub	sp, #48	@ 0x30
 8007a50:	af04      	add	r7, sp, #16
 8007a52:	60f8      	str	r0, [r7, #12]
 8007a54:	60b9      	str	r1, [r7, #8]
 8007a56:	603b      	str	r3, [r7, #0]
 8007a58:	4613      	mov	r3, r2
 8007a5a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007a5c:	88fb      	ldrh	r3, [r7, #6]
 8007a5e:	009b      	lsls	r3, r3, #2
 8007a60:	4618      	mov	r0, r3
 8007a62:	f001 fa13 	bl	8008e8c <pvPortMalloc>
 8007a66:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007a68:	697b      	ldr	r3, [r7, #20]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d00e      	beq.n	8007a8c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007a6e:	20a0      	movs	r0, #160	@ 0xa0
 8007a70:	f001 fa0c 	bl	8008e8c <pvPortMalloc>
 8007a74:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007a76:	69fb      	ldr	r3, [r7, #28]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d003      	beq.n	8007a84 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007a7c:	69fb      	ldr	r3, [r7, #28]
 8007a7e:	697a      	ldr	r2, [r7, #20]
 8007a80:	631a      	str	r2, [r3, #48]	@ 0x30
 8007a82:	e005      	b.n	8007a90 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007a84:	6978      	ldr	r0, [r7, #20]
 8007a86:	f001 facf 	bl	8009028 <vPortFree>
 8007a8a:	e001      	b.n	8007a90 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007a8c:	2300      	movs	r3, #0
 8007a8e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007a90:	69fb      	ldr	r3, [r7, #28]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d017      	beq.n	8007ac6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007a96:	69fb      	ldr	r3, [r7, #28]
 8007a98:	2200      	movs	r2, #0
 8007a9a:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007a9e:	88fa      	ldrh	r2, [r7, #6]
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	9303      	str	r3, [sp, #12]
 8007aa4:	69fb      	ldr	r3, [r7, #28]
 8007aa6:	9302      	str	r3, [sp, #8]
 8007aa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007aaa:	9301      	str	r3, [sp, #4]
 8007aac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007aae:	9300      	str	r3, [sp, #0]
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	68b9      	ldr	r1, [r7, #8]
 8007ab4:	68f8      	ldr	r0, [r7, #12]
 8007ab6:	f000 f80f 	bl	8007ad8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007aba:	69f8      	ldr	r0, [r7, #28]
 8007abc:	f000 f8ac 	bl	8007c18 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007ac0:	2301      	movs	r3, #1
 8007ac2:	61bb      	str	r3, [r7, #24]
 8007ac4:	e002      	b.n	8007acc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007ac6:	f04f 33ff 	mov.w	r3, #4294967295
 8007aca:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007acc:	69bb      	ldr	r3, [r7, #24]
	}
 8007ace:	4618      	mov	r0, r3
 8007ad0:	3720      	adds	r7, #32
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	bd80      	pop	{r7, pc}
	...

08007ad8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b088      	sub	sp, #32
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	60f8      	str	r0, [r7, #12]
 8007ae0:	60b9      	str	r1, [r7, #8]
 8007ae2:	607a      	str	r2, [r7, #4]
 8007ae4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007ae6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ae8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007af0:	3b01      	subs	r3, #1
 8007af2:	009b      	lsls	r3, r3, #2
 8007af4:	4413      	add	r3, r2
 8007af6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007af8:	69bb      	ldr	r3, [r7, #24]
 8007afa:	f023 0307 	bic.w	r3, r3, #7
 8007afe:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007b00:	69bb      	ldr	r3, [r7, #24]
 8007b02:	f003 0307 	and.w	r3, r3, #7
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d00b      	beq.n	8007b22 <prvInitialiseNewTask+0x4a>
	__asm volatile
 8007b0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b0e:	f383 8811 	msr	BASEPRI, r3
 8007b12:	f3bf 8f6f 	isb	sy
 8007b16:	f3bf 8f4f 	dsb	sy
 8007b1a:	617b      	str	r3, [r7, #20]
}
 8007b1c:	bf00      	nop
 8007b1e:	bf00      	nop
 8007b20:	e7fd      	b.n	8007b1e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007b22:	68bb      	ldr	r3, [r7, #8]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d01f      	beq.n	8007b68 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007b28:	2300      	movs	r3, #0
 8007b2a:	61fb      	str	r3, [r7, #28]
 8007b2c:	e012      	b.n	8007b54 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007b2e:	68ba      	ldr	r2, [r7, #8]
 8007b30:	69fb      	ldr	r3, [r7, #28]
 8007b32:	4413      	add	r3, r2
 8007b34:	7819      	ldrb	r1, [r3, #0]
 8007b36:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007b38:	69fb      	ldr	r3, [r7, #28]
 8007b3a:	4413      	add	r3, r2
 8007b3c:	3334      	adds	r3, #52	@ 0x34
 8007b3e:	460a      	mov	r2, r1
 8007b40:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007b42:	68ba      	ldr	r2, [r7, #8]
 8007b44:	69fb      	ldr	r3, [r7, #28]
 8007b46:	4413      	add	r3, r2
 8007b48:	781b      	ldrb	r3, [r3, #0]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d006      	beq.n	8007b5c <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007b4e:	69fb      	ldr	r3, [r7, #28]
 8007b50:	3301      	adds	r3, #1
 8007b52:	61fb      	str	r3, [r7, #28]
 8007b54:	69fb      	ldr	r3, [r7, #28]
 8007b56:	2b0f      	cmp	r3, #15
 8007b58:	d9e9      	bls.n	8007b2e <prvInitialiseNewTask+0x56>
 8007b5a:	e000      	b.n	8007b5e <prvInitialiseNewTask+0x86>
			{
				break;
 8007b5c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007b5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b60:	2200      	movs	r2, #0
 8007b62:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007b66:	e003      	b.n	8007b70 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007b68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007b70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b72:	2b06      	cmp	r3, #6
 8007b74:	d901      	bls.n	8007b7a <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007b76:	2306      	movs	r3, #6
 8007b78:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007b7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b7c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007b7e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007b80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b82:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007b84:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007b86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b88:	2200      	movs	r2, #0
 8007b8a:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007b8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b8e:	3304      	adds	r3, #4
 8007b90:	4618      	mov	r0, r3
 8007b92:	f7ff f934 	bl	8006dfe <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007b96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b98:	3318      	adds	r3, #24
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	f7ff f92f 	bl	8006dfe <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007ba0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ba2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007ba4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ba6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ba8:	f1c3 0207 	rsb	r2, r3, #7
 8007bac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bae:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007bb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bb2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007bb4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007bb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bb8:	2200      	movs	r2, #0
 8007bba:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007bbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007bc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bc8:	334c      	adds	r3, #76	@ 0x4c
 8007bca:	224c      	movs	r2, #76	@ 0x4c
 8007bcc:	2100      	movs	r1, #0
 8007bce:	4618      	mov	r0, r3
 8007bd0:	f002 f864 	bl	8009c9c <memset>
 8007bd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bd6:	4a0d      	ldr	r2, [pc, #52]	@ (8007c0c <prvInitialiseNewTask+0x134>)
 8007bd8:	651a      	str	r2, [r3, #80]	@ 0x50
 8007bda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bdc:	4a0c      	ldr	r2, [pc, #48]	@ (8007c10 <prvInitialiseNewTask+0x138>)
 8007bde:	655a      	str	r2, [r3, #84]	@ 0x54
 8007be0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007be2:	4a0c      	ldr	r2, [pc, #48]	@ (8007c14 <prvInitialiseNewTask+0x13c>)
 8007be4:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007be6:	683a      	ldr	r2, [r7, #0]
 8007be8:	68f9      	ldr	r1, [r7, #12]
 8007bea:	69b8      	ldr	r0, [r7, #24]
 8007bec:	f000 fefa 	bl	80089e4 <pxPortInitialiseStack>
 8007bf0:	4602      	mov	r2, r0
 8007bf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bf4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007bf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d002      	beq.n	8007c02 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007bfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007bfe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007c00:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007c02:	bf00      	nop
 8007c04:	3720      	adds	r7, #32
 8007c06:	46bd      	mov	sp, r7
 8007c08:	bd80      	pop	{r7, pc}
 8007c0a:	bf00      	nop
 8007c0c:	20005c48 	.word	0x20005c48
 8007c10:	20005cb0 	.word	0x20005cb0
 8007c14:	20005d18 	.word	0x20005d18

08007c18 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b082      	sub	sp, #8
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007c20:	f001 f812 	bl	8008c48 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007c24:	4b2a      	ldr	r3, [pc, #168]	@ (8007cd0 <prvAddNewTaskToReadyList+0xb8>)
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	3301      	adds	r3, #1
 8007c2a:	4a29      	ldr	r2, [pc, #164]	@ (8007cd0 <prvAddNewTaskToReadyList+0xb8>)
 8007c2c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007c2e:	4b29      	ldr	r3, [pc, #164]	@ (8007cd4 <prvAddNewTaskToReadyList+0xbc>)
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d109      	bne.n	8007c4a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007c36:	4a27      	ldr	r2, [pc, #156]	@ (8007cd4 <prvAddNewTaskToReadyList+0xbc>)
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007c3c:	4b24      	ldr	r3, [pc, #144]	@ (8007cd0 <prvAddNewTaskToReadyList+0xb8>)
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	2b01      	cmp	r3, #1
 8007c42:	d110      	bne.n	8007c66 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007c44:	f000 fbe4 	bl	8008410 <prvInitialiseTaskLists>
 8007c48:	e00d      	b.n	8007c66 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007c4a:	4b23      	ldr	r3, [pc, #140]	@ (8007cd8 <prvAddNewTaskToReadyList+0xc0>)
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d109      	bne.n	8007c66 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007c52:	4b20      	ldr	r3, [pc, #128]	@ (8007cd4 <prvAddNewTaskToReadyList+0xbc>)
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c5c:	429a      	cmp	r2, r3
 8007c5e:	d802      	bhi.n	8007c66 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007c60:	4a1c      	ldr	r2, [pc, #112]	@ (8007cd4 <prvAddNewTaskToReadyList+0xbc>)
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007c66:	4b1d      	ldr	r3, [pc, #116]	@ (8007cdc <prvAddNewTaskToReadyList+0xc4>)
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	3301      	adds	r3, #1
 8007c6c:	4a1b      	ldr	r2, [pc, #108]	@ (8007cdc <prvAddNewTaskToReadyList+0xc4>)
 8007c6e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c74:	2201      	movs	r2, #1
 8007c76:	409a      	lsls	r2, r3
 8007c78:	4b19      	ldr	r3, [pc, #100]	@ (8007ce0 <prvAddNewTaskToReadyList+0xc8>)
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	4313      	orrs	r3, r2
 8007c7e:	4a18      	ldr	r2, [pc, #96]	@ (8007ce0 <prvAddNewTaskToReadyList+0xc8>)
 8007c80:	6013      	str	r3, [r2, #0]
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c86:	4613      	mov	r3, r2
 8007c88:	009b      	lsls	r3, r3, #2
 8007c8a:	4413      	add	r3, r2
 8007c8c:	009b      	lsls	r3, r3, #2
 8007c8e:	4a15      	ldr	r2, [pc, #84]	@ (8007ce4 <prvAddNewTaskToReadyList+0xcc>)
 8007c90:	441a      	add	r2, r3
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	3304      	adds	r3, #4
 8007c96:	4619      	mov	r1, r3
 8007c98:	4610      	mov	r0, r2
 8007c9a:	f7ff f8bd 	bl	8006e18 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007c9e:	f001 f805 	bl	8008cac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007ca2:	4b0d      	ldr	r3, [pc, #52]	@ (8007cd8 <prvAddNewTaskToReadyList+0xc0>)
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d00e      	beq.n	8007cc8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007caa:	4b0a      	ldr	r3, [pc, #40]	@ (8007cd4 <prvAddNewTaskToReadyList+0xbc>)
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cb4:	429a      	cmp	r2, r3
 8007cb6:	d207      	bcs.n	8007cc8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007cb8:	4b0b      	ldr	r3, [pc, #44]	@ (8007ce8 <prvAddNewTaskToReadyList+0xd0>)
 8007cba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007cbe:	601a      	str	r2, [r3, #0]
 8007cc0:	f3bf 8f4f 	dsb	sy
 8007cc4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007cc8:	bf00      	nop
 8007cca:	3708      	adds	r7, #8
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	bd80      	pop	{r7, pc}
 8007cd0:	2000057c 	.word	0x2000057c
 8007cd4:	2000047c 	.word	0x2000047c
 8007cd8:	20000588 	.word	0x20000588
 8007cdc:	20000598 	.word	0x20000598
 8007ce0:	20000584 	.word	0x20000584
 8007ce4:	20000480 	.word	0x20000480
 8007ce8:	e000ed04 	.word	0xe000ed04

08007cec <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b084      	sub	sp, #16
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d018      	beq.n	8007d30 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007cfe:	4b14      	ldr	r3, [pc, #80]	@ (8007d50 <vTaskDelay+0x64>)
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d00b      	beq.n	8007d1e <vTaskDelay+0x32>
	__asm volatile
 8007d06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d0a:	f383 8811 	msr	BASEPRI, r3
 8007d0e:	f3bf 8f6f 	isb	sy
 8007d12:	f3bf 8f4f 	dsb	sy
 8007d16:	60bb      	str	r3, [r7, #8]
}
 8007d18:	bf00      	nop
 8007d1a:	bf00      	nop
 8007d1c:	e7fd      	b.n	8007d1a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007d1e:	f000 f885 	bl	8007e2c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007d22:	2100      	movs	r1, #0
 8007d24:	6878      	ldr	r0, [r7, #4]
 8007d26:	f000 fdf7 	bl	8008918 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007d2a:	f000 f88d 	bl	8007e48 <xTaskResumeAll>
 8007d2e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d107      	bne.n	8007d46 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8007d36:	4b07      	ldr	r3, [pc, #28]	@ (8007d54 <vTaskDelay+0x68>)
 8007d38:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007d3c:	601a      	str	r2, [r3, #0]
 8007d3e:	f3bf 8f4f 	dsb	sy
 8007d42:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007d46:	bf00      	nop
 8007d48:	3710      	adds	r7, #16
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	bd80      	pop	{r7, pc}
 8007d4e:	bf00      	nop
 8007d50:	200005a4 	.word	0x200005a4
 8007d54:	e000ed04 	.word	0xe000ed04

08007d58 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b08a      	sub	sp, #40	@ 0x28
 8007d5c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007d5e:	2300      	movs	r3, #0
 8007d60:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007d62:	2300      	movs	r3, #0
 8007d64:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007d66:	463a      	mov	r2, r7
 8007d68:	1d39      	adds	r1, r7, #4
 8007d6a:	f107 0308 	add.w	r3, r7, #8
 8007d6e:	4618      	mov	r0, r3
 8007d70:	f7f8 fbae 	bl	80004d0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007d74:	6839      	ldr	r1, [r7, #0]
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	68ba      	ldr	r2, [r7, #8]
 8007d7a:	9202      	str	r2, [sp, #8]
 8007d7c:	9301      	str	r3, [sp, #4]
 8007d7e:	2300      	movs	r3, #0
 8007d80:	9300      	str	r3, [sp, #0]
 8007d82:	2300      	movs	r3, #0
 8007d84:	460a      	mov	r2, r1
 8007d86:	4921      	ldr	r1, [pc, #132]	@ (8007e0c <vTaskStartScheduler+0xb4>)
 8007d88:	4821      	ldr	r0, [pc, #132]	@ (8007e10 <vTaskStartScheduler+0xb8>)
 8007d8a:	f7ff fdff 	bl	800798c <xTaskCreateStatic>
 8007d8e:	4603      	mov	r3, r0
 8007d90:	4a20      	ldr	r2, [pc, #128]	@ (8007e14 <vTaskStartScheduler+0xbc>)
 8007d92:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007d94:	4b1f      	ldr	r3, [pc, #124]	@ (8007e14 <vTaskStartScheduler+0xbc>)
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d002      	beq.n	8007da2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007d9c:	2301      	movs	r3, #1
 8007d9e:	617b      	str	r3, [r7, #20]
 8007da0:	e001      	b.n	8007da6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007da2:	2300      	movs	r3, #0
 8007da4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007da6:	697b      	ldr	r3, [r7, #20]
 8007da8:	2b01      	cmp	r3, #1
 8007daa:	d11b      	bne.n	8007de4 <vTaskStartScheduler+0x8c>
	__asm volatile
 8007dac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007db0:	f383 8811 	msr	BASEPRI, r3
 8007db4:	f3bf 8f6f 	isb	sy
 8007db8:	f3bf 8f4f 	dsb	sy
 8007dbc:	613b      	str	r3, [r7, #16]
}
 8007dbe:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007dc0:	4b15      	ldr	r3, [pc, #84]	@ (8007e18 <vTaskStartScheduler+0xc0>)
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	334c      	adds	r3, #76	@ 0x4c
 8007dc6:	4a15      	ldr	r2, [pc, #84]	@ (8007e1c <vTaskStartScheduler+0xc4>)
 8007dc8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007dca:	4b15      	ldr	r3, [pc, #84]	@ (8007e20 <vTaskStartScheduler+0xc8>)
 8007dcc:	f04f 32ff 	mov.w	r2, #4294967295
 8007dd0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007dd2:	4b14      	ldr	r3, [pc, #80]	@ (8007e24 <vTaskStartScheduler+0xcc>)
 8007dd4:	2201      	movs	r2, #1
 8007dd6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007dd8:	4b13      	ldr	r3, [pc, #76]	@ (8007e28 <vTaskStartScheduler+0xd0>)
 8007dda:	2200      	movs	r2, #0
 8007ddc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007dde:	f000 fe8f 	bl	8008b00 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007de2:	e00f      	b.n	8007e04 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007de4:	697b      	ldr	r3, [r7, #20]
 8007de6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dea:	d10b      	bne.n	8007e04 <vTaskStartScheduler+0xac>
	__asm volatile
 8007dec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007df0:	f383 8811 	msr	BASEPRI, r3
 8007df4:	f3bf 8f6f 	isb	sy
 8007df8:	f3bf 8f4f 	dsb	sy
 8007dfc:	60fb      	str	r3, [r7, #12]
}
 8007dfe:	bf00      	nop
 8007e00:	bf00      	nop
 8007e02:	e7fd      	b.n	8007e00 <vTaskStartScheduler+0xa8>
}
 8007e04:	bf00      	nop
 8007e06:	3718      	adds	r7, #24
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	bd80      	pop	{r7, pc}
 8007e0c:	08009f60 	.word	0x08009f60
 8007e10:	080083e1 	.word	0x080083e1
 8007e14:	200005a0 	.word	0x200005a0
 8007e18:	2000047c 	.word	0x2000047c
 8007e1c:	20000100 	.word	0x20000100
 8007e20:	2000059c 	.word	0x2000059c
 8007e24:	20000588 	.word	0x20000588
 8007e28:	20000580 	.word	0x20000580

08007e2c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007e2c:	b480      	push	{r7}
 8007e2e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007e30:	4b04      	ldr	r3, [pc, #16]	@ (8007e44 <vTaskSuspendAll+0x18>)
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	3301      	adds	r3, #1
 8007e36:	4a03      	ldr	r2, [pc, #12]	@ (8007e44 <vTaskSuspendAll+0x18>)
 8007e38:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007e3a:	bf00      	nop
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e42:	4770      	bx	lr
 8007e44:	200005a4 	.word	0x200005a4

08007e48 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b084      	sub	sp, #16
 8007e4c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007e4e:	2300      	movs	r3, #0
 8007e50:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007e52:	2300      	movs	r3, #0
 8007e54:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007e56:	4b42      	ldr	r3, [pc, #264]	@ (8007f60 <xTaskResumeAll+0x118>)
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d10b      	bne.n	8007e76 <xTaskResumeAll+0x2e>
	__asm volatile
 8007e5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e62:	f383 8811 	msr	BASEPRI, r3
 8007e66:	f3bf 8f6f 	isb	sy
 8007e6a:	f3bf 8f4f 	dsb	sy
 8007e6e:	603b      	str	r3, [r7, #0]
}
 8007e70:	bf00      	nop
 8007e72:	bf00      	nop
 8007e74:	e7fd      	b.n	8007e72 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007e76:	f000 fee7 	bl	8008c48 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007e7a:	4b39      	ldr	r3, [pc, #228]	@ (8007f60 <xTaskResumeAll+0x118>)
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	3b01      	subs	r3, #1
 8007e80:	4a37      	ldr	r2, [pc, #220]	@ (8007f60 <xTaskResumeAll+0x118>)
 8007e82:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007e84:	4b36      	ldr	r3, [pc, #216]	@ (8007f60 <xTaskResumeAll+0x118>)
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d161      	bne.n	8007f50 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007e8c:	4b35      	ldr	r3, [pc, #212]	@ (8007f64 <xTaskResumeAll+0x11c>)
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d05d      	beq.n	8007f50 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007e94:	e02e      	b.n	8007ef4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e96:	4b34      	ldr	r3, [pc, #208]	@ (8007f68 <xTaskResumeAll+0x120>)
 8007e98:	68db      	ldr	r3, [r3, #12]
 8007e9a:	68db      	ldr	r3, [r3, #12]
 8007e9c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	3318      	adds	r3, #24
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	f7ff f815 	bl	8006ed2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	3304      	adds	r3, #4
 8007eac:	4618      	mov	r0, r3
 8007eae:	f7ff f810 	bl	8006ed2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007eb6:	2201      	movs	r2, #1
 8007eb8:	409a      	lsls	r2, r3
 8007eba:	4b2c      	ldr	r3, [pc, #176]	@ (8007f6c <xTaskResumeAll+0x124>)
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	4313      	orrs	r3, r2
 8007ec0:	4a2a      	ldr	r2, [pc, #168]	@ (8007f6c <xTaskResumeAll+0x124>)
 8007ec2:	6013      	str	r3, [r2, #0]
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ec8:	4613      	mov	r3, r2
 8007eca:	009b      	lsls	r3, r3, #2
 8007ecc:	4413      	add	r3, r2
 8007ece:	009b      	lsls	r3, r3, #2
 8007ed0:	4a27      	ldr	r2, [pc, #156]	@ (8007f70 <xTaskResumeAll+0x128>)
 8007ed2:	441a      	add	r2, r3
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	3304      	adds	r3, #4
 8007ed8:	4619      	mov	r1, r3
 8007eda:	4610      	mov	r0, r2
 8007edc:	f7fe ff9c 	bl	8006e18 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ee4:	4b23      	ldr	r3, [pc, #140]	@ (8007f74 <xTaskResumeAll+0x12c>)
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007eea:	429a      	cmp	r2, r3
 8007eec:	d302      	bcc.n	8007ef4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007eee:	4b22      	ldr	r3, [pc, #136]	@ (8007f78 <xTaskResumeAll+0x130>)
 8007ef0:	2201      	movs	r2, #1
 8007ef2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007ef4:	4b1c      	ldr	r3, [pc, #112]	@ (8007f68 <xTaskResumeAll+0x120>)
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d1cc      	bne.n	8007e96 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d001      	beq.n	8007f06 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007f02:	f000 fb29 	bl	8008558 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007f06:	4b1d      	ldr	r3, [pc, #116]	@ (8007f7c <xTaskResumeAll+0x134>)
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d010      	beq.n	8007f34 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007f12:	f000 f837 	bl	8007f84 <xTaskIncrementTick>
 8007f16:	4603      	mov	r3, r0
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d002      	beq.n	8007f22 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007f1c:	4b16      	ldr	r3, [pc, #88]	@ (8007f78 <xTaskResumeAll+0x130>)
 8007f1e:	2201      	movs	r2, #1
 8007f20:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	3b01      	subs	r3, #1
 8007f26:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d1f1      	bne.n	8007f12 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8007f2e:	4b13      	ldr	r3, [pc, #76]	@ (8007f7c <xTaskResumeAll+0x134>)
 8007f30:	2200      	movs	r2, #0
 8007f32:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007f34:	4b10      	ldr	r3, [pc, #64]	@ (8007f78 <xTaskResumeAll+0x130>)
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d009      	beq.n	8007f50 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007f3c:	2301      	movs	r3, #1
 8007f3e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007f40:	4b0f      	ldr	r3, [pc, #60]	@ (8007f80 <xTaskResumeAll+0x138>)
 8007f42:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007f46:	601a      	str	r2, [r3, #0]
 8007f48:	f3bf 8f4f 	dsb	sy
 8007f4c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007f50:	f000 feac 	bl	8008cac <vPortExitCritical>

	return xAlreadyYielded;
 8007f54:	68bb      	ldr	r3, [r7, #8]
}
 8007f56:	4618      	mov	r0, r3
 8007f58:	3710      	adds	r7, #16
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	bd80      	pop	{r7, pc}
 8007f5e:	bf00      	nop
 8007f60:	200005a4 	.word	0x200005a4
 8007f64:	2000057c 	.word	0x2000057c
 8007f68:	2000053c 	.word	0x2000053c
 8007f6c:	20000584 	.word	0x20000584
 8007f70:	20000480 	.word	0x20000480
 8007f74:	2000047c 	.word	0x2000047c
 8007f78:	20000590 	.word	0x20000590
 8007f7c:	2000058c 	.word	0x2000058c
 8007f80:	e000ed04 	.word	0xe000ed04

08007f84 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b086      	sub	sp, #24
 8007f88:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007f8e:	4b4f      	ldr	r3, [pc, #316]	@ (80080cc <xTaskIncrementTick+0x148>)
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	f040 808f 	bne.w	80080b6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007f98:	4b4d      	ldr	r3, [pc, #308]	@ (80080d0 <xTaskIncrementTick+0x14c>)
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	3301      	adds	r3, #1
 8007f9e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007fa0:	4a4b      	ldr	r2, [pc, #300]	@ (80080d0 <xTaskIncrementTick+0x14c>)
 8007fa2:	693b      	ldr	r3, [r7, #16]
 8007fa4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007fa6:	693b      	ldr	r3, [r7, #16]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d121      	bne.n	8007ff0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8007fac:	4b49      	ldr	r3, [pc, #292]	@ (80080d4 <xTaskIncrementTick+0x150>)
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d00b      	beq.n	8007fce <xTaskIncrementTick+0x4a>
	__asm volatile
 8007fb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fba:	f383 8811 	msr	BASEPRI, r3
 8007fbe:	f3bf 8f6f 	isb	sy
 8007fc2:	f3bf 8f4f 	dsb	sy
 8007fc6:	603b      	str	r3, [r7, #0]
}
 8007fc8:	bf00      	nop
 8007fca:	bf00      	nop
 8007fcc:	e7fd      	b.n	8007fca <xTaskIncrementTick+0x46>
 8007fce:	4b41      	ldr	r3, [pc, #260]	@ (80080d4 <xTaskIncrementTick+0x150>)
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	60fb      	str	r3, [r7, #12]
 8007fd4:	4b40      	ldr	r3, [pc, #256]	@ (80080d8 <xTaskIncrementTick+0x154>)
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	4a3e      	ldr	r2, [pc, #248]	@ (80080d4 <xTaskIncrementTick+0x150>)
 8007fda:	6013      	str	r3, [r2, #0]
 8007fdc:	4a3e      	ldr	r2, [pc, #248]	@ (80080d8 <xTaskIncrementTick+0x154>)
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	6013      	str	r3, [r2, #0]
 8007fe2:	4b3e      	ldr	r3, [pc, #248]	@ (80080dc <xTaskIncrementTick+0x158>)
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	3301      	adds	r3, #1
 8007fe8:	4a3c      	ldr	r2, [pc, #240]	@ (80080dc <xTaskIncrementTick+0x158>)
 8007fea:	6013      	str	r3, [r2, #0]
 8007fec:	f000 fab4 	bl	8008558 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007ff0:	4b3b      	ldr	r3, [pc, #236]	@ (80080e0 <xTaskIncrementTick+0x15c>)
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	693a      	ldr	r2, [r7, #16]
 8007ff6:	429a      	cmp	r2, r3
 8007ff8:	d348      	bcc.n	800808c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007ffa:	4b36      	ldr	r3, [pc, #216]	@ (80080d4 <xTaskIncrementTick+0x150>)
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d104      	bne.n	800800e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008004:	4b36      	ldr	r3, [pc, #216]	@ (80080e0 <xTaskIncrementTick+0x15c>)
 8008006:	f04f 32ff 	mov.w	r2, #4294967295
 800800a:	601a      	str	r2, [r3, #0]
					break;
 800800c:	e03e      	b.n	800808c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800800e:	4b31      	ldr	r3, [pc, #196]	@ (80080d4 <xTaskIncrementTick+0x150>)
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	68db      	ldr	r3, [r3, #12]
 8008014:	68db      	ldr	r3, [r3, #12]
 8008016:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008018:	68bb      	ldr	r3, [r7, #8]
 800801a:	685b      	ldr	r3, [r3, #4]
 800801c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800801e:	693a      	ldr	r2, [r7, #16]
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	429a      	cmp	r2, r3
 8008024:	d203      	bcs.n	800802e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008026:	4a2e      	ldr	r2, [pc, #184]	@ (80080e0 <xTaskIncrementTick+0x15c>)
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800802c:	e02e      	b.n	800808c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800802e:	68bb      	ldr	r3, [r7, #8]
 8008030:	3304      	adds	r3, #4
 8008032:	4618      	mov	r0, r3
 8008034:	f7fe ff4d 	bl	8006ed2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008038:	68bb      	ldr	r3, [r7, #8]
 800803a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800803c:	2b00      	cmp	r3, #0
 800803e:	d004      	beq.n	800804a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008040:	68bb      	ldr	r3, [r7, #8]
 8008042:	3318      	adds	r3, #24
 8008044:	4618      	mov	r0, r3
 8008046:	f7fe ff44 	bl	8006ed2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800804a:	68bb      	ldr	r3, [r7, #8]
 800804c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800804e:	2201      	movs	r2, #1
 8008050:	409a      	lsls	r2, r3
 8008052:	4b24      	ldr	r3, [pc, #144]	@ (80080e4 <xTaskIncrementTick+0x160>)
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	4313      	orrs	r3, r2
 8008058:	4a22      	ldr	r2, [pc, #136]	@ (80080e4 <xTaskIncrementTick+0x160>)
 800805a:	6013      	str	r3, [r2, #0]
 800805c:	68bb      	ldr	r3, [r7, #8]
 800805e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008060:	4613      	mov	r3, r2
 8008062:	009b      	lsls	r3, r3, #2
 8008064:	4413      	add	r3, r2
 8008066:	009b      	lsls	r3, r3, #2
 8008068:	4a1f      	ldr	r2, [pc, #124]	@ (80080e8 <xTaskIncrementTick+0x164>)
 800806a:	441a      	add	r2, r3
 800806c:	68bb      	ldr	r3, [r7, #8]
 800806e:	3304      	adds	r3, #4
 8008070:	4619      	mov	r1, r3
 8008072:	4610      	mov	r0, r2
 8008074:	f7fe fed0 	bl	8006e18 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008078:	68bb      	ldr	r3, [r7, #8]
 800807a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800807c:	4b1b      	ldr	r3, [pc, #108]	@ (80080ec <xTaskIncrementTick+0x168>)
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008082:	429a      	cmp	r2, r3
 8008084:	d3b9      	bcc.n	8007ffa <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8008086:	2301      	movs	r3, #1
 8008088:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800808a:	e7b6      	b.n	8007ffa <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800808c:	4b17      	ldr	r3, [pc, #92]	@ (80080ec <xTaskIncrementTick+0x168>)
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008092:	4915      	ldr	r1, [pc, #84]	@ (80080e8 <xTaskIncrementTick+0x164>)
 8008094:	4613      	mov	r3, r2
 8008096:	009b      	lsls	r3, r3, #2
 8008098:	4413      	add	r3, r2
 800809a:	009b      	lsls	r3, r3, #2
 800809c:	440b      	add	r3, r1
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	2b01      	cmp	r3, #1
 80080a2:	d901      	bls.n	80080a8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80080a4:	2301      	movs	r3, #1
 80080a6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80080a8:	4b11      	ldr	r3, [pc, #68]	@ (80080f0 <xTaskIncrementTick+0x16c>)
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d007      	beq.n	80080c0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80080b0:	2301      	movs	r3, #1
 80080b2:	617b      	str	r3, [r7, #20]
 80080b4:	e004      	b.n	80080c0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80080b6:	4b0f      	ldr	r3, [pc, #60]	@ (80080f4 <xTaskIncrementTick+0x170>)
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	3301      	adds	r3, #1
 80080bc:	4a0d      	ldr	r2, [pc, #52]	@ (80080f4 <xTaskIncrementTick+0x170>)
 80080be:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80080c0:	697b      	ldr	r3, [r7, #20]
}
 80080c2:	4618      	mov	r0, r3
 80080c4:	3718      	adds	r7, #24
 80080c6:	46bd      	mov	sp, r7
 80080c8:	bd80      	pop	{r7, pc}
 80080ca:	bf00      	nop
 80080cc:	200005a4 	.word	0x200005a4
 80080d0:	20000580 	.word	0x20000580
 80080d4:	20000534 	.word	0x20000534
 80080d8:	20000538 	.word	0x20000538
 80080dc:	20000594 	.word	0x20000594
 80080e0:	2000059c 	.word	0x2000059c
 80080e4:	20000584 	.word	0x20000584
 80080e8:	20000480 	.word	0x20000480
 80080ec:	2000047c 	.word	0x2000047c
 80080f0:	20000590 	.word	0x20000590
 80080f4:	2000058c 	.word	0x2000058c

080080f8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80080f8:	b480      	push	{r7}
 80080fa:	b087      	sub	sp, #28
 80080fc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80080fe:	4b2a      	ldr	r3, [pc, #168]	@ (80081a8 <vTaskSwitchContext+0xb0>)
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d003      	beq.n	800810e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008106:	4b29      	ldr	r3, [pc, #164]	@ (80081ac <vTaskSwitchContext+0xb4>)
 8008108:	2201      	movs	r2, #1
 800810a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800810c:	e045      	b.n	800819a <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 800810e:	4b27      	ldr	r3, [pc, #156]	@ (80081ac <vTaskSwitchContext+0xb4>)
 8008110:	2200      	movs	r2, #0
 8008112:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008114:	4b26      	ldr	r3, [pc, #152]	@ (80081b0 <vTaskSwitchContext+0xb8>)
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	fab3 f383 	clz	r3, r3
 8008120:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8008122:	7afb      	ldrb	r3, [r7, #11]
 8008124:	f1c3 031f 	rsb	r3, r3, #31
 8008128:	617b      	str	r3, [r7, #20]
 800812a:	4922      	ldr	r1, [pc, #136]	@ (80081b4 <vTaskSwitchContext+0xbc>)
 800812c:	697a      	ldr	r2, [r7, #20]
 800812e:	4613      	mov	r3, r2
 8008130:	009b      	lsls	r3, r3, #2
 8008132:	4413      	add	r3, r2
 8008134:	009b      	lsls	r3, r3, #2
 8008136:	440b      	add	r3, r1
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d10b      	bne.n	8008156 <vTaskSwitchContext+0x5e>
	__asm volatile
 800813e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008142:	f383 8811 	msr	BASEPRI, r3
 8008146:	f3bf 8f6f 	isb	sy
 800814a:	f3bf 8f4f 	dsb	sy
 800814e:	607b      	str	r3, [r7, #4]
}
 8008150:	bf00      	nop
 8008152:	bf00      	nop
 8008154:	e7fd      	b.n	8008152 <vTaskSwitchContext+0x5a>
 8008156:	697a      	ldr	r2, [r7, #20]
 8008158:	4613      	mov	r3, r2
 800815a:	009b      	lsls	r3, r3, #2
 800815c:	4413      	add	r3, r2
 800815e:	009b      	lsls	r3, r3, #2
 8008160:	4a14      	ldr	r2, [pc, #80]	@ (80081b4 <vTaskSwitchContext+0xbc>)
 8008162:	4413      	add	r3, r2
 8008164:	613b      	str	r3, [r7, #16]
 8008166:	693b      	ldr	r3, [r7, #16]
 8008168:	685b      	ldr	r3, [r3, #4]
 800816a:	685a      	ldr	r2, [r3, #4]
 800816c:	693b      	ldr	r3, [r7, #16]
 800816e:	605a      	str	r2, [r3, #4]
 8008170:	693b      	ldr	r3, [r7, #16]
 8008172:	685a      	ldr	r2, [r3, #4]
 8008174:	693b      	ldr	r3, [r7, #16]
 8008176:	3308      	adds	r3, #8
 8008178:	429a      	cmp	r2, r3
 800817a:	d104      	bne.n	8008186 <vTaskSwitchContext+0x8e>
 800817c:	693b      	ldr	r3, [r7, #16]
 800817e:	685b      	ldr	r3, [r3, #4]
 8008180:	685a      	ldr	r2, [r3, #4]
 8008182:	693b      	ldr	r3, [r7, #16]
 8008184:	605a      	str	r2, [r3, #4]
 8008186:	693b      	ldr	r3, [r7, #16]
 8008188:	685b      	ldr	r3, [r3, #4]
 800818a:	68db      	ldr	r3, [r3, #12]
 800818c:	4a0a      	ldr	r2, [pc, #40]	@ (80081b8 <vTaskSwitchContext+0xc0>)
 800818e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008190:	4b09      	ldr	r3, [pc, #36]	@ (80081b8 <vTaskSwitchContext+0xc0>)
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	334c      	adds	r3, #76	@ 0x4c
 8008196:	4a09      	ldr	r2, [pc, #36]	@ (80081bc <vTaskSwitchContext+0xc4>)
 8008198:	6013      	str	r3, [r2, #0]
}
 800819a:	bf00      	nop
 800819c:	371c      	adds	r7, #28
 800819e:	46bd      	mov	sp, r7
 80081a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a4:	4770      	bx	lr
 80081a6:	bf00      	nop
 80081a8:	200005a4 	.word	0x200005a4
 80081ac:	20000590 	.word	0x20000590
 80081b0:	20000584 	.word	0x20000584
 80081b4:	20000480 	.word	0x20000480
 80081b8:	2000047c 	.word	0x2000047c
 80081bc:	20000100 	.word	0x20000100

080081c0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80081c0:	b580      	push	{r7, lr}
 80081c2:	b084      	sub	sp, #16
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
 80081c8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d10b      	bne.n	80081e8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80081d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081d4:	f383 8811 	msr	BASEPRI, r3
 80081d8:	f3bf 8f6f 	isb	sy
 80081dc:	f3bf 8f4f 	dsb	sy
 80081e0:	60fb      	str	r3, [r7, #12]
}
 80081e2:	bf00      	nop
 80081e4:	bf00      	nop
 80081e6:	e7fd      	b.n	80081e4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80081e8:	4b07      	ldr	r3, [pc, #28]	@ (8008208 <vTaskPlaceOnEventList+0x48>)
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	3318      	adds	r3, #24
 80081ee:	4619      	mov	r1, r3
 80081f0:	6878      	ldr	r0, [r7, #4]
 80081f2:	f7fe fe35 	bl	8006e60 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80081f6:	2101      	movs	r1, #1
 80081f8:	6838      	ldr	r0, [r7, #0]
 80081fa:	f000 fb8d 	bl	8008918 <prvAddCurrentTaskToDelayedList>
}
 80081fe:	bf00      	nop
 8008200:	3710      	adds	r7, #16
 8008202:	46bd      	mov	sp, r7
 8008204:	bd80      	pop	{r7, pc}
 8008206:	bf00      	nop
 8008208:	2000047c 	.word	0x2000047c

0800820c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800820c:	b580      	push	{r7, lr}
 800820e:	b086      	sub	sp, #24
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	68db      	ldr	r3, [r3, #12]
 8008218:	68db      	ldr	r3, [r3, #12]
 800821a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800821c:	693b      	ldr	r3, [r7, #16]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d10b      	bne.n	800823a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8008222:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008226:	f383 8811 	msr	BASEPRI, r3
 800822a:	f3bf 8f6f 	isb	sy
 800822e:	f3bf 8f4f 	dsb	sy
 8008232:	60fb      	str	r3, [r7, #12]
}
 8008234:	bf00      	nop
 8008236:	bf00      	nop
 8008238:	e7fd      	b.n	8008236 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800823a:	693b      	ldr	r3, [r7, #16]
 800823c:	3318      	adds	r3, #24
 800823e:	4618      	mov	r0, r3
 8008240:	f7fe fe47 	bl	8006ed2 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008244:	4b1d      	ldr	r3, [pc, #116]	@ (80082bc <xTaskRemoveFromEventList+0xb0>)
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d11c      	bne.n	8008286 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800824c:	693b      	ldr	r3, [r7, #16]
 800824e:	3304      	adds	r3, #4
 8008250:	4618      	mov	r0, r3
 8008252:	f7fe fe3e 	bl	8006ed2 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008256:	693b      	ldr	r3, [r7, #16]
 8008258:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800825a:	2201      	movs	r2, #1
 800825c:	409a      	lsls	r2, r3
 800825e:	4b18      	ldr	r3, [pc, #96]	@ (80082c0 <xTaskRemoveFromEventList+0xb4>)
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	4313      	orrs	r3, r2
 8008264:	4a16      	ldr	r2, [pc, #88]	@ (80082c0 <xTaskRemoveFromEventList+0xb4>)
 8008266:	6013      	str	r3, [r2, #0]
 8008268:	693b      	ldr	r3, [r7, #16]
 800826a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800826c:	4613      	mov	r3, r2
 800826e:	009b      	lsls	r3, r3, #2
 8008270:	4413      	add	r3, r2
 8008272:	009b      	lsls	r3, r3, #2
 8008274:	4a13      	ldr	r2, [pc, #76]	@ (80082c4 <xTaskRemoveFromEventList+0xb8>)
 8008276:	441a      	add	r2, r3
 8008278:	693b      	ldr	r3, [r7, #16]
 800827a:	3304      	adds	r3, #4
 800827c:	4619      	mov	r1, r3
 800827e:	4610      	mov	r0, r2
 8008280:	f7fe fdca 	bl	8006e18 <vListInsertEnd>
 8008284:	e005      	b.n	8008292 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008286:	693b      	ldr	r3, [r7, #16]
 8008288:	3318      	adds	r3, #24
 800828a:	4619      	mov	r1, r3
 800828c:	480e      	ldr	r0, [pc, #56]	@ (80082c8 <xTaskRemoveFromEventList+0xbc>)
 800828e:	f7fe fdc3 	bl	8006e18 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008292:	693b      	ldr	r3, [r7, #16]
 8008294:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008296:	4b0d      	ldr	r3, [pc, #52]	@ (80082cc <xTaskRemoveFromEventList+0xc0>)
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800829c:	429a      	cmp	r2, r3
 800829e:	d905      	bls.n	80082ac <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80082a0:	2301      	movs	r3, #1
 80082a2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80082a4:	4b0a      	ldr	r3, [pc, #40]	@ (80082d0 <xTaskRemoveFromEventList+0xc4>)
 80082a6:	2201      	movs	r2, #1
 80082a8:	601a      	str	r2, [r3, #0]
 80082aa:	e001      	b.n	80082b0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80082ac:	2300      	movs	r3, #0
 80082ae:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80082b0:	697b      	ldr	r3, [r7, #20]
}
 80082b2:	4618      	mov	r0, r3
 80082b4:	3718      	adds	r7, #24
 80082b6:	46bd      	mov	sp, r7
 80082b8:	bd80      	pop	{r7, pc}
 80082ba:	bf00      	nop
 80082bc:	200005a4 	.word	0x200005a4
 80082c0:	20000584 	.word	0x20000584
 80082c4:	20000480 	.word	0x20000480
 80082c8:	2000053c 	.word	0x2000053c
 80082cc:	2000047c 	.word	0x2000047c
 80082d0:	20000590 	.word	0x20000590

080082d4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80082d4:	b480      	push	{r7}
 80082d6:	b083      	sub	sp, #12
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80082dc:	4b06      	ldr	r3, [pc, #24]	@ (80082f8 <vTaskInternalSetTimeOutState+0x24>)
 80082de:	681a      	ldr	r2, [r3, #0]
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80082e4:	4b05      	ldr	r3, [pc, #20]	@ (80082fc <vTaskInternalSetTimeOutState+0x28>)
 80082e6:	681a      	ldr	r2, [r3, #0]
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	605a      	str	r2, [r3, #4]
}
 80082ec:	bf00      	nop
 80082ee:	370c      	adds	r7, #12
 80082f0:	46bd      	mov	sp, r7
 80082f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f6:	4770      	bx	lr
 80082f8:	20000594 	.word	0x20000594
 80082fc:	20000580 	.word	0x20000580

08008300 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008300:	b580      	push	{r7, lr}
 8008302:	b088      	sub	sp, #32
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
 8008308:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	2b00      	cmp	r3, #0
 800830e:	d10b      	bne.n	8008328 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8008310:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008314:	f383 8811 	msr	BASEPRI, r3
 8008318:	f3bf 8f6f 	isb	sy
 800831c:	f3bf 8f4f 	dsb	sy
 8008320:	613b      	str	r3, [r7, #16]
}
 8008322:	bf00      	nop
 8008324:	bf00      	nop
 8008326:	e7fd      	b.n	8008324 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008328:	683b      	ldr	r3, [r7, #0]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d10b      	bne.n	8008346 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800832e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008332:	f383 8811 	msr	BASEPRI, r3
 8008336:	f3bf 8f6f 	isb	sy
 800833a:	f3bf 8f4f 	dsb	sy
 800833e:	60fb      	str	r3, [r7, #12]
}
 8008340:	bf00      	nop
 8008342:	bf00      	nop
 8008344:	e7fd      	b.n	8008342 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8008346:	f000 fc7f 	bl	8008c48 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800834a:	4b1d      	ldr	r3, [pc, #116]	@ (80083c0 <xTaskCheckForTimeOut+0xc0>)
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	685b      	ldr	r3, [r3, #4]
 8008354:	69ba      	ldr	r2, [r7, #24]
 8008356:	1ad3      	subs	r3, r2, r3
 8008358:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800835a:	683b      	ldr	r3, [r7, #0]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008362:	d102      	bne.n	800836a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008364:	2300      	movs	r3, #0
 8008366:	61fb      	str	r3, [r7, #28]
 8008368:	e023      	b.n	80083b2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681a      	ldr	r2, [r3, #0]
 800836e:	4b15      	ldr	r3, [pc, #84]	@ (80083c4 <xTaskCheckForTimeOut+0xc4>)
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	429a      	cmp	r2, r3
 8008374:	d007      	beq.n	8008386 <xTaskCheckForTimeOut+0x86>
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	685b      	ldr	r3, [r3, #4]
 800837a:	69ba      	ldr	r2, [r7, #24]
 800837c:	429a      	cmp	r2, r3
 800837e:	d302      	bcc.n	8008386 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008380:	2301      	movs	r3, #1
 8008382:	61fb      	str	r3, [r7, #28]
 8008384:	e015      	b.n	80083b2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008386:	683b      	ldr	r3, [r7, #0]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	697a      	ldr	r2, [r7, #20]
 800838c:	429a      	cmp	r2, r3
 800838e:	d20b      	bcs.n	80083a8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	681a      	ldr	r2, [r3, #0]
 8008394:	697b      	ldr	r3, [r7, #20]
 8008396:	1ad2      	subs	r2, r2, r3
 8008398:	683b      	ldr	r3, [r7, #0]
 800839a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800839c:	6878      	ldr	r0, [r7, #4]
 800839e:	f7ff ff99 	bl	80082d4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80083a2:	2300      	movs	r3, #0
 80083a4:	61fb      	str	r3, [r7, #28]
 80083a6:	e004      	b.n	80083b2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80083a8:	683b      	ldr	r3, [r7, #0]
 80083aa:	2200      	movs	r2, #0
 80083ac:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80083ae:	2301      	movs	r3, #1
 80083b0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80083b2:	f000 fc7b 	bl	8008cac <vPortExitCritical>

	return xReturn;
 80083b6:	69fb      	ldr	r3, [r7, #28]
}
 80083b8:	4618      	mov	r0, r3
 80083ba:	3720      	adds	r7, #32
 80083bc:	46bd      	mov	sp, r7
 80083be:	bd80      	pop	{r7, pc}
 80083c0:	20000580 	.word	0x20000580
 80083c4:	20000594 	.word	0x20000594

080083c8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80083c8:	b480      	push	{r7}
 80083ca:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80083cc:	4b03      	ldr	r3, [pc, #12]	@ (80083dc <vTaskMissedYield+0x14>)
 80083ce:	2201      	movs	r2, #1
 80083d0:	601a      	str	r2, [r3, #0]
}
 80083d2:	bf00      	nop
 80083d4:	46bd      	mov	sp, r7
 80083d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083da:	4770      	bx	lr
 80083dc:	20000590 	.word	0x20000590

080083e0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b082      	sub	sp, #8
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80083e8:	f000 f852 	bl	8008490 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80083ec:	4b06      	ldr	r3, [pc, #24]	@ (8008408 <prvIdleTask+0x28>)
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	2b01      	cmp	r3, #1
 80083f2:	d9f9      	bls.n	80083e8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80083f4:	4b05      	ldr	r3, [pc, #20]	@ (800840c <prvIdleTask+0x2c>)
 80083f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80083fa:	601a      	str	r2, [r3, #0]
 80083fc:	f3bf 8f4f 	dsb	sy
 8008400:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008404:	e7f0      	b.n	80083e8 <prvIdleTask+0x8>
 8008406:	bf00      	nop
 8008408:	20000480 	.word	0x20000480
 800840c:	e000ed04 	.word	0xe000ed04

08008410 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008410:	b580      	push	{r7, lr}
 8008412:	b082      	sub	sp, #8
 8008414:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008416:	2300      	movs	r3, #0
 8008418:	607b      	str	r3, [r7, #4]
 800841a:	e00c      	b.n	8008436 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800841c:	687a      	ldr	r2, [r7, #4]
 800841e:	4613      	mov	r3, r2
 8008420:	009b      	lsls	r3, r3, #2
 8008422:	4413      	add	r3, r2
 8008424:	009b      	lsls	r3, r3, #2
 8008426:	4a12      	ldr	r2, [pc, #72]	@ (8008470 <prvInitialiseTaskLists+0x60>)
 8008428:	4413      	add	r3, r2
 800842a:	4618      	mov	r0, r3
 800842c:	f7fe fcc7 	bl	8006dbe <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	3301      	adds	r3, #1
 8008434:	607b      	str	r3, [r7, #4]
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	2b06      	cmp	r3, #6
 800843a:	d9ef      	bls.n	800841c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800843c:	480d      	ldr	r0, [pc, #52]	@ (8008474 <prvInitialiseTaskLists+0x64>)
 800843e:	f7fe fcbe 	bl	8006dbe <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008442:	480d      	ldr	r0, [pc, #52]	@ (8008478 <prvInitialiseTaskLists+0x68>)
 8008444:	f7fe fcbb 	bl	8006dbe <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008448:	480c      	ldr	r0, [pc, #48]	@ (800847c <prvInitialiseTaskLists+0x6c>)
 800844a:	f7fe fcb8 	bl	8006dbe <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800844e:	480c      	ldr	r0, [pc, #48]	@ (8008480 <prvInitialiseTaskLists+0x70>)
 8008450:	f7fe fcb5 	bl	8006dbe <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008454:	480b      	ldr	r0, [pc, #44]	@ (8008484 <prvInitialiseTaskLists+0x74>)
 8008456:	f7fe fcb2 	bl	8006dbe <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800845a:	4b0b      	ldr	r3, [pc, #44]	@ (8008488 <prvInitialiseTaskLists+0x78>)
 800845c:	4a05      	ldr	r2, [pc, #20]	@ (8008474 <prvInitialiseTaskLists+0x64>)
 800845e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008460:	4b0a      	ldr	r3, [pc, #40]	@ (800848c <prvInitialiseTaskLists+0x7c>)
 8008462:	4a05      	ldr	r2, [pc, #20]	@ (8008478 <prvInitialiseTaskLists+0x68>)
 8008464:	601a      	str	r2, [r3, #0]
}
 8008466:	bf00      	nop
 8008468:	3708      	adds	r7, #8
 800846a:	46bd      	mov	sp, r7
 800846c:	bd80      	pop	{r7, pc}
 800846e:	bf00      	nop
 8008470:	20000480 	.word	0x20000480
 8008474:	2000050c 	.word	0x2000050c
 8008478:	20000520 	.word	0x20000520
 800847c:	2000053c 	.word	0x2000053c
 8008480:	20000550 	.word	0x20000550
 8008484:	20000568 	.word	0x20000568
 8008488:	20000534 	.word	0x20000534
 800848c:	20000538 	.word	0x20000538

08008490 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008490:	b580      	push	{r7, lr}
 8008492:	b082      	sub	sp, #8
 8008494:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008496:	e019      	b.n	80084cc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008498:	f000 fbd6 	bl	8008c48 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800849c:	4b10      	ldr	r3, [pc, #64]	@ (80084e0 <prvCheckTasksWaitingTermination+0x50>)
 800849e:	68db      	ldr	r3, [r3, #12]
 80084a0:	68db      	ldr	r3, [r3, #12]
 80084a2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	3304      	adds	r3, #4
 80084a8:	4618      	mov	r0, r3
 80084aa:	f7fe fd12 	bl	8006ed2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80084ae:	4b0d      	ldr	r3, [pc, #52]	@ (80084e4 <prvCheckTasksWaitingTermination+0x54>)
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	3b01      	subs	r3, #1
 80084b4:	4a0b      	ldr	r2, [pc, #44]	@ (80084e4 <prvCheckTasksWaitingTermination+0x54>)
 80084b6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80084b8:	4b0b      	ldr	r3, [pc, #44]	@ (80084e8 <prvCheckTasksWaitingTermination+0x58>)
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	3b01      	subs	r3, #1
 80084be:	4a0a      	ldr	r2, [pc, #40]	@ (80084e8 <prvCheckTasksWaitingTermination+0x58>)
 80084c0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80084c2:	f000 fbf3 	bl	8008cac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80084c6:	6878      	ldr	r0, [r7, #4]
 80084c8:	f000 f810 	bl	80084ec <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80084cc:	4b06      	ldr	r3, [pc, #24]	@ (80084e8 <prvCheckTasksWaitingTermination+0x58>)
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d1e1      	bne.n	8008498 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80084d4:	bf00      	nop
 80084d6:	bf00      	nop
 80084d8:	3708      	adds	r7, #8
 80084da:	46bd      	mov	sp, r7
 80084dc:	bd80      	pop	{r7, pc}
 80084de:	bf00      	nop
 80084e0:	20000550 	.word	0x20000550
 80084e4:	2000057c 	.word	0x2000057c
 80084e8:	20000564 	.word	0x20000564

080084ec <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b084      	sub	sp, #16
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	334c      	adds	r3, #76	@ 0x4c
 80084f8:	4618      	mov	r0, r3
 80084fa:	f001 fbd7 	bl	8009cac <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8008504:	2b00      	cmp	r3, #0
 8008506:	d108      	bne.n	800851a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800850c:	4618      	mov	r0, r3
 800850e:	f000 fd8b 	bl	8009028 <vPortFree>
				vPortFree( pxTCB );
 8008512:	6878      	ldr	r0, [r7, #4]
 8008514:	f000 fd88 	bl	8009028 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008518:	e019      	b.n	800854e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8008520:	2b01      	cmp	r3, #1
 8008522:	d103      	bne.n	800852c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008524:	6878      	ldr	r0, [r7, #4]
 8008526:	f000 fd7f 	bl	8009028 <vPortFree>
	}
 800852a:	e010      	b.n	800854e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8008532:	2b02      	cmp	r3, #2
 8008534:	d00b      	beq.n	800854e <prvDeleteTCB+0x62>
	__asm volatile
 8008536:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800853a:	f383 8811 	msr	BASEPRI, r3
 800853e:	f3bf 8f6f 	isb	sy
 8008542:	f3bf 8f4f 	dsb	sy
 8008546:	60fb      	str	r3, [r7, #12]
}
 8008548:	bf00      	nop
 800854a:	bf00      	nop
 800854c:	e7fd      	b.n	800854a <prvDeleteTCB+0x5e>
	}
 800854e:	bf00      	nop
 8008550:	3710      	adds	r7, #16
 8008552:	46bd      	mov	sp, r7
 8008554:	bd80      	pop	{r7, pc}
	...

08008558 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008558:	b480      	push	{r7}
 800855a:	b083      	sub	sp, #12
 800855c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800855e:	4b0c      	ldr	r3, [pc, #48]	@ (8008590 <prvResetNextTaskUnblockTime+0x38>)
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d104      	bne.n	8008572 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008568:	4b0a      	ldr	r3, [pc, #40]	@ (8008594 <prvResetNextTaskUnblockTime+0x3c>)
 800856a:	f04f 32ff 	mov.w	r2, #4294967295
 800856e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008570:	e008      	b.n	8008584 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008572:	4b07      	ldr	r3, [pc, #28]	@ (8008590 <prvResetNextTaskUnblockTime+0x38>)
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	68db      	ldr	r3, [r3, #12]
 8008578:	68db      	ldr	r3, [r3, #12]
 800857a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	685b      	ldr	r3, [r3, #4]
 8008580:	4a04      	ldr	r2, [pc, #16]	@ (8008594 <prvResetNextTaskUnblockTime+0x3c>)
 8008582:	6013      	str	r3, [r2, #0]
}
 8008584:	bf00      	nop
 8008586:	370c      	adds	r7, #12
 8008588:	46bd      	mov	sp, r7
 800858a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858e:	4770      	bx	lr
 8008590:	20000534 	.word	0x20000534
 8008594:	2000059c 	.word	0x2000059c

08008598 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008598:	b480      	push	{r7}
 800859a:	b083      	sub	sp, #12
 800859c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800859e:	4b0b      	ldr	r3, [pc, #44]	@ (80085cc <xTaskGetSchedulerState+0x34>)
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d102      	bne.n	80085ac <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80085a6:	2301      	movs	r3, #1
 80085a8:	607b      	str	r3, [r7, #4]
 80085aa:	e008      	b.n	80085be <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80085ac:	4b08      	ldr	r3, [pc, #32]	@ (80085d0 <xTaskGetSchedulerState+0x38>)
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d102      	bne.n	80085ba <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80085b4:	2302      	movs	r3, #2
 80085b6:	607b      	str	r3, [r7, #4]
 80085b8:	e001      	b.n	80085be <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80085ba:	2300      	movs	r3, #0
 80085bc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80085be:	687b      	ldr	r3, [r7, #4]
	}
 80085c0:	4618      	mov	r0, r3
 80085c2:	370c      	adds	r7, #12
 80085c4:	46bd      	mov	sp, r7
 80085c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ca:	4770      	bx	lr
 80085cc:	20000588 	.word	0x20000588
 80085d0:	200005a4 	.word	0x200005a4

080085d4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b084      	sub	sp, #16
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80085e0:	2300      	movs	r3, #0
 80085e2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d05e      	beq.n	80086a8 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80085ea:	68bb      	ldr	r3, [r7, #8]
 80085ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80085ee:	4b31      	ldr	r3, [pc, #196]	@ (80086b4 <xTaskPriorityInherit+0xe0>)
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085f4:	429a      	cmp	r2, r3
 80085f6:	d24e      	bcs.n	8008696 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80085f8:	68bb      	ldr	r3, [r7, #8]
 80085fa:	699b      	ldr	r3, [r3, #24]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	db06      	blt.n	800860e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008600:	4b2c      	ldr	r3, [pc, #176]	@ (80086b4 <xTaskPriorityInherit+0xe0>)
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008606:	f1c3 0207 	rsb	r2, r3, #7
 800860a:	68bb      	ldr	r3, [r7, #8]
 800860c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800860e:	68bb      	ldr	r3, [r7, #8]
 8008610:	6959      	ldr	r1, [r3, #20]
 8008612:	68bb      	ldr	r3, [r7, #8]
 8008614:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008616:	4613      	mov	r3, r2
 8008618:	009b      	lsls	r3, r3, #2
 800861a:	4413      	add	r3, r2
 800861c:	009b      	lsls	r3, r3, #2
 800861e:	4a26      	ldr	r2, [pc, #152]	@ (80086b8 <xTaskPriorityInherit+0xe4>)
 8008620:	4413      	add	r3, r2
 8008622:	4299      	cmp	r1, r3
 8008624:	d12f      	bne.n	8008686 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008626:	68bb      	ldr	r3, [r7, #8]
 8008628:	3304      	adds	r3, #4
 800862a:	4618      	mov	r0, r3
 800862c:	f7fe fc51 	bl	8006ed2 <uxListRemove>
 8008630:	4603      	mov	r3, r0
 8008632:	2b00      	cmp	r3, #0
 8008634:	d10a      	bne.n	800864c <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8008636:	68bb      	ldr	r3, [r7, #8]
 8008638:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800863a:	2201      	movs	r2, #1
 800863c:	fa02 f303 	lsl.w	r3, r2, r3
 8008640:	43da      	mvns	r2, r3
 8008642:	4b1e      	ldr	r3, [pc, #120]	@ (80086bc <xTaskPriorityInherit+0xe8>)
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	4013      	ands	r3, r2
 8008648:	4a1c      	ldr	r2, [pc, #112]	@ (80086bc <xTaskPriorityInherit+0xe8>)
 800864a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800864c:	4b19      	ldr	r3, [pc, #100]	@ (80086b4 <xTaskPriorityInherit+0xe0>)
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008652:	68bb      	ldr	r3, [r7, #8]
 8008654:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008656:	68bb      	ldr	r3, [r7, #8]
 8008658:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800865a:	2201      	movs	r2, #1
 800865c:	409a      	lsls	r2, r3
 800865e:	4b17      	ldr	r3, [pc, #92]	@ (80086bc <xTaskPriorityInherit+0xe8>)
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	4313      	orrs	r3, r2
 8008664:	4a15      	ldr	r2, [pc, #84]	@ (80086bc <xTaskPriorityInherit+0xe8>)
 8008666:	6013      	str	r3, [r2, #0]
 8008668:	68bb      	ldr	r3, [r7, #8]
 800866a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800866c:	4613      	mov	r3, r2
 800866e:	009b      	lsls	r3, r3, #2
 8008670:	4413      	add	r3, r2
 8008672:	009b      	lsls	r3, r3, #2
 8008674:	4a10      	ldr	r2, [pc, #64]	@ (80086b8 <xTaskPriorityInherit+0xe4>)
 8008676:	441a      	add	r2, r3
 8008678:	68bb      	ldr	r3, [r7, #8]
 800867a:	3304      	adds	r3, #4
 800867c:	4619      	mov	r1, r3
 800867e:	4610      	mov	r0, r2
 8008680:	f7fe fbca 	bl	8006e18 <vListInsertEnd>
 8008684:	e004      	b.n	8008690 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008686:	4b0b      	ldr	r3, [pc, #44]	@ (80086b4 <xTaskPriorityInherit+0xe0>)
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800868c:	68bb      	ldr	r3, [r7, #8]
 800868e:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008690:	2301      	movs	r3, #1
 8008692:	60fb      	str	r3, [r7, #12]
 8008694:	e008      	b.n	80086a8 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008696:	68bb      	ldr	r3, [r7, #8]
 8008698:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800869a:	4b06      	ldr	r3, [pc, #24]	@ (80086b4 <xTaskPriorityInherit+0xe0>)
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086a0:	429a      	cmp	r2, r3
 80086a2:	d201      	bcs.n	80086a8 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80086a4:	2301      	movs	r3, #1
 80086a6:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80086a8:	68fb      	ldr	r3, [r7, #12]
	}
 80086aa:	4618      	mov	r0, r3
 80086ac:	3710      	adds	r7, #16
 80086ae:	46bd      	mov	sp, r7
 80086b0:	bd80      	pop	{r7, pc}
 80086b2:	bf00      	nop
 80086b4:	2000047c 	.word	0x2000047c
 80086b8:	20000480 	.word	0x20000480
 80086bc:	20000584 	.word	0x20000584

080086c0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b086      	sub	sp, #24
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80086cc:	2300      	movs	r3, #0
 80086ce:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d070      	beq.n	80087b8 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80086d6:	4b3b      	ldr	r3, [pc, #236]	@ (80087c4 <xTaskPriorityDisinherit+0x104>)
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	693a      	ldr	r2, [r7, #16]
 80086dc:	429a      	cmp	r2, r3
 80086de:	d00b      	beq.n	80086f8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80086e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086e4:	f383 8811 	msr	BASEPRI, r3
 80086e8:	f3bf 8f6f 	isb	sy
 80086ec:	f3bf 8f4f 	dsb	sy
 80086f0:	60fb      	str	r3, [r7, #12]
}
 80086f2:	bf00      	nop
 80086f4:	bf00      	nop
 80086f6:	e7fd      	b.n	80086f4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80086f8:	693b      	ldr	r3, [r7, #16]
 80086fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d10b      	bne.n	8008718 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8008700:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008704:	f383 8811 	msr	BASEPRI, r3
 8008708:	f3bf 8f6f 	isb	sy
 800870c:	f3bf 8f4f 	dsb	sy
 8008710:	60bb      	str	r3, [r7, #8]
}
 8008712:	bf00      	nop
 8008714:	bf00      	nop
 8008716:	e7fd      	b.n	8008714 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8008718:	693b      	ldr	r3, [r7, #16]
 800871a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800871c:	1e5a      	subs	r2, r3, #1
 800871e:	693b      	ldr	r3, [r7, #16]
 8008720:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008722:	693b      	ldr	r3, [r7, #16]
 8008724:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008726:	693b      	ldr	r3, [r7, #16]
 8008728:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800872a:	429a      	cmp	r2, r3
 800872c:	d044      	beq.n	80087b8 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800872e:	693b      	ldr	r3, [r7, #16]
 8008730:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008732:	2b00      	cmp	r3, #0
 8008734:	d140      	bne.n	80087b8 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008736:	693b      	ldr	r3, [r7, #16]
 8008738:	3304      	adds	r3, #4
 800873a:	4618      	mov	r0, r3
 800873c:	f7fe fbc9 	bl	8006ed2 <uxListRemove>
 8008740:	4603      	mov	r3, r0
 8008742:	2b00      	cmp	r3, #0
 8008744:	d115      	bne.n	8008772 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008746:	693b      	ldr	r3, [r7, #16]
 8008748:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800874a:	491f      	ldr	r1, [pc, #124]	@ (80087c8 <xTaskPriorityDisinherit+0x108>)
 800874c:	4613      	mov	r3, r2
 800874e:	009b      	lsls	r3, r3, #2
 8008750:	4413      	add	r3, r2
 8008752:	009b      	lsls	r3, r3, #2
 8008754:	440b      	add	r3, r1
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	2b00      	cmp	r3, #0
 800875a:	d10a      	bne.n	8008772 <xTaskPriorityDisinherit+0xb2>
 800875c:	693b      	ldr	r3, [r7, #16]
 800875e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008760:	2201      	movs	r2, #1
 8008762:	fa02 f303 	lsl.w	r3, r2, r3
 8008766:	43da      	mvns	r2, r3
 8008768:	4b18      	ldr	r3, [pc, #96]	@ (80087cc <xTaskPriorityDisinherit+0x10c>)
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	4013      	ands	r3, r2
 800876e:	4a17      	ldr	r2, [pc, #92]	@ (80087cc <xTaskPriorityDisinherit+0x10c>)
 8008770:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008772:	693b      	ldr	r3, [r7, #16]
 8008774:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008776:	693b      	ldr	r3, [r7, #16]
 8008778:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800877a:	693b      	ldr	r3, [r7, #16]
 800877c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800877e:	f1c3 0207 	rsb	r2, r3, #7
 8008782:	693b      	ldr	r3, [r7, #16]
 8008784:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008786:	693b      	ldr	r3, [r7, #16]
 8008788:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800878a:	2201      	movs	r2, #1
 800878c:	409a      	lsls	r2, r3
 800878e:	4b0f      	ldr	r3, [pc, #60]	@ (80087cc <xTaskPriorityDisinherit+0x10c>)
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	4313      	orrs	r3, r2
 8008794:	4a0d      	ldr	r2, [pc, #52]	@ (80087cc <xTaskPriorityDisinherit+0x10c>)
 8008796:	6013      	str	r3, [r2, #0]
 8008798:	693b      	ldr	r3, [r7, #16]
 800879a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800879c:	4613      	mov	r3, r2
 800879e:	009b      	lsls	r3, r3, #2
 80087a0:	4413      	add	r3, r2
 80087a2:	009b      	lsls	r3, r3, #2
 80087a4:	4a08      	ldr	r2, [pc, #32]	@ (80087c8 <xTaskPriorityDisinherit+0x108>)
 80087a6:	441a      	add	r2, r3
 80087a8:	693b      	ldr	r3, [r7, #16]
 80087aa:	3304      	adds	r3, #4
 80087ac:	4619      	mov	r1, r3
 80087ae:	4610      	mov	r0, r2
 80087b0:	f7fe fb32 	bl	8006e18 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80087b4:	2301      	movs	r3, #1
 80087b6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80087b8:	697b      	ldr	r3, [r7, #20]
	}
 80087ba:	4618      	mov	r0, r3
 80087bc:	3718      	adds	r7, #24
 80087be:	46bd      	mov	sp, r7
 80087c0:	bd80      	pop	{r7, pc}
 80087c2:	bf00      	nop
 80087c4:	2000047c 	.word	0x2000047c
 80087c8:	20000480 	.word	0x20000480
 80087cc:	20000584 	.word	0x20000584

080087d0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b088      	sub	sp, #32
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
 80087d8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80087de:	2301      	movs	r3, #1
 80087e0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d079      	beq.n	80088dc <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80087e8:	69bb      	ldr	r3, [r7, #24]
 80087ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d10b      	bne.n	8008808 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 80087f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087f4:	f383 8811 	msr	BASEPRI, r3
 80087f8:	f3bf 8f6f 	isb	sy
 80087fc:	f3bf 8f4f 	dsb	sy
 8008800:	60fb      	str	r3, [r7, #12]
}
 8008802:	bf00      	nop
 8008804:	bf00      	nop
 8008806:	e7fd      	b.n	8008804 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008808:	69bb      	ldr	r3, [r7, #24]
 800880a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800880c:	683a      	ldr	r2, [r7, #0]
 800880e:	429a      	cmp	r2, r3
 8008810:	d902      	bls.n	8008818 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008812:	683b      	ldr	r3, [r7, #0]
 8008814:	61fb      	str	r3, [r7, #28]
 8008816:	e002      	b.n	800881e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008818:	69bb      	ldr	r3, [r7, #24]
 800881a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800881c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800881e:	69bb      	ldr	r3, [r7, #24]
 8008820:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008822:	69fa      	ldr	r2, [r7, #28]
 8008824:	429a      	cmp	r2, r3
 8008826:	d059      	beq.n	80088dc <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008828:	69bb      	ldr	r3, [r7, #24]
 800882a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800882c:	697a      	ldr	r2, [r7, #20]
 800882e:	429a      	cmp	r2, r3
 8008830:	d154      	bne.n	80088dc <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008832:	4b2c      	ldr	r3, [pc, #176]	@ (80088e4 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	69ba      	ldr	r2, [r7, #24]
 8008838:	429a      	cmp	r2, r3
 800883a:	d10b      	bne.n	8008854 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800883c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008840:	f383 8811 	msr	BASEPRI, r3
 8008844:	f3bf 8f6f 	isb	sy
 8008848:	f3bf 8f4f 	dsb	sy
 800884c:	60bb      	str	r3, [r7, #8]
}
 800884e:	bf00      	nop
 8008850:	bf00      	nop
 8008852:	e7fd      	b.n	8008850 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008854:	69bb      	ldr	r3, [r7, #24]
 8008856:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008858:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800885a:	69bb      	ldr	r3, [r7, #24]
 800885c:	69fa      	ldr	r2, [r7, #28]
 800885e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008860:	69bb      	ldr	r3, [r7, #24]
 8008862:	699b      	ldr	r3, [r3, #24]
 8008864:	2b00      	cmp	r3, #0
 8008866:	db04      	blt.n	8008872 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008868:	69fb      	ldr	r3, [r7, #28]
 800886a:	f1c3 0207 	rsb	r2, r3, #7
 800886e:	69bb      	ldr	r3, [r7, #24]
 8008870:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008872:	69bb      	ldr	r3, [r7, #24]
 8008874:	6959      	ldr	r1, [r3, #20]
 8008876:	693a      	ldr	r2, [r7, #16]
 8008878:	4613      	mov	r3, r2
 800887a:	009b      	lsls	r3, r3, #2
 800887c:	4413      	add	r3, r2
 800887e:	009b      	lsls	r3, r3, #2
 8008880:	4a19      	ldr	r2, [pc, #100]	@ (80088e8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8008882:	4413      	add	r3, r2
 8008884:	4299      	cmp	r1, r3
 8008886:	d129      	bne.n	80088dc <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008888:	69bb      	ldr	r3, [r7, #24]
 800888a:	3304      	adds	r3, #4
 800888c:	4618      	mov	r0, r3
 800888e:	f7fe fb20 	bl	8006ed2 <uxListRemove>
 8008892:	4603      	mov	r3, r0
 8008894:	2b00      	cmp	r3, #0
 8008896:	d10a      	bne.n	80088ae <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8008898:	69bb      	ldr	r3, [r7, #24]
 800889a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800889c:	2201      	movs	r2, #1
 800889e:	fa02 f303 	lsl.w	r3, r2, r3
 80088a2:	43da      	mvns	r2, r3
 80088a4:	4b11      	ldr	r3, [pc, #68]	@ (80088ec <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	4013      	ands	r3, r2
 80088aa:	4a10      	ldr	r2, [pc, #64]	@ (80088ec <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80088ac:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80088ae:	69bb      	ldr	r3, [r7, #24]
 80088b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088b2:	2201      	movs	r2, #1
 80088b4:	409a      	lsls	r2, r3
 80088b6:	4b0d      	ldr	r3, [pc, #52]	@ (80088ec <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	4313      	orrs	r3, r2
 80088bc:	4a0b      	ldr	r2, [pc, #44]	@ (80088ec <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80088be:	6013      	str	r3, [r2, #0]
 80088c0:	69bb      	ldr	r3, [r7, #24]
 80088c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80088c4:	4613      	mov	r3, r2
 80088c6:	009b      	lsls	r3, r3, #2
 80088c8:	4413      	add	r3, r2
 80088ca:	009b      	lsls	r3, r3, #2
 80088cc:	4a06      	ldr	r2, [pc, #24]	@ (80088e8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80088ce:	441a      	add	r2, r3
 80088d0:	69bb      	ldr	r3, [r7, #24]
 80088d2:	3304      	adds	r3, #4
 80088d4:	4619      	mov	r1, r3
 80088d6:	4610      	mov	r0, r2
 80088d8:	f7fe fa9e 	bl	8006e18 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80088dc:	bf00      	nop
 80088de:	3720      	adds	r7, #32
 80088e0:	46bd      	mov	sp, r7
 80088e2:	bd80      	pop	{r7, pc}
 80088e4:	2000047c 	.word	0x2000047c
 80088e8:	20000480 	.word	0x20000480
 80088ec:	20000584 	.word	0x20000584

080088f0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80088f0:	b480      	push	{r7}
 80088f2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80088f4:	4b07      	ldr	r3, [pc, #28]	@ (8008914 <pvTaskIncrementMutexHeldCount+0x24>)
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d004      	beq.n	8008906 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80088fc:	4b05      	ldr	r3, [pc, #20]	@ (8008914 <pvTaskIncrementMutexHeldCount+0x24>)
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008902:	3201      	adds	r2, #1
 8008904:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 8008906:	4b03      	ldr	r3, [pc, #12]	@ (8008914 <pvTaskIncrementMutexHeldCount+0x24>)
 8008908:	681b      	ldr	r3, [r3, #0]
	}
 800890a:	4618      	mov	r0, r3
 800890c:	46bd      	mov	sp, r7
 800890e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008912:	4770      	bx	lr
 8008914:	2000047c 	.word	0x2000047c

08008918 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008918:	b580      	push	{r7, lr}
 800891a:	b084      	sub	sp, #16
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
 8008920:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008922:	4b29      	ldr	r3, [pc, #164]	@ (80089c8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008928:	4b28      	ldr	r3, [pc, #160]	@ (80089cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	3304      	adds	r3, #4
 800892e:	4618      	mov	r0, r3
 8008930:	f7fe facf 	bl	8006ed2 <uxListRemove>
 8008934:	4603      	mov	r3, r0
 8008936:	2b00      	cmp	r3, #0
 8008938:	d10b      	bne.n	8008952 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800893a:	4b24      	ldr	r3, [pc, #144]	@ (80089cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008940:	2201      	movs	r2, #1
 8008942:	fa02 f303 	lsl.w	r3, r2, r3
 8008946:	43da      	mvns	r2, r3
 8008948:	4b21      	ldr	r3, [pc, #132]	@ (80089d0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	4013      	ands	r3, r2
 800894e:	4a20      	ldr	r2, [pc, #128]	@ (80089d0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008950:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008958:	d10a      	bne.n	8008970 <prvAddCurrentTaskToDelayedList+0x58>
 800895a:	683b      	ldr	r3, [r7, #0]
 800895c:	2b00      	cmp	r3, #0
 800895e:	d007      	beq.n	8008970 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008960:	4b1a      	ldr	r3, [pc, #104]	@ (80089cc <prvAddCurrentTaskToDelayedList+0xb4>)
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	3304      	adds	r3, #4
 8008966:	4619      	mov	r1, r3
 8008968:	481a      	ldr	r0, [pc, #104]	@ (80089d4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800896a:	f7fe fa55 	bl	8006e18 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800896e:	e026      	b.n	80089be <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008970:	68fa      	ldr	r2, [r7, #12]
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	4413      	add	r3, r2
 8008976:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008978:	4b14      	ldr	r3, [pc, #80]	@ (80089cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	68ba      	ldr	r2, [r7, #8]
 800897e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008980:	68ba      	ldr	r2, [r7, #8]
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	429a      	cmp	r2, r3
 8008986:	d209      	bcs.n	800899c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008988:	4b13      	ldr	r3, [pc, #76]	@ (80089d8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800898a:	681a      	ldr	r2, [r3, #0]
 800898c:	4b0f      	ldr	r3, [pc, #60]	@ (80089cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	3304      	adds	r3, #4
 8008992:	4619      	mov	r1, r3
 8008994:	4610      	mov	r0, r2
 8008996:	f7fe fa63 	bl	8006e60 <vListInsert>
}
 800899a:	e010      	b.n	80089be <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800899c:	4b0f      	ldr	r3, [pc, #60]	@ (80089dc <prvAddCurrentTaskToDelayedList+0xc4>)
 800899e:	681a      	ldr	r2, [r3, #0]
 80089a0:	4b0a      	ldr	r3, [pc, #40]	@ (80089cc <prvAddCurrentTaskToDelayedList+0xb4>)
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	3304      	adds	r3, #4
 80089a6:	4619      	mov	r1, r3
 80089a8:	4610      	mov	r0, r2
 80089aa:	f7fe fa59 	bl	8006e60 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80089ae:	4b0c      	ldr	r3, [pc, #48]	@ (80089e0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	68ba      	ldr	r2, [r7, #8]
 80089b4:	429a      	cmp	r2, r3
 80089b6:	d202      	bcs.n	80089be <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80089b8:	4a09      	ldr	r2, [pc, #36]	@ (80089e0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80089ba:	68bb      	ldr	r3, [r7, #8]
 80089bc:	6013      	str	r3, [r2, #0]
}
 80089be:	bf00      	nop
 80089c0:	3710      	adds	r7, #16
 80089c2:	46bd      	mov	sp, r7
 80089c4:	bd80      	pop	{r7, pc}
 80089c6:	bf00      	nop
 80089c8:	20000580 	.word	0x20000580
 80089cc:	2000047c 	.word	0x2000047c
 80089d0:	20000584 	.word	0x20000584
 80089d4:	20000568 	.word	0x20000568
 80089d8:	20000538 	.word	0x20000538
 80089dc:	20000534 	.word	0x20000534
 80089e0:	2000059c 	.word	0x2000059c

080089e4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80089e4:	b480      	push	{r7}
 80089e6:	b085      	sub	sp, #20
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	60f8      	str	r0, [r7, #12]
 80089ec:	60b9      	str	r1, [r7, #8]
 80089ee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	3b04      	subs	r3, #4
 80089f4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80089fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	3b04      	subs	r3, #4
 8008a02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008a04:	68bb      	ldr	r3, [r7, #8]
 8008a06:	f023 0201 	bic.w	r2, r3, #1
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	3b04      	subs	r3, #4
 8008a12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008a14:	4a0c      	ldr	r2, [pc, #48]	@ (8008a48 <pxPortInitialiseStack+0x64>)
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	3b14      	subs	r3, #20
 8008a1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008a20:	687a      	ldr	r2, [r7, #4]
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	3b04      	subs	r3, #4
 8008a2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	f06f 0202 	mvn.w	r2, #2
 8008a32:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	3b20      	subs	r3, #32
 8008a38:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008a3a:	68fb      	ldr	r3, [r7, #12]
}
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	3714      	adds	r7, #20
 8008a40:	46bd      	mov	sp, r7
 8008a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a46:	4770      	bx	lr
 8008a48:	08008a4d 	.word	0x08008a4d

08008a4c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008a4c:	b480      	push	{r7}
 8008a4e:	b085      	sub	sp, #20
 8008a50:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008a52:	2300      	movs	r3, #0
 8008a54:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008a56:	4b13      	ldr	r3, [pc, #76]	@ (8008aa4 <prvTaskExitError+0x58>)
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a5e:	d00b      	beq.n	8008a78 <prvTaskExitError+0x2c>
	__asm volatile
 8008a60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a64:	f383 8811 	msr	BASEPRI, r3
 8008a68:	f3bf 8f6f 	isb	sy
 8008a6c:	f3bf 8f4f 	dsb	sy
 8008a70:	60fb      	str	r3, [r7, #12]
}
 8008a72:	bf00      	nop
 8008a74:	bf00      	nop
 8008a76:	e7fd      	b.n	8008a74 <prvTaskExitError+0x28>
	__asm volatile
 8008a78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a7c:	f383 8811 	msr	BASEPRI, r3
 8008a80:	f3bf 8f6f 	isb	sy
 8008a84:	f3bf 8f4f 	dsb	sy
 8008a88:	60bb      	str	r3, [r7, #8]
}
 8008a8a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008a8c:	bf00      	nop
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d0fc      	beq.n	8008a8e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008a94:	bf00      	nop
 8008a96:	bf00      	nop
 8008a98:	3714      	adds	r7, #20
 8008a9a:	46bd      	mov	sp, r7
 8008a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa0:	4770      	bx	lr
 8008aa2:	bf00      	nop
 8008aa4:	20000098 	.word	0x20000098
	...

08008ab0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008ab0:	4b07      	ldr	r3, [pc, #28]	@ (8008ad0 <pxCurrentTCBConst2>)
 8008ab2:	6819      	ldr	r1, [r3, #0]
 8008ab4:	6808      	ldr	r0, [r1, #0]
 8008ab6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008aba:	f380 8809 	msr	PSP, r0
 8008abe:	f3bf 8f6f 	isb	sy
 8008ac2:	f04f 0000 	mov.w	r0, #0
 8008ac6:	f380 8811 	msr	BASEPRI, r0
 8008aca:	4770      	bx	lr
 8008acc:	f3af 8000 	nop.w

08008ad0 <pxCurrentTCBConst2>:
 8008ad0:	2000047c 	.word	0x2000047c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008ad4:	bf00      	nop
 8008ad6:	bf00      	nop

08008ad8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008ad8:	4808      	ldr	r0, [pc, #32]	@ (8008afc <prvPortStartFirstTask+0x24>)
 8008ada:	6800      	ldr	r0, [r0, #0]
 8008adc:	6800      	ldr	r0, [r0, #0]
 8008ade:	f380 8808 	msr	MSP, r0
 8008ae2:	f04f 0000 	mov.w	r0, #0
 8008ae6:	f380 8814 	msr	CONTROL, r0
 8008aea:	b662      	cpsie	i
 8008aec:	b661      	cpsie	f
 8008aee:	f3bf 8f4f 	dsb	sy
 8008af2:	f3bf 8f6f 	isb	sy
 8008af6:	df00      	svc	0
 8008af8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008afa:	bf00      	nop
 8008afc:	e000ed08 	.word	0xe000ed08

08008b00 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008b00:	b580      	push	{r7, lr}
 8008b02:	b086      	sub	sp, #24
 8008b04:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008b06:	4b47      	ldr	r3, [pc, #284]	@ (8008c24 <xPortStartScheduler+0x124>)
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	4a47      	ldr	r2, [pc, #284]	@ (8008c28 <xPortStartScheduler+0x128>)
 8008b0c:	4293      	cmp	r3, r2
 8008b0e:	d10b      	bne.n	8008b28 <xPortStartScheduler+0x28>
	__asm volatile
 8008b10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b14:	f383 8811 	msr	BASEPRI, r3
 8008b18:	f3bf 8f6f 	isb	sy
 8008b1c:	f3bf 8f4f 	dsb	sy
 8008b20:	613b      	str	r3, [r7, #16]
}
 8008b22:	bf00      	nop
 8008b24:	bf00      	nop
 8008b26:	e7fd      	b.n	8008b24 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008b28:	4b3e      	ldr	r3, [pc, #248]	@ (8008c24 <xPortStartScheduler+0x124>)
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	4a3f      	ldr	r2, [pc, #252]	@ (8008c2c <xPortStartScheduler+0x12c>)
 8008b2e:	4293      	cmp	r3, r2
 8008b30:	d10b      	bne.n	8008b4a <xPortStartScheduler+0x4a>
	__asm volatile
 8008b32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b36:	f383 8811 	msr	BASEPRI, r3
 8008b3a:	f3bf 8f6f 	isb	sy
 8008b3e:	f3bf 8f4f 	dsb	sy
 8008b42:	60fb      	str	r3, [r7, #12]
}
 8008b44:	bf00      	nop
 8008b46:	bf00      	nop
 8008b48:	e7fd      	b.n	8008b46 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008b4a:	4b39      	ldr	r3, [pc, #228]	@ (8008c30 <xPortStartScheduler+0x130>)
 8008b4c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008b4e:	697b      	ldr	r3, [r7, #20]
 8008b50:	781b      	ldrb	r3, [r3, #0]
 8008b52:	b2db      	uxtb	r3, r3
 8008b54:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008b56:	697b      	ldr	r3, [r7, #20]
 8008b58:	22ff      	movs	r2, #255	@ 0xff
 8008b5a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008b5c:	697b      	ldr	r3, [r7, #20]
 8008b5e:	781b      	ldrb	r3, [r3, #0]
 8008b60:	b2db      	uxtb	r3, r3
 8008b62:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008b64:	78fb      	ldrb	r3, [r7, #3]
 8008b66:	b2db      	uxtb	r3, r3
 8008b68:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8008b6c:	b2da      	uxtb	r2, r3
 8008b6e:	4b31      	ldr	r3, [pc, #196]	@ (8008c34 <xPortStartScheduler+0x134>)
 8008b70:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008b72:	4b31      	ldr	r3, [pc, #196]	@ (8008c38 <xPortStartScheduler+0x138>)
 8008b74:	2207      	movs	r2, #7
 8008b76:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008b78:	e009      	b.n	8008b8e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8008b7a:	4b2f      	ldr	r3, [pc, #188]	@ (8008c38 <xPortStartScheduler+0x138>)
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	3b01      	subs	r3, #1
 8008b80:	4a2d      	ldr	r2, [pc, #180]	@ (8008c38 <xPortStartScheduler+0x138>)
 8008b82:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008b84:	78fb      	ldrb	r3, [r7, #3]
 8008b86:	b2db      	uxtb	r3, r3
 8008b88:	005b      	lsls	r3, r3, #1
 8008b8a:	b2db      	uxtb	r3, r3
 8008b8c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008b8e:	78fb      	ldrb	r3, [r7, #3]
 8008b90:	b2db      	uxtb	r3, r3
 8008b92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008b96:	2b80      	cmp	r3, #128	@ 0x80
 8008b98:	d0ef      	beq.n	8008b7a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008b9a:	4b27      	ldr	r3, [pc, #156]	@ (8008c38 <xPortStartScheduler+0x138>)
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	f1c3 0307 	rsb	r3, r3, #7
 8008ba2:	2b04      	cmp	r3, #4
 8008ba4:	d00b      	beq.n	8008bbe <xPortStartScheduler+0xbe>
	__asm volatile
 8008ba6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008baa:	f383 8811 	msr	BASEPRI, r3
 8008bae:	f3bf 8f6f 	isb	sy
 8008bb2:	f3bf 8f4f 	dsb	sy
 8008bb6:	60bb      	str	r3, [r7, #8]
}
 8008bb8:	bf00      	nop
 8008bba:	bf00      	nop
 8008bbc:	e7fd      	b.n	8008bba <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008bbe:	4b1e      	ldr	r3, [pc, #120]	@ (8008c38 <xPortStartScheduler+0x138>)
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	021b      	lsls	r3, r3, #8
 8008bc4:	4a1c      	ldr	r2, [pc, #112]	@ (8008c38 <xPortStartScheduler+0x138>)
 8008bc6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008bc8:	4b1b      	ldr	r3, [pc, #108]	@ (8008c38 <xPortStartScheduler+0x138>)
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008bd0:	4a19      	ldr	r2, [pc, #100]	@ (8008c38 <xPortStartScheduler+0x138>)
 8008bd2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	b2da      	uxtb	r2, r3
 8008bd8:	697b      	ldr	r3, [r7, #20]
 8008bda:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008bdc:	4b17      	ldr	r3, [pc, #92]	@ (8008c3c <xPortStartScheduler+0x13c>)
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	4a16      	ldr	r2, [pc, #88]	@ (8008c3c <xPortStartScheduler+0x13c>)
 8008be2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008be6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008be8:	4b14      	ldr	r3, [pc, #80]	@ (8008c3c <xPortStartScheduler+0x13c>)
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	4a13      	ldr	r2, [pc, #76]	@ (8008c3c <xPortStartScheduler+0x13c>)
 8008bee:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008bf2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008bf4:	f000 f8da 	bl	8008dac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008bf8:	4b11      	ldr	r3, [pc, #68]	@ (8008c40 <xPortStartScheduler+0x140>)
 8008bfa:	2200      	movs	r2, #0
 8008bfc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008bfe:	f000 f8f9 	bl	8008df4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008c02:	4b10      	ldr	r3, [pc, #64]	@ (8008c44 <xPortStartScheduler+0x144>)
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	4a0f      	ldr	r2, [pc, #60]	@ (8008c44 <xPortStartScheduler+0x144>)
 8008c08:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8008c0c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008c0e:	f7ff ff63 	bl	8008ad8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008c12:	f7ff fa71 	bl	80080f8 <vTaskSwitchContext>
	prvTaskExitError();
 8008c16:	f7ff ff19 	bl	8008a4c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008c1a:	2300      	movs	r3, #0
}
 8008c1c:	4618      	mov	r0, r3
 8008c1e:	3718      	adds	r7, #24
 8008c20:	46bd      	mov	sp, r7
 8008c22:	bd80      	pop	{r7, pc}
 8008c24:	e000ed00 	.word	0xe000ed00
 8008c28:	410fc271 	.word	0x410fc271
 8008c2c:	410fc270 	.word	0x410fc270
 8008c30:	e000e400 	.word	0xe000e400
 8008c34:	200005a8 	.word	0x200005a8
 8008c38:	200005ac 	.word	0x200005ac
 8008c3c:	e000ed20 	.word	0xe000ed20
 8008c40:	20000098 	.word	0x20000098
 8008c44:	e000ef34 	.word	0xe000ef34

08008c48 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008c48:	b480      	push	{r7}
 8008c4a:	b083      	sub	sp, #12
 8008c4c:	af00      	add	r7, sp, #0
	__asm volatile
 8008c4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c52:	f383 8811 	msr	BASEPRI, r3
 8008c56:	f3bf 8f6f 	isb	sy
 8008c5a:	f3bf 8f4f 	dsb	sy
 8008c5e:	607b      	str	r3, [r7, #4]
}
 8008c60:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008c62:	4b10      	ldr	r3, [pc, #64]	@ (8008ca4 <vPortEnterCritical+0x5c>)
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	3301      	adds	r3, #1
 8008c68:	4a0e      	ldr	r2, [pc, #56]	@ (8008ca4 <vPortEnterCritical+0x5c>)
 8008c6a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008c6c:	4b0d      	ldr	r3, [pc, #52]	@ (8008ca4 <vPortEnterCritical+0x5c>)
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	2b01      	cmp	r3, #1
 8008c72:	d110      	bne.n	8008c96 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008c74:	4b0c      	ldr	r3, [pc, #48]	@ (8008ca8 <vPortEnterCritical+0x60>)
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	b2db      	uxtb	r3, r3
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d00b      	beq.n	8008c96 <vPortEnterCritical+0x4e>
	__asm volatile
 8008c7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c82:	f383 8811 	msr	BASEPRI, r3
 8008c86:	f3bf 8f6f 	isb	sy
 8008c8a:	f3bf 8f4f 	dsb	sy
 8008c8e:	603b      	str	r3, [r7, #0]
}
 8008c90:	bf00      	nop
 8008c92:	bf00      	nop
 8008c94:	e7fd      	b.n	8008c92 <vPortEnterCritical+0x4a>
	}
}
 8008c96:	bf00      	nop
 8008c98:	370c      	adds	r7, #12
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca0:	4770      	bx	lr
 8008ca2:	bf00      	nop
 8008ca4:	20000098 	.word	0x20000098
 8008ca8:	e000ed04 	.word	0xe000ed04

08008cac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008cac:	b480      	push	{r7}
 8008cae:	b083      	sub	sp, #12
 8008cb0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008cb2:	4b12      	ldr	r3, [pc, #72]	@ (8008cfc <vPortExitCritical+0x50>)
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d10b      	bne.n	8008cd2 <vPortExitCritical+0x26>
	__asm volatile
 8008cba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cbe:	f383 8811 	msr	BASEPRI, r3
 8008cc2:	f3bf 8f6f 	isb	sy
 8008cc6:	f3bf 8f4f 	dsb	sy
 8008cca:	607b      	str	r3, [r7, #4]
}
 8008ccc:	bf00      	nop
 8008cce:	bf00      	nop
 8008cd0:	e7fd      	b.n	8008cce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008cd2:	4b0a      	ldr	r3, [pc, #40]	@ (8008cfc <vPortExitCritical+0x50>)
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	3b01      	subs	r3, #1
 8008cd8:	4a08      	ldr	r2, [pc, #32]	@ (8008cfc <vPortExitCritical+0x50>)
 8008cda:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008cdc:	4b07      	ldr	r3, [pc, #28]	@ (8008cfc <vPortExitCritical+0x50>)
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d105      	bne.n	8008cf0 <vPortExitCritical+0x44>
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008ce8:	683b      	ldr	r3, [r7, #0]
 8008cea:	f383 8811 	msr	BASEPRI, r3
}
 8008cee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008cf0:	bf00      	nop
 8008cf2:	370c      	adds	r7, #12
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfa:	4770      	bx	lr
 8008cfc:	20000098 	.word	0x20000098

08008d00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008d00:	f3ef 8009 	mrs	r0, PSP
 8008d04:	f3bf 8f6f 	isb	sy
 8008d08:	4b15      	ldr	r3, [pc, #84]	@ (8008d60 <pxCurrentTCBConst>)
 8008d0a:	681a      	ldr	r2, [r3, #0]
 8008d0c:	f01e 0f10 	tst.w	lr, #16
 8008d10:	bf08      	it	eq
 8008d12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008d16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d1a:	6010      	str	r0, [r2, #0]
 8008d1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008d20:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008d24:	f380 8811 	msr	BASEPRI, r0
 8008d28:	f3bf 8f4f 	dsb	sy
 8008d2c:	f3bf 8f6f 	isb	sy
 8008d30:	f7ff f9e2 	bl	80080f8 <vTaskSwitchContext>
 8008d34:	f04f 0000 	mov.w	r0, #0
 8008d38:	f380 8811 	msr	BASEPRI, r0
 8008d3c:	bc09      	pop	{r0, r3}
 8008d3e:	6819      	ldr	r1, [r3, #0]
 8008d40:	6808      	ldr	r0, [r1, #0]
 8008d42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d46:	f01e 0f10 	tst.w	lr, #16
 8008d4a:	bf08      	it	eq
 8008d4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008d50:	f380 8809 	msr	PSP, r0
 8008d54:	f3bf 8f6f 	isb	sy
 8008d58:	4770      	bx	lr
 8008d5a:	bf00      	nop
 8008d5c:	f3af 8000 	nop.w

08008d60 <pxCurrentTCBConst>:
 8008d60:	2000047c 	.word	0x2000047c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008d64:	bf00      	nop
 8008d66:	bf00      	nop

08008d68 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008d68:	b580      	push	{r7, lr}
 8008d6a:	b082      	sub	sp, #8
 8008d6c:	af00      	add	r7, sp, #0
	__asm volatile
 8008d6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d72:	f383 8811 	msr	BASEPRI, r3
 8008d76:	f3bf 8f6f 	isb	sy
 8008d7a:	f3bf 8f4f 	dsb	sy
 8008d7e:	607b      	str	r3, [r7, #4]
}
 8008d80:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008d82:	f7ff f8ff 	bl	8007f84 <xTaskIncrementTick>
 8008d86:	4603      	mov	r3, r0
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d003      	beq.n	8008d94 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008d8c:	4b06      	ldr	r3, [pc, #24]	@ (8008da8 <SysTick_Handler+0x40>)
 8008d8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008d92:	601a      	str	r2, [r3, #0]
 8008d94:	2300      	movs	r3, #0
 8008d96:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008d98:	683b      	ldr	r3, [r7, #0]
 8008d9a:	f383 8811 	msr	BASEPRI, r3
}
 8008d9e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008da0:	bf00      	nop
 8008da2:	3708      	adds	r7, #8
 8008da4:	46bd      	mov	sp, r7
 8008da6:	bd80      	pop	{r7, pc}
 8008da8:	e000ed04 	.word	0xe000ed04

08008dac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008dac:	b480      	push	{r7}
 8008dae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008db0:	4b0b      	ldr	r3, [pc, #44]	@ (8008de0 <vPortSetupTimerInterrupt+0x34>)
 8008db2:	2200      	movs	r2, #0
 8008db4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008db6:	4b0b      	ldr	r3, [pc, #44]	@ (8008de4 <vPortSetupTimerInterrupt+0x38>)
 8008db8:	2200      	movs	r2, #0
 8008dba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008dbc:	4b0a      	ldr	r3, [pc, #40]	@ (8008de8 <vPortSetupTimerInterrupt+0x3c>)
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	4a0a      	ldr	r2, [pc, #40]	@ (8008dec <vPortSetupTimerInterrupt+0x40>)
 8008dc2:	fba2 2303 	umull	r2, r3, r2, r3
 8008dc6:	099b      	lsrs	r3, r3, #6
 8008dc8:	4a09      	ldr	r2, [pc, #36]	@ (8008df0 <vPortSetupTimerInterrupt+0x44>)
 8008dca:	3b01      	subs	r3, #1
 8008dcc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008dce:	4b04      	ldr	r3, [pc, #16]	@ (8008de0 <vPortSetupTimerInterrupt+0x34>)
 8008dd0:	2207      	movs	r2, #7
 8008dd2:	601a      	str	r2, [r3, #0]
}
 8008dd4:	bf00      	nop
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ddc:	4770      	bx	lr
 8008dde:	bf00      	nop
 8008de0:	e000e010 	.word	0xe000e010
 8008de4:	e000e018 	.word	0xe000e018
 8008de8:	20000000 	.word	0x20000000
 8008dec:	10624dd3 	.word	0x10624dd3
 8008df0:	e000e014 	.word	0xe000e014

08008df4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008df4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008e04 <vPortEnableVFP+0x10>
 8008df8:	6801      	ldr	r1, [r0, #0]
 8008dfa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8008dfe:	6001      	str	r1, [r0, #0]
 8008e00:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008e02:	bf00      	nop
 8008e04:	e000ed88 	.word	0xe000ed88

08008e08 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008e08:	b480      	push	{r7}
 8008e0a:	b085      	sub	sp, #20
 8008e0c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008e0e:	f3ef 8305 	mrs	r3, IPSR
 8008e12:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	2b0f      	cmp	r3, #15
 8008e18:	d915      	bls.n	8008e46 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008e1a:	4a18      	ldr	r2, [pc, #96]	@ (8008e7c <vPortValidateInterruptPriority+0x74>)
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	4413      	add	r3, r2
 8008e20:	781b      	ldrb	r3, [r3, #0]
 8008e22:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008e24:	4b16      	ldr	r3, [pc, #88]	@ (8008e80 <vPortValidateInterruptPriority+0x78>)
 8008e26:	781b      	ldrb	r3, [r3, #0]
 8008e28:	7afa      	ldrb	r2, [r7, #11]
 8008e2a:	429a      	cmp	r2, r3
 8008e2c:	d20b      	bcs.n	8008e46 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8008e2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e32:	f383 8811 	msr	BASEPRI, r3
 8008e36:	f3bf 8f6f 	isb	sy
 8008e3a:	f3bf 8f4f 	dsb	sy
 8008e3e:	607b      	str	r3, [r7, #4]
}
 8008e40:	bf00      	nop
 8008e42:	bf00      	nop
 8008e44:	e7fd      	b.n	8008e42 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008e46:	4b0f      	ldr	r3, [pc, #60]	@ (8008e84 <vPortValidateInterruptPriority+0x7c>)
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008e4e:	4b0e      	ldr	r3, [pc, #56]	@ (8008e88 <vPortValidateInterruptPriority+0x80>)
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	429a      	cmp	r2, r3
 8008e54:	d90b      	bls.n	8008e6e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8008e56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e5a:	f383 8811 	msr	BASEPRI, r3
 8008e5e:	f3bf 8f6f 	isb	sy
 8008e62:	f3bf 8f4f 	dsb	sy
 8008e66:	603b      	str	r3, [r7, #0]
}
 8008e68:	bf00      	nop
 8008e6a:	bf00      	nop
 8008e6c:	e7fd      	b.n	8008e6a <vPortValidateInterruptPriority+0x62>
	}
 8008e6e:	bf00      	nop
 8008e70:	3714      	adds	r7, #20
 8008e72:	46bd      	mov	sp, r7
 8008e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e78:	4770      	bx	lr
 8008e7a:	bf00      	nop
 8008e7c:	e000e3f0 	.word	0xe000e3f0
 8008e80:	200005a8 	.word	0x200005a8
 8008e84:	e000ed0c 	.word	0xe000ed0c
 8008e88:	200005ac 	.word	0x200005ac

08008e8c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	b08a      	sub	sp, #40	@ 0x28
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008e94:	2300      	movs	r3, #0
 8008e96:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008e98:	f7fe ffc8 	bl	8007e2c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008e9c:	4b5c      	ldr	r3, [pc, #368]	@ (8009010 <pvPortMalloc+0x184>)
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d101      	bne.n	8008ea8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008ea4:	f000 f924 	bl	80090f0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008ea8:	4b5a      	ldr	r3, [pc, #360]	@ (8009014 <pvPortMalloc+0x188>)
 8008eaa:	681a      	ldr	r2, [r3, #0]
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	4013      	ands	r3, r2
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	f040 8095 	bne.w	8008fe0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d01e      	beq.n	8008efa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8008ebc:	2208      	movs	r2, #8
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	4413      	add	r3, r2
 8008ec2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	f003 0307 	and.w	r3, r3, #7
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d015      	beq.n	8008efa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	f023 0307 	bic.w	r3, r3, #7
 8008ed4:	3308      	adds	r3, #8
 8008ed6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	f003 0307 	and.w	r3, r3, #7
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d00b      	beq.n	8008efa <pvPortMalloc+0x6e>
	__asm volatile
 8008ee2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ee6:	f383 8811 	msr	BASEPRI, r3
 8008eea:	f3bf 8f6f 	isb	sy
 8008eee:	f3bf 8f4f 	dsb	sy
 8008ef2:	617b      	str	r3, [r7, #20]
}
 8008ef4:	bf00      	nop
 8008ef6:	bf00      	nop
 8008ef8:	e7fd      	b.n	8008ef6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d06f      	beq.n	8008fe0 <pvPortMalloc+0x154>
 8008f00:	4b45      	ldr	r3, [pc, #276]	@ (8009018 <pvPortMalloc+0x18c>)
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	687a      	ldr	r2, [r7, #4]
 8008f06:	429a      	cmp	r2, r3
 8008f08:	d86a      	bhi.n	8008fe0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008f0a:	4b44      	ldr	r3, [pc, #272]	@ (800901c <pvPortMalloc+0x190>)
 8008f0c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008f0e:	4b43      	ldr	r3, [pc, #268]	@ (800901c <pvPortMalloc+0x190>)
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008f14:	e004      	b.n	8008f20 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f18:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008f20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f22:	685b      	ldr	r3, [r3, #4]
 8008f24:	687a      	ldr	r2, [r7, #4]
 8008f26:	429a      	cmp	r2, r3
 8008f28:	d903      	bls.n	8008f32 <pvPortMalloc+0xa6>
 8008f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d1f1      	bne.n	8008f16 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008f32:	4b37      	ldr	r3, [pc, #220]	@ (8009010 <pvPortMalloc+0x184>)
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008f38:	429a      	cmp	r2, r3
 8008f3a:	d051      	beq.n	8008fe0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008f3c:	6a3b      	ldr	r3, [r7, #32]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	2208      	movs	r2, #8
 8008f42:	4413      	add	r3, r2
 8008f44:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008f46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f48:	681a      	ldr	r2, [r3, #0]
 8008f4a:	6a3b      	ldr	r3, [r7, #32]
 8008f4c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008f4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f50:	685a      	ldr	r2, [r3, #4]
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	1ad2      	subs	r2, r2, r3
 8008f56:	2308      	movs	r3, #8
 8008f58:	005b      	lsls	r3, r3, #1
 8008f5a:	429a      	cmp	r2, r3
 8008f5c:	d920      	bls.n	8008fa0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008f5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	4413      	add	r3, r2
 8008f64:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008f66:	69bb      	ldr	r3, [r7, #24]
 8008f68:	f003 0307 	and.w	r3, r3, #7
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d00b      	beq.n	8008f88 <pvPortMalloc+0xfc>
	__asm volatile
 8008f70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f74:	f383 8811 	msr	BASEPRI, r3
 8008f78:	f3bf 8f6f 	isb	sy
 8008f7c:	f3bf 8f4f 	dsb	sy
 8008f80:	613b      	str	r3, [r7, #16]
}
 8008f82:	bf00      	nop
 8008f84:	bf00      	nop
 8008f86:	e7fd      	b.n	8008f84 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008f88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f8a:	685a      	ldr	r2, [r3, #4]
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	1ad2      	subs	r2, r2, r3
 8008f90:	69bb      	ldr	r3, [r7, #24]
 8008f92:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008f94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f96:	687a      	ldr	r2, [r7, #4]
 8008f98:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008f9a:	69b8      	ldr	r0, [r7, #24]
 8008f9c:	f000 f90a 	bl	80091b4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008fa0:	4b1d      	ldr	r3, [pc, #116]	@ (8009018 <pvPortMalloc+0x18c>)
 8008fa2:	681a      	ldr	r2, [r3, #0]
 8008fa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fa6:	685b      	ldr	r3, [r3, #4]
 8008fa8:	1ad3      	subs	r3, r2, r3
 8008faa:	4a1b      	ldr	r2, [pc, #108]	@ (8009018 <pvPortMalloc+0x18c>)
 8008fac:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008fae:	4b1a      	ldr	r3, [pc, #104]	@ (8009018 <pvPortMalloc+0x18c>)
 8008fb0:	681a      	ldr	r2, [r3, #0]
 8008fb2:	4b1b      	ldr	r3, [pc, #108]	@ (8009020 <pvPortMalloc+0x194>)
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	429a      	cmp	r2, r3
 8008fb8:	d203      	bcs.n	8008fc2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008fba:	4b17      	ldr	r3, [pc, #92]	@ (8009018 <pvPortMalloc+0x18c>)
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	4a18      	ldr	r2, [pc, #96]	@ (8009020 <pvPortMalloc+0x194>)
 8008fc0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008fc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fc4:	685a      	ldr	r2, [r3, #4]
 8008fc6:	4b13      	ldr	r3, [pc, #76]	@ (8009014 <pvPortMalloc+0x188>)
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	431a      	orrs	r2, r3
 8008fcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fce:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008fd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008fd6:	4b13      	ldr	r3, [pc, #76]	@ (8009024 <pvPortMalloc+0x198>)
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	3301      	adds	r3, #1
 8008fdc:	4a11      	ldr	r2, [pc, #68]	@ (8009024 <pvPortMalloc+0x198>)
 8008fde:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008fe0:	f7fe ff32 	bl	8007e48 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008fe4:	69fb      	ldr	r3, [r7, #28]
 8008fe6:	f003 0307 	and.w	r3, r3, #7
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d00b      	beq.n	8009006 <pvPortMalloc+0x17a>
	__asm volatile
 8008fee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ff2:	f383 8811 	msr	BASEPRI, r3
 8008ff6:	f3bf 8f6f 	isb	sy
 8008ffa:	f3bf 8f4f 	dsb	sy
 8008ffe:	60fb      	str	r3, [r7, #12]
}
 8009000:	bf00      	nop
 8009002:	bf00      	nop
 8009004:	e7fd      	b.n	8009002 <pvPortMalloc+0x176>
	return pvReturn;
 8009006:	69fb      	ldr	r3, [r7, #28]
}
 8009008:	4618      	mov	r0, r3
 800900a:	3728      	adds	r7, #40	@ 0x28
 800900c:	46bd      	mov	sp, r7
 800900e:	bd80      	pop	{r7, pc}
 8009010:	20004050 	.word	0x20004050
 8009014:	20004064 	.word	0x20004064
 8009018:	20004054 	.word	0x20004054
 800901c:	20004048 	.word	0x20004048
 8009020:	20004058 	.word	0x20004058
 8009024:	2000405c 	.word	0x2000405c

08009028 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009028:	b580      	push	{r7, lr}
 800902a:	b086      	sub	sp, #24
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	2b00      	cmp	r3, #0
 8009038:	d04f      	beq.n	80090da <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800903a:	2308      	movs	r3, #8
 800903c:	425b      	negs	r3, r3
 800903e:	697a      	ldr	r2, [r7, #20]
 8009040:	4413      	add	r3, r2
 8009042:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009044:	697b      	ldr	r3, [r7, #20]
 8009046:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009048:	693b      	ldr	r3, [r7, #16]
 800904a:	685a      	ldr	r2, [r3, #4]
 800904c:	4b25      	ldr	r3, [pc, #148]	@ (80090e4 <vPortFree+0xbc>)
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	4013      	ands	r3, r2
 8009052:	2b00      	cmp	r3, #0
 8009054:	d10b      	bne.n	800906e <vPortFree+0x46>
	__asm volatile
 8009056:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800905a:	f383 8811 	msr	BASEPRI, r3
 800905e:	f3bf 8f6f 	isb	sy
 8009062:	f3bf 8f4f 	dsb	sy
 8009066:	60fb      	str	r3, [r7, #12]
}
 8009068:	bf00      	nop
 800906a:	bf00      	nop
 800906c:	e7fd      	b.n	800906a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800906e:	693b      	ldr	r3, [r7, #16]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	2b00      	cmp	r3, #0
 8009074:	d00b      	beq.n	800908e <vPortFree+0x66>
	__asm volatile
 8009076:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800907a:	f383 8811 	msr	BASEPRI, r3
 800907e:	f3bf 8f6f 	isb	sy
 8009082:	f3bf 8f4f 	dsb	sy
 8009086:	60bb      	str	r3, [r7, #8]
}
 8009088:	bf00      	nop
 800908a:	bf00      	nop
 800908c:	e7fd      	b.n	800908a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800908e:	693b      	ldr	r3, [r7, #16]
 8009090:	685a      	ldr	r2, [r3, #4]
 8009092:	4b14      	ldr	r3, [pc, #80]	@ (80090e4 <vPortFree+0xbc>)
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	4013      	ands	r3, r2
 8009098:	2b00      	cmp	r3, #0
 800909a:	d01e      	beq.n	80090da <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800909c:	693b      	ldr	r3, [r7, #16]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d11a      	bne.n	80090da <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80090a4:	693b      	ldr	r3, [r7, #16]
 80090a6:	685a      	ldr	r2, [r3, #4]
 80090a8:	4b0e      	ldr	r3, [pc, #56]	@ (80090e4 <vPortFree+0xbc>)
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	43db      	mvns	r3, r3
 80090ae:	401a      	ands	r2, r3
 80090b0:	693b      	ldr	r3, [r7, #16]
 80090b2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80090b4:	f7fe feba 	bl	8007e2c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80090b8:	693b      	ldr	r3, [r7, #16]
 80090ba:	685a      	ldr	r2, [r3, #4]
 80090bc:	4b0a      	ldr	r3, [pc, #40]	@ (80090e8 <vPortFree+0xc0>)
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	4413      	add	r3, r2
 80090c2:	4a09      	ldr	r2, [pc, #36]	@ (80090e8 <vPortFree+0xc0>)
 80090c4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80090c6:	6938      	ldr	r0, [r7, #16]
 80090c8:	f000 f874 	bl	80091b4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80090cc:	4b07      	ldr	r3, [pc, #28]	@ (80090ec <vPortFree+0xc4>)
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	3301      	adds	r3, #1
 80090d2:	4a06      	ldr	r2, [pc, #24]	@ (80090ec <vPortFree+0xc4>)
 80090d4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80090d6:	f7fe feb7 	bl	8007e48 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80090da:	bf00      	nop
 80090dc:	3718      	adds	r7, #24
 80090de:	46bd      	mov	sp, r7
 80090e0:	bd80      	pop	{r7, pc}
 80090e2:	bf00      	nop
 80090e4:	20004064 	.word	0x20004064
 80090e8:	20004054 	.word	0x20004054
 80090ec:	20004060 	.word	0x20004060

080090f0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80090f0:	b480      	push	{r7}
 80090f2:	b085      	sub	sp, #20
 80090f4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80090f6:	f643 2398 	movw	r3, #15000	@ 0x3a98
 80090fa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80090fc:	4b27      	ldr	r3, [pc, #156]	@ (800919c <prvHeapInit+0xac>)
 80090fe:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	f003 0307 	and.w	r3, r3, #7
 8009106:	2b00      	cmp	r3, #0
 8009108:	d00c      	beq.n	8009124 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	3307      	adds	r3, #7
 800910e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	f023 0307 	bic.w	r3, r3, #7
 8009116:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009118:	68ba      	ldr	r2, [r7, #8]
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	1ad3      	subs	r3, r2, r3
 800911e:	4a1f      	ldr	r2, [pc, #124]	@ (800919c <prvHeapInit+0xac>)
 8009120:	4413      	add	r3, r2
 8009122:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009128:	4a1d      	ldr	r2, [pc, #116]	@ (80091a0 <prvHeapInit+0xb0>)
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800912e:	4b1c      	ldr	r3, [pc, #112]	@ (80091a0 <prvHeapInit+0xb0>)
 8009130:	2200      	movs	r2, #0
 8009132:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	68ba      	ldr	r2, [r7, #8]
 8009138:	4413      	add	r3, r2
 800913a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800913c:	2208      	movs	r2, #8
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	1a9b      	subs	r3, r3, r2
 8009142:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	f023 0307 	bic.w	r3, r3, #7
 800914a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	4a15      	ldr	r2, [pc, #84]	@ (80091a4 <prvHeapInit+0xb4>)
 8009150:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009152:	4b14      	ldr	r3, [pc, #80]	@ (80091a4 <prvHeapInit+0xb4>)
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	2200      	movs	r2, #0
 8009158:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800915a:	4b12      	ldr	r3, [pc, #72]	@ (80091a4 <prvHeapInit+0xb4>)
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	2200      	movs	r2, #0
 8009160:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009166:	683b      	ldr	r3, [r7, #0]
 8009168:	68fa      	ldr	r2, [r7, #12]
 800916a:	1ad2      	subs	r2, r2, r3
 800916c:	683b      	ldr	r3, [r7, #0]
 800916e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009170:	4b0c      	ldr	r3, [pc, #48]	@ (80091a4 <prvHeapInit+0xb4>)
 8009172:	681a      	ldr	r2, [r3, #0]
 8009174:	683b      	ldr	r3, [r7, #0]
 8009176:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009178:	683b      	ldr	r3, [r7, #0]
 800917a:	685b      	ldr	r3, [r3, #4]
 800917c:	4a0a      	ldr	r2, [pc, #40]	@ (80091a8 <prvHeapInit+0xb8>)
 800917e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009180:	683b      	ldr	r3, [r7, #0]
 8009182:	685b      	ldr	r3, [r3, #4]
 8009184:	4a09      	ldr	r2, [pc, #36]	@ (80091ac <prvHeapInit+0xbc>)
 8009186:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009188:	4b09      	ldr	r3, [pc, #36]	@ (80091b0 <prvHeapInit+0xc0>)
 800918a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800918e:	601a      	str	r2, [r3, #0]
}
 8009190:	bf00      	nop
 8009192:	3714      	adds	r7, #20
 8009194:	46bd      	mov	sp, r7
 8009196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919a:	4770      	bx	lr
 800919c:	200005b0 	.word	0x200005b0
 80091a0:	20004048 	.word	0x20004048
 80091a4:	20004050 	.word	0x20004050
 80091a8:	20004058 	.word	0x20004058
 80091ac:	20004054 	.word	0x20004054
 80091b0:	20004064 	.word	0x20004064

080091b4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80091b4:	b480      	push	{r7}
 80091b6:	b085      	sub	sp, #20
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80091bc:	4b28      	ldr	r3, [pc, #160]	@ (8009260 <prvInsertBlockIntoFreeList+0xac>)
 80091be:	60fb      	str	r3, [r7, #12]
 80091c0:	e002      	b.n	80091c8 <prvInsertBlockIntoFreeList+0x14>
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	60fb      	str	r3, [r7, #12]
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	687a      	ldr	r2, [r7, #4]
 80091ce:	429a      	cmp	r2, r3
 80091d0:	d8f7      	bhi.n	80091c2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	685b      	ldr	r3, [r3, #4]
 80091da:	68ba      	ldr	r2, [r7, #8]
 80091dc:	4413      	add	r3, r2
 80091de:	687a      	ldr	r2, [r7, #4]
 80091e0:	429a      	cmp	r2, r3
 80091e2:	d108      	bne.n	80091f6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	685a      	ldr	r2, [r3, #4]
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	685b      	ldr	r3, [r3, #4]
 80091ec:	441a      	add	r2, r3
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	685b      	ldr	r3, [r3, #4]
 80091fe:	68ba      	ldr	r2, [r7, #8]
 8009200:	441a      	add	r2, r3
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	429a      	cmp	r2, r3
 8009208:	d118      	bne.n	800923c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	681a      	ldr	r2, [r3, #0]
 800920e:	4b15      	ldr	r3, [pc, #84]	@ (8009264 <prvInsertBlockIntoFreeList+0xb0>)
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	429a      	cmp	r2, r3
 8009214:	d00d      	beq.n	8009232 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	685a      	ldr	r2, [r3, #4]
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	685b      	ldr	r3, [r3, #4]
 8009220:	441a      	add	r2, r3
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	681a      	ldr	r2, [r3, #0]
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	601a      	str	r2, [r3, #0]
 8009230:	e008      	b.n	8009244 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009232:	4b0c      	ldr	r3, [pc, #48]	@ (8009264 <prvInsertBlockIntoFreeList+0xb0>)
 8009234:	681a      	ldr	r2, [r3, #0]
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	601a      	str	r2, [r3, #0]
 800923a:	e003      	b.n	8009244 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	681a      	ldr	r2, [r3, #0]
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009244:	68fa      	ldr	r2, [r7, #12]
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	429a      	cmp	r2, r3
 800924a:	d002      	beq.n	8009252 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	687a      	ldr	r2, [r7, #4]
 8009250:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009252:	bf00      	nop
 8009254:	3714      	adds	r7, #20
 8009256:	46bd      	mov	sp, r7
 8009258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925c:	4770      	bx	lr
 800925e:	bf00      	nop
 8009260:	20004048 	.word	0x20004048
 8009264:	20004050 	.word	0x20004050

08009268 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009268:	b580      	push	{r7, lr}
 800926a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800926c:	2200      	movs	r2, #0
 800926e:	4912      	ldr	r1, [pc, #72]	@ (80092b8 <MX_USB_DEVICE_Init+0x50>)
 8009270:	4812      	ldr	r0, [pc, #72]	@ (80092bc <MX_USB_DEVICE_Init+0x54>)
 8009272:	f7fc f9ed 	bl	8005650 <USBD_Init>
 8009276:	4603      	mov	r3, r0
 8009278:	2b00      	cmp	r3, #0
 800927a:	d001      	beq.n	8009280 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800927c:	f7f7 fbbd 	bl	80009fa <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009280:	490f      	ldr	r1, [pc, #60]	@ (80092c0 <MX_USB_DEVICE_Init+0x58>)
 8009282:	480e      	ldr	r0, [pc, #56]	@ (80092bc <MX_USB_DEVICE_Init+0x54>)
 8009284:	f7fc fa14 	bl	80056b0 <USBD_RegisterClass>
 8009288:	4603      	mov	r3, r0
 800928a:	2b00      	cmp	r3, #0
 800928c:	d001      	beq.n	8009292 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800928e:	f7f7 fbb4 	bl	80009fa <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009292:	490c      	ldr	r1, [pc, #48]	@ (80092c4 <MX_USB_DEVICE_Init+0x5c>)
 8009294:	4809      	ldr	r0, [pc, #36]	@ (80092bc <MX_USB_DEVICE_Init+0x54>)
 8009296:	f7fc f90b 	bl	80054b0 <USBD_CDC_RegisterInterface>
 800929a:	4603      	mov	r3, r0
 800929c:	2b00      	cmp	r3, #0
 800929e:	d001      	beq.n	80092a4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80092a0:	f7f7 fbab 	bl	80009fa <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80092a4:	4805      	ldr	r0, [pc, #20]	@ (80092bc <MX_USB_DEVICE_Init+0x54>)
 80092a6:	f7fc fa39 	bl	800571c <USBD_Start>
 80092aa:	4603      	mov	r3, r0
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d001      	beq.n	80092b4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80092b0:	f7f7 fba3 	bl	80009fa <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80092b4:	bf00      	nop
 80092b6:	bd80      	pop	{r7, pc}
 80092b8:	200000b0 	.word	0x200000b0
 80092bc:	20004068 	.word	0x20004068
 80092c0:	20000018 	.word	0x20000018
 80092c4:	2000009c 	.word	0x2000009c

080092c8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80092c8:	b580      	push	{r7, lr}
 80092ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80092cc:	2200      	movs	r2, #0
 80092ce:	4905      	ldr	r1, [pc, #20]	@ (80092e4 <CDC_Init_FS+0x1c>)
 80092d0:	4805      	ldr	r0, [pc, #20]	@ (80092e8 <CDC_Init_FS+0x20>)
 80092d2:	f7fc f907 	bl	80054e4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80092d6:	4905      	ldr	r1, [pc, #20]	@ (80092ec <CDC_Init_FS+0x24>)
 80092d8:	4803      	ldr	r0, [pc, #12]	@ (80092e8 <CDC_Init_FS+0x20>)
 80092da:	f7fc f925 	bl	8005528 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80092de:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80092e0:	4618      	mov	r0, r3
 80092e2:	bd80      	pop	{r7, pc}
 80092e4:	20004b44 	.word	0x20004b44
 80092e8:	20004068 	.word	0x20004068
 80092ec:	20004344 	.word	0x20004344

080092f0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80092f0:	b480      	push	{r7}
 80092f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80092f4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80092f6:	4618      	mov	r0, r3
 80092f8:	46bd      	mov	sp, r7
 80092fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fe:	4770      	bx	lr

08009300 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009300:	b480      	push	{r7}
 8009302:	b083      	sub	sp, #12
 8009304:	af00      	add	r7, sp, #0
 8009306:	4603      	mov	r3, r0
 8009308:	6039      	str	r1, [r7, #0]
 800930a:	71fb      	strb	r3, [r7, #7]
 800930c:	4613      	mov	r3, r2
 800930e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009310:	79fb      	ldrb	r3, [r7, #7]
 8009312:	2b23      	cmp	r3, #35	@ 0x23
 8009314:	d84a      	bhi.n	80093ac <CDC_Control_FS+0xac>
 8009316:	a201      	add	r2, pc, #4	@ (adr r2, 800931c <CDC_Control_FS+0x1c>)
 8009318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800931c:	080093ad 	.word	0x080093ad
 8009320:	080093ad 	.word	0x080093ad
 8009324:	080093ad 	.word	0x080093ad
 8009328:	080093ad 	.word	0x080093ad
 800932c:	080093ad 	.word	0x080093ad
 8009330:	080093ad 	.word	0x080093ad
 8009334:	080093ad 	.word	0x080093ad
 8009338:	080093ad 	.word	0x080093ad
 800933c:	080093ad 	.word	0x080093ad
 8009340:	080093ad 	.word	0x080093ad
 8009344:	080093ad 	.word	0x080093ad
 8009348:	080093ad 	.word	0x080093ad
 800934c:	080093ad 	.word	0x080093ad
 8009350:	080093ad 	.word	0x080093ad
 8009354:	080093ad 	.word	0x080093ad
 8009358:	080093ad 	.word	0x080093ad
 800935c:	080093ad 	.word	0x080093ad
 8009360:	080093ad 	.word	0x080093ad
 8009364:	080093ad 	.word	0x080093ad
 8009368:	080093ad 	.word	0x080093ad
 800936c:	080093ad 	.word	0x080093ad
 8009370:	080093ad 	.word	0x080093ad
 8009374:	080093ad 	.word	0x080093ad
 8009378:	080093ad 	.word	0x080093ad
 800937c:	080093ad 	.word	0x080093ad
 8009380:	080093ad 	.word	0x080093ad
 8009384:	080093ad 	.word	0x080093ad
 8009388:	080093ad 	.word	0x080093ad
 800938c:	080093ad 	.word	0x080093ad
 8009390:	080093ad 	.word	0x080093ad
 8009394:	080093ad 	.word	0x080093ad
 8009398:	080093ad 	.word	0x080093ad
 800939c:	080093ad 	.word	0x080093ad
 80093a0:	080093ad 	.word	0x080093ad
 80093a4:	080093ad 	.word	0x080093ad
 80093a8:	080093ad 	.word	0x080093ad
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80093ac:	bf00      	nop
  }

  return (USBD_OK);
 80093ae:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80093b0:	4618      	mov	r0, r3
 80093b2:	370c      	adds	r7, #12
 80093b4:	46bd      	mov	sp, r7
 80093b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ba:	4770      	bx	lr

080093bc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80093bc:	b580      	push	{r7, lr}
 80093be:	b082      	sub	sp, #8
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]
 80093c4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80093c6:	6879      	ldr	r1, [r7, #4]
 80093c8:	4805      	ldr	r0, [pc, #20]	@ (80093e0 <CDC_Receive_FS+0x24>)
 80093ca:	f7fc f8ad 	bl	8005528 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80093ce:	4804      	ldr	r0, [pc, #16]	@ (80093e0 <CDC_Receive_FS+0x24>)
 80093d0:	f7fc f908 	bl	80055e4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80093d4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80093d6:	4618      	mov	r0, r3
 80093d8:	3708      	adds	r7, #8
 80093da:	46bd      	mov	sp, r7
 80093dc:	bd80      	pop	{r7, pc}
 80093de:	bf00      	nop
 80093e0:	20004068 	.word	0x20004068

080093e4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80093e4:	b580      	push	{r7, lr}
 80093e6:	b084      	sub	sp, #16
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	6078      	str	r0, [r7, #4]
 80093ec:	460b      	mov	r3, r1
 80093ee:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80093f0:	2300      	movs	r3, #0
 80093f2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80093f4:	4b0d      	ldr	r3, [pc, #52]	@ (800942c <CDC_Transmit_FS+0x48>)
 80093f6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80093fa:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80093fc:	68bb      	ldr	r3, [r7, #8]
 80093fe:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8009402:	2b00      	cmp	r3, #0
 8009404:	d001      	beq.n	800940a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8009406:	2301      	movs	r3, #1
 8009408:	e00b      	b.n	8009422 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800940a:	887b      	ldrh	r3, [r7, #2]
 800940c:	461a      	mov	r2, r3
 800940e:	6879      	ldr	r1, [r7, #4]
 8009410:	4806      	ldr	r0, [pc, #24]	@ (800942c <CDC_Transmit_FS+0x48>)
 8009412:	f7fc f867 	bl	80054e4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009416:	4805      	ldr	r0, [pc, #20]	@ (800942c <CDC_Transmit_FS+0x48>)
 8009418:	f7fc f8a4 	bl	8005564 <USBD_CDC_TransmitPacket>
 800941c:	4603      	mov	r3, r0
 800941e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009420:	7bfb      	ldrb	r3, [r7, #15]
}
 8009422:	4618      	mov	r0, r3
 8009424:	3710      	adds	r7, #16
 8009426:	46bd      	mov	sp, r7
 8009428:	bd80      	pop	{r7, pc}
 800942a:	bf00      	nop
 800942c:	20004068 	.word	0x20004068

08009430 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009430:	b480      	push	{r7}
 8009432:	b087      	sub	sp, #28
 8009434:	af00      	add	r7, sp, #0
 8009436:	60f8      	str	r0, [r7, #12]
 8009438:	60b9      	str	r1, [r7, #8]
 800943a:	4613      	mov	r3, r2
 800943c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800943e:	2300      	movs	r3, #0
 8009440:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8009442:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009446:	4618      	mov	r0, r3
 8009448:	371c      	adds	r7, #28
 800944a:	46bd      	mov	sp, r7
 800944c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009450:	4770      	bx	lr
	...

08009454 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009454:	b480      	push	{r7}
 8009456:	b083      	sub	sp, #12
 8009458:	af00      	add	r7, sp, #0
 800945a:	4603      	mov	r3, r0
 800945c:	6039      	str	r1, [r7, #0]
 800945e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009460:	683b      	ldr	r3, [r7, #0]
 8009462:	2212      	movs	r2, #18
 8009464:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009466:	4b03      	ldr	r3, [pc, #12]	@ (8009474 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009468:	4618      	mov	r0, r3
 800946a:	370c      	adds	r7, #12
 800946c:	46bd      	mov	sp, r7
 800946e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009472:	4770      	bx	lr
 8009474:	200000cc 	.word	0x200000cc

08009478 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009478:	b480      	push	{r7}
 800947a:	b083      	sub	sp, #12
 800947c:	af00      	add	r7, sp, #0
 800947e:	4603      	mov	r3, r0
 8009480:	6039      	str	r1, [r7, #0]
 8009482:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009484:	683b      	ldr	r3, [r7, #0]
 8009486:	2204      	movs	r2, #4
 8009488:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800948a:	4b03      	ldr	r3, [pc, #12]	@ (8009498 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800948c:	4618      	mov	r0, r3
 800948e:	370c      	adds	r7, #12
 8009490:	46bd      	mov	sp, r7
 8009492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009496:	4770      	bx	lr
 8009498:	200000e0 	.word	0x200000e0

0800949c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800949c:	b580      	push	{r7, lr}
 800949e:	b082      	sub	sp, #8
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	4603      	mov	r3, r0
 80094a4:	6039      	str	r1, [r7, #0]
 80094a6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80094a8:	79fb      	ldrb	r3, [r7, #7]
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d105      	bne.n	80094ba <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80094ae:	683a      	ldr	r2, [r7, #0]
 80094b0:	4907      	ldr	r1, [pc, #28]	@ (80094d0 <USBD_FS_ProductStrDescriptor+0x34>)
 80094b2:	4808      	ldr	r0, [pc, #32]	@ (80094d4 <USBD_FS_ProductStrDescriptor+0x38>)
 80094b4:	f7fd fae2 	bl	8006a7c <USBD_GetString>
 80094b8:	e004      	b.n	80094c4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80094ba:	683a      	ldr	r2, [r7, #0]
 80094bc:	4904      	ldr	r1, [pc, #16]	@ (80094d0 <USBD_FS_ProductStrDescriptor+0x34>)
 80094be:	4805      	ldr	r0, [pc, #20]	@ (80094d4 <USBD_FS_ProductStrDescriptor+0x38>)
 80094c0:	f7fd fadc 	bl	8006a7c <USBD_GetString>
  }
  return USBD_StrDesc;
 80094c4:	4b02      	ldr	r3, [pc, #8]	@ (80094d0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80094c6:	4618      	mov	r0, r3
 80094c8:	3708      	adds	r7, #8
 80094ca:	46bd      	mov	sp, r7
 80094cc:	bd80      	pop	{r7, pc}
 80094ce:	bf00      	nop
 80094d0:	20005344 	.word	0x20005344
 80094d4:	08009f68 	.word	0x08009f68

080094d8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80094d8:	b580      	push	{r7, lr}
 80094da:	b082      	sub	sp, #8
 80094dc:	af00      	add	r7, sp, #0
 80094de:	4603      	mov	r3, r0
 80094e0:	6039      	str	r1, [r7, #0]
 80094e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80094e4:	683a      	ldr	r2, [r7, #0]
 80094e6:	4904      	ldr	r1, [pc, #16]	@ (80094f8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80094e8:	4804      	ldr	r0, [pc, #16]	@ (80094fc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80094ea:	f7fd fac7 	bl	8006a7c <USBD_GetString>
  return USBD_StrDesc;
 80094ee:	4b02      	ldr	r3, [pc, #8]	@ (80094f8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80094f0:	4618      	mov	r0, r3
 80094f2:	3708      	adds	r7, #8
 80094f4:	46bd      	mov	sp, r7
 80094f6:	bd80      	pop	{r7, pc}
 80094f8:	20005344 	.word	0x20005344
 80094fc:	08009f7c 	.word	0x08009f7c

08009500 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009500:	b580      	push	{r7, lr}
 8009502:	b082      	sub	sp, #8
 8009504:	af00      	add	r7, sp, #0
 8009506:	4603      	mov	r3, r0
 8009508:	6039      	str	r1, [r7, #0]
 800950a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800950c:	683b      	ldr	r3, [r7, #0]
 800950e:	221a      	movs	r2, #26
 8009510:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009512:	f000 f843 	bl	800959c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009516:	4b02      	ldr	r3, [pc, #8]	@ (8009520 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009518:	4618      	mov	r0, r3
 800951a:	3708      	adds	r7, #8
 800951c:	46bd      	mov	sp, r7
 800951e:	bd80      	pop	{r7, pc}
 8009520:	200000e4 	.word	0x200000e4

08009524 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009524:	b580      	push	{r7, lr}
 8009526:	b082      	sub	sp, #8
 8009528:	af00      	add	r7, sp, #0
 800952a:	4603      	mov	r3, r0
 800952c:	6039      	str	r1, [r7, #0]
 800952e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009530:	79fb      	ldrb	r3, [r7, #7]
 8009532:	2b00      	cmp	r3, #0
 8009534:	d105      	bne.n	8009542 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009536:	683a      	ldr	r2, [r7, #0]
 8009538:	4907      	ldr	r1, [pc, #28]	@ (8009558 <USBD_FS_ConfigStrDescriptor+0x34>)
 800953a:	4808      	ldr	r0, [pc, #32]	@ (800955c <USBD_FS_ConfigStrDescriptor+0x38>)
 800953c:	f7fd fa9e 	bl	8006a7c <USBD_GetString>
 8009540:	e004      	b.n	800954c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009542:	683a      	ldr	r2, [r7, #0]
 8009544:	4904      	ldr	r1, [pc, #16]	@ (8009558 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009546:	4805      	ldr	r0, [pc, #20]	@ (800955c <USBD_FS_ConfigStrDescriptor+0x38>)
 8009548:	f7fd fa98 	bl	8006a7c <USBD_GetString>
  }
  return USBD_StrDesc;
 800954c:	4b02      	ldr	r3, [pc, #8]	@ (8009558 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800954e:	4618      	mov	r0, r3
 8009550:	3708      	adds	r7, #8
 8009552:	46bd      	mov	sp, r7
 8009554:	bd80      	pop	{r7, pc}
 8009556:	bf00      	nop
 8009558:	20005344 	.word	0x20005344
 800955c:	08009f90 	.word	0x08009f90

08009560 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009560:	b580      	push	{r7, lr}
 8009562:	b082      	sub	sp, #8
 8009564:	af00      	add	r7, sp, #0
 8009566:	4603      	mov	r3, r0
 8009568:	6039      	str	r1, [r7, #0]
 800956a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800956c:	79fb      	ldrb	r3, [r7, #7]
 800956e:	2b00      	cmp	r3, #0
 8009570:	d105      	bne.n	800957e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009572:	683a      	ldr	r2, [r7, #0]
 8009574:	4907      	ldr	r1, [pc, #28]	@ (8009594 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009576:	4808      	ldr	r0, [pc, #32]	@ (8009598 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009578:	f7fd fa80 	bl	8006a7c <USBD_GetString>
 800957c:	e004      	b.n	8009588 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800957e:	683a      	ldr	r2, [r7, #0]
 8009580:	4904      	ldr	r1, [pc, #16]	@ (8009594 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009582:	4805      	ldr	r0, [pc, #20]	@ (8009598 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009584:	f7fd fa7a 	bl	8006a7c <USBD_GetString>
  }
  return USBD_StrDesc;
 8009588:	4b02      	ldr	r3, [pc, #8]	@ (8009594 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800958a:	4618      	mov	r0, r3
 800958c:	3708      	adds	r7, #8
 800958e:	46bd      	mov	sp, r7
 8009590:	bd80      	pop	{r7, pc}
 8009592:	bf00      	nop
 8009594:	20005344 	.word	0x20005344
 8009598:	08009f9c 	.word	0x08009f9c

0800959c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800959c:	b580      	push	{r7, lr}
 800959e:	b084      	sub	sp, #16
 80095a0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80095a2:	4b0f      	ldr	r3, [pc, #60]	@ (80095e0 <Get_SerialNum+0x44>)
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80095a8:	4b0e      	ldr	r3, [pc, #56]	@ (80095e4 <Get_SerialNum+0x48>)
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80095ae:	4b0e      	ldr	r3, [pc, #56]	@ (80095e8 <Get_SerialNum+0x4c>)
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80095b4:	68fa      	ldr	r2, [r7, #12]
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	4413      	add	r3, r2
 80095ba:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d009      	beq.n	80095d6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80095c2:	2208      	movs	r2, #8
 80095c4:	4909      	ldr	r1, [pc, #36]	@ (80095ec <Get_SerialNum+0x50>)
 80095c6:	68f8      	ldr	r0, [r7, #12]
 80095c8:	f000 f814 	bl	80095f4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80095cc:	2204      	movs	r2, #4
 80095ce:	4908      	ldr	r1, [pc, #32]	@ (80095f0 <Get_SerialNum+0x54>)
 80095d0:	68b8      	ldr	r0, [r7, #8]
 80095d2:	f000 f80f 	bl	80095f4 <IntToUnicode>
  }
}
 80095d6:	bf00      	nop
 80095d8:	3710      	adds	r7, #16
 80095da:	46bd      	mov	sp, r7
 80095dc:	bd80      	pop	{r7, pc}
 80095de:	bf00      	nop
 80095e0:	1fff7a10 	.word	0x1fff7a10
 80095e4:	1fff7a14 	.word	0x1fff7a14
 80095e8:	1fff7a18 	.word	0x1fff7a18
 80095ec:	200000e6 	.word	0x200000e6
 80095f0:	200000f6 	.word	0x200000f6

080095f4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80095f4:	b480      	push	{r7}
 80095f6:	b087      	sub	sp, #28
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	60f8      	str	r0, [r7, #12]
 80095fc:	60b9      	str	r1, [r7, #8]
 80095fe:	4613      	mov	r3, r2
 8009600:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009602:	2300      	movs	r3, #0
 8009604:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009606:	2300      	movs	r3, #0
 8009608:	75fb      	strb	r3, [r7, #23]
 800960a:	e027      	b.n	800965c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	0f1b      	lsrs	r3, r3, #28
 8009610:	2b09      	cmp	r3, #9
 8009612:	d80b      	bhi.n	800962c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	0f1b      	lsrs	r3, r3, #28
 8009618:	b2da      	uxtb	r2, r3
 800961a:	7dfb      	ldrb	r3, [r7, #23]
 800961c:	005b      	lsls	r3, r3, #1
 800961e:	4619      	mov	r1, r3
 8009620:	68bb      	ldr	r3, [r7, #8]
 8009622:	440b      	add	r3, r1
 8009624:	3230      	adds	r2, #48	@ 0x30
 8009626:	b2d2      	uxtb	r2, r2
 8009628:	701a      	strb	r2, [r3, #0]
 800962a:	e00a      	b.n	8009642 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	0f1b      	lsrs	r3, r3, #28
 8009630:	b2da      	uxtb	r2, r3
 8009632:	7dfb      	ldrb	r3, [r7, #23]
 8009634:	005b      	lsls	r3, r3, #1
 8009636:	4619      	mov	r1, r3
 8009638:	68bb      	ldr	r3, [r7, #8]
 800963a:	440b      	add	r3, r1
 800963c:	3237      	adds	r2, #55	@ 0x37
 800963e:	b2d2      	uxtb	r2, r2
 8009640:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	011b      	lsls	r3, r3, #4
 8009646:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009648:	7dfb      	ldrb	r3, [r7, #23]
 800964a:	005b      	lsls	r3, r3, #1
 800964c:	3301      	adds	r3, #1
 800964e:	68ba      	ldr	r2, [r7, #8]
 8009650:	4413      	add	r3, r2
 8009652:	2200      	movs	r2, #0
 8009654:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009656:	7dfb      	ldrb	r3, [r7, #23]
 8009658:	3301      	adds	r3, #1
 800965a:	75fb      	strb	r3, [r7, #23]
 800965c:	7dfa      	ldrb	r2, [r7, #23]
 800965e:	79fb      	ldrb	r3, [r7, #7]
 8009660:	429a      	cmp	r2, r3
 8009662:	d3d3      	bcc.n	800960c <IntToUnicode+0x18>
  }
}
 8009664:	bf00      	nop
 8009666:	bf00      	nop
 8009668:	371c      	adds	r7, #28
 800966a:	46bd      	mov	sp, r7
 800966c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009670:	4770      	bx	lr
	...

08009674 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009674:	b580      	push	{r7, lr}
 8009676:	b08a      	sub	sp, #40	@ 0x28
 8009678:	af00      	add	r7, sp, #0
 800967a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800967c:	f107 0314 	add.w	r3, r7, #20
 8009680:	2200      	movs	r2, #0
 8009682:	601a      	str	r2, [r3, #0]
 8009684:	605a      	str	r2, [r3, #4]
 8009686:	609a      	str	r2, [r3, #8]
 8009688:	60da      	str	r2, [r3, #12]
 800968a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009694:	d13a      	bne.n	800970c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009696:	2300      	movs	r3, #0
 8009698:	613b      	str	r3, [r7, #16]
 800969a:	4b1e      	ldr	r3, [pc, #120]	@ (8009714 <HAL_PCD_MspInit+0xa0>)
 800969c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800969e:	4a1d      	ldr	r2, [pc, #116]	@ (8009714 <HAL_PCD_MspInit+0xa0>)
 80096a0:	f043 0301 	orr.w	r3, r3, #1
 80096a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80096a6:	4b1b      	ldr	r3, [pc, #108]	@ (8009714 <HAL_PCD_MspInit+0xa0>)
 80096a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80096aa:	f003 0301 	and.w	r3, r3, #1
 80096ae:	613b      	str	r3, [r7, #16]
 80096b0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80096b2:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80096b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80096b8:	2302      	movs	r3, #2
 80096ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80096bc:	2300      	movs	r3, #0
 80096be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80096c0:	2303      	movs	r3, #3
 80096c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80096c4:	230a      	movs	r3, #10
 80096c6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80096c8:	f107 0314 	add.w	r3, r7, #20
 80096cc:	4619      	mov	r1, r3
 80096ce:	4812      	ldr	r0, [pc, #72]	@ (8009718 <HAL_PCD_MspInit+0xa4>)
 80096d0:	f7f7 fbfc 	bl	8000ecc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80096d4:	4b0f      	ldr	r3, [pc, #60]	@ (8009714 <HAL_PCD_MspInit+0xa0>)
 80096d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80096d8:	4a0e      	ldr	r2, [pc, #56]	@ (8009714 <HAL_PCD_MspInit+0xa0>)
 80096da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80096de:	6353      	str	r3, [r2, #52]	@ 0x34
 80096e0:	2300      	movs	r3, #0
 80096e2:	60fb      	str	r3, [r7, #12]
 80096e4:	4b0b      	ldr	r3, [pc, #44]	@ (8009714 <HAL_PCD_MspInit+0xa0>)
 80096e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80096e8:	4a0a      	ldr	r2, [pc, #40]	@ (8009714 <HAL_PCD_MspInit+0xa0>)
 80096ea:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80096ee:	6453      	str	r3, [r2, #68]	@ 0x44
 80096f0:	4b08      	ldr	r3, [pc, #32]	@ (8009714 <HAL_PCD_MspInit+0xa0>)
 80096f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80096f4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80096f8:	60fb      	str	r3, [r7, #12]
 80096fa:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 80096fc:	2200      	movs	r2, #0
 80096fe:	2105      	movs	r1, #5
 8009700:	2043      	movs	r0, #67	@ 0x43
 8009702:	f7f7 fbb9 	bl	8000e78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009706:	2043      	movs	r0, #67	@ 0x43
 8009708:	f7f7 fbd2 	bl	8000eb0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800970c:	bf00      	nop
 800970e:	3728      	adds	r7, #40	@ 0x28
 8009710:	46bd      	mov	sp, r7
 8009712:	bd80      	pop	{r7, pc}
 8009714:	40023800 	.word	0x40023800
 8009718:	40020000 	.word	0x40020000

0800971c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800971c:	b580      	push	{r7, lr}
 800971e:	b082      	sub	sp, #8
 8009720:	af00      	add	r7, sp, #0
 8009722:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8009730:	4619      	mov	r1, r3
 8009732:	4610      	mov	r0, r2
 8009734:	f7fc f83f 	bl	80057b6 <USBD_LL_SetupStage>
}
 8009738:	bf00      	nop
 800973a:	3708      	adds	r7, #8
 800973c:	46bd      	mov	sp, r7
 800973e:	bd80      	pop	{r7, pc}

08009740 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009740:	b580      	push	{r7, lr}
 8009742:	b082      	sub	sp, #8
 8009744:	af00      	add	r7, sp, #0
 8009746:	6078      	str	r0, [r7, #4]
 8009748:	460b      	mov	r3, r1
 800974a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8009752:	78fa      	ldrb	r2, [r7, #3]
 8009754:	6879      	ldr	r1, [r7, #4]
 8009756:	4613      	mov	r3, r2
 8009758:	00db      	lsls	r3, r3, #3
 800975a:	4413      	add	r3, r2
 800975c:	009b      	lsls	r3, r3, #2
 800975e:	440b      	add	r3, r1
 8009760:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8009764:	681a      	ldr	r2, [r3, #0]
 8009766:	78fb      	ldrb	r3, [r7, #3]
 8009768:	4619      	mov	r1, r3
 800976a:	f7fc f879 	bl	8005860 <USBD_LL_DataOutStage>
}
 800976e:	bf00      	nop
 8009770:	3708      	adds	r7, #8
 8009772:	46bd      	mov	sp, r7
 8009774:	bd80      	pop	{r7, pc}

08009776 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009776:	b580      	push	{r7, lr}
 8009778:	b082      	sub	sp, #8
 800977a:	af00      	add	r7, sp, #0
 800977c:	6078      	str	r0, [r7, #4]
 800977e:	460b      	mov	r3, r1
 8009780:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8009788:	78fa      	ldrb	r2, [r7, #3]
 800978a:	6879      	ldr	r1, [r7, #4]
 800978c:	4613      	mov	r3, r2
 800978e:	00db      	lsls	r3, r3, #3
 8009790:	4413      	add	r3, r2
 8009792:	009b      	lsls	r3, r3, #2
 8009794:	440b      	add	r3, r1
 8009796:	3320      	adds	r3, #32
 8009798:	681a      	ldr	r2, [r3, #0]
 800979a:	78fb      	ldrb	r3, [r7, #3]
 800979c:	4619      	mov	r1, r3
 800979e:	f7fc f912 	bl	80059c6 <USBD_LL_DataInStage>
}
 80097a2:	bf00      	nop
 80097a4:	3708      	adds	r7, #8
 80097a6:	46bd      	mov	sp, r7
 80097a8:	bd80      	pop	{r7, pc}

080097aa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80097aa:	b580      	push	{r7, lr}
 80097ac:	b082      	sub	sp, #8
 80097ae:	af00      	add	r7, sp, #0
 80097b0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80097b8:	4618      	mov	r0, r3
 80097ba:	f7fc fa4c 	bl	8005c56 <USBD_LL_SOF>
}
 80097be:	bf00      	nop
 80097c0:	3708      	adds	r7, #8
 80097c2:	46bd      	mov	sp, r7
 80097c4:	bd80      	pop	{r7, pc}

080097c6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80097c6:	b580      	push	{r7, lr}
 80097c8:	b084      	sub	sp, #16
 80097ca:	af00      	add	r7, sp, #0
 80097cc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80097ce:	2301      	movs	r3, #1
 80097d0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	79db      	ldrb	r3, [r3, #7]
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d102      	bne.n	80097e0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80097da:	2300      	movs	r3, #0
 80097dc:	73fb      	strb	r3, [r7, #15]
 80097de:	e008      	b.n	80097f2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	79db      	ldrb	r3, [r3, #7]
 80097e4:	2b02      	cmp	r3, #2
 80097e6:	d102      	bne.n	80097ee <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80097e8:	2301      	movs	r3, #1
 80097ea:	73fb      	strb	r3, [r7, #15]
 80097ec:	e001      	b.n	80097f2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80097ee:	f7f7 f904 	bl	80009fa <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80097f8:	7bfa      	ldrb	r2, [r7, #15]
 80097fa:	4611      	mov	r1, r2
 80097fc:	4618      	mov	r0, r3
 80097fe:	f7fc f9e6 	bl	8005bce <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009808:	4618      	mov	r0, r3
 800980a:	f7fc f98e 	bl	8005b2a <USBD_LL_Reset>
}
 800980e:	bf00      	nop
 8009810:	3710      	adds	r7, #16
 8009812:	46bd      	mov	sp, r7
 8009814:	bd80      	pop	{r7, pc}
	...

08009818 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009818:	b580      	push	{r7, lr}
 800981a:	b082      	sub	sp, #8
 800981c:	af00      	add	r7, sp, #0
 800981e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009826:	4618      	mov	r0, r3
 8009828:	f7fc f9e1 	bl	8005bee <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	687a      	ldr	r2, [r7, #4]
 8009838:	6812      	ldr	r2, [r2, #0]
 800983a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800983e:	f043 0301 	orr.w	r3, r3, #1
 8009842:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	7adb      	ldrb	r3, [r3, #11]
 8009848:	2b00      	cmp	r3, #0
 800984a:	d005      	beq.n	8009858 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800984c:	4b04      	ldr	r3, [pc, #16]	@ (8009860 <HAL_PCD_SuspendCallback+0x48>)
 800984e:	691b      	ldr	r3, [r3, #16]
 8009850:	4a03      	ldr	r2, [pc, #12]	@ (8009860 <HAL_PCD_SuspendCallback+0x48>)
 8009852:	f043 0306 	orr.w	r3, r3, #6
 8009856:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009858:	bf00      	nop
 800985a:	3708      	adds	r7, #8
 800985c:	46bd      	mov	sp, r7
 800985e:	bd80      	pop	{r7, pc}
 8009860:	e000ed00 	.word	0xe000ed00

08009864 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009864:	b580      	push	{r7, lr}
 8009866:	b082      	sub	sp, #8
 8009868:	af00      	add	r7, sp, #0
 800986a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009872:	4618      	mov	r0, r3
 8009874:	f7fc f9d7 	bl	8005c26 <USBD_LL_Resume>
}
 8009878:	bf00      	nop
 800987a:	3708      	adds	r7, #8
 800987c:	46bd      	mov	sp, r7
 800987e:	bd80      	pop	{r7, pc}

08009880 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009880:	b580      	push	{r7, lr}
 8009882:	b082      	sub	sp, #8
 8009884:	af00      	add	r7, sp, #0
 8009886:	6078      	str	r0, [r7, #4]
 8009888:	460b      	mov	r3, r1
 800988a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009892:	78fa      	ldrb	r2, [r7, #3]
 8009894:	4611      	mov	r1, r2
 8009896:	4618      	mov	r0, r3
 8009898:	f7fc fa2f 	bl	8005cfa <USBD_LL_IsoOUTIncomplete>
}
 800989c:	bf00      	nop
 800989e:	3708      	adds	r7, #8
 80098a0:	46bd      	mov	sp, r7
 80098a2:	bd80      	pop	{r7, pc}

080098a4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80098a4:	b580      	push	{r7, lr}
 80098a6:	b082      	sub	sp, #8
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	6078      	str	r0, [r7, #4]
 80098ac:	460b      	mov	r3, r1
 80098ae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80098b6:	78fa      	ldrb	r2, [r7, #3]
 80098b8:	4611      	mov	r1, r2
 80098ba:	4618      	mov	r0, r3
 80098bc:	f7fc f9eb 	bl	8005c96 <USBD_LL_IsoINIncomplete>
}
 80098c0:	bf00      	nop
 80098c2:	3708      	adds	r7, #8
 80098c4:	46bd      	mov	sp, r7
 80098c6:	bd80      	pop	{r7, pc}

080098c8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80098c8:	b580      	push	{r7, lr}
 80098ca:	b082      	sub	sp, #8
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80098d6:	4618      	mov	r0, r3
 80098d8:	f7fc fa41 	bl	8005d5e <USBD_LL_DevConnected>
}
 80098dc:	bf00      	nop
 80098de:	3708      	adds	r7, #8
 80098e0:	46bd      	mov	sp, r7
 80098e2:	bd80      	pop	{r7, pc}

080098e4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80098e4:	b580      	push	{r7, lr}
 80098e6:	b082      	sub	sp, #8
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80098f2:	4618      	mov	r0, r3
 80098f4:	f7fc fa3e 	bl	8005d74 <USBD_LL_DevDisconnected>
}
 80098f8:	bf00      	nop
 80098fa:	3708      	adds	r7, #8
 80098fc:	46bd      	mov	sp, r7
 80098fe:	bd80      	pop	{r7, pc}

08009900 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009900:	b580      	push	{r7, lr}
 8009902:	b082      	sub	sp, #8
 8009904:	af00      	add	r7, sp, #0
 8009906:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	781b      	ldrb	r3, [r3, #0]
 800990c:	2b00      	cmp	r3, #0
 800990e:	d13c      	bne.n	800998a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009910:	4a20      	ldr	r2, [pc, #128]	@ (8009994 <USBD_LL_Init+0x94>)
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	4a1e      	ldr	r2, [pc, #120]	@ (8009994 <USBD_LL_Init+0x94>)
 800991c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009920:	4b1c      	ldr	r3, [pc, #112]	@ (8009994 <USBD_LL_Init+0x94>)
 8009922:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8009926:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009928:	4b1a      	ldr	r3, [pc, #104]	@ (8009994 <USBD_LL_Init+0x94>)
 800992a:	2204      	movs	r2, #4
 800992c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800992e:	4b19      	ldr	r3, [pc, #100]	@ (8009994 <USBD_LL_Init+0x94>)
 8009930:	2202      	movs	r2, #2
 8009932:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009934:	4b17      	ldr	r3, [pc, #92]	@ (8009994 <USBD_LL_Init+0x94>)
 8009936:	2200      	movs	r2, #0
 8009938:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800993a:	4b16      	ldr	r3, [pc, #88]	@ (8009994 <USBD_LL_Init+0x94>)
 800993c:	2202      	movs	r2, #2
 800993e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009940:	4b14      	ldr	r3, [pc, #80]	@ (8009994 <USBD_LL_Init+0x94>)
 8009942:	2200      	movs	r2, #0
 8009944:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009946:	4b13      	ldr	r3, [pc, #76]	@ (8009994 <USBD_LL_Init+0x94>)
 8009948:	2200      	movs	r2, #0
 800994a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800994c:	4b11      	ldr	r3, [pc, #68]	@ (8009994 <USBD_LL_Init+0x94>)
 800994e:	2200      	movs	r2, #0
 8009950:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009952:	4b10      	ldr	r3, [pc, #64]	@ (8009994 <USBD_LL_Init+0x94>)
 8009954:	2200      	movs	r2, #0
 8009956:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009958:	4b0e      	ldr	r3, [pc, #56]	@ (8009994 <USBD_LL_Init+0x94>)
 800995a:	2200      	movs	r2, #0
 800995c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800995e:	480d      	ldr	r0, [pc, #52]	@ (8009994 <USBD_LL_Init+0x94>)
 8009960:	f7f7 fcb4 	bl	80012cc <HAL_PCD_Init>
 8009964:	4603      	mov	r3, r0
 8009966:	2b00      	cmp	r3, #0
 8009968:	d001      	beq.n	800996e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800996a:	f7f7 f846 	bl	80009fa <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800996e:	2180      	movs	r1, #128	@ 0x80
 8009970:	4808      	ldr	r0, [pc, #32]	@ (8009994 <USBD_LL_Init+0x94>)
 8009972:	f7f8 fee0 	bl	8002736 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009976:	2240      	movs	r2, #64	@ 0x40
 8009978:	2100      	movs	r1, #0
 800997a:	4806      	ldr	r0, [pc, #24]	@ (8009994 <USBD_LL_Init+0x94>)
 800997c:	f7f8 fe94 	bl	80026a8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009980:	2280      	movs	r2, #128	@ 0x80
 8009982:	2101      	movs	r1, #1
 8009984:	4803      	ldr	r0, [pc, #12]	@ (8009994 <USBD_LL_Init+0x94>)
 8009986:	f7f8 fe8f 	bl	80026a8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800998a:	2300      	movs	r3, #0
}
 800998c:	4618      	mov	r0, r3
 800998e:	3708      	adds	r7, #8
 8009990:	46bd      	mov	sp, r7
 8009992:	bd80      	pop	{r7, pc}
 8009994:	20005544 	.word	0x20005544

08009998 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009998:	b580      	push	{r7, lr}
 800999a:	b084      	sub	sp, #16
 800999c:	af00      	add	r7, sp, #0
 800999e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80099a0:	2300      	movs	r3, #0
 80099a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80099a4:	2300      	movs	r3, #0
 80099a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80099ae:	4618      	mov	r0, r3
 80099b0:	f7f7 fd9b 	bl	80014ea <HAL_PCD_Start>
 80099b4:	4603      	mov	r3, r0
 80099b6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80099b8:	7bfb      	ldrb	r3, [r7, #15]
 80099ba:	4618      	mov	r0, r3
 80099bc:	f000 f942 	bl	8009c44 <USBD_Get_USB_Status>
 80099c0:	4603      	mov	r3, r0
 80099c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80099c4:	7bbb      	ldrb	r3, [r7, #14]
}
 80099c6:	4618      	mov	r0, r3
 80099c8:	3710      	adds	r7, #16
 80099ca:	46bd      	mov	sp, r7
 80099cc:	bd80      	pop	{r7, pc}

080099ce <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80099ce:	b580      	push	{r7, lr}
 80099d0:	b084      	sub	sp, #16
 80099d2:	af00      	add	r7, sp, #0
 80099d4:	6078      	str	r0, [r7, #4]
 80099d6:	4608      	mov	r0, r1
 80099d8:	4611      	mov	r1, r2
 80099da:	461a      	mov	r2, r3
 80099dc:	4603      	mov	r3, r0
 80099de:	70fb      	strb	r3, [r7, #3]
 80099e0:	460b      	mov	r3, r1
 80099e2:	70bb      	strb	r3, [r7, #2]
 80099e4:	4613      	mov	r3, r2
 80099e6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80099e8:	2300      	movs	r3, #0
 80099ea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80099ec:	2300      	movs	r3, #0
 80099ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80099f6:	78bb      	ldrb	r3, [r7, #2]
 80099f8:	883a      	ldrh	r2, [r7, #0]
 80099fa:	78f9      	ldrb	r1, [r7, #3]
 80099fc:	f7f8 fa6f 	bl	8001ede <HAL_PCD_EP_Open>
 8009a00:	4603      	mov	r3, r0
 8009a02:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a04:	7bfb      	ldrb	r3, [r7, #15]
 8009a06:	4618      	mov	r0, r3
 8009a08:	f000 f91c 	bl	8009c44 <USBD_Get_USB_Status>
 8009a0c:	4603      	mov	r3, r0
 8009a0e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a10:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a12:	4618      	mov	r0, r3
 8009a14:	3710      	adds	r7, #16
 8009a16:	46bd      	mov	sp, r7
 8009a18:	bd80      	pop	{r7, pc}

08009a1a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009a1a:	b580      	push	{r7, lr}
 8009a1c:	b084      	sub	sp, #16
 8009a1e:	af00      	add	r7, sp, #0
 8009a20:	6078      	str	r0, [r7, #4]
 8009a22:	460b      	mov	r3, r1
 8009a24:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a26:	2300      	movs	r3, #0
 8009a28:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a2a:	2300      	movs	r3, #0
 8009a2c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009a34:	78fa      	ldrb	r2, [r7, #3]
 8009a36:	4611      	mov	r1, r2
 8009a38:	4618      	mov	r0, r3
 8009a3a:	f7f8 faba 	bl	8001fb2 <HAL_PCD_EP_Close>
 8009a3e:	4603      	mov	r3, r0
 8009a40:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a42:	7bfb      	ldrb	r3, [r7, #15]
 8009a44:	4618      	mov	r0, r3
 8009a46:	f000 f8fd 	bl	8009c44 <USBD_Get_USB_Status>
 8009a4a:	4603      	mov	r3, r0
 8009a4c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a4e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a50:	4618      	mov	r0, r3
 8009a52:	3710      	adds	r7, #16
 8009a54:	46bd      	mov	sp, r7
 8009a56:	bd80      	pop	{r7, pc}

08009a58 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009a58:	b580      	push	{r7, lr}
 8009a5a:	b084      	sub	sp, #16
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	6078      	str	r0, [r7, #4]
 8009a60:	460b      	mov	r3, r1
 8009a62:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a64:	2300      	movs	r3, #0
 8009a66:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a68:	2300      	movs	r3, #0
 8009a6a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009a72:	78fa      	ldrb	r2, [r7, #3]
 8009a74:	4611      	mov	r1, r2
 8009a76:	4618      	mov	r0, r3
 8009a78:	f7f8 fb72 	bl	8002160 <HAL_PCD_EP_SetStall>
 8009a7c:	4603      	mov	r3, r0
 8009a7e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a80:	7bfb      	ldrb	r3, [r7, #15]
 8009a82:	4618      	mov	r0, r3
 8009a84:	f000 f8de 	bl	8009c44 <USBD_Get_USB_Status>
 8009a88:	4603      	mov	r3, r0
 8009a8a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a8c:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a8e:	4618      	mov	r0, r3
 8009a90:	3710      	adds	r7, #16
 8009a92:	46bd      	mov	sp, r7
 8009a94:	bd80      	pop	{r7, pc}

08009a96 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009a96:	b580      	push	{r7, lr}
 8009a98:	b084      	sub	sp, #16
 8009a9a:	af00      	add	r7, sp, #0
 8009a9c:	6078      	str	r0, [r7, #4]
 8009a9e:	460b      	mov	r3, r1
 8009aa0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009aa2:	2300      	movs	r3, #0
 8009aa4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009ab0:	78fa      	ldrb	r2, [r7, #3]
 8009ab2:	4611      	mov	r1, r2
 8009ab4:	4618      	mov	r0, r3
 8009ab6:	f7f8 fbb6 	bl	8002226 <HAL_PCD_EP_ClrStall>
 8009aba:	4603      	mov	r3, r0
 8009abc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009abe:	7bfb      	ldrb	r3, [r7, #15]
 8009ac0:	4618      	mov	r0, r3
 8009ac2:	f000 f8bf 	bl	8009c44 <USBD_Get_USB_Status>
 8009ac6:	4603      	mov	r3, r0
 8009ac8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009aca:	7bbb      	ldrb	r3, [r7, #14]
}
 8009acc:	4618      	mov	r0, r3
 8009ace:	3710      	adds	r7, #16
 8009ad0:	46bd      	mov	sp, r7
 8009ad2:	bd80      	pop	{r7, pc}

08009ad4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009ad4:	b480      	push	{r7}
 8009ad6:	b085      	sub	sp, #20
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	6078      	str	r0, [r7, #4]
 8009adc:	460b      	mov	r3, r1
 8009ade:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009ae6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009ae8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	da0b      	bge.n	8009b08 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009af0:	78fb      	ldrb	r3, [r7, #3]
 8009af2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009af6:	68f9      	ldr	r1, [r7, #12]
 8009af8:	4613      	mov	r3, r2
 8009afa:	00db      	lsls	r3, r3, #3
 8009afc:	4413      	add	r3, r2
 8009afe:	009b      	lsls	r3, r3, #2
 8009b00:	440b      	add	r3, r1
 8009b02:	3316      	adds	r3, #22
 8009b04:	781b      	ldrb	r3, [r3, #0]
 8009b06:	e00b      	b.n	8009b20 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009b08:	78fb      	ldrb	r3, [r7, #3]
 8009b0a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009b0e:	68f9      	ldr	r1, [r7, #12]
 8009b10:	4613      	mov	r3, r2
 8009b12:	00db      	lsls	r3, r3, #3
 8009b14:	4413      	add	r3, r2
 8009b16:	009b      	lsls	r3, r3, #2
 8009b18:	440b      	add	r3, r1
 8009b1a:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8009b1e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009b20:	4618      	mov	r0, r3
 8009b22:	3714      	adds	r7, #20
 8009b24:	46bd      	mov	sp, r7
 8009b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2a:	4770      	bx	lr

08009b2c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009b2c:	b580      	push	{r7, lr}
 8009b2e:	b084      	sub	sp, #16
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	6078      	str	r0, [r7, #4]
 8009b34:	460b      	mov	r3, r1
 8009b36:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b38:	2300      	movs	r3, #0
 8009b3a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b3c:	2300      	movs	r3, #0
 8009b3e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009b46:	78fa      	ldrb	r2, [r7, #3]
 8009b48:	4611      	mov	r1, r2
 8009b4a:	4618      	mov	r0, r3
 8009b4c:	f7f8 f9a3 	bl	8001e96 <HAL_PCD_SetAddress>
 8009b50:	4603      	mov	r3, r0
 8009b52:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b54:	7bfb      	ldrb	r3, [r7, #15]
 8009b56:	4618      	mov	r0, r3
 8009b58:	f000 f874 	bl	8009c44 <USBD_Get_USB_Status>
 8009b5c:	4603      	mov	r3, r0
 8009b5e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009b60:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b62:	4618      	mov	r0, r3
 8009b64:	3710      	adds	r7, #16
 8009b66:	46bd      	mov	sp, r7
 8009b68:	bd80      	pop	{r7, pc}

08009b6a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009b6a:	b580      	push	{r7, lr}
 8009b6c:	b086      	sub	sp, #24
 8009b6e:	af00      	add	r7, sp, #0
 8009b70:	60f8      	str	r0, [r7, #12]
 8009b72:	607a      	str	r2, [r7, #4]
 8009b74:	603b      	str	r3, [r7, #0]
 8009b76:	460b      	mov	r3, r1
 8009b78:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b7e:	2300      	movs	r3, #0
 8009b80:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009b88:	7af9      	ldrb	r1, [r7, #11]
 8009b8a:	683b      	ldr	r3, [r7, #0]
 8009b8c:	687a      	ldr	r2, [r7, #4]
 8009b8e:	f7f8 faad 	bl	80020ec <HAL_PCD_EP_Transmit>
 8009b92:	4603      	mov	r3, r0
 8009b94:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b96:	7dfb      	ldrb	r3, [r7, #23]
 8009b98:	4618      	mov	r0, r3
 8009b9a:	f000 f853 	bl	8009c44 <USBD_Get_USB_Status>
 8009b9e:	4603      	mov	r3, r0
 8009ba0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009ba2:	7dbb      	ldrb	r3, [r7, #22]
}
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	3718      	adds	r7, #24
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	bd80      	pop	{r7, pc}

08009bac <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009bac:	b580      	push	{r7, lr}
 8009bae:	b086      	sub	sp, #24
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	60f8      	str	r0, [r7, #12]
 8009bb4:	607a      	str	r2, [r7, #4]
 8009bb6:	603b      	str	r3, [r7, #0]
 8009bb8:	460b      	mov	r3, r1
 8009bba:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009bbc:	2300      	movs	r3, #0
 8009bbe:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009bc0:	2300      	movs	r3, #0
 8009bc2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009bca:	7af9      	ldrb	r1, [r7, #11]
 8009bcc:	683b      	ldr	r3, [r7, #0]
 8009bce:	687a      	ldr	r2, [r7, #4]
 8009bd0:	f7f8 fa39 	bl	8002046 <HAL_PCD_EP_Receive>
 8009bd4:	4603      	mov	r3, r0
 8009bd6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009bd8:	7dfb      	ldrb	r3, [r7, #23]
 8009bda:	4618      	mov	r0, r3
 8009bdc:	f000 f832 	bl	8009c44 <USBD_Get_USB_Status>
 8009be0:	4603      	mov	r3, r0
 8009be2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009be4:	7dbb      	ldrb	r3, [r7, #22]
}
 8009be6:	4618      	mov	r0, r3
 8009be8:	3718      	adds	r7, #24
 8009bea:	46bd      	mov	sp, r7
 8009bec:	bd80      	pop	{r7, pc}

08009bee <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009bee:	b580      	push	{r7, lr}
 8009bf0:	b082      	sub	sp, #8
 8009bf2:	af00      	add	r7, sp, #0
 8009bf4:	6078      	str	r0, [r7, #4]
 8009bf6:	460b      	mov	r3, r1
 8009bf8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009c00:	78fa      	ldrb	r2, [r7, #3]
 8009c02:	4611      	mov	r1, r2
 8009c04:	4618      	mov	r0, r3
 8009c06:	f7f8 fa59 	bl	80020bc <HAL_PCD_EP_GetRxCount>
 8009c0a:	4603      	mov	r3, r0
}
 8009c0c:	4618      	mov	r0, r3
 8009c0e:	3708      	adds	r7, #8
 8009c10:	46bd      	mov	sp, r7
 8009c12:	bd80      	pop	{r7, pc}

08009c14 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009c14:	b480      	push	{r7}
 8009c16:	b083      	sub	sp, #12
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009c1c:	4b03      	ldr	r3, [pc, #12]	@ (8009c2c <USBD_static_malloc+0x18>)
}
 8009c1e:	4618      	mov	r0, r3
 8009c20:	370c      	adds	r7, #12
 8009c22:	46bd      	mov	sp, r7
 8009c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c28:	4770      	bx	lr
 8009c2a:	bf00      	nop
 8009c2c:	20005a28 	.word	0x20005a28

08009c30 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009c30:	b480      	push	{r7}
 8009c32:	b083      	sub	sp, #12
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	6078      	str	r0, [r7, #4]

}
 8009c38:	bf00      	nop
 8009c3a:	370c      	adds	r7, #12
 8009c3c:	46bd      	mov	sp, r7
 8009c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c42:	4770      	bx	lr

08009c44 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009c44:	b480      	push	{r7}
 8009c46:	b085      	sub	sp, #20
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	4603      	mov	r3, r0
 8009c4c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c4e:	2300      	movs	r3, #0
 8009c50:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009c52:	79fb      	ldrb	r3, [r7, #7]
 8009c54:	2b03      	cmp	r3, #3
 8009c56:	d817      	bhi.n	8009c88 <USBD_Get_USB_Status+0x44>
 8009c58:	a201      	add	r2, pc, #4	@ (adr r2, 8009c60 <USBD_Get_USB_Status+0x1c>)
 8009c5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c5e:	bf00      	nop
 8009c60:	08009c71 	.word	0x08009c71
 8009c64:	08009c77 	.word	0x08009c77
 8009c68:	08009c7d 	.word	0x08009c7d
 8009c6c:	08009c83 	.word	0x08009c83
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009c70:	2300      	movs	r3, #0
 8009c72:	73fb      	strb	r3, [r7, #15]
    break;
 8009c74:	e00b      	b.n	8009c8e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009c76:	2303      	movs	r3, #3
 8009c78:	73fb      	strb	r3, [r7, #15]
    break;
 8009c7a:	e008      	b.n	8009c8e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009c7c:	2301      	movs	r3, #1
 8009c7e:	73fb      	strb	r3, [r7, #15]
    break;
 8009c80:	e005      	b.n	8009c8e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009c82:	2303      	movs	r3, #3
 8009c84:	73fb      	strb	r3, [r7, #15]
    break;
 8009c86:	e002      	b.n	8009c8e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009c88:	2303      	movs	r3, #3
 8009c8a:	73fb      	strb	r3, [r7, #15]
    break;
 8009c8c:	bf00      	nop
  }
  return usb_status;
 8009c8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c90:	4618      	mov	r0, r3
 8009c92:	3714      	adds	r7, #20
 8009c94:	46bd      	mov	sp, r7
 8009c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c9a:	4770      	bx	lr

08009c9c <memset>:
 8009c9c:	4402      	add	r2, r0
 8009c9e:	4603      	mov	r3, r0
 8009ca0:	4293      	cmp	r3, r2
 8009ca2:	d100      	bne.n	8009ca6 <memset+0xa>
 8009ca4:	4770      	bx	lr
 8009ca6:	f803 1b01 	strb.w	r1, [r3], #1
 8009caa:	e7f9      	b.n	8009ca0 <memset+0x4>

08009cac <_reclaim_reent>:
 8009cac:	4b29      	ldr	r3, [pc, #164]	@ (8009d54 <_reclaim_reent+0xa8>)
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	4283      	cmp	r3, r0
 8009cb2:	b570      	push	{r4, r5, r6, lr}
 8009cb4:	4604      	mov	r4, r0
 8009cb6:	d04b      	beq.n	8009d50 <_reclaim_reent+0xa4>
 8009cb8:	69c3      	ldr	r3, [r0, #28]
 8009cba:	b1ab      	cbz	r3, 8009ce8 <_reclaim_reent+0x3c>
 8009cbc:	68db      	ldr	r3, [r3, #12]
 8009cbe:	b16b      	cbz	r3, 8009cdc <_reclaim_reent+0x30>
 8009cc0:	2500      	movs	r5, #0
 8009cc2:	69e3      	ldr	r3, [r4, #28]
 8009cc4:	68db      	ldr	r3, [r3, #12]
 8009cc6:	5959      	ldr	r1, [r3, r5]
 8009cc8:	2900      	cmp	r1, #0
 8009cca:	d13b      	bne.n	8009d44 <_reclaim_reent+0x98>
 8009ccc:	3504      	adds	r5, #4
 8009cce:	2d80      	cmp	r5, #128	@ 0x80
 8009cd0:	d1f7      	bne.n	8009cc2 <_reclaim_reent+0x16>
 8009cd2:	69e3      	ldr	r3, [r4, #28]
 8009cd4:	4620      	mov	r0, r4
 8009cd6:	68d9      	ldr	r1, [r3, #12]
 8009cd8:	f000 f872 	bl	8009dc0 <_free_r>
 8009cdc:	69e3      	ldr	r3, [r4, #28]
 8009cde:	6819      	ldr	r1, [r3, #0]
 8009ce0:	b111      	cbz	r1, 8009ce8 <_reclaim_reent+0x3c>
 8009ce2:	4620      	mov	r0, r4
 8009ce4:	f000 f86c 	bl	8009dc0 <_free_r>
 8009ce8:	6961      	ldr	r1, [r4, #20]
 8009cea:	b111      	cbz	r1, 8009cf2 <_reclaim_reent+0x46>
 8009cec:	4620      	mov	r0, r4
 8009cee:	f000 f867 	bl	8009dc0 <_free_r>
 8009cf2:	69e1      	ldr	r1, [r4, #28]
 8009cf4:	b111      	cbz	r1, 8009cfc <_reclaim_reent+0x50>
 8009cf6:	4620      	mov	r0, r4
 8009cf8:	f000 f862 	bl	8009dc0 <_free_r>
 8009cfc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8009cfe:	b111      	cbz	r1, 8009d06 <_reclaim_reent+0x5a>
 8009d00:	4620      	mov	r0, r4
 8009d02:	f000 f85d 	bl	8009dc0 <_free_r>
 8009d06:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009d08:	b111      	cbz	r1, 8009d10 <_reclaim_reent+0x64>
 8009d0a:	4620      	mov	r0, r4
 8009d0c:	f000 f858 	bl	8009dc0 <_free_r>
 8009d10:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8009d12:	b111      	cbz	r1, 8009d1a <_reclaim_reent+0x6e>
 8009d14:	4620      	mov	r0, r4
 8009d16:	f000 f853 	bl	8009dc0 <_free_r>
 8009d1a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8009d1c:	b111      	cbz	r1, 8009d24 <_reclaim_reent+0x78>
 8009d1e:	4620      	mov	r0, r4
 8009d20:	f000 f84e 	bl	8009dc0 <_free_r>
 8009d24:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8009d26:	b111      	cbz	r1, 8009d2e <_reclaim_reent+0x82>
 8009d28:	4620      	mov	r0, r4
 8009d2a:	f000 f849 	bl	8009dc0 <_free_r>
 8009d2e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8009d30:	b111      	cbz	r1, 8009d38 <_reclaim_reent+0x8c>
 8009d32:	4620      	mov	r0, r4
 8009d34:	f000 f844 	bl	8009dc0 <_free_r>
 8009d38:	6a23      	ldr	r3, [r4, #32]
 8009d3a:	b14b      	cbz	r3, 8009d50 <_reclaim_reent+0xa4>
 8009d3c:	4620      	mov	r0, r4
 8009d3e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009d42:	4718      	bx	r3
 8009d44:	680e      	ldr	r6, [r1, #0]
 8009d46:	4620      	mov	r0, r4
 8009d48:	f000 f83a 	bl	8009dc0 <_free_r>
 8009d4c:	4631      	mov	r1, r6
 8009d4e:	e7bb      	b.n	8009cc8 <_reclaim_reent+0x1c>
 8009d50:	bd70      	pop	{r4, r5, r6, pc}
 8009d52:	bf00      	nop
 8009d54:	20000100 	.word	0x20000100

08009d58 <__libc_init_array>:
 8009d58:	b570      	push	{r4, r5, r6, lr}
 8009d5a:	4d0d      	ldr	r5, [pc, #52]	@ (8009d90 <__libc_init_array+0x38>)
 8009d5c:	4c0d      	ldr	r4, [pc, #52]	@ (8009d94 <__libc_init_array+0x3c>)
 8009d5e:	1b64      	subs	r4, r4, r5
 8009d60:	10a4      	asrs	r4, r4, #2
 8009d62:	2600      	movs	r6, #0
 8009d64:	42a6      	cmp	r6, r4
 8009d66:	d109      	bne.n	8009d7c <__libc_init_array+0x24>
 8009d68:	4d0b      	ldr	r5, [pc, #44]	@ (8009d98 <__libc_init_array+0x40>)
 8009d6a:	4c0c      	ldr	r4, [pc, #48]	@ (8009d9c <__libc_init_array+0x44>)
 8009d6c:	f000 f87e 	bl	8009e6c <_init>
 8009d70:	1b64      	subs	r4, r4, r5
 8009d72:	10a4      	asrs	r4, r4, #2
 8009d74:	2600      	movs	r6, #0
 8009d76:	42a6      	cmp	r6, r4
 8009d78:	d105      	bne.n	8009d86 <__libc_init_array+0x2e>
 8009d7a:	bd70      	pop	{r4, r5, r6, pc}
 8009d7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d80:	4798      	blx	r3
 8009d82:	3601      	adds	r6, #1
 8009d84:	e7ee      	b.n	8009d64 <__libc_init_array+0xc>
 8009d86:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d8a:	4798      	blx	r3
 8009d8c:	3601      	adds	r6, #1
 8009d8e:	e7f2      	b.n	8009d76 <__libc_init_array+0x1e>
 8009d90:	08009fcc 	.word	0x08009fcc
 8009d94:	08009fcc 	.word	0x08009fcc
 8009d98:	08009fcc 	.word	0x08009fcc
 8009d9c:	08009fd0 	.word	0x08009fd0

08009da0 <__retarget_lock_acquire_recursive>:
 8009da0:	4770      	bx	lr

08009da2 <__retarget_lock_release_recursive>:
 8009da2:	4770      	bx	lr

08009da4 <memcpy>:
 8009da4:	440a      	add	r2, r1
 8009da6:	4291      	cmp	r1, r2
 8009da8:	f100 33ff 	add.w	r3, r0, #4294967295
 8009dac:	d100      	bne.n	8009db0 <memcpy+0xc>
 8009dae:	4770      	bx	lr
 8009db0:	b510      	push	{r4, lr}
 8009db2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009db6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009dba:	4291      	cmp	r1, r2
 8009dbc:	d1f9      	bne.n	8009db2 <memcpy+0xe>
 8009dbe:	bd10      	pop	{r4, pc}

08009dc0 <_free_r>:
 8009dc0:	b538      	push	{r3, r4, r5, lr}
 8009dc2:	4605      	mov	r5, r0
 8009dc4:	2900      	cmp	r1, #0
 8009dc6:	d041      	beq.n	8009e4c <_free_r+0x8c>
 8009dc8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009dcc:	1f0c      	subs	r4, r1, #4
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	bfb8      	it	lt
 8009dd2:	18e4      	addlt	r4, r4, r3
 8009dd4:	f000 f83e 	bl	8009e54 <__malloc_lock>
 8009dd8:	4a1d      	ldr	r2, [pc, #116]	@ (8009e50 <_free_r+0x90>)
 8009dda:	6813      	ldr	r3, [r2, #0]
 8009ddc:	b933      	cbnz	r3, 8009dec <_free_r+0x2c>
 8009dde:	6063      	str	r3, [r4, #4]
 8009de0:	6014      	str	r4, [r2, #0]
 8009de2:	4628      	mov	r0, r5
 8009de4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009de8:	f000 b83a 	b.w	8009e60 <__malloc_unlock>
 8009dec:	42a3      	cmp	r3, r4
 8009dee:	d908      	bls.n	8009e02 <_free_r+0x42>
 8009df0:	6820      	ldr	r0, [r4, #0]
 8009df2:	1821      	adds	r1, r4, r0
 8009df4:	428b      	cmp	r3, r1
 8009df6:	bf01      	itttt	eq
 8009df8:	6819      	ldreq	r1, [r3, #0]
 8009dfa:	685b      	ldreq	r3, [r3, #4]
 8009dfc:	1809      	addeq	r1, r1, r0
 8009dfe:	6021      	streq	r1, [r4, #0]
 8009e00:	e7ed      	b.n	8009dde <_free_r+0x1e>
 8009e02:	461a      	mov	r2, r3
 8009e04:	685b      	ldr	r3, [r3, #4]
 8009e06:	b10b      	cbz	r3, 8009e0c <_free_r+0x4c>
 8009e08:	42a3      	cmp	r3, r4
 8009e0a:	d9fa      	bls.n	8009e02 <_free_r+0x42>
 8009e0c:	6811      	ldr	r1, [r2, #0]
 8009e0e:	1850      	adds	r0, r2, r1
 8009e10:	42a0      	cmp	r0, r4
 8009e12:	d10b      	bne.n	8009e2c <_free_r+0x6c>
 8009e14:	6820      	ldr	r0, [r4, #0]
 8009e16:	4401      	add	r1, r0
 8009e18:	1850      	adds	r0, r2, r1
 8009e1a:	4283      	cmp	r3, r0
 8009e1c:	6011      	str	r1, [r2, #0]
 8009e1e:	d1e0      	bne.n	8009de2 <_free_r+0x22>
 8009e20:	6818      	ldr	r0, [r3, #0]
 8009e22:	685b      	ldr	r3, [r3, #4]
 8009e24:	6053      	str	r3, [r2, #4]
 8009e26:	4408      	add	r0, r1
 8009e28:	6010      	str	r0, [r2, #0]
 8009e2a:	e7da      	b.n	8009de2 <_free_r+0x22>
 8009e2c:	d902      	bls.n	8009e34 <_free_r+0x74>
 8009e2e:	230c      	movs	r3, #12
 8009e30:	602b      	str	r3, [r5, #0]
 8009e32:	e7d6      	b.n	8009de2 <_free_r+0x22>
 8009e34:	6820      	ldr	r0, [r4, #0]
 8009e36:	1821      	adds	r1, r4, r0
 8009e38:	428b      	cmp	r3, r1
 8009e3a:	bf04      	itt	eq
 8009e3c:	6819      	ldreq	r1, [r3, #0]
 8009e3e:	685b      	ldreq	r3, [r3, #4]
 8009e40:	6063      	str	r3, [r4, #4]
 8009e42:	bf04      	itt	eq
 8009e44:	1809      	addeq	r1, r1, r0
 8009e46:	6021      	streq	r1, [r4, #0]
 8009e48:	6054      	str	r4, [r2, #4]
 8009e4a:	e7ca      	b.n	8009de2 <_free_r+0x22>
 8009e4c:	bd38      	pop	{r3, r4, r5, pc}
 8009e4e:	bf00      	nop
 8009e50:	20005d84 	.word	0x20005d84

08009e54 <__malloc_lock>:
 8009e54:	4801      	ldr	r0, [pc, #4]	@ (8009e5c <__malloc_lock+0x8>)
 8009e56:	f7ff bfa3 	b.w	8009da0 <__retarget_lock_acquire_recursive>
 8009e5a:	bf00      	nop
 8009e5c:	20005d80 	.word	0x20005d80

08009e60 <__malloc_unlock>:
 8009e60:	4801      	ldr	r0, [pc, #4]	@ (8009e68 <__malloc_unlock+0x8>)
 8009e62:	f7ff bf9e 	b.w	8009da2 <__retarget_lock_release_recursive>
 8009e66:	bf00      	nop
 8009e68:	20005d80 	.word	0x20005d80

08009e6c <_init>:
 8009e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e6e:	bf00      	nop
 8009e70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e72:	bc08      	pop	{r3}
 8009e74:	469e      	mov	lr, r3
 8009e76:	4770      	bx	lr

08009e78 <_fini>:
 8009e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e7a:	bf00      	nop
 8009e7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e7e:	bc08      	pop	{r3}
 8009e80:	469e      	mov	lr, r3
 8009e82:	4770      	bx	lr
