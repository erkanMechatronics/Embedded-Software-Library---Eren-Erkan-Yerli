
FREERTOS_PRIOROT_003.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009c54  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  08009de4  08009de4  0000ade4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009eb8  08009eb8  0000b150  2**0
                  CONTENTS
  4 .ARM          00000008  08009eb8  08009eb8  0000aeb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009ec0  08009ec0  0000b150  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009ec0  08009ec0  0000aec0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009ec4  08009ec4  0000aec4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000150  20000000  08009ec8  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b150  2**0
                  CONTENTS
 10 .bss          00005e68  20000150  20000150  0000b150  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20005fb8  20005fb8  0000b150  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b150  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001bc3a  00000000  00000000  0000b180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004804  00000000  00000000  00026dba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001768  00000000  00000000  0002b5c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000011d0  00000000  00000000  0002cd28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000259dd  00000000  00000000  0002def8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c9ed  00000000  00000000  000538d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d60b4  00000000  00000000  000702c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00146376  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006398  00000000  00000000  001463bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000070  00000000  00000000  0014c754  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000150 	.word	0x20000150
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009dcc 	.word	0x08009dcc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000154 	.word	0x20000154
 80001cc:	08009dcc 	.word	0x08009dcc

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b96a 	b.w	80004bc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	460c      	mov	r4, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14e      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020c:	4694      	mov	ip, r2
 800020e:	458c      	cmp	ip, r1
 8000210:	4686      	mov	lr, r0
 8000212:	fab2 f282 	clz	r2, r2
 8000216:	d962      	bls.n	80002de <__udivmoddi4+0xde>
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0320 	rsb	r3, r2, #32
 800021e:	4091      	lsls	r1, r2
 8000220:	fa20 f303 	lsr.w	r3, r0, r3
 8000224:	fa0c fc02 	lsl.w	ip, ip, r2
 8000228:	4319      	orrs	r1, r3
 800022a:	fa00 fe02 	lsl.w	lr, r0, r2
 800022e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000232:	fa1f f68c 	uxth.w	r6, ip
 8000236:	fbb1 f4f7 	udiv	r4, r1, r7
 800023a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800023e:	fb07 1114 	mls	r1, r7, r4, r1
 8000242:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000246:	fb04 f106 	mul.w	r1, r4, r6
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f104 30ff 	add.w	r0, r4, #4294967295
 8000256:	f080 8112 	bcs.w	800047e <__udivmoddi4+0x27e>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 810f 	bls.w	800047e <__udivmoddi4+0x27e>
 8000260:	3c02      	subs	r4, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a59      	subs	r1, r3, r1
 8000266:	fa1f f38e 	uxth.w	r3, lr
 800026a:	fbb1 f0f7 	udiv	r0, r1, r7
 800026e:	fb07 1110 	mls	r1, r7, r0, r1
 8000272:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000276:	fb00 f606 	mul.w	r6, r0, r6
 800027a:	429e      	cmp	r6, r3
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x94>
 800027e:	eb1c 0303 	adds.w	r3, ip, r3
 8000282:	f100 31ff 	add.w	r1, r0, #4294967295
 8000286:	f080 80fc 	bcs.w	8000482 <__udivmoddi4+0x282>
 800028a:	429e      	cmp	r6, r3
 800028c:	f240 80f9 	bls.w	8000482 <__udivmoddi4+0x282>
 8000290:	4463      	add	r3, ip
 8000292:	3802      	subs	r0, #2
 8000294:	1b9b      	subs	r3, r3, r6
 8000296:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029a:	2100      	movs	r1, #0
 800029c:	b11d      	cbz	r5, 80002a6 <__udivmoddi4+0xa6>
 800029e:	40d3      	lsrs	r3, r2
 80002a0:	2200      	movs	r2, #0
 80002a2:	e9c5 3200 	strd	r3, r2, [r5]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d905      	bls.n	80002ba <__udivmoddi4+0xba>
 80002ae:	b10d      	cbz	r5, 80002b4 <__udivmoddi4+0xb4>
 80002b0:	e9c5 0100 	strd	r0, r1, [r5]
 80002b4:	2100      	movs	r1, #0
 80002b6:	4608      	mov	r0, r1
 80002b8:	e7f5      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002ba:	fab3 f183 	clz	r1, r3
 80002be:	2900      	cmp	r1, #0
 80002c0:	d146      	bne.n	8000350 <__udivmoddi4+0x150>
 80002c2:	42a3      	cmp	r3, r4
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xcc>
 80002c6:	4290      	cmp	r0, r2
 80002c8:	f0c0 80f0 	bcc.w	80004ac <__udivmoddi4+0x2ac>
 80002cc:	1a86      	subs	r6, r0, r2
 80002ce:	eb64 0303 	sbc.w	r3, r4, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	2d00      	cmp	r5, #0
 80002d6:	d0e6      	beq.n	80002a6 <__udivmoddi4+0xa6>
 80002d8:	e9c5 6300 	strd	r6, r3, [r5]
 80002dc:	e7e3      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002de:	2a00      	cmp	r2, #0
 80002e0:	f040 8090 	bne.w	8000404 <__udivmoddi4+0x204>
 80002e4:	eba1 040c 	sub.w	r4, r1, ip
 80002e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002ec:	fa1f f78c 	uxth.w	r7, ip
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80002f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fa:	fb08 4416 	mls	r4, r8, r6, r4
 80002fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000302:	fb07 f006 	mul.w	r0, r7, r6
 8000306:	4298      	cmp	r0, r3
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x11c>
 800030a:	eb1c 0303 	adds.w	r3, ip, r3
 800030e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x11a>
 8000314:	4298      	cmp	r0, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 800031a:	4626      	mov	r6, r4
 800031c:	1a1c      	subs	r4, r3, r0
 800031e:	fa1f f38e 	uxth.w	r3, lr
 8000322:	fbb4 f0f8 	udiv	r0, r4, r8
 8000326:	fb08 4410 	mls	r4, r8, r0, r4
 800032a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032e:	fb00 f707 	mul.w	r7, r0, r7
 8000332:	429f      	cmp	r7, r3
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x148>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f100 34ff 	add.w	r4, r0, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x146>
 8000340:	429f      	cmp	r7, r3
 8000342:	f200 80b0 	bhi.w	80004a6 <__udivmoddi4+0x2a6>
 8000346:	4620      	mov	r0, r4
 8000348:	1bdb      	subs	r3, r3, r7
 800034a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0x9c>
 8000350:	f1c1 0620 	rsb	r6, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 f706 	lsr.w	r7, r2, r6
 800035a:	431f      	orrs	r7, r3
 800035c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000360:	fa04 f301 	lsl.w	r3, r4, r1
 8000364:	ea43 030c 	orr.w	r3, r3, ip
 8000368:	40f4      	lsrs	r4, r6
 800036a:	fa00 f801 	lsl.w	r8, r0, r1
 800036e:	0c38      	lsrs	r0, r7, #16
 8000370:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000374:	fbb4 fef0 	udiv	lr, r4, r0
 8000378:	fa1f fc87 	uxth.w	ip, r7
 800037c:	fb00 441e 	mls	r4, r0, lr, r4
 8000380:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000384:	fb0e f90c 	mul.w	r9, lr, ip
 8000388:	45a1      	cmp	r9, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	d90a      	bls.n	80003a6 <__udivmoddi4+0x1a6>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000396:	f080 8084 	bcs.w	80004a2 <__udivmoddi4+0x2a2>
 800039a:	45a1      	cmp	r9, r4
 800039c:	f240 8081 	bls.w	80004a2 <__udivmoddi4+0x2a2>
 80003a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a4:	443c      	add	r4, r7
 80003a6:	eba4 0409 	sub.w	r4, r4, r9
 80003aa:	fa1f f983 	uxth.w	r9, r3
 80003ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b2:	fb00 4413 	mls	r4, r0, r3, r4
 80003b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d907      	bls.n	80003d2 <__udivmoddi4+0x1d2>
 80003c2:	193c      	adds	r4, r7, r4
 80003c4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c8:	d267      	bcs.n	800049a <__udivmoddi4+0x29a>
 80003ca:	45a4      	cmp	ip, r4
 80003cc:	d965      	bls.n	800049a <__udivmoddi4+0x29a>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003d6:	fba0 9302 	umull	r9, r3, r0, r2
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	429c      	cmp	r4, r3
 80003e0:	46ce      	mov	lr, r9
 80003e2:	469c      	mov	ip, r3
 80003e4:	d351      	bcc.n	800048a <__udivmoddi4+0x28a>
 80003e6:	d04e      	beq.n	8000486 <__udivmoddi4+0x286>
 80003e8:	b155      	cbz	r5, 8000400 <__udivmoddi4+0x200>
 80003ea:	ebb8 030e 	subs.w	r3, r8, lr
 80003ee:	eb64 040c 	sbc.w	r4, r4, ip
 80003f2:	fa04 f606 	lsl.w	r6, r4, r6
 80003f6:	40cb      	lsrs	r3, r1
 80003f8:	431e      	orrs	r6, r3
 80003fa:	40cc      	lsrs	r4, r1
 80003fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000400:	2100      	movs	r1, #0
 8000402:	e750      	b.n	80002a6 <__udivmoddi4+0xa6>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f103 	lsr.w	r1, r0, r3
 800040c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000410:	fa24 f303 	lsr.w	r3, r4, r3
 8000414:	4094      	lsls	r4, r2
 8000416:	430c      	orrs	r4, r1
 8000418:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800041c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000420:	fa1f f78c 	uxth.w	r7, ip
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3110 	mls	r1, r8, r0, r3
 800042c:	0c23      	lsrs	r3, r4, #16
 800042e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000432:	fb00 f107 	mul.w	r1, r0, r7
 8000436:	4299      	cmp	r1, r3
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x24c>
 800043a:	eb1c 0303 	adds.w	r3, ip, r3
 800043e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000442:	d22c      	bcs.n	800049e <__udivmoddi4+0x29e>
 8000444:	4299      	cmp	r1, r3
 8000446:	d92a      	bls.n	800049e <__udivmoddi4+0x29e>
 8000448:	3802      	subs	r0, #2
 800044a:	4463      	add	r3, ip
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb3 f1f8 	udiv	r1, r3, r8
 8000454:	fb08 3311 	mls	r3, r8, r1, r3
 8000458:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800045c:	fb01 f307 	mul.w	r3, r1, r7
 8000460:	42a3      	cmp	r3, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x276>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f101 36ff 	add.w	r6, r1, #4294967295
 800046c:	d213      	bcs.n	8000496 <__udivmoddi4+0x296>
 800046e:	42a3      	cmp	r3, r4
 8000470:	d911      	bls.n	8000496 <__udivmoddi4+0x296>
 8000472:	3902      	subs	r1, #2
 8000474:	4464      	add	r4, ip
 8000476:	1ae4      	subs	r4, r4, r3
 8000478:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800047c:	e739      	b.n	80002f2 <__udivmoddi4+0xf2>
 800047e:	4604      	mov	r4, r0
 8000480:	e6f0      	b.n	8000264 <__udivmoddi4+0x64>
 8000482:	4608      	mov	r0, r1
 8000484:	e706      	b.n	8000294 <__udivmoddi4+0x94>
 8000486:	45c8      	cmp	r8, r9
 8000488:	d2ae      	bcs.n	80003e8 <__udivmoddi4+0x1e8>
 800048a:	ebb9 0e02 	subs.w	lr, r9, r2
 800048e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000492:	3801      	subs	r0, #1
 8000494:	e7a8      	b.n	80003e8 <__udivmoddi4+0x1e8>
 8000496:	4631      	mov	r1, r6
 8000498:	e7ed      	b.n	8000476 <__udivmoddi4+0x276>
 800049a:	4603      	mov	r3, r0
 800049c:	e799      	b.n	80003d2 <__udivmoddi4+0x1d2>
 800049e:	4630      	mov	r0, r6
 80004a0:	e7d4      	b.n	800044c <__udivmoddi4+0x24c>
 80004a2:	46d6      	mov	lr, sl
 80004a4:	e77f      	b.n	80003a6 <__udivmoddi4+0x1a6>
 80004a6:	4463      	add	r3, ip
 80004a8:	3802      	subs	r0, #2
 80004aa:	e74d      	b.n	8000348 <__udivmoddi4+0x148>
 80004ac:	4606      	mov	r6, r0
 80004ae:	4623      	mov	r3, r4
 80004b0:	4608      	mov	r0, r1
 80004b2:	e70f      	b.n	80002d4 <__udivmoddi4+0xd4>
 80004b4:	3e02      	subs	r6, #2
 80004b6:	4463      	add	r3, ip
 80004b8:	e730      	b.n	800031c <__udivmoddi4+0x11c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004c0:	b480      	push	{r7}
 80004c2:	b085      	sub	sp, #20
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	60f8      	str	r0, [r7, #12]
 80004c8:	60b9      	str	r1, [r7, #8]
 80004ca:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004cc:	68fb      	ldr	r3, [r7, #12]
 80004ce:	4a07      	ldr	r2, [pc, #28]	@ (80004ec <vApplicationGetIdleTaskMemory+0x2c>)
 80004d0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004d2:	68bb      	ldr	r3, [r7, #8]
 80004d4:	4a06      	ldr	r2, [pc, #24]	@ (80004f0 <vApplicationGetIdleTaskMemory+0x30>)
 80004d6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	2280      	movs	r2, #128	@ 0x80
 80004dc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004de:	bf00      	nop
 80004e0:	3714      	adds	r7, #20
 80004e2:	46bd      	mov	sp, r7
 80004e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop
 80004ec:	2000016c 	.word	0x2000016c
 80004f0:	2000020c 	.word	0x2000020c

080004f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b084      	sub	sp, #16
 80004f8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004fa:	f000 fbeb 	bl	8000cd4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fe:	f000 f857 	bl	80005b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000502:	f000 f95b 	bl	80007bc <MX_GPIO_Init>
  MX_TIM3_Init();
 8000506:	f000 f8bd 	bl	8000684 <MX_TIM3_Init>
  MX_TIM4_Init();
 800050a:	f000 f909 	bl	8000720 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  MX_USB_DEVICE_Init();
 800050e:	f008 fe81 	bl	8009214 <MX_USB_DEVICE_Init>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of myBinarySem01 */
  osSemaphoreDef(myBinarySem01);
 8000512:	2300      	movs	r3, #0
 8000514:	603b      	str	r3, [r7, #0]
 8000516:	2300      	movs	r3, #0
 8000518:	607b      	str	r3, [r7, #4]
  myBinarySem01Handle = osSemaphoreCreate(osSemaphore(myBinarySem01), 1);
 800051a:	463b      	mov	r3, r7
 800051c:	2101      	movs	r1, #1
 800051e:	4618      	mov	r0, r3
 8000520:	f006 fd65 	bl	8006fee <osSemaphoreCreate>
 8000524:	4603      	mov	r3, r0
 8000526:	4a17      	ldr	r2, [pc, #92]	@ (8000584 <main+0x90>)
 8000528:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */

  myBinarySem02Handle = xSemaphoreCreateBinary();
 800052a:	2203      	movs	r2, #3
 800052c:	2100      	movs	r1, #0
 800052e:	2001      	movs	r0, #1
 8000530:	f007 f8ab 	bl	800768a <xQueueGenericCreate>
 8000534:	4603      	mov	r3, r0
 8000536:	4a14      	ldr	r2, [pc, #80]	@ (8000588 <main+0x94>)
 8000538:	6013      	str	r3, [r2, #0]
  /* add threads, ... */




  xTaskCreate(TaskSensor1Ready, "Task 1", 1000, NULL, 3, &xTaskSensor1Ready);
 800053a:	4b14      	ldr	r3, [pc, #80]	@ (800058c <main+0x98>)
 800053c:	9301      	str	r3, [sp, #4]
 800053e:	2303      	movs	r3, #3
 8000540:	9300      	str	r3, [sp, #0]
 8000542:	2300      	movs	r3, #0
 8000544:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000548:	4911      	ldr	r1, [pc, #68]	@ (8000590 <main+0x9c>)
 800054a:	4812      	ldr	r0, [pc, #72]	@ (8000594 <main+0xa0>)
 800054c:	f007 fb2e 	bl	8007bac <xTaskCreate>
  xTaskCreate(TaskSensor2Ready, "Task 2", 1000, NULL, 3, &xTaskSensor2Ready);
 8000550:	4b11      	ldr	r3, [pc, #68]	@ (8000598 <main+0xa4>)
 8000552:	9301      	str	r3, [sp, #4]
 8000554:	2303      	movs	r3, #3
 8000556:	9300      	str	r3, [sp, #0]
 8000558:	2300      	movs	r3, #0
 800055a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800055e:	490f      	ldr	r1, [pc, #60]	@ (800059c <main+0xa8>)
 8000560:	480f      	ldr	r0, [pc, #60]	@ (80005a0 <main+0xac>)
 8000562:	f007 fb23 	bl	8007bac <xTaskCreate>
  xTaskCreate(TaskSensorsReady, "Task 3", 1000, NULL, 4, &xTaskSensorsReady);
 8000566:	4b0f      	ldr	r3, [pc, #60]	@ (80005a4 <main+0xb0>)
 8000568:	9301      	str	r3, [sp, #4]
 800056a:	2304      	movs	r3, #4
 800056c:	9300      	str	r3, [sp, #0]
 800056e:	2300      	movs	r3, #0
 8000570:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000574:	490c      	ldr	r1, [pc, #48]	@ (80005a8 <main+0xb4>)
 8000576:	480d      	ldr	r0, [pc, #52]	@ (80005ac <main+0xb8>)
 8000578:	f007 fb18 	bl	8007bac <xTaskCreate>


  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800057c:	f006 fd30 	bl	8006fe0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000580:	bf00      	nop
 8000582:	e7fd      	b.n	8000580 <main+0x8c>
 8000584:	200004a0 	.word	0x200004a0
 8000588:	2000040c 	.word	0x2000040c
 800058c:	200004a4 	.word	0x200004a4
 8000590:	08009de4 	.word	0x08009de4
 8000594:	080008d1 	.word	0x080008d1
 8000598:	200004a8 	.word	0x200004a8
 800059c:	08009dec 	.word	0x08009dec
 80005a0:	08000915 	.word	0x08000915
 80005a4:	200004ac 	.word	0x200004ac
 80005a8:	08009df4 	.word	0x08009df4
 80005ac:	08000959 	.word	0x08000959

080005b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b094      	sub	sp, #80	@ 0x50
 80005b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005b6:	f107 0320 	add.w	r3, r7, #32
 80005ba:	2230      	movs	r2, #48	@ 0x30
 80005bc:	2100      	movs	r1, #0
 80005be:	4618      	mov	r0, r3
 80005c0:	f009 fb1c 	bl	8009bfc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c4:	f107 030c 	add.w	r3, r7, #12
 80005c8:	2200      	movs	r2, #0
 80005ca:	601a      	str	r2, [r3, #0]
 80005cc:	605a      	str	r2, [r3, #4]
 80005ce:	609a      	str	r2, [r3, #8]
 80005d0:	60da      	str	r2, [r3, #12]
 80005d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005d4:	2300      	movs	r3, #0
 80005d6:	60bb      	str	r3, [r7, #8]
 80005d8:	4b28      	ldr	r3, [pc, #160]	@ (800067c <SystemClock_Config+0xcc>)
 80005da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005dc:	4a27      	ldr	r2, [pc, #156]	@ (800067c <SystemClock_Config+0xcc>)
 80005de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005e2:	6413      	str	r3, [r2, #64]	@ 0x40
 80005e4:	4b25      	ldr	r3, [pc, #148]	@ (800067c <SystemClock_Config+0xcc>)
 80005e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005ec:	60bb      	str	r3, [r7, #8]
 80005ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005f0:	2300      	movs	r3, #0
 80005f2:	607b      	str	r3, [r7, #4]
 80005f4:	4b22      	ldr	r3, [pc, #136]	@ (8000680 <SystemClock_Config+0xd0>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	4a21      	ldr	r2, [pc, #132]	@ (8000680 <SystemClock_Config+0xd0>)
 80005fa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005fe:	6013      	str	r3, [r2, #0]
 8000600:	4b1f      	ldr	r3, [pc, #124]	@ (8000680 <SystemClock_Config+0xd0>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000608:	607b      	str	r3, [r7, #4]
 800060a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800060c:	2301      	movs	r3, #1
 800060e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000610:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000614:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000616:	2302      	movs	r3, #2
 8000618:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800061a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800061e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000620:	2304      	movs	r3, #4
 8000622:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000624:	23a8      	movs	r3, #168	@ 0xa8
 8000626:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000628:	2302      	movs	r3, #2
 800062a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800062c:	2307      	movs	r3, #7
 800062e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000630:	f107 0320 	add.w	r3, r7, #32
 8000634:	4618      	mov	r0, r3
 8000636:	f002 f8cd 	bl	80027d4 <HAL_RCC_OscConfig>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000640:	f000 f9ce 	bl	80009e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000644:	230f      	movs	r3, #15
 8000646:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000648:	2302      	movs	r3, #2
 800064a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 800064c:	2380      	movs	r3, #128	@ 0x80
 800064e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000650:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000654:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000656:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800065a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800065c:	f107 030c 	add.w	r3, r7, #12
 8000660:	2102      	movs	r1, #2
 8000662:	4618      	mov	r0, r3
 8000664:	f002 fb2e 	bl	8002cc4 <HAL_RCC_ClockConfig>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800066e:	f000 f9b7 	bl	80009e0 <Error_Handler>
  }
}
 8000672:	bf00      	nop
 8000674:	3750      	adds	r7, #80	@ 0x50
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	40023800 	.word	0x40023800
 8000680:	40007000 	.word	0x40007000

08000684 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b086      	sub	sp, #24
 8000688:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800068a:	f107 0308 	add.w	r3, r7, #8
 800068e:	2200      	movs	r2, #0
 8000690:	601a      	str	r2, [r3, #0]
 8000692:	605a      	str	r2, [r3, #4]
 8000694:	609a      	str	r2, [r3, #8]
 8000696:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000698:	463b      	mov	r3, r7
 800069a:	2200      	movs	r2, #0
 800069c:	601a      	str	r2, [r3, #0]
 800069e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80006a0:	4b1d      	ldr	r3, [pc, #116]	@ (8000718 <MX_TIM3_Init+0x94>)
 80006a2:	4a1e      	ldr	r2, [pc, #120]	@ (800071c <MX_TIM3_Init+0x98>)
 80006a4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8399;
 80006a6:	4b1c      	ldr	r3, [pc, #112]	@ (8000718 <MX_TIM3_Init+0x94>)
 80006a8:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 80006ac:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006ae:	4b1a      	ldr	r3, [pc, #104]	@ (8000718 <MX_TIM3_Init+0x94>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 29999;
 80006b4:	4b18      	ldr	r3, [pc, #96]	@ (8000718 <MX_TIM3_Init+0x94>)
 80006b6:	f247 522f 	movw	r2, #29999	@ 0x752f
 80006ba:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006bc:	4b16      	ldr	r3, [pc, #88]	@ (8000718 <MX_TIM3_Init+0x94>)
 80006be:	2200      	movs	r2, #0
 80006c0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006c2:	4b15      	ldr	r3, [pc, #84]	@ (8000718 <MX_TIM3_Init+0x94>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80006c8:	4813      	ldr	r0, [pc, #76]	@ (8000718 <MX_TIM3_Init+0x94>)
 80006ca:	f002 fd39 	bl	8003140 <HAL_TIM_Base_Init>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80006d4:	f000 f984 	bl	80009e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006d8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006dc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80006de:	f107 0308 	add.w	r3, r7, #8
 80006e2:	4619      	mov	r1, r3
 80006e4:	480c      	ldr	r0, [pc, #48]	@ (8000718 <MX_TIM3_Init+0x94>)
 80006e6:	f002 fedb 	bl	80034a0 <HAL_TIM_ConfigClockSource>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80006f0:	f000 f976 	bl	80009e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006f4:	2300      	movs	r3, #0
 80006f6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006f8:	2300      	movs	r3, #0
 80006fa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80006fc:	463b      	mov	r3, r7
 80006fe:	4619      	mov	r1, r3
 8000700:	4805      	ldr	r0, [pc, #20]	@ (8000718 <MX_TIM3_Init+0x94>)
 8000702:	f003 f903 	bl	800390c <HAL_TIMEx_MasterConfigSynchronization>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800070c:	f000 f968 	bl	80009e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000710:	bf00      	nop
 8000712:	3718      	adds	r7, #24
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	20000410 	.word	0x20000410
 800071c:	40000400 	.word	0x40000400

08000720 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b086      	sub	sp, #24
 8000724:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000726:	f107 0308 	add.w	r3, r7, #8
 800072a:	2200      	movs	r2, #0
 800072c:	601a      	str	r2, [r3, #0]
 800072e:	605a      	str	r2, [r3, #4]
 8000730:	609a      	str	r2, [r3, #8]
 8000732:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000734:	463b      	mov	r3, r7
 8000736:	2200      	movs	r2, #0
 8000738:	601a      	str	r2, [r3, #0]
 800073a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800073c:	4b1d      	ldr	r3, [pc, #116]	@ (80007b4 <MX_TIM4_Init+0x94>)
 800073e:	4a1e      	ldr	r2, [pc, #120]	@ (80007b8 <MX_TIM4_Init+0x98>)
 8000740:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 8399;
 8000742:	4b1c      	ldr	r3, [pc, #112]	@ (80007b4 <MX_TIM4_Init+0x94>)
 8000744:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8000748:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800074a:	4b1a      	ldr	r3, [pc, #104]	@ (80007b4 <MX_TIM4_Init+0x94>)
 800074c:	2200      	movs	r2, #0
 800074e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 59999;
 8000750:	4b18      	ldr	r3, [pc, #96]	@ (80007b4 <MX_TIM4_Init+0x94>)
 8000752:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 8000756:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000758:	4b16      	ldr	r3, [pc, #88]	@ (80007b4 <MX_TIM4_Init+0x94>)
 800075a:	2200      	movs	r2, #0
 800075c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800075e:	4b15      	ldr	r3, [pc, #84]	@ (80007b4 <MX_TIM4_Init+0x94>)
 8000760:	2200      	movs	r2, #0
 8000762:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000764:	4813      	ldr	r0, [pc, #76]	@ (80007b4 <MX_TIM4_Init+0x94>)
 8000766:	f002 fceb 	bl	8003140 <HAL_TIM_Base_Init>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8000770:	f000 f936 	bl	80009e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000774:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000778:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800077a:	f107 0308 	add.w	r3, r7, #8
 800077e:	4619      	mov	r1, r3
 8000780:	480c      	ldr	r0, [pc, #48]	@ (80007b4 <MX_TIM4_Init+0x94>)
 8000782:	f002 fe8d 	bl	80034a0 <HAL_TIM_ConfigClockSource>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 800078c:	f000 f928 	bl	80009e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000790:	2300      	movs	r3, #0
 8000792:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000794:	2300      	movs	r3, #0
 8000796:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000798:	463b      	mov	r3, r7
 800079a:	4619      	mov	r1, r3
 800079c:	4805      	ldr	r0, [pc, #20]	@ (80007b4 <MX_TIM4_Init+0x94>)
 800079e:	f003 f8b5 	bl	800390c <HAL_TIMEx_MasterConfigSynchronization>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 80007a8:	f000 f91a 	bl	80009e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80007ac:	bf00      	nop
 80007ae:	3718      	adds	r7, #24
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	20000458 	.word	0x20000458
 80007b8:	40000800 	.word	0x40000800

080007bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b088      	sub	sp, #32
 80007c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c2:	f107 030c 	add.w	r3, r7, #12
 80007c6:	2200      	movs	r2, #0
 80007c8:	601a      	str	r2, [r3, #0]
 80007ca:	605a      	str	r2, [r3, #4]
 80007cc:	609a      	str	r2, [r3, #8]
 80007ce:	60da      	str	r2, [r3, #12]
 80007d0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007d2:	2300      	movs	r3, #0
 80007d4:	60bb      	str	r3, [r7, #8]
 80007d6:	4b2b      	ldr	r3, [pc, #172]	@ (8000884 <MX_GPIO_Init+0xc8>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007da:	4a2a      	ldr	r2, [pc, #168]	@ (8000884 <MX_GPIO_Init+0xc8>)
 80007dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007e2:	4b28      	ldr	r3, [pc, #160]	@ (8000884 <MX_GPIO_Init+0xc8>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007ea:	60bb      	str	r3, [r7, #8]
 80007ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ee:	2300      	movs	r3, #0
 80007f0:	607b      	str	r3, [r7, #4]
 80007f2:	4b24      	ldr	r3, [pc, #144]	@ (8000884 <MX_GPIO_Init+0xc8>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f6:	4a23      	ldr	r2, [pc, #140]	@ (8000884 <MX_GPIO_Init+0xc8>)
 80007f8:	f043 0301 	orr.w	r3, r3, #1
 80007fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007fe:	4b21      	ldr	r3, [pc, #132]	@ (8000884 <MX_GPIO_Init+0xc8>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000802:	f003 0301 	and.w	r3, r3, #1
 8000806:	607b      	str	r3, [r7, #4]
 8000808:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800080a:	2300      	movs	r3, #0
 800080c:	603b      	str	r3, [r7, #0]
 800080e:	4b1d      	ldr	r3, [pc, #116]	@ (8000884 <MX_GPIO_Init+0xc8>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000812:	4a1c      	ldr	r2, [pc, #112]	@ (8000884 <MX_GPIO_Init+0xc8>)
 8000814:	f043 0308 	orr.w	r3, r3, #8
 8000818:	6313      	str	r3, [r2, #48]	@ 0x30
 800081a:	4b1a      	ldr	r3, [pc, #104]	@ (8000884 <MX_GPIO_Init+0xc8>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081e:	f003 0308 	and.w	r3, r3, #8
 8000822:	603b      	str	r3, [r7, #0]
 8000824:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000826:	2200      	movs	r2, #0
 8000828:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 800082c:	4816      	ldr	r0, [pc, #88]	@ (8000888 <MX_GPIO_Init+0xcc>)
 800082e:	f000 fd4d 	bl	80012cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000832:	2301      	movs	r3, #1
 8000834:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000836:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800083a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800083c:	2302      	movs	r3, #2
 800083e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000840:	f107 030c 	add.w	r3, r7, #12
 8000844:	4619      	mov	r1, r3
 8000846:	4811      	ldr	r0, [pc, #68]	@ (800088c <MX_GPIO_Init+0xd0>)
 8000848:	f000 fb8c 	bl	8000f64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800084c:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000850:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000852:	2301      	movs	r3, #1
 8000854:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000856:	2300      	movs	r3, #0
 8000858:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085a:	2300      	movs	r3, #0
 800085c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800085e:	f107 030c 	add.w	r3, r7, #12
 8000862:	4619      	mov	r1, r3
 8000864:	4808      	ldr	r0, [pc, #32]	@ (8000888 <MX_GPIO_Init+0xcc>)
 8000866:	f000 fb7d 	bl	8000f64 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 800086a:	2200      	movs	r2, #0
 800086c:	2105      	movs	r1, #5
 800086e:	2006      	movs	r0, #6
 8000870:	f000 fb4e 	bl	8000f10 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000874:	2006      	movs	r0, #6
 8000876:	f000 fb67 	bl	8000f48 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800087a:	bf00      	nop
 800087c:	3720      	adds	r7, #32
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	40023800 	.word	0x40023800
 8000888:	40020c00 	.word	0x40020c00
 800088c:	40020000 	.word	0x40020000

08000890 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
 8000896:	4603      	mov	r3, r0
 8000898:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_0)
 800089a:	88fb      	ldrh	r3, [r7, #6]
 800089c:	2b01      	cmp	r3, #1
 800089e:	d10d      	bne.n	80008bc <HAL_GPIO_EXTI_Callback+0x2c>
	{
		while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0));
 80008a0:	bf00      	nop
 80008a2:	2101      	movs	r1, #1
 80008a4:	4807      	ldr	r0, [pc, #28]	@ (80008c4 <HAL_GPIO_EXTI_Callback+0x34>)
 80008a6:	f000 fcf9 	bl	800129c <HAL_GPIO_ReadPin>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d1f8      	bne.n	80008a2 <HAL_GPIO_EXTI_Callback+0x12>
		HAL_TIM_Base_Start_IT(&htim3);
 80008b0:	4805      	ldr	r0, [pc, #20]	@ (80008c8 <HAL_GPIO_EXTI_Callback+0x38>)
 80008b2:	f002 fc95 	bl	80031e0 <HAL_TIM_Base_Start_IT>
		HAL_TIM_Base_Start_IT(&htim4);
 80008b6:	4805      	ldr	r0, [pc, #20]	@ (80008cc <HAL_GPIO_EXTI_Callback+0x3c>)
 80008b8:	f002 fc92 	bl	80031e0 <HAL_TIM_Base_Start_IT>


	}
}
 80008bc:	bf00      	nop
 80008be:	3708      	adds	r7, #8
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	40020000 	.word	0x40020000
 80008c8:	20000410 	.word	0x20000410
 80008cc:	20000458 	.word	0x20000458

080008d0 <TaskSensor1Ready>:


// HAL_TIM_Base_Start_IT()

void TaskSensor1Ready(void *pvParameters)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
	if(control1 == 1)
 80008d8:	4b0b      	ldr	r3, [pc, #44]	@ (8000908 <TaskSensor1Ready+0x38>)
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	b2db      	uxtb	r3, r3
 80008de:	2b01      	cmp	r3, #1
 80008e0:	d10e      	bne.n	8000900 <TaskSensor1Ready+0x30>
	{
		xEventGroupSetBits(xEventGroup, SENSOR_1_BIT);
 80008e2:	4b0a      	ldr	r3, [pc, #40]	@ (800090c <TaskSensor1Ready+0x3c>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	2101      	movs	r1, #1
 80008e8:	4618      	mov	r0, r3
 80008ea:	f006 fc85 	bl	80071f8 <xEventGroupSetBits>
		HAL_GPIO_WritePin(GPIOD,GPIO_PIN_12,GPIO_PIN_SET);
 80008ee:	2201      	movs	r2, #1
 80008f0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80008f4:	4806      	ldr	r0, [pc, #24]	@ (8000910 <TaskSensor1Ready+0x40>)
 80008f6:	f000 fce9 	bl	80012cc <HAL_GPIO_WritePin>
		control1 = 0;
 80008fa:	4b03      	ldr	r3, [pc, #12]	@ (8000908 <TaskSensor1Ready+0x38>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	701a      	strb	r2, [r3, #0]
	}

}
 8000900:	bf00      	nop
 8000902:	3708      	adds	r7, #8
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	200004b4 	.word	0x200004b4
 800090c:	200004b0 	.word	0x200004b0
 8000910:	40020c00 	.word	0x40020c00

08000914 <TaskSensor2Ready>:

void TaskSensor2Ready(void *pvParameters)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
	if(control2 == 1)
 800091c:	4b0b      	ldr	r3, [pc, #44]	@ (800094c <TaskSensor2Ready+0x38>)
 800091e:	781b      	ldrb	r3, [r3, #0]
 8000920:	b2db      	uxtb	r3, r3
 8000922:	2b01      	cmp	r3, #1
 8000924:	d10e      	bne.n	8000944 <TaskSensor2Ready+0x30>
	{
		xEventGroupSetBits(xEventGroup, SENSOR_2_BIT);
 8000926:	4b0a      	ldr	r3, [pc, #40]	@ (8000950 <TaskSensor2Ready+0x3c>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	2102      	movs	r1, #2
 800092c:	4618      	mov	r0, r3
 800092e:	f006 fc63 	bl	80071f8 <xEventGroupSetBits>
		HAL_GPIO_WritePin(GPIOD,GPIO_PIN_13,GPIO_PIN_SET);
 8000932:	2201      	movs	r2, #1
 8000934:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000938:	4806      	ldr	r0, [pc, #24]	@ (8000954 <TaskSensor2Ready+0x40>)
 800093a:	f000 fcc7 	bl	80012cc <HAL_GPIO_WritePin>
		control2 = 0;
 800093e:	4b03      	ldr	r3, [pc, #12]	@ (800094c <TaskSensor2Ready+0x38>)
 8000940:	2200      	movs	r2, #0
 8000942:	701a      	strb	r2, [r3, #0]
	}




}
 8000944:	bf00      	nop
 8000946:	3708      	adds	r7, #8
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	200004b5 	.word	0x200004b5
 8000950:	200004b0 	.word	0x200004b0
 8000954:	40020c00 	.word	0x40020c00

08000958 <TaskSensorsReady>:

void TaskSensorsReady(void *pvParameters)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b084      	sub	sp, #16
 800095c:	af02      	add	r7, sp, #8
 800095e:	6078      	str	r0, [r7, #4]
	xEventGroupWaitBits(xEventGroup,SENSOR_1_BIT | SENSOR_2_BIT, pdTRUE, pdTRUE, portMAX_DELAY);
 8000960:	4b09      	ldr	r3, [pc, #36]	@ (8000988 <TaskSensorsReady+0x30>)
 8000962:	6818      	ldr	r0, [r3, #0]
 8000964:	f04f 33ff 	mov.w	r3, #4294967295
 8000968:	9300      	str	r3, [sp, #0]
 800096a:	2301      	movs	r3, #1
 800096c:	2201      	movs	r2, #1
 800096e:	2103      	movs	r1, #3
 8000970:	f006 fb70 	bl	8007054 <xEventGroupWaitBits>
	//HAL_GPIO_WritePin(GPIOD,GPIO_PIN_12 | GPIO_PIN_13,GPIO_PIN_RESET);
	HAL_GPIO_WritePin(GPIOD,GPIO_PIN_14,GPIO_PIN_SET);
 8000974:	2201      	movs	r2, #1
 8000976:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800097a:	4804      	ldr	r0, [pc, #16]	@ (800098c <TaskSensorsReady+0x34>)
 800097c:	f000 fca6 	bl	80012cc <HAL_GPIO_WritePin>

}
 8000980:	bf00      	nop
 8000982:	3708      	adds	r7, #8
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	200004b0 	.word	0x200004b0
 800098c:	40020c00 	.word	0x40020c00

08000990 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */



  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80009a0:	d101      	bne.n	80009a6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80009a2:	f000 f9b9 	bl	8000d18 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  if(htim->Instance == TIM3)
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	4a09      	ldr	r2, [pc, #36]	@ (80009d0 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80009ac:	4293      	cmp	r3, r2
 80009ae:	d102      	bne.n	80009b6 <HAL_TIM_PeriodElapsedCallback+0x26>
  {
	  control1 = 1;
 80009b0:	4b08      	ldr	r3, [pc, #32]	@ (80009d4 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80009b2:	2201      	movs	r2, #1
 80009b4:	701a      	strb	r2, [r3, #0]
  }

  if(htim->Instance == TIM4)
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	4a07      	ldr	r2, [pc, #28]	@ (80009d8 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80009bc:	4293      	cmp	r3, r2
 80009be:	d102      	bne.n	80009c6 <HAL_TIM_PeriodElapsedCallback+0x36>
  {
	  control2 = 1;
 80009c0:	4b06      	ldr	r3, [pc, #24]	@ (80009dc <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80009c2:	2201      	movs	r2, #1
 80009c4:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE END Callback 1 */
}
 80009c6:	bf00      	nop
 80009c8:	3708      	adds	r7, #8
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	40000400 	.word	0x40000400
 80009d4:	200004b4 	.word	0x200004b4
 80009d8:	40000800 	.word	0x40000800
 80009dc:	200004b5 	.word	0x200004b5

080009e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009e4:	b672      	cpsid	i
}
 80009e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009e8:	bf00      	nop
 80009ea:	e7fd      	b.n	80009e8 <Error_Handler+0x8>

080009ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009f2:	2300      	movs	r3, #0
 80009f4:	607b      	str	r3, [r7, #4]
 80009f6:	4b12      	ldr	r3, [pc, #72]	@ (8000a40 <HAL_MspInit+0x54>)
 80009f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009fa:	4a11      	ldr	r2, [pc, #68]	@ (8000a40 <HAL_MspInit+0x54>)
 80009fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a00:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a02:	4b0f      	ldr	r3, [pc, #60]	@ (8000a40 <HAL_MspInit+0x54>)
 8000a04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a06:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a0a:	607b      	str	r3, [r7, #4]
 8000a0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a0e:	2300      	movs	r3, #0
 8000a10:	603b      	str	r3, [r7, #0]
 8000a12:	4b0b      	ldr	r3, [pc, #44]	@ (8000a40 <HAL_MspInit+0x54>)
 8000a14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a16:	4a0a      	ldr	r2, [pc, #40]	@ (8000a40 <HAL_MspInit+0x54>)
 8000a18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a1e:	4b08      	ldr	r3, [pc, #32]	@ (8000a40 <HAL_MspInit+0x54>)
 8000a20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a26:	603b      	str	r3, [r7, #0]
 8000a28:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	210f      	movs	r1, #15
 8000a2e:	f06f 0001 	mvn.w	r0, #1
 8000a32:	f000 fa6d 	bl	8000f10 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a36:	bf00      	nop
 8000a38:	3708      	adds	r7, #8
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	40023800 	.word	0x40023800

08000a44 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b084      	sub	sp, #16
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4a1c      	ldr	r2, [pc, #112]	@ (8000ac4 <HAL_TIM_Base_MspInit+0x80>)
 8000a52:	4293      	cmp	r3, r2
 8000a54:	d116      	bne.n	8000a84 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000a56:	2300      	movs	r3, #0
 8000a58:	60fb      	str	r3, [r7, #12]
 8000a5a:	4b1b      	ldr	r3, [pc, #108]	@ (8000ac8 <HAL_TIM_Base_MspInit+0x84>)
 8000a5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a5e:	4a1a      	ldr	r2, [pc, #104]	@ (8000ac8 <HAL_TIM_Base_MspInit+0x84>)
 8000a60:	f043 0302 	orr.w	r3, r3, #2
 8000a64:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a66:	4b18      	ldr	r3, [pc, #96]	@ (8000ac8 <HAL_TIM_Base_MspInit+0x84>)
 8000a68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a6a:	f003 0302 	and.w	r3, r3, #2
 8000a6e:	60fb      	str	r3, [r7, #12]
 8000a70:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8000a72:	2200      	movs	r2, #0
 8000a74:	2105      	movs	r1, #5
 8000a76:	201d      	movs	r0, #29
 8000a78:	f000 fa4a 	bl	8000f10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000a7c:	201d      	movs	r0, #29
 8000a7e:	f000 fa63 	bl	8000f48 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000a82:	e01a      	b.n	8000aba <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM4)
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4a10      	ldr	r2, [pc, #64]	@ (8000acc <HAL_TIM_Base_MspInit+0x88>)
 8000a8a:	4293      	cmp	r3, r2
 8000a8c:	d115      	bne.n	8000aba <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000a8e:	2300      	movs	r3, #0
 8000a90:	60bb      	str	r3, [r7, #8]
 8000a92:	4b0d      	ldr	r3, [pc, #52]	@ (8000ac8 <HAL_TIM_Base_MspInit+0x84>)
 8000a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a96:	4a0c      	ldr	r2, [pc, #48]	@ (8000ac8 <HAL_TIM_Base_MspInit+0x84>)
 8000a98:	f043 0304 	orr.w	r3, r3, #4
 8000a9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a9e:	4b0a      	ldr	r3, [pc, #40]	@ (8000ac8 <HAL_TIM_Base_MspInit+0x84>)
 8000aa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aa2:	f003 0304 	and.w	r3, r3, #4
 8000aa6:	60bb      	str	r3, [r7, #8]
 8000aa8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8000aaa:	2200      	movs	r2, #0
 8000aac:	2105      	movs	r1, #5
 8000aae:	201e      	movs	r0, #30
 8000ab0:	f000 fa2e 	bl	8000f10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000ab4:	201e      	movs	r0, #30
 8000ab6:	f000 fa47 	bl	8000f48 <HAL_NVIC_EnableIRQ>
}
 8000aba:	bf00      	nop
 8000abc:	3710      	adds	r7, #16
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	40000400 	.word	0x40000400
 8000ac8:	40023800 	.word	0x40023800
 8000acc:	40000800 	.word	0x40000800

08000ad0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b08e      	sub	sp, #56	@ 0x38
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000adc:	2300      	movs	r3, #0
 8000ade:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	60fb      	str	r3, [r7, #12]
 8000ae4:	4b34      	ldr	r3, [pc, #208]	@ (8000bb8 <HAL_InitTick+0xe8>)
 8000ae6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ae8:	4a33      	ldr	r2, [pc, #204]	@ (8000bb8 <HAL_InitTick+0xe8>)
 8000aea:	f043 0301 	orr.w	r3, r3, #1
 8000aee:	6413      	str	r3, [r2, #64]	@ 0x40
 8000af0:	4b31      	ldr	r3, [pc, #196]	@ (8000bb8 <HAL_InitTick+0xe8>)
 8000af2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000af4:	f003 0301 	and.w	r3, r3, #1
 8000af8:	60fb      	str	r3, [r7, #12]
 8000afa:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000afc:	f107 0210 	add.w	r2, r7, #16
 8000b00:	f107 0314 	add.w	r3, r7, #20
 8000b04:	4611      	mov	r1, r2
 8000b06:	4618      	mov	r0, r3
 8000b08:	f002 fae8 	bl	80030dc <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000b0c:	6a3b      	ldr	r3, [r7, #32]
 8000b0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000b10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d103      	bne.n	8000b1e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000b16:	f002 facd 	bl	80030b4 <HAL_RCC_GetPCLK1Freq>
 8000b1a:	6378      	str	r0, [r7, #52]	@ 0x34
 8000b1c:	e004      	b.n	8000b28 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000b1e:	f002 fac9 	bl	80030b4 <HAL_RCC_GetPCLK1Freq>
 8000b22:	4603      	mov	r3, r0
 8000b24:	005b      	lsls	r3, r3, #1
 8000b26:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000b2a:	4a24      	ldr	r2, [pc, #144]	@ (8000bbc <HAL_InitTick+0xec>)
 8000b2c:	fba2 2303 	umull	r2, r3, r2, r3
 8000b30:	0c9b      	lsrs	r3, r3, #18
 8000b32:	3b01      	subs	r3, #1
 8000b34:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8000b36:	4b22      	ldr	r3, [pc, #136]	@ (8000bc0 <HAL_InitTick+0xf0>)
 8000b38:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000b3c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8000b3e:	4b20      	ldr	r3, [pc, #128]	@ (8000bc0 <HAL_InitTick+0xf0>)
 8000b40:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000b44:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8000b46:	4a1e      	ldr	r2, [pc, #120]	@ (8000bc0 <HAL_InitTick+0xf0>)
 8000b48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b4a:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8000b4c:	4b1c      	ldr	r3, [pc, #112]	@ (8000bc0 <HAL_InitTick+0xf0>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b52:	4b1b      	ldr	r3, [pc, #108]	@ (8000bc0 <HAL_InitTick+0xf0>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b58:	4b19      	ldr	r3, [pc, #100]	@ (8000bc0 <HAL_InitTick+0xf0>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8000b5e:	4818      	ldr	r0, [pc, #96]	@ (8000bc0 <HAL_InitTick+0xf0>)
 8000b60:	f002 faee 	bl	8003140 <HAL_TIM_Base_Init>
 8000b64:	4603      	mov	r3, r0
 8000b66:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000b6a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d11b      	bne.n	8000baa <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8000b72:	4813      	ldr	r0, [pc, #76]	@ (8000bc0 <HAL_InitTick+0xf0>)
 8000b74:	f002 fb34 	bl	80031e0 <HAL_TIM_Base_Start_IT>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000b7e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d111      	bne.n	8000baa <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000b86:	201c      	movs	r0, #28
 8000b88:	f000 f9de 	bl	8000f48 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	2b0f      	cmp	r3, #15
 8000b90:	d808      	bhi.n	8000ba4 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8000b92:	2200      	movs	r2, #0
 8000b94:	6879      	ldr	r1, [r7, #4]
 8000b96:	201c      	movs	r0, #28
 8000b98:	f000 f9ba 	bl	8000f10 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b9c:	4a09      	ldr	r2, [pc, #36]	@ (8000bc4 <HAL_InitTick+0xf4>)
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	6013      	str	r3, [r2, #0]
 8000ba2:	e002      	b.n	8000baa <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8000ba4:	2301      	movs	r3, #1
 8000ba6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000baa:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	3738      	adds	r7, #56	@ 0x38
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	40023800 	.word	0x40023800
 8000bbc:	431bde83 	.word	0x431bde83
 8000bc0:	200004b8 	.word	0x200004b8
 8000bc4:	20000004 	.word	0x20000004

08000bc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bcc:	bf00      	nop
 8000bce:	e7fd      	b.n	8000bcc <NMI_Handler+0x4>

08000bd0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bd4:	bf00      	nop
 8000bd6:	e7fd      	b.n	8000bd4 <HardFault_Handler+0x4>

08000bd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bdc:	bf00      	nop
 8000bde:	e7fd      	b.n	8000bdc <MemManage_Handler+0x4>

08000be0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000be4:	bf00      	nop
 8000be6:	e7fd      	b.n	8000be4 <BusFault_Handler+0x4>

08000be8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bec:	bf00      	nop
 8000bee:	e7fd      	b.n	8000bec <UsageFault_Handler+0x4>

08000bf0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bf4:	bf00      	nop
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr

08000bfe <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000bfe:	b580      	push	{r7, lr}
 8000c00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000c02:	2001      	movs	r0, #1
 8000c04:	f000 fb7c 	bl	8001300 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000c08:	bf00      	nop
 8000c0a:	bd80      	pop	{r7, pc}

08000c0c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000c10:	4802      	ldr	r0, [pc, #8]	@ (8000c1c <TIM2_IRQHandler+0x10>)
 8000c12:	f002 fb55 	bl	80032c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000c16:	bf00      	nop
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	200004b8 	.word	0x200004b8

08000c20 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000c24:	4802      	ldr	r0, [pc, #8]	@ (8000c30 <TIM3_IRQHandler+0x10>)
 8000c26:	f002 fb4b 	bl	80032c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000c2a:	bf00      	nop
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	20000410 	.word	0x20000410

08000c34 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000c38:	4802      	ldr	r0, [pc, #8]	@ (8000c44 <TIM4_IRQHandler+0x10>)
 8000c3a:	f002 fb41 	bl	80032c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000c3e:	bf00      	nop
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	20000458 	.word	0x20000458

08000c48 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000c4c:	4802      	ldr	r0, [pc, #8]	@ (8000c58 <OTG_FS_IRQHandler+0x10>)
 8000c4e:	f000 fcb3 	bl	80015b8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000c52:	bf00      	nop
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	20005774 	.word	0x20005774

08000c5c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c60:	4b06      	ldr	r3, [pc, #24]	@ (8000c7c <SystemInit+0x20>)
 8000c62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c66:	4a05      	ldr	r2, [pc, #20]	@ (8000c7c <SystemInit+0x20>)
 8000c68:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c6c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c70:	bf00      	nop
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop
 8000c7c:	e000ed00 	.word	0xe000ed00

08000c80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c80:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000cb8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000c84:	f7ff ffea 	bl	8000c5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c88:	480c      	ldr	r0, [pc, #48]	@ (8000cbc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c8a:	490d      	ldr	r1, [pc, #52]	@ (8000cc0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c8c:	4a0d      	ldr	r2, [pc, #52]	@ (8000cc4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c90:	e002      	b.n	8000c98 <LoopCopyDataInit>

08000c92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c96:	3304      	adds	r3, #4

08000c98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c9c:	d3f9      	bcc.n	8000c92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c9e:	4a0a      	ldr	r2, [pc, #40]	@ (8000cc8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ca0:	4c0a      	ldr	r4, [pc, #40]	@ (8000ccc <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ca2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ca4:	e001      	b.n	8000caa <LoopFillZerobss>

08000ca6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ca6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ca8:	3204      	adds	r2, #4

08000caa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000caa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cac:	d3fb      	bcc.n	8000ca6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cae:	f009 f803 	bl	8009cb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cb2:	f7ff fc1f 	bl	80004f4 <main>
  bx  lr    
 8000cb6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000cb8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000cbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cc0:	20000150 	.word	0x20000150
  ldr r2, =_sidata
 8000cc4:	08009ec8 	.word	0x08009ec8
  ldr r2, =_sbss
 8000cc8:	20000150 	.word	0x20000150
  ldr r4, =_ebss
 8000ccc:	20005fb8 	.word	0x20005fb8

08000cd0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cd0:	e7fe      	b.n	8000cd0 <ADC_IRQHandler>
	...

08000cd4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cd8:	4b0e      	ldr	r3, [pc, #56]	@ (8000d14 <HAL_Init+0x40>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a0d      	ldr	r2, [pc, #52]	@ (8000d14 <HAL_Init+0x40>)
 8000cde:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ce2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ce4:	4b0b      	ldr	r3, [pc, #44]	@ (8000d14 <HAL_Init+0x40>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a0a      	ldr	r2, [pc, #40]	@ (8000d14 <HAL_Init+0x40>)
 8000cea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000cee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cf0:	4b08      	ldr	r3, [pc, #32]	@ (8000d14 <HAL_Init+0x40>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4a07      	ldr	r2, [pc, #28]	@ (8000d14 <HAL_Init+0x40>)
 8000cf6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000cfa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cfc:	2003      	movs	r0, #3
 8000cfe:	f000 f8fc 	bl	8000efa <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d02:	200f      	movs	r0, #15
 8000d04:	f7ff fee4 	bl	8000ad0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d08:	f7ff fe70 	bl	80009ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d0c:	2300      	movs	r3, #0
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	40023c00 	.word	0x40023c00

08000d18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d1c:	4b06      	ldr	r3, [pc, #24]	@ (8000d38 <HAL_IncTick+0x20>)
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	461a      	mov	r2, r3
 8000d22:	4b06      	ldr	r3, [pc, #24]	@ (8000d3c <HAL_IncTick+0x24>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	4413      	add	r3, r2
 8000d28:	4a04      	ldr	r2, [pc, #16]	@ (8000d3c <HAL_IncTick+0x24>)
 8000d2a:	6013      	str	r3, [r2, #0]
}
 8000d2c:	bf00      	nop
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop
 8000d38:	20000008 	.word	0x20000008
 8000d3c:	20000500 	.word	0x20000500

08000d40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  return uwTick;
 8000d44:	4b03      	ldr	r3, [pc, #12]	@ (8000d54 <HAL_GetTick+0x14>)
 8000d46:	681b      	ldr	r3, [r3, #0]
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop
 8000d54:	20000500 	.word	0x20000500

08000d58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b084      	sub	sp, #16
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d60:	f7ff ffee 	bl	8000d40 <HAL_GetTick>
 8000d64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d70:	d005      	beq.n	8000d7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d72:	4b0a      	ldr	r3, [pc, #40]	@ (8000d9c <HAL_Delay+0x44>)
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	461a      	mov	r2, r3
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	4413      	add	r3, r2
 8000d7c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d7e:	bf00      	nop
 8000d80:	f7ff ffde 	bl	8000d40 <HAL_GetTick>
 8000d84:	4602      	mov	r2, r0
 8000d86:	68bb      	ldr	r3, [r7, #8]
 8000d88:	1ad3      	subs	r3, r2, r3
 8000d8a:	68fa      	ldr	r2, [r7, #12]
 8000d8c:	429a      	cmp	r2, r3
 8000d8e:	d8f7      	bhi.n	8000d80 <HAL_Delay+0x28>
  {
  }
}
 8000d90:	bf00      	nop
 8000d92:	bf00      	nop
 8000d94:	3710      	adds	r7, #16
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	20000008 	.word	0x20000008

08000da0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b085      	sub	sp, #20
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	f003 0307 	and.w	r3, r3, #7
 8000dae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000db0:	4b0c      	ldr	r3, [pc, #48]	@ (8000de4 <__NVIC_SetPriorityGrouping+0x44>)
 8000db2:	68db      	ldr	r3, [r3, #12]
 8000db4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000db6:	68ba      	ldr	r2, [r7, #8]
 8000db8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dc4:	68bb      	ldr	r3, [r7, #8]
 8000dc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dc8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000dcc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000dd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dd2:	4a04      	ldr	r2, [pc, #16]	@ (8000de4 <__NVIC_SetPriorityGrouping+0x44>)
 8000dd4:	68bb      	ldr	r3, [r7, #8]
 8000dd6:	60d3      	str	r3, [r2, #12]
}
 8000dd8:	bf00      	nop
 8000dda:	3714      	adds	r7, #20
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de2:	4770      	bx	lr
 8000de4:	e000ed00 	.word	0xe000ed00

08000de8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dec:	4b04      	ldr	r3, [pc, #16]	@ (8000e00 <__NVIC_GetPriorityGrouping+0x18>)
 8000dee:	68db      	ldr	r3, [r3, #12]
 8000df0:	0a1b      	lsrs	r3, r3, #8
 8000df2:	f003 0307 	and.w	r3, r3, #7
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr
 8000e00:	e000ed00 	.word	0xe000ed00

08000e04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b083      	sub	sp, #12
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	db0b      	blt.n	8000e2e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e16:	79fb      	ldrb	r3, [r7, #7]
 8000e18:	f003 021f 	and.w	r2, r3, #31
 8000e1c:	4907      	ldr	r1, [pc, #28]	@ (8000e3c <__NVIC_EnableIRQ+0x38>)
 8000e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e22:	095b      	lsrs	r3, r3, #5
 8000e24:	2001      	movs	r0, #1
 8000e26:	fa00 f202 	lsl.w	r2, r0, r2
 8000e2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e2e:	bf00      	nop
 8000e30:	370c      	adds	r7, #12
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	e000e100 	.word	0xe000e100

08000e40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b083      	sub	sp, #12
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	4603      	mov	r3, r0
 8000e48:	6039      	str	r1, [r7, #0]
 8000e4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	db0a      	blt.n	8000e6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	b2da      	uxtb	r2, r3
 8000e58:	490c      	ldr	r1, [pc, #48]	@ (8000e8c <__NVIC_SetPriority+0x4c>)
 8000e5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e5e:	0112      	lsls	r2, r2, #4
 8000e60:	b2d2      	uxtb	r2, r2
 8000e62:	440b      	add	r3, r1
 8000e64:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e68:	e00a      	b.n	8000e80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	b2da      	uxtb	r2, r3
 8000e6e:	4908      	ldr	r1, [pc, #32]	@ (8000e90 <__NVIC_SetPriority+0x50>)
 8000e70:	79fb      	ldrb	r3, [r7, #7]
 8000e72:	f003 030f 	and.w	r3, r3, #15
 8000e76:	3b04      	subs	r3, #4
 8000e78:	0112      	lsls	r2, r2, #4
 8000e7a:	b2d2      	uxtb	r2, r2
 8000e7c:	440b      	add	r3, r1
 8000e7e:	761a      	strb	r2, [r3, #24]
}
 8000e80:	bf00      	nop
 8000e82:	370c      	adds	r7, #12
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr
 8000e8c:	e000e100 	.word	0xe000e100
 8000e90:	e000ed00 	.word	0xe000ed00

08000e94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b089      	sub	sp, #36	@ 0x24
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	60f8      	str	r0, [r7, #12]
 8000e9c:	60b9      	str	r1, [r7, #8]
 8000e9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	f003 0307 	and.w	r3, r3, #7
 8000ea6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ea8:	69fb      	ldr	r3, [r7, #28]
 8000eaa:	f1c3 0307 	rsb	r3, r3, #7
 8000eae:	2b04      	cmp	r3, #4
 8000eb0:	bf28      	it	cs
 8000eb2:	2304      	movcs	r3, #4
 8000eb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eb6:	69fb      	ldr	r3, [r7, #28]
 8000eb8:	3304      	adds	r3, #4
 8000eba:	2b06      	cmp	r3, #6
 8000ebc:	d902      	bls.n	8000ec4 <NVIC_EncodePriority+0x30>
 8000ebe:	69fb      	ldr	r3, [r7, #28]
 8000ec0:	3b03      	subs	r3, #3
 8000ec2:	e000      	b.n	8000ec6 <NVIC_EncodePriority+0x32>
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ec8:	f04f 32ff 	mov.w	r2, #4294967295
 8000ecc:	69bb      	ldr	r3, [r7, #24]
 8000ece:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed2:	43da      	mvns	r2, r3
 8000ed4:	68bb      	ldr	r3, [r7, #8]
 8000ed6:	401a      	ands	r2, r3
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000edc:	f04f 31ff 	mov.w	r1, #4294967295
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ee6:	43d9      	mvns	r1, r3
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eec:	4313      	orrs	r3, r2
         );
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3724      	adds	r7, #36	@ 0x24
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr

08000efa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000efa:	b580      	push	{r7, lr}
 8000efc:	b082      	sub	sp, #8
 8000efe:	af00      	add	r7, sp, #0
 8000f00:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f02:	6878      	ldr	r0, [r7, #4]
 8000f04:	f7ff ff4c 	bl	8000da0 <__NVIC_SetPriorityGrouping>
}
 8000f08:	bf00      	nop
 8000f0a:	3708      	adds	r7, #8
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}

08000f10 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b086      	sub	sp, #24
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	4603      	mov	r3, r0
 8000f18:	60b9      	str	r1, [r7, #8]
 8000f1a:	607a      	str	r2, [r7, #4]
 8000f1c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f22:	f7ff ff61 	bl	8000de8 <__NVIC_GetPriorityGrouping>
 8000f26:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f28:	687a      	ldr	r2, [r7, #4]
 8000f2a:	68b9      	ldr	r1, [r7, #8]
 8000f2c:	6978      	ldr	r0, [r7, #20]
 8000f2e:	f7ff ffb1 	bl	8000e94 <NVIC_EncodePriority>
 8000f32:	4602      	mov	r2, r0
 8000f34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f38:	4611      	mov	r1, r2
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f7ff ff80 	bl	8000e40 <__NVIC_SetPriority>
}
 8000f40:	bf00      	nop
 8000f42:	3718      	adds	r7, #24
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}

08000f48 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	4603      	mov	r3, r0
 8000f50:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f56:	4618      	mov	r0, r3
 8000f58:	f7ff ff54 	bl	8000e04 <__NVIC_EnableIRQ>
}
 8000f5c:	bf00      	nop
 8000f5e:	3708      	adds	r7, #8
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}

08000f64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b089      	sub	sp, #36	@ 0x24
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
 8000f6c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f72:	2300      	movs	r3, #0
 8000f74:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f76:	2300      	movs	r3, #0
 8000f78:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	61fb      	str	r3, [r7, #28]
 8000f7e:	e16b      	b.n	8001258 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f80:	2201      	movs	r2, #1
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	fa02 f303 	lsl.w	r3, r2, r3
 8000f88:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	697a      	ldr	r2, [r7, #20]
 8000f90:	4013      	ands	r3, r2
 8000f92:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f94:	693a      	ldr	r2, [r7, #16]
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	429a      	cmp	r2, r3
 8000f9a:	f040 815a 	bne.w	8001252 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	f003 0303 	and.w	r3, r3, #3
 8000fa6:	2b01      	cmp	r3, #1
 8000fa8:	d005      	beq.n	8000fb6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fb2:	2b02      	cmp	r3, #2
 8000fb4:	d130      	bne.n	8001018 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	689b      	ldr	r3, [r3, #8]
 8000fba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000fbc:	69fb      	ldr	r3, [r7, #28]
 8000fbe:	005b      	lsls	r3, r3, #1
 8000fc0:	2203      	movs	r2, #3
 8000fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc6:	43db      	mvns	r3, r3
 8000fc8:	69ba      	ldr	r2, [r7, #24]
 8000fca:	4013      	ands	r3, r2
 8000fcc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	68da      	ldr	r2, [r3, #12]
 8000fd2:	69fb      	ldr	r3, [r7, #28]
 8000fd4:	005b      	lsls	r3, r3, #1
 8000fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fda:	69ba      	ldr	r2, [r7, #24]
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	69ba      	ldr	r2, [r7, #24]
 8000fe4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fec:	2201      	movs	r2, #1
 8000fee:	69fb      	ldr	r3, [r7, #28]
 8000ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff4:	43db      	mvns	r3, r3
 8000ff6:	69ba      	ldr	r2, [r7, #24]
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	091b      	lsrs	r3, r3, #4
 8001002:	f003 0201 	and.w	r2, r3, #1
 8001006:	69fb      	ldr	r3, [r7, #28]
 8001008:	fa02 f303 	lsl.w	r3, r2, r3
 800100c:	69ba      	ldr	r2, [r7, #24]
 800100e:	4313      	orrs	r3, r2
 8001010:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	69ba      	ldr	r2, [r7, #24]
 8001016:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	f003 0303 	and.w	r3, r3, #3
 8001020:	2b03      	cmp	r3, #3
 8001022:	d017      	beq.n	8001054 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	68db      	ldr	r3, [r3, #12]
 8001028:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800102a:	69fb      	ldr	r3, [r7, #28]
 800102c:	005b      	lsls	r3, r3, #1
 800102e:	2203      	movs	r2, #3
 8001030:	fa02 f303 	lsl.w	r3, r2, r3
 8001034:	43db      	mvns	r3, r3
 8001036:	69ba      	ldr	r2, [r7, #24]
 8001038:	4013      	ands	r3, r2
 800103a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	689a      	ldr	r2, [r3, #8]
 8001040:	69fb      	ldr	r3, [r7, #28]
 8001042:	005b      	lsls	r3, r3, #1
 8001044:	fa02 f303 	lsl.w	r3, r2, r3
 8001048:	69ba      	ldr	r2, [r7, #24]
 800104a:	4313      	orrs	r3, r2
 800104c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	69ba      	ldr	r2, [r7, #24]
 8001052:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	f003 0303 	and.w	r3, r3, #3
 800105c:	2b02      	cmp	r3, #2
 800105e:	d123      	bne.n	80010a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001060:	69fb      	ldr	r3, [r7, #28]
 8001062:	08da      	lsrs	r2, r3, #3
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	3208      	adds	r2, #8
 8001068:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800106c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800106e:	69fb      	ldr	r3, [r7, #28]
 8001070:	f003 0307 	and.w	r3, r3, #7
 8001074:	009b      	lsls	r3, r3, #2
 8001076:	220f      	movs	r2, #15
 8001078:	fa02 f303 	lsl.w	r3, r2, r3
 800107c:	43db      	mvns	r3, r3
 800107e:	69ba      	ldr	r2, [r7, #24]
 8001080:	4013      	ands	r3, r2
 8001082:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	691a      	ldr	r2, [r3, #16]
 8001088:	69fb      	ldr	r3, [r7, #28]
 800108a:	f003 0307 	and.w	r3, r3, #7
 800108e:	009b      	lsls	r3, r3, #2
 8001090:	fa02 f303 	lsl.w	r3, r2, r3
 8001094:	69ba      	ldr	r2, [r7, #24]
 8001096:	4313      	orrs	r3, r2
 8001098:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800109a:	69fb      	ldr	r3, [r7, #28]
 800109c:	08da      	lsrs	r2, r3, #3
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	3208      	adds	r2, #8
 80010a2:	69b9      	ldr	r1, [r7, #24]
 80010a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010ae:	69fb      	ldr	r3, [r7, #28]
 80010b0:	005b      	lsls	r3, r3, #1
 80010b2:	2203      	movs	r2, #3
 80010b4:	fa02 f303 	lsl.w	r3, r2, r3
 80010b8:	43db      	mvns	r3, r3
 80010ba:	69ba      	ldr	r2, [r7, #24]
 80010bc:	4013      	ands	r3, r2
 80010be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	f003 0203 	and.w	r2, r3, #3
 80010c8:	69fb      	ldr	r3, [r7, #28]
 80010ca:	005b      	lsls	r3, r3, #1
 80010cc:	fa02 f303 	lsl.w	r3, r2, r3
 80010d0:	69ba      	ldr	r2, [r7, #24]
 80010d2:	4313      	orrs	r3, r2
 80010d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	69ba      	ldr	r2, [r7, #24]
 80010da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	f000 80b4 	beq.w	8001252 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ea:	2300      	movs	r3, #0
 80010ec:	60fb      	str	r3, [r7, #12]
 80010ee:	4b60      	ldr	r3, [pc, #384]	@ (8001270 <HAL_GPIO_Init+0x30c>)
 80010f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010f2:	4a5f      	ldr	r2, [pc, #380]	@ (8001270 <HAL_GPIO_Init+0x30c>)
 80010f4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80010fa:	4b5d      	ldr	r3, [pc, #372]	@ (8001270 <HAL_GPIO_Init+0x30c>)
 80010fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001102:	60fb      	str	r3, [r7, #12]
 8001104:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001106:	4a5b      	ldr	r2, [pc, #364]	@ (8001274 <HAL_GPIO_Init+0x310>)
 8001108:	69fb      	ldr	r3, [r7, #28]
 800110a:	089b      	lsrs	r3, r3, #2
 800110c:	3302      	adds	r3, #2
 800110e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001112:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001114:	69fb      	ldr	r3, [r7, #28]
 8001116:	f003 0303 	and.w	r3, r3, #3
 800111a:	009b      	lsls	r3, r3, #2
 800111c:	220f      	movs	r2, #15
 800111e:	fa02 f303 	lsl.w	r3, r2, r3
 8001122:	43db      	mvns	r3, r3
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	4013      	ands	r3, r2
 8001128:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	4a52      	ldr	r2, [pc, #328]	@ (8001278 <HAL_GPIO_Init+0x314>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d02b      	beq.n	800118a <HAL_GPIO_Init+0x226>
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	4a51      	ldr	r2, [pc, #324]	@ (800127c <HAL_GPIO_Init+0x318>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d025      	beq.n	8001186 <HAL_GPIO_Init+0x222>
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	4a50      	ldr	r2, [pc, #320]	@ (8001280 <HAL_GPIO_Init+0x31c>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d01f      	beq.n	8001182 <HAL_GPIO_Init+0x21e>
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	4a4f      	ldr	r2, [pc, #316]	@ (8001284 <HAL_GPIO_Init+0x320>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d019      	beq.n	800117e <HAL_GPIO_Init+0x21a>
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	4a4e      	ldr	r2, [pc, #312]	@ (8001288 <HAL_GPIO_Init+0x324>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d013      	beq.n	800117a <HAL_GPIO_Init+0x216>
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	4a4d      	ldr	r2, [pc, #308]	@ (800128c <HAL_GPIO_Init+0x328>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d00d      	beq.n	8001176 <HAL_GPIO_Init+0x212>
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	4a4c      	ldr	r2, [pc, #304]	@ (8001290 <HAL_GPIO_Init+0x32c>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d007      	beq.n	8001172 <HAL_GPIO_Init+0x20e>
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	4a4b      	ldr	r2, [pc, #300]	@ (8001294 <HAL_GPIO_Init+0x330>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d101      	bne.n	800116e <HAL_GPIO_Init+0x20a>
 800116a:	2307      	movs	r3, #7
 800116c:	e00e      	b.n	800118c <HAL_GPIO_Init+0x228>
 800116e:	2308      	movs	r3, #8
 8001170:	e00c      	b.n	800118c <HAL_GPIO_Init+0x228>
 8001172:	2306      	movs	r3, #6
 8001174:	e00a      	b.n	800118c <HAL_GPIO_Init+0x228>
 8001176:	2305      	movs	r3, #5
 8001178:	e008      	b.n	800118c <HAL_GPIO_Init+0x228>
 800117a:	2304      	movs	r3, #4
 800117c:	e006      	b.n	800118c <HAL_GPIO_Init+0x228>
 800117e:	2303      	movs	r3, #3
 8001180:	e004      	b.n	800118c <HAL_GPIO_Init+0x228>
 8001182:	2302      	movs	r3, #2
 8001184:	e002      	b.n	800118c <HAL_GPIO_Init+0x228>
 8001186:	2301      	movs	r3, #1
 8001188:	e000      	b.n	800118c <HAL_GPIO_Init+0x228>
 800118a:	2300      	movs	r3, #0
 800118c:	69fa      	ldr	r2, [r7, #28]
 800118e:	f002 0203 	and.w	r2, r2, #3
 8001192:	0092      	lsls	r2, r2, #2
 8001194:	4093      	lsls	r3, r2
 8001196:	69ba      	ldr	r2, [r7, #24]
 8001198:	4313      	orrs	r3, r2
 800119a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800119c:	4935      	ldr	r1, [pc, #212]	@ (8001274 <HAL_GPIO_Init+0x310>)
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	089b      	lsrs	r3, r3, #2
 80011a2:	3302      	adds	r3, #2
 80011a4:	69ba      	ldr	r2, [r7, #24]
 80011a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011aa:	4b3b      	ldr	r3, [pc, #236]	@ (8001298 <HAL_GPIO_Init+0x334>)
 80011ac:	689b      	ldr	r3, [r3, #8]
 80011ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	43db      	mvns	r3, r3
 80011b4:	69ba      	ldr	r2, [r7, #24]
 80011b6:	4013      	ands	r3, r2
 80011b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d003      	beq.n	80011ce <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80011c6:	69ba      	ldr	r2, [r7, #24]
 80011c8:	693b      	ldr	r3, [r7, #16]
 80011ca:	4313      	orrs	r3, r2
 80011cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011ce:	4a32      	ldr	r2, [pc, #200]	@ (8001298 <HAL_GPIO_Init+0x334>)
 80011d0:	69bb      	ldr	r3, [r7, #24]
 80011d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011d4:	4b30      	ldr	r3, [pc, #192]	@ (8001298 <HAL_GPIO_Init+0x334>)
 80011d6:	68db      	ldr	r3, [r3, #12]
 80011d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011da:	693b      	ldr	r3, [r7, #16]
 80011dc:	43db      	mvns	r3, r3
 80011de:	69ba      	ldr	r2, [r7, #24]
 80011e0:	4013      	ands	r3, r2
 80011e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d003      	beq.n	80011f8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80011f0:	69ba      	ldr	r2, [r7, #24]
 80011f2:	693b      	ldr	r3, [r7, #16]
 80011f4:	4313      	orrs	r3, r2
 80011f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011f8:	4a27      	ldr	r2, [pc, #156]	@ (8001298 <HAL_GPIO_Init+0x334>)
 80011fa:	69bb      	ldr	r3, [r7, #24]
 80011fc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80011fe:	4b26      	ldr	r3, [pc, #152]	@ (8001298 <HAL_GPIO_Init+0x334>)
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001204:	693b      	ldr	r3, [r7, #16]
 8001206:	43db      	mvns	r3, r3
 8001208:	69ba      	ldr	r2, [r7, #24]
 800120a:	4013      	ands	r3, r2
 800120c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001216:	2b00      	cmp	r3, #0
 8001218:	d003      	beq.n	8001222 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800121a:	69ba      	ldr	r2, [r7, #24]
 800121c:	693b      	ldr	r3, [r7, #16]
 800121e:	4313      	orrs	r3, r2
 8001220:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001222:	4a1d      	ldr	r2, [pc, #116]	@ (8001298 <HAL_GPIO_Init+0x334>)
 8001224:	69bb      	ldr	r3, [r7, #24]
 8001226:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001228:	4b1b      	ldr	r3, [pc, #108]	@ (8001298 <HAL_GPIO_Init+0x334>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800122e:	693b      	ldr	r3, [r7, #16]
 8001230:	43db      	mvns	r3, r3
 8001232:	69ba      	ldr	r2, [r7, #24]
 8001234:	4013      	ands	r3, r2
 8001236:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001240:	2b00      	cmp	r3, #0
 8001242:	d003      	beq.n	800124c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001244:	69ba      	ldr	r2, [r7, #24]
 8001246:	693b      	ldr	r3, [r7, #16]
 8001248:	4313      	orrs	r3, r2
 800124a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800124c:	4a12      	ldr	r2, [pc, #72]	@ (8001298 <HAL_GPIO_Init+0x334>)
 800124e:	69bb      	ldr	r3, [r7, #24]
 8001250:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001252:	69fb      	ldr	r3, [r7, #28]
 8001254:	3301      	adds	r3, #1
 8001256:	61fb      	str	r3, [r7, #28]
 8001258:	69fb      	ldr	r3, [r7, #28]
 800125a:	2b0f      	cmp	r3, #15
 800125c:	f67f ae90 	bls.w	8000f80 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001260:	bf00      	nop
 8001262:	bf00      	nop
 8001264:	3724      	adds	r7, #36	@ 0x24
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop
 8001270:	40023800 	.word	0x40023800
 8001274:	40013800 	.word	0x40013800
 8001278:	40020000 	.word	0x40020000
 800127c:	40020400 	.word	0x40020400
 8001280:	40020800 	.word	0x40020800
 8001284:	40020c00 	.word	0x40020c00
 8001288:	40021000 	.word	0x40021000
 800128c:	40021400 	.word	0x40021400
 8001290:	40021800 	.word	0x40021800
 8001294:	40021c00 	.word	0x40021c00
 8001298:	40013c00 	.word	0x40013c00

0800129c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800129c:	b480      	push	{r7}
 800129e:	b085      	sub	sp, #20
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
 80012a4:	460b      	mov	r3, r1
 80012a6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	691a      	ldr	r2, [r3, #16]
 80012ac:	887b      	ldrh	r3, [r7, #2]
 80012ae:	4013      	ands	r3, r2
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d002      	beq.n	80012ba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80012b4:	2301      	movs	r3, #1
 80012b6:	73fb      	strb	r3, [r7, #15]
 80012b8:	e001      	b.n	80012be <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80012ba:	2300      	movs	r3, #0
 80012bc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80012be:	7bfb      	ldrb	r3, [r7, #15]
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	3714      	adds	r7, #20
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr

080012cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b083      	sub	sp, #12
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
 80012d4:	460b      	mov	r3, r1
 80012d6:	807b      	strh	r3, [r7, #2]
 80012d8:	4613      	mov	r3, r2
 80012da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012dc:	787b      	ldrb	r3, [r7, #1]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d003      	beq.n	80012ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012e2:	887a      	ldrh	r2, [r7, #2]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80012e8:	e003      	b.n	80012f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80012ea:	887b      	ldrh	r3, [r7, #2]
 80012ec:	041a      	lsls	r2, r3, #16
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	619a      	str	r2, [r3, #24]
}
 80012f2:	bf00      	nop
 80012f4:	370c      	adds	r7, #12
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
	...

08001300 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
 8001306:	4603      	mov	r3, r0
 8001308:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800130a:	4b08      	ldr	r3, [pc, #32]	@ (800132c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800130c:	695a      	ldr	r2, [r3, #20]
 800130e:	88fb      	ldrh	r3, [r7, #6]
 8001310:	4013      	ands	r3, r2
 8001312:	2b00      	cmp	r3, #0
 8001314:	d006      	beq.n	8001324 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001316:	4a05      	ldr	r2, [pc, #20]	@ (800132c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001318:	88fb      	ldrh	r3, [r7, #6]
 800131a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800131c:	88fb      	ldrh	r3, [r7, #6]
 800131e:	4618      	mov	r0, r3
 8001320:	f7ff fab6 	bl	8000890 <HAL_GPIO_EXTI_Callback>
  }
}
 8001324:	bf00      	nop
 8001326:	3708      	adds	r7, #8
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	40013c00 	.word	0x40013c00

08001330 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b086      	sub	sp, #24
 8001334:	af02      	add	r7, sp, #8
 8001336:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d101      	bne.n	8001342 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800133e:	2301      	movs	r3, #1
 8001340:	e101      	b.n	8001546 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800134e:	b2db      	uxtb	r3, r3
 8001350:	2b00      	cmp	r3, #0
 8001352:	d106      	bne.n	8001362 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2200      	movs	r2, #0
 8001358:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800135c:	6878      	ldr	r0, [r7, #4]
 800135e:	f008 f939 	bl	80095d4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2203      	movs	r2, #3
 8001366:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800136a:	68bb      	ldr	r3, [r7, #8]
 800136c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001370:	d102      	bne.n	8001378 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2200      	movs	r2, #0
 8001376:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4618      	mov	r0, r3
 800137e:	f002 fc6c 	bl	8003c5a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6818      	ldr	r0, [r3, #0]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	7c1a      	ldrb	r2, [r3, #16]
 800138a:	f88d 2000 	strb.w	r2, [sp]
 800138e:	3304      	adds	r3, #4
 8001390:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001392:	f002 fb4b 	bl	8003a2c <USB_CoreInit>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d005      	beq.n	80013a8 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2202      	movs	r2, #2
 80013a0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80013a4:	2301      	movs	r3, #1
 80013a6:	e0ce      	b.n	8001546 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	2100      	movs	r1, #0
 80013ae:	4618      	mov	r0, r3
 80013b0:	f002 fc64 	bl	8003c7c <USB_SetCurrentMode>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d005      	beq.n	80013c6 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2202      	movs	r2, #2
 80013be:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80013c2:	2301      	movs	r3, #1
 80013c4:	e0bf      	b.n	8001546 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013c6:	2300      	movs	r3, #0
 80013c8:	73fb      	strb	r3, [r7, #15]
 80013ca:	e04a      	b.n	8001462 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80013cc:	7bfa      	ldrb	r2, [r7, #15]
 80013ce:	6879      	ldr	r1, [r7, #4]
 80013d0:	4613      	mov	r3, r2
 80013d2:	00db      	lsls	r3, r3, #3
 80013d4:	4413      	add	r3, r2
 80013d6:	009b      	lsls	r3, r3, #2
 80013d8:	440b      	add	r3, r1
 80013da:	3315      	adds	r3, #21
 80013dc:	2201      	movs	r2, #1
 80013de:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80013e0:	7bfa      	ldrb	r2, [r7, #15]
 80013e2:	6879      	ldr	r1, [r7, #4]
 80013e4:	4613      	mov	r3, r2
 80013e6:	00db      	lsls	r3, r3, #3
 80013e8:	4413      	add	r3, r2
 80013ea:	009b      	lsls	r3, r3, #2
 80013ec:	440b      	add	r3, r1
 80013ee:	3314      	adds	r3, #20
 80013f0:	7bfa      	ldrb	r2, [r7, #15]
 80013f2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80013f4:	7bfa      	ldrb	r2, [r7, #15]
 80013f6:	7bfb      	ldrb	r3, [r7, #15]
 80013f8:	b298      	uxth	r0, r3
 80013fa:	6879      	ldr	r1, [r7, #4]
 80013fc:	4613      	mov	r3, r2
 80013fe:	00db      	lsls	r3, r3, #3
 8001400:	4413      	add	r3, r2
 8001402:	009b      	lsls	r3, r3, #2
 8001404:	440b      	add	r3, r1
 8001406:	332e      	adds	r3, #46	@ 0x2e
 8001408:	4602      	mov	r2, r0
 800140a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800140c:	7bfa      	ldrb	r2, [r7, #15]
 800140e:	6879      	ldr	r1, [r7, #4]
 8001410:	4613      	mov	r3, r2
 8001412:	00db      	lsls	r3, r3, #3
 8001414:	4413      	add	r3, r2
 8001416:	009b      	lsls	r3, r3, #2
 8001418:	440b      	add	r3, r1
 800141a:	3318      	adds	r3, #24
 800141c:	2200      	movs	r2, #0
 800141e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001420:	7bfa      	ldrb	r2, [r7, #15]
 8001422:	6879      	ldr	r1, [r7, #4]
 8001424:	4613      	mov	r3, r2
 8001426:	00db      	lsls	r3, r3, #3
 8001428:	4413      	add	r3, r2
 800142a:	009b      	lsls	r3, r3, #2
 800142c:	440b      	add	r3, r1
 800142e:	331c      	adds	r3, #28
 8001430:	2200      	movs	r2, #0
 8001432:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001434:	7bfa      	ldrb	r2, [r7, #15]
 8001436:	6879      	ldr	r1, [r7, #4]
 8001438:	4613      	mov	r3, r2
 800143a:	00db      	lsls	r3, r3, #3
 800143c:	4413      	add	r3, r2
 800143e:	009b      	lsls	r3, r3, #2
 8001440:	440b      	add	r3, r1
 8001442:	3320      	adds	r3, #32
 8001444:	2200      	movs	r2, #0
 8001446:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001448:	7bfa      	ldrb	r2, [r7, #15]
 800144a:	6879      	ldr	r1, [r7, #4]
 800144c:	4613      	mov	r3, r2
 800144e:	00db      	lsls	r3, r3, #3
 8001450:	4413      	add	r3, r2
 8001452:	009b      	lsls	r3, r3, #2
 8001454:	440b      	add	r3, r1
 8001456:	3324      	adds	r3, #36	@ 0x24
 8001458:	2200      	movs	r2, #0
 800145a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800145c:	7bfb      	ldrb	r3, [r7, #15]
 800145e:	3301      	adds	r3, #1
 8001460:	73fb      	strb	r3, [r7, #15]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	791b      	ldrb	r3, [r3, #4]
 8001466:	7bfa      	ldrb	r2, [r7, #15]
 8001468:	429a      	cmp	r2, r3
 800146a:	d3af      	bcc.n	80013cc <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800146c:	2300      	movs	r3, #0
 800146e:	73fb      	strb	r3, [r7, #15]
 8001470:	e044      	b.n	80014fc <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001472:	7bfa      	ldrb	r2, [r7, #15]
 8001474:	6879      	ldr	r1, [r7, #4]
 8001476:	4613      	mov	r3, r2
 8001478:	00db      	lsls	r3, r3, #3
 800147a:	4413      	add	r3, r2
 800147c:	009b      	lsls	r3, r3, #2
 800147e:	440b      	add	r3, r1
 8001480:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001484:	2200      	movs	r2, #0
 8001486:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001488:	7bfa      	ldrb	r2, [r7, #15]
 800148a:	6879      	ldr	r1, [r7, #4]
 800148c:	4613      	mov	r3, r2
 800148e:	00db      	lsls	r3, r3, #3
 8001490:	4413      	add	r3, r2
 8001492:	009b      	lsls	r3, r3, #2
 8001494:	440b      	add	r3, r1
 8001496:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800149a:	7bfa      	ldrb	r2, [r7, #15]
 800149c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800149e:	7bfa      	ldrb	r2, [r7, #15]
 80014a0:	6879      	ldr	r1, [r7, #4]
 80014a2:	4613      	mov	r3, r2
 80014a4:	00db      	lsls	r3, r3, #3
 80014a6:	4413      	add	r3, r2
 80014a8:	009b      	lsls	r3, r3, #2
 80014aa:	440b      	add	r3, r1
 80014ac:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80014b0:	2200      	movs	r2, #0
 80014b2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80014b4:	7bfa      	ldrb	r2, [r7, #15]
 80014b6:	6879      	ldr	r1, [r7, #4]
 80014b8:	4613      	mov	r3, r2
 80014ba:	00db      	lsls	r3, r3, #3
 80014bc:	4413      	add	r3, r2
 80014be:	009b      	lsls	r3, r3, #2
 80014c0:	440b      	add	r3, r1
 80014c2:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80014c6:	2200      	movs	r2, #0
 80014c8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80014ca:	7bfa      	ldrb	r2, [r7, #15]
 80014cc:	6879      	ldr	r1, [r7, #4]
 80014ce:	4613      	mov	r3, r2
 80014d0:	00db      	lsls	r3, r3, #3
 80014d2:	4413      	add	r3, r2
 80014d4:	009b      	lsls	r3, r3, #2
 80014d6:	440b      	add	r3, r1
 80014d8:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80014dc:	2200      	movs	r2, #0
 80014de:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80014e0:	7bfa      	ldrb	r2, [r7, #15]
 80014e2:	6879      	ldr	r1, [r7, #4]
 80014e4:	4613      	mov	r3, r2
 80014e6:	00db      	lsls	r3, r3, #3
 80014e8:	4413      	add	r3, r2
 80014ea:	009b      	lsls	r3, r3, #2
 80014ec:	440b      	add	r3, r1
 80014ee:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80014f2:	2200      	movs	r2, #0
 80014f4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014f6:	7bfb      	ldrb	r3, [r7, #15]
 80014f8:	3301      	adds	r3, #1
 80014fa:	73fb      	strb	r3, [r7, #15]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	791b      	ldrb	r3, [r3, #4]
 8001500:	7bfa      	ldrb	r2, [r7, #15]
 8001502:	429a      	cmp	r2, r3
 8001504:	d3b5      	bcc.n	8001472 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6818      	ldr	r0, [r3, #0]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	7c1a      	ldrb	r2, [r3, #16]
 800150e:	f88d 2000 	strb.w	r2, [sp]
 8001512:	3304      	adds	r3, #4
 8001514:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001516:	f002 fbfd 	bl	8003d14 <USB_DevInit>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d005      	beq.n	800152c <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2202      	movs	r2, #2
 8001524:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001528:	2301      	movs	r3, #1
 800152a:	e00c      	b.n	8001546 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2200      	movs	r2, #0
 8001530:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2201      	movs	r2, #1
 8001536:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4618      	mov	r0, r3
 8001540:	f003 fc47 	bl	8004dd2 <USB_DevDisconnect>

  return HAL_OK;
 8001544:	2300      	movs	r3, #0
}
 8001546:	4618      	mov	r0, r3
 8001548:	3710      	adds	r7, #16
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}

0800154e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800154e:	b580      	push	{r7, lr}
 8001550:	b084      	sub	sp, #16
 8001552:	af00      	add	r7, sp, #0
 8001554:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001562:	2b01      	cmp	r3, #1
 8001564:	d101      	bne.n	800156a <HAL_PCD_Start+0x1c>
 8001566:	2302      	movs	r3, #2
 8001568:	e022      	b.n	80015b0 <HAL_PCD_Start+0x62>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2201      	movs	r2, #1
 800156e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	68db      	ldr	r3, [r3, #12]
 8001576:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800157a:	2b00      	cmp	r3, #0
 800157c:	d009      	beq.n	8001592 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001582:	2b01      	cmp	r3, #1
 8001584:	d105      	bne.n	8001592 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800158a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4618      	mov	r0, r3
 8001598:	f002 fb4e 	bl	8003c38 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4618      	mov	r0, r3
 80015a2:	f003 fbf5 	bl	8004d90 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2200      	movs	r2, #0
 80015aa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80015ae:	2300      	movs	r3, #0
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	3710      	adds	r7, #16
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}

080015b8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80015b8:	b590      	push	{r4, r7, lr}
 80015ba:	b08d      	sub	sp, #52	@ 0x34
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80015c6:	6a3b      	ldr	r3, [r7, #32]
 80015c8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4618      	mov	r0, r3
 80015d0:	f003 fcb3 	bl	8004f3a <USB_GetMode>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	f040 848c 	bne.w	8001ef4 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4618      	mov	r0, r3
 80015e2:	f003 fc17 	bl	8004e14 <USB_ReadInterrupts>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	f000 8482 	beq.w	8001ef2 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80015ee:	69fb      	ldr	r3, [r7, #28]
 80015f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80015f4:	689b      	ldr	r3, [r3, #8]
 80015f6:	0a1b      	lsrs	r3, r3, #8
 80015f8:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4618      	mov	r0, r3
 8001608:	f003 fc04 	bl	8004e14 <USB_ReadInterrupts>
 800160c:	4603      	mov	r3, r0
 800160e:	f003 0302 	and.w	r3, r3, #2
 8001612:	2b02      	cmp	r3, #2
 8001614:	d107      	bne.n	8001626 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	695a      	ldr	r2, [r3, #20]
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f002 0202 	and.w	r2, r2, #2
 8001624:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4618      	mov	r0, r3
 800162c:	f003 fbf2 	bl	8004e14 <USB_ReadInterrupts>
 8001630:	4603      	mov	r3, r0
 8001632:	f003 0310 	and.w	r3, r3, #16
 8001636:	2b10      	cmp	r3, #16
 8001638:	d161      	bne.n	80016fe <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	699a      	ldr	r2, [r3, #24]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f022 0210 	bic.w	r2, r2, #16
 8001648:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800164a:	6a3b      	ldr	r3, [r7, #32]
 800164c:	6a1b      	ldr	r3, [r3, #32]
 800164e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001650:	69bb      	ldr	r3, [r7, #24]
 8001652:	f003 020f 	and.w	r2, r3, #15
 8001656:	4613      	mov	r3, r2
 8001658:	00db      	lsls	r3, r3, #3
 800165a:	4413      	add	r3, r2
 800165c:	009b      	lsls	r3, r3, #2
 800165e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001662:	687a      	ldr	r2, [r7, #4]
 8001664:	4413      	add	r3, r2
 8001666:	3304      	adds	r3, #4
 8001668:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800166a:	69bb      	ldr	r3, [r7, #24]
 800166c:	0c5b      	lsrs	r3, r3, #17
 800166e:	f003 030f 	and.w	r3, r3, #15
 8001672:	2b02      	cmp	r3, #2
 8001674:	d124      	bne.n	80016c0 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001676:	69ba      	ldr	r2, [r7, #24]
 8001678:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800167c:	4013      	ands	r3, r2
 800167e:	2b00      	cmp	r3, #0
 8001680:	d035      	beq.n	80016ee <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001686:	69bb      	ldr	r3, [r7, #24]
 8001688:	091b      	lsrs	r3, r3, #4
 800168a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800168c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001690:	b29b      	uxth	r3, r3
 8001692:	461a      	mov	r2, r3
 8001694:	6a38      	ldr	r0, [r7, #32]
 8001696:	f003 fa29 	bl	8004aec <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	68da      	ldr	r2, [r3, #12]
 800169e:	69bb      	ldr	r3, [r7, #24]
 80016a0:	091b      	lsrs	r3, r3, #4
 80016a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80016a6:	441a      	add	r2, r3
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	695a      	ldr	r2, [r3, #20]
 80016b0:	69bb      	ldr	r3, [r7, #24]
 80016b2:	091b      	lsrs	r3, r3, #4
 80016b4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80016b8:	441a      	add	r2, r3
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	615a      	str	r2, [r3, #20]
 80016be:	e016      	b.n	80016ee <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80016c0:	69bb      	ldr	r3, [r7, #24]
 80016c2:	0c5b      	lsrs	r3, r3, #17
 80016c4:	f003 030f 	and.w	r3, r3, #15
 80016c8:	2b06      	cmp	r3, #6
 80016ca:	d110      	bne.n	80016ee <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80016d2:	2208      	movs	r2, #8
 80016d4:	4619      	mov	r1, r3
 80016d6:	6a38      	ldr	r0, [r7, #32]
 80016d8:	f003 fa08 	bl	8004aec <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	695a      	ldr	r2, [r3, #20]
 80016e0:	69bb      	ldr	r3, [r7, #24]
 80016e2:	091b      	lsrs	r3, r3, #4
 80016e4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80016e8:	441a      	add	r2, r3
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	699a      	ldr	r2, [r3, #24]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f042 0210 	orr.w	r2, r2, #16
 80016fc:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4618      	mov	r0, r3
 8001704:	f003 fb86 	bl	8004e14 <USB_ReadInterrupts>
 8001708:	4603      	mov	r3, r0
 800170a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800170e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8001712:	f040 80a7 	bne.w	8001864 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001716:	2300      	movs	r3, #0
 8001718:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4618      	mov	r0, r3
 8001720:	f003 fb8b 	bl	8004e3a <USB_ReadDevAllOutEpInterrupt>
 8001724:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8001726:	e099      	b.n	800185c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001728:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800172a:	f003 0301 	and.w	r3, r3, #1
 800172e:	2b00      	cmp	r3, #0
 8001730:	f000 808e 	beq.w	8001850 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800173a:	b2d2      	uxtb	r2, r2
 800173c:	4611      	mov	r1, r2
 800173e:	4618      	mov	r0, r3
 8001740:	f003 fbaf 	bl	8004ea2 <USB_ReadDevOutEPInterrupt>
 8001744:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	f003 0301 	and.w	r3, r3, #1
 800174c:	2b00      	cmp	r3, #0
 800174e:	d00c      	beq.n	800176a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001752:	015a      	lsls	r2, r3, #5
 8001754:	69fb      	ldr	r3, [r7, #28]
 8001756:	4413      	add	r3, r2
 8001758:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800175c:	461a      	mov	r2, r3
 800175e:	2301      	movs	r3, #1
 8001760:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001762:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001764:	6878      	ldr	r0, [r7, #4]
 8001766:	f000 fea3 	bl	80024b0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	f003 0308 	and.w	r3, r3, #8
 8001770:	2b00      	cmp	r3, #0
 8001772:	d00c      	beq.n	800178e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001776:	015a      	lsls	r2, r3, #5
 8001778:	69fb      	ldr	r3, [r7, #28]
 800177a:	4413      	add	r3, r2
 800177c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001780:	461a      	mov	r2, r3
 8001782:	2308      	movs	r3, #8
 8001784:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001786:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001788:	6878      	ldr	r0, [r7, #4]
 800178a:	f000 ff79 	bl	8002680 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	f003 0310 	and.w	r3, r3, #16
 8001794:	2b00      	cmp	r3, #0
 8001796:	d008      	beq.n	80017aa <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800179a:	015a      	lsls	r2, r3, #5
 800179c:	69fb      	ldr	r3, [r7, #28]
 800179e:	4413      	add	r3, r2
 80017a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80017a4:	461a      	mov	r2, r3
 80017a6:	2310      	movs	r3, #16
 80017a8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	f003 0302 	and.w	r3, r3, #2
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d030      	beq.n	8001816 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80017b4:	6a3b      	ldr	r3, [r7, #32]
 80017b6:	695b      	ldr	r3, [r3, #20]
 80017b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017bc:	2b80      	cmp	r3, #128	@ 0x80
 80017be:	d109      	bne.n	80017d4 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80017c0:	69fb      	ldr	r3, [r7, #28]
 80017c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	69fa      	ldr	r2, [r7, #28]
 80017ca:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80017ce:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80017d2:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80017d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80017d6:	4613      	mov	r3, r2
 80017d8:	00db      	lsls	r3, r3, #3
 80017da:	4413      	add	r3, r2
 80017dc:	009b      	lsls	r3, r3, #2
 80017de:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80017e2:	687a      	ldr	r2, [r7, #4]
 80017e4:	4413      	add	r3, r2
 80017e6:	3304      	adds	r3, #4
 80017e8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	78db      	ldrb	r3, [r3, #3]
 80017ee:	2b01      	cmp	r3, #1
 80017f0:	d108      	bne.n	8001804 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	2200      	movs	r2, #0
 80017f6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80017f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017fa:	b2db      	uxtb	r3, r3
 80017fc:	4619      	mov	r1, r3
 80017fe:	6878      	ldr	r0, [r7, #4]
 8001800:	f007 ffee 	bl	80097e0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001804:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001806:	015a      	lsls	r2, r3, #5
 8001808:	69fb      	ldr	r3, [r7, #28]
 800180a:	4413      	add	r3, r2
 800180c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001810:	461a      	mov	r2, r3
 8001812:	2302      	movs	r3, #2
 8001814:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	f003 0320 	and.w	r3, r3, #32
 800181c:	2b00      	cmp	r3, #0
 800181e:	d008      	beq.n	8001832 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001820:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001822:	015a      	lsls	r2, r3, #5
 8001824:	69fb      	ldr	r3, [r7, #28]
 8001826:	4413      	add	r3, r2
 8001828:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800182c:	461a      	mov	r2, r3
 800182e:	2320      	movs	r3, #32
 8001830:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001838:	2b00      	cmp	r3, #0
 800183a:	d009      	beq.n	8001850 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800183c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800183e:	015a      	lsls	r2, r3, #5
 8001840:	69fb      	ldr	r3, [r7, #28]
 8001842:	4413      	add	r3, r2
 8001844:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001848:	461a      	mov	r2, r3
 800184a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800184e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001852:	3301      	adds	r3, #1
 8001854:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8001856:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001858:	085b      	lsrs	r3, r3, #1
 800185a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800185c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800185e:	2b00      	cmp	r3, #0
 8001860:	f47f af62 	bne.w	8001728 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4618      	mov	r0, r3
 800186a:	f003 fad3 	bl	8004e14 <USB_ReadInterrupts>
 800186e:	4603      	mov	r3, r0
 8001870:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001874:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001878:	f040 80db 	bne.w	8001a32 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4618      	mov	r0, r3
 8001882:	f003 faf4 	bl	8004e6e <USB_ReadDevAllInEpInterrupt>
 8001886:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8001888:	2300      	movs	r3, #0
 800188a:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800188c:	e0cd      	b.n	8001a2a <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800188e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001890:	f003 0301 	and.w	r3, r3, #1
 8001894:	2b00      	cmp	r3, #0
 8001896:	f000 80c2 	beq.w	8001a1e <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80018a0:	b2d2      	uxtb	r2, r2
 80018a2:	4611      	mov	r1, r2
 80018a4:	4618      	mov	r0, r3
 80018a6:	f003 fb1a 	bl	8004ede <USB_ReadDevInEPInterrupt>
 80018aa:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80018ac:	693b      	ldr	r3, [r7, #16]
 80018ae:	f003 0301 	and.w	r3, r3, #1
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d057      	beq.n	8001966 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80018b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018b8:	f003 030f 	and.w	r3, r3, #15
 80018bc:	2201      	movs	r2, #1
 80018be:	fa02 f303 	lsl.w	r3, r2, r3
 80018c2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80018c4:	69fb      	ldr	r3, [r7, #28]
 80018c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80018ca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	43db      	mvns	r3, r3
 80018d0:	69f9      	ldr	r1, [r7, #28]
 80018d2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80018d6:	4013      	ands	r3, r2
 80018d8:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80018da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018dc:	015a      	lsls	r2, r3, #5
 80018de:	69fb      	ldr	r3, [r7, #28]
 80018e0:	4413      	add	r3, r2
 80018e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80018e6:	461a      	mov	r2, r3
 80018e8:	2301      	movs	r3, #1
 80018ea:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	799b      	ldrb	r3, [r3, #6]
 80018f0:	2b01      	cmp	r3, #1
 80018f2:	d132      	bne.n	800195a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80018f4:	6879      	ldr	r1, [r7, #4]
 80018f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80018f8:	4613      	mov	r3, r2
 80018fa:	00db      	lsls	r3, r3, #3
 80018fc:	4413      	add	r3, r2
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	440b      	add	r3, r1
 8001902:	3320      	adds	r3, #32
 8001904:	6819      	ldr	r1, [r3, #0]
 8001906:	6878      	ldr	r0, [r7, #4]
 8001908:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800190a:	4613      	mov	r3, r2
 800190c:	00db      	lsls	r3, r3, #3
 800190e:	4413      	add	r3, r2
 8001910:	009b      	lsls	r3, r3, #2
 8001912:	4403      	add	r3, r0
 8001914:	331c      	adds	r3, #28
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4419      	add	r1, r3
 800191a:	6878      	ldr	r0, [r7, #4]
 800191c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800191e:	4613      	mov	r3, r2
 8001920:	00db      	lsls	r3, r3, #3
 8001922:	4413      	add	r3, r2
 8001924:	009b      	lsls	r3, r3, #2
 8001926:	4403      	add	r3, r0
 8001928:	3320      	adds	r3, #32
 800192a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800192c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800192e:	2b00      	cmp	r3, #0
 8001930:	d113      	bne.n	800195a <HAL_PCD_IRQHandler+0x3a2>
 8001932:	6879      	ldr	r1, [r7, #4]
 8001934:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001936:	4613      	mov	r3, r2
 8001938:	00db      	lsls	r3, r3, #3
 800193a:	4413      	add	r3, r2
 800193c:	009b      	lsls	r3, r3, #2
 800193e:	440b      	add	r3, r1
 8001940:	3324      	adds	r3, #36	@ 0x24
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d108      	bne.n	800195a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6818      	ldr	r0, [r3, #0]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001952:	461a      	mov	r2, r3
 8001954:	2101      	movs	r1, #1
 8001956:	f003 fb21 	bl	8004f9c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800195a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800195c:	b2db      	uxtb	r3, r3
 800195e:	4619      	mov	r1, r3
 8001960:	6878      	ldr	r0, [r7, #4]
 8001962:	f007 feb8 	bl	80096d6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	f003 0308 	and.w	r3, r3, #8
 800196c:	2b00      	cmp	r3, #0
 800196e:	d008      	beq.n	8001982 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001972:	015a      	lsls	r2, r3, #5
 8001974:	69fb      	ldr	r3, [r7, #28]
 8001976:	4413      	add	r3, r2
 8001978:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800197c:	461a      	mov	r2, r3
 800197e:	2308      	movs	r3, #8
 8001980:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	f003 0310 	and.w	r3, r3, #16
 8001988:	2b00      	cmp	r3, #0
 800198a:	d008      	beq.n	800199e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800198c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800198e:	015a      	lsls	r2, r3, #5
 8001990:	69fb      	ldr	r3, [r7, #28]
 8001992:	4413      	add	r3, r2
 8001994:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001998:	461a      	mov	r2, r3
 800199a:	2310      	movs	r3, #16
 800199c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d008      	beq.n	80019ba <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80019a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019aa:	015a      	lsls	r2, r3, #5
 80019ac:	69fb      	ldr	r3, [r7, #28]
 80019ae:	4413      	add	r3, r2
 80019b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80019b4:	461a      	mov	r2, r3
 80019b6:	2340      	movs	r3, #64	@ 0x40
 80019b8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	f003 0302 	and.w	r3, r3, #2
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d023      	beq.n	8001a0c <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80019c4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80019c6:	6a38      	ldr	r0, [r7, #32]
 80019c8:	f002 fb08 	bl	8003fdc <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80019cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80019ce:	4613      	mov	r3, r2
 80019d0:	00db      	lsls	r3, r3, #3
 80019d2:	4413      	add	r3, r2
 80019d4:	009b      	lsls	r3, r3, #2
 80019d6:	3310      	adds	r3, #16
 80019d8:	687a      	ldr	r2, [r7, #4]
 80019da:	4413      	add	r3, r2
 80019dc:	3304      	adds	r3, #4
 80019de:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	78db      	ldrb	r3, [r3, #3]
 80019e4:	2b01      	cmp	r3, #1
 80019e6:	d108      	bne.n	80019fa <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	2200      	movs	r2, #0
 80019ec:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80019ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019f0:	b2db      	uxtb	r3, r3
 80019f2:	4619      	mov	r1, r3
 80019f4:	6878      	ldr	r0, [r7, #4]
 80019f6:	f007 ff05 	bl	8009804 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80019fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019fc:	015a      	lsls	r2, r3, #5
 80019fe:	69fb      	ldr	r3, [r7, #28]
 8001a00:	4413      	add	r3, r2
 8001a02:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001a06:	461a      	mov	r2, r3
 8001a08:	2302      	movs	r3, #2
 8001a0a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001a0c:	693b      	ldr	r3, [r7, #16]
 8001a0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d003      	beq.n	8001a1e <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001a16:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001a18:	6878      	ldr	r0, [r7, #4]
 8001a1a:	f000 fcbd 	bl	8002398 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001a1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a20:	3301      	adds	r3, #1
 8001a22:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8001a24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a26:	085b      	lsrs	r3, r3, #1
 8001a28:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8001a2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	f47f af2e 	bne.w	800188e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4618      	mov	r0, r3
 8001a38:	f003 f9ec 	bl	8004e14 <USB_ReadInterrupts>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001a42:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001a46:	d122      	bne.n	8001a8e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001a48:	69fb      	ldr	r3, [r7, #28]
 8001a4a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	69fa      	ldr	r2, [r7, #28]
 8001a52:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001a56:	f023 0301 	bic.w	r3, r3, #1
 8001a5a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	d108      	bne.n	8001a78 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2200      	movs	r2, #0
 8001a6a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001a6e:	2100      	movs	r1, #0
 8001a70:	6878      	ldr	r0, [r7, #4]
 8001a72:	f000 fea3 	bl	80027bc <HAL_PCDEx_LPM_Callback>
 8001a76:	e002      	b.n	8001a7e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001a78:	6878      	ldr	r0, [r7, #4]
 8001a7a:	f007 fea3 	bl	80097c4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	695a      	ldr	r2, [r3, #20]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8001a8c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4618      	mov	r0, r3
 8001a94:	f003 f9be 	bl	8004e14 <USB_ReadInterrupts>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001a9e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001aa2:	d112      	bne.n	8001aca <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001aa4:	69fb      	ldr	r3, [r7, #28]
 8001aa6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	f003 0301 	and.w	r3, r3, #1
 8001ab0:	2b01      	cmp	r3, #1
 8001ab2:	d102      	bne.n	8001aba <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001ab4:	6878      	ldr	r0, [r7, #4]
 8001ab6:	f007 fe5f 	bl	8009778 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	695a      	ldr	r2, [r3, #20]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8001ac8:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f003 f9a0 	bl	8004e14 <USB_ReadInterrupts>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001ada:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001ade:	f040 80b7 	bne.w	8001c50 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001ae2:	69fb      	ldr	r3, [r7, #28]
 8001ae4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	69fa      	ldr	r2, [r7, #28]
 8001aec:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001af0:	f023 0301 	bic.w	r3, r3, #1
 8001af4:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	2110      	movs	r1, #16
 8001afc:	4618      	mov	r0, r3
 8001afe:	f002 fa6d 	bl	8003fdc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b02:	2300      	movs	r3, #0
 8001b04:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001b06:	e046      	b.n	8001b96 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001b08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b0a:	015a      	lsls	r2, r3, #5
 8001b0c:	69fb      	ldr	r3, [r7, #28]
 8001b0e:	4413      	add	r3, r2
 8001b10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001b14:	461a      	mov	r2, r3
 8001b16:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8001b1a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001b1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b1e:	015a      	lsls	r2, r3, #5
 8001b20:	69fb      	ldr	r3, [r7, #28]
 8001b22:	4413      	add	r3, r2
 8001b24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001b2c:	0151      	lsls	r1, r2, #5
 8001b2e:	69fa      	ldr	r2, [r7, #28]
 8001b30:	440a      	add	r2, r1
 8001b32:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8001b36:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001b3a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001b3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b3e:	015a      	lsls	r2, r3, #5
 8001b40:	69fb      	ldr	r3, [r7, #28]
 8001b42:	4413      	add	r3, r2
 8001b44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001b48:	461a      	mov	r2, r3
 8001b4a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8001b4e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001b50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b52:	015a      	lsls	r2, r3, #5
 8001b54:	69fb      	ldr	r3, [r7, #28]
 8001b56:	4413      	add	r3, r2
 8001b58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001b60:	0151      	lsls	r1, r2, #5
 8001b62:	69fa      	ldr	r2, [r7, #28]
 8001b64:	440a      	add	r2, r1
 8001b66:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8001b6a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001b6e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001b70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b72:	015a      	lsls	r2, r3, #5
 8001b74:	69fb      	ldr	r3, [r7, #28]
 8001b76:	4413      	add	r3, r2
 8001b78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001b80:	0151      	lsls	r1, r2, #5
 8001b82:	69fa      	ldr	r2, [r7, #28]
 8001b84:	440a      	add	r2, r1
 8001b86:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8001b8a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001b8e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b92:	3301      	adds	r3, #1
 8001b94:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	791b      	ldrb	r3, [r3, #4]
 8001b9a:	461a      	mov	r2, r3
 8001b9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d3b2      	bcc.n	8001b08 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001ba2:	69fb      	ldr	r3, [r7, #28]
 8001ba4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001ba8:	69db      	ldr	r3, [r3, #28]
 8001baa:	69fa      	ldr	r2, [r7, #28]
 8001bac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001bb0:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8001bb4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	7bdb      	ldrb	r3, [r3, #15]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d016      	beq.n	8001bec <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001bbe:	69fb      	ldr	r3, [r7, #28]
 8001bc0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001bc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001bc8:	69fa      	ldr	r2, [r7, #28]
 8001bca:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001bce:	f043 030b 	orr.w	r3, r3, #11
 8001bd2:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001bdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bde:	69fa      	ldr	r2, [r7, #28]
 8001be0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001be4:	f043 030b 	orr.w	r3, r3, #11
 8001be8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001bea:	e015      	b.n	8001c18 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001bec:	69fb      	ldr	r3, [r7, #28]
 8001bee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001bf2:	695b      	ldr	r3, [r3, #20]
 8001bf4:	69fa      	ldr	r2, [r7, #28]
 8001bf6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001bfa:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001bfe:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8001c02:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001c04:	69fb      	ldr	r3, [r7, #28]
 8001c06:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001c0a:	691b      	ldr	r3, [r3, #16]
 8001c0c:	69fa      	ldr	r2, [r7, #28]
 8001c0e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001c12:	f043 030b 	orr.w	r3, r3, #11
 8001c16:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001c18:	69fb      	ldr	r3, [r7, #28]
 8001c1a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	69fa      	ldr	r2, [r7, #28]
 8001c22:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001c26:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8001c2a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6818      	ldr	r0, [r3, #0]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001c3a:	461a      	mov	r2, r3
 8001c3c:	f003 f9ae 	bl	8004f9c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	695a      	ldr	r2, [r3, #20]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8001c4e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4618      	mov	r0, r3
 8001c56:	f003 f8dd 	bl	8004e14 <USB_ReadInterrupts>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001c60:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001c64:	d123      	bne.n	8001cae <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f003 f973 	bl	8004f56 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4618      	mov	r0, r3
 8001c76:	f002 fa2a 	bl	80040ce <USB_GetDevSpeed>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	461a      	mov	r2, r3
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681c      	ldr	r4, [r3, #0]
 8001c86:	f001 fa09 	bl	800309c <HAL_RCC_GetHCLKFreq>
 8001c8a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001c90:	461a      	mov	r2, r3
 8001c92:	4620      	mov	r0, r4
 8001c94:	f001 ff2e 	bl	8003af4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001c98:	6878      	ldr	r0, [r7, #4]
 8001c9a:	f007 fd44 	bl	8009726 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	695a      	ldr	r2, [r3, #20]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8001cac:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f003 f8ae 	bl	8004e14 <USB_ReadInterrupts>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	f003 0308 	and.w	r3, r3, #8
 8001cbe:	2b08      	cmp	r3, #8
 8001cc0:	d10a      	bne.n	8001cd8 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001cc2:	6878      	ldr	r0, [r7, #4]
 8001cc4:	f007 fd21 	bl	800970a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	695a      	ldr	r2, [r3, #20]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f002 0208 	and.w	r2, r2, #8
 8001cd6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f003 f899 	bl	8004e14 <USB_ReadInterrupts>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ce8:	2b80      	cmp	r3, #128	@ 0x80
 8001cea:	d123      	bne.n	8001d34 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001cec:	6a3b      	ldr	r3, [r7, #32]
 8001cee:	699b      	ldr	r3, [r3, #24]
 8001cf0:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001cf4:	6a3b      	ldr	r3, [r7, #32]
 8001cf6:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	627b      	str	r3, [r7, #36]	@ 0x24
 8001cfc:	e014      	b.n	8001d28 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001cfe:	6879      	ldr	r1, [r7, #4]
 8001d00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d02:	4613      	mov	r3, r2
 8001d04:	00db      	lsls	r3, r3, #3
 8001d06:	4413      	add	r3, r2
 8001d08:	009b      	lsls	r3, r3, #2
 8001d0a:	440b      	add	r3, r1
 8001d0c:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8001d10:	781b      	ldrb	r3, [r3, #0]
 8001d12:	2b01      	cmp	r3, #1
 8001d14:	d105      	bne.n	8001d22 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	6878      	ldr	r0, [r7, #4]
 8001d1e:	f000 fb0a 	bl	8002336 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d24:	3301      	adds	r3, #1
 8001d26:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	791b      	ldrb	r3, [r3, #4]
 8001d2c:	461a      	mov	r2, r3
 8001d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d3e4      	bcc.n	8001cfe <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f003 f86b 	bl	8004e14 <USB_ReadInterrupts>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d44:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001d48:	d13c      	bne.n	8001dc4 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d4e:	e02b      	b.n	8001da8 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001d50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d52:	015a      	lsls	r2, r3, #5
 8001d54:	69fb      	ldr	r3, [r7, #28]
 8001d56:	4413      	add	r3, r2
 8001d58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001d60:	6879      	ldr	r1, [r7, #4]
 8001d62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d64:	4613      	mov	r3, r2
 8001d66:	00db      	lsls	r3, r3, #3
 8001d68:	4413      	add	r3, r2
 8001d6a:	009b      	lsls	r3, r3, #2
 8001d6c:	440b      	add	r3, r1
 8001d6e:	3318      	adds	r3, #24
 8001d70:	781b      	ldrb	r3, [r3, #0]
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d115      	bne.n	8001da2 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001d76:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	da12      	bge.n	8001da2 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001d7c:	6879      	ldr	r1, [r7, #4]
 8001d7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d80:	4613      	mov	r3, r2
 8001d82:	00db      	lsls	r3, r3, #3
 8001d84:	4413      	add	r3, r2
 8001d86:	009b      	lsls	r3, r3, #2
 8001d88:	440b      	add	r3, r1
 8001d8a:	3317      	adds	r3, #23
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001d90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d92:	b2db      	uxtb	r3, r3
 8001d94:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	6878      	ldr	r0, [r7, #4]
 8001d9e:	f000 faca 	bl	8002336 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001da4:	3301      	adds	r3, #1
 8001da6:	627b      	str	r3, [r7, #36]	@ 0x24
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	791b      	ldrb	r3, [r3, #4]
 8001dac:	461a      	mov	r2, r3
 8001dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d3cd      	bcc.n	8001d50 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	695a      	ldr	r2, [r3, #20]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8001dc2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f003 f823 	bl	8004e14 <USB_ReadInterrupts>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001dd4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001dd8:	d156      	bne.n	8001e88 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001dda:	2301      	movs	r3, #1
 8001ddc:	627b      	str	r3, [r7, #36]	@ 0x24
 8001dde:	e045      	b.n	8001e6c <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001de0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001de2:	015a      	lsls	r2, r3, #5
 8001de4:	69fb      	ldr	r3, [r7, #28]
 8001de6:	4413      	add	r3, r2
 8001de8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001df0:	6879      	ldr	r1, [r7, #4]
 8001df2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001df4:	4613      	mov	r3, r2
 8001df6:	00db      	lsls	r3, r3, #3
 8001df8:	4413      	add	r3, r2
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	440b      	add	r3, r1
 8001dfe:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001e02:	781b      	ldrb	r3, [r3, #0]
 8001e04:	2b01      	cmp	r3, #1
 8001e06:	d12e      	bne.n	8001e66 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001e08:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	da2b      	bge.n	8001e66 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001e0e:	69bb      	ldr	r3, [r7, #24]
 8001e10:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8001e1a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001e1e:	429a      	cmp	r2, r3
 8001e20:	d121      	bne.n	8001e66 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001e22:	6879      	ldr	r1, [r7, #4]
 8001e24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e26:	4613      	mov	r3, r2
 8001e28:	00db      	lsls	r3, r3, #3
 8001e2a:	4413      	add	r3, r2
 8001e2c:	009b      	lsls	r3, r3, #2
 8001e2e:	440b      	add	r3, r1
 8001e30:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8001e34:	2201      	movs	r2, #1
 8001e36:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001e38:	6a3b      	ldr	r3, [r7, #32]
 8001e3a:	699b      	ldr	r3, [r3, #24]
 8001e3c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001e40:	6a3b      	ldr	r3, [r7, #32]
 8001e42:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001e44:	6a3b      	ldr	r3, [r7, #32]
 8001e46:	695b      	ldr	r3, [r3, #20]
 8001e48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d10a      	bne.n	8001e66 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001e50:	69fb      	ldr	r3, [r7, #28]
 8001e52:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	69fa      	ldr	r2, [r7, #28]
 8001e5a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001e5e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001e62:	6053      	str	r3, [r2, #4]
            break;
 8001e64:	e008      	b.n	8001e78 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e68:	3301      	adds	r3, #1
 8001e6a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	791b      	ldrb	r3, [r3, #4]
 8001e70:	461a      	mov	r2, r3
 8001e72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d3b3      	bcc.n	8001de0 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	695a      	ldr	r2, [r3, #20]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8001e86:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f002 ffc1 	bl	8004e14 <USB_ReadInterrupts>
 8001e92:	4603      	mov	r3, r0
 8001e94:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001e98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e9c:	d10a      	bne.n	8001eb4 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	f007 fcc2 	bl	8009828 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	695a      	ldr	r2, [r3, #20]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8001eb2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f002 ffab 	bl	8004e14 <USB_ReadInterrupts>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	f003 0304 	and.w	r3, r3, #4
 8001ec4:	2b04      	cmp	r3, #4
 8001ec6:	d115      	bne.n	8001ef4 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001ed0:	69bb      	ldr	r3, [r7, #24]
 8001ed2:	f003 0304 	and.w	r3, r3, #4
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d002      	beq.n	8001ee0 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	f007 fcb2 	bl	8009844 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	6859      	ldr	r1, [r3, #4]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	69ba      	ldr	r2, [r7, #24]
 8001eec:	430a      	orrs	r2, r1
 8001eee:	605a      	str	r2, [r3, #4]
 8001ef0:	e000      	b.n	8001ef4 <HAL_PCD_IRQHandler+0x93c>
      return;
 8001ef2:	bf00      	nop
    }
  }
}
 8001ef4:	3734      	adds	r7, #52	@ 0x34
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd90      	pop	{r4, r7, pc}

08001efa <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001efa:	b580      	push	{r7, lr}
 8001efc:	b082      	sub	sp, #8
 8001efe:	af00      	add	r7, sp, #0
 8001f00:	6078      	str	r0, [r7, #4]
 8001f02:	460b      	mov	r3, r1
 8001f04:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001f0c:	2b01      	cmp	r3, #1
 8001f0e:	d101      	bne.n	8001f14 <HAL_PCD_SetAddress+0x1a>
 8001f10:	2302      	movs	r3, #2
 8001f12:	e012      	b.n	8001f3a <HAL_PCD_SetAddress+0x40>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2201      	movs	r2, #1
 8001f18:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	78fa      	ldrb	r2, [r7, #3]
 8001f20:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	78fa      	ldrb	r2, [r7, #3]
 8001f28:	4611      	mov	r1, r2
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f002 ff0a 	bl	8004d44 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2200      	movs	r2, #0
 8001f34:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001f38:	2300      	movs	r3, #0
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	3708      	adds	r7, #8
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}

08001f42 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001f42:	b580      	push	{r7, lr}
 8001f44:	b084      	sub	sp, #16
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	6078      	str	r0, [r7, #4]
 8001f4a:	4608      	mov	r0, r1
 8001f4c:	4611      	mov	r1, r2
 8001f4e:	461a      	mov	r2, r3
 8001f50:	4603      	mov	r3, r0
 8001f52:	70fb      	strb	r3, [r7, #3]
 8001f54:	460b      	mov	r3, r1
 8001f56:	803b      	strh	r3, [r7, #0]
 8001f58:	4613      	mov	r3, r2
 8001f5a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001f60:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	da0f      	bge.n	8001f88 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f68:	78fb      	ldrb	r3, [r7, #3]
 8001f6a:	f003 020f 	and.w	r2, r3, #15
 8001f6e:	4613      	mov	r3, r2
 8001f70:	00db      	lsls	r3, r3, #3
 8001f72:	4413      	add	r3, r2
 8001f74:	009b      	lsls	r3, r3, #2
 8001f76:	3310      	adds	r3, #16
 8001f78:	687a      	ldr	r2, [r7, #4]
 8001f7a:	4413      	add	r3, r2
 8001f7c:	3304      	adds	r3, #4
 8001f7e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	2201      	movs	r2, #1
 8001f84:	705a      	strb	r2, [r3, #1]
 8001f86:	e00f      	b.n	8001fa8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f88:	78fb      	ldrb	r3, [r7, #3]
 8001f8a:	f003 020f 	and.w	r2, r3, #15
 8001f8e:	4613      	mov	r3, r2
 8001f90:	00db      	lsls	r3, r3, #3
 8001f92:	4413      	add	r3, r2
 8001f94:	009b      	lsls	r3, r3, #2
 8001f96:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001f9a:	687a      	ldr	r2, [r7, #4]
 8001f9c:	4413      	add	r3, r2
 8001f9e:	3304      	adds	r3, #4
 8001fa0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001fa8:	78fb      	ldrb	r3, [r7, #3]
 8001faa:	f003 030f 	and.w	r3, r3, #15
 8001fae:	b2da      	uxtb	r2, r3
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8001fb4:	883b      	ldrh	r3, [r7, #0]
 8001fb6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	78ba      	ldrb	r2, [r7, #2]
 8001fc2:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	785b      	ldrb	r3, [r3, #1]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d004      	beq.n	8001fd6 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	461a      	mov	r2, r3
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001fd6:	78bb      	ldrb	r3, [r7, #2]
 8001fd8:	2b02      	cmp	r3, #2
 8001fda:	d102      	bne.n	8001fe2 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d101      	bne.n	8001ff0 <HAL_PCD_EP_Open+0xae>
 8001fec:	2302      	movs	r3, #2
 8001fee:	e00e      	b.n	800200e <HAL_PCD_EP_Open+0xcc>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	68f9      	ldr	r1, [r7, #12]
 8001ffe:	4618      	mov	r0, r3
 8002000:	f002 f88a 	bl	8004118 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2200      	movs	r2, #0
 8002008:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800200c:	7afb      	ldrb	r3, [r7, #11]
}
 800200e:	4618      	mov	r0, r3
 8002010:	3710      	adds	r7, #16
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}

08002016 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002016:	b580      	push	{r7, lr}
 8002018:	b084      	sub	sp, #16
 800201a:	af00      	add	r7, sp, #0
 800201c:	6078      	str	r0, [r7, #4]
 800201e:	460b      	mov	r3, r1
 8002020:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002022:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002026:	2b00      	cmp	r3, #0
 8002028:	da0f      	bge.n	800204a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800202a:	78fb      	ldrb	r3, [r7, #3]
 800202c:	f003 020f 	and.w	r2, r3, #15
 8002030:	4613      	mov	r3, r2
 8002032:	00db      	lsls	r3, r3, #3
 8002034:	4413      	add	r3, r2
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	3310      	adds	r3, #16
 800203a:	687a      	ldr	r2, [r7, #4]
 800203c:	4413      	add	r3, r2
 800203e:	3304      	adds	r3, #4
 8002040:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	2201      	movs	r2, #1
 8002046:	705a      	strb	r2, [r3, #1]
 8002048:	e00f      	b.n	800206a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800204a:	78fb      	ldrb	r3, [r7, #3]
 800204c:	f003 020f 	and.w	r2, r3, #15
 8002050:	4613      	mov	r3, r2
 8002052:	00db      	lsls	r3, r3, #3
 8002054:	4413      	add	r3, r2
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800205c:	687a      	ldr	r2, [r7, #4]
 800205e:	4413      	add	r3, r2
 8002060:	3304      	adds	r3, #4
 8002062:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	2200      	movs	r2, #0
 8002068:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800206a:	78fb      	ldrb	r3, [r7, #3]
 800206c:	f003 030f 	and.w	r3, r3, #15
 8002070:	b2da      	uxtb	r2, r3
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800207c:	2b01      	cmp	r3, #1
 800207e:	d101      	bne.n	8002084 <HAL_PCD_EP_Close+0x6e>
 8002080:	2302      	movs	r3, #2
 8002082:	e00e      	b.n	80020a2 <HAL_PCD_EP_Close+0x8c>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2201      	movs	r2, #1
 8002088:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	68f9      	ldr	r1, [r7, #12]
 8002092:	4618      	mov	r0, r3
 8002094:	f002 f8c8 	bl	8004228 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2200      	movs	r2, #0
 800209c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80020a0:	2300      	movs	r3, #0
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3710      	adds	r7, #16
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}

080020aa <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80020aa:	b580      	push	{r7, lr}
 80020ac:	b086      	sub	sp, #24
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	60f8      	str	r0, [r7, #12]
 80020b2:	607a      	str	r2, [r7, #4]
 80020b4:	603b      	str	r3, [r7, #0]
 80020b6:	460b      	mov	r3, r1
 80020b8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80020ba:	7afb      	ldrb	r3, [r7, #11]
 80020bc:	f003 020f 	and.w	r2, r3, #15
 80020c0:	4613      	mov	r3, r2
 80020c2:	00db      	lsls	r3, r3, #3
 80020c4:	4413      	add	r3, r2
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80020cc:	68fa      	ldr	r2, [r7, #12]
 80020ce:	4413      	add	r3, r2
 80020d0:	3304      	adds	r3, #4
 80020d2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	687a      	ldr	r2, [r7, #4]
 80020d8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	683a      	ldr	r2, [r7, #0]
 80020de:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	2200      	movs	r2, #0
 80020e4:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	2200      	movs	r2, #0
 80020ea:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80020ec:	7afb      	ldrb	r3, [r7, #11]
 80020ee:	f003 030f 	and.w	r3, r3, #15
 80020f2:	b2da      	uxtb	r2, r3
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	799b      	ldrb	r3, [r3, #6]
 80020fc:	2b01      	cmp	r3, #1
 80020fe:	d102      	bne.n	8002106 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002100:	687a      	ldr	r2, [r7, #4]
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	6818      	ldr	r0, [r3, #0]
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	799b      	ldrb	r3, [r3, #6]
 800210e:	461a      	mov	r2, r3
 8002110:	6979      	ldr	r1, [r7, #20]
 8002112:	f002 f965 	bl	80043e0 <USB_EPStartXfer>

  return HAL_OK;
 8002116:	2300      	movs	r3, #0
}
 8002118:	4618      	mov	r0, r3
 800211a:	3718      	adds	r7, #24
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}

08002120 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
 8002128:	460b      	mov	r3, r1
 800212a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800212c:	78fb      	ldrb	r3, [r7, #3]
 800212e:	f003 020f 	and.w	r2, r3, #15
 8002132:	6879      	ldr	r1, [r7, #4]
 8002134:	4613      	mov	r3, r2
 8002136:	00db      	lsls	r3, r3, #3
 8002138:	4413      	add	r3, r2
 800213a:	009b      	lsls	r3, r3, #2
 800213c:	440b      	add	r3, r1
 800213e:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8002142:	681b      	ldr	r3, [r3, #0]
}
 8002144:	4618      	mov	r0, r3
 8002146:	370c      	adds	r7, #12
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr

08002150 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b086      	sub	sp, #24
 8002154:	af00      	add	r7, sp, #0
 8002156:	60f8      	str	r0, [r7, #12]
 8002158:	607a      	str	r2, [r7, #4]
 800215a:	603b      	str	r3, [r7, #0]
 800215c:	460b      	mov	r3, r1
 800215e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002160:	7afb      	ldrb	r3, [r7, #11]
 8002162:	f003 020f 	and.w	r2, r3, #15
 8002166:	4613      	mov	r3, r2
 8002168:	00db      	lsls	r3, r3, #3
 800216a:	4413      	add	r3, r2
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	3310      	adds	r3, #16
 8002170:	68fa      	ldr	r2, [r7, #12]
 8002172:	4413      	add	r3, r2
 8002174:	3304      	adds	r3, #4
 8002176:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	687a      	ldr	r2, [r7, #4]
 800217c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	683a      	ldr	r2, [r7, #0]
 8002182:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	2200      	movs	r2, #0
 8002188:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	2201      	movs	r2, #1
 800218e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002190:	7afb      	ldrb	r3, [r7, #11]
 8002192:	f003 030f 	and.w	r3, r3, #15
 8002196:	b2da      	uxtb	r2, r3
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	799b      	ldrb	r3, [r3, #6]
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	d102      	bne.n	80021aa <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80021a4:	687a      	ldr	r2, [r7, #4]
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	6818      	ldr	r0, [r3, #0]
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	799b      	ldrb	r3, [r3, #6]
 80021b2:	461a      	mov	r2, r3
 80021b4:	6979      	ldr	r1, [r7, #20]
 80021b6:	f002 f913 	bl	80043e0 <USB_EPStartXfer>

  return HAL_OK;
 80021ba:	2300      	movs	r3, #0
}
 80021bc:	4618      	mov	r0, r3
 80021be:	3718      	adds	r7, #24
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}

080021c4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b084      	sub	sp, #16
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
 80021cc:	460b      	mov	r3, r1
 80021ce:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80021d0:	78fb      	ldrb	r3, [r7, #3]
 80021d2:	f003 030f 	and.w	r3, r3, #15
 80021d6:	687a      	ldr	r2, [r7, #4]
 80021d8:	7912      	ldrb	r2, [r2, #4]
 80021da:	4293      	cmp	r3, r2
 80021dc:	d901      	bls.n	80021e2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e04f      	b.n	8002282 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80021e2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	da0f      	bge.n	800220a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80021ea:	78fb      	ldrb	r3, [r7, #3]
 80021ec:	f003 020f 	and.w	r2, r3, #15
 80021f0:	4613      	mov	r3, r2
 80021f2:	00db      	lsls	r3, r3, #3
 80021f4:	4413      	add	r3, r2
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	3310      	adds	r3, #16
 80021fa:	687a      	ldr	r2, [r7, #4]
 80021fc:	4413      	add	r3, r2
 80021fe:	3304      	adds	r3, #4
 8002200:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	2201      	movs	r2, #1
 8002206:	705a      	strb	r2, [r3, #1]
 8002208:	e00d      	b.n	8002226 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800220a:	78fa      	ldrb	r2, [r7, #3]
 800220c:	4613      	mov	r3, r2
 800220e:	00db      	lsls	r3, r3, #3
 8002210:	4413      	add	r3, r2
 8002212:	009b      	lsls	r3, r3, #2
 8002214:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002218:	687a      	ldr	r2, [r7, #4]
 800221a:	4413      	add	r3, r2
 800221c:	3304      	adds	r3, #4
 800221e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	2200      	movs	r2, #0
 8002224:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	2201      	movs	r2, #1
 800222a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800222c:	78fb      	ldrb	r3, [r7, #3]
 800222e:	f003 030f 	and.w	r3, r3, #15
 8002232:	b2da      	uxtb	r2, r3
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800223e:	2b01      	cmp	r3, #1
 8002240:	d101      	bne.n	8002246 <HAL_PCD_EP_SetStall+0x82>
 8002242:	2302      	movs	r3, #2
 8002244:	e01d      	b.n	8002282 <HAL_PCD_EP_SetStall+0xbe>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2201      	movs	r2, #1
 800224a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	68f9      	ldr	r1, [r7, #12]
 8002254:	4618      	mov	r0, r3
 8002256:	f002 fca1 	bl	8004b9c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800225a:	78fb      	ldrb	r3, [r7, #3]
 800225c:	f003 030f 	and.w	r3, r3, #15
 8002260:	2b00      	cmp	r3, #0
 8002262:	d109      	bne.n	8002278 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6818      	ldr	r0, [r3, #0]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	7999      	ldrb	r1, [r3, #6]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002272:	461a      	mov	r2, r3
 8002274:	f002 fe92 	bl	8004f9c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2200      	movs	r2, #0
 800227c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002280:	2300      	movs	r3, #0
}
 8002282:	4618      	mov	r0, r3
 8002284:	3710      	adds	r7, #16
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}

0800228a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800228a:	b580      	push	{r7, lr}
 800228c:	b084      	sub	sp, #16
 800228e:	af00      	add	r7, sp, #0
 8002290:	6078      	str	r0, [r7, #4]
 8002292:	460b      	mov	r3, r1
 8002294:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002296:	78fb      	ldrb	r3, [r7, #3]
 8002298:	f003 030f 	and.w	r3, r3, #15
 800229c:	687a      	ldr	r2, [r7, #4]
 800229e:	7912      	ldrb	r2, [r2, #4]
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d901      	bls.n	80022a8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80022a4:	2301      	movs	r3, #1
 80022a6:	e042      	b.n	800232e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80022a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	da0f      	bge.n	80022d0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80022b0:	78fb      	ldrb	r3, [r7, #3]
 80022b2:	f003 020f 	and.w	r2, r3, #15
 80022b6:	4613      	mov	r3, r2
 80022b8:	00db      	lsls	r3, r3, #3
 80022ba:	4413      	add	r3, r2
 80022bc:	009b      	lsls	r3, r3, #2
 80022be:	3310      	adds	r3, #16
 80022c0:	687a      	ldr	r2, [r7, #4]
 80022c2:	4413      	add	r3, r2
 80022c4:	3304      	adds	r3, #4
 80022c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	2201      	movs	r2, #1
 80022cc:	705a      	strb	r2, [r3, #1]
 80022ce:	e00f      	b.n	80022f0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80022d0:	78fb      	ldrb	r3, [r7, #3]
 80022d2:	f003 020f 	and.w	r2, r3, #15
 80022d6:	4613      	mov	r3, r2
 80022d8:	00db      	lsls	r3, r3, #3
 80022da:	4413      	add	r3, r2
 80022dc:	009b      	lsls	r3, r3, #2
 80022de:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80022e2:	687a      	ldr	r2, [r7, #4]
 80022e4:	4413      	add	r3, r2
 80022e6:	3304      	adds	r3, #4
 80022e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	2200      	movs	r2, #0
 80022ee:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	2200      	movs	r2, #0
 80022f4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80022f6:	78fb      	ldrb	r3, [r7, #3]
 80022f8:	f003 030f 	and.w	r3, r3, #15
 80022fc:	b2da      	uxtb	r2, r3
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002308:	2b01      	cmp	r3, #1
 800230a:	d101      	bne.n	8002310 <HAL_PCD_EP_ClrStall+0x86>
 800230c:	2302      	movs	r3, #2
 800230e:	e00e      	b.n	800232e <HAL_PCD_EP_ClrStall+0xa4>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2201      	movs	r2, #1
 8002314:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	68f9      	ldr	r1, [r7, #12]
 800231e:	4618      	mov	r0, r3
 8002320:	f002 fcaa 	bl	8004c78 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2200      	movs	r2, #0
 8002328:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800232c:	2300      	movs	r3, #0
}
 800232e:	4618      	mov	r0, r3
 8002330:	3710      	adds	r7, #16
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}

08002336 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002336:	b580      	push	{r7, lr}
 8002338:	b084      	sub	sp, #16
 800233a:	af00      	add	r7, sp, #0
 800233c:	6078      	str	r0, [r7, #4]
 800233e:	460b      	mov	r3, r1
 8002340:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002342:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002346:	2b00      	cmp	r3, #0
 8002348:	da0c      	bge.n	8002364 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800234a:	78fb      	ldrb	r3, [r7, #3]
 800234c:	f003 020f 	and.w	r2, r3, #15
 8002350:	4613      	mov	r3, r2
 8002352:	00db      	lsls	r3, r3, #3
 8002354:	4413      	add	r3, r2
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	3310      	adds	r3, #16
 800235a:	687a      	ldr	r2, [r7, #4]
 800235c:	4413      	add	r3, r2
 800235e:	3304      	adds	r3, #4
 8002360:	60fb      	str	r3, [r7, #12]
 8002362:	e00c      	b.n	800237e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002364:	78fb      	ldrb	r3, [r7, #3]
 8002366:	f003 020f 	and.w	r2, r3, #15
 800236a:	4613      	mov	r3, r2
 800236c:	00db      	lsls	r3, r3, #3
 800236e:	4413      	add	r3, r2
 8002370:	009b      	lsls	r3, r3, #2
 8002372:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002376:	687a      	ldr	r2, [r7, #4]
 8002378:	4413      	add	r3, r2
 800237a:	3304      	adds	r3, #4
 800237c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	68f9      	ldr	r1, [r7, #12]
 8002384:	4618      	mov	r0, r3
 8002386:	f002 fac9 	bl	800491c <USB_EPStopXfer>
 800238a:	4603      	mov	r3, r0
 800238c:	72fb      	strb	r3, [r7, #11]

  return ret;
 800238e:	7afb      	ldrb	r3, [r7, #11]
}
 8002390:	4618      	mov	r0, r3
 8002392:	3710      	adds	r7, #16
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}

08002398 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b08a      	sub	sp, #40	@ 0x28
 800239c:	af02      	add	r7, sp, #8
 800239e:	6078      	str	r0, [r7, #4]
 80023a0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80023ac:	683a      	ldr	r2, [r7, #0]
 80023ae:	4613      	mov	r3, r2
 80023b0:	00db      	lsls	r3, r3, #3
 80023b2:	4413      	add	r3, r2
 80023b4:	009b      	lsls	r3, r3, #2
 80023b6:	3310      	adds	r3, #16
 80023b8:	687a      	ldr	r2, [r7, #4]
 80023ba:	4413      	add	r3, r2
 80023bc:	3304      	adds	r3, #4
 80023be:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	695a      	ldr	r2, [r3, #20]
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	691b      	ldr	r3, [r3, #16]
 80023c8:	429a      	cmp	r2, r3
 80023ca:	d901      	bls.n	80023d0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
 80023ce:	e06b      	b.n	80024a8 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	691a      	ldr	r2, [r3, #16]
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	695b      	ldr	r3, [r3, #20]
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	69fa      	ldr	r2, [r7, #28]
 80023e2:	429a      	cmp	r2, r3
 80023e4:	d902      	bls.n	80023ec <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80023ec:	69fb      	ldr	r3, [r7, #28]
 80023ee:	3303      	adds	r3, #3
 80023f0:	089b      	lsrs	r3, r3, #2
 80023f2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80023f4:	e02a      	b.n	800244c <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	691a      	ldr	r2, [r3, #16]
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	695b      	ldr	r3, [r3, #20]
 80023fe:	1ad3      	subs	r3, r2, r3
 8002400:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	69fa      	ldr	r2, [r7, #28]
 8002408:	429a      	cmp	r2, r3
 800240a:	d902      	bls.n	8002412 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002412:	69fb      	ldr	r3, [r7, #28]
 8002414:	3303      	adds	r3, #3
 8002416:	089b      	lsrs	r3, r3, #2
 8002418:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	68d9      	ldr	r1, [r3, #12]
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	b2da      	uxtb	r2, r3
 8002422:	69fb      	ldr	r3, [r7, #28]
 8002424:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800242a:	9300      	str	r3, [sp, #0]
 800242c:	4603      	mov	r3, r0
 800242e:	6978      	ldr	r0, [r7, #20]
 8002430:	f002 fb1e 	bl	8004a70 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	68da      	ldr	r2, [r3, #12]
 8002438:	69fb      	ldr	r3, [r7, #28]
 800243a:	441a      	add	r2, r3
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	695a      	ldr	r2, [r3, #20]
 8002444:	69fb      	ldr	r3, [r7, #28]
 8002446:	441a      	add	r2, r3
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	015a      	lsls	r2, r3, #5
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	4413      	add	r3, r2
 8002454:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002458:	699b      	ldr	r3, [r3, #24]
 800245a:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800245c:	69ba      	ldr	r2, [r7, #24]
 800245e:	429a      	cmp	r2, r3
 8002460:	d809      	bhi.n	8002476 <PCD_WriteEmptyTxFifo+0xde>
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	695a      	ldr	r2, [r3, #20]
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800246a:	429a      	cmp	r2, r3
 800246c:	d203      	bcs.n	8002476 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	691b      	ldr	r3, [r3, #16]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d1bf      	bne.n	80023f6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	691a      	ldr	r2, [r3, #16]
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	695b      	ldr	r3, [r3, #20]
 800247e:	429a      	cmp	r2, r3
 8002480:	d811      	bhi.n	80024a6 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	f003 030f 	and.w	r3, r3, #15
 8002488:	2201      	movs	r2, #1
 800248a:	fa02 f303 	lsl.w	r3, r2, r3
 800248e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002496:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	43db      	mvns	r3, r3
 800249c:	6939      	ldr	r1, [r7, #16]
 800249e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80024a2:	4013      	ands	r3, r2
 80024a4:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80024a6:	2300      	movs	r3, #0
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	3720      	adds	r7, #32
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}

080024b0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b088      	sub	sp, #32
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
 80024b8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80024c0:	69fb      	ldr	r3, [r7, #28]
 80024c2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80024c4:	69fb      	ldr	r3, [r7, #28]
 80024c6:	333c      	adds	r3, #60	@ 0x3c
 80024c8:	3304      	adds	r3, #4
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	015a      	lsls	r2, r3, #5
 80024d2:	69bb      	ldr	r3, [r7, #24]
 80024d4:	4413      	add	r3, r2
 80024d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	799b      	ldrb	r3, [r3, #6]
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d17b      	bne.n	80025de <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	f003 0308 	and.w	r3, r3, #8
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d015      	beq.n	800251c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	4a61      	ldr	r2, [pc, #388]	@ (8002678 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	f240 80b9 	bls.w	800266c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002500:	2b00      	cmp	r3, #0
 8002502:	f000 80b3 	beq.w	800266c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	015a      	lsls	r2, r3, #5
 800250a:	69bb      	ldr	r3, [r7, #24]
 800250c:	4413      	add	r3, r2
 800250e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002512:	461a      	mov	r2, r3
 8002514:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002518:	6093      	str	r3, [r2, #8]
 800251a:	e0a7      	b.n	800266c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	f003 0320 	and.w	r3, r3, #32
 8002522:	2b00      	cmp	r3, #0
 8002524:	d009      	beq.n	800253a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	015a      	lsls	r2, r3, #5
 800252a:	69bb      	ldr	r3, [r7, #24]
 800252c:	4413      	add	r3, r2
 800252e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002532:	461a      	mov	r2, r3
 8002534:	2320      	movs	r3, #32
 8002536:	6093      	str	r3, [r2, #8]
 8002538:	e098      	b.n	800266c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002540:	2b00      	cmp	r3, #0
 8002542:	f040 8093 	bne.w	800266c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	4a4b      	ldr	r2, [pc, #300]	@ (8002678 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d90f      	bls.n	800256e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002554:	2b00      	cmp	r3, #0
 8002556:	d00a      	beq.n	800256e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	015a      	lsls	r2, r3, #5
 800255c:	69bb      	ldr	r3, [r7, #24]
 800255e:	4413      	add	r3, r2
 8002560:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002564:	461a      	mov	r2, r3
 8002566:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800256a:	6093      	str	r3, [r2, #8]
 800256c:	e07e      	b.n	800266c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800256e:	683a      	ldr	r2, [r7, #0]
 8002570:	4613      	mov	r3, r2
 8002572:	00db      	lsls	r3, r3, #3
 8002574:	4413      	add	r3, r2
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800257c:	687a      	ldr	r2, [r7, #4]
 800257e:	4413      	add	r3, r2
 8002580:	3304      	adds	r3, #4
 8002582:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	6a1a      	ldr	r2, [r3, #32]
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	0159      	lsls	r1, r3, #5
 800258c:	69bb      	ldr	r3, [r7, #24]
 800258e:	440b      	add	r3, r1
 8002590:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002594:	691b      	ldr	r3, [r3, #16]
 8002596:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800259a:	1ad2      	subs	r2, r2, r3
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d114      	bne.n	80025d0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	691b      	ldr	r3, [r3, #16]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d109      	bne.n	80025c2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6818      	ldr	r0, [r3, #0]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80025b8:	461a      	mov	r2, r3
 80025ba:	2101      	movs	r1, #1
 80025bc:	f002 fcee 	bl	8004f9c <USB_EP0_OutStart>
 80025c0:	e006      	b.n	80025d0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	68da      	ldr	r2, [r3, #12]
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	695b      	ldr	r3, [r3, #20]
 80025ca:	441a      	add	r2, r3
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	b2db      	uxtb	r3, r3
 80025d4:	4619      	mov	r1, r3
 80025d6:	6878      	ldr	r0, [r7, #4]
 80025d8:	f007 f862 	bl	80096a0 <HAL_PCD_DataOutStageCallback>
 80025dc:	e046      	b.n	800266c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	4a26      	ldr	r2, [pc, #152]	@ (800267c <PCD_EP_OutXfrComplete_int+0x1cc>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d124      	bne.n	8002630 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d00a      	beq.n	8002606 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	015a      	lsls	r2, r3, #5
 80025f4:	69bb      	ldr	r3, [r7, #24]
 80025f6:	4413      	add	r3, r2
 80025f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80025fc:	461a      	mov	r2, r3
 80025fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002602:	6093      	str	r3, [r2, #8]
 8002604:	e032      	b.n	800266c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	f003 0320 	and.w	r3, r3, #32
 800260c:	2b00      	cmp	r3, #0
 800260e:	d008      	beq.n	8002622 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	015a      	lsls	r2, r3, #5
 8002614:	69bb      	ldr	r3, [r7, #24]
 8002616:	4413      	add	r3, r2
 8002618:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800261c:	461a      	mov	r2, r3
 800261e:	2320      	movs	r3, #32
 8002620:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	b2db      	uxtb	r3, r3
 8002626:	4619      	mov	r1, r3
 8002628:	6878      	ldr	r0, [r7, #4]
 800262a:	f007 f839 	bl	80096a0 <HAL_PCD_DataOutStageCallback>
 800262e:	e01d      	b.n	800266c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d114      	bne.n	8002660 <PCD_EP_OutXfrComplete_int+0x1b0>
 8002636:	6879      	ldr	r1, [r7, #4]
 8002638:	683a      	ldr	r2, [r7, #0]
 800263a:	4613      	mov	r3, r2
 800263c:	00db      	lsls	r3, r3, #3
 800263e:	4413      	add	r3, r2
 8002640:	009b      	lsls	r3, r3, #2
 8002642:	440b      	add	r3, r1
 8002644:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d108      	bne.n	8002660 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6818      	ldr	r0, [r3, #0]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002658:	461a      	mov	r2, r3
 800265a:	2100      	movs	r1, #0
 800265c:	f002 fc9e 	bl	8004f9c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	b2db      	uxtb	r3, r3
 8002664:	4619      	mov	r1, r3
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	f007 f81a 	bl	80096a0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800266c:	2300      	movs	r3, #0
}
 800266e:	4618      	mov	r0, r3
 8002670:	3720      	adds	r7, #32
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	4f54300a 	.word	0x4f54300a
 800267c:	4f54310a 	.word	0x4f54310a

08002680 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b086      	sub	sp, #24
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
 8002688:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	333c      	adds	r3, #60	@ 0x3c
 8002698:	3304      	adds	r3, #4
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	015a      	lsls	r2, r3, #5
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	4413      	add	r3, r2
 80026a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	4a15      	ldr	r2, [pc, #84]	@ (8002708 <PCD_EP_OutSetupPacket_int+0x88>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d90e      	bls.n	80026d4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d009      	beq.n	80026d4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	015a      	lsls	r2, r3, #5
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	4413      	add	r3, r2
 80026c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80026cc:	461a      	mov	r2, r3
 80026ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80026d2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80026d4:	6878      	ldr	r0, [r7, #4]
 80026d6:	f006 ffd1 	bl	800967c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	4a0a      	ldr	r2, [pc, #40]	@ (8002708 <PCD_EP_OutSetupPacket_int+0x88>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d90c      	bls.n	80026fc <PCD_EP_OutSetupPacket_int+0x7c>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	799b      	ldrb	r3, [r3, #6]
 80026e6:	2b01      	cmp	r3, #1
 80026e8:	d108      	bne.n	80026fc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6818      	ldr	r0, [r3, #0]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80026f4:	461a      	mov	r2, r3
 80026f6:	2101      	movs	r1, #1
 80026f8:	f002 fc50 	bl	8004f9c <USB_EP0_OutStart>
  }

  return HAL_OK;
 80026fc:	2300      	movs	r3, #0
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3718      	adds	r7, #24
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop
 8002708:	4f54300a 	.word	0x4f54300a

0800270c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800270c:	b480      	push	{r7}
 800270e:	b085      	sub	sp, #20
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
 8002714:	460b      	mov	r3, r1
 8002716:	70fb      	strb	r3, [r7, #3]
 8002718:	4613      	mov	r3, r2
 800271a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002722:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002724:	78fb      	ldrb	r3, [r7, #3]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d107      	bne.n	800273a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800272a:	883b      	ldrh	r3, [r7, #0]
 800272c:	0419      	lsls	r1, r3, #16
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	68ba      	ldr	r2, [r7, #8]
 8002734:	430a      	orrs	r2, r1
 8002736:	629a      	str	r2, [r3, #40]	@ 0x28
 8002738:	e028      	b.n	800278c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002740:	0c1b      	lsrs	r3, r3, #16
 8002742:	68ba      	ldr	r2, [r7, #8]
 8002744:	4413      	add	r3, r2
 8002746:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002748:	2300      	movs	r3, #0
 800274a:	73fb      	strb	r3, [r7, #15]
 800274c:	e00d      	b.n	800276a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	7bfb      	ldrb	r3, [r7, #15]
 8002754:	3340      	adds	r3, #64	@ 0x40
 8002756:	009b      	lsls	r3, r3, #2
 8002758:	4413      	add	r3, r2
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	0c1b      	lsrs	r3, r3, #16
 800275e:	68ba      	ldr	r2, [r7, #8]
 8002760:	4413      	add	r3, r2
 8002762:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002764:	7bfb      	ldrb	r3, [r7, #15]
 8002766:	3301      	adds	r3, #1
 8002768:	73fb      	strb	r3, [r7, #15]
 800276a:	7bfa      	ldrb	r2, [r7, #15]
 800276c:	78fb      	ldrb	r3, [r7, #3]
 800276e:	3b01      	subs	r3, #1
 8002770:	429a      	cmp	r2, r3
 8002772:	d3ec      	bcc.n	800274e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002774:	883b      	ldrh	r3, [r7, #0]
 8002776:	0418      	lsls	r0, r3, #16
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6819      	ldr	r1, [r3, #0]
 800277c:	78fb      	ldrb	r3, [r7, #3]
 800277e:	3b01      	subs	r3, #1
 8002780:	68ba      	ldr	r2, [r7, #8]
 8002782:	4302      	orrs	r2, r0
 8002784:	3340      	adds	r3, #64	@ 0x40
 8002786:	009b      	lsls	r3, r3, #2
 8002788:	440b      	add	r3, r1
 800278a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800278c:	2300      	movs	r3, #0
}
 800278e:	4618      	mov	r0, r3
 8002790:	3714      	adds	r7, #20
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr

0800279a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800279a:	b480      	push	{r7}
 800279c:	b083      	sub	sp, #12
 800279e:	af00      	add	r7, sp, #0
 80027a0:	6078      	str	r0, [r7, #4]
 80027a2:	460b      	mov	r3, r1
 80027a4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	887a      	ldrh	r2, [r7, #2]
 80027ac:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80027ae:	2300      	movs	r3, #0
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	370c      	adds	r7, #12
 80027b4:	46bd      	mov	sp, r7
 80027b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ba:	4770      	bx	lr

080027bc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80027bc:	b480      	push	{r7}
 80027be:	b083      	sub	sp, #12
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
 80027c4:	460b      	mov	r3, r1
 80027c6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80027c8:	bf00      	nop
 80027ca:	370c      	adds	r7, #12
 80027cc:	46bd      	mov	sp, r7
 80027ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d2:	4770      	bx	lr

080027d4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b086      	sub	sp, #24
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d101      	bne.n	80027e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e267      	b.n	8002cb6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 0301 	and.w	r3, r3, #1
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d075      	beq.n	80028de <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80027f2:	4b88      	ldr	r3, [pc, #544]	@ (8002a14 <HAL_RCC_OscConfig+0x240>)
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	f003 030c 	and.w	r3, r3, #12
 80027fa:	2b04      	cmp	r3, #4
 80027fc:	d00c      	beq.n	8002818 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027fe:	4b85      	ldr	r3, [pc, #532]	@ (8002a14 <HAL_RCC_OscConfig+0x240>)
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002806:	2b08      	cmp	r3, #8
 8002808:	d112      	bne.n	8002830 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800280a:	4b82      	ldr	r3, [pc, #520]	@ (8002a14 <HAL_RCC_OscConfig+0x240>)
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002812:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002816:	d10b      	bne.n	8002830 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002818:	4b7e      	ldr	r3, [pc, #504]	@ (8002a14 <HAL_RCC_OscConfig+0x240>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002820:	2b00      	cmp	r3, #0
 8002822:	d05b      	beq.n	80028dc <HAL_RCC_OscConfig+0x108>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d157      	bne.n	80028dc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800282c:	2301      	movs	r3, #1
 800282e:	e242      	b.n	8002cb6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002838:	d106      	bne.n	8002848 <HAL_RCC_OscConfig+0x74>
 800283a:	4b76      	ldr	r3, [pc, #472]	@ (8002a14 <HAL_RCC_OscConfig+0x240>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a75      	ldr	r2, [pc, #468]	@ (8002a14 <HAL_RCC_OscConfig+0x240>)
 8002840:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002844:	6013      	str	r3, [r2, #0]
 8002846:	e01d      	b.n	8002884 <HAL_RCC_OscConfig+0xb0>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002850:	d10c      	bne.n	800286c <HAL_RCC_OscConfig+0x98>
 8002852:	4b70      	ldr	r3, [pc, #448]	@ (8002a14 <HAL_RCC_OscConfig+0x240>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a6f      	ldr	r2, [pc, #444]	@ (8002a14 <HAL_RCC_OscConfig+0x240>)
 8002858:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800285c:	6013      	str	r3, [r2, #0]
 800285e:	4b6d      	ldr	r3, [pc, #436]	@ (8002a14 <HAL_RCC_OscConfig+0x240>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a6c      	ldr	r2, [pc, #432]	@ (8002a14 <HAL_RCC_OscConfig+0x240>)
 8002864:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002868:	6013      	str	r3, [r2, #0]
 800286a:	e00b      	b.n	8002884 <HAL_RCC_OscConfig+0xb0>
 800286c:	4b69      	ldr	r3, [pc, #420]	@ (8002a14 <HAL_RCC_OscConfig+0x240>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a68      	ldr	r2, [pc, #416]	@ (8002a14 <HAL_RCC_OscConfig+0x240>)
 8002872:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002876:	6013      	str	r3, [r2, #0]
 8002878:	4b66      	ldr	r3, [pc, #408]	@ (8002a14 <HAL_RCC_OscConfig+0x240>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a65      	ldr	r2, [pc, #404]	@ (8002a14 <HAL_RCC_OscConfig+0x240>)
 800287e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002882:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d013      	beq.n	80028b4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800288c:	f7fe fa58 	bl	8000d40 <HAL_GetTick>
 8002890:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002892:	e008      	b.n	80028a6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002894:	f7fe fa54 	bl	8000d40 <HAL_GetTick>
 8002898:	4602      	mov	r2, r0
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	2b64      	cmp	r3, #100	@ 0x64
 80028a0:	d901      	bls.n	80028a6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80028a2:	2303      	movs	r3, #3
 80028a4:	e207      	b.n	8002cb6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028a6:	4b5b      	ldr	r3, [pc, #364]	@ (8002a14 <HAL_RCC_OscConfig+0x240>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d0f0      	beq.n	8002894 <HAL_RCC_OscConfig+0xc0>
 80028b2:	e014      	b.n	80028de <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028b4:	f7fe fa44 	bl	8000d40 <HAL_GetTick>
 80028b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028ba:	e008      	b.n	80028ce <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028bc:	f7fe fa40 	bl	8000d40 <HAL_GetTick>
 80028c0:	4602      	mov	r2, r0
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	1ad3      	subs	r3, r2, r3
 80028c6:	2b64      	cmp	r3, #100	@ 0x64
 80028c8:	d901      	bls.n	80028ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80028ca:	2303      	movs	r3, #3
 80028cc:	e1f3      	b.n	8002cb6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028ce:	4b51      	ldr	r3, [pc, #324]	@ (8002a14 <HAL_RCC_OscConfig+0x240>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d1f0      	bne.n	80028bc <HAL_RCC_OscConfig+0xe8>
 80028da:	e000      	b.n	80028de <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 0302 	and.w	r3, r3, #2
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d063      	beq.n	80029b2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80028ea:	4b4a      	ldr	r3, [pc, #296]	@ (8002a14 <HAL_RCC_OscConfig+0x240>)
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	f003 030c 	and.w	r3, r3, #12
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d00b      	beq.n	800290e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028f6:	4b47      	ldr	r3, [pc, #284]	@ (8002a14 <HAL_RCC_OscConfig+0x240>)
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80028fe:	2b08      	cmp	r3, #8
 8002900:	d11c      	bne.n	800293c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002902:	4b44      	ldr	r3, [pc, #272]	@ (8002a14 <HAL_RCC_OscConfig+0x240>)
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800290a:	2b00      	cmp	r3, #0
 800290c:	d116      	bne.n	800293c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800290e:	4b41      	ldr	r3, [pc, #260]	@ (8002a14 <HAL_RCC_OscConfig+0x240>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 0302 	and.w	r3, r3, #2
 8002916:	2b00      	cmp	r3, #0
 8002918:	d005      	beq.n	8002926 <HAL_RCC_OscConfig+0x152>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	68db      	ldr	r3, [r3, #12]
 800291e:	2b01      	cmp	r3, #1
 8002920:	d001      	beq.n	8002926 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	e1c7      	b.n	8002cb6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002926:	4b3b      	ldr	r3, [pc, #236]	@ (8002a14 <HAL_RCC_OscConfig+0x240>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	691b      	ldr	r3, [r3, #16]
 8002932:	00db      	lsls	r3, r3, #3
 8002934:	4937      	ldr	r1, [pc, #220]	@ (8002a14 <HAL_RCC_OscConfig+0x240>)
 8002936:	4313      	orrs	r3, r2
 8002938:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800293a:	e03a      	b.n	80029b2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	68db      	ldr	r3, [r3, #12]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d020      	beq.n	8002986 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002944:	4b34      	ldr	r3, [pc, #208]	@ (8002a18 <HAL_RCC_OscConfig+0x244>)
 8002946:	2201      	movs	r2, #1
 8002948:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800294a:	f7fe f9f9 	bl	8000d40 <HAL_GetTick>
 800294e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002950:	e008      	b.n	8002964 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002952:	f7fe f9f5 	bl	8000d40 <HAL_GetTick>
 8002956:	4602      	mov	r2, r0
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	1ad3      	subs	r3, r2, r3
 800295c:	2b02      	cmp	r3, #2
 800295e:	d901      	bls.n	8002964 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002960:	2303      	movs	r3, #3
 8002962:	e1a8      	b.n	8002cb6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002964:	4b2b      	ldr	r3, [pc, #172]	@ (8002a14 <HAL_RCC_OscConfig+0x240>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 0302 	and.w	r3, r3, #2
 800296c:	2b00      	cmp	r3, #0
 800296e:	d0f0      	beq.n	8002952 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002970:	4b28      	ldr	r3, [pc, #160]	@ (8002a14 <HAL_RCC_OscConfig+0x240>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	691b      	ldr	r3, [r3, #16]
 800297c:	00db      	lsls	r3, r3, #3
 800297e:	4925      	ldr	r1, [pc, #148]	@ (8002a14 <HAL_RCC_OscConfig+0x240>)
 8002980:	4313      	orrs	r3, r2
 8002982:	600b      	str	r3, [r1, #0]
 8002984:	e015      	b.n	80029b2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002986:	4b24      	ldr	r3, [pc, #144]	@ (8002a18 <HAL_RCC_OscConfig+0x244>)
 8002988:	2200      	movs	r2, #0
 800298a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800298c:	f7fe f9d8 	bl	8000d40 <HAL_GetTick>
 8002990:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002992:	e008      	b.n	80029a6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002994:	f7fe f9d4 	bl	8000d40 <HAL_GetTick>
 8002998:	4602      	mov	r2, r0
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	2b02      	cmp	r3, #2
 80029a0:	d901      	bls.n	80029a6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80029a2:	2303      	movs	r3, #3
 80029a4:	e187      	b.n	8002cb6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029a6:	4b1b      	ldr	r3, [pc, #108]	@ (8002a14 <HAL_RCC_OscConfig+0x240>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 0302 	and.w	r3, r3, #2
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d1f0      	bne.n	8002994 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 0308 	and.w	r3, r3, #8
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d036      	beq.n	8002a2c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	695b      	ldr	r3, [r3, #20]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d016      	beq.n	80029f4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029c6:	4b15      	ldr	r3, [pc, #84]	@ (8002a1c <HAL_RCC_OscConfig+0x248>)
 80029c8:	2201      	movs	r2, #1
 80029ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029cc:	f7fe f9b8 	bl	8000d40 <HAL_GetTick>
 80029d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029d2:	e008      	b.n	80029e6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029d4:	f7fe f9b4 	bl	8000d40 <HAL_GetTick>
 80029d8:	4602      	mov	r2, r0
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	1ad3      	subs	r3, r2, r3
 80029de:	2b02      	cmp	r3, #2
 80029e0:	d901      	bls.n	80029e6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80029e2:	2303      	movs	r3, #3
 80029e4:	e167      	b.n	8002cb6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029e6:	4b0b      	ldr	r3, [pc, #44]	@ (8002a14 <HAL_RCC_OscConfig+0x240>)
 80029e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80029ea:	f003 0302 	and.w	r3, r3, #2
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d0f0      	beq.n	80029d4 <HAL_RCC_OscConfig+0x200>
 80029f2:	e01b      	b.n	8002a2c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029f4:	4b09      	ldr	r3, [pc, #36]	@ (8002a1c <HAL_RCC_OscConfig+0x248>)
 80029f6:	2200      	movs	r2, #0
 80029f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029fa:	f7fe f9a1 	bl	8000d40 <HAL_GetTick>
 80029fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a00:	e00e      	b.n	8002a20 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a02:	f7fe f99d 	bl	8000d40 <HAL_GetTick>
 8002a06:	4602      	mov	r2, r0
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	1ad3      	subs	r3, r2, r3
 8002a0c:	2b02      	cmp	r3, #2
 8002a0e:	d907      	bls.n	8002a20 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002a10:	2303      	movs	r3, #3
 8002a12:	e150      	b.n	8002cb6 <HAL_RCC_OscConfig+0x4e2>
 8002a14:	40023800 	.word	0x40023800
 8002a18:	42470000 	.word	0x42470000
 8002a1c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a20:	4b88      	ldr	r3, [pc, #544]	@ (8002c44 <HAL_RCC_OscConfig+0x470>)
 8002a22:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a24:	f003 0302 	and.w	r3, r3, #2
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d1ea      	bne.n	8002a02 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 0304 	and.w	r3, r3, #4
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	f000 8097 	beq.w	8002b68 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a3e:	4b81      	ldr	r3, [pc, #516]	@ (8002c44 <HAL_RCC_OscConfig+0x470>)
 8002a40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d10f      	bne.n	8002a6a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	60bb      	str	r3, [r7, #8]
 8002a4e:	4b7d      	ldr	r3, [pc, #500]	@ (8002c44 <HAL_RCC_OscConfig+0x470>)
 8002a50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a52:	4a7c      	ldr	r2, [pc, #496]	@ (8002c44 <HAL_RCC_OscConfig+0x470>)
 8002a54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a58:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a5a:	4b7a      	ldr	r3, [pc, #488]	@ (8002c44 <HAL_RCC_OscConfig+0x470>)
 8002a5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a62:	60bb      	str	r3, [r7, #8]
 8002a64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a66:	2301      	movs	r3, #1
 8002a68:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a6a:	4b77      	ldr	r3, [pc, #476]	@ (8002c48 <HAL_RCC_OscConfig+0x474>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d118      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a76:	4b74      	ldr	r3, [pc, #464]	@ (8002c48 <HAL_RCC_OscConfig+0x474>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a73      	ldr	r2, [pc, #460]	@ (8002c48 <HAL_RCC_OscConfig+0x474>)
 8002a7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a82:	f7fe f95d 	bl	8000d40 <HAL_GetTick>
 8002a86:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a88:	e008      	b.n	8002a9c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a8a:	f7fe f959 	bl	8000d40 <HAL_GetTick>
 8002a8e:	4602      	mov	r2, r0
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	1ad3      	subs	r3, r2, r3
 8002a94:	2b02      	cmp	r3, #2
 8002a96:	d901      	bls.n	8002a9c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002a98:	2303      	movs	r3, #3
 8002a9a:	e10c      	b.n	8002cb6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a9c:	4b6a      	ldr	r3, [pc, #424]	@ (8002c48 <HAL_RCC_OscConfig+0x474>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d0f0      	beq.n	8002a8a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d106      	bne.n	8002abe <HAL_RCC_OscConfig+0x2ea>
 8002ab0:	4b64      	ldr	r3, [pc, #400]	@ (8002c44 <HAL_RCC_OscConfig+0x470>)
 8002ab2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ab4:	4a63      	ldr	r2, [pc, #396]	@ (8002c44 <HAL_RCC_OscConfig+0x470>)
 8002ab6:	f043 0301 	orr.w	r3, r3, #1
 8002aba:	6713      	str	r3, [r2, #112]	@ 0x70
 8002abc:	e01c      	b.n	8002af8 <HAL_RCC_OscConfig+0x324>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	2b05      	cmp	r3, #5
 8002ac4:	d10c      	bne.n	8002ae0 <HAL_RCC_OscConfig+0x30c>
 8002ac6:	4b5f      	ldr	r3, [pc, #380]	@ (8002c44 <HAL_RCC_OscConfig+0x470>)
 8002ac8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002aca:	4a5e      	ldr	r2, [pc, #376]	@ (8002c44 <HAL_RCC_OscConfig+0x470>)
 8002acc:	f043 0304 	orr.w	r3, r3, #4
 8002ad0:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ad2:	4b5c      	ldr	r3, [pc, #368]	@ (8002c44 <HAL_RCC_OscConfig+0x470>)
 8002ad4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ad6:	4a5b      	ldr	r2, [pc, #364]	@ (8002c44 <HAL_RCC_OscConfig+0x470>)
 8002ad8:	f043 0301 	orr.w	r3, r3, #1
 8002adc:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ade:	e00b      	b.n	8002af8 <HAL_RCC_OscConfig+0x324>
 8002ae0:	4b58      	ldr	r3, [pc, #352]	@ (8002c44 <HAL_RCC_OscConfig+0x470>)
 8002ae2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ae4:	4a57      	ldr	r2, [pc, #348]	@ (8002c44 <HAL_RCC_OscConfig+0x470>)
 8002ae6:	f023 0301 	bic.w	r3, r3, #1
 8002aea:	6713      	str	r3, [r2, #112]	@ 0x70
 8002aec:	4b55      	ldr	r3, [pc, #340]	@ (8002c44 <HAL_RCC_OscConfig+0x470>)
 8002aee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002af0:	4a54      	ldr	r2, [pc, #336]	@ (8002c44 <HAL_RCC_OscConfig+0x470>)
 8002af2:	f023 0304 	bic.w	r3, r3, #4
 8002af6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d015      	beq.n	8002b2c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b00:	f7fe f91e 	bl	8000d40 <HAL_GetTick>
 8002b04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b06:	e00a      	b.n	8002b1e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b08:	f7fe f91a 	bl	8000d40 <HAL_GetTick>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	1ad3      	subs	r3, r2, r3
 8002b12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d901      	bls.n	8002b1e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	e0cb      	b.n	8002cb6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b1e:	4b49      	ldr	r3, [pc, #292]	@ (8002c44 <HAL_RCC_OscConfig+0x470>)
 8002b20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b22:	f003 0302 	and.w	r3, r3, #2
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d0ee      	beq.n	8002b08 <HAL_RCC_OscConfig+0x334>
 8002b2a:	e014      	b.n	8002b56 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b2c:	f7fe f908 	bl	8000d40 <HAL_GetTick>
 8002b30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b32:	e00a      	b.n	8002b4a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b34:	f7fe f904 	bl	8000d40 <HAL_GetTick>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d901      	bls.n	8002b4a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002b46:	2303      	movs	r3, #3
 8002b48:	e0b5      	b.n	8002cb6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b4a:	4b3e      	ldr	r3, [pc, #248]	@ (8002c44 <HAL_RCC_OscConfig+0x470>)
 8002b4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b4e:	f003 0302 	and.w	r3, r3, #2
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d1ee      	bne.n	8002b34 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002b56:	7dfb      	ldrb	r3, [r7, #23]
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d105      	bne.n	8002b68 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b5c:	4b39      	ldr	r3, [pc, #228]	@ (8002c44 <HAL_RCC_OscConfig+0x470>)
 8002b5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b60:	4a38      	ldr	r2, [pc, #224]	@ (8002c44 <HAL_RCC_OscConfig+0x470>)
 8002b62:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b66:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	699b      	ldr	r3, [r3, #24]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	f000 80a1 	beq.w	8002cb4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b72:	4b34      	ldr	r3, [pc, #208]	@ (8002c44 <HAL_RCC_OscConfig+0x470>)
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	f003 030c 	and.w	r3, r3, #12
 8002b7a:	2b08      	cmp	r3, #8
 8002b7c:	d05c      	beq.n	8002c38 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	699b      	ldr	r3, [r3, #24]
 8002b82:	2b02      	cmp	r3, #2
 8002b84:	d141      	bne.n	8002c0a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b86:	4b31      	ldr	r3, [pc, #196]	@ (8002c4c <HAL_RCC_OscConfig+0x478>)
 8002b88:	2200      	movs	r2, #0
 8002b8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b8c:	f7fe f8d8 	bl	8000d40 <HAL_GetTick>
 8002b90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b92:	e008      	b.n	8002ba6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b94:	f7fe f8d4 	bl	8000d40 <HAL_GetTick>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	1ad3      	subs	r3, r2, r3
 8002b9e:	2b02      	cmp	r3, #2
 8002ba0:	d901      	bls.n	8002ba6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002ba2:	2303      	movs	r3, #3
 8002ba4:	e087      	b.n	8002cb6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ba6:	4b27      	ldr	r3, [pc, #156]	@ (8002c44 <HAL_RCC_OscConfig+0x470>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d1f0      	bne.n	8002b94 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	69da      	ldr	r2, [r3, #28]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6a1b      	ldr	r3, [r3, #32]
 8002bba:	431a      	orrs	r2, r3
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bc0:	019b      	lsls	r3, r3, #6
 8002bc2:	431a      	orrs	r2, r3
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bc8:	085b      	lsrs	r3, r3, #1
 8002bca:	3b01      	subs	r3, #1
 8002bcc:	041b      	lsls	r3, r3, #16
 8002bce:	431a      	orrs	r2, r3
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bd4:	061b      	lsls	r3, r3, #24
 8002bd6:	491b      	ldr	r1, [pc, #108]	@ (8002c44 <HAL_RCC_OscConfig+0x470>)
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bdc:	4b1b      	ldr	r3, [pc, #108]	@ (8002c4c <HAL_RCC_OscConfig+0x478>)
 8002bde:	2201      	movs	r2, #1
 8002be0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002be2:	f7fe f8ad 	bl	8000d40 <HAL_GetTick>
 8002be6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002be8:	e008      	b.n	8002bfc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bea:	f7fe f8a9 	bl	8000d40 <HAL_GetTick>
 8002bee:	4602      	mov	r2, r0
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	1ad3      	subs	r3, r2, r3
 8002bf4:	2b02      	cmp	r3, #2
 8002bf6:	d901      	bls.n	8002bfc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002bf8:	2303      	movs	r3, #3
 8002bfa:	e05c      	b.n	8002cb6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bfc:	4b11      	ldr	r3, [pc, #68]	@ (8002c44 <HAL_RCC_OscConfig+0x470>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d0f0      	beq.n	8002bea <HAL_RCC_OscConfig+0x416>
 8002c08:	e054      	b.n	8002cb4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c0a:	4b10      	ldr	r3, [pc, #64]	@ (8002c4c <HAL_RCC_OscConfig+0x478>)
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c10:	f7fe f896 	bl	8000d40 <HAL_GetTick>
 8002c14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c16:	e008      	b.n	8002c2a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c18:	f7fe f892 	bl	8000d40 <HAL_GetTick>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	1ad3      	subs	r3, r2, r3
 8002c22:	2b02      	cmp	r3, #2
 8002c24:	d901      	bls.n	8002c2a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002c26:	2303      	movs	r3, #3
 8002c28:	e045      	b.n	8002cb6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c2a:	4b06      	ldr	r3, [pc, #24]	@ (8002c44 <HAL_RCC_OscConfig+0x470>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d1f0      	bne.n	8002c18 <HAL_RCC_OscConfig+0x444>
 8002c36:	e03d      	b.n	8002cb4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	699b      	ldr	r3, [r3, #24]
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	d107      	bne.n	8002c50 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	e038      	b.n	8002cb6 <HAL_RCC_OscConfig+0x4e2>
 8002c44:	40023800 	.word	0x40023800
 8002c48:	40007000 	.word	0x40007000
 8002c4c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002c50:	4b1b      	ldr	r3, [pc, #108]	@ (8002cc0 <HAL_RCC_OscConfig+0x4ec>)
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	699b      	ldr	r3, [r3, #24]
 8002c5a:	2b01      	cmp	r3, #1
 8002c5c:	d028      	beq.n	8002cb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c68:	429a      	cmp	r2, r3
 8002c6a:	d121      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c76:	429a      	cmp	r2, r3
 8002c78:	d11a      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c7a:	68fa      	ldr	r2, [r7, #12]
 8002c7c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002c80:	4013      	ands	r3, r2
 8002c82:	687a      	ldr	r2, [r7, #4]
 8002c84:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002c86:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d111      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c96:	085b      	lsrs	r3, r3, #1
 8002c98:	3b01      	subs	r3, #1
 8002c9a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	d107      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002caa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d001      	beq.n	8002cb4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e000      	b.n	8002cb6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002cb4:	2300      	movs	r3, #0
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3718      	adds	r7, #24
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	40023800 	.word	0x40023800

08002cc4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b084      	sub	sp, #16
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
 8002ccc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d101      	bne.n	8002cd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	e0cc      	b.n	8002e72 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002cd8:	4b68      	ldr	r3, [pc, #416]	@ (8002e7c <HAL_RCC_ClockConfig+0x1b8>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 0307 	and.w	r3, r3, #7
 8002ce0:	683a      	ldr	r2, [r7, #0]
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	d90c      	bls.n	8002d00 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ce6:	4b65      	ldr	r3, [pc, #404]	@ (8002e7c <HAL_RCC_ClockConfig+0x1b8>)
 8002ce8:	683a      	ldr	r2, [r7, #0]
 8002cea:	b2d2      	uxtb	r2, r2
 8002cec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cee:	4b63      	ldr	r3, [pc, #396]	@ (8002e7c <HAL_RCC_ClockConfig+0x1b8>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 0307 	and.w	r3, r3, #7
 8002cf6:	683a      	ldr	r2, [r7, #0]
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	d001      	beq.n	8002d00 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	e0b8      	b.n	8002e72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f003 0302 	and.w	r3, r3, #2
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d020      	beq.n	8002d4e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 0304 	and.w	r3, r3, #4
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d005      	beq.n	8002d24 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d18:	4b59      	ldr	r3, [pc, #356]	@ (8002e80 <HAL_RCC_ClockConfig+0x1bc>)
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	4a58      	ldr	r2, [pc, #352]	@ (8002e80 <HAL_RCC_ClockConfig+0x1bc>)
 8002d1e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002d22:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 0308 	and.w	r3, r3, #8
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d005      	beq.n	8002d3c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d30:	4b53      	ldr	r3, [pc, #332]	@ (8002e80 <HAL_RCC_ClockConfig+0x1bc>)
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	4a52      	ldr	r2, [pc, #328]	@ (8002e80 <HAL_RCC_ClockConfig+0x1bc>)
 8002d36:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002d3a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d3c:	4b50      	ldr	r3, [pc, #320]	@ (8002e80 <HAL_RCC_ClockConfig+0x1bc>)
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	494d      	ldr	r1, [pc, #308]	@ (8002e80 <HAL_RCC_ClockConfig+0x1bc>)
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f003 0301 	and.w	r3, r3, #1
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d044      	beq.n	8002de4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	2b01      	cmp	r3, #1
 8002d60:	d107      	bne.n	8002d72 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d62:	4b47      	ldr	r3, [pc, #284]	@ (8002e80 <HAL_RCC_ClockConfig+0x1bc>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d119      	bne.n	8002da2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e07f      	b.n	8002e72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	2b02      	cmp	r3, #2
 8002d78:	d003      	beq.n	8002d82 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d7e:	2b03      	cmp	r3, #3
 8002d80:	d107      	bne.n	8002d92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d82:	4b3f      	ldr	r3, [pc, #252]	@ (8002e80 <HAL_RCC_ClockConfig+0x1bc>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d109      	bne.n	8002da2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e06f      	b.n	8002e72 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d92:	4b3b      	ldr	r3, [pc, #236]	@ (8002e80 <HAL_RCC_ClockConfig+0x1bc>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 0302 	and.w	r3, r3, #2
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d101      	bne.n	8002da2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e067      	b.n	8002e72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002da2:	4b37      	ldr	r3, [pc, #220]	@ (8002e80 <HAL_RCC_ClockConfig+0x1bc>)
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	f023 0203 	bic.w	r2, r3, #3
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	4934      	ldr	r1, [pc, #208]	@ (8002e80 <HAL_RCC_ClockConfig+0x1bc>)
 8002db0:	4313      	orrs	r3, r2
 8002db2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002db4:	f7fd ffc4 	bl	8000d40 <HAL_GetTick>
 8002db8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dba:	e00a      	b.n	8002dd2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dbc:	f7fd ffc0 	bl	8000d40 <HAL_GetTick>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	1ad3      	subs	r3, r2, r3
 8002dc6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d901      	bls.n	8002dd2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002dce:	2303      	movs	r3, #3
 8002dd0:	e04f      	b.n	8002e72 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dd2:	4b2b      	ldr	r3, [pc, #172]	@ (8002e80 <HAL_RCC_ClockConfig+0x1bc>)
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	f003 020c 	and.w	r2, r3, #12
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	009b      	lsls	r3, r3, #2
 8002de0:	429a      	cmp	r2, r3
 8002de2:	d1eb      	bne.n	8002dbc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002de4:	4b25      	ldr	r3, [pc, #148]	@ (8002e7c <HAL_RCC_ClockConfig+0x1b8>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f003 0307 	and.w	r3, r3, #7
 8002dec:	683a      	ldr	r2, [r7, #0]
 8002dee:	429a      	cmp	r2, r3
 8002df0:	d20c      	bcs.n	8002e0c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002df2:	4b22      	ldr	r3, [pc, #136]	@ (8002e7c <HAL_RCC_ClockConfig+0x1b8>)
 8002df4:	683a      	ldr	r2, [r7, #0]
 8002df6:	b2d2      	uxtb	r2, r2
 8002df8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dfa:	4b20      	ldr	r3, [pc, #128]	@ (8002e7c <HAL_RCC_ClockConfig+0x1b8>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 0307 	and.w	r3, r3, #7
 8002e02:	683a      	ldr	r2, [r7, #0]
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d001      	beq.n	8002e0c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	e032      	b.n	8002e72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 0304 	and.w	r3, r3, #4
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d008      	beq.n	8002e2a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e18:	4b19      	ldr	r3, [pc, #100]	@ (8002e80 <HAL_RCC_ClockConfig+0x1bc>)
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	68db      	ldr	r3, [r3, #12]
 8002e24:	4916      	ldr	r1, [pc, #88]	@ (8002e80 <HAL_RCC_ClockConfig+0x1bc>)
 8002e26:	4313      	orrs	r3, r2
 8002e28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 0308 	and.w	r3, r3, #8
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d009      	beq.n	8002e4a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e36:	4b12      	ldr	r3, [pc, #72]	@ (8002e80 <HAL_RCC_ClockConfig+0x1bc>)
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	691b      	ldr	r3, [r3, #16]
 8002e42:	00db      	lsls	r3, r3, #3
 8002e44:	490e      	ldr	r1, [pc, #56]	@ (8002e80 <HAL_RCC_ClockConfig+0x1bc>)
 8002e46:	4313      	orrs	r3, r2
 8002e48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002e4a:	f000 f821 	bl	8002e90 <HAL_RCC_GetSysClockFreq>
 8002e4e:	4602      	mov	r2, r0
 8002e50:	4b0b      	ldr	r3, [pc, #44]	@ (8002e80 <HAL_RCC_ClockConfig+0x1bc>)
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	091b      	lsrs	r3, r3, #4
 8002e56:	f003 030f 	and.w	r3, r3, #15
 8002e5a:	490a      	ldr	r1, [pc, #40]	@ (8002e84 <HAL_RCC_ClockConfig+0x1c0>)
 8002e5c:	5ccb      	ldrb	r3, [r1, r3]
 8002e5e:	fa22 f303 	lsr.w	r3, r2, r3
 8002e62:	4a09      	ldr	r2, [pc, #36]	@ (8002e88 <HAL_RCC_ClockConfig+0x1c4>)
 8002e64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002e66:	4b09      	ldr	r3, [pc, #36]	@ (8002e8c <HAL_RCC_ClockConfig+0x1c8>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f7fd fe30 	bl	8000ad0 <HAL_InitTick>

  return HAL_OK;
 8002e70:	2300      	movs	r3, #0
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	3710      	adds	r7, #16
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	bf00      	nop
 8002e7c:	40023c00 	.word	0x40023c00
 8002e80:	40023800 	.word	0x40023800
 8002e84:	08009ea0 	.word	0x08009ea0
 8002e88:	20000000 	.word	0x20000000
 8002e8c:	20000004 	.word	0x20000004

08002e90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e94:	b094      	sub	sp, #80	@ 0x50
 8002e96:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ea8:	4b79      	ldr	r3, [pc, #484]	@ (8003090 <HAL_RCC_GetSysClockFreq+0x200>)
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	f003 030c 	and.w	r3, r3, #12
 8002eb0:	2b08      	cmp	r3, #8
 8002eb2:	d00d      	beq.n	8002ed0 <HAL_RCC_GetSysClockFreq+0x40>
 8002eb4:	2b08      	cmp	r3, #8
 8002eb6:	f200 80e1 	bhi.w	800307c <HAL_RCC_GetSysClockFreq+0x1ec>
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d002      	beq.n	8002ec4 <HAL_RCC_GetSysClockFreq+0x34>
 8002ebe:	2b04      	cmp	r3, #4
 8002ec0:	d003      	beq.n	8002eca <HAL_RCC_GetSysClockFreq+0x3a>
 8002ec2:	e0db      	b.n	800307c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ec4:	4b73      	ldr	r3, [pc, #460]	@ (8003094 <HAL_RCC_GetSysClockFreq+0x204>)
 8002ec6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002ec8:	e0db      	b.n	8003082 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002eca:	4b73      	ldr	r3, [pc, #460]	@ (8003098 <HAL_RCC_GetSysClockFreq+0x208>)
 8002ecc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002ece:	e0d8      	b.n	8003082 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ed0:	4b6f      	ldr	r3, [pc, #444]	@ (8003090 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002ed8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002eda:	4b6d      	ldr	r3, [pc, #436]	@ (8003090 <HAL_RCC_GetSysClockFreq+0x200>)
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d063      	beq.n	8002fae <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ee6:	4b6a      	ldr	r3, [pc, #424]	@ (8003090 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	099b      	lsrs	r3, r3, #6
 8002eec:	2200      	movs	r2, #0
 8002eee:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002ef0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002ef2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ef4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ef8:	633b      	str	r3, [r7, #48]	@ 0x30
 8002efa:	2300      	movs	r3, #0
 8002efc:	637b      	str	r3, [r7, #52]	@ 0x34
 8002efe:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002f02:	4622      	mov	r2, r4
 8002f04:	462b      	mov	r3, r5
 8002f06:	f04f 0000 	mov.w	r0, #0
 8002f0a:	f04f 0100 	mov.w	r1, #0
 8002f0e:	0159      	lsls	r1, r3, #5
 8002f10:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f14:	0150      	lsls	r0, r2, #5
 8002f16:	4602      	mov	r2, r0
 8002f18:	460b      	mov	r3, r1
 8002f1a:	4621      	mov	r1, r4
 8002f1c:	1a51      	subs	r1, r2, r1
 8002f1e:	6139      	str	r1, [r7, #16]
 8002f20:	4629      	mov	r1, r5
 8002f22:	eb63 0301 	sbc.w	r3, r3, r1
 8002f26:	617b      	str	r3, [r7, #20]
 8002f28:	f04f 0200 	mov.w	r2, #0
 8002f2c:	f04f 0300 	mov.w	r3, #0
 8002f30:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002f34:	4659      	mov	r1, fp
 8002f36:	018b      	lsls	r3, r1, #6
 8002f38:	4651      	mov	r1, sl
 8002f3a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f3e:	4651      	mov	r1, sl
 8002f40:	018a      	lsls	r2, r1, #6
 8002f42:	4651      	mov	r1, sl
 8002f44:	ebb2 0801 	subs.w	r8, r2, r1
 8002f48:	4659      	mov	r1, fp
 8002f4a:	eb63 0901 	sbc.w	r9, r3, r1
 8002f4e:	f04f 0200 	mov.w	r2, #0
 8002f52:	f04f 0300 	mov.w	r3, #0
 8002f56:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f5a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f5e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f62:	4690      	mov	r8, r2
 8002f64:	4699      	mov	r9, r3
 8002f66:	4623      	mov	r3, r4
 8002f68:	eb18 0303 	adds.w	r3, r8, r3
 8002f6c:	60bb      	str	r3, [r7, #8]
 8002f6e:	462b      	mov	r3, r5
 8002f70:	eb49 0303 	adc.w	r3, r9, r3
 8002f74:	60fb      	str	r3, [r7, #12]
 8002f76:	f04f 0200 	mov.w	r2, #0
 8002f7a:	f04f 0300 	mov.w	r3, #0
 8002f7e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002f82:	4629      	mov	r1, r5
 8002f84:	024b      	lsls	r3, r1, #9
 8002f86:	4621      	mov	r1, r4
 8002f88:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002f8c:	4621      	mov	r1, r4
 8002f8e:	024a      	lsls	r2, r1, #9
 8002f90:	4610      	mov	r0, r2
 8002f92:	4619      	mov	r1, r3
 8002f94:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f96:	2200      	movs	r2, #0
 8002f98:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002f9a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002f9c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002fa0:	f7fd f916 	bl	80001d0 <__aeabi_uldivmod>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	460b      	mov	r3, r1
 8002fa8:	4613      	mov	r3, r2
 8002faa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002fac:	e058      	b.n	8003060 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fae:	4b38      	ldr	r3, [pc, #224]	@ (8003090 <HAL_RCC_GetSysClockFreq+0x200>)
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	099b      	lsrs	r3, r3, #6
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	4611      	mov	r1, r2
 8002fba:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002fbe:	623b      	str	r3, [r7, #32]
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fc4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002fc8:	4642      	mov	r2, r8
 8002fca:	464b      	mov	r3, r9
 8002fcc:	f04f 0000 	mov.w	r0, #0
 8002fd0:	f04f 0100 	mov.w	r1, #0
 8002fd4:	0159      	lsls	r1, r3, #5
 8002fd6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002fda:	0150      	lsls	r0, r2, #5
 8002fdc:	4602      	mov	r2, r0
 8002fde:	460b      	mov	r3, r1
 8002fe0:	4641      	mov	r1, r8
 8002fe2:	ebb2 0a01 	subs.w	sl, r2, r1
 8002fe6:	4649      	mov	r1, r9
 8002fe8:	eb63 0b01 	sbc.w	fp, r3, r1
 8002fec:	f04f 0200 	mov.w	r2, #0
 8002ff0:	f04f 0300 	mov.w	r3, #0
 8002ff4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002ff8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002ffc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003000:	ebb2 040a 	subs.w	r4, r2, sl
 8003004:	eb63 050b 	sbc.w	r5, r3, fp
 8003008:	f04f 0200 	mov.w	r2, #0
 800300c:	f04f 0300 	mov.w	r3, #0
 8003010:	00eb      	lsls	r3, r5, #3
 8003012:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003016:	00e2      	lsls	r2, r4, #3
 8003018:	4614      	mov	r4, r2
 800301a:	461d      	mov	r5, r3
 800301c:	4643      	mov	r3, r8
 800301e:	18e3      	adds	r3, r4, r3
 8003020:	603b      	str	r3, [r7, #0]
 8003022:	464b      	mov	r3, r9
 8003024:	eb45 0303 	adc.w	r3, r5, r3
 8003028:	607b      	str	r3, [r7, #4]
 800302a:	f04f 0200 	mov.w	r2, #0
 800302e:	f04f 0300 	mov.w	r3, #0
 8003032:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003036:	4629      	mov	r1, r5
 8003038:	028b      	lsls	r3, r1, #10
 800303a:	4621      	mov	r1, r4
 800303c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003040:	4621      	mov	r1, r4
 8003042:	028a      	lsls	r2, r1, #10
 8003044:	4610      	mov	r0, r2
 8003046:	4619      	mov	r1, r3
 8003048:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800304a:	2200      	movs	r2, #0
 800304c:	61bb      	str	r3, [r7, #24]
 800304e:	61fa      	str	r2, [r7, #28]
 8003050:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003054:	f7fd f8bc 	bl	80001d0 <__aeabi_uldivmod>
 8003058:	4602      	mov	r2, r0
 800305a:	460b      	mov	r3, r1
 800305c:	4613      	mov	r3, r2
 800305e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003060:	4b0b      	ldr	r3, [pc, #44]	@ (8003090 <HAL_RCC_GetSysClockFreq+0x200>)
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	0c1b      	lsrs	r3, r3, #16
 8003066:	f003 0303 	and.w	r3, r3, #3
 800306a:	3301      	adds	r3, #1
 800306c:	005b      	lsls	r3, r3, #1
 800306e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003070:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003072:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003074:	fbb2 f3f3 	udiv	r3, r2, r3
 8003078:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800307a:	e002      	b.n	8003082 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800307c:	4b05      	ldr	r3, [pc, #20]	@ (8003094 <HAL_RCC_GetSysClockFreq+0x204>)
 800307e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003080:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003082:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003084:	4618      	mov	r0, r3
 8003086:	3750      	adds	r7, #80	@ 0x50
 8003088:	46bd      	mov	sp, r7
 800308a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800308e:	bf00      	nop
 8003090:	40023800 	.word	0x40023800
 8003094:	00f42400 	.word	0x00f42400
 8003098:	007a1200 	.word	0x007a1200

0800309c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800309c:	b480      	push	{r7}
 800309e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030a0:	4b03      	ldr	r3, [pc, #12]	@ (80030b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80030a2:	681b      	ldr	r3, [r3, #0]
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr
 80030ae:	bf00      	nop
 80030b0:	20000000 	.word	0x20000000

080030b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80030b8:	f7ff fff0 	bl	800309c <HAL_RCC_GetHCLKFreq>
 80030bc:	4602      	mov	r2, r0
 80030be:	4b05      	ldr	r3, [pc, #20]	@ (80030d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	0a9b      	lsrs	r3, r3, #10
 80030c4:	f003 0307 	and.w	r3, r3, #7
 80030c8:	4903      	ldr	r1, [pc, #12]	@ (80030d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80030ca:	5ccb      	ldrb	r3, [r1, r3]
 80030cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	bd80      	pop	{r7, pc}
 80030d4:	40023800 	.word	0x40023800
 80030d8:	08009eb0 	.word	0x08009eb0

080030dc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80030dc:	b480      	push	{r7}
 80030de:	b083      	sub	sp, #12
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
 80030e4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	220f      	movs	r2, #15
 80030ea:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80030ec:	4b12      	ldr	r3, [pc, #72]	@ (8003138 <HAL_RCC_GetClockConfig+0x5c>)
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	f003 0203 	and.w	r2, r3, #3
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80030f8:	4b0f      	ldr	r3, [pc, #60]	@ (8003138 <HAL_RCC_GetClockConfig+0x5c>)
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003104:	4b0c      	ldr	r3, [pc, #48]	@ (8003138 <HAL_RCC_GetClockConfig+0x5c>)
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003110:	4b09      	ldr	r3, [pc, #36]	@ (8003138 <HAL_RCC_GetClockConfig+0x5c>)
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	08db      	lsrs	r3, r3, #3
 8003116:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800311e:	4b07      	ldr	r3, [pc, #28]	@ (800313c <HAL_RCC_GetClockConfig+0x60>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 0207 	and.w	r2, r3, #7
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	601a      	str	r2, [r3, #0]
}
 800312a:	bf00      	nop
 800312c:	370c      	adds	r7, #12
 800312e:	46bd      	mov	sp, r7
 8003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003134:	4770      	bx	lr
 8003136:	bf00      	nop
 8003138:	40023800 	.word	0x40023800
 800313c:	40023c00 	.word	0x40023c00

08003140 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b082      	sub	sp, #8
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d101      	bne.n	8003152 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	e041      	b.n	80031d6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003158:	b2db      	uxtb	r3, r3
 800315a:	2b00      	cmp	r3, #0
 800315c:	d106      	bne.n	800316c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2200      	movs	r2, #0
 8003162:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003166:	6878      	ldr	r0, [r7, #4]
 8003168:	f7fd fc6c 	bl	8000a44 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2202      	movs	r2, #2
 8003170:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681a      	ldr	r2, [r3, #0]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	3304      	adds	r3, #4
 800317c:	4619      	mov	r1, r3
 800317e:	4610      	mov	r0, r2
 8003180:	f000 fa7e 	bl	8003680 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2201      	movs	r2, #1
 8003188:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2201      	movs	r2, #1
 8003190:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2201      	movs	r2, #1
 8003198:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2201      	movs	r2, #1
 80031a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2201      	movs	r2, #1
 80031a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2201      	movs	r2, #1
 80031b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2201      	movs	r2, #1
 80031b8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2201      	movs	r2, #1
 80031c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2201      	movs	r2, #1
 80031c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2201      	movs	r2, #1
 80031d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80031d4:	2300      	movs	r3, #0
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	3708      	adds	r7, #8
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}
	...

080031e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b085      	sub	sp, #20
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031ee:	b2db      	uxtb	r3, r3
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	d001      	beq.n	80031f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
 80031f6:	e04e      	b.n	8003296 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2202      	movs	r2, #2
 80031fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	68da      	ldr	r2, [r3, #12]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f042 0201 	orr.w	r2, r2, #1
 800320e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a23      	ldr	r2, [pc, #140]	@ (80032a4 <HAL_TIM_Base_Start_IT+0xc4>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d022      	beq.n	8003260 <HAL_TIM_Base_Start_IT+0x80>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003222:	d01d      	beq.n	8003260 <HAL_TIM_Base_Start_IT+0x80>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a1f      	ldr	r2, [pc, #124]	@ (80032a8 <HAL_TIM_Base_Start_IT+0xc8>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d018      	beq.n	8003260 <HAL_TIM_Base_Start_IT+0x80>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a1e      	ldr	r2, [pc, #120]	@ (80032ac <HAL_TIM_Base_Start_IT+0xcc>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d013      	beq.n	8003260 <HAL_TIM_Base_Start_IT+0x80>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a1c      	ldr	r2, [pc, #112]	@ (80032b0 <HAL_TIM_Base_Start_IT+0xd0>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d00e      	beq.n	8003260 <HAL_TIM_Base_Start_IT+0x80>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a1b      	ldr	r2, [pc, #108]	@ (80032b4 <HAL_TIM_Base_Start_IT+0xd4>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d009      	beq.n	8003260 <HAL_TIM_Base_Start_IT+0x80>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a19      	ldr	r2, [pc, #100]	@ (80032b8 <HAL_TIM_Base_Start_IT+0xd8>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d004      	beq.n	8003260 <HAL_TIM_Base_Start_IT+0x80>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a18      	ldr	r2, [pc, #96]	@ (80032bc <HAL_TIM_Base_Start_IT+0xdc>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d111      	bne.n	8003284 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	f003 0307 	and.w	r3, r3, #7
 800326a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2b06      	cmp	r3, #6
 8003270:	d010      	beq.n	8003294 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	681a      	ldr	r2, [r3, #0]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f042 0201 	orr.w	r2, r2, #1
 8003280:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003282:	e007      	b.n	8003294 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f042 0201 	orr.w	r2, r2, #1
 8003292:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003294:	2300      	movs	r3, #0
}
 8003296:	4618      	mov	r0, r3
 8003298:	3714      	adds	r7, #20
 800329a:	46bd      	mov	sp, r7
 800329c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a0:	4770      	bx	lr
 80032a2:	bf00      	nop
 80032a4:	40010000 	.word	0x40010000
 80032a8:	40000400 	.word	0x40000400
 80032ac:	40000800 	.word	0x40000800
 80032b0:	40000c00 	.word	0x40000c00
 80032b4:	40010400 	.word	0x40010400
 80032b8:	40014000 	.word	0x40014000
 80032bc:	40001800 	.word	0x40001800

080032c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b084      	sub	sp, #16
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	68db      	ldr	r3, [r3, #12]
 80032ce:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	691b      	ldr	r3, [r3, #16]
 80032d6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	f003 0302 	and.w	r3, r3, #2
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d020      	beq.n	8003324 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	f003 0302 	and.w	r3, r3, #2
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d01b      	beq.n	8003324 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f06f 0202 	mvn.w	r2, #2
 80032f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2201      	movs	r2, #1
 80032fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	699b      	ldr	r3, [r3, #24]
 8003302:	f003 0303 	and.w	r3, r3, #3
 8003306:	2b00      	cmp	r3, #0
 8003308:	d003      	beq.n	8003312 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	f000 f999 	bl	8003642 <HAL_TIM_IC_CaptureCallback>
 8003310:	e005      	b.n	800331e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	f000 f98b 	bl	800362e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003318:	6878      	ldr	r0, [r7, #4]
 800331a:	f000 f99c 	bl	8003656 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2200      	movs	r2, #0
 8003322:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	f003 0304 	and.w	r3, r3, #4
 800332a:	2b00      	cmp	r3, #0
 800332c:	d020      	beq.n	8003370 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	f003 0304 	and.w	r3, r3, #4
 8003334:	2b00      	cmp	r3, #0
 8003336:	d01b      	beq.n	8003370 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f06f 0204 	mvn.w	r2, #4
 8003340:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2202      	movs	r2, #2
 8003346:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	699b      	ldr	r3, [r3, #24]
 800334e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003352:	2b00      	cmp	r3, #0
 8003354:	d003      	beq.n	800335e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003356:	6878      	ldr	r0, [r7, #4]
 8003358:	f000 f973 	bl	8003642 <HAL_TIM_IC_CaptureCallback>
 800335c:	e005      	b.n	800336a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800335e:	6878      	ldr	r0, [r7, #4]
 8003360:	f000 f965 	bl	800362e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003364:	6878      	ldr	r0, [r7, #4]
 8003366:	f000 f976 	bl	8003656 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2200      	movs	r2, #0
 800336e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	f003 0308 	and.w	r3, r3, #8
 8003376:	2b00      	cmp	r3, #0
 8003378:	d020      	beq.n	80033bc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	f003 0308 	and.w	r3, r3, #8
 8003380:	2b00      	cmp	r3, #0
 8003382:	d01b      	beq.n	80033bc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f06f 0208 	mvn.w	r2, #8
 800338c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2204      	movs	r2, #4
 8003392:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	69db      	ldr	r3, [r3, #28]
 800339a:	f003 0303 	and.w	r3, r3, #3
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d003      	beq.n	80033aa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	f000 f94d 	bl	8003642 <HAL_TIM_IC_CaptureCallback>
 80033a8:	e005      	b.n	80033b6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	f000 f93f 	bl	800362e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033b0:	6878      	ldr	r0, [r7, #4]
 80033b2:	f000 f950 	bl	8003656 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2200      	movs	r2, #0
 80033ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	f003 0310 	and.w	r3, r3, #16
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d020      	beq.n	8003408 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	f003 0310 	and.w	r3, r3, #16
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d01b      	beq.n	8003408 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f06f 0210 	mvn.w	r2, #16
 80033d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2208      	movs	r2, #8
 80033de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	69db      	ldr	r3, [r3, #28]
 80033e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d003      	beq.n	80033f6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	f000 f927 	bl	8003642 <HAL_TIM_IC_CaptureCallback>
 80033f4:	e005      	b.n	8003402 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f000 f919 	bl	800362e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033fc:	6878      	ldr	r0, [r7, #4]
 80033fe:	f000 f92a 	bl	8003656 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2200      	movs	r2, #0
 8003406:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	f003 0301 	and.w	r3, r3, #1
 800340e:	2b00      	cmp	r3, #0
 8003410:	d00c      	beq.n	800342c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	f003 0301 	and.w	r3, r3, #1
 8003418:	2b00      	cmp	r3, #0
 800341a:	d007      	beq.n	800342c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f06f 0201 	mvn.w	r2, #1
 8003424:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	f7fd fab2 	bl	8000990 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003432:	2b00      	cmp	r3, #0
 8003434:	d00c      	beq.n	8003450 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800343c:	2b00      	cmp	r3, #0
 800343e:	d007      	beq.n	8003450 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003448:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f000 fae4 	bl	8003a18 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003456:	2b00      	cmp	r3, #0
 8003458:	d00c      	beq.n	8003474 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003460:	2b00      	cmp	r3, #0
 8003462:	d007      	beq.n	8003474 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800346c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	f000 f8fb 	bl	800366a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	f003 0320 	and.w	r3, r3, #32
 800347a:	2b00      	cmp	r3, #0
 800347c:	d00c      	beq.n	8003498 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	f003 0320 	and.w	r3, r3, #32
 8003484:	2b00      	cmp	r3, #0
 8003486:	d007      	beq.n	8003498 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f06f 0220 	mvn.w	r2, #32
 8003490:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	f000 fab6 	bl	8003a04 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003498:	bf00      	nop
 800349a:	3710      	adds	r7, #16
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}

080034a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b084      	sub	sp, #16
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
 80034a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80034aa:	2300      	movs	r3, #0
 80034ac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	d101      	bne.n	80034bc <HAL_TIM_ConfigClockSource+0x1c>
 80034b8:	2302      	movs	r3, #2
 80034ba:	e0b4      	b.n	8003626 <HAL_TIM_ConfigClockSource+0x186>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2201      	movs	r2, #1
 80034c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2202      	movs	r2, #2
 80034c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80034da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80034e2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	68ba      	ldr	r2, [r7, #8]
 80034ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80034f4:	d03e      	beq.n	8003574 <HAL_TIM_ConfigClockSource+0xd4>
 80034f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80034fa:	f200 8087 	bhi.w	800360c <HAL_TIM_ConfigClockSource+0x16c>
 80034fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003502:	f000 8086 	beq.w	8003612 <HAL_TIM_ConfigClockSource+0x172>
 8003506:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800350a:	d87f      	bhi.n	800360c <HAL_TIM_ConfigClockSource+0x16c>
 800350c:	2b70      	cmp	r3, #112	@ 0x70
 800350e:	d01a      	beq.n	8003546 <HAL_TIM_ConfigClockSource+0xa6>
 8003510:	2b70      	cmp	r3, #112	@ 0x70
 8003512:	d87b      	bhi.n	800360c <HAL_TIM_ConfigClockSource+0x16c>
 8003514:	2b60      	cmp	r3, #96	@ 0x60
 8003516:	d050      	beq.n	80035ba <HAL_TIM_ConfigClockSource+0x11a>
 8003518:	2b60      	cmp	r3, #96	@ 0x60
 800351a:	d877      	bhi.n	800360c <HAL_TIM_ConfigClockSource+0x16c>
 800351c:	2b50      	cmp	r3, #80	@ 0x50
 800351e:	d03c      	beq.n	800359a <HAL_TIM_ConfigClockSource+0xfa>
 8003520:	2b50      	cmp	r3, #80	@ 0x50
 8003522:	d873      	bhi.n	800360c <HAL_TIM_ConfigClockSource+0x16c>
 8003524:	2b40      	cmp	r3, #64	@ 0x40
 8003526:	d058      	beq.n	80035da <HAL_TIM_ConfigClockSource+0x13a>
 8003528:	2b40      	cmp	r3, #64	@ 0x40
 800352a:	d86f      	bhi.n	800360c <HAL_TIM_ConfigClockSource+0x16c>
 800352c:	2b30      	cmp	r3, #48	@ 0x30
 800352e:	d064      	beq.n	80035fa <HAL_TIM_ConfigClockSource+0x15a>
 8003530:	2b30      	cmp	r3, #48	@ 0x30
 8003532:	d86b      	bhi.n	800360c <HAL_TIM_ConfigClockSource+0x16c>
 8003534:	2b20      	cmp	r3, #32
 8003536:	d060      	beq.n	80035fa <HAL_TIM_ConfigClockSource+0x15a>
 8003538:	2b20      	cmp	r3, #32
 800353a:	d867      	bhi.n	800360c <HAL_TIM_ConfigClockSource+0x16c>
 800353c:	2b00      	cmp	r3, #0
 800353e:	d05c      	beq.n	80035fa <HAL_TIM_ConfigClockSource+0x15a>
 8003540:	2b10      	cmp	r3, #16
 8003542:	d05a      	beq.n	80035fa <HAL_TIM_ConfigClockSource+0x15a>
 8003544:	e062      	b.n	800360c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003556:	f000 f9b9 	bl	80038cc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003568:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	68ba      	ldr	r2, [r7, #8]
 8003570:	609a      	str	r2, [r3, #8]
      break;
 8003572:	e04f      	b.n	8003614 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003584:	f000 f9a2 	bl	80038cc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	689a      	ldr	r2, [r3, #8]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003596:	609a      	str	r2, [r3, #8]
      break;
 8003598:	e03c      	b.n	8003614 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80035a6:	461a      	mov	r2, r3
 80035a8:	f000 f916 	bl	80037d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	2150      	movs	r1, #80	@ 0x50
 80035b2:	4618      	mov	r0, r3
 80035b4:	f000 f96f 	bl	8003896 <TIM_ITRx_SetConfig>
      break;
 80035b8:	e02c      	b.n	8003614 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80035c6:	461a      	mov	r2, r3
 80035c8:	f000 f935 	bl	8003836 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	2160      	movs	r1, #96	@ 0x60
 80035d2:	4618      	mov	r0, r3
 80035d4:	f000 f95f 	bl	8003896 <TIM_ITRx_SetConfig>
      break;
 80035d8:	e01c      	b.n	8003614 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80035e6:	461a      	mov	r2, r3
 80035e8:	f000 f8f6 	bl	80037d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	2140      	movs	r1, #64	@ 0x40
 80035f2:	4618      	mov	r0, r3
 80035f4:	f000 f94f 	bl	8003896 <TIM_ITRx_SetConfig>
      break;
 80035f8:	e00c      	b.n	8003614 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4619      	mov	r1, r3
 8003604:	4610      	mov	r0, r2
 8003606:	f000 f946 	bl	8003896 <TIM_ITRx_SetConfig>
      break;
 800360a:	e003      	b.n	8003614 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	73fb      	strb	r3, [r7, #15]
      break;
 8003610:	e000      	b.n	8003614 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003612:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2201      	movs	r2, #1
 8003618:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2200      	movs	r2, #0
 8003620:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003624:	7bfb      	ldrb	r3, [r7, #15]
}
 8003626:	4618      	mov	r0, r3
 8003628:	3710      	adds	r7, #16
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}

0800362e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800362e:	b480      	push	{r7}
 8003630:	b083      	sub	sp, #12
 8003632:	af00      	add	r7, sp, #0
 8003634:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003636:	bf00      	nop
 8003638:	370c      	adds	r7, #12
 800363a:	46bd      	mov	sp, r7
 800363c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003640:	4770      	bx	lr

08003642 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003642:	b480      	push	{r7}
 8003644:	b083      	sub	sp, #12
 8003646:	af00      	add	r7, sp, #0
 8003648:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800364a:	bf00      	nop
 800364c:	370c      	adds	r7, #12
 800364e:	46bd      	mov	sp, r7
 8003650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003654:	4770      	bx	lr

08003656 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003656:	b480      	push	{r7}
 8003658:	b083      	sub	sp, #12
 800365a:	af00      	add	r7, sp, #0
 800365c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800365e:	bf00      	nop
 8003660:	370c      	adds	r7, #12
 8003662:	46bd      	mov	sp, r7
 8003664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003668:	4770      	bx	lr

0800366a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800366a:	b480      	push	{r7}
 800366c:	b083      	sub	sp, #12
 800366e:	af00      	add	r7, sp, #0
 8003670:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003672:	bf00      	nop
 8003674:	370c      	adds	r7, #12
 8003676:	46bd      	mov	sp, r7
 8003678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367c:	4770      	bx	lr
	...

08003680 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003680:	b480      	push	{r7}
 8003682:	b085      	sub	sp, #20
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
 8003688:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	4a46      	ldr	r2, [pc, #280]	@ (80037ac <TIM_Base_SetConfig+0x12c>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d013      	beq.n	80036c0 <TIM_Base_SetConfig+0x40>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800369e:	d00f      	beq.n	80036c0 <TIM_Base_SetConfig+0x40>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	4a43      	ldr	r2, [pc, #268]	@ (80037b0 <TIM_Base_SetConfig+0x130>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d00b      	beq.n	80036c0 <TIM_Base_SetConfig+0x40>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	4a42      	ldr	r2, [pc, #264]	@ (80037b4 <TIM_Base_SetConfig+0x134>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d007      	beq.n	80036c0 <TIM_Base_SetConfig+0x40>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	4a41      	ldr	r2, [pc, #260]	@ (80037b8 <TIM_Base_SetConfig+0x138>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d003      	beq.n	80036c0 <TIM_Base_SetConfig+0x40>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	4a40      	ldr	r2, [pc, #256]	@ (80037bc <TIM_Base_SetConfig+0x13c>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d108      	bne.n	80036d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80036c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	68fa      	ldr	r2, [r7, #12]
 80036ce:	4313      	orrs	r3, r2
 80036d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	4a35      	ldr	r2, [pc, #212]	@ (80037ac <TIM_Base_SetConfig+0x12c>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d02b      	beq.n	8003732 <TIM_Base_SetConfig+0xb2>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036e0:	d027      	beq.n	8003732 <TIM_Base_SetConfig+0xb2>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	4a32      	ldr	r2, [pc, #200]	@ (80037b0 <TIM_Base_SetConfig+0x130>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d023      	beq.n	8003732 <TIM_Base_SetConfig+0xb2>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	4a31      	ldr	r2, [pc, #196]	@ (80037b4 <TIM_Base_SetConfig+0x134>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d01f      	beq.n	8003732 <TIM_Base_SetConfig+0xb2>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	4a30      	ldr	r2, [pc, #192]	@ (80037b8 <TIM_Base_SetConfig+0x138>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d01b      	beq.n	8003732 <TIM_Base_SetConfig+0xb2>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	4a2f      	ldr	r2, [pc, #188]	@ (80037bc <TIM_Base_SetConfig+0x13c>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d017      	beq.n	8003732 <TIM_Base_SetConfig+0xb2>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	4a2e      	ldr	r2, [pc, #184]	@ (80037c0 <TIM_Base_SetConfig+0x140>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d013      	beq.n	8003732 <TIM_Base_SetConfig+0xb2>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	4a2d      	ldr	r2, [pc, #180]	@ (80037c4 <TIM_Base_SetConfig+0x144>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d00f      	beq.n	8003732 <TIM_Base_SetConfig+0xb2>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	4a2c      	ldr	r2, [pc, #176]	@ (80037c8 <TIM_Base_SetConfig+0x148>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d00b      	beq.n	8003732 <TIM_Base_SetConfig+0xb2>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	4a2b      	ldr	r2, [pc, #172]	@ (80037cc <TIM_Base_SetConfig+0x14c>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d007      	beq.n	8003732 <TIM_Base_SetConfig+0xb2>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	4a2a      	ldr	r2, [pc, #168]	@ (80037d0 <TIM_Base_SetConfig+0x150>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d003      	beq.n	8003732 <TIM_Base_SetConfig+0xb2>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	4a29      	ldr	r2, [pc, #164]	@ (80037d4 <TIM_Base_SetConfig+0x154>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d108      	bne.n	8003744 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003738:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	68db      	ldr	r3, [r3, #12]
 800373e:	68fa      	ldr	r2, [r7, #12]
 8003740:	4313      	orrs	r3, r2
 8003742:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	695b      	ldr	r3, [r3, #20]
 800374e:	4313      	orrs	r3, r2
 8003750:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	68fa      	ldr	r2, [r7, #12]
 8003756:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	689a      	ldr	r2, [r3, #8]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	4a10      	ldr	r2, [pc, #64]	@ (80037ac <TIM_Base_SetConfig+0x12c>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d003      	beq.n	8003778 <TIM_Base_SetConfig+0xf8>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	4a12      	ldr	r2, [pc, #72]	@ (80037bc <TIM_Base_SetConfig+0x13c>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d103      	bne.n	8003780 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	691a      	ldr	r2, [r3, #16]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2201      	movs	r2, #1
 8003784:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	691b      	ldr	r3, [r3, #16]
 800378a:	f003 0301 	and.w	r3, r3, #1
 800378e:	2b01      	cmp	r3, #1
 8003790:	d105      	bne.n	800379e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	691b      	ldr	r3, [r3, #16]
 8003796:	f023 0201 	bic.w	r2, r3, #1
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	611a      	str	r2, [r3, #16]
  }
}
 800379e:	bf00      	nop
 80037a0:	3714      	adds	r7, #20
 80037a2:	46bd      	mov	sp, r7
 80037a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a8:	4770      	bx	lr
 80037aa:	bf00      	nop
 80037ac:	40010000 	.word	0x40010000
 80037b0:	40000400 	.word	0x40000400
 80037b4:	40000800 	.word	0x40000800
 80037b8:	40000c00 	.word	0x40000c00
 80037bc:	40010400 	.word	0x40010400
 80037c0:	40014000 	.word	0x40014000
 80037c4:	40014400 	.word	0x40014400
 80037c8:	40014800 	.word	0x40014800
 80037cc:	40001800 	.word	0x40001800
 80037d0:	40001c00 	.word	0x40001c00
 80037d4:	40002000 	.word	0x40002000

080037d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80037d8:	b480      	push	{r7}
 80037da:	b087      	sub	sp, #28
 80037dc:	af00      	add	r7, sp, #0
 80037de:	60f8      	str	r0, [r7, #12]
 80037e0:	60b9      	str	r1, [r7, #8]
 80037e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	6a1b      	ldr	r3, [r3, #32]
 80037e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	6a1b      	ldr	r3, [r3, #32]
 80037ee:	f023 0201 	bic.w	r2, r3, #1
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	699b      	ldr	r3, [r3, #24]
 80037fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003802:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	011b      	lsls	r3, r3, #4
 8003808:	693a      	ldr	r2, [r7, #16]
 800380a:	4313      	orrs	r3, r2
 800380c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	f023 030a 	bic.w	r3, r3, #10
 8003814:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003816:	697a      	ldr	r2, [r7, #20]
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	4313      	orrs	r3, r2
 800381c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	693a      	ldr	r2, [r7, #16]
 8003822:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	697a      	ldr	r2, [r7, #20]
 8003828:	621a      	str	r2, [r3, #32]
}
 800382a:	bf00      	nop
 800382c:	371c      	adds	r7, #28
 800382e:	46bd      	mov	sp, r7
 8003830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003834:	4770      	bx	lr

08003836 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003836:	b480      	push	{r7}
 8003838:	b087      	sub	sp, #28
 800383a:	af00      	add	r7, sp, #0
 800383c:	60f8      	str	r0, [r7, #12]
 800383e:	60b9      	str	r1, [r7, #8]
 8003840:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	6a1b      	ldr	r3, [r3, #32]
 8003846:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	6a1b      	ldr	r3, [r3, #32]
 800384c:	f023 0210 	bic.w	r2, r3, #16
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	699b      	ldr	r3, [r3, #24]
 8003858:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003860:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	031b      	lsls	r3, r3, #12
 8003866:	693a      	ldr	r2, [r7, #16]
 8003868:	4313      	orrs	r3, r2
 800386a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003872:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	011b      	lsls	r3, r3, #4
 8003878:	697a      	ldr	r2, [r7, #20]
 800387a:	4313      	orrs	r3, r2
 800387c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	693a      	ldr	r2, [r7, #16]
 8003882:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	697a      	ldr	r2, [r7, #20]
 8003888:	621a      	str	r2, [r3, #32]
}
 800388a:	bf00      	nop
 800388c:	371c      	adds	r7, #28
 800388e:	46bd      	mov	sp, r7
 8003890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003894:	4770      	bx	lr

08003896 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003896:	b480      	push	{r7}
 8003898:	b085      	sub	sp, #20
 800389a:	af00      	add	r7, sp, #0
 800389c:	6078      	str	r0, [r7, #4]
 800389e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80038ac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80038ae:	683a      	ldr	r2, [r7, #0]
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	4313      	orrs	r3, r2
 80038b4:	f043 0307 	orr.w	r3, r3, #7
 80038b8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	68fa      	ldr	r2, [r7, #12]
 80038be:	609a      	str	r2, [r3, #8]
}
 80038c0:	bf00      	nop
 80038c2:	3714      	adds	r7, #20
 80038c4:	46bd      	mov	sp, r7
 80038c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ca:	4770      	bx	lr

080038cc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b087      	sub	sp, #28
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	60f8      	str	r0, [r7, #12]
 80038d4:	60b9      	str	r1, [r7, #8]
 80038d6:	607a      	str	r2, [r7, #4]
 80038d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80038e6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	021a      	lsls	r2, r3, #8
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	431a      	orrs	r2, r3
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	4313      	orrs	r3, r2
 80038f4:	697a      	ldr	r2, [r7, #20]
 80038f6:	4313      	orrs	r3, r2
 80038f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	697a      	ldr	r2, [r7, #20]
 80038fe:	609a      	str	r2, [r3, #8]
}
 8003900:	bf00      	nop
 8003902:	371c      	adds	r7, #28
 8003904:	46bd      	mov	sp, r7
 8003906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390a:	4770      	bx	lr

0800390c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800390c:	b480      	push	{r7}
 800390e:	b085      	sub	sp, #20
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
 8003914:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800391c:	2b01      	cmp	r3, #1
 800391e:	d101      	bne.n	8003924 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003920:	2302      	movs	r3, #2
 8003922:	e05a      	b.n	80039da <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2201      	movs	r2, #1
 8003928:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2202      	movs	r2, #2
 8003930:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	689b      	ldr	r3, [r3, #8]
 8003942:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800394a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	68fa      	ldr	r2, [r7, #12]
 8003952:	4313      	orrs	r3, r2
 8003954:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	68fa      	ldr	r2, [r7, #12]
 800395c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a21      	ldr	r2, [pc, #132]	@ (80039e8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d022      	beq.n	80039ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003970:	d01d      	beq.n	80039ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a1d      	ldr	r2, [pc, #116]	@ (80039ec <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d018      	beq.n	80039ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a1b      	ldr	r2, [pc, #108]	@ (80039f0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d013      	beq.n	80039ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a1a      	ldr	r2, [pc, #104]	@ (80039f4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d00e      	beq.n	80039ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a18      	ldr	r2, [pc, #96]	@ (80039f8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d009      	beq.n	80039ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a17      	ldr	r2, [pc, #92]	@ (80039fc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d004      	beq.n	80039ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a15      	ldr	r2, [pc, #84]	@ (8003a00 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d10c      	bne.n	80039c8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80039b4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	68ba      	ldr	r2, [r7, #8]
 80039bc:	4313      	orrs	r3, r2
 80039be:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	68ba      	ldr	r2, [r7, #8]
 80039c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2201      	movs	r2, #1
 80039cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2200      	movs	r2, #0
 80039d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80039d8:	2300      	movs	r3, #0
}
 80039da:	4618      	mov	r0, r3
 80039dc:	3714      	adds	r7, #20
 80039de:	46bd      	mov	sp, r7
 80039e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e4:	4770      	bx	lr
 80039e6:	bf00      	nop
 80039e8:	40010000 	.word	0x40010000
 80039ec:	40000400 	.word	0x40000400
 80039f0:	40000800 	.word	0x40000800
 80039f4:	40000c00 	.word	0x40000c00
 80039f8:	40010400 	.word	0x40010400
 80039fc:	40014000 	.word	0x40014000
 8003a00:	40001800 	.word	0x40001800

08003a04 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b083      	sub	sp, #12
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003a0c:	bf00      	nop
 8003a0e:	370c      	adds	r7, #12
 8003a10:	46bd      	mov	sp, r7
 8003a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a16:	4770      	bx	lr

08003a18 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b083      	sub	sp, #12
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003a20:	bf00      	nop
 8003a22:	370c      	adds	r7, #12
 8003a24:	46bd      	mov	sp, r7
 8003a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2a:	4770      	bx	lr

08003a2c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003a2c:	b084      	sub	sp, #16
 8003a2e:	b580      	push	{r7, lr}
 8003a30:	b084      	sub	sp, #16
 8003a32:	af00      	add	r7, sp, #0
 8003a34:	6078      	str	r0, [r7, #4]
 8003a36:	f107 001c 	add.w	r0, r7, #28
 8003a3a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003a3e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8003a42:	2b01      	cmp	r3, #1
 8003a44:	d123      	bne.n	8003a8e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a4a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	68db      	ldr	r3, [r3, #12]
 8003a56:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8003a5a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003a5e:	687a      	ldr	r2, [r7, #4]
 8003a60:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	68db      	ldr	r3, [r3, #12]
 8003a66:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003a6e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003a72:	2b01      	cmp	r3, #1
 8003a74:	d105      	bne.n	8003a82 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	68db      	ldr	r3, [r3, #12]
 8003a7a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	f001 fae8 	bl	8005058 <USB_CoreReset>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	73fb      	strb	r3, [r7, #15]
 8003a8c:	e01b      	b.n	8003ac6 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	68db      	ldr	r3, [r3, #12]
 8003a92:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003a9a:	6878      	ldr	r0, [r7, #4]
 8003a9c:	f001 fadc 	bl	8005058 <USB_CoreReset>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003aa4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d106      	bne.n	8003aba <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ab0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	639a      	str	r2, [r3, #56]	@ 0x38
 8003ab8:	e005      	b.n	8003ac6 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003abe:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003ac6:	7fbb      	ldrb	r3, [r7, #30]
 8003ac8:	2b01      	cmp	r3, #1
 8003aca:	d10b      	bne.n	8003ae4 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	f043 0206 	orr.w	r2, r3, #6
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	f043 0220 	orr.w	r2, r3, #32
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003ae4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3710      	adds	r7, #16
 8003aea:	46bd      	mov	sp, r7
 8003aec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003af0:	b004      	add	sp, #16
 8003af2:	4770      	bx	lr

08003af4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b087      	sub	sp, #28
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	60f8      	str	r0, [r7, #12]
 8003afc:	60b9      	str	r1, [r7, #8]
 8003afe:	4613      	mov	r3, r2
 8003b00:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003b02:	79fb      	ldrb	r3, [r7, #7]
 8003b04:	2b02      	cmp	r3, #2
 8003b06:	d165      	bne.n	8003bd4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	4a41      	ldr	r2, [pc, #260]	@ (8003c10 <USB_SetTurnaroundTime+0x11c>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d906      	bls.n	8003b1e <USB_SetTurnaroundTime+0x2a>
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	4a40      	ldr	r2, [pc, #256]	@ (8003c14 <USB_SetTurnaroundTime+0x120>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d202      	bcs.n	8003b1e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003b18:	230f      	movs	r3, #15
 8003b1a:	617b      	str	r3, [r7, #20]
 8003b1c:	e062      	b.n	8003be4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	4a3c      	ldr	r2, [pc, #240]	@ (8003c14 <USB_SetTurnaroundTime+0x120>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d306      	bcc.n	8003b34 <USB_SetTurnaroundTime+0x40>
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	4a3b      	ldr	r2, [pc, #236]	@ (8003c18 <USB_SetTurnaroundTime+0x124>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d202      	bcs.n	8003b34 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003b2e:	230e      	movs	r3, #14
 8003b30:	617b      	str	r3, [r7, #20]
 8003b32:	e057      	b.n	8003be4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	4a38      	ldr	r2, [pc, #224]	@ (8003c18 <USB_SetTurnaroundTime+0x124>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d306      	bcc.n	8003b4a <USB_SetTurnaroundTime+0x56>
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	4a37      	ldr	r2, [pc, #220]	@ (8003c1c <USB_SetTurnaroundTime+0x128>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d202      	bcs.n	8003b4a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003b44:	230d      	movs	r3, #13
 8003b46:	617b      	str	r3, [r7, #20]
 8003b48:	e04c      	b.n	8003be4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	4a33      	ldr	r2, [pc, #204]	@ (8003c1c <USB_SetTurnaroundTime+0x128>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d306      	bcc.n	8003b60 <USB_SetTurnaroundTime+0x6c>
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	4a32      	ldr	r2, [pc, #200]	@ (8003c20 <USB_SetTurnaroundTime+0x12c>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d802      	bhi.n	8003b60 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003b5a:	230c      	movs	r3, #12
 8003b5c:	617b      	str	r3, [r7, #20]
 8003b5e:	e041      	b.n	8003be4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	4a2f      	ldr	r2, [pc, #188]	@ (8003c20 <USB_SetTurnaroundTime+0x12c>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d906      	bls.n	8003b76 <USB_SetTurnaroundTime+0x82>
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	4a2e      	ldr	r2, [pc, #184]	@ (8003c24 <USB_SetTurnaroundTime+0x130>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d802      	bhi.n	8003b76 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003b70:	230b      	movs	r3, #11
 8003b72:	617b      	str	r3, [r7, #20]
 8003b74:	e036      	b.n	8003be4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	4a2a      	ldr	r2, [pc, #168]	@ (8003c24 <USB_SetTurnaroundTime+0x130>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d906      	bls.n	8003b8c <USB_SetTurnaroundTime+0x98>
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	4a29      	ldr	r2, [pc, #164]	@ (8003c28 <USB_SetTurnaroundTime+0x134>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d802      	bhi.n	8003b8c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003b86:	230a      	movs	r3, #10
 8003b88:	617b      	str	r3, [r7, #20]
 8003b8a:	e02b      	b.n	8003be4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	4a26      	ldr	r2, [pc, #152]	@ (8003c28 <USB_SetTurnaroundTime+0x134>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d906      	bls.n	8003ba2 <USB_SetTurnaroundTime+0xae>
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	4a25      	ldr	r2, [pc, #148]	@ (8003c2c <USB_SetTurnaroundTime+0x138>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d202      	bcs.n	8003ba2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003b9c:	2309      	movs	r3, #9
 8003b9e:	617b      	str	r3, [r7, #20]
 8003ba0:	e020      	b.n	8003be4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	4a21      	ldr	r2, [pc, #132]	@ (8003c2c <USB_SetTurnaroundTime+0x138>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d306      	bcc.n	8003bb8 <USB_SetTurnaroundTime+0xc4>
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	4a20      	ldr	r2, [pc, #128]	@ (8003c30 <USB_SetTurnaroundTime+0x13c>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d802      	bhi.n	8003bb8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003bb2:	2308      	movs	r3, #8
 8003bb4:	617b      	str	r3, [r7, #20]
 8003bb6:	e015      	b.n	8003be4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	4a1d      	ldr	r2, [pc, #116]	@ (8003c30 <USB_SetTurnaroundTime+0x13c>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d906      	bls.n	8003bce <USB_SetTurnaroundTime+0xda>
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	4a1c      	ldr	r2, [pc, #112]	@ (8003c34 <USB_SetTurnaroundTime+0x140>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d202      	bcs.n	8003bce <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003bc8:	2307      	movs	r3, #7
 8003bca:	617b      	str	r3, [r7, #20]
 8003bcc:	e00a      	b.n	8003be4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003bce:	2306      	movs	r3, #6
 8003bd0:	617b      	str	r3, [r7, #20]
 8003bd2:	e007      	b.n	8003be4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003bd4:	79fb      	ldrb	r3, [r7, #7]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d102      	bne.n	8003be0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003bda:	2309      	movs	r3, #9
 8003bdc:	617b      	str	r3, [r7, #20]
 8003bde:	e001      	b.n	8003be4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003be0:	2309      	movs	r3, #9
 8003be2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	68db      	ldr	r3, [r3, #12]
 8003be8:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	68da      	ldr	r2, [r3, #12]
 8003bf4:	697b      	ldr	r3, [r7, #20]
 8003bf6:	029b      	lsls	r3, r3, #10
 8003bf8:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8003bfc:	431a      	orrs	r2, r3
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003c02:	2300      	movs	r3, #0
}
 8003c04:	4618      	mov	r0, r3
 8003c06:	371c      	adds	r7, #28
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0e:	4770      	bx	lr
 8003c10:	00d8acbf 	.word	0x00d8acbf
 8003c14:	00e4e1c0 	.word	0x00e4e1c0
 8003c18:	00f42400 	.word	0x00f42400
 8003c1c:	01067380 	.word	0x01067380
 8003c20:	011a499f 	.word	0x011a499f
 8003c24:	01312cff 	.word	0x01312cff
 8003c28:	014ca43f 	.word	0x014ca43f
 8003c2c:	016e3600 	.word	0x016e3600
 8003c30:	01a6ab1f 	.word	0x01a6ab1f
 8003c34:	01e84800 	.word	0x01e84800

08003c38 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b083      	sub	sp, #12
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	f043 0201 	orr.w	r2, r3, #1
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003c4c:	2300      	movs	r3, #0
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	370c      	adds	r7, #12
 8003c52:	46bd      	mov	sp, r7
 8003c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c58:	4770      	bx	lr

08003c5a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003c5a:	b480      	push	{r7}
 8003c5c:	b083      	sub	sp, #12
 8003c5e:	af00      	add	r7, sp, #0
 8003c60:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	f023 0201 	bic.w	r2, r3, #1
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003c6e:	2300      	movs	r3, #0
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	370c      	adds	r7, #12
 8003c74:	46bd      	mov	sp, r7
 8003c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7a:	4770      	bx	lr

08003c7c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b084      	sub	sp, #16
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
 8003c84:	460b      	mov	r3, r1
 8003c86:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	68db      	ldr	r3, [r3, #12]
 8003c90:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003c98:	78fb      	ldrb	r3, [r7, #3]
 8003c9a:	2b01      	cmp	r3, #1
 8003c9c:	d115      	bne.n	8003cca <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	68db      	ldr	r3, [r3, #12]
 8003ca2:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003caa:	200a      	movs	r0, #10
 8003cac:	f7fd f854 	bl	8000d58 <HAL_Delay>
      ms += 10U;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	330a      	adds	r3, #10
 8003cb4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003cb6:	6878      	ldr	r0, [r7, #4]
 8003cb8:	f001 f93f 	bl	8004f3a <USB_GetMode>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	2b01      	cmp	r3, #1
 8003cc0:	d01e      	beq.n	8003d00 <USB_SetCurrentMode+0x84>
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2bc7      	cmp	r3, #199	@ 0xc7
 8003cc6:	d9f0      	bls.n	8003caa <USB_SetCurrentMode+0x2e>
 8003cc8:	e01a      	b.n	8003d00 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003cca:	78fb      	ldrb	r3, [r7, #3]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d115      	bne.n	8003cfc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	68db      	ldr	r3, [r3, #12]
 8003cd4:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003cdc:	200a      	movs	r0, #10
 8003cde:	f7fd f83b 	bl	8000d58 <HAL_Delay>
      ms += 10U;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	330a      	adds	r3, #10
 8003ce6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003ce8:	6878      	ldr	r0, [r7, #4]
 8003cea:	f001 f926 	bl	8004f3a <USB_GetMode>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d005      	beq.n	8003d00 <USB_SetCurrentMode+0x84>
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2bc7      	cmp	r3, #199	@ 0xc7
 8003cf8:	d9f0      	bls.n	8003cdc <USB_SetCurrentMode+0x60>
 8003cfa:	e001      	b.n	8003d00 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	e005      	b.n	8003d0c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2bc8      	cmp	r3, #200	@ 0xc8
 8003d04:	d101      	bne.n	8003d0a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	e000      	b.n	8003d0c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003d0a:	2300      	movs	r3, #0
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	3710      	adds	r7, #16
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bd80      	pop	{r7, pc}

08003d14 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003d14:	b084      	sub	sp, #16
 8003d16:	b580      	push	{r7, lr}
 8003d18:	b086      	sub	sp, #24
 8003d1a:	af00      	add	r7, sp, #0
 8003d1c:	6078      	str	r0, [r7, #4]
 8003d1e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8003d22:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003d26:	2300      	movs	r3, #0
 8003d28:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003d2e:	2300      	movs	r3, #0
 8003d30:	613b      	str	r3, [r7, #16]
 8003d32:	e009      	b.n	8003d48 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003d34:	687a      	ldr	r2, [r7, #4]
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	3340      	adds	r3, #64	@ 0x40
 8003d3a:	009b      	lsls	r3, r3, #2
 8003d3c:	4413      	add	r3, r2
 8003d3e:	2200      	movs	r2, #0
 8003d40:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	3301      	adds	r3, #1
 8003d46:	613b      	str	r3, [r7, #16]
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	2b0e      	cmp	r3, #14
 8003d4c:	d9f2      	bls.n	8003d34 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003d4e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d11c      	bne.n	8003d90 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	68fa      	ldr	r2, [r7, #12]
 8003d60:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003d64:	f043 0302 	orr.w	r3, r3, #2
 8003d68:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d6e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d7a:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d86:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	639a      	str	r2, [r3, #56]	@ 0x38
 8003d8e:	e00b      	b.n	8003da8 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d94:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003da0:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8003dae:	461a      	mov	r2, r3
 8003db0:	2300      	movs	r3, #0
 8003db2:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003db4:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8003db8:	2b01      	cmp	r3, #1
 8003dba:	d10d      	bne.n	8003dd8 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003dbc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d104      	bne.n	8003dce <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003dc4:	2100      	movs	r1, #0
 8003dc6:	6878      	ldr	r0, [r7, #4]
 8003dc8:	f000 f968 	bl	800409c <USB_SetDevSpeed>
 8003dcc:	e008      	b.n	8003de0 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003dce:	2101      	movs	r1, #1
 8003dd0:	6878      	ldr	r0, [r7, #4]
 8003dd2:	f000 f963 	bl	800409c <USB_SetDevSpeed>
 8003dd6:	e003      	b.n	8003de0 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003dd8:	2103      	movs	r1, #3
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	f000 f95e 	bl	800409c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003de0:	2110      	movs	r1, #16
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	f000 f8fa 	bl	8003fdc <USB_FlushTxFifo>
 8003de8:	4603      	mov	r3, r0
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d001      	beq.n	8003df2 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	f000 f924 	bl	8004040 <USB_FlushRxFifo>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d001      	beq.n	8003e02 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e08:	461a      	mov	r2, r3
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e14:	461a      	mov	r2, r3
 8003e16:	2300      	movs	r3, #0
 8003e18:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e20:	461a      	mov	r2, r3
 8003e22:	2300      	movs	r3, #0
 8003e24:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003e26:	2300      	movs	r3, #0
 8003e28:	613b      	str	r3, [r7, #16]
 8003e2a:	e043      	b.n	8003eb4 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	015a      	lsls	r2, r3, #5
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	4413      	add	r3, r2
 8003e34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003e3e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003e42:	d118      	bne.n	8003e76 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d10a      	bne.n	8003e60 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	015a      	lsls	r2, r3, #5
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	4413      	add	r3, r2
 8003e52:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e56:	461a      	mov	r2, r3
 8003e58:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003e5c:	6013      	str	r3, [r2, #0]
 8003e5e:	e013      	b.n	8003e88 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	015a      	lsls	r2, r3, #5
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	4413      	add	r3, r2
 8003e68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e6c:	461a      	mov	r2, r3
 8003e6e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003e72:	6013      	str	r3, [r2, #0]
 8003e74:	e008      	b.n	8003e88 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	015a      	lsls	r2, r3, #5
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	4413      	add	r3, r2
 8003e7e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e82:	461a      	mov	r2, r3
 8003e84:	2300      	movs	r3, #0
 8003e86:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	015a      	lsls	r2, r3, #5
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	4413      	add	r3, r2
 8003e90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e94:	461a      	mov	r2, r3
 8003e96:	2300      	movs	r3, #0
 8003e98:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	015a      	lsls	r2, r3, #5
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	4413      	add	r3, r2
 8003ea2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ea6:	461a      	mov	r2, r3
 8003ea8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003eac:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	3301      	adds	r3, #1
 8003eb2:	613b      	str	r3, [r7, #16]
 8003eb4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003eb8:	461a      	mov	r2, r3
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d3b5      	bcc.n	8003e2c <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	613b      	str	r3, [r7, #16]
 8003ec4:	e043      	b.n	8003f4e <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	015a      	lsls	r2, r3, #5
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	4413      	add	r3, r2
 8003ece:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003ed8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003edc:	d118      	bne.n	8003f10 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d10a      	bne.n	8003efa <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	015a      	lsls	r2, r3, #5
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	4413      	add	r3, r2
 8003eec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ef0:	461a      	mov	r2, r3
 8003ef2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003ef6:	6013      	str	r3, [r2, #0]
 8003ef8:	e013      	b.n	8003f22 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	015a      	lsls	r2, r3, #5
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	4413      	add	r3, r2
 8003f02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f06:	461a      	mov	r2, r3
 8003f08:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003f0c:	6013      	str	r3, [r2, #0]
 8003f0e:	e008      	b.n	8003f22 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003f10:	693b      	ldr	r3, [r7, #16]
 8003f12:	015a      	lsls	r2, r3, #5
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	4413      	add	r3, r2
 8003f18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f1c:	461a      	mov	r2, r3
 8003f1e:	2300      	movs	r3, #0
 8003f20:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003f22:	693b      	ldr	r3, [r7, #16]
 8003f24:	015a      	lsls	r2, r3, #5
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	4413      	add	r3, r2
 8003f2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f2e:	461a      	mov	r2, r3
 8003f30:	2300      	movs	r3, #0
 8003f32:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003f34:	693b      	ldr	r3, [r7, #16]
 8003f36:	015a      	lsls	r2, r3, #5
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	4413      	add	r3, r2
 8003f3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f40:	461a      	mov	r2, r3
 8003f42:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003f46:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	3301      	adds	r3, #1
 8003f4c:	613b      	str	r3, [r7, #16]
 8003f4e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003f52:	461a      	mov	r2, r3
 8003f54:	693b      	ldr	r3, [r7, #16]
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d3b5      	bcc.n	8003ec6 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f60:	691b      	ldr	r3, [r3, #16]
 8003f62:	68fa      	ldr	r2, [r7, #12]
 8003f64:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003f68:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003f6c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2200      	movs	r2, #0
 8003f72:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8003f7a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003f7c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d105      	bne.n	8003f90 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	699b      	ldr	r3, [r3, #24]
 8003f88:	f043 0210 	orr.w	r2, r3, #16
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	699a      	ldr	r2, [r3, #24]
 8003f94:	4b10      	ldr	r3, [pc, #64]	@ (8003fd8 <USB_DevInit+0x2c4>)
 8003f96:	4313      	orrs	r3, r2
 8003f98:	687a      	ldr	r2, [r7, #4]
 8003f9a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003f9c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d005      	beq.n	8003fb0 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	699b      	ldr	r3, [r3, #24]
 8003fa8:	f043 0208 	orr.w	r2, r3, #8
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003fb0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d107      	bne.n	8003fc8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	699b      	ldr	r3, [r3, #24]
 8003fbc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003fc0:	f043 0304 	orr.w	r3, r3, #4
 8003fc4:	687a      	ldr	r2, [r7, #4]
 8003fc6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003fc8:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	3718      	adds	r7, #24
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003fd4:	b004      	add	sp, #16
 8003fd6:	4770      	bx	lr
 8003fd8:	803c3800 	.word	0x803c3800

08003fdc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b085      	sub	sp, #20
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
 8003fe4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	3301      	adds	r3, #1
 8003fee:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003ff6:	d901      	bls.n	8003ffc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003ff8:	2303      	movs	r3, #3
 8003ffa:	e01b      	b.n	8004034 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	691b      	ldr	r3, [r3, #16]
 8004000:	2b00      	cmp	r3, #0
 8004002:	daf2      	bge.n	8003fea <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004004:	2300      	movs	r3, #0
 8004006:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	019b      	lsls	r3, r3, #6
 800400c:	f043 0220 	orr.w	r2, r3, #32
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	3301      	adds	r3, #1
 8004018:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004020:	d901      	bls.n	8004026 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004022:	2303      	movs	r3, #3
 8004024:	e006      	b.n	8004034 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	691b      	ldr	r3, [r3, #16]
 800402a:	f003 0320 	and.w	r3, r3, #32
 800402e:	2b20      	cmp	r3, #32
 8004030:	d0f0      	beq.n	8004014 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004032:	2300      	movs	r3, #0
}
 8004034:	4618      	mov	r0, r3
 8004036:	3714      	adds	r7, #20
 8004038:	46bd      	mov	sp, r7
 800403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403e:	4770      	bx	lr

08004040 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004040:	b480      	push	{r7}
 8004042:	b085      	sub	sp, #20
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004048:	2300      	movs	r3, #0
 800404a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	3301      	adds	r3, #1
 8004050:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004058:	d901      	bls.n	800405e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800405a:	2303      	movs	r3, #3
 800405c:	e018      	b.n	8004090 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	691b      	ldr	r3, [r3, #16]
 8004062:	2b00      	cmp	r3, #0
 8004064:	daf2      	bge.n	800404c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004066:	2300      	movs	r3, #0
 8004068:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2210      	movs	r2, #16
 800406e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	3301      	adds	r3, #1
 8004074:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800407c:	d901      	bls.n	8004082 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800407e:	2303      	movs	r3, #3
 8004080:	e006      	b.n	8004090 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	691b      	ldr	r3, [r3, #16]
 8004086:	f003 0310 	and.w	r3, r3, #16
 800408a:	2b10      	cmp	r3, #16
 800408c:	d0f0      	beq.n	8004070 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800408e:	2300      	movs	r3, #0
}
 8004090:	4618      	mov	r0, r3
 8004092:	3714      	adds	r7, #20
 8004094:	46bd      	mov	sp, r7
 8004096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409a:	4770      	bx	lr

0800409c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800409c:	b480      	push	{r7}
 800409e:	b085      	sub	sp, #20
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
 80040a4:	460b      	mov	r3, r1
 80040a6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80040b2:	681a      	ldr	r2, [r3, #0]
 80040b4:	78fb      	ldrb	r3, [r7, #3]
 80040b6:	68f9      	ldr	r1, [r7, #12]
 80040b8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80040bc:	4313      	orrs	r3, r2
 80040be:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80040c0:	2300      	movs	r3, #0
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	3714      	adds	r7, #20
 80040c6:	46bd      	mov	sp, r7
 80040c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040cc:	4770      	bx	lr

080040ce <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80040ce:	b480      	push	{r7}
 80040d0:	b087      	sub	sp, #28
 80040d2:	af00      	add	r7, sp, #0
 80040d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80040e0:	689b      	ldr	r3, [r3, #8]
 80040e2:	f003 0306 	and.w	r3, r3, #6
 80040e6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d102      	bne.n	80040f4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80040ee:	2300      	movs	r3, #0
 80040f0:	75fb      	strb	r3, [r7, #23]
 80040f2:	e00a      	b.n	800410a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	2b02      	cmp	r3, #2
 80040f8:	d002      	beq.n	8004100 <USB_GetDevSpeed+0x32>
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	2b06      	cmp	r3, #6
 80040fe:	d102      	bne.n	8004106 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004100:	2302      	movs	r3, #2
 8004102:	75fb      	strb	r3, [r7, #23]
 8004104:	e001      	b.n	800410a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004106:	230f      	movs	r3, #15
 8004108:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800410a:	7dfb      	ldrb	r3, [r7, #23]
}
 800410c:	4618      	mov	r0, r3
 800410e:	371c      	adds	r7, #28
 8004110:	46bd      	mov	sp, r7
 8004112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004116:	4770      	bx	lr

08004118 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004118:	b480      	push	{r7}
 800411a:	b085      	sub	sp, #20
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
 8004120:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	781b      	ldrb	r3, [r3, #0]
 800412a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	785b      	ldrb	r3, [r3, #1]
 8004130:	2b01      	cmp	r3, #1
 8004132:	d13a      	bne.n	80041aa <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800413a:	69da      	ldr	r2, [r3, #28]
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	781b      	ldrb	r3, [r3, #0]
 8004140:	f003 030f 	and.w	r3, r3, #15
 8004144:	2101      	movs	r1, #1
 8004146:	fa01 f303 	lsl.w	r3, r1, r3
 800414a:	b29b      	uxth	r3, r3
 800414c:	68f9      	ldr	r1, [r7, #12]
 800414e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004152:	4313      	orrs	r3, r2
 8004154:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	015a      	lsls	r2, r3, #5
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	4413      	add	r3, r2
 800415e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004168:	2b00      	cmp	r3, #0
 800416a:	d155      	bne.n	8004218 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	015a      	lsls	r2, r3, #5
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	4413      	add	r3, r2
 8004174:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004178:	681a      	ldr	r2, [r3, #0]
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	791b      	ldrb	r3, [r3, #4]
 8004186:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004188:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	059b      	lsls	r3, r3, #22
 800418e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004190:	4313      	orrs	r3, r2
 8004192:	68ba      	ldr	r2, [r7, #8]
 8004194:	0151      	lsls	r1, r2, #5
 8004196:	68fa      	ldr	r2, [r7, #12]
 8004198:	440a      	add	r2, r1
 800419a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800419e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80041a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80041a6:	6013      	str	r3, [r2, #0]
 80041a8:	e036      	b.n	8004218 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80041b0:	69da      	ldr	r2, [r3, #28]
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	781b      	ldrb	r3, [r3, #0]
 80041b6:	f003 030f 	and.w	r3, r3, #15
 80041ba:	2101      	movs	r1, #1
 80041bc:	fa01 f303 	lsl.w	r3, r1, r3
 80041c0:	041b      	lsls	r3, r3, #16
 80041c2:	68f9      	ldr	r1, [r7, #12]
 80041c4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80041c8:	4313      	orrs	r3, r2
 80041ca:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	015a      	lsls	r2, r3, #5
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	4413      	add	r3, r2
 80041d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d11a      	bne.n	8004218 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80041e2:	68bb      	ldr	r3, [r7, #8]
 80041e4:	015a      	lsls	r2, r3, #5
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	4413      	add	r3, r2
 80041ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041ee:	681a      	ldr	r2, [r3, #0]
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	689b      	ldr	r3, [r3, #8]
 80041f4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	791b      	ldrb	r3, [r3, #4]
 80041fc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80041fe:	430b      	orrs	r3, r1
 8004200:	4313      	orrs	r3, r2
 8004202:	68ba      	ldr	r2, [r7, #8]
 8004204:	0151      	lsls	r1, r2, #5
 8004206:	68fa      	ldr	r2, [r7, #12]
 8004208:	440a      	add	r2, r1
 800420a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800420e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004212:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004216:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004218:	2300      	movs	r3, #0
}
 800421a:	4618      	mov	r0, r3
 800421c:	3714      	adds	r7, #20
 800421e:	46bd      	mov	sp, r7
 8004220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004224:	4770      	bx	lr
	...

08004228 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004228:	b480      	push	{r7}
 800422a:	b085      	sub	sp, #20
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
 8004230:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	781b      	ldrb	r3, [r3, #0]
 800423a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	785b      	ldrb	r3, [r3, #1]
 8004240:	2b01      	cmp	r3, #1
 8004242:	d161      	bne.n	8004308 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	015a      	lsls	r2, r3, #5
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	4413      	add	r3, r2
 800424c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004256:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800425a:	d11f      	bne.n	800429c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	015a      	lsls	r2, r3, #5
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	4413      	add	r3, r2
 8004264:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	68ba      	ldr	r2, [r7, #8]
 800426c:	0151      	lsls	r1, r2, #5
 800426e:	68fa      	ldr	r2, [r7, #12]
 8004270:	440a      	add	r2, r1
 8004272:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004276:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800427a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	015a      	lsls	r2, r3, #5
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	4413      	add	r3, r2
 8004284:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	68ba      	ldr	r2, [r7, #8]
 800428c:	0151      	lsls	r1, r2, #5
 800428e:	68fa      	ldr	r2, [r7, #12]
 8004290:	440a      	add	r2, r1
 8004292:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004296:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800429a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80042a2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	781b      	ldrb	r3, [r3, #0]
 80042a8:	f003 030f 	and.w	r3, r3, #15
 80042ac:	2101      	movs	r1, #1
 80042ae:	fa01 f303 	lsl.w	r3, r1, r3
 80042b2:	b29b      	uxth	r3, r3
 80042b4:	43db      	mvns	r3, r3
 80042b6:	68f9      	ldr	r1, [r7, #12]
 80042b8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80042bc:	4013      	ands	r3, r2
 80042be:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80042c6:	69da      	ldr	r2, [r3, #28]
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	781b      	ldrb	r3, [r3, #0]
 80042cc:	f003 030f 	and.w	r3, r3, #15
 80042d0:	2101      	movs	r1, #1
 80042d2:	fa01 f303 	lsl.w	r3, r1, r3
 80042d6:	b29b      	uxth	r3, r3
 80042d8:	43db      	mvns	r3, r3
 80042da:	68f9      	ldr	r1, [r7, #12]
 80042dc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80042e0:	4013      	ands	r3, r2
 80042e2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	015a      	lsls	r2, r3, #5
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	4413      	add	r3, r2
 80042ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80042f0:	681a      	ldr	r2, [r3, #0]
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	0159      	lsls	r1, r3, #5
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	440b      	add	r3, r1
 80042fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80042fe:	4619      	mov	r1, r3
 8004300:	4b35      	ldr	r3, [pc, #212]	@ (80043d8 <USB_DeactivateEndpoint+0x1b0>)
 8004302:	4013      	ands	r3, r2
 8004304:	600b      	str	r3, [r1, #0]
 8004306:	e060      	b.n	80043ca <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	015a      	lsls	r2, r3, #5
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	4413      	add	r3, r2
 8004310:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800431a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800431e:	d11f      	bne.n	8004360 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	015a      	lsls	r2, r3, #5
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	4413      	add	r3, r2
 8004328:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	68ba      	ldr	r2, [r7, #8]
 8004330:	0151      	lsls	r1, r2, #5
 8004332:	68fa      	ldr	r2, [r7, #12]
 8004334:	440a      	add	r2, r1
 8004336:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800433a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800433e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	015a      	lsls	r2, r3, #5
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	4413      	add	r3, r2
 8004348:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	68ba      	ldr	r2, [r7, #8]
 8004350:	0151      	lsls	r1, r2, #5
 8004352:	68fa      	ldr	r2, [r7, #12]
 8004354:	440a      	add	r2, r1
 8004356:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800435a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800435e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004366:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	781b      	ldrb	r3, [r3, #0]
 800436c:	f003 030f 	and.w	r3, r3, #15
 8004370:	2101      	movs	r1, #1
 8004372:	fa01 f303 	lsl.w	r3, r1, r3
 8004376:	041b      	lsls	r3, r3, #16
 8004378:	43db      	mvns	r3, r3
 800437a:	68f9      	ldr	r1, [r7, #12]
 800437c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004380:	4013      	ands	r3, r2
 8004382:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800438a:	69da      	ldr	r2, [r3, #28]
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	781b      	ldrb	r3, [r3, #0]
 8004390:	f003 030f 	and.w	r3, r3, #15
 8004394:	2101      	movs	r1, #1
 8004396:	fa01 f303 	lsl.w	r3, r1, r3
 800439a:	041b      	lsls	r3, r3, #16
 800439c:	43db      	mvns	r3, r3
 800439e:	68f9      	ldr	r1, [r7, #12]
 80043a0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80043a4:	4013      	ands	r3, r2
 80043a6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	015a      	lsls	r2, r3, #5
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	4413      	add	r3, r2
 80043b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043b4:	681a      	ldr	r2, [r3, #0]
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	0159      	lsls	r1, r3, #5
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	440b      	add	r3, r1
 80043be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043c2:	4619      	mov	r1, r3
 80043c4:	4b05      	ldr	r3, [pc, #20]	@ (80043dc <USB_DeactivateEndpoint+0x1b4>)
 80043c6:	4013      	ands	r3, r2
 80043c8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80043ca:	2300      	movs	r3, #0
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	3714      	adds	r7, #20
 80043d0:	46bd      	mov	sp, r7
 80043d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d6:	4770      	bx	lr
 80043d8:	ec337800 	.word	0xec337800
 80043dc:	eff37800 	.word	0xeff37800

080043e0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b08a      	sub	sp, #40	@ 0x28
 80043e4:	af02      	add	r7, sp, #8
 80043e6:	60f8      	str	r0, [r7, #12]
 80043e8:	60b9      	str	r1, [r7, #8]
 80043ea:	4613      	mov	r3, r2
 80043ec:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	781b      	ldrb	r3, [r3, #0]
 80043f6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	785b      	ldrb	r3, [r3, #1]
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	f040 817f 	bne.w	8004700 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	691b      	ldr	r3, [r3, #16]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d132      	bne.n	8004470 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800440a:	69bb      	ldr	r3, [r7, #24]
 800440c:	015a      	lsls	r2, r3, #5
 800440e:	69fb      	ldr	r3, [r7, #28]
 8004410:	4413      	add	r3, r2
 8004412:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004416:	691b      	ldr	r3, [r3, #16]
 8004418:	69ba      	ldr	r2, [r7, #24]
 800441a:	0151      	lsls	r1, r2, #5
 800441c:	69fa      	ldr	r2, [r7, #28]
 800441e:	440a      	add	r2, r1
 8004420:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004424:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004428:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800442c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800442e:	69bb      	ldr	r3, [r7, #24]
 8004430:	015a      	lsls	r2, r3, #5
 8004432:	69fb      	ldr	r3, [r7, #28]
 8004434:	4413      	add	r3, r2
 8004436:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800443a:	691b      	ldr	r3, [r3, #16]
 800443c:	69ba      	ldr	r2, [r7, #24]
 800443e:	0151      	lsls	r1, r2, #5
 8004440:	69fa      	ldr	r2, [r7, #28]
 8004442:	440a      	add	r2, r1
 8004444:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004448:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800444c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800444e:	69bb      	ldr	r3, [r7, #24]
 8004450:	015a      	lsls	r2, r3, #5
 8004452:	69fb      	ldr	r3, [r7, #28]
 8004454:	4413      	add	r3, r2
 8004456:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800445a:	691b      	ldr	r3, [r3, #16]
 800445c:	69ba      	ldr	r2, [r7, #24]
 800445e:	0151      	lsls	r1, r2, #5
 8004460:	69fa      	ldr	r2, [r7, #28]
 8004462:	440a      	add	r2, r1
 8004464:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004468:	0cdb      	lsrs	r3, r3, #19
 800446a:	04db      	lsls	r3, r3, #19
 800446c:	6113      	str	r3, [r2, #16]
 800446e:	e097      	b.n	80045a0 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004470:	69bb      	ldr	r3, [r7, #24]
 8004472:	015a      	lsls	r2, r3, #5
 8004474:	69fb      	ldr	r3, [r7, #28]
 8004476:	4413      	add	r3, r2
 8004478:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800447c:	691b      	ldr	r3, [r3, #16]
 800447e:	69ba      	ldr	r2, [r7, #24]
 8004480:	0151      	lsls	r1, r2, #5
 8004482:	69fa      	ldr	r2, [r7, #28]
 8004484:	440a      	add	r2, r1
 8004486:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800448a:	0cdb      	lsrs	r3, r3, #19
 800448c:	04db      	lsls	r3, r3, #19
 800448e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004490:	69bb      	ldr	r3, [r7, #24]
 8004492:	015a      	lsls	r2, r3, #5
 8004494:	69fb      	ldr	r3, [r7, #28]
 8004496:	4413      	add	r3, r2
 8004498:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800449c:	691b      	ldr	r3, [r3, #16]
 800449e:	69ba      	ldr	r2, [r7, #24]
 80044a0:	0151      	lsls	r1, r2, #5
 80044a2:	69fa      	ldr	r2, [r7, #28]
 80044a4:	440a      	add	r2, r1
 80044a6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80044aa:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80044ae:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80044b2:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80044b4:	69bb      	ldr	r3, [r7, #24]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d11a      	bne.n	80044f0 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	691a      	ldr	r2, [r3, #16]
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	429a      	cmp	r2, r3
 80044c4:	d903      	bls.n	80044ce <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	689a      	ldr	r2, [r3, #8]
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80044ce:	69bb      	ldr	r3, [r7, #24]
 80044d0:	015a      	lsls	r2, r3, #5
 80044d2:	69fb      	ldr	r3, [r7, #28]
 80044d4:	4413      	add	r3, r2
 80044d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80044da:	691b      	ldr	r3, [r3, #16]
 80044dc:	69ba      	ldr	r2, [r7, #24]
 80044de:	0151      	lsls	r1, r2, #5
 80044e0:	69fa      	ldr	r2, [r7, #28]
 80044e2:	440a      	add	r2, r1
 80044e4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80044e8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80044ec:	6113      	str	r3, [r2, #16]
 80044ee:	e044      	b.n	800457a <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	691a      	ldr	r2, [r3, #16]
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	689b      	ldr	r3, [r3, #8]
 80044f8:	4413      	add	r3, r2
 80044fa:	1e5a      	subs	r2, r3, #1
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	689b      	ldr	r3, [r3, #8]
 8004500:	fbb2 f3f3 	udiv	r3, r2, r3
 8004504:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8004506:	69bb      	ldr	r3, [r7, #24]
 8004508:	015a      	lsls	r2, r3, #5
 800450a:	69fb      	ldr	r3, [r7, #28]
 800450c:	4413      	add	r3, r2
 800450e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004512:	691a      	ldr	r2, [r3, #16]
 8004514:	8afb      	ldrh	r3, [r7, #22]
 8004516:	04d9      	lsls	r1, r3, #19
 8004518:	4ba4      	ldr	r3, [pc, #656]	@ (80047ac <USB_EPStartXfer+0x3cc>)
 800451a:	400b      	ands	r3, r1
 800451c:	69b9      	ldr	r1, [r7, #24]
 800451e:	0148      	lsls	r0, r1, #5
 8004520:	69f9      	ldr	r1, [r7, #28]
 8004522:	4401      	add	r1, r0
 8004524:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004528:	4313      	orrs	r3, r2
 800452a:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	791b      	ldrb	r3, [r3, #4]
 8004530:	2b01      	cmp	r3, #1
 8004532:	d122      	bne.n	800457a <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004534:	69bb      	ldr	r3, [r7, #24]
 8004536:	015a      	lsls	r2, r3, #5
 8004538:	69fb      	ldr	r3, [r7, #28]
 800453a:	4413      	add	r3, r2
 800453c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004540:	691b      	ldr	r3, [r3, #16]
 8004542:	69ba      	ldr	r2, [r7, #24]
 8004544:	0151      	lsls	r1, r2, #5
 8004546:	69fa      	ldr	r2, [r7, #28]
 8004548:	440a      	add	r2, r1
 800454a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800454e:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8004552:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8004554:	69bb      	ldr	r3, [r7, #24]
 8004556:	015a      	lsls	r2, r3, #5
 8004558:	69fb      	ldr	r3, [r7, #28]
 800455a:	4413      	add	r3, r2
 800455c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004560:	691a      	ldr	r2, [r3, #16]
 8004562:	8afb      	ldrh	r3, [r7, #22]
 8004564:	075b      	lsls	r3, r3, #29
 8004566:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800456a:	69b9      	ldr	r1, [r7, #24]
 800456c:	0148      	lsls	r0, r1, #5
 800456e:	69f9      	ldr	r1, [r7, #28]
 8004570:	4401      	add	r1, r0
 8004572:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004576:	4313      	orrs	r3, r2
 8004578:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800457a:	69bb      	ldr	r3, [r7, #24]
 800457c:	015a      	lsls	r2, r3, #5
 800457e:	69fb      	ldr	r3, [r7, #28]
 8004580:	4413      	add	r3, r2
 8004582:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004586:	691a      	ldr	r2, [r3, #16]
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	691b      	ldr	r3, [r3, #16]
 800458c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004590:	69b9      	ldr	r1, [r7, #24]
 8004592:	0148      	lsls	r0, r1, #5
 8004594:	69f9      	ldr	r1, [r7, #28]
 8004596:	4401      	add	r1, r0
 8004598:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800459c:	4313      	orrs	r3, r2
 800459e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80045a0:	79fb      	ldrb	r3, [r7, #7]
 80045a2:	2b01      	cmp	r3, #1
 80045a4:	d14b      	bne.n	800463e <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	69db      	ldr	r3, [r3, #28]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d009      	beq.n	80045c2 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80045ae:	69bb      	ldr	r3, [r7, #24]
 80045b0:	015a      	lsls	r2, r3, #5
 80045b2:	69fb      	ldr	r3, [r7, #28]
 80045b4:	4413      	add	r3, r2
 80045b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80045ba:	461a      	mov	r2, r3
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	69db      	ldr	r3, [r3, #28]
 80045c0:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	791b      	ldrb	r3, [r3, #4]
 80045c6:	2b01      	cmp	r3, #1
 80045c8:	d128      	bne.n	800461c <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80045ca:	69fb      	ldr	r3, [r7, #28]
 80045cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d110      	bne.n	80045fc <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80045da:	69bb      	ldr	r3, [r7, #24]
 80045dc:	015a      	lsls	r2, r3, #5
 80045de:	69fb      	ldr	r3, [r7, #28]
 80045e0:	4413      	add	r3, r2
 80045e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	69ba      	ldr	r2, [r7, #24]
 80045ea:	0151      	lsls	r1, r2, #5
 80045ec:	69fa      	ldr	r2, [r7, #28]
 80045ee:	440a      	add	r2, r1
 80045f0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80045f4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80045f8:	6013      	str	r3, [r2, #0]
 80045fa:	e00f      	b.n	800461c <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80045fc:	69bb      	ldr	r3, [r7, #24]
 80045fe:	015a      	lsls	r2, r3, #5
 8004600:	69fb      	ldr	r3, [r7, #28]
 8004602:	4413      	add	r3, r2
 8004604:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	69ba      	ldr	r2, [r7, #24]
 800460c:	0151      	lsls	r1, r2, #5
 800460e:	69fa      	ldr	r2, [r7, #28]
 8004610:	440a      	add	r2, r1
 8004612:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004616:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800461a:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800461c:	69bb      	ldr	r3, [r7, #24]
 800461e:	015a      	lsls	r2, r3, #5
 8004620:	69fb      	ldr	r3, [r7, #28]
 8004622:	4413      	add	r3, r2
 8004624:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	69ba      	ldr	r2, [r7, #24]
 800462c:	0151      	lsls	r1, r2, #5
 800462e:	69fa      	ldr	r2, [r7, #28]
 8004630:	440a      	add	r2, r1
 8004632:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004636:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800463a:	6013      	str	r3, [r2, #0]
 800463c:	e166      	b.n	800490c <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800463e:	69bb      	ldr	r3, [r7, #24]
 8004640:	015a      	lsls	r2, r3, #5
 8004642:	69fb      	ldr	r3, [r7, #28]
 8004644:	4413      	add	r3, r2
 8004646:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	69ba      	ldr	r2, [r7, #24]
 800464e:	0151      	lsls	r1, r2, #5
 8004650:	69fa      	ldr	r2, [r7, #28]
 8004652:	440a      	add	r2, r1
 8004654:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004658:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800465c:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	791b      	ldrb	r3, [r3, #4]
 8004662:	2b01      	cmp	r3, #1
 8004664:	d015      	beq.n	8004692 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	691b      	ldr	r3, [r3, #16]
 800466a:	2b00      	cmp	r3, #0
 800466c:	f000 814e 	beq.w	800490c <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004670:	69fb      	ldr	r3, [r7, #28]
 8004672:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004676:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	781b      	ldrb	r3, [r3, #0]
 800467c:	f003 030f 	and.w	r3, r3, #15
 8004680:	2101      	movs	r1, #1
 8004682:	fa01 f303 	lsl.w	r3, r1, r3
 8004686:	69f9      	ldr	r1, [r7, #28]
 8004688:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800468c:	4313      	orrs	r3, r2
 800468e:	634b      	str	r3, [r1, #52]	@ 0x34
 8004690:	e13c      	b.n	800490c <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004692:	69fb      	ldr	r3, [r7, #28]
 8004694:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004698:	689b      	ldr	r3, [r3, #8]
 800469a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d110      	bne.n	80046c4 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80046a2:	69bb      	ldr	r3, [r7, #24]
 80046a4:	015a      	lsls	r2, r3, #5
 80046a6:	69fb      	ldr	r3, [r7, #28]
 80046a8:	4413      	add	r3, r2
 80046aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	69ba      	ldr	r2, [r7, #24]
 80046b2:	0151      	lsls	r1, r2, #5
 80046b4:	69fa      	ldr	r2, [r7, #28]
 80046b6:	440a      	add	r2, r1
 80046b8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80046bc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80046c0:	6013      	str	r3, [r2, #0]
 80046c2:	e00f      	b.n	80046e4 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80046c4:	69bb      	ldr	r3, [r7, #24]
 80046c6:	015a      	lsls	r2, r3, #5
 80046c8:	69fb      	ldr	r3, [r7, #28]
 80046ca:	4413      	add	r3, r2
 80046cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	69ba      	ldr	r2, [r7, #24]
 80046d4:	0151      	lsls	r1, r2, #5
 80046d6:	69fa      	ldr	r2, [r7, #28]
 80046d8:	440a      	add	r2, r1
 80046da:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80046de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80046e2:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	68d9      	ldr	r1, [r3, #12]
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	781a      	ldrb	r2, [r3, #0]
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	691b      	ldr	r3, [r3, #16]
 80046f0:	b298      	uxth	r0, r3
 80046f2:	79fb      	ldrb	r3, [r7, #7]
 80046f4:	9300      	str	r3, [sp, #0]
 80046f6:	4603      	mov	r3, r0
 80046f8:	68f8      	ldr	r0, [r7, #12]
 80046fa:	f000 f9b9 	bl	8004a70 <USB_WritePacket>
 80046fe:	e105      	b.n	800490c <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004700:	69bb      	ldr	r3, [r7, #24]
 8004702:	015a      	lsls	r2, r3, #5
 8004704:	69fb      	ldr	r3, [r7, #28]
 8004706:	4413      	add	r3, r2
 8004708:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800470c:	691b      	ldr	r3, [r3, #16]
 800470e:	69ba      	ldr	r2, [r7, #24]
 8004710:	0151      	lsls	r1, r2, #5
 8004712:	69fa      	ldr	r2, [r7, #28]
 8004714:	440a      	add	r2, r1
 8004716:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800471a:	0cdb      	lsrs	r3, r3, #19
 800471c:	04db      	lsls	r3, r3, #19
 800471e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004720:	69bb      	ldr	r3, [r7, #24]
 8004722:	015a      	lsls	r2, r3, #5
 8004724:	69fb      	ldr	r3, [r7, #28]
 8004726:	4413      	add	r3, r2
 8004728:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800472c:	691b      	ldr	r3, [r3, #16]
 800472e:	69ba      	ldr	r2, [r7, #24]
 8004730:	0151      	lsls	r1, r2, #5
 8004732:	69fa      	ldr	r2, [r7, #28]
 8004734:	440a      	add	r2, r1
 8004736:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800473a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800473e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004742:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8004744:	69bb      	ldr	r3, [r7, #24]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d132      	bne.n	80047b0 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	691b      	ldr	r3, [r3, #16]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d003      	beq.n	800475a <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	689a      	ldr	r2, [r3, #8]
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	689a      	ldr	r2, [r3, #8]
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004762:	69bb      	ldr	r3, [r7, #24]
 8004764:	015a      	lsls	r2, r3, #5
 8004766:	69fb      	ldr	r3, [r7, #28]
 8004768:	4413      	add	r3, r2
 800476a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800476e:	691a      	ldr	r2, [r3, #16]
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	6a1b      	ldr	r3, [r3, #32]
 8004774:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004778:	69b9      	ldr	r1, [r7, #24]
 800477a:	0148      	lsls	r0, r1, #5
 800477c:	69f9      	ldr	r1, [r7, #28]
 800477e:	4401      	add	r1, r0
 8004780:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004784:	4313      	orrs	r3, r2
 8004786:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004788:	69bb      	ldr	r3, [r7, #24]
 800478a:	015a      	lsls	r2, r3, #5
 800478c:	69fb      	ldr	r3, [r7, #28]
 800478e:	4413      	add	r3, r2
 8004790:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004794:	691b      	ldr	r3, [r3, #16]
 8004796:	69ba      	ldr	r2, [r7, #24]
 8004798:	0151      	lsls	r1, r2, #5
 800479a:	69fa      	ldr	r2, [r7, #28]
 800479c:	440a      	add	r2, r1
 800479e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80047a2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80047a6:	6113      	str	r3, [r2, #16]
 80047a8:	e062      	b.n	8004870 <USB_EPStartXfer+0x490>
 80047aa:	bf00      	nop
 80047ac:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	691b      	ldr	r3, [r3, #16]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d123      	bne.n	8004800 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80047b8:	69bb      	ldr	r3, [r7, #24]
 80047ba:	015a      	lsls	r2, r3, #5
 80047bc:	69fb      	ldr	r3, [r7, #28]
 80047be:	4413      	add	r3, r2
 80047c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047c4:	691a      	ldr	r2, [r3, #16]
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047ce:	69b9      	ldr	r1, [r7, #24]
 80047d0:	0148      	lsls	r0, r1, #5
 80047d2:	69f9      	ldr	r1, [r7, #28]
 80047d4:	4401      	add	r1, r0
 80047d6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80047da:	4313      	orrs	r3, r2
 80047dc:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80047de:	69bb      	ldr	r3, [r7, #24]
 80047e0:	015a      	lsls	r2, r3, #5
 80047e2:	69fb      	ldr	r3, [r7, #28]
 80047e4:	4413      	add	r3, r2
 80047e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047ea:	691b      	ldr	r3, [r3, #16]
 80047ec:	69ba      	ldr	r2, [r7, #24]
 80047ee:	0151      	lsls	r1, r2, #5
 80047f0:	69fa      	ldr	r2, [r7, #28]
 80047f2:	440a      	add	r2, r1
 80047f4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80047f8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80047fc:	6113      	str	r3, [r2, #16]
 80047fe:	e037      	b.n	8004870 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	691a      	ldr	r2, [r3, #16]
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	4413      	add	r3, r2
 800480a:	1e5a      	subs	r2, r3, #1
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	689b      	ldr	r3, [r3, #8]
 8004810:	fbb2 f3f3 	udiv	r3, r2, r3
 8004814:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	689b      	ldr	r3, [r3, #8]
 800481a:	8afa      	ldrh	r2, [r7, #22]
 800481c:	fb03 f202 	mul.w	r2, r3, r2
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004824:	69bb      	ldr	r3, [r7, #24]
 8004826:	015a      	lsls	r2, r3, #5
 8004828:	69fb      	ldr	r3, [r7, #28]
 800482a:	4413      	add	r3, r2
 800482c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004830:	691a      	ldr	r2, [r3, #16]
 8004832:	8afb      	ldrh	r3, [r7, #22]
 8004834:	04d9      	lsls	r1, r3, #19
 8004836:	4b38      	ldr	r3, [pc, #224]	@ (8004918 <USB_EPStartXfer+0x538>)
 8004838:	400b      	ands	r3, r1
 800483a:	69b9      	ldr	r1, [r7, #24]
 800483c:	0148      	lsls	r0, r1, #5
 800483e:	69f9      	ldr	r1, [r7, #28]
 8004840:	4401      	add	r1, r0
 8004842:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004846:	4313      	orrs	r3, r2
 8004848:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800484a:	69bb      	ldr	r3, [r7, #24]
 800484c:	015a      	lsls	r2, r3, #5
 800484e:	69fb      	ldr	r3, [r7, #28]
 8004850:	4413      	add	r3, r2
 8004852:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004856:	691a      	ldr	r2, [r3, #16]
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	6a1b      	ldr	r3, [r3, #32]
 800485c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004860:	69b9      	ldr	r1, [r7, #24]
 8004862:	0148      	lsls	r0, r1, #5
 8004864:	69f9      	ldr	r1, [r7, #28]
 8004866:	4401      	add	r1, r0
 8004868:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800486c:	4313      	orrs	r3, r2
 800486e:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8004870:	79fb      	ldrb	r3, [r7, #7]
 8004872:	2b01      	cmp	r3, #1
 8004874:	d10d      	bne.n	8004892 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	68db      	ldr	r3, [r3, #12]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d009      	beq.n	8004892 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	68d9      	ldr	r1, [r3, #12]
 8004882:	69bb      	ldr	r3, [r7, #24]
 8004884:	015a      	lsls	r2, r3, #5
 8004886:	69fb      	ldr	r3, [r7, #28]
 8004888:	4413      	add	r3, r2
 800488a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800488e:	460a      	mov	r2, r1
 8004890:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004892:	68bb      	ldr	r3, [r7, #8]
 8004894:	791b      	ldrb	r3, [r3, #4]
 8004896:	2b01      	cmp	r3, #1
 8004898:	d128      	bne.n	80048ec <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800489a:	69fb      	ldr	r3, [r7, #28]
 800489c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80048a0:	689b      	ldr	r3, [r3, #8]
 80048a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d110      	bne.n	80048cc <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80048aa:	69bb      	ldr	r3, [r7, #24]
 80048ac:	015a      	lsls	r2, r3, #5
 80048ae:	69fb      	ldr	r3, [r7, #28]
 80048b0:	4413      	add	r3, r2
 80048b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	69ba      	ldr	r2, [r7, #24]
 80048ba:	0151      	lsls	r1, r2, #5
 80048bc:	69fa      	ldr	r2, [r7, #28]
 80048be:	440a      	add	r2, r1
 80048c0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80048c4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80048c8:	6013      	str	r3, [r2, #0]
 80048ca:	e00f      	b.n	80048ec <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80048cc:	69bb      	ldr	r3, [r7, #24]
 80048ce:	015a      	lsls	r2, r3, #5
 80048d0:	69fb      	ldr	r3, [r7, #28]
 80048d2:	4413      	add	r3, r2
 80048d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	69ba      	ldr	r2, [r7, #24]
 80048dc:	0151      	lsls	r1, r2, #5
 80048de:	69fa      	ldr	r2, [r7, #28]
 80048e0:	440a      	add	r2, r1
 80048e2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80048e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80048ea:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80048ec:	69bb      	ldr	r3, [r7, #24]
 80048ee:	015a      	lsls	r2, r3, #5
 80048f0:	69fb      	ldr	r3, [r7, #28]
 80048f2:	4413      	add	r3, r2
 80048f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	69ba      	ldr	r2, [r7, #24]
 80048fc:	0151      	lsls	r1, r2, #5
 80048fe:	69fa      	ldr	r2, [r7, #28]
 8004900:	440a      	add	r2, r1
 8004902:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004906:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800490a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800490c:	2300      	movs	r3, #0
}
 800490e:	4618      	mov	r0, r3
 8004910:	3720      	adds	r7, #32
 8004912:	46bd      	mov	sp, r7
 8004914:	bd80      	pop	{r7, pc}
 8004916:	bf00      	nop
 8004918:	1ff80000 	.word	0x1ff80000

0800491c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800491c:	b480      	push	{r7}
 800491e:	b087      	sub	sp, #28
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
 8004924:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004926:	2300      	movs	r3, #0
 8004928:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800492a:	2300      	movs	r3, #0
 800492c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	785b      	ldrb	r3, [r3, #1]
 8004936:	2b01      	cmp	r3, #1
 8004938:	d14a      	bne.n	80049d0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	781b      	ldrb	r3, [r3, #0]
 800493e:	015a      	lsls	r2, r3, #5
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	4413      	add	r3, r2
 8004944:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800494e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004952:	f040 8086 	bne.w	8004a62 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	781b      	ldrb	r3, [r3, #0]
 800495a:	015a      	lsls	r2, r3, #5
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	4413      	add	r3, r2
 8004960:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	683a      	ldr	r2, [r7, #0]
 8004968:	7812      	ldrb	r2, [r2, #0]
 800496a:	0151      	lsls	r1, r2, #5
 800496c:	693a      	ldr	r2, [r7, #16]
 800496e:	440a      	add	r2, r1
 8004970:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004974:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004978:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	781b      	ldrb	r3, [r3, #0]
 800497e:	015a      	lsls	r2, r3, #5
 8004980:	693b      	ldr	r3, [r7, #16]
 8004982:	4413      	add	r3, r2
 8004984:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	683a      	ldr	r2, [r7, #0]
 800498c:	7812      	ldrb	r2, [r2, #0]
 800498e:	0151      	lsls	r1, r2, #5
 8004990:	693a      	ldr	r2, [r7, #16]
 8004992:	440a      	add	r2, r1
 8004994:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004998:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800499c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	3301      	adds	r3, #1
 80049a2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	f242 7210 	movw	r2, #10000	@ 0x2710
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d902      	bls.n	80049b4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	75fb      	strb	r3, [r7, #23]
          break;
 80049b2:	e056      	b.n	8004a62 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	781b      	ldrb	r3, [r3, #0]
 80049b8:	015a      	lsls	r2, r3, #5
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	4413      	add	r3, r2
 80049be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80049c8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80049cc:	d0e7      	beq.n	800499e <USB_EPStopXfer+0x82>
 80049ce:	e048      	b.n	8004a62 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	781b      	ldrb	r3, [r3, #0]
 80049d4:	015a      	lsls	r2, r3, #5
 80049d6:	693b      	ldr	r3, [r7, #16]
 80049d8:	4413      	add	r3, r2
 80049da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80049e4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80049e8:	d13b      	bne.n	8004a62 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	781b      	ldrb	r3, [r3, #0]
 80049ee:	015a      	lsls	r2, r3, #5
 80049f0:	693b      	ldr	r3, [r7, #16]
 80049f2:	4413      	add	r3, r2
 80049f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	683a      	ldr	r2, [r7, #0]
 80049fc:	7812      	ldrb	r2, [r2, #0]
 80049fe:	0151      	lsls	r1, r2, #5
 8004a00:	693a      	ldr	r2, [r7, #16]
 8004a02:	440a      	add	r2, r1
 8004a04:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004a08:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004a0c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	781b      	ldrb	r3, [r3, #0]
 8004a12:	015a      	lsls	r2, r3, #5
 8004a14:	693b      	ldr	r3, [r7, #16]
 8004a16:	4413      	add	r3, r2
 8004a18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	683a      	ldr	r2, [r7, #0]
 8004a20:	7812      	ldrb	r2, [r2, #0]
 8004a22:	0151      	lsls	r1, r2, #5
 8004a24:	693a      	ldr	r2, [r7, #16]
 8004a26:	440a      	add	r2, r1
 8004a28:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004a2c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004a30:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	3301      	adds	r3, #1
 8004a36:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	f242 7210 	movw	r2, #10000	@ 0x2710
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d902      	bls.n	8004a48 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8004a42:	2301      	movs	r3, #1
 8004a44:	75fb      	strb	r3, [r7, #23]
          break;
 8004a46:	e00c      	b.n	8004a62 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	781b      	ldrb	r3, [r3, #0]
 8004a4c:	015a      	lsls	r2, r3, #5
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	4413      	add	r3, r2
 8004a52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004a5c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004a60:	d0e7      	beq.n	8004a32 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8004a62:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a64:	4618      	mov	r0, r3
 8004a66:	371c      	adds	r7, #28
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6e:	4770      	bx	lr

08004a70 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004a70:	b480      	push	{r7}
 8004a72:	b089      	sub	sp, #36	@ 0x24
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	60f8      	str	r0, [r7, #12]
 8004a78:	60b9      	str	r1, [r7, #8]
 8004a7a:	4611      	mov	r1, r2
 8004a7c:	461a      	mov	r2, r3
 8004a7e:	460b      	mov	r3, r1
 8004a80:	71fb      	strb	r3, [r7, #7]
 8004a82:	4613      	mov	r3, r2
 8004a84:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004a8e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d123      	bne.n	8004ade <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004a96:	88bb      	ldrh	r3, [r7, #4]
 8004a98:	3303      	adds	r3, #3
 8004a9a:	089b      	lsrs	r3, r3, #2
 8004a9c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	61bb      	str	r3, [r7, #24]
 8004aa2:	e018      	b.n	8004ad6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004aa4:	79fb      	ldrb	r3, [r7, #7]
 8004aa6:	031a      	lsls	r2, r3, #12
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	4413      	add	r3, r2
 8004aac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004ab0:	461a      	mov	r2, r3
 8004ab2:	69fb      	ldr	r3, [r7, #28]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004ab8:	69fb      	ldr	r3, [r7, #28]
 8004aba:	3301      	adds	r3, #1
 8004abc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004abe:	69fb      	ldr	r3, [r7, #28]
 8004ac0:	3301      	adds	r3, #1
 8004ac2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004ac4:	69fb      	ldr	r3, [r7, #28]
 8004ac6:	3301      	adds	r3, #1
 8004ac8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004aca:	69fb      	ldr	r3, [r7, #28]
 8004acc:	3301      	adds	r3, #1
 8004ace:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004ad0:	69bb      	ldr	r3, [r7, #24]
 8004ad2:	3301      	adds	r3, #1
 8004ad4:	61bb      	str	r3, [r7, #24]
 8004ad6:	69ba      	ldr	r2, [r7, #24]
 8004ad8:	693b      	ldr	r3, [r7, #16]
 8004ada:	429a      	cmp	r2, r3
 8004adc:	d3e2      	bcc.n	8004aa4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004ade:	2300      	movs	r3, #0
}
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	3724      	adds	r7, #36	@ 0x24
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aea:	4770      	bx	lr

08004aec <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004aec:	b480      	push	{r7}
 8004aee:	b08b      	sub	sp, #44	@ 0x2c
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	60f8      	str	r0, [r7, #12]
 8004af4:	60b9      	str	r1, [r7, #8]
 8004af6:	4613      	mov	r3, r2
 8004af8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004b02:	88fb      	ldrh	r3, [r7, #6]
 8004b04:	089b      	lsrs	r3, r3, #2
 8004b06:	b29b      	uxth	r3, r3
 8004b08:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004b0a:	88fb      	ldrh	r3, [r7, #6]
 8004b0c:	f003 0303 	and.w	r3, r3, #3
 8004b10:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004b12:	2300      	movs	r3, #0
 8004b14:	623b      	str	r3, [r7, #32]
 8004b16:	e014      	b.n	8004b42 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004b18:	69bb      	ldr	r3, [r7, #24]
 8004b1a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004b1e:	681a      	ldr	r2, [r3, #0]
 8004b20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b22:	601a      	str	r2, [r3, #0]
    pDest++;
 8004b24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b26:	3301      	adds	r3, #1
 8004b28:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b2c:	3301      	adds	r3, #1
 8004b2e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004b30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b32:	3301      	adds	r3, #1
 8004b34:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b38:	3301      	adds	r3, #1
 8004b3a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8004b3c:	6a3b      	ldr	r3, [r7, #32]
 8004b3e:	3301      	adds	r3, #1
 8004b40:	623b      	str	r3, [r7, #32]
 8004b42:	6a3a      	ldr	r2, [r7, #32]
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	429a      	cmp	r2, r3
 8004b48:	d3e6      	bcc.n	8004b18 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004b4a:	8bfb      	ldrh	r3, [r7, #30]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d01e      	beq.n	8004b8e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004b50:	2300      	movs	r3, #0
 8004b52:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004b54:	69bb      	ldr	r3, [r7, #24]
 8004b56:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004b5a:	461a      	mov	r2, r3
 8004b5c:	f107 0310 	add.w	r3, r7, #16
 8004b60:	6812      	ldr	r2, [r2, #0]
 8004b62:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004b64:	693a      	ldr	r2, [r7, #16]
 8004b66:	6a3b      	ldr	r3, [r7, #32]
 8004b68:	b2db      	uxtb	r3, r3
 8004b6a:	00db      	lsls	r3, r3, #3
 8004b6c:	fa22 f303 	lsr.w	r3, r2, r3
 8004b70:	b2da      	uxtb	r2, r3
 8004b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b74:	701a      	strb	r2, [r3, #0]
      i++;
 8004b76:	6a3b      	ldr	r3, [r7, #32]
 8004b78:	3301      	adds	r3, #1
 8004b7a:	623b      	str	r3, [r7, #32]
      pDest++;
 8004b7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b7e:	3301      	adds	r3, #1
 8004b80:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8004b82:	8bfb      	ldrh	r3, [r7, #30]
 8004b84:	3b01      	subs	r3, #1
 8004b86:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004b88:	8bfb      	ldrh	r3, [r7, #30]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d1ea      	bne.n	8004b64 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004b90:	4618      	mov	r0, r3
 8004b92:	372c      	adds	r7, #44	@ 0x2c
 8004b94:	46bd      	mov	sp, r7
 8004b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9a:	4770      	bx	lr

08004b9c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	b085      	sub	sp, #20
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
 8004ba4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	781b      	ldrb	r3, [r3, #0]
 8004bae:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	785b      	ldrb	r3, [r3, #1]
 8004bb4:	2b01      	cmp	r3, #1
 8004bb6:	d12c      	bne.n	8004c12 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	015a      	lsls	r2, r3, #5
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	4413      	add	r3, r2
 8004bc0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	db12      	blt.n	8004bf0 <USB_EPSetStall+0x54>
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d00f      	beq.n	8004bf0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	015a      	lsls	r2, r3, #5
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	4413      	add	r3, r2
 8004bd8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	68ba      	ldr	r2, [r7, #8]
 8004be0:	0151      	lsls	r1, r2, #5
 8004be2:	68fa      	ldr	r2, [r7, #12]
 8004be4:	440a      	add	r2, r1
 8004be6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004bea:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004bee:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	015a      	lsls	r2, r3, #5
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	4413      	add	r3, r2
 8004bf8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	68ba      	ldr	r2, [r7, #8]
 8004c00:	0151      	lsls	r1, r2, #5
 8004c02:	68fa      	ldr	r2, [r7, #12]
 8004c04:	440a      	add	r2, r1
 8004c06:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004c0a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004c0e:	6013      	str	r3, [r2, #0]
 8004c10:	e02b      	b.n	8004c6a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	015a      	lsls	r2, r3, #5
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	4413      	add	r3, r2
 8004c1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	db12      	blt.n	8004c4a <USB_EPSetStall+0xae>
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d00f      	beq.n	8004c4a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	015a      	lsls	r2, r3, #5
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	4413      	add	r3, r2
 8004c32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	68ba      	ldr	r2, [r7, #8]
 8004c3a:	0151      	lsls	r1, r2, #5
 8004c3c:	68fa      	ldr	r2, [r7, #12]
 8004c3e:	440a      	add	r2, r1
 8004c40:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004c44:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004c48:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	015a      	lsls	r2, r3, #5
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	4413      	add	r3, r2
 8004c52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	68ba      	ldr	r2, [r7, #8]
 8004c5a:	0151      	lsls	r1, r2, #5
 8004c5c:	68fa      	ldr	r2, [r7, #12]
 8004c5e:	440a      	add	r2, r1
 8004c60:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004c64:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004c68:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004c6a:	2300      	movs	r3, #0
}
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	3714      	adds	r7, #20
 8004c70:	46bd      	mov	sp, r7
 8004c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c76:	4770      	bx	lr

08004c78 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	b085      	sub	sp, #20
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
 8004c80:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	781b      	ldrb	r3, [r3, #0]
 8004c8a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	785b      	ldrb	r3, [r3, #1]
 8004c90:	2b01      	cmp	r3, #1
 8004c92:	d128      	bne.n	8004ce6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	015a      	lsls	r2, r3, #5
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	4413      	add	r3, r2
 8004c9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	68ba      	ldr	r2, [r7, #8]
 8004ca4:	0151      	lsls	r1, r2, #5
 8004ca6:	68fa      	ldr	r2, [r7, #12]
 8004ca8:	440a      	add	r2, r1
 8004caa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004cae:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004cb2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	791b      	ldrb	r3, [r3, #4]
 8004cb8:	2b03      	cmp	r3, #3
 8004cba:	d003      	beq.n	8004cc4 <USB_EPClearStall+0x4c>
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	791b      	ldrb	r3, [r3, #4]
 8004cc0:	2b02      	cmp	r3, #2
 8004cc2:	d138      	bne.n	8004d36 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	015a      	lsls	r2, r3, #5
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	4413      	add	r3, r2
 8004ccc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	68ba      	ldr	r2, [r7, #8]
 8004cd4:	0151      	lsls	r1, r2, #5
 8004cd6:	68fa      	ldr	r2, [r7, #12]
 8004cd8:	440a      	add	r2, r1
 8004cda:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004cde:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ce2:	6013      	str	r3, [r2, #0]
 8004ce4:	e027      	b.n	8004d36 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	015a      	lsls	r2, r3, #5
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	4413      	add	r3, r2
 8004cee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	68ba      	ldr	r2, [r7, #8]
 8004cf6:	0151      	lsls	r1, r2, #5
 8004cf8:	68fa      	ldr	r2, [r7, #12]
 8004cfa:	440a      	add	r2, r1
 8004cfc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004d00:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004d04:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	791b      	ldrb	r3, [r3, #4]
 8004d0a:	2b03      	cmp	r3, #3
 8004d0c:	d003      	beq.n	8004d16 <USB_EPClearStall+0x9e>
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	791b      	ldrb	r3, [r3, #4]
 8004d12:	2b02      	cmp	r3, #2
 8004d14:	d10f      	bne.n	8004d36 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	015a      	lsls	r2, r3, #5
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	4413      	add	r3, r2
 8004d1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	68ba      	ldr	r2, [r7, #8]
 8004d26:	0151      	lsls	r1, r2, #5
 8004d28:	68fa      	ldr	r2, [r7, #12]
 8004d2a:	440a      	add	r2, r1
 8004d2c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004d30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d34:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004d36:	2300      	movs	r3, #0
}
 8004d38:	4618      	mov	r0, r3
 8004d3a:	3714      	adds	r7, #20
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d42:	4770      	bx	lr

08004d44 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004d44:	b480      	push	{r7}
 8004d46:	b085      	sub	sp, #20
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
 8004d4c:	460b      	mov	r3, r1
 8004d4e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	68fa      	ldr	r2, [r7, #12]
 8004d5e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004d62:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8004d66:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d6e:	681a      	ldr	r2, [r3, #0]
 8004d70:	78fb      	ldrb	r3, [r7, #3]
 8004d72:	011b      	lsls	r3, r3, #4
 8004d74:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8004d78:	68f9      	ldr	r1, [r7, #12]
 8004d7a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004d82:	2300      	movs	r3, #0
}
 8004d84:	4618      	mov	r0, r3
 8004d86:	3714      	adds	r7, #20
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8e:	4770      	bx	lr

08004d90 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004d90:	b480      	push	{r7}
 8004d92:	b085      	sub	sp, #20
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	68fa      	ldr	r2, [r7, #12]
 8004da6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004daa:	f023 0303 	bic.w	r3, r3, #3
 8004dae:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	68fa      	ldr	r2, [r7, #12]
 8004dba:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004dbe:	f023 0302 	bic.w	r3, r3, #2
 8004dc2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004dc4:	2300      	movs	r3, #0
}
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	3714      	adds	r7, #20
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd0:	4770      	bx	lr

08004dd2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004dd2:	b480      	push	{r7}
 8004dd4:	b085      	sub	sp, #20
 8004dd6:	af00      	add	r7, sp, #0
 8004dd8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	68fa      	ldr	r2, [r7, #12]
 8004de8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004dec:	f023 0303 	bic.w	r3, r3, #3
 8004df0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	68fa      	ldr	r2, [r7, #12]
 8004dfc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004e00:	f043 0302 	orr.w	r3, r3, #2
 8004e04:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004e06:	2300      	movs	r3, #0
}
 8004e08:	4618      	mov	r0, r3
 8004e0a:	3714      	adds	r7, #20
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e12:	4770      	bx	lr

08004e14 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8004e14:	b480      	push	{r7}
 8004e16:	b085      	sub	sp, #20
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	695b      	ldr	r3, [r3, #20]
 8004e20:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	699b      	ldr	r3, [r3, #24]
 8004e26:	68fa      	ldr	r2, [r7, #12]
 8004e28:	4013      	ands	r3, r2
 8004e2a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
}
 8004e2e:	4618      	mov	r0, r3
 8004e30:	3714      	adds	r7, #20
 8004e32:	46bd      	mov	sp, r7
 8004e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e38:	4770      	bx	lr

08004e3a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8004e3a:	b480      	push	{r7}
 8004e3c:	b085      	sub	sp, #20
 8004e3e:	af00      	add	r7, sp, #0
 8004e40:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e4c:	699b      	ldr	r3, [r3, #24]
 8004e4e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e56:	69db      	ldr	r3, [r3, #28]
 8004e58:	68ba      	ldr	r2, [r7, #8]
 8004e5a:	4013      	ands	r3, r2
 8004e5c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	0c1b      	lsrs	r3, r3, #16
}
 8004e62:	4618      	mov	r0, r3
 8004e64:	3714      	adds	r7, #20
 8004e66:	46bd      	mov	sp, r7
 8004e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6c:	4770      	bx	lr

08004e6e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8004e6e:	b480      	push	{r7}
 8004e70:	b085      	sub	sp, #20
 8004e72:	af00      	add	r7, sp, #0
 8004e74:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e80:	699b      	ldr	r3, [r3, #24]
 8004e82:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e8a:	69db      	ldr	r3, [r3, #28]
 8004e8c:	68ba      	ldr	r2, [r7, #8]
 8004e8e:	4013      	ands	r3, r2
 8004e90:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	b29b      	uxth	r3, r3
}
 8004e96:	4618      	mov	r0, r3
 8004e98:	3714      	adds	r7, #20
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea0:	4770      	bx	lr

08004ea2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004ea2:	b480      	push	{r7}
 8004ea4:	b085      	sub	sp, #20
 8004ea6:	af00      	add	r7, sp, #0
 8004ea8:	6078      	str	r0, [r7, #4]
 8004eaa:	460b      	mov	r3, r1
 8004eac:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004eb2:	78fb      	ldrb	r3, [r7, #3]
 8004eb4:	015a      	lsls	r2, r3, #5
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	4413      	add	r3, r2
 8004eba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ebe:	689b      	ldr	r3, [r3, #8]
 8004ec0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ec8:	695b      	ldr	r3, [r3, #20]
 8004eca:	68ba      	ldr	r2, [r7, #8]
 8004ecc:	4013      	ands	r3, r2
 8004ece:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004ed0:	68bb      	ldr	r3, [r7, #8]
}
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	3714      	adds	r7, #20
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004edc:	4770      	bx	lr

08004ede <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004ede:	b480      	push	{r7}
 8004ee0:	b087      	sub	sp, #28
 8004ee2:	af00      	add	r7, sp, #0
 8004ee4:	6078      	str	r0, [r7, #4]
 8004ee6:	460b      	mov	r3, r1
 8004ee8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ef4:	691b      	ldr	r3, [r3, #16]
 8004ef6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004efe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f00:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004f02:	78fb      	ldrb	r3, [r7, #3]
 8004f04:	f003 030f 	and.w	r3, r3, #15
 8004f08:	68fa      	ldr	r2, [r7, #12]
 8004f0a:	fa22 f303 	lsr.w	r3, r2, r3
 8004f0e:	01db      	lsls	r3, r3, #7
 8004f10:	b2db      	uxtb	r3, r3
 8004f12:	693a      	ldr	r2, [r7, #16]
 8004f14:	4313      	orrs	r3, r2
 8004f16:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004f18:	78fb      	ldrb	r3, [r7, #3]
 8004f1a:	015a      	lsls	r2, r3, #5
 8004f1c:	697b      	ldr	r3, [r7, #20]
 8004f1e:	4413      	add	r3, r2
 8004f20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f24:	689b      	ldr	r3, [r3, #8]
 8004f26:	693a      	ldr	r2, [r7, #16]
 8004f28:	4013      	ands	r3, r2
 8004f2a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004f2c:	68bb      	ldr	r3, [r7, #8]
}
 8004f2e:	4618      	mov	r0, r3
 8004f30:	371c      	adds	r7, #28
 8004f32:	46bd      	mov	sp, r7
 8004f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f38:	4770      	bx	lr

08004f3a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8004f3a:	b480      	push	{r7}
 8004f3c:	b083      	sub	sp, #12
 8004f3e:	af00      	add	r7, sp, #0
 8004f40:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	695b      	ldr	r3, [r3, #20]
 8004f46:	f003 0301 	and.w	r3, r3, #1
}
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	370c      	adds	r7, #12
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f54:	4770      	bx	lr

08004f56 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8004f56:	b480      	push	{r7}
 8004f58:	b085      	sub	sp, #20
 8004f5a:	af00      	add	r7, sp, #0
 8004f5c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	68fa      	ldr	r2, [r7, #12]
 8004f6c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004f70:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004f74:	f023 0307 	bic.w	r3, r3, #7
 8004f78:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	68fa      	ldr	r2, [r7, #12]
 8004f84:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004f88:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f8c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004f8e:	2300      	movs	r3, #0
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	3714      	adds	r7, #20
 8004f94:	46bd      	mov	sp, r7
 8004f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9a:	4770      	bx	lr

08004f9c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	b087      	sub	sp, #28
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	60f8      	str	r0, [r7, #12]
 8004fa4:	460b      	mov	r3, r1
 8004fa6:	607a      	str	r2, [r7, #4]
 8004fa8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	333c      	adds	r3, #60	@ 0x3c
 8004fb2:	3304      	adds	r3, #4
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004fb8:	693b      	ldr	r3, [r7, #16]
 8004fba:	4a26      	ldr	r2, [pc, #152]	@ (8005054 <USB_EP0_OutStart+0xb8>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d90a      	bls.n	8004fd6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004fcc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004fd0:	d101      	bne.n	8004fd6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	e037      	b.n	8005046 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004fd6:	697b      	ldr	r3, [r7, #20]
 8004fd8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004fdc:	461a      	mov	r2, r3
 8004fde:	2300      	movs	r3, #0
 8004fe0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004fe2:	697b      	ldr	r3, [r7, #20]
 8004fe4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004fe8:	691b      	ldr	r3, [r3, #16]
 8004fea:	697a      	ldr	r2, [r7, #20]
 8004fec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004ff0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004ff4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004ff6:	697b      	ldr	r3, [r7, #20]
 8004ff8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ffc:	691b      	ldr	r3, [r3, #16]
 8004ffe:	697a      	ldr	r2, [r7, #20]
 8005000:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005004:	f043 0318 	orr.w	r3, r3, #24
 8005008:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800500a:	697b      	ldr	r3, [r7, #20]
 800500c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005010:	691b      	ldr	r3, [r3, #16]
 8005012:	697a      	ldr	r2, [r7, #20]
 8005014:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005018:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800501c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800501e:	7afb      	ldrb	r3, [r7, #11]
 8005020:	2b01      	cmp	r3, #1
 8005022:	d10f      	bne.n	8005044 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800502a:	461a      	mov	r2, r3
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	697a      	ldr	r2, [r7, #20]
 800503a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800503e:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8005042:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005044:	2300      	movs	r3, #0
}
 8005046:	4618      	mov	r0, r3
 8005048:	371c      	adds	r7, #28
 800504a:	46bd      	mov	sp, r7
 800504c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005050:	4770      	bx	lr
 8005052:	bf00      	nop
 8005054:	4f54300a 	.word	0x4f54300a

08005058 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005058:	b480      	push	{r7}
 800505a:	b085      	sub	sp, #20
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005060:	2300      	movs	r3, #0
 8005062:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	3301      	adds	r3, #1
 8005068:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005070:	d901      	bls.n	8005076 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005072:	2303      	movs	r3, #3
 8005074:	e01b      	b.n	80050ae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	691b      	ldr	r3, [r3, #16]
 800507a:	2b00      	cmp	r3, #0
 800507c:	daf2      	bge.n	8005064 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800507e:	2300      	movs	r3, #0
 8005080:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	691b      	ldr	r3, [r3, #16]
 8005086:	f043 0201 	orr.w	r2, r3, #1
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	3301      	adds	r3, #1
 8005092:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800509a:	d901      	bls.n	80050a0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800509c:	2303      	movs	r3, #3
 800509e:	e006      	b.n	80050ae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	691b      	ldr	r3, [r3, #16]
 80050a4:	f003 0301 	and.w	r3, r3, #1
 80050a8:	2b01      	cmp	r3, #1
 80050aa:	d0f0      	beq.n	800508e <USB_CoreReset+0x36>

  return HAL_OK;
 80050ac:	2300      	movs	r3, #0
}
 80050ae:	4618      	mov	r0, r3
 80050b0:	3714      	adds	r7, #20
 80050b2:	46bd      	mov	sp, r7
 80050b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b8:	4770      	bx	lr
	...

080050bc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b084      	sub	sp, #16
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
 80050c4:	460b      	mov	r3, r1
 80050c6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80050c8:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80050cc:	f004 fd52 	bl	8009b74 <USBD_static_malloc>
 80050d0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d109      	bne.n	80050ec <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	32b0      	adds	r2, #176	@ 0xb0
 80050e2:	2100      	movs	r1, #0
 80050e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80050e8:	2302      	movs	r3, #2
 80050ea:	e0d4      	b.n	8005296 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80050ec:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 80050f0:	2100      	movs	r1, #0
 80050f2:	68f8      	ldr	r0, [r7, #12]
 80050f4:	f004 fd82 	bl	8009bfc <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	32b0      	adds	r2, #176	@ 0xb0
 8005102:	68f9      	ldr	r1, [r7, #12]
 8005104:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	32b0      	adds	r2, #176	@ 0xb0
 8005112:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	7c1b      	ldrb	r3, [r3, #16]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d138      	bne.n	8005196 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005124:	4b5e      	ldr	r3, [pc, #376]	@ (80052a0 <USBD_CDC_Init+0x1e4>)
 8005126:	7819      	ldrb	r1, [r3, #0]
 8005128:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800512c:	2202      	movs	r2, #2
 800512e:	6878      	ldr	r0, [r7, #4]
 8005130:	f004 fbfd 	bl	800992e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005134:	4b5a      	ldr	r3, [pc, #360]	@ (80052a0 <USBD_CDC_Init+0x1e4>)
 8005136:	781b      	ldrb	r3, [r3, #0]
 8005138:	f003 020f 	and.w	r2, r3, #15
 800513c:	6879      	ldr	r1, [r7, #4]
 800513e:	4613      	mov	r3, r2
 8005140:	009b      	lsls	r3, r3, #2
 8005142:	4413      	add	r3, r2
 8005144:	009b      	lsls	r3, r3, #2
 8005146:	440b      	add	r3, r1
 8005148:	3324      	adds	r3, #36	@ 0x24
 800514a:	2201      	movs	r2, #1
 800514c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800514e:	4b55      	ldr	r3, [pc, #340]	@ (80052a4 <USBD_CDC_Init+0x1e8>)
 8005150:	7819      	ldrb	r1, [r3, #0]
 8005152:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005156:	2202      	movs	r2, #2
 8005158:	6878      	ldr	r0, [r7, #4]
 800515a:	f004 fbe8 	bl	800992e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800515e:	4b51      	ldr	r3, [pc, #324]	@ (80052a4 <USBD_CDC_Init+0x1e8>)
 8005160:	781b      	ldrb	r3, [r3, #0]
 8005162:	f003 020f 	and.w	r2, r3, #15
 8005166:	6879      	ldr	r1, [r7, #4]
 8005168:	4613      	mov	r3, r2
 800516a:	009b      	lsls	r3, r3, #2
 800516c:	4413      	add	r3, r2
 800516e:	009b      	lsls	r3, r3, #2
 8005170:	440b      	add	r3, r1
 8005172:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005176:	2201      	movs	r2, #1
 8005178:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800517a:	4b4b      	ldr	r3, [pc, #300]	@ (80052a8 <USBD_CDC_Init+0x1ec>)
 800517c:	781b      	ldrb	r3, [r3, #0]
 800517e:	f003 020f 	and.w	r2, r3, #15
 8005182:	6879      	ldr	r1, [r7, #4]
 8005184:	4613      	mov	r3, r2
 8005186:	009b      	lsls	r3, r3, #2
 8005188:	4413      	add	r3, r2
 800518a:	009b      	lsls	r3, r3, #2
 800518c:	440b      	add	r3, r1
 800518e:	3326      	adds	r3, #38	@ 0x26
 8005190:	2210      	movs	r2, #16
 8005192:	801a      	strh	r2, [r3, #0]
 8005194:	e035      	b.n	8005202 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005196:	4b42      	ldr	r3, [pc, #264]	@ (80052a0 <USBD_CDC_Init+0x1e4>)
 8005198:	7819      	ldrb	r1, [r3, #0]
 800519a:	2340      	movs	r3, #64	@ 0x40
 800519c:	2202      	movs	r2, #2
 800519e:	6878      	ldr	r0, [r7, #4]
 80051a0:	f004 fbc5 	bl	800992e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80051a4:	4b3e      	ldr	r3, [pc, #248]	@ (80052a0 <USBD_CDC_Init+0x1e4>)
 80051a6:	781b      	ldrb	r3, [r3, #0]
 80051a8:	f003 020f 	and.w	r2, r3, #15
 80051ac:	6879      	ldr	r1, [r7, #4]
 80051ae:	4613      	mov	r3, r2
 80051b0:	009b      	lsls	r3, r3, #2
 80051b2:	4413      	add	r3, r2
 80051b4:	009b      	lsls	r3, r3, #2
 80051b6:	440b      	add	r3, r1
 80051b8:	3324      	adds	r3, #36	@ 0x24
 80051ba:	2201      	movs	r2, #1
 80051bc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80051be:	4b39      	ldr	r3, [pc, #228]	@ (80052a4 <USBD_CDC_Init+0x1e8>)
 80051c0:	7819      	ldrb	r1, [r3, #0]
 80051c2:	2340      	movs	r3, #64	@ 0x40
 80051c4:	2202      	movs	r2, #2
 80051c6:	6878      	ldr	r0, [r7, #4]
 80051c8:	f004 fbb1 	bl	800992e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80051cc:	4b35      	ldr	r3, [pc, #212]	@ (80052a4 <USBD_CDC_Init+0x1e8>)
 80051ce:	781b      	ldrb	r3, [r3, #0]
 80051d0:	f003 020f 	and.w	r2, r3, #15
 80051d4:	6879      	ldr	r1, [r7, #4]
 80051d6:	4613      	mov	r3, r2
 80051d8:	009b      	lsls	r3, r3, #2
 80051da:	4413      	add	r3, r2
 80051dc:	009b      	lsls	r3, r3, #2
 80051de:	440b      	add	r3, r1
 80051e0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80051e4:	2201      	movs	r2, #1
 80051e6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80051e8:	4b2f      	ldr	r3, [pc, #188]	@ (80052a8 <USBD_CDC_Init+0x1ec>)
 80051ea:	781b      	ldrb	r3, [r3, #0]
 80051ec:	f003 020f 	and.w	r2, r3, #15
 80051f0:	6879      	ldr	r1, [r7, #4]
 80051f2:	4613      	mov	r3, r2
 80051f4:	009b      	lsls	r3, r3, #2
 80051f6:	4413      	add	r3, r2
 80051f8:	009b      	lsls	r3, r3, #2
 80051fa:	440b      	add	r3, r1
 80051fc:	3326      	adds	r3, #38	@ 0x26
 80051fe:	2210      	movs	r2, #16
 8005200:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005202:	4b29      	ldr	r3, [pc, #164]	@ (80052a8 <USBD_CDC_Init+0x1ec>)
 8005204:	7819      	ldrb	r1, [r3, #0]
 8005206:	2308      	movs	r3, #8
 8005208:	2203      	movs	r2, #3
 800520a:	6878      	ldr	r0, [r7, #4]
 800520c:	f004 fb8f 	bl	800992e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8005210:	4b25      	ldr	r3, [pc, #148]	@ (80052a8 <USBD_CDC_Init+0x1ec>)
 8005212:	781b      	ldrb	r3, [r3, #0]
 8005214:	f003 020f 	and.w	r2, r3, #15
 8005218:	6879      	ldr	r1, [r7, #4]
 800521a:	4613      	mov	r3, r2
 800521c:	009b      	lsls	r3, r3, #2
 800521e:	4413      	add	r3, r2
 8005220:	009b      	lsls	r3, r3, #2
 8005222:	440b      	add	r3, r1
 8005224:	3324      	adds	r3, #36	@ 0x24
 8005226:	2201      	movs	r2, #1
 8005228:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	2200      	movs	r2, #0
 800522e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005238:	687a      	ldr	r2, [r7, #4]
 800523a:	33b0      	adds	r3, #176	@ 0xb0
 800523c:	009b      	lsls	r3, r3, #2
 800523e:	4413      	add	r3, r2
 8005240:	685b      	ldr	r3, [r3, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	2200      	movs	r2, #0
 800524a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	2200      	movs	r2, #0
 8005252:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800525c:	2b00      	cmp	r3, #0
 800525e:	d101      	bne.n	8005264 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8005260:	2302      	movs	r3, #2
 8005262:	e018      	b.n	8005296 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	7c1b      	ldrb	r3, [r3, #16]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d10a      	bne.n	8005282 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800526c:	4b0d      	ldr	r3, [pc, #52]	@ (80052a4 <USBD_CDC_Init+0x1e8>)
 800526e:	7819      	ldrb	r1, [r3, #0]
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005276:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800527a:	6878      	ldr	r0, [r7, #4]
 800527c:	f004 fc46 	bl	8009b0c <USBD_LL_PrepareReceive>
 8005280:	e008      	b.n	8005294 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005282:	4b08      	ldr	r3, [pc, #32]	@ (80052a4 <USBD_CDC_Init+0x1e8>)
 8005284:	7819      	ldrb	r1, [r3, #0]
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800528c:	2340      	movs	r3, #64	@ 0x40
 800528e:	6878      	ldr	r0, [r7, #4]
 8005290:	f004 fc3c 	bl	8009b0c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005294:	2300      	movs	r3, #0
}
 8005296:	4618      	mov	r0, r3
 8005298:	3710      	adds	r7, #16
 800529a:	46bd      	mov	sp, r7
 800529c:	bd80      	pop	{r7, pc}
 800529e:	bf00      	nop
 80052a0:	20000093 	.word	0x20000093
 80052a4:	20000094 	.word	0x20000094
 80052a8:	20000095 	.word	0x20000095

080052ac <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b082      	sub	sp, #8
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
 80052b4:	460b      	mov	r3, r1
 80052b6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80052b8:	4b3a      	ldr	r3, [pc, #232]	@ (80053a4 <USBD_CDC_DeInit+0xf8>)
 80052ba:	781b      	ldrb	r3, [r3, #0]
 80052bc:	4619      	mov	r1, r3
 80052be:	6878      	ldr	r0, [r7, #4]
 80052c0:	f004 fb5b 	bl	800997a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80052c4:	4b37      	ldr	r3, [pc, #220]	@ (80053a4 <USBD_CDC_DeInit+0xf8>)
 80052c6:	781b      	ldrb	r3, [r3, #0]
 80052c8:	f003 020f 	and.w	r2, r3, #15
 80052cc:	6879      	ldr	r1, [r7, #4]
 80052ce:	4613      	mov	r3, r2
 80052d0:	009b      	lsls	r3, r3, #2
 80052d2:	4413      	add	r3, r2
 80052d4:	009b      	lsls	r3, r3, #2
 80052d6:	440b      	add	r3, r1
 80052d8:	3324      	adds	r3, #36	@ 0x24
 80052da:	2200      	movs	r2, #0
 80052dc:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80052de:	4b32      	ldr	r3, [pc, #200]	@ (80053a8 <USBD_CDC_DeInit+0xfc>)
 80052e0:	781b      	ldrb	r3, [r3, #0]
 80052e2:	4619      	mov	r1, r3
 80052e4:	6878      	ldr	r0, [r7, #4]
 80052e6:	f004 fb48 	bl	800997a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80052ea:	4b2f      	ldr	r3, [pc, #188]	@ (80053a8 <USBD_CDC_DeInit+0xfc>)
 80052ec:	781b      	ldrb	r3, [r3, #0]
 80052ee:	f003 020f 	and.w	r2, r3, #15
 80052f2:	6879      	ldr	r1, [r7, #4]
 80052f4:	4613      	mov	r3, r2
 80052f6:	009b      	lsls	r3, r3, #2
 80052f8:	4413      	add	r3, r2
 80052fa:	009b      	lsls	r3, r3, #2
 80052fc:	440b      	add	r3, r1
 80052fe:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005302:	2200      	movs	r2, #0
 8005304:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8005306:	4b29      	ldr	r3, [pc, #164]	@ (80053ac <USBD_CDC_DeInit+0x100>)
 8005308:	781b      	ldrb	r3, [r3, #0]
 800530a:	4619      	mov	r1, r3
 800530c:	6878      	ldr	r0, [r7, #4]
 800530e:	f004 fb34 	bl	800997a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8005312:	4b26      	ldr	r3, [pc, #152]	@ (80053ac <USBD_CDC_DeInit+0x100>)
 8005314:	781b      	ldrb	r3, [r3, #0]
 8005316:	f003 020f 	and.w	r2, r3, #15
 800531a:	6879      	ldr	r1, [r7, #4]
 800531c:	4613      	mov	r3, r2
 800531e:	009b      	lsls	r3, r3, #2
 8005320:	4413      	add	r3, r2
 8005322:	009b      	lsls	r3, r3, #2
 8005324:	440b      	add	r3, r1
 8005326:	3324      	adds	r3, #36	@ 0x24
 8005328:	2200      	movs	r2, #0
 800532a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800532c:	4b1f      	ldr	r3, [pc, #124]	@ (80053ac <USBD_CDC_DeInit+0x100>)
 800532e:	781b      	ldrb	r3, [r3, #0]
 8005330:	f003 020f 	and.w	r2, r3, #15
 8005334:	6879      	ldr	r1, [r7, #4]
 8005336:	4613      	mov	r3, r2
 8005338:	009b      	lsls	r3, r3, #2
 800533a:	4413      	add	r3, r2
 800533c:	009b      	lsls	r3, r3, #2
 800533e:	440b      	add	r3, r1
 8005340:	3326      	adds	r3, #38	@ 0x26
 8005342:	2200      	movs	r2, #0
 8005344:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	32b0      	adds	r2, #176	@ 0xb0
 8005350:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d01f      	beq.n	8005398 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800535e:	687a      	ldr	r2, [r7, #4]
 8005360:	33b0      	adds	r3, #176	@ 0xb0
 8005362:	009b      	lsls	r3, r3, #2
 8005364:	4413      	add	r3, r2
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	32b0      	adds	r2, #176	@ 0xb0
 8005376:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800537a:	4618      	mov	r0, r3
 800537c:	f004 fc08 	bl	8009b90 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	32b0      	adds	r2, #176	@ 0xb0
 800538a:	2100      	movs	r1, #0
 800538c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2200      	movs	r2, #0
 8005394:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005398:	2300      	movs	r3, #0
}
 800539a:	4618      	mov	r0, r3
 800539c:	3708      	adds	r7, #8
 800539e:	46bd      	mov	sp, r7
 80053a0:	bd80      	pop	{r7, pc}
 80053a2:	bf00      	nop
 80053a4:	20000093 	.word	0x20000093
 80053a8:	20000094 	.word	0x20000094
 80053ac:	20000095 	.word	0x20000095

080053b0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b086      	sub	sp, #24
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
 80053b8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	32b0      	adds	r2, #176	@ 0xb0
 80053c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053c8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80053ca:	2300      	movs	r3, #0
 80053cc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80053ce:	2300      	movs	r3, #0
 80053d0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80053d2:	2300      	movs	r3, #0
 80053d4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80053d6:	693b      	ldr	r3, [r7, #16]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d101      	bne.n	80053e0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80053dc:	2303      	movs	r3, #3
 80053de:	e0bf      	b.n	8005560 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	781b      	ldrb	r3, [r3, #0]
 80053e4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d050      	beq.n	800548e <USBD_CDC_Setup+0xde>
 80053ec:	2b20      	cmp	r3, #32
 80053ee:	f040 80af 	bne.w	8005550 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	88db      	ldrh	r3, [r3, #6]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d03a      	beq.n	8005470 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	781b      	ldrb	r3, [r3, #0]
 80053fe:	b25b      	sxtb	r3, r3
 8005400:	2b00      	cmp	r3, #0
 8005402:	da1b      	bge.n	800543c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800540a:	687a      	ldr	r2, [r7, #4]
 800540c:	33b0      	adds	r3, #176	@ 0xb0
 800540e:	009b      	lsls	r3, r3, #2
 8005410:	4413      	add	r3, r2
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	689b      	ldr	r3, [r3, #8]
 8005416:	683a      	ldr	r2, [r7, #0]
 8005418:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800541a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800541c:	683a      	ldr	r2, [r7, #0]
 800541e:	88d2      	ldrh	r2, [r2, #6]
 8005420:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	88db      	ldrh	r3, [r3, #6]
 8005426:	2b07      	cmp	r3, #7
 8005428:	bf28      	it	cs
 800542a:	2307      	movcs	r3, #7
 800542c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800542e:	693b      	ldr	r3, [r7, #16]
 8005430:	89fa      	ldrh	r2, [r7, #14]
 8005432:	4619      	mov	r1, r3
 8005434:	6878      	ldr	r0, [r7, #4]
 8005436:	f001 fd53 	bl	8006ee0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800543a:	e090      	b.n	800555e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	785a      	ldrb	r2, [r3, #1]
 8005440:	693b      	ldr	r3, [r7, #16]
 8005442:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	88db      	ldrh	r3, [r3, #6]
 800544a:	2b3f      	cmp	r3, #63	@ 0x3f
 800544c:	d803      	bhi.n	8005456 <USBD_CDC_Setup+0xa6>
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	88db      	ldrh	r3, [r3, #6]
 8005452:	b2da      	uxtb	r2, r3
 8005454:	e000      	b.n	8005458 <USBD_CDC_Setup+0xa8>
 8005456:	2240      	movs	r2, #64	@ 0x40
 8005458:	693b      	ldr	r3, [r7, #16]
 800545a:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800545e:	6939      	ldr	r1, [r7, #16]
 8005460:	693b      	ldr	r3, [r7, #16]
 8005462:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8005466:	461a      	mov	r2, r3
 8005468:	6878      	ldr	r0, [r7, #4]
 800546a:	f001 fd65 	bl	8006f38 <USBD_CtlPrepareRx>
      break;
 800546e:	e076      	b.n	800555e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005476:	687a      	ldr	r2, [r7, #4]
 8005478:	33b0      	adds	r3, #176	@ 0xb0
 800547a:	009b      	lsls	r3, r3, #2
 800547c:	4413      	add	r3, r2
 800547e:	685b      	ldr	r3, [r3, #4]
 8005480:	689b      	ldr	r3, [r3, #8]
 8005482:	683a      	ldr	r2, [r7, #0]
 8005484:	7850      	ldrb	r0, [r2, #1]
 8005486:	2200      	movs	r2, #0
 8005488:	6839      	ldr	r1, [r7, #0]
 800548a:	4798      	blx	r3
      break;
 800548c:	e067      	b.n	800555e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	785b      	ldrb	r3, [r3, #1]
 8005492:	2b0b      	cmp	r3, #11
 8005494:	d851      	bhi.n	800553a <USBD_CDC_Setup+0x18a>
 8005496:	a201      	add	r2, pc, #4	@ (adr r2, 800549c <USBD_CDC_Setup+0xec>)
 8005498:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800549c:	080054cd 	.word	0x080054cd
 80054a0:	08005549 	.word	0x08005549
 80054a4:	0800553b 	.word	0x0800553b
 80054a8:	0800553b 	.word	0x0800553b
 80054ac:	0800553b 	.word	0x0800553b
 80054b0:	0800553b 	.word	0x0800553b
 80054b4:	0800553b 	.word	0x0800553b
 80054b8:	0800553b 	.word	0x0800553b
 80054bc:	0800553b 	.word	0x0800553b
 80054c0:	0800553b 	.word	0x0800553b
 80054c4:	080054f7 	.word	0x080054f7
 80054c8:	08005521 	.word	0x08005521
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80054d2:	b2db      	uxtb	r3, r3
 80054d4:	2b03      	cmp	r3, #3
 80054d6:	d107      	bne.n	80054e8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80054d8:	f107 030a 	add.w	r3, r7, #10
 80054dc:	2202      	movs	r2, #2
 80054de:	4619      	mov	r1, r3
 80054e0:	6878      	ldr	r0, [r7, #4]
 80054e2:	f001 fcfd 	bl	8006ee0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80054e6:	e032      	b.n	800554e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80054e8:	6839      	ldr	r1, [r7, #0]
 80054ea:	6878      	ldr	r0, [r7, #4]
 80054ec:	f001 fc7b 	bl	8006de6 <USBD_CtlError>
            ret = USBD_FAIL;
 80054f0:	2303      	movs	r3, #3
 80054f2:	75fb      	strb	r3, [r7, #23]
          break;
 80054f4:	e02b      	b.n	800554e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80054fc:	b2db      	uxtb	r3, r3
 80054fe:	2b03      	cmp	r3, #3
 8005500:	d107      	bne.n	8005512 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005502:	f107 030d 	add.w	r3, r7, #13
 8005506:	2201      	movs	r2, #1
 8005508:	4619      	mov	r1, r3
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	f001 fce8 	bl	8006ee0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005510:	e01d      	b.n	800554e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005512:	6839      	ldr	r1, [r7, #0]
 8005514:	6878      	ldr	r0, [r7, #4]
 8005516:	f001 fc66 	bl	8006de6 <USBD_CtlError>
            ret = USBD_FAIL;
 800551a:	2303      	movs	r3, #3
 800551c:	75fb      	strb	r3, [r7, #23]
          break;
 800551e:	e016      	b.n	800554e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005526:	b2db      	uxtb	r3, r3
 8005528:	2b03      	cmp	r3, #3
 800552a:	d00f      	beq.n	800554c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800552c:	6839      	ldr	r1, [r7, #0]
 800552e:	6878      	ldr	r0, [r7, #4]
 8005530:	f001 fc59 	bl	8006de6 <USBD_CtlError>
            ret = USBD_FAIL;
 8005534:	2303      	movs	r3, #3
 8005536:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005538:	e008      	b.n	800554c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800553a:	6839      	ldr	r1, [r7, #0]
 800553c:	6878      	ldr	r0, [r7, #4]
 800553e:	f001 fc52 	bl	8006de6 <USBD_CtlError>
          ret = USBD_FAIL;
 8005542:	2303      	movs	r3, #3
 8005544:	75fb      	strb	r3, [r7, #23]
          break;
 8005546:	e002      	b.n	800554e <USBD_CDC_Setup+0x19e>
          break;
 8005548:	bf00      	nop
 800554a:	e008      	b.n	800555e <USBD_CDC_Setup+0x1ae>
          break;
 800554c:	bf00      	nop
      }
      break;
 800554e:	e006      	b.n	800555e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8005550:	6839      	ldr	r1, [r7, #0]
 8005552:	6878      	ldr	r0, [r7, #4]
 8005554:	f001 fc47 	bl	8006de6 <USBD_CtlError>
      ret = USBD_FAIL;
 8005558:	2303      	movs	r3, #3
 800555a:	75fb      	strb	r3, [r7, #23]
      break;
 800555c:	bf00      	nop
  }

  return (uint8_t)ret;
 800555e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005560:	4618      	mov	r0, r3
 8005562:	3718      	adds	r7, #24
 8005564:	46bd      	mov	sp, r7
 8005566:	bd80      	pop	{r7, pc}

08005568 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b084      	sub	sp, #16
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
 8005570:	460b      	mov	r3, r1
 8005572:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800557a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	32b0      	adds	r2, #176	@ 0xb0
 8005586:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d101      	bne.n	8005592 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800558e:	2303      	movs	r3, #3
 8005590:	e065      	b.n	800565e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	32b0      	adds	r2, #176	@ 0xb0
 800559c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055a0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80055a2:	78fb      	ldrb	r3, [r7, #3]
 80055a4:	f003 020f 	and.w	r2, r3, #15
 80055a8:	6879      	ldr	r1, [r7, #4]
 80055aa:	4613      	mov	r3, r2
 80055ac:	009b      	lsls	r3, r3, #2
 80055ae:	4413      	add	r3, r2
 80055b0:	009b      	lsls	r3, r3, #2
 80055b2:	440b      	add	r3, r1
 80055b4:	3318      	adds	r3, #24
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d02f      	beq.n	800561c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80055bc:	78fb      	ldrb	r3, [r7, #3]
 80055be:	f003 020f 	and.w	r2, r3, #15
 80055c2:	6879      	ldr	r1, [r7, #4]
 80055c4:	4613      	mov	r3, r2
 80055c6:	009b      	lsls	r3, r3, #2
 80055c8:	4413      	add	r3, r2
 80055ca:	009b      	lsls	r3, r3, #2
 80055cc:	440b      	add	r3, r1
 80055ce:	3318      	adds	r3, #24
 80055d0:	681a      	ldr	r2, [r3, #0]
 80055d2:	78fb      	ldrb	r3, [r7, #3]
 80055d4:	f003 010f 	and.w	r1, r3, #15
 80055d8:	68f8      	ldr	r0, [r7, #12]
 80055da:	460b      	mov	r3, r1
 80055dc:	00db      	lsls	r3, r3, #3
 80055de:	440b      	add	r3, r1
 80055e0:	009b      	lsls	r3, r3, #2
 80055e2:	4403      	add	r3, r0
 80055e4:	331c      	adds	r3, #28
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	fbb2 f1f3 	udiv	r1, r2, r3
 80055ec:	fb01 f303 	mul.w	r3, r1, r3
 80055f0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d112      	bne.n	800561c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80055f6:	78fb      	ldrb	r3, [r7, #3]
 80055f8:	f003 020f 	and.w	r2, r3, #15
 80055fc:	6879      	ldr	r1, [r7, #4]
 80055fe:	4613      	mov	r3, r2
 8005600:	009b      	lsls	r3, r3, #2
 8005602:	4413      	add	r3, r2
 8005604:	009b      	lsls	r3, r3, #2
 8005606:	440b      	add	r3, r1
 8005608:	3318      	adds	r3, #24
 800560a:	2200      	movs	r2, #0
 800560c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800560e:	78f9      	ldrb	r1, [r7, #3]
 8005610:	2300      	movs	r3, #0
 8005612:	2200      	movs	r2, #0
 8005614:	6878      	ldr	r0, [r7, #4]
 8005616:	f004 fa58 	bl	8009aca <USBD_LL_Transmit>
 800561a:	e01f      	b.n	800565c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	2200      	movs	r2, #0
 8005620:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800562a:	687a      	ldr	r2, [r7, #4]
 800562c:	33b0      	adds	r3, #176	@ 0xb0
 800562e:	009b      	lsls	r3, r3, #2
 8005630:	4413      	add	r3, r2
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	691b      	ldr	r3, [r3, #16]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d010      	beq.n	800565c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005640:	687a      	ldr	r2, [r7, #4]
 8005642:	33b0      	adds	r3, #176	@ 0xb0
 8005644:	009b      	lsls	r3, r3, #2
 8005646:	4413      	add	r3, r2
 8005648:	685b      	ldr	r3, [r3, #4]
 800564a:	691b      	ldr	r3, [r3, #16]
 800564c:	68ba      	ldr	r2, [r7, #8]
 800564e:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8005652:	68ba      	ldr	r2, [r7, #8]
 8005654:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8005658:	78fa      	ldrb	r2, [r7, #3]
 800565a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800565c:	2300      	movs	r3, #0
}
 800565e:	4618      	mov	r0, r3
 8005660:	3710      	adds	r7, #16
 8005662:	46bd      	mov	sp, r7
 8005664:	bd80      	pop	{r7, pc}

08005666 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005666:	b580      	push	{r7, lr}
 8005668:	b084      	sub	sp, #16
 800566a:	af00      	add	r7, sp, #0
 800566c:	6078      	str	r0, [r7, #4]
 800566e:	460b      	mov	r3, r1
 8005670:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	32b0      	adds	r2, #176	@ 0xb0
 800567c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005680:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	32b0      	adds	r2, #176	@ 0xb0
 800568c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d101      	bne.n	8005698 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005694:	2303      	movs	r3, #3
 8005696:	e01a      	b.n	80056ce <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005698:	78fb      	ldrb	r3, [r7, #3]
 800569a:	4619      	mov	r1, r3
 800569c:	6878      	ldr	r0, [r7, #4]
 800569e:	f004 fa56 	bl	8009b4e <USBD_LL_GetRxDataSize>
 80056a2:	4602      	mov	r2, r0
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80056b0:	687a      	ldr	r2, [r7, #4]
 80056b2:	33b0      	adds	r3, #176	@ 0xb0
 80056b4:	009b      	lsls	r3, r3, #2
 80056b6:	4413      	add	r3, r2
 80056b8:	685b      	ldr	r3, [r3, #4]
 80056ba:	68db      	ldr	r3, [r3, #12]
 80056bc:	68fa      	ldr	r2, [r7, #12]
 80056be:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80056c2:	68fa      	ldr	r2, [r7, #12]
 80056c4:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80056c8:	4611      	mov	r1, r2
 80056ca:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80056cc:	2300      	movs	r3, #0
}
 80056ce:	4618      	mov	r0, r3
 80056d0:	3710      	adds	r7, #16
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bd80      	pop	{r7, pc}

080056d6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80056d6:	b580      	push	{r7, lr}
 80056d8:	b084      	sub	sp, #16
 80056da:	af00      	add	r7, sp, #0
 80056dc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	32b0      	adds	r2, #176	@ 0xb0
 80056e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056ec:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d101      	bne.n	80056f8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80056f4:	2303      	movs	r3, #3
 80056f6:	e024      	b.n	8005742 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80056fe:	687a      	ldr	r2, [r7, #4]
 8005700:	33b0      	adds	r3, #176	@ 0xb0
 8005702:	009b      	lsls	r3, r3, #2
 8005704:	4413      	add	r3, r2
 8005706:	685b      	ldr	r3, [r3, #4]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d019      	beq.n	8005740 <USBD_CDC_EP0_RxReady+0x6a>
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8005712:	2bff      	cmp	r3, #255	@ 0xff
 8005714:	d014      	beq.n	8005740 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800571c:	687a      	ldr	r2, [r7, #4]
 800571e:	33b0      	adds	r3, #176	@ 0xb0
 8005720:	009b      	lsls	r3, r3, #2
 8005722:	4413      	add	r3, r2
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	689b      	ldr	r3, [r3, #8]
 8005728:	68fa      	ldr	r2, [r7, #12]
 800572a:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800572e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8005730:	68fa      	ldr	r2, [r7, #12]
 8005732:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005736:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	22ff      	movs	r2, #255	@ 0xff
 800573c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8005740:	2300      	movs	r3, #0
}
 8005742:	4618      	mov	r0, r3
 8005744:	3710      	adds	r7, #16
 8005746:	46bd      	mov	sp, r7
 8005748:	bd80      	pop	{r7, pc}
	...

0800574c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b086      	sub	sp, #24
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005754:	2182      	movs	r1, #130	@ 0x82
 8005756:	4818      	ldr	r0, [pc, #96]	@ (80057b8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005758:	f000 fd0f 	bl	800617a <USBD_GetEpDesc>
 800575c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800575e:	2101      	movs	r1, #1
 8005760:	4815      	ldr	r0, [pc, #84]	@ (80057b8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005762:	f000 fd0a 	bl	800617a <USBD_GetEpDesc>
 8005766:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005768:	2181      	movs	r1, #129	@ 0x81
 800576a:	4813      	ldr	r0, [pc, #76]	@ (80057b8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800576c:	f000 fd05 	bl	800617a <USBD_GetEpDesc>
 8005770:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d002      	beq.n	800577e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005778:	697b      	ldr	r3, [r7, #20]
 800577a:	2210      	movs	r2, #16
 800577c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800577e:	693b      	ldr	r3, [r7, #16]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d006      	beq.n	8005792 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005784:	693b      	ldr	r3, [r7, #16]
 8005786:	2200      	movs	r2, #0
 8005788:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800578c:	711a      	strb	r2, [r3, #4]
 800578e:	2200      	movs	r2, #0
 8005790:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d006      	beq.n	80057a6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	2200      	movs	r2, #0
 800579c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80057a0:	711a      	strb	r2, [r3, #4]
 80057a2:	2200      	movs	r2, #0
 80057a4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2243      	movs	r2, #67	@ 0x43
 80057aa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80057ac:	4b02      	ldr	r3, [pc, #8]	@ (80057b8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80057ae:	4618      	mov	r0, r3
 80057b0:	3718      	adds	r7, #24
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bd80      	pop	{r7, pc}
 80057b6:	bf00      	nop
 80057b8:	20000050 	.word	0x20000050

080057bc <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b086      	sub	sp, #24
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80057c4:	2182      	movs	r1, #130	@ 0x82
 80057c6:	4818      	ldr	r0, [pc, #96]	@ (8005828 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80057c8:	f000 fcd7 	bl	800617a <USBD_GetEpDesc>
 80057cc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80057ce:	2101      	movs	r1, #1
 80057d0:	4815      	ldr	r0, [pc, #84]	@ (8005828 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80057d2:	f000 fcd2 	bl	800617a <USBD_GetEpDesc>
 80057d6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80057d8:	2181      	movs	r1, #129	@ 0x81
 80057da:	4813      	ldr	r0, [pc, #76]	@ (8005828 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80057dc:	f000 fccd 	bl	800617a <USBD_GetEpDesc>
 80057e0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d002      	beq.n	80057ee <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	2210      	movs	r2, #16
 80057ec:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80057ee:	693b      	ldr	r3, [r7, #16]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d006      	beq.n	8005802 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80057f4:	693b      	ldr	r3, [r7, #16]
 80057f6:	2200      	movs	r2, #0
 80057f8:	711a      	strb	r2, [r3, #4]
 80057fa:	2200      	movs	r2, #0
 80057fc:	f042 0202 	orr.w	r2, r2, #2
 8005800:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d006      	beq.n	8005816 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	2200      	movs	r2, #0
 800580c:	711a      	strb	r2, [r3, #4]
 800580e:	2200      	movs	r2, #0
 8005810:	f042 0202 	orr.w	r2, r2, #2
 8005814:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2243      	movs	r2, #67	@ 0x43
 800581a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800581c:	4b02      	ldr	r3, [pc, #8]	@ (8005828 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800581e:	4618      	mov	r0, r3
 8005820:	3718      	adds	r7, #24
 8005822:	46bd      	mov	sp, r7
 8005824:	bd80      	pop	{r7, pc}
 8005826:	bf00      	nop
 8005828:	20000050 	.word	0x20000050

0800582c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b086      	sub	sp, #24
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005834:	2182      	movs	r1, #130	@ 0x82
 8005836:	4818      	ldr	r0, [pc, #96]	@ (8005898 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005838:	f000 fc9f 	bl	800617a <USBD_GetEpDesc>
 800583c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800583e:	2101      	movs	r1, #1
 8005840:	4815      	ldr	r0, [pc, #84]	@ (8005898 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005842:	f000 fc9a 	bl	800617a <USBD_GetEpDesc>
 8005846:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005848:	2181      	movs	r1, #129	@ 0x81
 800584a:	4813      	ldr	r0, [pc, #76]	@ (8005898 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800584c:	f000 fc95 	bl	800617a <USBD_GetEpDesc>
 8005850:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d002      	beq.n	800585e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005858:	697b      	ldr	r3, [r7, #20]
 800585a:	2210      	movs	r2, #16
 800585c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800585e:	693b      	ldr	r3, [r7, #16]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d006      	beq.n	8005872 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005864:	693b      	ldr	r3, [r7, #16]
 8005866:	2200      	movs	r2, #0
 8005868:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800586c:	711a      	strb	r2, [r3, #4]
 800586e:	2200      	movs	r2, #0
 8005870:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d006      	beq.n	8005886 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	2200      	movs	r2, #0
 800587c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005880:	711a      	strb	r2, [r3, #4]
 8005882:	2200      	movs	r2, #0
 8005884:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2243      	movs	r2, #67	@ 0x43
 800588a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800588c:	4b02      	ldr	r3, [pc, #8]	@ (8005898 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800588e:	4618      	mov	r0, r3
 8005890:	3718      	adds	r7, #24
 8005892:	46bd      	mov	sp, r7
 8005894:	bd80      	pop	{r7, pc}
 8005896:	bf00      	nop
 8005898:	20000050 	.word	0x20000050

0800589c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800589c:	b480      	push	{r7}
 800589e:	b083      	sub	sp, #12
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	220a      	movs	r2, #10
 80058a8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80058aa:	4b03      	ldr	r3, [pc, #12]	@ (80058b8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80058ac:	4618      	mov	r0, r3
 80058ae:	370c      	adds	r7, #12
 80058b0:	46bd      	mov	sp, r7
 80058b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b6:	4770      	bx	lr
 80058b8:	2000000c 	.word	0x2000000c

080058bc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80058bc:	b480      	push	{r7}
 80058be:	b083      	sub	sp, #12
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
 80058c4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d101      	bne.n	80058d0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80058cc:	2303      	movs	r3, #3
 80058ce:	e009      	b.n	80058e4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80058d6:	687a      	ldr	r2, [r7, #4]
 80058d8:	33b0      	adds	r3, #176	@ 0xb0
 80058da:	009b      	lsls	r3, r3, #2
 80058dc:	4413      	add	r3, r2
 80058de:	683a      	ldr	r2, [r7, #0]
 80058e0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80058e2:	2300      	movs	r3, #0
}
 80058e4:	4618      	mov	r0, r3
 80058e6:	370c      	adds	r7, #12
 80058e8:	46bd      	mov	sp, r7
 80058ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ee:	4770      	bx	lr

080058f0 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80058f0:	b480      	push	{r7}
 80058f2:	b087      	sub	sp, #28
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	60f8      	str	r0, [r7, #12]
 80058f8:	60b9      	str	r1, [r7, #8]
 80058fa:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	32b0      	adds	r2, #176	@ 0xb0
 8005906:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800590a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800590c:	697b      	ldr	r3, [r7, #20]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d101      	bne.n	8005916 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8005912:	2303      	movs	r3, #3
 8005914:	e008      	b.n	8005928 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8005916:	697b      	ldr	r3, [r7, #20]
 8005918:	68ba      	ldr	r2, [r7, #8]
 800591a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800591e:	697b      	ldr	r3, [r7, #20]
 8005920:	687a      	ldr	r2, [r7, #4]
 8005922:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8005926:	2300      	movs	r3, #0
}
 8005928:	4618      	mov	r0, r3
 800592a:	371c      	adds	r7, #28
 800592c:	46bd      	mov	sp, r7
 800592e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005932:	4770      	bx	lr

08005934 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005934:	b480      	push	{r7}
 8005936:	b085      	sub	sp, #20
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
 800593c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	32b0      	adds	r2, #176	@ 0xb0
 8005948:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800594c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d101      	bne.n	8005958 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8005954:	2303      	movs	r3, #3
 8005956:	e004      	b.n	8005962 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	683a      	ldr	r2, [r7, #0]
 800595c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8005960:	2300      	movs	r3, #0
}
 8005962:	4618      	mov	r0, r3
 8005964:	3714      	adds	r7, #20
 8005966:	46bd      	mov	sp, r7
 8005968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596c:	4770      	bx	lr
	...

08005970 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b084      	sub	sp, #16
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	32b0      	adds	r2, #176	@ 0xb0
 8005982:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005986:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	32b0      	adds	r2, #176	@ 0xb0
 8005992:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d101      	bne.n	800599e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800599a:	2303      	movs	r3, #3
 800599c:	e018      	b.n	80059d0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	7c1b      	ldrb	r3, [r3, #16]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d10a      	bne.n	80059bc <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80059a6:	4b0c      	ldr	r3, [pc, #48]	@ (80059d8 <USBD_CDC_ReceivePacket+0x68>)
 80059a8:	7819      	ldrb	r1, [r3, #0]
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80059b0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80059b4:	6878      	ldr	r0, [r7, #4]
 80059b6:	f004 f8a9 	bl	8009b0c <USBD_LL_PrepareReceive>
 80059ba:	e008      	b.n	80059ce <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80059bc:	4b06      	ldr	r3, [pc, #24]	@ (80059d8 <USBD_CDC_ReceivePacket+0x68>)
 80059be:	7819      	ldrb	r1, [r3, #0]
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80059c6:	2340      	movs	r3, #64	@ 0x40
 80059c8:	6878      	ldr	r0, [r7, #4]
 80059ca:	f004 f89f 	bl	8009b0c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80059ce:	2300      	movs	r3, #0
}
 80059d0:	4618      	mov	r0, r3
 80059d2:	3710      	adds	r7, #16
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bd80      	pop	{r7, pc}
 80059d8:	20000094 	.word	0x20000094

080059dc <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b086      	sub	sp, #24
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	60f8      	str	r0, [r7, #12]
 80059e4:	60b9      	str	r1, [r7, #8]
 80059e6:	4613      	mov	r3, r2
 80059e8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d101      	bne.n	80059f4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80059f0:	2303      	movs	r3, #3
 80059f2:	e01f      	b.n	8005a34 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	2200      	movs	r2, #0
 80059f8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	2200      	movs	r2, #0
 8005a00:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	2200      	movs	r2, #0
 8005a08:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d003      	beq.n	8005a1a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	68ba      	ldr	r2, [r7, #8]
 8005a16:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	2201      	movs	r2, #1
 8005a1e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	79fa      	ldrb	r2, [r7, #7]
 8005a26:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005a28:	68f8      	ldr	r0, [r7, #12]
 8005a2a:	f003 ff19 	bl	8009860 <USBD_LL_Init>
 8005a2e:	4603      	mov	r3, r0
 8005a30:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005a32:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a34:	4618      	mov	r0, r3
 8005a36:	3718      	adds	r7, #24
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	bd80      	pop	{r7, pc}

08005a3c <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b084      	sub	sp, #16
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
 8005a44:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005a46:	2300      	movs	r3, #0
 8005a48:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d101      	bne.n	8005a54 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005a50:	2303      	movs	r3, #3
 8005a52:	e025      	b.n	8005aa0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	683a      	ldr	r2, [r7, #0]
 8005a58:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	32ae      	adds	r2, #174	@ 0xae
 8005a66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d00f      	beq.n	8005a90 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	32ae      	adds	r2, #174	@ 0xae
 8005a7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a80:	f107 020e 	add.w	r2, r7, #14
 8005a84:	4610      	mov	r0, r2
 8005a86:	4798      	blx	r3
 8005a88:	4602      	mov	r2, r0
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8005a96:	1c5a      	adds	r2, r3, #1
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8005a9e:	2300      	movs	r3, #0
}
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	3710      	adds	r7, #16
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	bd80      	pop	{r7, pc}

08005aa8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b082      	sub	sp, #8
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005ab0:	6878      	ldr	r0, [r7, #4]
 8005ab2:	f003 ff21 	bl	80098f8 <USBD_LL_Start>
 8005ab6:	4603      	mov	r3, r0
}
 8005ab8:	4618      	mov	r0, r3
 8005aba:	3708      	adds	r7, #8
 8005abc:	46bd      	mov	sp, r7
 8005abe:	bd80      	pop	{r7, pc}

08005ac0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8005ac0:	b480      	push	{r7}
 8005ac2:	b083      	sub	sp, #12
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005ac8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8005aca:	4618      	mov	r0, r3
 8005acc:	370c      	adds	r7, #12
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad4:	4770      	bx	lr

08005ad6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005ad6:	b580      	push	{r7, lr}
 8005ad8:	b084      	sub	sp, #16
 8005ada:	af00      	add	r7, sp, #0
 8005adc:	6078      	str	r0, [r7, #4]
 8005ade:	460b      	mov	r3, r1
 8005ae0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d009      	beq.n	8005b04 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	78fa      	ldrb	r2, [r7, #3]
 8005afa:	4611      	mov	r1, r2
 8005afc:	6878      	ldr	r0, [r7, #4]
 8005afe:	4798      	blx	r3
 8005b00:	4603      	mov	r3, r0
 8005b02:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005b04:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b06:	4618      	mov	r0, r3
 8005b08:	3710      	adds	r7, #16
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bd80      	pop	{r7, pc}

08005b0e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005b0e:	b580      	push	{r7, lr}
 8005b10:	b084      	sub	sp, #16
 8005b12:	af00      	add	r7, sp, #0
 8005b14:	6078      	str	r0, [r7, #4]
 8005b16:	460b      	mov	r3, r1
 8005b18:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005b24:	685b      	ldr	r3, [r3, #4]
 8005b26:	78fa      	ldrb	r2, [r7, #3]
 8005b28:	4611      	mov	r1, r2
 8005b2a:	6878      	ldr	r0, [r7, #4]
 8005b2c:	4798      	blx	r3
 8005b2e:	4603      	mov	r3, r0
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d001      	beq.n	8005b38 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005b34:	2303      	movs	r3, #3
 8005b36:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005b38:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	3710      	adds	r7, #16
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bd80      	pop	{r7, pc}

08005b42 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005b42:	b580      	push	{r7, lr}
 8005b44:	b084      	sub	sp, #16
 8005b46:	af00      	add	r7, sp, #0
 8005b48:	6078      	str	r0, [r7, #4]
 8005b4a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005b52:	6839      	ldr	r1, [r7, #0]
 8005b54:	4618      	mov	r0, r3
 8005b56:	f001 f90c 	bl	8006d72 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2201      	movs	r2, #1
 8005b5e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8005b68:	461a      	mov	r2, r3
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8005b76:	f003 031f 	and.w	r3, r3, #31
 8005b7a:	2b02      	cmp	r3, #2
 8005b7c:	d01a      	beq.n	8005bb4 <USBD_LL_SetupStage+0x72>
 8005b7e:	2b02      	cmp	r3, #2
 8005b80:	d822      	bhi.n	8005bc8 <USBD_LL_SetupStage+0x86>
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d002      	beq.n	8005b8c <USBD_LL_SetupStage+0x4a>
 8005b86:	2b01      	cmp	r3, #1
 8005b88:	d00a      	beq.n	8005ba0 <USBD_LL_SetupStage+0x5e>
 8005b8a:	e01d      	b.n	8005bc8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005b92:	4619      	mov	r1, r3
 8005b94:	6878      	ldr	r0, [r7, #4]
 8005b96:	f000 fb63 	bl	8006260 <USBD_StdDevReq>
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	73fb      	strb	r3, [r7, #15]
      break;
 8005b9e:	e020      	b.n	8005be2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005ba6:	4619      	mov	r1, r3
 8005ba8:	6878      	ldr	r0, [r7, #4]
 8005baa:	f000 fbcb 	bl	8006344 <USBD_StdItfReq>
 8005bae:	4603      	mov	r3, r0
 8005bb0:	73fb      	strb	r3, [r7, #15]
      break;
 8005bb2:	e016      	b.n	8005be2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005bba:	4619      	mov	r1, r3
 8005bbc:	6878      	ldr	r0, [r7, #4]
 8005bbe:	f000 fc2d 	bl	800641c <USBD_StdEPReq>
 8005bc2:	4603      	mov	r3, r0
 8005bc4:	73fb      	strb	r3, [r7, #15]
      break;
 8005bc6:	e00c      	b.n	8005be2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8005bce:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8005bd2:	b2db      	uxtb	r3, r3
 8005bd4:	4619      	mov	r1, r3
 8005bd6:	6878      	ldr	r0, [r7, #4]
 8005bd8:	f003 feee 	bl	80099b8 <USBD_LL_StallEP>
 8005bdc:	4603      	mov	r3, r0
 8005bde:	73fb      	strb	r3, [r7, #15]
      break;
 8005be0:	bf00      	nop
  }

  return ret;
 8005be2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005be4:	4618      	mov	r0, r3
 8005be6:	3710      	adds	r7, #16
 8005be8:	46bd      	mov	sp, r7
 8005bea:	bd80      	pop	{r7, pc}

08005bec <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b086      	sub	sp, #24
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	60f8      	str	r0, [r7, #12]
 8005bf4:	460b      	mov	r3, r1
 8005bf6:	607a      	str	r2, [r7, #4]
 8005bf8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8005bfe:	7afb      	ldrb	r3, [r7, #11]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d16e      	bne.n	8005ce2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8005c0a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8005c12:	2b03      	cmp	r3, #3
 8005c14:	f040 8098 	bne.w	8005d48 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8005c18:	693b      	ldr	r3, [r7, #16]
 8005c1a:	689a      	ldr	r2, [r3, #8]
 8005c1c:	693b      	ldr	r3, [r7, #16]
 8005c1e:	68db      	ldr	r3, [r3, #12]
 8005c20:	429a      	cmp	r2, r3
 8005c22:	d913      	bls.n	8005c4c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8005c24:	693b      	ldr	r3, [r7, #16]
 8005c26:	689a      	ldr	r2, [r3, #8]
 8005c28:	693b      	ldr	r3, [r7, #16]
 8005c2a:	68db      	ldr	r3, [r3, #12]
 8005c2c:	1ad2      	subs	r2, r2, r3
 8005c2e:	693b      	ldr	r3, [r7, #16]
 8005c30:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005c32:	693b      	ldr	r3, [r7, #16]
 8005c34:	68da      	ldr	r2, [r3, #12]
 8005c36:	693b      	ldr	r3, [r7, #16]
 8005c38:	689b      	ldr	r3, [r3, #8]
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	bf28      	it	cs
 8005c3e:	4613      	movcs	r3, r2
 8005c40:	461a      	mov	r2, r3
 8005c42:	6879      	ldr	r1, [r7, #4]
 8005c44:	68f8      	ldr	r0, [r7, #12]
 8005c46:	f001 f994 	bl	8006f72 <USBD_CtlContinueRx>
 8005c4a:	e07d      	b.n	8005d48 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8005c52:	f003 031f 	and.w	r3, r3, #31
 8005c56:	2b02      	cmp	r3, #2
 8005c58:	d014      	beq.n	8005c84 <USBD_LL_DataOutStage+0x98>
 8005c5a:	2b02      	cmp	r3, #2
 8005c5c:	d81d      	bhi.n	8005c9a <USBD_LL_DataOutStage+0xae>
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d002      	beq.n	8005c68 <USBD_LL_DataOutStage+0x7c>
 8005c62:	2b01      	cmp	r3, #1
 8005c64:	d003      	beq.n	8005c6e <USBD_LL_DataOutStage+0x82>
 8005c66:	e018      	b.n	8005c9a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8005c68:	2300      	movs	r3, #0
 8005c6a:	75bb      	strb	r3, [r7, #22]
            break;
 8005c6c:	e018      	b.n	8005ca0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8005c74:	b2db      	uxtb	r3, r3
 8005c76:	4619      	mov	r1, r3
 8005c78:	68f8      	ldr	r0, [r7, #12]
 8005c7a:	f000 fa64 	bl	8006146 <USBD_CoreFindIF>
 8005c7e:	4603      	mov	r3, r0
 8005c80:	75bb      	strb	r3, [r7, #22]
            break;
 8005c82:	e00d      	b.n	8005ca0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8005c8a:	b2db      	uxtb	r3, r3
 8005c8c:	4619      	mov	r1, r3
 8005c8e:	68f8      	ldr	r0, [r7, #12]
 8005c90:	f000 fa66 	bl	8006160 <USBD_CoreFindEP>
 8005c94:	4603      	mov	r3, r0
 8005c96:	75bb      	strb	r3, [r7, #22]
            break;
 8005c98:	e002      	b.n	8005ca0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	75bb      	strb	r3, [r7, #22]
            break;
 8005c9e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8005ca0:	7dbb      	ldrb	r3, [r7, #22]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d119      	bne.n	8005cda <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005cac:	b2db      	uxtb	r3, r3
 8005cae:	2b03      	cmp	r3, #3
 8005cb0:	d113      	bne.n	8005cda <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8005cb2:	7dba      	ldrb	r2, [r7, #22]
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	32ae      	adds	r2, #174	@ 0xae
 8005cb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cbc:	691b      	ldr	r3, [r3, #16]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d00b      	beq.n	8005cda <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8005cc2:	7dba      	ldrb	r2, [r7, #22]
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8005cca:	7dba      	ldrb	r2, [r7, #22]
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	32ae      	adds	r2, #174	@ 0xae
 8005cd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cd4:	691b      	ldr	r3, [r3, #16]
 8005cd6:	68f8      	ldr	r0, [r7, #12]
 8005cd8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005cda:	68f8      	ldr	r0, [r7, #12]
 8005cdc:	f001 f95a 	bl	8006f94 <USBD_CtlSendStatus>
 8005ce0:	e032      	b.n	8005d48 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8005ce2:	7afb      	ldrb	r3, [r7, #11]
 8005ce4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005ce8:	b2db      	uxtb	r3, r3
 8005cea:	4619      	mov	r1, r3
 8005cec:	68f8      	ldr	r0, [r7, #12]
 8005cee:	f000 fa37 	bl	8006160 <USBD_CoreFindEP>
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005cf6:	7dbb      	ldrb	r3, [r7, #22]
 8005cf8:	2bff      	cmp	r3, #255	@ 0xff
 8005cfa:	d025      	beq.n	8005d48 <USBD_LL_DataOutStage+0x15c>
 8005cfc:	7dbb      	ldrb	r3, [r7, #22]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d122      	bne.n	8005d48 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005d08:	b2db      	uxtb	r3, r3
 8005d0a:	2b03      	cmp	r3, #3
 8005d0c:	d117      	bne.n	8005d3e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8005d0e:	7dba      	ldrb	r2, [r7, #22]
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	32ae      	adds	r2, #174	@ 0xae
 8005d14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d18:	699b      	ldr	r3, [r3, #24]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d00f      	beq.n	8005d3e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8005d1e:	7dba      	ldrb	r2, [r7, #22]
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8005d26:	7dba      	ldrb	r2, [r7, #22]
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	32ae      	adds	r2, #174	@ 0xae
 8005d2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d30:	699b      	ldr	r3, [r3, #24]
 8005d32:	7afa      	ldrb	r2, [r7, #11]
 8005d34:	4611      	mov	r1, r2
 8005d36:	68f8      	ldr	r0, [r7, #12]
 8005d38:	4798      	blx	r3
 8005d3a:	4603      	mov	r3, r0
 8005d3c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8005d3e:	7dfb      	ldrb	r3, [r7, #23]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d001      	beq.n	8005d48 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8005d44:	7dfb      	ldrb	r3, [r7, #23]
 8005d46:	e000      	b.n	8005d4a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8005d48:	2300      	movs	r3, #0
}
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	3718      	adds	r7, #24
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bd80      	pop	{r7, pc}

08005d52 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005d52:	b580      	push	{r7, lr}
 8005d54:	b086      	sub	sp, #24
 8005d56:	af00      	add	r7, sp, #0
 8005d58:	60f8      	str	r0, [r7, #12]
 8005d5a:	460b      	mov	r3, r1
 8005d5c:	607a      	str	r2, [r7, #4]
 8005d5e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8005d60:	7afb      	ldrb	r3, [r7, #11]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d16f      	bne.n	8005e46 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	3314      	adds	r3, #20
 8005d6a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8005d72:	2b02      	cmp	r3, #2
 8005d74:	d15a      	bne.n	8005e2c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8005d76:	693b      	ldr	r3, [r7, #16]
 8005d78:	689a      	ldr	r2, [r3, #8]
 8005d7a:	693b      	ldr	r3, [r7, #16]
 8005d7c:	68db      	ldr	r3, [r3, #12]
 8005d7e:	429a      	cmp	r2, r3
 8005d80:	d914      	bls.n	8005dac <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005d82:	693b      	ldr	r3, [r7, #16]
 8005d84:	689a      	ldr	r2, [r3, #8]
 8005d86:	693b      	ldr	r3, [r7, #16]
 8005d88:	68db      	ldr	r3, [r3, #12]
 8005d8a:	1ad2      	subs	r2, r2, r3
 8005d8c:	693b      	ldr	r3, [r7, #16]
 8005d8e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005d90:	693b      	ldr	r3, [r7, #16]
 8005d92:	689b      	ldr	r3, [r3, #8]
 8005d94:	461a      	mov	r2, r3
 8005d96:	6879      	ldr	r1, [r7, #4]
 8005d98:	68f8      	ldr	r0, [r7, #12]
 8005d9a:	f001 f8bc 	bl	8006f16 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005d9e:	2300      	movs	r3, #0
 8005da0:	2200      	movs	r2, #0
 8005da2:	2100      	movs	r1, #0
 8005da4:	68f8      	ldr	r0, [r7, #12]
 8005da6:	f003 feb1 	bl	8009b0c <USBD_LL_PrepareReceive>
 8005daa:	e03f      	b.n	8005e2c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005dac:	693b      	ldr	r3, [r7, #16]
 8005dae:	68da      	ldr	r2, [r3, #12]
 8005db0:	693b      	ldr	r3, [r7, #16]
 8005db2:	689b      	ldr	r3, [r3, #8]
 8005db4:	429a      	cmp	r2, r3
 8005db6:	d11c      	bne.n	8005df2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005db8:	693b      	ldr	r3, [r7, #16]
 8005dba:	685a      	ldr	r2, [r3, #4]
 8005dbc:	693b      	ldr	r3, [r7, #16]
 8005dbe:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005dc0:	429a      	cmp	r2, r3
 8005dc2:	d316      	bcc.n	8005df2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005dc4:	693b      	ldr	r3, [r7, #16]
 8005dc6:	685a      	ldr	r2, [r3, #4]
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005dce:	429a      	cmp	r2, r3
 8005dd0:	d20f      	bcs.n	8005df2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	2100      	movs	r1, #0
 8005dd6:	68f8      	ldr	r0, [r7, #12]
 8005dd8:	f001 f89d 	bl	8006f16 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	2200      	movs	r2, #0
 8005de0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005de4:	2300      	movs	r3, #0
 8005de6:	2200      	movs	r2, #0
 8005de8:	2100      	movs	r1, #0
 8005dea:	68f8      	ldr	r0, [r7, #12]
 8005dec:	f003 fe8e 	bl	8009b0c <USBD_LL_PrepareReceive>
 8005df0:	e01c      	b.n	8005e2c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005df8:	b2db      	uxtb	r3, r3
 8005dfa:	2b03      	cmp	r3, #3
 8005dfc:	d10f      	bne.n	8005e1e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005e04:	68db      	ldr	r3, [r3, #12]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d009      	beq.n	8005e1e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005e18:	68db      	ldr	r3, [r3, #12]
 8005e1a:	68f8      	ldr	r0, [r7, #12]
 8005e1c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005e1e:	2180      	movs	r1, #128	@ 0x80
 8005e20:	68f8      	ldr	r0, [r7, #12]
 8005e22:	f003 fdc9 	bl	80099b8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005e26:	68f8      	ldr	r0, [r7, #12]
 8005e28:	f001 f8c7 	bl	8006fba <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d03a      	beq.n	8005eac <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8005e36:	68f8      	ldr	r0, [r7, #12]
 8005e38:	f7ff fe42 	bl	8005ac0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	2200      	movs	r2, #0
 8005e40:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8005e44:	e032      	b.n	8005eac <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8005e46:	7afb      	ldrb	r3, [r7, #11]
 8005e48:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005e4c:	b2db      	uxtb	r3, r3
 8005e4e:	4619      	mov	r1, r3
 8005e50:	68f8      	ldr	r0, [r7, #12]
 8005e52:	f000 f985 	bl	8006160 <USBD_CoreFindEP>
 8005e56:	4603      	mov	r3, r0
 8005e58:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005e5a:	7dfb      	ldrb	r3, [r7, #23]
 8005e5c:	2bff      	cmp	r3, #255	@ 0xff
 8005e5e:	d025      	beq.n	8005eac <USBD_LL_DataInStage+0x15a>
 8005e60:	7dfb      	ldrb	r3, [r7, #23]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d122      	bne.n	8005eac <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005e6c:	b2db      	uxtb	r3, r3
 8005e6e:	2b03      	cmp	r3, #3
 8005e70:	d11c      	bne.n	8005eac <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8005e72:	7dfa      	ldrb	r2, [r7, #23]
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	32ae      	adds	r2, #174	@ 0xae
 8005e78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e7c:	695b      	ldr	r3, [r3, #20]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d014      	beq.n	8005eac <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8005e82:	7dfa      	ldrb	r2, [r7, #23]
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8005e8a:	7dfa      	ldrb	r2, [r7, #23]
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	32ae      	adds	r2, #174	@ 0xae
 8005e90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e94:	695b      	ldr	r3, [r3, #20]
 8005e96:	7afa      	ldrb	r2, [r7, #11]
 8005e98:	4611      	mov	r1, r2
 8005e9a:	68f8      	ldr	r0, [r7, #12]
 8005e9c:	4798      	blx	r3
 8005e9e:	4603      	mov	r3, r0
 8005ea0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8005ea2:	7dbb      	ldrb	r3, [r7, #22]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d001      	beq.n	8005eac <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8005ea8:	7dbb      	ldrb	r3, [r7, #22]
 8005eaa:	e000      	b.n	8005eae <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8005eac:	2300      	movs	r3, #0
}
 8005eae:	4618      	mov	r0, r3
 8005eb0:	3718      	adds	r7, #24
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	bd80      	pop	{r7, pc}

08005eb6 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005eb6:	b580      	push	{r7, lr}
 8005eb8:	b084      	sub	sp, #16
 8005eba:	af00      	add	r7, sp, #0
 8005ebc:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2201      	movs	r2, #1
 8005ec6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2200      	movs	r2, #0
 8005edc:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d014      	beq.n	8005f1c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005ef8:	685b      	ldr	r3, [r3, #4]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d00e      	beq.n	8005f1c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005f04:	685b      	ldr	r3, [r3, #4]
 8005f06:	687a      	ldr	r2, [r7, #4]
 8005f08:	6852      	ldr	r2, [r2, #4]
 8005f0a:	b2d2      	uxtb	r2, r2
 8005f0c:	4611      	mov	r1, r2
 8005f0e:	6878      	ldr	r0, [r7, #4]
 8005f10:	4798      	blx	r3
 8005f12:	4603      	mov	r3, r0
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d001      	beq.n	8005f1c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8005f18:	2303      	movs	r3, #3
 8005f1a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005f1c:	2340      	movs	r3, #64	@ 0x40
 8005f1e:	2200      	movs	r2, #0
 8005f20:	2100      	movs	r1, #0
 8005f22:	6878      	ldr	r0, [r7, #4]
 8005f24:	f003 fd03 	bl	800992e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2201      	movs	r2, #1
 8005f2c:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2240      	movs	r2, #64	@ 0x40
 8005f34:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005f38:	2340      	movs	r3, #64	@ 0x40
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	2180      	movs	r1, #128	@ 0x80
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	f003 fcf5 	bl	800992e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2201      	movs	r2, #1
 8005f48:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2240      	movs	r2, #64	@ 0x40
 8005f4e:	621a      	str	r2, [r3, #32]

  return ret;
 8005f50:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f52:	4618      	mov	r0, r3
 8005f54:	3710      	adds	r7, #16
 8005f56:	46bd      	mov	sp, r7
 8005f58:	bd80      	pop	{r7, pc}

08005f5a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005f5a:	b480      	push	{r7}
 8005f5c:	b083      	sub	sp, #12
 8005f5e:	af00      	add	r7, sp, #0
 8005f60:	6078      	str	r0, [r7, #4]
 8005f62:	460b      	mov	r3, r1
 8005f64:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	78fa      	ldrb	r2, [r7, #3]
 8005f6a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005f6c:	2300      	movs	r3, #0
}
 8005f6e:	4618      	mov	r0, r3
 8005f70:	370c      	adds	r7, #12
 8005f72:	46bd      	mov	sp, r7
 8005f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f78:	4770      	bx	lr

08005f7a <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005f7a:	b480      	push	{r7}
 8005f7c:	b083      	sub	sp, #12
 8005f7e:	af00      	add	r7, sp, #0
 8005f80:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005f88:	b2db      	uxtb	r3, r3
 8005f8a:	2b04      	cmp	r3, #4
 8005f8c:	d006      	beq.n	8005f9c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005f94:	b2da      	uxtb	r2, r3
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2204      	movs	r2, #4
 8005fa0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8005fa4:	2300      	movs	r3, #0
}
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	370c      	adds	r7, #12
 8005faa:	46bd      	mov	sp, r7
 8005fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb0:	4770      	bx	lr

08005fb2 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005fb2:	b480      	push	{r7}
 8005fb4:	b083      	sub	sp, #12
 8005fb6:	af00      	add	r7, sp, #0
 8005fb8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005fc0:	b2db      	uxtb	r3, r3
 8005fc2:	2b04      	cmp	r3, #4
 8005fc4:	d106      	bne.n	8005fd4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8005fcc:	b2da      	uxtb	r2, r3
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8005fd4:	2300      	movs	r3, #0
}
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	370c      	adds	r7, #12
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe0:	4770      	bx	lr

08005fe2 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005fe2:	b580      	push	{r7, lr}
 8005fe4:	b082      	sub	sp, #8
 8005fe6:	af00      	add	r7, sp, #0
 8005fe8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005ff0:	b2db      	uxtb	r3, r3
 8005ff2:	2b03      	cmp	r3, #3
 8005ff4:	d110      	bne.n	8006018 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d00b      	beq.n	8006018 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006006:	69db      	ldr	r3, [r3, #28]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d005      	beq.n	8006018 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006012:	69db      	ldr	r3, [r3, #28]
 8006014:	6878      	ldr	r0, [r7, #4]
 8006016:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006018:	2300      	movs	r3, #0
}
 800601a:	4618      	mov	r0, r3
 800601c:	3708      	adds	r7, #8
 800601e:	46bd      	mov	sp, r7
 8006020:	bd80      	pop	{r7, pc}

08006022 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006022:	b580      	push	{r7, lr}
 8006024:	b082      	sub	sp, #8
 8006026:	af00      	add	r7, sp, #0
 8006028:	6078      	str	r0, [r7, #4]
 800602a:	460b      	mov	r3, r1
 800602c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	32ae      	adds	r2, #174	@ 0xae
 8006038:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d101      	bne.n	8006044 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006040:	2303      	movs	r3, #3
 8006042:	e01c      	b.n	800607e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800604a:	b2db      	uxtb	r3, r3
 800604c:	2b03      	cmp	r3, #3
 800604e:	d115      	bne.n	800607c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	32ae      	adds	r2, #174	@ 0xae
 800605a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800605e:	6a1b      	ldr	r3, [r3, #32]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d00b      	beq.n	800607c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	32ae      	adds	r2, #174	@ 0xae
 800606e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006072:	6a1b      	ldr	r3, [r3, #32]
 8006074:	78fa      	ldrb	r2, [r7, #3]
 8006076:	4611      	mov	r1, r2
 8006078:	6878      	ldr	r0, [r7, #4]
 800607a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800607c:	2300      	movs	r3, #0
}
 800607e:	4618      	mov	r0, r3
 8006080:	3708      	adds	r7, #8
 8006082:	46bd      	mov	sp, r7
 8006084:	bd80      	pop	{r7, pc}

08006086 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006086:	b580      	push	{r7, lr}
 8006088:	b082      	sub	sp, #8
 800608a:	af00      	add	r7, sp, #0
 800608c:	6078      	str	r0, [r7, #4]
 800608e:	460b      	mov	r3, r1
 8006090:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	32ae      	adds	r2, #174	@ 0xae
 800609c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d101      	bne.n	80060a8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80060a4:	2303      	movs	r3, #3
 80060a6:	e01c      	b.n	80060e2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80060ae:	b2db      	uxtb	r3, r3
 80060b0:	2b03      	cmp	r3, #3
 80060b2:	d115      	bne.n	80060e0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	32ae      	adds	r2, #174	@ 0xae
 80060be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d00b      	beq.n	80060e0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	32ae      	adds	r2, #174	@ 0xae
 80060d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060d8:	78fa      	ldrb	r2, [r7, #3]
 80060da:	4611      	mov	r1, r2
 80060dc:	6878      	ldr	r0, [r7, #4]
 80060de:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80060e0:	2300      	movs	r3, #0
}
 80060e2:	4618      	mov	r0, r3
 80060e4:	3708      	adds	r7, #8
 80060e6:	46bd      	mov	sp, r7
 80060e8:	bd80      	pop	{r7, pc}

080060ea <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80060ea:	b480      	push	{r7}
 80060ec:	b083      	sub	sp, #12
 80060ee:	af00      	add	r7, sp, #0
 80060f0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80060f2:	2300      	movs	r3, #0
}
 80060f4:	4618      	mov	r0, r3
 80060f6:	370c      	adds	r7, #12
 80060f8:	46bd      	mov	sp, r7
 80060fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fe:	4770      	bx	lr

08006100 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b084      	sub	sp, #16
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006108:	2300      	movs	r3, #0
 800610a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2201      	movs	r2, #1
 8006110:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800611a:	2b00      	cmp	r3, #0
 800611c:	d00e      	beq.n	800613c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006124:	685b      	ldr	r3, [r3, #4]
 8006126:	687a      	ldr	r2, [r7, #4]
 8006128:	6852      	ldr	r2, [r2, #4]
 800612a:	b2d2      	uxtb	r2, r2
 800612c:	4611      	mov	r1, r2
 800612e:	6878      	ldr	r0, [r7, #4]
 8006130:	4798      	blx	r3
 8006132:	4603      	mov	r3, r0
 8006134:	2b00      	cmp	r3, #0
 8006136:	d001      	beq.n	800613c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006138:	2303      	movs	r3, #3
 800613a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800613c:	7bfb      	ldrb	r3, [r7, #15]
}
 800613e:	4618      	mov	r0, r3
 8006140:	3710      	adds	r7, #16
 8006142:	46bd      	mov	sp, r7
 8006144:	bd80      	pop	{r7, pc}

08006146 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006146:	b480      	push	{r7}
 8006148:	b083      	sub	sp, #12
 800614a:	af00      	add	r7, sp, #0
 800614c:	6078      	str	r0, [r7, #4]
 800614e:	460b      	mov	r3, r1
 8006150:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006152:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006154:	4618      	mov	r0, r3
 8006156:	370c      	adds	r7, #12
 8006158:	46bd      	mov	sp, r7
 800615a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615e:	4770      	bx	lr

08006160 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006160:	b480      	push	{r7}
 8006162:	b083      	sub	sp, #12
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
 8006168:	460b      	mov	r3, r1
 800616a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800616c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800616e:	4618      	mov	r0, r3
 8006170:	370c      	adds	r7, #12
 8006172:	46bd      	mov	sp, r7
 8006174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006178:	4770      	bx	lr

0800617a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800617a:	b580      	push	{r7, lr}
 800617c:	b086      	sub	sp, #24
 800617e:	af00      	add	r7, sp, #0
 8006180:	6078      	str	r0, [r7, #4]
 8006182:	460b      	mov	r3, r1
 8006184:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800618e:	2300      	movs	r3, #0
 8006190:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	885b      	ldrh	r3, [r3, #2]
 8006196:	b29b      	uxth	r3, r3
 8006198:	68fa      	ldr	r2, [r7, #12]
 800619a:	7812      	ldrb	r2, [r2, #0]
 800619c:	4293      	cmp	r3, r2
 800619e:	d91f      	bls.n	80061e0 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	781b      	ldrb	r3, [r3, #0]
 80061a4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80061a6:	e013      	b.n	80061d0 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80061a8:	f107 030a 	add.w	r3, r7, #10
 80061ac:	4619      	mov	r1, r3
 80061ae:	6978      	ldr	r0, [r7, #20]
 80061b0:	f000 f81b 	bl	80061ea <USBD_GetNextDesc>
 80061b4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80061b6:	697b      	ldr	r3, [r7, #20]
 80061b8:	785b      	ldrb	r3, [r3, #1]
 80061ba:	2b05      	cmp	r3, #5
 80061bc:	d108      	bne.n	80061d0 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80061be:	697b      	ldr	r3, [r7, #20]
 80061c0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80061c2:	693b      	ldr	r3, [r7, #16]
 80061c4:	789b      	ldrb	r3, [r3, #2]
 80061c6:	78fa      	ldrb	r2, [r7, #3]
 80061c8:	429a      	cmp	r2, r3
 80061ca:	d008      	beq.n	80061de <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80061cc:	2300      	movs	r3, #0
 80061ce:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	885b      	ldrh	r3, [r3, #2]
 80061d4:	b29a      	uxth	r2, r3
 80061d6:	897b      	ldrh	r3, [r7, #10]
 80061d8:	429a      	cmp	r2, r3
 80061da:	d8e5      	bhi.n	80061a8 <USBD_GetEpDesc+0x2e>
 80061dc:	e000      	b.n	80061e0 <USBD_GetEpDesc+0x66>
          break;
 80061de:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80061e0:	693b      	ldr	r3, [r7, #16]
}
 80061e2:	4618      	mov	r0, r3
 80061e4:	3718      	adds	r7, #24
 80061e6:	46bd      	mov	sp, r7
 80061e8:	bd80      	pop	{r7, pc}

080061ea <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80061ea:	b480      	push	{r7}
 80061ec:	b085      	sub	sp, #20
 80061ee:	af00      	add	r7, sp, #0
 80061f0:	6078      	str	r0, [r7, #4]
 80061f2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	881b      	ldrh	r3, [r3, #0]
 80061fc:	68fa      	ldr	r2, [r7, #12]
 80061fe:	7812      	ldrb	r2, [r2, #0]
 8006200:	4413      	add	r3, r2
 8006202:	b29a      	uxth	r2, r3
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	781b      	ldrb	r3, [r3, #0]
 800620c:	461a      	mov	r2, r3
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	4413      	add	r3, r2
 8006212:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006214:	68fb      	ldr	r3, [r7, #12]
}
 8006216:	4618      	mov	r0, r3
 8006218:	3714      	adds	r7, #20
 800621a:	46bd      	mov	sp, r7
 800621c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006220:	4770      	bx	lr

08006222 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006222:	b480      	push	{r7}
 8006224:	b087      	sub	sp, #28
 8006226:	af00      	add	r7, sp, #0
 8006228:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800622e:	697b      	ldr	r3, [r7, #20]
 8006230:	781b      	ldrb	r3, [r3, #0]
 8006232:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006234:	697b      	ldr	r3, [r7, #20]
 8006236:	3301      	adds	r3, #1
 8006238:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800623a:	697b      	ldr	r3, [r7, #20]
 800623c:	781b      	ldrb	r3, [r3, #0]
 800623e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006240:	8a3b      	ldrh	r3, [r7, #16]
 8006242:	021b      	lsls	r3, r3, #8
 8006244:	b21a      	sxth	r2, r3
 8006246:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800624a:	4313      	orrs	r3, r2
 800624c:	b21b      	sxth	r3, r3
 800624e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006250:	89fb      	ldrh	r3, [r7, #14]
}
 8006252:	4618      	mov	r0, r3
 8006254:	371c      	adds	r7, #28
 8006256:	46bd      	mov	sp, r7
 8006258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625c:	4770      	bx	lr
	...

08006260 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b084      	sub	sp, #16
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
 8006268:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800626a:	2300      	movs	r3, #0
 800626c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	781b      	ldrb	r3, [r3, #0]
 8006272:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006276:	2b40      	cmp	r3, #64	@ 0x40
 8006278:	d005      	beq.n	8006286 <USBD_StdDevReq+0x26>
 800627a:	2b40      	cmp	r3, #64	@ 0x40
 800627c:	d857      	bhi.n	800632e <USBD_StdDevReq+0xce>
 800627e:	2b00      	cmp	r3, #0
 8006280:	d00f      	beq.n	80062a2 <USBD_StdDevReq+0x42>
 8006282:	2b20      	cmp	r3, #32
 8006284:	d153      	bne.n	800632e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	32ae      	adds	r2, #174	@ 0xae
 8006290:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006294:	689b      	ldr	r3, [r3, #8]
 8006296:	6839      	ldr	r1, [r7, #0]
 8006298:	6878      	ldr	r0, [r7, #4]
 800629a:	4798      	blx	r3
 800629c:	4603      	mov	r3, r0
 800629e:	73fb      	strb	r3, [r7, #15]
      break;
 80062a0:	e04a      	b.n	8006338 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	785b      	ldrb	r3, [r3, #1]
 80062a6:	2b09      	cmp	r3, #9
 80062a8:	d83b      	bhi.n	8006322 <USBD_StdDevReq+0xc2>
 80062aa:	a201      	add	r2, pc, #4	@ (adr r2, 80062b0 <USBD_StdDevReq+0x50>)
 80062ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062b0:	08006305 	.word	0x08006305
 80062b4:	08006319 	.word	0x08006319
 80062b8:	08006323 	.word	0x08006323
 80062bc:	0800630f 	.word	0x0800630f
 80062c0:	08006323 	.word	0x08006323
 80062c4:	080062e3 	.word	0x080062e3
 80062c8:	080062d9 	.word	0x080062d9
 80062cc:	08006323 	.word	0x08006323
 80062d0:	080062fb 	.word	0x080062fb
 80062d4:	080062ed 	.word	0x080062ed
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80062d8:	6839      	ldr	r1, [r7, #0]
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	f000 fa3c 	bl	8006758 <USBD_GetDescriptor>
          break;
 80062e0:	e024      	b.n	800632c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80062e2:	6839      	ldr	r1, [r7, #0]
 80062e4:	6878      	ldr	r0, [r7, #4]
 80062e6:	f000 fba1 	bl	8006a2c <USBD_SetAddress>
          break;
 80062ea:	e01f      	b.n	800632c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80062ec:	6839      	ldr	r1, [r7, #0]
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	f000 fbe0 	bl	8006ab4 <USBD_SetConfig>
 80062f4:	4603      	mov	r3, r0
 80062f6:	73fb      	strb	r3, [r7, #15]
          break;
 80062f8:	e018      	b.n	800632c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80062fa:	6839      	ldr	r1, [r7, #0]
 80062fc:	6878      	ldr	r0, [r7, #4]
 80062fe:	f000 fc83 	bl	8006c08 <USBD_GetConfig>
          break;
 8006302:	e013      	b.n	800632c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006304:	6839      	ldr	r1, [r7, #0]
 8006306:	6878      	ldr	r0, [r7, #4]
 8006308:	f000 fcb4 	bl	8006c74 <USBD_GetStatus>
          break;
 800630c:	e00e      	b.n	800632c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800630e:	6839      	ldr	r1, [r7, #0]
 8006310:	6878      	ldr	r0, [r7, #4]
 8006312:	f000 fce3 	bl	8006cdc <USBD_SetFeature>
          break;
 8006316:	e009      	b.n	800632c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006318:	6839      	ldr	r1, [r7, #0]
 800631a:	6878      	ldr	r0, [r7, #4]
 800631c:	f000 fd07 	bl	8006d2e <USBD_ClrFeature>
          break;
 8006320:	e004      	b.n	800632c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8006322:	6839      	ldr	r1, [r7, #0]
 8006324:	6878      	ldr	r0, [r7, #4]
 8006326:	f000 fd5e 	bl	8006de6 <USBD_CtlError>
          break;
 800632a:	bf00      	nop
      }
      break;
 800632c:	e004      	b.n	8006338 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800632e:	6839      	ldr	r1, [r7, #0]
 8006330:	6878      	ldr	r0, [r7, #4]
 8006332:	f000 fd58 	bl	8006de6 <USBD_CtlError>
      break;
 8006336:	bf00      	nop
  }

  return ret;
 8006338:	7bfb      	ldrb	r3, [r7, #15]
}
 800633a:	4618      	mov	r0, r3
 800633c:	3710      	adds	r7, #16
 800633e:	46bd      	mov	sp, r7
 8006340:	bd80      	pop	{r7, pc}
 8006342:	bf00      	nop

08006344 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b084      	sub	sp, #16
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
 800634c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800634e:	2300      	movs	r3, #0
 8006350:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	781b      	ldrb	r3, [r3, #0]
 8006356:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800635a:	2b40      	cmp	r3, #64	@ 0x40
 800635c:	d005      	beq.n	800636a <USBD_StdItfReq+0x26>
 800635e:	2b40      	cmp	r3, #64	@ 0x40
 8006360:	d852      	bhi.n	8006408 <USBD_StdItfReq+0xc4>
 8006362:	2b00      	cmp	r3, #0
 8006364:	d001      	beq.n	800636a <USBD_StdItfReq+0x26>
 8006366:	2b20      	cmp	r3, #32
 8006368:	d14e      	bne.n	8006408 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006370:	b2db      	uxtb	r3, r3
 8006372:	3b01      	subs	r3, #1
 8006374:	2b02      	cmp	r3, #2
 8006376:	d840      	bhi.n	80063fa <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	889b      	ldrh	r3, [r3, #4]
 800637c:	b2db      	uxtb	r3, r3
 800637e:	2b01      	cmp	r3, #1
 8006380:	d836      	bhi.n	80063f0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	889b      	ldrh	r3, [r3, #4]
 8006386:	b2db      	uxtb	r3, r3
 8006388:	4619      	mov	r1, r3
 800638a:	6878      	ldr	r0, [r7, #4]
 800638c:	f7ff fedb 	bl	8006146 <USBD_CoreFindIF>
 8006390:	4603      	mov	r3, r0
 8006392:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006394:	7bbb      	ldrb	r3, [r7, #14]
 8006396:	2bff      	cmp	r3, #255	@ 0xff
 8006398:	d01d      	beq.n	80063d6 <USBD_StdItfReq+0x92>
 800639a:	7bbb      	ldrb	r3, [r7, #14]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d11a      	bne.n	80063d6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80063a0:	7bba      	ldrb	r2, [r7, #14]
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	32ae      	adds	r2, #174	@ 0xae
 80063a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063aa:	689b      	ldr	r3, [r3, #8]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d00f      	beq.n	80063d0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80063b0:	7bba      	ldrb	r2, [r7, #14]
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80063b8:	7bba      	ldrb	r2, [r7, #14]
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	32ae      	adds	r2, #174	@ 0xae
 80063be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063c2:	689b      	ldr	r3, [r3, #8]
 80063c4:	6839      	ldr	r1, [r7, #0]
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	4798      	blx	r3
 80063ca:	4603      	mov	r3, r0
 80063cc:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80063ce:	e004      	b.n	80063da <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80063d0:	2303      	movs	r3, #3
 80063d2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80063d4:	e001      	b.n	80063da <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80063d6:	2303      	movs	r3, #3
 80063d8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	88db      	ldrh	r3, [r3, #6]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d110      	bne.n	8006404 <USBD_StdItfReq+0xc0>
 80063e2:	7bfb      	ldrb	r3, [r7, #15]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d10d      	bne.n	8006404 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80063e8:	6878      	ldr	r0, [r7, #4]
 80063ea:	f000 fdd3 	bl	8006f94 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80063ee:	e009      	b.n	8006404 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80063f0:	6839      	ldr	r1, [r7, #0]
 80063f2:	6878      	ldr	r0, [r7, #4]
 80063f4:	f000 fcf7 	bl	8006de6 <USBD_CtlError>
          break;
 80063f8:	e004      	b.n	8006404 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80063fa:	6839      	ldr	r1, [r7, #0]
 80063fc:	6878      	ldr	r0, [r7, #4]
 80063fe:	f000 fcf2 	bl	8006de6 <USBD_CtlError>
          break;
 8006402:	e000      	b.n	8006406 <USBD_StdItfReq+0xc2>
          break;
 8006404:	bf00      	nop
      }
      break;
 8006406:	e004      	b.n	8006412 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006408:	6839      	ldr	r1, [r7, #0]
 800640a:	6878      	ldr	r0, [r7, #4]
 800640c:	f000 fceb 	bl	8006de6 <USBD_CtlError>
      break;
 8006410:	bf00      	nop
  }

  return ret;
 8006412:	7bfb      	ldrb	r3, [r7, #15]
}
 8006414:	4618      	mov	r0, r3
 8006416:	3710      	adds	r7, #16
 8006418:	46bd      	mov	sp, r7
 800641a:	bd80      	pop	{r7, pc}

0800641c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b084      	sub	sp, #16
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
 8006424:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8006426:	2300      	movs	r3, #0
 8006428:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	889b      	ldrh	r3, [r3, #4]
 800642e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	781b      	ldrb	r3, [r3, #0]
 8006434:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006438:	2b40      	cmp	r3, #64	@ 0x40
 800643a:	d007      	beq.n	800644c <USBD_StdEPReq+0x30>
 800643c:	2b40      	cmp	r3, #64	@ 0x40
 800643e:	f200 817f 	bhi.w	8006740 <USBD_StdEPReq+0x324>
 8006442:	2b00      	cmp	r3, #0
 8006444:	d02a      	beq.n	800649c <USBD_StdEPReq+0x80>
 8006446:	2b20      	cmp	r3, #32
 8006448:	f040 817a 	bne.w	8006740 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800644c:	7bbb      	ldrb	r3, [r7, #14]
 800644e:	4619      	mov	r1, r3
 8006450:	6878      	ldr	r0, [r7, #4]
 8006452:	f7ff fe85 	bl	8006160 <USBD_CoreFindEP>
 8006456:	4603      	mov	r3, r0
 8006458:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800645a:	7b7b      	ldrb	r3, [r7, #13]
 800645c:	2bff      	cmp	r3, #255	@ 0xff
 800645e:	f000 8174 	beq.w	800674a <USBD_StdEPReq+0x32e>
 8006462:	7b7b      	ldrb	r3, [r7, #13]
 8006464:	2b00      	cmp	r3, #0
 8006466:	f040 8170 	bne.w	800674a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800646a:	7b7a      	ldrb	r2, [r7, #13]
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8006472:	7b7a      	ldrb	r2, [r7, #13]
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	32ae      	adds	r2, #174	@ 0xae
 8006478:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800647c:	689b      	ldr	r3, [r3, #8]
 800647e:	2b00      	cmp	r3, #0
 8006480:	f000 8163 	beq.w	800674a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006484:	7b7a      	ldrb	r2, [r7, #13]
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	32ae      	adds	r2, #174	@ 0xae
 800648a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800648e:	689b      	ldr	r3, [r3, #8]
 8006490:	6839      	ldr	r1, [r7, #0]
 8006492:	6878      	ldr	r0, [r7, #4]
 8006494:	4798      	blx	r3
 8006496:	4603      	mov	r3, r0
 8006498:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800649a:	e156      	b.n	800674a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	785b      	ldrb	r3, [r3, #1]
 80064a0:	2b03      	cmp	r3, #3
 80064a2:	d008      	beq.n	80064b6 <USBD_StdEPReq+0x9a>
 80064a4:	2b03      	cmp	r3, #3
 80064a6:	f300 8145 	bgt.w	8006734 <USBD_StdEPReq+0x318>
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	f000 809b 	beq.w	80065e6 <USBD_StdEPReq+0x1ca>
 80064b0:	2b01      	cmp	r3, #1
 80064b2:	d03c      	beq.n	800652e <USBD_StdEPReq+0x112>
 80064b4:	e13e      	b.n	8006734 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80064bc:	b2db      	uxtb	r3, r3
 80064be:	2b02      	cmp	r3, #2
 80064c0:	d002      	beq.n	80064c8 <USBD_StdEPReq+0xac>
 80064c2:	2b03      	cmp	r3, #3
 80064c4:	d016      	beq.n	80064f4 <USBD_StdEPReq+0xd8>
 80064c6:	e02c      	b.n	8006522 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80064c8:	7bbb      	ldrb	r3, [r7, #14]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d00d      	beq.n	80064ea <USBD_StdEPReq+0xce>
 80064ce:	7bbb      	ldrb	r3, [r7, #14]
 80064d0:	2b80      	cmp	r3, #128	@ 0x80
 80064d2:	d00a      	beq.n	80064ea <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80064d4:	7bbb      	ldrb	r3, [r7, #14]
 80064d6:	4619      	mov	r1, r3
 80064d8:	6878      	ldr	r0, [r7, #4]
 80064da:	f003 fa6d 	bl	80099b8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80064de:	2180      	movs	r1, #128	@ 0x80
 80064e0:	6878      	ldr	r0, [r7, #4]
 80064e2:	f003 fa69 	bl	80099b8 <USBD_LL_StallEP>
 80064e6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80064e8:	e020      	b.n	800652c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80064ea:	6839      	ldr	r1, [r7, #0]
 80064ec:	6878      	ldr	r0, [r7, #4]
 80064ee:	f000 fc7a 	bl	8006de6 <USBD_CtlError>
              break;
 80064f2:	e01b      	b.n	800652c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	885b      	ldrh	r3, [r3, #2]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d10e      	bne.n	800651a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80064fc:	7bbb      	ldrb	r3, [r7, #14]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d00b      	beq.n	800651a <USBD_StdEPReq+0xfe>
 8006502:	7bbb      	ldrb	r3, [r7, #14]
 8006504:	2b80      	cmp	r3, #128	@ 0x80
 8006506:	d008      	beq.n	800651a <USBD_StdEPReq+0xfe>
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	88db      	ldrh	r3, [r3, #6]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d104      	bne.n	800651a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006510:	7bbb      	ldrb	r3, [r7, #14]
 8006512:	4619      	mov	r1, r3
 8006514:	6878      	ldr	r0, [r7, #4]
 8006516:	f003 fa4f 	bl	80099b8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	f000 fd3a 	bl	8006f94 <USBD_CtlSendStatus>

              break;
 8006520:	e004      	b.n	800652c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8006522:	6839      	ldr	r1, [r7, #0]
 8006524:	6878      	ldr	r0, [r7, #4]
 8006526:	f000 fc5e 	bl	8006de6 <USBD_CtlError>
              break;
 800652a:	bf00      	nop
          }
          break;
 800652c:	e107      	b.n	800673e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006534:	b2db      	uxtb	r3, r3
 8006536:	2b02      	cmp	r3, #2
 8006538:	d002      	beq.n	8006540 <USBD_StdEPReq+0x124>
 800653a:	2b03      	cmp	r3, #3
 800653c:	d016      	beq.n	800656c <USBD_StdEPReq+0x150>
 800653e:	e04b      	b.n	80065d8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006540:	7bbb      	ldrb	r3, [r7, #14]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d00d      	beq.n	8006562 <USBD_StdEPReq+0x146>
 8006546:	7bbb      	ldrb	r3, [r7, #14]
 8006548:	2b80      	cmp	r3, #128	@ 0x80
 800654a:	d00a      	beq.n	8006562 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800654c:	7bbb      	ldrb	r3, [r7, #14]
 800654e:	4619      	mov	r1, r3
 8006550:	6878      	ldr	r0, [r7, #4]
 8006552:	f003 fa31 	bl	80099b8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006556:	2180      	movs	r1, #128	@ 0x80
 8006558:	6878      	ldr	r0, [r7, #4]
 800655a:	f003 fa2d 	bl	80099b8 <USBD_LL_StallEP>
 800655e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006560:	e040      	b.n	80065e4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8006562:	6839      	ldr	r1, [r7, #0]
 8006564:	6878      	ldr	r0, [r7, #4]
 8006566:	f000 fc3e 	bl	8006de6 <USBD_CtlError>
              break;
 800656a:	e03b      	b.n	80065e4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	885b      	ldrh	r3, [r3, #2]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d136      	bne.n	80065e2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006574:	7bbb      	ldrb	r3, [r7, #14]
 8006576:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800657a:	2b00      	cmp	r3, #0
 800657c:	d004      	beq.n	8006588 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800657e:	7bbb      	ldrb	r3, [r7, #14]
 8006580:	4619      	mov	r1, r3
 8006582:	6878      	ldr	r0, [r7, #4]
 8006584:	f003 fa37 	bl	80099f6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006588:	6878      	ldr	r0, [r7, #4]
 800658a:	f000 fd03 	bl	8006f94 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800658e:	7bbb      	ldrb	r3, [r7, #14]
 8006590:	4619      	mov	r1, r3
 8006592:	6878      	ldr	r0, [r7, #4]
 8006594:	f7ff fde4 	bl	8006160 <USBD_CoreFindEP>
 8006598:	4603      	mov	r3, r0
 800659a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800659c:	7b7b      	ldrb	r3, [r7, #13]
 800659e:	2bff      	cmp	r3, #255	@ 0xff
 80065a0:	d01f      	beq.n	80065e2 <USBD_StdEPReq+0x1c6>
 80065a2:	7b7b      	ldrb	r3, [r7, #13]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d11c      	bne.n	80065e2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80065a8:	7b7a      	ldrb	r2, [r7, #13]
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80065b0:	7b7a      	ldrb	r2, [r7, #13]
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	32ae      	adds	r2, #174	@ 0xae
 80065b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065ba:	689b      	ldr	r3, [r3, #8]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d010      	beq.n	80065e2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80065c0:	7b7a      	ldrb	r2, [r7, #13]
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	32ae      	adds	r2, #174	@ 0xae
 80065c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065ca:	689b      	ldr	r3, [r3, #8]
 80065cc:	6839      	ldr	r1, [r7, #0]
 80065ce:	6878      	ldr	r0, [r7, #4]
 80065d0:	4798      	blx	r3
 80065d2:	4603      	mov	r3, r0
 80065d4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80065d6:	e004      	b.n	80065e2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80065d8:	6839      	ldr	r1, [r7, #0]
 80065da:	6878      	ldr	r0, [r7, #4]
 80065dc:	f000 fc03 	bl	8006de6 <USBD_CtlError>
              break;
 80065e0:	e000      	b.n	80065e4 <USBD_StdEPReq+0x1c8>
              break;
 80065e2:	bf00      	nop
          }
          break;
 80065e4:	e0ab      	b.n	800673e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80065ec:	b2db      	uxtb	r3, r3
 80065ee:	2b02      	cmp	r3, #2
 80065f0:	d002      	beq.n	80065f8 <USBD_StdEPReq+0x1dc>
 80065f2:	2b03      	cmp	r3, #3
 80065f4:	d032      	beq.n	800665c <USBD_StdEPReq+0x240>
 80065f6:	e097      	b.n	8006728 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80065f8:	7bbb      	ldrb	r3, [r7, #14]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d007      	beq.n	800660e <USBD_StdEPReq+0x1f2>
 80065fe:	7bbb      	ldrb	r3, [r7, #14]
 8006600:	2b80      	cmp	r3, #128	@ 0x80
 8006602:	d004      	beq.n	800660e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006604:	6839      	ldr	r1, [r7, #0]
 8006606:	6878      	ldr	r0, [r7, #4]
 8006608:	f000 fbed 	bl	8006de6 <USBD_CtlError>
                break;
 800660c:	e091      	b.n	8006732 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800660e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006612:	2b00      	cmp	r3, #0
 8006614:	da0b      	bge.n	800662e <USBD_StdEPReq+0x212>
 8006616:	7bbb      	ldrb	r3, [r7, #14]
 8006618:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800661c:	4613      	mov	r3, r2
 800661e:	009b      	lsls	r3, r3, #2
 8006620:	4413      	add	r3, r2
 8006622:	009b      	lsls	r3, r3, #2
 8006624:	3310      	adds	r3, #16
 8006626:	687a      	ldr	r2, [r7, #4]
 8006628:	4413      	add	r3, r2
 800662a:	3304      	adds	r3, #4
 800662c:	e00b      	b.n	8006646 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800662e:	7bbb      	ldrb	r3, [r7, #14]
 8006630:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006634:	4613      	mov	r3, r2
 8006636:	009b      	lsls	r3, r3, #2
 8006638:	4413      	add	r3, r2
 800663a:	009b      	lsls	r3, r3, #2
 800663c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006640:	687a      	ldr	r2, [r7, #4]
 8006642:	4413      	add	r3, r2
 8006644:	3304      	adds	r3, #4
 8006646:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	2200      	movs	r2, #0
 800664c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800664e:	68bb      	ldr	r3, [r7, #8]
 8006650:	2202      	movs	r2, #2
 8006652:	4619      	mov	r1, r3
 8006654:	6878      	ldr	r0, [r7, #4]
 8006656:	f000 fc43 	bl	8006ee0 <USBD_CtlSendData>
              break;
 800665a:	e06a      	b.n	8006732 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800665c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006660:	2b00      	cmp	r3, #0
 8006662:	da11      	bge.n	8006688 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006664:	7bbb      	ldrb	r3, [r7, #14]
 8006666:	f003 020f 	and.w	r2, r3, #15
 800666a:	6879      	ldr	r1, [r7, #4]
 800666c:	4613      	mov	r3, r2
 800666e:	009b      	lsls	r3, r3, #2
 8006670:	4413      	add	r3, r2
 8006672:	009b      	lsls	r3, r3, #2
 8006674:	440b      	add	r3, r1
 8006676:	3324      	adds	r3, #36	@ 0x24
 8006678:	881b      	ldrh	r3, [r3, #0]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d117      	bne.n	80066ae <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800667e:	6839      	ldr	r1, [r7, #0]
 8006680:	6878      	ldr	r0, [r7, #4]
 8006682:	f000 fbb0 	bl	8006de6 <USBD_CtlError>
                  break;
 8006686:	e054      	b.n	8006732 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006688:	7bbb      	ldrb	r3, [r7, #14]
 800668a:	f003 020f 	and.w	r2, r3, #15
 800668e:	6879      	ldr	r1, [r7, #4]
 8006690:	4613      	mov	r3, r2
 8006692:	009b      	lsls	r3, r3, #2
 8006694:	4413      	add	r3, r2
 8006696:	009b      	lsls	r3, r3, #2
 8006698:	440b      	add	r3, r1
 800669a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800669e:	881b      	ldrh	r3, [r3, #0]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d104      	bne.n	80066ae <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80066a4:	6839      	ldr	r1, [r7, #0]
 80066a6:	6878      	ldr	r0, [r7, #4]
 80066a8:	f000 fb9d 	bl	8006de6 <USBD_CtlError>
                  break;
 80066ac:	e041      	b.n	8006732 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80066ae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	da0b      	bge.n	80066ce <USBD_StdEPReq+0x2b2>
 80066b6:	7bbb      	ldrb	r3, [r7, #14]
 80066b8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80066bc:	4613      	mov	r3, r2
 80066be:	009b      	lsls	r3, r3, #2
 80066c0:	4413      	add	r3, r2
 80066c2:	009b      	lsls	r3, r3, #2
 80066c4:	3310      	adds	r3, #16
 80066c6:	687a      	ldr	r2, [r7, #4]
 80066c8:	4413      	add	r3, r2
 80066ca:	3304      	adds	r3, #4
 80066cc:	e00b      	b.n	80066e6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80066ce:	7bbb      	ldrb	r3, [r7, #14]
 80066d0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80066d4:	4613      	mov	r3, r2
 80066d6:	009b      	lsls	r3, r3, #2
 80066d8:	4413      	add	r3, r2
 80066da:	009b      	lsls	r3, r3, #2
 80066dc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80066e0:	687a      	ldr	r2, [r7, #4]
 80066e2:	4413      	add	r3, r2
 80066e4:	3304      	adds	r3, #4
 80066e6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80066e8:	7bbb      	ldrb	r3, [r7, #14]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d002      	beq.n	80066f4 <USBD_StdEPReq+0x2d8>
 80066ee:	7bbb      	ldrb	r3, [r7, #14]
 80066f0:	2b80      	cmp	r3, #128	@ 0x80
 80066f2:	d103      	bne.n	80066fc <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80066f4:	68bb      	ldr	r3, [r7, #8]
 80066f6:	2200      	movs	r2, #0
 80066f8:	601a      	str	r2, [r3, #0]
 80066fa:	e00e      	b.n	800671a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80066fc:	7bbb      	ldrb	r3, [r7, #14]
 80066fe:	4619      	mov	r1, r3
 8006700:	6878      	ldr	r0, [r7, #4]
 8006702:	f003 f997 	bl	8009a34 <USBD_LL_IsStallEP>
 8006706:	4603      	mov	r3, r0
 8006708:	2b00      	cmp	r3, #0
 800670a:	d003      	beq.n	8006714 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	2201      	movs	r2, #1
 8006710:	601a      	str	r2, [r3, #0]
 8006712:	e002      	b.n	800671a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006714:	68bb      	ldr	r3, [r7, #8]
 8006716:	2200      	movs	r2, #0
 8006718:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800671a:	68bb      	ldr	r3, [r7, #8]
 800671c:	2202      	movs	r2, #2
 800671e:	4619      	mov	r1, r3
 8006720:	6878      	ldr	r0, [r7, #4]
 8006722:	f000 fbdd 	bl	8006ee0 <USBD_CtlSendData>
              break;
 8006726:	e004      	b.n	8006732 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006728:	6839      	ldr	r1, [r7, #0]
 800672a:	6878      	ldr	r0, [r7, #4]
 800672c:	f000 fb5b 	bl	8006de6 <USBD_CtlError>
              break;
 8006730:	bf00      	nop
          }
          break;
 8006732:	e004      	b.n	800673e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006734:	6839      	ldr	r1, [r7, #0]
 8006736:	6878      	ldr	r0, [r7, #4]
 8006738:	f000 fb55 	bl	8006de6 <USBD_CtlError>
          break;
 800673c:	bf00      	nop
      }
      break;
 800673e:	e005      	b.n	800674c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006740:	6839      	ldr	r1, [r7, #0]
 8006742:	6878      	ldr	r0, [r7, #4]
 8006744:	f000 fb4f 	bl	8006de6 <USBD_CtlError>
      break;
 8006748:	e000      	b.n	800674c <USBD_StdEPReq+0x330>
      break;
 800674a:	bf00      	nop
  }

  return ret;
 800674c:	7bfb      	ldrb	r3, [r7, #15]
}
 800674e:	4618      	mov	r0, r3
 8006750:	3710      	adds	r7, #16
 8006752:	46bd      	mov	sp, r7
 8006754:	bd80      	pop	{r7, pc}
	...

08006758 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b084      	sub	sp, #16
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
 8006760:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006762:	2300      	movs	r3, #0
 8006764:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006766:	2300      	movs	r3, #0
 8006768:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800676a:	2300      	movs	r3, #0
 800676c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	885b      	ldrh	r3, [r3, #2]
 8006772:	0a1b      	lsrs	r3, r3, #8
 8006774:	b29b      	uxth	r3, r3
 8006776:	3b01      	subs	r3, #1
 8006778:	2b06      	cmp	r3, #6
 800677a:	f200 8128 	bhi.w	80069ce <USBD_GetDescriptor+0x276>
 800677e:	a201      	add	r2, pc, #4	@ (adr r2, 8006784 <USBD_GetDescriptor+0x2c>)
 8006780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006784:	080067a1 	.word	0x080067a1
 8006788:	080067b9 	.word	0x080067b9
 800678c:	080067f9 	.word	0x080067f9
 8006790:	080069cf 	.word	0x080069cf
 8006794:	080069cf 	.word	0x080069cf
 8006798:	0800696f 	.word	0x0800696f
 800679c:	0800699b 	.word	0x0800699b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	687a      	ldr	r2, [r7, #4]
 80067aa:	7c12      	ldrb	r2, [r2, #16]
 80067ac:	f107 0108 	add.w	r1, r7, #8
 80067b0:	4610      	mov	r0, r2
 80067b2:	4798      	blx	r3
 80067b4:	60f8      	str	r0, [r7, #12]
      break;
 80067b6:	e112      	b.n	80069de <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	7c1b      	ldrb	r3, [r3, #16]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d10d      	bne.n	80067dc <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80067c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067c8:	f107 0208 	add.w	r2, r7, #8
 80067cc:	4610      	mov	r0, r2
 80067ce:	4798      	blx	r3
 80067d0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	3301      	adds	r3, #1
 80067d6:	2202      	movs	r2, #2
 80067d8:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80067da:	e100      	b.n	80069de <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80067e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067e4:	f107 0208 	add.w	r2, r7, #8
 80067e8:	4610      	mov	r0, r2
 80067ea:	4798      	blx	r3
 80067ec:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	3301      	adds	r3, #1
 80067f2:	2202      	movs	r2, #2
 80067f4:	701a      	strb	r2, [r3, #0]
      break;
 80067f6:	e0f2      	b.n	80069de <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	885b      	ldrh	r3, [r3, #2]
 80067fc:	b2db      	uxtb	r3, r3
 80067fe:	2b05      	cmp	r3, #5
 8006800:	f200 80ac 	bhi.w	800695c <USBD_GetDescriptor+0x204>
 8006804:	a201      	add	r2, pc, #4	@ (adr r2, 800680c <USBD_GetDescriptor+0xb4>)
 8006806:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800680a:	bf00      	nop
 800680c:	08006825 	.word	0x08006825
 8006810:	08006859 	.word	0x08006859
 8006814:	0800688d 	.word	0x0800688d
 8006818:	080068c1 	.word	0x080068c1
 800681c:	080068f5 	.word	0x080068f5
 8006820:	08006929 	.word	0x08006929
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800682a:	685b      	ldr	r3, [r3, #4]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d00b      	beq.n	8006848 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006836:	685b      	ldr	r3, [r3, #4]
 8006838:	687a      	ldr	r2, [r7, #4]
 800683a:	7c12      	ldrb	r2, [r2, #16]
 800683c:	f107 0108 	add.w	r1, r7, #8
 8006840:	4610      	mov	r0, r2
 8006842:	4798      	blx	r3
 8006844:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006846:	e091      	b.n	800696c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006848:	6839      	ldr	r1, [r7, #0]
 800684a:	6878      	ldr	r0, [r7, #4]
 800684c:	f000 facb 	bl	8006de6 <USBD_CtlError>
            err++;
 8006850:	7afb      	ldrb	r3, [r7, #11]
 8006852:	3301      	adds	r3, #1
 8006854:	72fb      	strb	r3, [r7, #11]
          break;
 8006856:	e089      	b.n	800696c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800685e:	689b      	ldr	r3, [r3, #8]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d00b      	beq.n	800687c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800686a:	689b      	ldr	r3, [r3, #8]
 800686c:	687a      	ldr	r2, [r7, #4]
 800686e:	7c12      	ldrb	r2, [r2, #16]
 8006870:	f107 0108 	add.w	r1, r7, #8
 8006874:	4610      	mov	r0, r2
 8006876:	4798      	blx	r3
 8006878:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800687a:	e077      	b.n	800696c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800687c:	6839      	ldr	r1, [r7, #0]
 800687e:	6878      	ldr	r0, [r7, #4]
 8006880:	f000 fab1 	bl	8006de6 <USBD_CtlError>
            err++;
 8006884:	7afb      	ldrb	r3, [r7, #11]
 8006886:	3301      	adds	r3, #1
 8006888:	72fb      	strb	r3, [r7, #11]
          break;
 800688a:	e06f      	b.n	800696c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006892:	68db      	ldr	r3, [r3, #12]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d00b      	beq.n	80068b0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800689e:	68db      	ldr	r3, [r3, #12]
 80068a0:	687a      	ldr	r2, [r7, #4]
 80068a2:	7c12      	ldrb	r2, [r2, #16]
 80068a4:	f107 0108 	add.w	r1, r7, #8
 80068a8:	4610      	mov	r0, r2
 80068aa:	4798      	blx	r3
 80068ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80068ae:	e05d      	b.n	800696c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80068b0:	6839      	ldr	r1, [r7, #0]
 80068b2:	6878      	ldr	r0, [r7, #4]
 80068b4:	f000 fa97 	bl	8006de6 <USBD_CtlError>
            err++;
 80068b8:	7afb      	ldrb	r3, [r7, #11]
 80068ba:	3301      	adds	r3, #1
 80068bc:	72fb      	strb	r3, [r7, #11]
          break;
 80068be:	e055      	b.n	800696c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80068c6:	691b      	ldr	r3, [r3, #16]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d00b      	beq.n	80068e4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80068d2:	691b      	ldr	r3, [r3, #16]
 80068d4:	687a      	ldr	r2, [r7, #4]
 80068d6:	7c12      	ldrb	r2, [r2, #16]
 80068d8:	f107 0108 	add.w	r1, r7, #8
 80068dc:	4610      	mov	r0, r2
 80068de:	4798      	blx	r3
 80068e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80068e2:	e043      	b.n	800696c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80068e4:	6839      	ldr	r1, [r7, #0]
 80068e6:	6878      	ldr	r0, [r7, #4]
 80068e8:	f000 fa7d 	bl	8006de6 <USBD_CtlError>
            err++;
 80068ec:	7afb      	ldrb	r3, [r7, #11]
 80068ee:	3301      	adds	r3, #1
 80068f0:	72fb      	strb	r3, [r7, #11]
          break;
 80068f2:	e03b      	b.n	800696c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80068fa:	695b      	ldr	r3, [r3, #20]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d00b      	beq.n	8006918 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006906:	695b      	ldr	r3, [r3, #20]
 8006908:	687a      	ldr	r2, [r7, #4]
 800690a:	7c12      	ldrb	r2, [r2, #16]
 800690c:	f107 0108 	add.w	r1, r7, #8
 8006910:	4610      	mov	r0, r2
 8006912:	4798      	blx	r3
 8006914:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006916:	e029      	b.n	800696c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006918:	6839      	ldr	r1, [r7, #0]
 800691a:	6878      	ldr	r0, [r7, #4]
 800691c:	f000 fa63 	bl	8006de6 <USBD_CtlError>
            err++;
 8006920:	7afb      	ldrb	r3, [r7, #11]
 8006922:	3301      	adds	r3, #1
 8006924:	72fb      	strb	r3, [r7, #11]
          break;
 8006926:	e021      	b.n	800696c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800692e:	699b      	ldr	r3, [r3, #24]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d00b      	beq.n	800694c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800693a:	699b      	ldr	r3, [r3, #24]
 800693c:	687a      	ldr	r2, [r7, #4]
 800693e:	7c12      	ldrb	r2, [r2, #16]
 8006940:	f107 0108 	add.w	r1, r7, #8
 8006944:	4610      	mov	r0, r2
 8006946:	4798      	blx	r3
 8006948:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800694a:	e00f      	b.n	800696c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800694c:	6839      	ldr	r1, [r7, #0]
 800694e:	6878      	ldr	r0, [r7, #4]
 8006950:	f000 fa49 	bl	8006de6 <USBD_CtlError>
            err++;
 8006954:	7afb      	ldrb	r3, [r7, #11]
 8006956:	3301      	adds	r3, #1
 8006958:	72fb      	strb	r3, [r7, #11]
          break;
 800695a:	e007      	b.n	800696c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800695c:	6839      	ldr	r1, [r7, #0]
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	f000 fa41 	bl	8006de6 <USBD_CtlError>
          err++;
 8006964:	7afb      	ldrb	r3, [r7, #11]
 8006966:	3301      	adds	r3, #1
 8006968:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800696a:	bf00      	nop
      }
      break;
 800696c:	e037      	b.n	80069de <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	7c1b      	ldrb	r3, [r3, #16]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d109      	bne.n	800698a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800697c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800697e:	f107 0208 	add.w	r2, r7, #8
 8006982:	4610      	mov	r0, r2
 8006984:	4798      	blx	r3
 8006986:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006988:	e029      	b.n	80069de <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800698a:	6839      	ldr	r1, [r7, #0]
 800698c:	6878      	ldr	r0, [r7, #4]
 800698e:	f000 fa2a 	bl	8006de6 <USBD_CtlError>
        err++;
 8006992:	7afb      	ldrb	r3, [r7, #11]
 8006994:	3301      	adds	r3, #1
 8006996:	72fb      	strb	r3, [r7, #11]
      break;
 8006998:	e021      	b.n	80069de <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	7c1b      	ldrb	r3, [r3, #16]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d10d      	bne.n	80069be <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80069a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069aa:	f107 0208 	add.w	r2, r7, #8
 80069ae:	4610      	mov	r0, r2
 80069b0:	4798      	blx	r3
 80069b2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	3301      	adds	r3, #1
 80069b8:	2207      	movs	r2, #7
 80069ba:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80069bc:	e00f      	b.n	80069de <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80069be:	6839      	ldr	r1, [r7, #0]
 80069c0:	6878      	ldr	r0, [r7, #4]
 80069c2:	f000 fa10 	bl	8006de6 <USBD_CtlError>
        err++;
 80069c6:	7afb      	ldrb	r3, [r7, #11]
 80069c8:	3301      	adds	r3, #1
 80069ca:	72fb      	strb	r3, [r7, #11]
      break;
 80069cc:	e007      	b.n	80069de <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80069ce:	6839      	ldr	r1, [r7, #0]
 80069d0:	6878      	ldr	r0, [r7, #4]
 80069d2:	f000 fa08 	bl	8006de6 <USBD_CtlError>
      err++;
 80069d6:	7afb      	ldrb	r3, [r7, #11]
 80069d8:	3301      	adds	r3, #1
 80069da:	72fb      	strb	r3, [r7, #11]
      break;
 80069dc:	bf00      	nop
  }

  if (err != 0U)
 80069de:	7afb      	ldrb	r3, [r7, #11]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d11e      	bne.n	8006a22 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	88db      	ldrh	r3, [r3, #6]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d016      	beq.n	8006a1a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80069ec:	893b      	ldrh	r3, [r7, #8]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d00e      	beq.n	8006a10 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	88da      	ldrh	r2, [r3, #6]
 80069f6:	893b      	ldrh	r3, [r7, #8]
 80069f8:	4293      	cmp	r3, r2
 80069fa:	bf28      	it	cs
 80069fc:	4613      	movcs	r3, r2
 80069fe:	b29b      	uxth	r3, r3
 8006a00:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006a02:	893b      	ldrh	r3, [r7, #8]
 8006a04:	461a      	mov	r2, r3
 8006a06:	68f9      	ldr	r1, [r7, #12]
 8006a08:	6878      	ldr	r0, [r7, #4]
 8006a0a:	f000 fa69 	bl	8006ee0 <USBD_CtlSendData>
 8006a0e:	e009      	b.n	8006a24 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006a10:	6839      	ldr	r1, [r7, #0]
 8006a12:	6878      	ldr	r0, [r7, #4]
 8006a14:	f000 f9e7 	bl	8006de6 <USBD_CtlError>
 8006a18:	e004      	b.n	8006a24 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006a1a:	6878      	ldr	r0, [r7, #4]
 8006a1c:	f000 faba 	bl	8006f94 <USBD_CtlSendStatus>
 8006a20:	e000      	b.n	8006a24 <USBD_GetDescriptor+0x2cc>
    return;
 8006a22:	bf00      	nop
  }
}
 8006a24:	3710      	adds	r7, #16
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bd80      	pop	{r7, pc}
 8006a2a:	bf00      	nop

08006a2c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b084      	sub	sp, #16
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
 8006a34:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	889b      	ldrh	r3, [r3, #4]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d131      	bne.n	8006aa2 <USBD_SetAddress+0x76>
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	88db      	ldrh	r3, [r3, #6]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d12d      	bne.n	8006aa2 <USBD_SetAddress+0x76>
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	885b      	ldrh	r3, [r3, #2]
 8006a4a:	2b7f      	cmp	r3, #127	@ 0x7f
 8006a4c:	d829      	bhi.n	8006aa2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	885b      	ldrh	r3, [r3, #2]
 8006a52:	b2db      	uxtb	r3, r3
 8006a54:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006a58:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006a60:	b2db      	uxtb	r3, r3
 8006a62:	2b03      	cmp	r3, #3
 8006a64:	d104      	bne.n	8006a70 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006a66:	6839      	ldr	r1, [r7, #0]
 8006a68:	6878      	ldr	r0, [r7, #4]
 8006a6a:	f000 f9bc 	bl	8006de6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a6e:	e01d      	b.n	8006aac <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	7bfa      	ldrb	r2, [r7, #15]
 8006a74:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006a78:	7bfb      	ldrb	r3, [r7, #15]
 8006a7a:	4619      	mov	r1, r3
 8006a7c:	6878      	ldr	r0, [r7, #4]
 8006a7e:	f003 f805 	bl	8009a8c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006a82:	6878      	ldr	r0, [r7, #4]
 8006a84:	f000 fa86 	bl	8006f94 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006a88:	7bfb      	ldrb	r3, [r7, #15]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d004      	beq.n	8006a98 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2202      	movs	r2, #2
 8006a92:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a96:	e009      	b.n	8006aac <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2201      	movs	r2, #1
 8006a9c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006aa0:	e004      	b.n	8006aac <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006aa2:	6839      	ldr	r1, [r7, #0]
 8006aa4:	6878      	ldr	r0, [r7, #4]
 8006aa6:	f000 f99e 	bl	8006de6 <USBD_CtlError>
  }
}
 8006aaa:	bf00      	nop
 8006aac:	bf00      	nop
 8006aae:	3710      	adds	r7, #16
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	bd80      	pop	{r7, pc}

08006ab4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b084      	sub	sp, #16
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
 8006abc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006abe:	2300      	movs	r3, #0
 8006ac0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	885b      	ldrh	r3, [r3, #2]
 8006ac6:	b2da      	uxtb	r2, r3
 8006ac8:	4b4e      	ldr	r3, [pc, #312]	@ (8006c04 <USBD_SetConfig+0x150>)
 8006aca:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006acc:	4b4d      	ldr	r3, [pc, #308]	@ (8006c04 <USBD_SetConfig+0x150>)
 8006ace:	781b      	ldrb	r3, [r3, #0]
 8006ad0:	2b01      	cmp	r3, #1
 8006ad2:	d905      	bls.n	8006ae0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006ad4:	6839      	ldr	r1, [r7, #0]
 8006ad6:	6878      	ldr	r0, [r7, #4]
 8006ad8:	f000 f985 	bl	8006de6 <USBD_CtlError>
    return USBD_FAIL;
 8006adc:	2303      	movs	r3, #3
 8006ade:	e08c      	b.n	8006bfa <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006ae6:	b2db      	uxtb	r3, r3
 8006ae8:	2b02      	cmp	r3, #2
 8006aea:	d002      	beq.n	8006af2 <USBD_SetConfig+0x3e>
 8006aec:	2b03      	cmp	r3, #3
 8006aee:	d029      	beq.n	8006b44 <USBD_SetConfig+0x90>
 8006af0:	e075      	b.n	8006bde <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006af2:	4b44      	ldr	r3, [pc, #272]	@ (8006c04 <USBD_SetConfig+0x150>)
 8006af4:	781b      	ldrb	r3, [r3, #0]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d020      	beq.n	8006b3c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8006afa:	4b42      	ldr	r3, [pc, #264]	@ (8006c04 <USBD_SetConfig+0x150>)
 8006afc:	781b      	ldrb	r3, [r3, #0]
 8006afe:	461a      	mov	r2, r3
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006b04:	4b3f      	ldr	r3, [pc, #252]	@ (8006c04 <USBD_SetConfig+0x150>)
 8006b06:	781b      	ldrb	r3, [r3, #0]
 8006b08:	4619      	mov	r1, r3
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	f7fe ffe3 	bl	8005ad6 <USBD_SetClassConfig>
 8006b10:	4603      	mov	r3, r0
 8006b12:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006b14:	7bfb      	ldrb	r3, [r7, #15]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d008      	beq.n	8006b2c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8006b1a:	6839      	ldr	r1, [r7, #0]
 8006b1c:	6878      	ldr	r0, [r7, #4]
 8006b1e:	f000 f962 	bl	8006de6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2202      	movs	r2, #2
 8006b26:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006b2a:	e065      	b.n	8006bf8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006b2c:	6878      	ldr	r0, [r7, #4]
 8006b2e:	f000 fa31 	bl	8006f94 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2203      	movs	r2, #3
 8006b36:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8006b3a:	e05d      	b.n	8006bf8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006b3c:	6878      	ldr	r0, [r7, #4]
 8006b3e:	f000 fa29 	bl	8006f94 <USBD_CtlSendStatus>
      break;
 8006b42:	e059      	b.n	8006bf8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006b44:	4b2f      	ldr	r3, [pc, #188]	@ (8006c04 <USBD_SetConfig+0x150>)
 8006b46:	781b      	ldrb	r3, [r3, #0]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d112      	bne.n	8006b72 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2202      	movs	r2, #2
 8006b50:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8006b54:	4b2b      	ldr	r3, [pc, #172]	@ (8006c04 <USBD_SetConfig+0x150>)
 8006b56:	781b      	ldrb	r3, [r3, #0]
 8006b58:	461a      	mov	r2, r3
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006b5e:	4b29      	ldr	r3, [pc, #164]	@ (8006c04 <USBD_SetConfig+0x150>)
 8006b60:	781b      	ldrb	r3, [r3, #0]
 8006b62:	4619      	mov	r1, r3
 8006b64:	6878      	ldr	r0, [r7, #4]
 8006b66:	f7fe ffd2 	bl	8005b0e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006b6a:	6878      	ldr	r0, [r7, #4]
 8006b6c:	f000 fa12 	bl	8006f94 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006b70:	e042      	b.n	8006bf8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8006b72:	4b24      	ldr	r3, [pc, #144]	@ (8006c04 <USBD_SetConfig+0x150>)
 8006b74:	781b      	ldrb	r3, [r3, #0]
 8006b76:	461a      	mov	r2, r3
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	685b      	ldr	r3, [r3, #4]
 8006b7c:	429a      	cmp	r2, r3
 8006b7e:	d02a      	beq.n	8006bd6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	685b      	ldr	r3, [r3, #4]
 8006b84:	b2db      	uxtb	r3, r3
 8006b86:	4619      	mov	r1, r3
 8006b88:	6878      	ldr	r0, [r7, #4]
 8006b8a:	f7fe ffc0 	bl	8005b0e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006b8e:	4b1d      	ldr	r3, [pc, #116]	@ (8006c04 <USBD_SetConfig+0x150>)
 8006b90:	781b      	ldrb	r3, [r3, #0]
 8006b92:	461a      	mov	r2, r3
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006b98:	4b1a      	ldr	r3, [pc, #104]	@ (8006c04 <USBD_SetConfig+0x150>)
 8006b9a:	781b      	ldrb	r3, [r3, #0]
 8006b9c:	4619      	mov	r1, r3
 8006b9e:	6878      	ldr	r0, [r7, #4]
 8006ba0:	f7fe ff99 	bl	8005ad6 <USBD_SetClassConfig>
 8006ba4:	4603      	mov	r3, r0
 8006ba6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006ba8:	7bfb      	ldrb	r3, [r7, #15]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d00f      	beq.n	8006bce <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8006bae:	6839      	ldr	r1, [r7, #0]
 8006bb0:	6878      	ldr	r0, [r7, #4]
 8006bb2:	f000 f918 	bl	8006de6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	685b      	ldr	r3, [r3, #4]
 8006bba:	b2db      	uxtb	r3, r3
 8006bbc:	4619      	mov	r1, r3
 8006bbe:	6878      	ldr	r0, [r7, #4]
 8006bc0:	f7fe ffa5 	bl	8005b0e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2202      	movs	r2, #2
 8006bc8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8006bcc:	e014      	b.n	8006bf8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006bce:	6878      	ldr	r0, [r7, #4]
 8006bd0:	f000 f9e0 	bl	8006f94 <USBD_CtlSendStatus>
      break;
 8006bd4:	e010      	b.n	8006bf8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	f000 f9dc 	bl	8006f94 <USBD_CtlSendStatus>
      break;
 8006bdc:	e00c      	b.n	8006bf8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8006bde:	6839      	ldr	r1, [r7, #0]
 8006be0:	6878      	ldr	r0, [r7, #4]
 8006be2:	f000 f900 	bl	8006de6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006be6:	4b07      	ldr	r3, [pc, #28]	@ (8006c04 <USBD_SetConfig+0x150>)
 8006be8:	781b      	ldrb	r3, [r3, #0]
 8006bea:	4619      	mov	r1, r3
 8006bec:	6878      	ldr	r0, [r7, #4]
 8006bee:	f7fe ff8e 	bl	8005b0e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006bf2:	2303      	movs	r3, #3
 8006bf4:	73fb      	strb	r3, [r7, #15]
      break;
 8006bf6:	bf00      	nop
  }

  return ret;
 8006bf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	3710      	adds	r7, #16
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	bd80      	pop	{r7, pc}
 8006c02:	bf00      	nop
 8006c04:	20000504 	.word	0x20000504

08006c08 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b082      	sub	sp, #8
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
 8006c10:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	88db      	ldrh	r3, [r3, #6]
 8006c16:	2b01      	cmp	r3, #1
 8006c18:	d004      	beq.n	8006c24 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006c1a:	6839      	ldr	r1, [r7, #0]
 8006c1c:	6878      	ldr	r0, [r7, #4]
 8006c1e:	f000 f8e2 	bl	8006de6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006c22:	e023      	b.n	8006c6c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006c2a:	b2db      	uxtb	r3, r3
 8006c2c:	2b02      	cmp	r3, #2
 8006c2e:	dc02      	bgt.n	8006c36 <USBD_GetConfig+0x2e>
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	dc03      	bgt.n	8006c3c <USBD_GetConfig+0x34>
 8006c34:	e015      	b.n	8006c62 <USBD_GetConfig+0x5a>
 8006c36:	2b03      	cmp	r3, #3
 8006c38:	d00b      	beq.n	8006c52 <USBD_GetConfig+0x4a>
 8006c3a:	e012      	b.n	8006c62 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	3308      	adds	r3, #8
 8006c46:	2201      	movs	r2, #1
 8006c48:	4619      	mov	r1, r3
 8006c4a:	6878      	ldr	r0, [r7, #4]
 8006c4c:	f000 f948 	bl	8006ee0 <USBD_CtlSendData>
        break;
 8006c50:	e00c      	b.n	8006c6c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	3304      	adds	r3, #4
 8006c56:	2201      	movs	r2, #1
 8006c58:	4619      	mov	r1, r3
 8006c5a:	6878      	ldr	r0, [r7, #4]
 8006c5c:	f000 f940 	bl	8006ee0 <USBD_CtlSendData>
        break;
 8006c60:	e004      	b.n	8006c6c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006c62:	6839      	ldr	r1, [r7, #0]
 8006c64:	6878      	ldr	r0, [r7, #4]
 8006c66:	f000 f8be 	bl	8006de6 <USBD_CtlError>
        break;
 8006c6a:	bf00      	nop
}
 8006c6c:	bf00      	nop
 8006c6e:	3708      	adds	r7, #8
 8006c70:	46bd      	mov	sp, r7
 8006c72:	bd80      	pop	{r7, pc}

08006c74 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b082      	sub	sp, #8
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
 8006c7c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006c84:	b2db      	uxtb	r3, r3
 8006c86:	3b01      	subs	r3, #1
 8006c88:	2b02      	cmp	r3, #2
 8006c8a:	d81e      	bhi.n	8006cca <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	88db      	ldrh	r3, [r3, #6]
 8006c90:	2b02      	cmp	r3, #2
 8006c92:	d004      	beq.n	8006c9e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006c94:	6839      	ldr	r1, [r7, #0]
 8006c96:	6878      	ldr	r0, [r7, #4]
 8006c98:	f000 f8a5 	bl	8006de6 <USBD_CtlError>
        break;
 8006c9c:	e01a      	b.n	8006cd4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2201      	movs	r2, #1
 8006ca2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d005      	beq.n	8006cba <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	68db      	ldr	r3, [r3, #12]
 8006cb2:	f043 0202 	orr.w	r2, r3, #2
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	330c      	adds	r3, #12
 8006cbe:	2202      	movs	r2, #2
 8006cc0:	4619      	mov	r1, r3
 8006cc2:	6878      	ldr	r0, [r7, #4]
 8006cc4:	f000 f90c 	bl	8006ee0 <USBD_CtlSendData>
      break;
 8006cc8:	e004      	b.n	8006cd4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006cca:	6839      	ldr	r1, [r7, #0]
 8006ccc:	6878      	ldr	r0, [r7, #4]
 8006cce:	f000 f88a 	bl	8006de6 <USBD_CtlError>
      break;
 8006cd2:	bf00      	nop
  }
}
 8006cd4:	bf00      	nop
 8006cd6:	3708      	adds	r7, #8
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	bd80      	pop	{r7, pc}

08006cdc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b082      	sub	sp, #8
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
 8006ce4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	885b      	ldrh	r3, [r3, #2]
 8006cea:	2b01      	cmp	r3, #1
 8006cec:	d107      	bne.n	8006cfe <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2201      	movs	r2, #1
 8006cf2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006cf6:	6878      	ldr	r0, [r7, #4]
 8006cf8:	f000 f94c 	bl	8006f94 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8006cfc:	e013      	b.n	8006d26 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	885b      	ldrh	r3, [r3, #2]
 8006d02:	2b02      	cmp	r3, #2
 8006d04:	d10b      	bne.n	8006d1e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	889b      	ldrh	r3, [r3, #4]
 8006d0a:	0a1b      	lsrs	r3, r3, #8
 8006d0c:	b29b      	uxth	r3, r3
 8006d0e:	b2da      	uxtb	r2, r3
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8006d16:	6878      	ldr	r0, [r7, #4]
 8006d18:	f000 f93c 	bl	8006f94 <USBD_CtlSendStatus>
}
 8006d1c:	e003      	b.n	8006d26 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8006d1e:	6839      	ldr	r1, [r7, #0]
 8006d20:	6878      	ldr	r0, [r7, #4]
 8006d22:	f000 f860 	bl	8006de6 <USBD_CtlError>
}
 8006d26:	bf00      	nop
 8006d28:	3708      	adds	r7, #8
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	bd80      	pop	{r7, pc}

08006d2e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d2e:	b580      	push	{r7, lr}
 8006d30:	b082      	sub	sp, #8
 8006d32:	af00      	add	r7, sp, #0
 8006d34:	6078      	str	r0, [r7, #4]
 8006d36:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006d3e:	b2db      	uxtb	r3, r3
 8006d40:	3b01      	subs	r3, #1
 8006d42:	2b02      	cmp	r3, #2
 8006d44:	d80b      	bhi.n	8006d5e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	885b      	ldrh	r3, [r3, #2]
 8006d4a:	2b01      	cmp	r3, #1
 8006d4c:	d10c      	bne.n	8006d68 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2200      	movs	r2, #0
 8006d52:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006d56:	6878      	ldr	r0, [r7, #4]
 8006d58:	f000 f91c 	bl	8006f94 <USBD_CtlSendStatus>
      }
      break;
 8006d5c:	e004      	b.n	8006d68 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006d5e:	6839      	ldr	r1, [r7, #0]
 8006d60:	6878      	ldr	r0, [r7, #4]
 8006d62:	f000 f840 	bl	8006de6 <USBD_CtlError>
      break;
 8006d66:	e000      	b.n	8006d6a <USBD_ClrFeature+0x3c>
      break;
 8006d68:	bf00      	nop
  }
}
 8006d6a:	bf00      	nop
 8006d6c:	3708      	adds	r7, #8
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bd80      	pop	{r7, pc}

08006d72 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006d72:	b580      	push	{r7, lr}
 8006d74:	b084      	sub	sp, #16
 8006d76:	af00      	add	r7, sp, #0
 8006d78:	6078      	str	r0, [r7, #4]
 8006d7a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	781a      	ldrb	r2, [r3, #0]
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	3301      	adds	r3, #1
 8006d8c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	781a      	ldrb	r2, [r3, #0]
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	3301      	adds	r3, #1
 8006d9a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006d9c:	68f8      	ldr	r0, [r7, #12]
 8006d9e:	f7ff fa40 	bl	8006222 <SWAPBYTE>
 8006da2:	4603      	mov	r3, r0
 8006da4:	461a      	mov	r2, r3
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	3301      	adds	r3, #1
 8006dae:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	3301      	adds	r3, #1
 8006db4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006db6:	68f8      	ldr	r0, [r7, #12]
 8006db8:	f7ff fa33 	bl	8006222 <SWAPBYTE>
 8006dbc:	4603      	mov	r3, r0
 8006dbe:	461a      	mov	r2, r3
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	3301      	adds	r3, #1
 8006dc8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	3301      	adds	r3, #1
 8006dce:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006dd0:	68f8      	ldr	r0, [r7, #12]
 8006dd2:	f7ff fa26 	bl	8006222 <SWAPBYTE>
 8006dd6:	4603      	mov	r3, r0
 8006dd8:	461a      	mov	r2, r3
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	80da      	strh	r2, [r3, #6]
}
 8006dde:	bf00      	nop
 8006de0:	3710      	adds	r7, #16
 8006de2:	46bd      	mov	sp, r7
 8006de4:	bd80      	pop	{r7, pc}

08006de6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006de6:	b580      	push	{r7, lr}
 8006de8:	b082      	sub	sp, #8
 8006dea:	af00      	add	r7, sp, #0
 8006dec:	6078      	str	r0, [r7, #4]
 8006dee:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006df0:	2180      	movs	r1, #128	@ 0x80
 8006df2:	6878      	ldr	r0, [r7, #4]
 8006df4:	f002 fde0 	bl	80099b8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006df8:	2100      	movs	r1, #0
 8006dfa:	6878      	ldr	r0, [r7, #4]
 8006dfc:	f002 fddc 	bl	80099b8 <USBD_LL_StallEP>
}
 8006e00:	bf00      	nop
 8006e02:	3708      	adds	r7, #8
 8006e04:	46bd      	mov	sp, r7
 8006e06:	bd80      	pop	{r7, pc}

08006e08 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b086      	sub	sp, #24
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	60f8      	str	r0, [r7, #12]
 8006e10:	60b9      	str	r1, [r7, #8]
 8006e12:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006e14:	2300      	movs	r3, #0
 8006e16:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d042      	beq.n	8006ea4 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8006e22:	6938      	ldr	r0, [r7, #16]
 8006e24:	f000 f842 	bl	8006eac <USBD_GetLen>
 8006e28:	4603      	mov	r3, r0
 8006e2a:	3301      	adds	r3, #1
 8006e2c:	005b      	lsls	r3, r3, #1
 8006e2e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006e32:	d808      	bhi.n	8006e46 <USBD_GetString+0x3e>
 8006e34:	6938      	ldr	r0, [r7, #16]
 8006e36:	f000 f839 	bl	8006eac <USBD_GetLen>
 8006e3a:	4603      	mov	r3, r0
 8006e3c:	3301      	adds	r3, #1
 8006e3e:	b29b      	uxth	r3, r3
 8006e40:	005b      	lsls	r3, r3, #1
 8006e42:	b29a      	uxth	r2, r3
 8006e44:	e001      	b.n	8006e4a <USBD_GetString+0x42>
 8006e46:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006e4e:	7dfb      	ldrb	r3, [r7, #23]
 8006e50:	68ba      	ldr	r2, [r7, #8]
 8006e52:	4413      	add	r3, r2
 8006e54:	687a      	ldr	r2, [r7, #4]
 8006e56:	7812      	ldrb	r2, [r2, #0]
 8006e58:	701a      	strb	r2, [r3, #0]
  idx++;
 8006e5a:	7dfb      	ldrb	r3, [r7, #23]
 8006e5c:	3301      	adds	r3, #1
 8006e5e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006e60:	7dfb      	ldrb	r3, [r7, #23]
 8006e62:	68ba      	ldr	r2, [r7, #8]
 8006e64:	4413      	add	r3, r2
 8006e66:	2203      	movs	r2, #3
 8006e68:	701a      	strb	r2, [r3, #0]
  idx++;
 8006e6a:	7dfb      	ldrb	r3, [r7, #23]
 8006e6c:	3301      	adds	r3, #1
 8006e6e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006e70:	e013      	b.n	8006e9a <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8006e72:	7dfb      	ldrb	r3, [r7, #23]
 8006e74:	68ba      	ldr	r2, [r7, #8]
 8006e76:	4413      	add	r3, r2
 8006e78:	693a      	ldr	r2, [r7, #16]
 8006e7a:	7812      	ldrb	r2, [r2, #0]
 8006e7c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006e7e:	693b      	ldr	r3, [r7, #16]
 8006e80:	3301      	adds	r3, #1
 8006e82:	613b      	str	r3, [r7, #16]
    idx++;
 8006e84:	7dfb      	ldrb	r3, [r7, #23]
 8006e86:	3301      	adds	r3, #1
 8006e88:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006e8a:	7dfb      	ldrb	r3, [r7, #23]
 8006e8c:	68ba      	ldr	r2, [r7, #8]
 8006e8e:	4413      	add	r3, r2
 8006e90:	2200      	movs	r2, #0
 8006e92:	701a      	strb	r2, [r3, #0]
    idx++;
 8006e94:	7dfb      	ldrb	r3, [r7, #23]
 8006e96:	3301      	adds	r3, #1
 8006e98:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006e9a:	693b      	ldr	r3, [r7, #16]
 8006e9c:	781b      	ldrb	r3, [r3, #0]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d1e7      	bne.n	8006e72 <USBD_GetString+0x6a>
 8006ea2:	e000      	b.n	8006ea6 <USBD_GetString+0x9e>
    return;
 8006ea4:	bf00      	nop
  }
}
 8006ea6:	3718      	adds	r7, #24
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	bd80      	pop	{r7, pc}

08006eac <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006eac:	b480      	push	{r7}
 8006eae:	b085      	sub	sp, #20
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006ebc:	e005      	b.n	8006eca <USBD_GetLen+0x1e>
  {
    len++;
 8006ebe:	7bfb      	ldrb	r3, [r7, #15]
 8006ec0:	3301      	adds	r3, #1
 8006ec2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006ec4:	68bb      	ldr	r3, [r7, #8]
 8006ec6:	3301      	adds	r3, #1
 8006ec8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006eca:	68bb      	ldr	r3, [r7, #8]
 8006ecc:	781b      	ldrb	r3, [r3, #0]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d1f5      	bne.n	8006ebe <USBD_GetLen+0x12>
  }

  return len;
 8006ed2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	3714      	adds	r7, #20
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ede:	4770      	bx	lr

08006ee0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b084      	sub	sp, #16
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	60f8      	str	r0, [r7, #12]
 8006ee8:	60b9      	str	r1, [r7, #8]
 8006eea:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	2202      	movs	r2, #2
 8006ef0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	687a      	ldr	r2, [r7, #4]
 8006ef8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	687a      	ldr	r2, [r7, #4]
 8006efe:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	68ba      	ldr	r2, [r7, #8]
 8006f04:	2100      	movs	r1, #0
 8006f06:	68f8      	ldr	r0, [r7, #12]
 8006f08:	f002 fddf 	bl	8009aca <USBD_LL_Transmit>

  return USBD_OK;
 8006f0c:	2300      	movs	r3, #0
}
 8006f0e:	4618      	mov	r0, r3
 8006f10:	3710      	adds	r7, #16
 8006f12:	46bd      	mov	sp, r7
 8006f14:	bd80      	pop	{r7, pc}

08006f16 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006f16:	b580      	push	{r7, lr}
 8006f18:	b084      	sub	sp, #16
 8006f1a:	af00      	add	r7, sp, #0
 8006f1c:	60f8      	str	r0, [r7, #12]
 8006f1e:	60b9      	str	r1, [r7, #8]
 8006f20:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	68ba      	ldr	r2, [r7, #8]
 8006f26:	2100      	movs	r1, #0
 8006f28:	68f8      	ldr	r0, [r7, #12]
 8006f2a:	f002 fdce 	bl	8009aca <USBD_LL_Transmit>

  return USBD_OK;
 8006f2e:	2300      	movs	r3, #0
}
 8006f30:	4618      	mov	r0, r3
 8006f32:	3710      	adds	r7, #16
 8006f34:	46bd      	mov	sp, r7
 8006f36:	bd80      	pop	{r7, pc}

08006f38 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b084      	sub	sp, #16
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	60f8      	str	r0, [r7, #12]
 8006f40:	60b9      	str	r1, [r7, #8]
 8006f42:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	2203      	movs	r2, #3
 8006f48:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	687a      	ldr	r2, [r7, #4]
 8006f50:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	687a      	ldr	r2, [r7, #4]
 8006f58:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	68ba      	ldr	r2, [r7, #8]
 8006f60:	2100      	movs	r1, #0
 8006f62:	68f8      	ldr	r0, [r7, #12]
 8006f64:	f002 fdd2 	bl	8009b0c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006f68:	2300      	movs	r3, #0
}
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	3710      	adds	r7, #16
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	bd80      	pop	{r7, pc}

08006f72 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006f72:	b580      	push	{r7, lr}
 8006f74:	b084      	sub	sp, #16
 8006f76:	af00      	add	r7, sp, #0
 8006f78:	60f8      	str	r0, [r7, #12]
 8006f7a:	60b9      	str	r1, [r7, #8]
 8006f7c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	68ba      	ldr	r2, [r7, #8]
 8006f82:	2100      	movs	r1, #0
 8006f84:	68f8      	ldr	r0, [r7, #12]
 8006f86:	f002 fdc1 	bl	8009b0c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006f8a:	2300      	movs	r3, #0
}
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	3710      	adds	r7, #16
 8006f90:	46bd      	mov	sp, r7
 8006f92:	bd80      	pop	{r7, pc}

08006f94 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b082      	sub	sp, #8
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2204      	movs	r2, #4
 8006fa0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	2100      	movs	r1, #0
 8006faa:	6878      	ldr	r0, [r7, #4]
 8006fac:	f002 fd8d 	bl	8009aca <USBD_LL_Transmit>

  return USBD_OK;
 8006fb0:	2300      	movs	r3, #0
}
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	3708      	adds	r7, #8
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	bd80      	pop	{r7, pc}

08006fba <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006fba:	b580      	push	{r7, lr}
 8006fbc:	b082      	sub	sp, #8
 8006fbe:	af00      	add	r7, sp, #0
 8006fc0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2205      	movs	r2, #5
 8006fc6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006fca:	2300      	movs	r3, #0
 8006fcc:	2200      	movs	r2, #0
 8006fce:	2100      	movs	r1, #0
 8006fd0:	6878      	ldr	r0, [r7, #4]
 8006fd2:	f002 fd9b 	bl	8009b0c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006fd6:	2300      	movs	r3, #0
}
 8006fd8:	4618      	mov	r0, r3
 8006fda:	3708      	adds	r7, #8
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	bd80      	pop	{r7, pc}

08006fe0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006fe4:	f000 ff32 	bl	8007e4c <vTaskStartScheduler>
  
  return osOK;
 8006fe8:	2300      	movs	r3, #0
}
 8006fea:	4618      	mov	r0, r3
 8006fec:	bd80      	pop	{r7, pc}

08006fee <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8006fee:	b580      	push	{r7, lr}
 8006ff0:	b086      	sub	sp, #24
 8006ff2:	af02      	add	r7, sp, #8
 8006ff4:	6078      	str	r0, [r7, #4]
 8006ff6:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	685b      	ldr	r3, [r3, #4]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d00f      	beq.n	8007020 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	2b01      	cmp	r3, #1
 8007004:	d10a      	bne.n	800701c <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	685b      	ldr	r3, [r3, #4]
 800700a:	2203      	movs	r2, #3
 800700c:	9200      	str	r2, [sp, #0]
 800700e:	2200      	movs	r2, #0
 8007010:	2100      	movs	r1, #0
 8007012:	2001      	movs	r0, #1
 8007014:	f000 fabc 	bl	8007590 <xQueueGenericCreateStatic>
 8007018:	4603      	mov	r3, r0
 800701a:	e016      	b.n	800704a <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800701c:	2300      	movs	r3, #0
 800701e:	e014      	b.n	800704a <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	2b01      	cmp	r3, #1
 8007024:	d110      	bne.n	8007048 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8007026:	2203      	movs	r2, #3
 8007028:	2100      	movs	r1, #0
 800702a:	2001      	movs	r0, #1
 800702c:	f000 fb2d 	bl	800768a <xQueueGenericCreate>
 8007030:	60f8      	str	r0, [r7, #12]
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d005      	beq.n	8007044 <osSemaphoreCreate+0x56>
 8007038:	2300      	movs	r3, #0
 800703a:	2200      	movs	r2, #0
 800703c:	2100      	movs	r1, #0
 800703e:	68f8      	ldr	r0, [r7, #12]
 8007040:	f000 fb7e 	bl	8007740 <xQueueGenericSend>
      return sema;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	e000      	b.n	800704a <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8007048:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800704a:	4618      	mov	r0, r3
 800704c:	3710      	adds	r7, #16
 800704e:	46bd      	mov	sp, r7
 8007050:	bd80      	pop	{r7, pc}
	...

08007054 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b090      	sub	sp, #64	@ 0x40
 8007058:	af00      	add	r7, sp, #0
 800705a:	60f8      	str	r0, [r7, #12]
 800705c:	60b9      	str	r1, [r7, #8]
 800705e:	607a      	str	r2, [r7, #4]
 8007060:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	637b      	str	r3, [r7, #52]	@ 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8007066:	2300      	movs	r3, #0
 8007068:	63bb      	str	r3, [r7, #56]	@ 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 800706a:	2300      	movs	r3, #0
 800706c:	633b      	str	r3, [r7, #48]	@ 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d10b      	bne.n	800708c <xEventGroupWaitBits+0x38>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007074:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007078:	f383 8811 	msr	BASEPRI, r3
 800707c:	f3bf 8f6f 	isb	sy
 8007080:	f3bf 8f4f 	dsb	sy
 8007084:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007086:	bf00      	nop
 8007088:	bf00      	nop
 800708a:	e7fd      	b.n	8007088 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800708c:	68bb      	ldr	r3, [r7, #8]
 800708e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007092:	d30b      	bcc.n	80070ac <xEventGroupWaitBits+0x58>
	__asm volatile
 8007094:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007098:	f383 8811 	msr	BASEPRI, r3
 800709c:	f3bf 8f6f 	isb	sy
 80070a0:	f3bf 8f4f 	dsb	sy
 80070a4:	61fb      	str	r3, [r7, #28]
}
 80070a6:	bf00      	nop
 80070a8:	bf00      	nop
 80070aa:	e7fd      	b.n	80070a8 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 80070ac:	68bb      	ldr	r3, [r7, #8]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d10b      	bne.n	80070ca <xEventGroupWaitBits+0x76>
	__asm volatile
 80070b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070b6:	f383 8811 	msr	BASEPRI, r3
 80070ba:	f3bf 8f6f 	isb	sy
 80070be:	f3bf 8f4f 	dsb	sy
 80070c2:	61bb      	str	r3, [r7, #24]
}
 80070c4:	bf00      	nop
 80070c6:	bf00      	nop
 80070c8:	e7fd      	b.n	80070c6 <xEventGroupWaitBits+0x72>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80070ca:	f001 fb81 	bl	80087d0 <xTaskGetSchedulerState>
 80070ce:	4603      	mov	r3, r0
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d102      	bne.n	80070da <xEventGroupWaitBits+0x86>
 80070d4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d101      	bne.n	80070de <xEventGroupWaitBits+0x8a>
 80070da:	2301      	movs	r3, #1
 80070dc:	e000      	b.n	80070e0 <xEventGroupWaitBits+0x8c>
 80070de:	2300      	movs	r3, #0
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d10b      	bne.n	80070fc <xEventGroupWaitBits+0xa8>
	__asm volatile
 80070e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070e8:	f383 8811 	msr	BASEPRI, r3
 80070ec:	f3bf 8f6f 	isb	sy
 80070f0:	f3bf 8f4f 	dsb	sy
 80070f4:	617b      	str	r3, [r7, #20]
}
 80070f6:	bf00      	nop
 80070f8:	bf00      	nop
 80070fa:	e7fd      	b.n	80070f8 <xEventGroupWaitBits+0xa4>
	}
	#endif

	vTaskSuspendAll();
 80070fc:	f000 ff10 	bl	8007f20 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8007100:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8007106:	683a      	ldr	r2, [r7, #0]
 8007108:	68b9      	ldr	r1, [r7, #8]
 800710a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800710c:	f000 f900 	bl	8007310 <prvTestWaitCondition>
 8007110:	62b8      	str	r0, [r7, #40]	@ 0x28

		if( xWaitConditionMet != pdFALSE )
 8007112:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007114:	2b00      	cmp	r3, #0
 8007116:	d00e      	beq.n	8007136 <xEventGroupWaitBits+0xe2>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8007118:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800711a:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTicksToWait = ( TickType_t ) 0;
 800711c:	2300      	movs	r3, #0
 800711e:	64bb      	str	r3, [r7, #72]	@ 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d028      	beq.n	8007178 <xEventGroupWaitBits+0x124>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8007126:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007128:	681a      	ldr	r2, [r3, #0]
 800712a:	68bb      	ldr	r3, [r7, #8]
 800712c:	43db      	mvns	r3, r3
 800712e:	401a      	ands	r2, r3
 8007130:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007132:	601a      	str	r2, [r3, #0]
 8007134:	e020      	b.n	8007178 <xEventGroupWaitBits+0x124>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8007136:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007138:	2b00      	cmp	r3, #0
 800713a:	d104      	bne.n	8007146 <xEventGroupWaitBits+0xf2>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 800713c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800713e:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTimeoutOccurred = pdTRUE;
 8007140:	2301      	movs	r3, #1
 8007142:	633b      	str	r3, [r7, #48]	@ 0x30
 8007144:	e018      	b.n	8007178 <xEventGroupWaitBits+0x124>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d003      	beq.n	8007154 <xEventGroupWaitBits+0x100>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 800714c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800714e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007152:	63bb      	str	r3, [r7, #56]	@ 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d003      	beq.n	8007162 <xEventGroupWaitBits+0x10e>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 800715a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800715c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007160:	63bb      	str	r3, [r7, #56]	@ 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8007162:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007164:	1d18      	adds	r0, r3, #4
 8007166:	68ba      	ldr	r2, [r7, #8]
 8007168:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800716a:	4313      	orrs	r3, r2
 800716c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800716e:	4619      	mov	r1, r3
 8007170:	f001 f8c6 	bl	8008300 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8007174:	2300      	movs	r3, #0
 8007176:	63fb      	str	r3, [r7, #60]	@ 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8007178:	f000 fee0 	bl	8007f3c <xTaskResumeAll>
 800717c:	6278      	str	r0, [r7, #36]	@ 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 800717e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007180:	2b00      	cmp	r3, #0
 8007182:	d031      	beq.n	80071e8 <xEventGroupWaitBits+0x194>
	{
		if( xAlreadyYielded == pdFALSE )
 8007184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007186:	2b00      	cmp	r3, #0
 8007188:	d107      	bne.n	800719a <xEventGroupWaitBits+0x146>
		{
			portYIELD_WITHIN_API();
 800718a:	4b1a      	ldr	r3, [pc, #104]	@ (80071f4 <xEventGroupWaitBits+0x1a0>)
 800718c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007190:	601a      	str	r2, [r3, #0]
 8007192:	f3bf 8f4f 	dsb	sy
 8007196:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 800719a:	f001 fbbf 	bl	800891c <uxTaskResetEventItemValue>
 800719e:	63f8      	str	r0, [r7, #60]	@ 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 80071a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80071a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d11a      	bne.n	80071e0 <xEventGroupWaitBits+0x18c>
		{
			taskENTER_CRITICAL();
 80071aa:	f001 fd65 	bl	8008c78 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 80071ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	63fb      	str	r3, [r7, #60]	@ 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 80071b4:	683a      	ldr	r2, [r7, #0]
 80071b6:	68b9      	ldr	r1, [r7, #8]
 80071b8:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80071ba:	f000 f8a9 	bl	8007310 <prvTestWaitCondition>
 80071be:	4603      	mov	r3, r0
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d009      	beq.n	80071d8 <xEventGroupWaitBits+0x184>
				{
					if( xClearOnExit != pdFALSE )
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d006      	beq.n	80071d8 <xEventGroupWaitBits+0x184>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80071ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071cc:	681a      	ldr	r2, [r3, #0]
 80071ce:	68bb      	ldr	r3, [r7, #8]
 80071d0:	43db      	mvns	r3, r3
 80071d2:	401a      	ands	r2, r3
 80071d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071d6:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 80071d8:	2301      	movs	r3, #1
 80071da:	633b      	str	r3, [r7, #48]	@ 0x30
			}
			taskEXIT_CRITICAL();
 80071dc:	f001 fd7e 	bl	8008cdc <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 80071e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80071e2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80071e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 80071e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80071ea:	4618      	mov	r0, r3
 80071ec:	3740      	adds	r7, #64	@ 0x40
 80071ee:	46bd      	mov	sp, r7
 80071f0:	bd80      	pop	{r7, pc}
 80071f2:	bf00      	nop
 80071f4:	e000ed04 	.word	0xe000ed04

080071f8 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b08e      	sub	sp, #56	@ 0x38
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
 8007200:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8007202:	2300      	movs	r3, #0
 8007204:	633b      	str	r3, [r7, #48]	@ 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	62bb      	str	r3, [r7, #40]	@ 0x28
BaseType_t xMatchFound = pdFALSE;
 800720a:	2300      	movs	r3, #0
 800720c:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d10b      	bne.n	800722c <xEventGroupSetBits+0x34>
	__asm volatile
 8007214:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007218:	f383 8811 	msr	BASEPRI, r3
 800721c:	f3bf 8f6f 	isb	sy
 8007220:	f3bf 8f4f 	dsb	sy
 8007224:	613b      	str	r3, [r7, #16]
}
 8007226:	bf00      	nop
 8007228:	bf00      	nop
 800722a:	e7fd      	b.n	8007228 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007232:	d30b      	bcc.n	800724c <xEventGroupSetBits+0x54>
	__asm volatile
 8007234:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007238:	f383 8811 	msr	BASEPRI, r3
 800723c:	f3bf 8f6f 	isb	sy
 8007240:	f3bf 8f4f 	dsb	sy
 8007244:	60fb      	str	r3, [r7, #12]
}
 8007246:	bf00      	nop
 8007248:	bf00      	nop
 800724a:	e7fd      	b.n	8007248 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 800724c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800724e:	3304      	adds	r3, #4
 8007250:	627b      	str	r3, [r7, #36]	@ 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007254:	3308      	adds	r3, #8
 8007256:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8007258:	f000 fe62 	bl	8007f20 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 800725c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800725e:	68db      	ldr	r3, [r3, #12]
 8007260:	637b      	str	r3, [r7, #52]	@ 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8007262:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007264:	681a      	ldr	r2, [r3, #0]
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	431a      	orrs	r2, r3
 800726a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800726c:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 800726e:	e03c      	b.n	80072ea <xEventGroupSetBits+0xf2>
		{
			pxNext = listGET_NEXT( pxListItem );
 8007270:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007272:	685b      	ldr	r3, [r3, #4]
 8007274:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8007276:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 800727c:	2300      	movs	r3, #0
 800727e:	62fb      	str	r3, [r7, #44]	@ 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8007280:	69bb      	ldr	r3, [r7, #24]
 8007282:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8007286:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8007288:	69bb      	ldr	r3, [r7, #24]
 800728a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800728e:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8007290:	697b      	ldr	r3, [r7, #20]
 8007292:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007296:	2b00      	cmp	r3, #0
 8007298:	d108      	bne.n	80072ac <xEventGroupSetBits+0xb4>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 800729a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800729c:	681a      	ldr	r2, [r3, #0]
 800729e:	69bb      	ldr	r3, [r7, #24]
 80072a0:	4013      	ands	r3, r2
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d00b      	beq.n	80072be <xEventGroupSetBits+0xc6>
				{
					xMatchFound = pdTRUE;
 80072a6:	2301      	movs	r3, #1
 80072a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80072aa:	e008      	b.n	80072be <xEventGroupSetBits+0xc6>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 80072ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072ae:	681a      	ldr	r2, [r3, #0]
 80072b0:	69bb      	ldr	r3, [r7, #24]
 80072b2:	4013      	ands	r3, r2
 80072b4:	69ba      	ldr	r2, [r7, #24]
 80072b6:	429a      	cmp	r2, r3
 80072b8:	d101      	bne.n	80072be <xEventGroupSetBits+0xc6>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 80072ba:	2301      	movs	r3, #1
 80072bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 80072be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d010      	beq.n	80072e6 <xEventGroupSetBits+0xee>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 80072c4:	697b      	ldr	r3, [r7, #20]
 80072c6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d003      	beq.n	80072d6 <xEventGroupSetBits+0xde>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 80072ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80072d0:	69bb      	ldr	r3, [r7, #24]
 80072d2:	4313      	orrs	r3, r2
 80072d4:	633b      	str	r3, [r7, #48]	@ 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 80072d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80072de:	4619      	mov	r1, r3
 80072e0:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80072e2:	f001 f8af 	bl	8008444 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 80072e6:	69fb      	ldr	r3, [r7, #28]
 80072e8:	637b      	str	r3, [r7, #52]	@ 0x34
		while( pxListItem != pxListEnd )
 80072ea:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80072ec:	6a3b      	ldr	r3, [r7, #32]
 80072ee:	429a      	cmp	r2, r3
 80072f0:	d1be      	bne.n	8007270 <xEventGroupSetBits+0x78>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 80072f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072f4:	681a      	ldr	r2, [r3, #0]
 80072f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072f8:	43db      	mvns	r3, r3
 80072fa:	401a      	ands	r2, r3
 80072fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072fe:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8007300:	f000 fe1c 	bl	8007f3c <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8007304:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007306:	681b      	ldr	r3, [r3, #0]
}
 8007308:	4618      	mov	r0, r3
 800730a:	3738      	adds	r7, #56	@ 0x38
 800730c:	46bd      	mov	sp, r7
 800730e:	bd80      	pop	{r7, pc}

08007310 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8007310:	b480      	push	{r7}
 8007312:	b087      	sub	sp, #28
 8007314:	af00      	add	r7, sp, #0
 8007316:	60f8      	str	r0, [r7, #12]
 8007318:	60b9      	str	r1, [r7, #8]
 800731a:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 800731c:	2300      	movs	r3, #0
 800731e:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d107      	bne.n	8007336 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8007326:	68fa      	ldr	r2, [r7, #12]
 8007328:	68bb      	ldr	r3, [r7, #8]
 800732a:	4013      	ands	r3, r2
 800732c:	2b00      	cmp	r3, #0
 800732e:	d00a      	beq.n	8007346 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8007330:	2301      	movs	r3, #1
 8007332:	617b      	str	r3, [r7, #20]
 8007334:	e007      	b.n	8007346 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8007336:	68fa      	ldr	r2, [r7, #12]
 8007338:	68bb      	ldr	r3, [r7, #8]
 800733a:	4013      	ands	r3, r2
 800733c:	68ba      	ldr	r2, [r7, #8]
 800733e:	429a      	cmp	r2, r3
 8007340:	d101      	bne.n	8007346 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8007342:	2301      	movs	r3, #1
 8007344:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8007346:	697b      	ldr	r3, [r7, #20]
}
 8007348:	4618      	mov	r0, r3
 800734a:	371c      	adds	r7, #28
 800734c:	46bd      	mov	sp, r7
 800734e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007352:	4770      	bx	lr

08007354 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007354:	b480      	push	{r7}
 8007356:	b083      	sub	sp, #12
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	f103 0208 	add.w	r2, r3, #8
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	f04f 32ff 	mov.w	r2, #4294967295
 800736c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	f103 0208 	add.w	r2, r3, #8
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	f103 0208 	add.w	r2, r3, #8
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2200      	movs	r2, #0
 8007386:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007388:	bf00      	nop
 800738a:	370c      	adds	r7, #12
 800738c:	46bd      	mov	sp, r7
 800738e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007392:	4770      	bx	lr

08007394 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007394:	b480      	push	{r7}
 8007396:	b083      	sub	sp, #12
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2200      	movs	r2, #0
 80073a0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80073a2:	bf00      	nop
 80073a4:	370c      	adds	r7, #12
 80073a6:	46bd      	mov	sp, r7
 80073a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ac:	4770      	bx	lr

080073ae <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80073ae:	b480      	push	{r7}
 80073b0:	b085      	sub	sp, #20
 80073b2:	af00      	add	r7, sp, #0
 80073b4:	6078      	str	r0, [r7, #4]
 80073b6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	685b      	ldr	r3, [r3, #4]
 80073bc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	68fa      	ldr	r2, [r7, #12]
 80073c2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	689a      	ldr	r2, [r3, #8]
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	689b      	ldr	r3, [r3, #8]
 80073d0:	683a      	ldr	r2, [r7, #0]
 80073d2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	683a      	ldr	r2, [r7, #0]
 80073d8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80073da:	683b      	ldr	r3, [r7, #0]
 80073dc:	687a      	ldr	r2, [r7, #4]
 80073de:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	1c5a      	adds	r2, r3, #1
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	601a      	str	r2, [r3, #0]
}
 80073ea:	bf00      	nop
 80073ec:	3714      	adds	r7, #20
 80073ee:	46bd      	mov	sp, r7
 80073f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f4:	4770      	bx	lr

080073f6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80073f6:	b480      	push	{r7}
 80073f8:	b085      	sub	sp, #20
 80073fa:	af00      	add	r7, sp, #0
 80073fc:	6078      	str	r0, [r7, #4]
 80073fe:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007406:	68bb      	ldr	r3, [r7, #8]
 8007408:	f1b3 3fff 	cmp.w	r3, #4294967295
 800740c:	d103      	bne.n	8007416 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	691b      	ldr	r3, [r3, #16]
 8007412:	60fb      	str	r3, [r7, #12]
 8007414:	e00c      	b.n	8007430 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	3308      	adds	r3, #8
 800741a:	60fb      	str	r3, [r7, #12]
 800741c:	e002      	b.n	8007424 <vListInsert+0x2e>
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	685b      	ldr	r3, [r3, #4]
 8007422:	60fb      	str	r3, [r7, #12]
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	685b      	ldr	r3, [r3, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	68ba      	ldr	r2, [r7, #8]
 800742c:	429a      	cmp	r2, r3
 800742e:	d2f6      	bcs.n	800741e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	685a      	ldr	r2, [r3, #4]
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	685b      	ldr	r3, [r3, #4]
 800743c:	683a      	ldr	r2, [r7, #0]
 800743e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	68fa      	ldr	r2, [r7, #12]
 8007444:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	683a      	ldr	r2, [r7, #0]
 800744a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	687a      	ldr	r2, [r7, #4]
 8007450:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	1c5a      	adds	r2, r3, #1
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	601a      	str	r2, [r3, #0]
}
 800745c:	bf00      	nop
 800745e:	3714      	adds	r7, #20
 8007460:	46bd      	mov	sp, r7
 8007462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007466:	4770      	bx	lr

08007468 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007468:	b480      	push	{r7}
 800746a:	b085      	sub	sp, #20
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	691b      	ldr	r3, [r3, #16]
 8007474:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	685b      	ldr	r3, [r3, #4]
 800747a:	687a      	ldr	r2, [r7, #4]
 800747c:	6892      	ldr	r2, [r2, #8]
 800747e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	689b      	ldr	r3, [r3, #8]
 8007484:	687a      	ldr	r2, [r7, #4]
 8007486:	6852      	ldr	r2, [r2, #4]
 8007488:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	685b      	ldr	r3, [r3, #4]
 800748e:	687a      	ldr	r2, [r7, #4]
 8007490:	429a      	cmp	r2, r3
 8007492:	d103      	bne.n	800749c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	689a      	ldr	r2, [r3, #8]
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2200      	movs	r2, #0
 80074a0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	1e5a      	subs	r2, r3, #1
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	681b      	ldr	r3, [r3, #0]
}
 80074b0:	4618      	mov	r0, r3
 80074b2:	3714      	adds	r7, #20
 80074b4:	46bd      	mov	sp, r7
 80074b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ba:	4770      	bx	lr

080074bc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b084      	sub	sp, #16
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
 80074c4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d10b      	bne.n	80074e8 <xQueueGenericReset+0x2c>
	__asm volatile
 80074d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074d4:	f383 8811 	msr	BASEPRI, r3
 80074d8:	f3bf 8f6f 	isb	sy
 80074dc:	f3bf 8f4f 	dsb	sy
 80074e0:	60bb      	str	r3, [r7, #8]
}
 80074e2:	bf00      	nop
 80074e4:	bf00      	nop
 80074e6:	e7fd      	b.n	80074e4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80074e8:	f001 fbc6 	bl	8008c78 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	681a      	ldr	r2, [r3, #0]
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074f4:	68f9      	ldr	r1, [r7, #12]
 80074f6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80074f8:	fb01 f303 	mul.w	r3, r1, r3
 80074fc:	441a      	add	r2, r3
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	2200      	movs	r2, #0
 8007506:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	681a      	ldr	r2, [r3, #0]
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	681a      	ldr	r2, [r3, #0]
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007518:	3b01      	subs	r3, #1
 800751a:	68f9      	ldr	r1, [r7, #12]
 800751c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800751e:	fb01 f303 	mul.w	r3, r1, r3
 8007522:	441a      	add	r2, r3
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	22ff      	movs	r2, #255	@ 0xff
 800752c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	22ff      	movs	r2, #255	@ 0xff
 8007534:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d114      	bne.n	8007568 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	691b      	ldr	r3, [r3, #16]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d01a      	beq.n	800757c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	3310      	adds	r3, #16
 800754a:	4618      	mov	r0, r3
 800754c:	f000 ff16 	bl	800837c <xTaskRemoveFromEventList>
 8007550:	4603      	mov	r3, r0
 8007552:	2b00      	cmp	r3, #0
 8007554:	d012      	beq.n	800757c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007556:	4b0d      	ldr	r3, [pc, #52]	@ (800758c <xQueueGenericReset+0xd0>)
 8007558:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800755c:	601a      	str	r2, [r3, #0]
 800755e:	f3bf 8f4f 	dsb	sy
 8007562:	f3bf 8f6f 	isb	sy
 8007566:	e009      	b.n	800757c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	3310      	adds	r3, #16
 800756c:	4618      	mov	r0, r3
 800756e:	f7ff fef1 	bl	8007354 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	3324      	adds	r3, #36	@ 0x24
 8007576:	4618      	mov	r0, r3
 8007578:	f7ff feec 	bl	8007354 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800757c:	f001 fbae 	bl	8008cdc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007580:	2301      	movs	r3, #1
}
 8007582:	4618      	mov	r0, r3
 8007584:	3710      	adds	r7, #16
 8007586:	46bd      	mov	sp, r7
 8007588:	bd80      	pop	{r7, pc}
 800758a:	bf00      	nop
 800758c:	e000ed04 	.word	0xe000ed04

08007590 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007590:	b580      	push	{r7, lr}
 8007592:	b08e      	sub	sp, #56	@ 0x38
 8007594:	af02      	add	r7, sp, #8
 8007596:	60f8      	str	r0, [r7, #12]
 8007598:	60b9      	str	r1, [r7, #8]
 800759a:	607a      	str	r2, [r7, #4]
 800759c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d10b      	bne.n	80075bc <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80075a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075a8:	f383 8811 	msr	BASEPRI, r3
 80075ac:	f3bf 8f6f 	isb	sy
 80075b0:	f3bf 8f4f 	dsb	sy
 80075b4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80075b6:	bf00      	nop
 80075b8:	bf00      	nop
 80075ba:	e7fd      	b.n	80075b8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d10b      	bne.n	80075da <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80075c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075c6:	f383 8811 	msr	BASEPRI, r3
 80075ca:	f3bf 8f6f 	isb	sy
 80075ce:	f3bf 8f4f 	dsb	sy
 80075d2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80075d4:	bf00      	nop
 80075d6:	bf00      	nop
 80075d8:	e7fd      	b.n	80075d6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d002      	beq.n	80075e6 <xQueueGenericCreateStatic+0x56>
 80075e0:	68bb      	ldr	r3, [r7, #8]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d001      	beq.n	80075ea <xQueueGenericCreateStatic+0x5a>
 80075e6:	2301      	movs	r3, #1
 80075e8:	e000      	b.n	80075ec <xQueueGenericCreateStatic+0x5c>
 80075ea:	2300      	movs	r3, #0
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d10b      	bne.n	8007608 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80075f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075f4:	f383 8811 	msr	BASEPRI, r3
 80075f8:	f3bf 8f6f 	isb	sy
 80075fc:	f3bf 8f4f 	dsb	sy
 8007600:	623b      	str	r3, [r7, #32]
}
 8007602:	bf00      	nop
 8007604:	bf00      	nop
 8007606:	e7fd      	b.n	8007604 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d102      	bne.n	8007614 <xQueueGenericCreateStatic+0x84>
 800760e:	68bb      	ldr	r3, [r7, #8]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d101      	bne.n	8007618 <xQueueGenericCreateStatic+0x88>
 8007614:	2301      	movs	r3, #1
 8007616:	e000      	b.n	800761a <xQueueGenericCreateStatic+0x8a>
 8007618:	2300      	movs	r3, #0
 800761a:	2b00      	cmp	r3, #0
 800761c:	d10b      	bne.n	8007636 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800761e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007622:	f383 8811 	msr	BASEPRI, r3
 8007626:	f3bf 8f6f 	isb	sy
 800762a:	f3bf 8f4f 	dsb	sy
 800762e:	61fb      	str	r3, [r7, #28]
}
 8007630:	bf00      	nop
 8007632:	bf00      	nop
 8007634:	e7fd      	b.n	8007632 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007636:	2348      	movs	r3, #72	@ 0x48
 8007638:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800763a:	697b      	ldr	r3, [r7, #20]
 800763c:	2b48      	cmp	r3, #72	@ 0x48
 800763e:	d00b      	beq.n	8007658 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8007640:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007644:	f383 8811 	msr	BASEPRI, r3
 8007648:	f3bf 8f6f 	isb	sy
 800764c:	f3bf 8f4f 	dsb	sy
 8007650:	61bb      	str	r3, [r7, #24]
}
 8007652:	bf00      	nop
 8007654:	bf00      	nop
 8007656:	e7fd      	b.n	8007654 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007658:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800765e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007660:	2b00      	cmp	r3, #0
 8007662:	d00d      	beq.n	8007680 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007664:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007666:	2201      	movs	r2, #1
 8007668:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800766c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8007670:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007672:	9300      	str	r3, [sp, #0]
 8007674:	4613      	mov	r3, r2
 8007676:	687a      	ldr	r2, [r7, #4]
 8007678:	68b9      	ldr	r1, [r7, #8]
 800767a:	68f8      	ldr	r0, [r7, #12]
 800767c:	f000 f840 	bl	8007700 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007680:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8007682:	4618      	mov	r0, r3
 8007684:	3730      	adds	r7, #48	@ 0x30
 8007686:	46bd      	mov	sp, r7
 8007688:	bd80      	pop	{r7, pc}

0800768a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800768a:	b580      	push	{r7, lr}
 800768c:	b08a      	sub	sp, #40	@ 0x28
 800768e:	af02      	add	r7, sp, #8
 8007690:	60f8      	str	r0, [r7, #12]
 8007692:	60b9      	str	r1, [r7, #8]
 8007694:	4613      	mov	r3, r2
 8007696:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d10b      	bne.n	80076b6 <xQueueGenericCreate+0x2c>
	__asm volatile
 800769e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076a2:	f383 8811 	msr	BASEPRI, r3
 80076a6:	f3bf 8f6f 	isb	sy
 80076aa:	f3bf 8f4f 	dsb	sy
 80076ae:	613b      	str	r3, [r7, #16]
}
 80076b0:	bf00      	nop
 80076b2:	bf00      	nop
 80076b4:	e7fd      	b.n	80076b2 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	68ba      	ldr	r2, [r7, #8]
 80076ba:	fb02 f303 	mul.w	r3, r2, r3
 80076be:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80076c0:	69fb      	ldr	r3, [r7, #28]
 80076c2:	3348      	adds	r3, #72	@ 0x48
 80076c4:	4618      	mov	r0, r3
 80076c6:	f001 fbb7 	bl	8008e38 <pvPortMalloc>
 80076ca:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80076cc:	69bb      	ldr	r3, [r7, #24]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d011      	beq.n	80076f6 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80076d2:	69bb      	ldr	r3, [r7, #24]
 80076d4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80076d6:	697b      	ldr	r3, [r7, #20]
 80076d8:	3348      	adds	r3, #72	@ 0x48
 80076da:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80076dc:	69bb      	ldr	r3, [r7, #24]
 80076de:	2200      	movs	r2, #0
 80076e0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80076e4:	79fa      	ldrb	r2, [r7, #7]
 80076e6:	69bb      	ldr	r3, [r7, #24]
 80076e8:	9300      	str	r3, [sp, #0]
 80076ea:	4613      	mov	r3, r2
 80076ec:	697a      	ldr	r2, [r7, #20]
 80076ee:	68b9      	ldr	r1, [r7, #8]
 80076f0:	68f8      	ldr	r0, [r7, #12]
 80076f2:	f000 f805 	bl	8007700 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80076f6:	69bb      	ldr	r3, [r7, #24]
	}
 80076f8:	4618      	mov	r0, r3
 80076fa:	3720      	adds	r7, #32
 80076fc:	46bd      	mov	sp, r7
 80076fe:	bd80      	pop	{r7, pc}

08007700 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007700:	b580      	push	{r7, lr}
 8007702:	b084      	sub	sp, #16
 8007704:	af00      	add	r7, sp, #0
 8007706:	60f8      	str	r0, [r7, #12]
 8007708:	60b9      	str	r1, [r7, #8]
 800770a:	607a      	str	r2, [r7, #4]
 800770c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800770e:	68bb      	ldr	r3, [r7, #8]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d103      	bne.n	800771c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007714:	69bb      	ldr	r3, [r7, #24]
 8007716:	69ba      	ldr	r2, [r7, #24]
 8007718:	601a      	str	r2, [r3, #0]
 800771a:	e002      	b.n	8007722 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800771c:	69bb      	ldr	r3, [r7, #24]
 800771e:	687a      	ldr	r2, [r7, #4]
 8007720:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007722:	69bb      	ldr	r3, [r7, #24]
 8007724:	68fa      	ldr	r2, [r7, #12]
 8007726:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007728:	69bb      	ldr	r3, [r7, #24]
 800772a:	68ba      	ldr	r2, [r7, #8]
 800772c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800772e:	2101      	movs	r1, #1
 8007730:	69b8      	ldr	r0, [r7, #24]
 8007732:	f7ff fec3 	bl	80074bc <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007736:	bf00      	nop
 8007738:	3710      	adds	r7, #16
 800773a:	46bd      	mov	sp, r7
 800773c:	bd80      	pop	{r7, pc}
	...

08007740 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007740:	b580      	push	{r7, lr}
 8007742:	b08e      	sub	sp, #56	@ 0x38
 8007744:	af00      	add	r7, sp, #0
 8007746:	60f8      	str	r0, [r7, #12]
 8007748:	60b9      	str	r1, [r7, #8]
 800774a:	607a      	str	r2, [r7, #4]
 800774c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800774e:	2300      	movs	r3, #0
 8007750:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007756:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007758:	2b00      	cmp	r3, #0
 800775a:	d10b      	bne.n	8007774 <xQueueGenericSend+0x34>
	__asm volatile
 800775c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007760:	f383 8811 	msr	BASEPRI, r3
 8007764:	f3bf 8f6f 	isb	sy
 8007768:	f3bf 8f4f 	dsb	sy
 800776c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800776e:	bf00      	nop
 8007770:	bf00      	nop
 8007772:	e7fd      	b.n	8007770 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007774:	68bb      	ldr	r3, [r7, #8]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d103      	bne.n	8007782 <xQueueGenericSend+0x42>
 800777a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800777c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800777e:	2b00      	cmp	r3, #0
 8007780:	d101      	bne.n	8007786 <xQueueGenericSend+0x46>
 8007782:	2301      	movs	r3, #1
 8007784:	e000      	b.n	8007788 <xQueueGenericSend+0x48>
 8007786:	2300      	movs	r3, #0
 8007788:	2b00      	cmp	r3, #0
 800778a:	d10b      	bne.n	80077a4 <xQueueGenericSend+0x64>
	__asm volatile
 800778c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007790:	f383 8811 	msr	BASEPRI, r3
 8007794:	f3bf 8f6f 	isb	sy
 8007798:	f3bf 8f4f 	dsb	sy
 800779c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800779e:	bf00      	nop
 80077a0:	bf00      	nop
 80077a2:	e7fd      	b.n	80077a0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	2b02      	cmp	r3, #2
 80077a8:	d103      	bne.n	80077b2 <xQueueGenericSend+0x72>
 80077aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077ae:	2b01      	cmp	r3, #1
 80077b0:	d101      	bne.n	80077b6 <xQueueGenericSend+0x76>
 80077b2:	2301      	movs	r3, #1
 80077b4:	e000      	b.n	80077b8 <xQueueGenericSend+0x78>
 80077b6:	2300      	movs	r3, #0
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d10b      	bne.n	80077d4 <xQueueGenericSend+0x94>
	__asm volatile
 80077bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077c0:	f383 8811 	msr	BASEPRI, r3
 80077c4:	f3bf 8f6f 	isb	sy
 80077c8:	f3bf 8f4f 	dsb	sy
 80077cc:	623b      	str	r3, [r7, #32]
}
 80077ce:	bf00      	nop
 80077d0:	bf00      	nop
 80077d2:	e7fd      	b.n	80077d0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80077d4:	f000 fffc 	bl	80087d0 <xTaskGetSchedulerState>
 80077d8:	4603      	mov	r3, r0
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d102      	bne.n	80077e4 <xQueueGenericSend+0xa4>
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d101      	bne.n	80077e8 <xQueueGenericSend+0xa8>
 80077e4:	2301      	movs	r3, #1
 80077e6:	e000      	b.n	80077ea <xQueueGenericSend+0xaa>
 80077e8:	2300      	movs	r3, #0
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d10b      	bne.n	8007806 <xQueueGenericSend+0xc6>
	__asm volatile
 80077ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077f2:	f383 8811 	msr	BASEPRI, r3
 80077f6:	f3bf 8f6f 	isb	sy
 80077fa:	f3bf 8f4f 	dsb	sy
 80077fe:	61fb      	str	r3, [r7, #28]
}
 8007800:	bf00      	nop
 8007802:	bf00      	nop
 8007804:	e7fd      	b.n	8007802 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007806:	f001 fa37 	bl	8008c78 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800780a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800780c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800780e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007810:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007812:	429a      	cmp	r2, r3
 8007814:	d302      	bcc.n	800781c <xQueueGenericSend+0xdc>
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	2b02      	cmp	r3, #2
 800781a:	d129      	bne.n	8007870 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800781c:	683a      	ldr	r2, [r7, #0]
 800781e:	68b9      	ldr	r1, [r7, #8]
 8007820:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007822:	f000 f88f 	bl	8007944 <prvCopyDataToQueue>
 8007826:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007828:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800782a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800782c:	2b00      	cmp	r3, #0
 800782e:	d010      	beq.n	8007852 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007830:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007832:	3324      	adds	r3, #36	@ 0x24
 8007834:	4618      	mov	r0, r3
 8007836:	f000 fda1 	bl	800837c <xTaskRemoveFromEventList>
 800783a:	4603      	mov	r3, r0
 800783c:	2b00      	cmp	r3, #0
 800783e:	d013      	beq.n	8007868 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007840:	4b3f      	ldr	r3, [pc, #252]	@ (8007940 <xQueueGenericSend+0x200>)
 8007842:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007846:	601a      	str	r2, [r3, #0]
 8007848:	f3bf 8f4f 	dsb	sy
 800784c:	f3bf 8f6f 	isb	sy
 8007850:	e00a      	b.n	8007868 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007852:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007854:	2b00      	cmp	r3, #0
 8007856:	d007      	beq.n	8007868 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007858:	4b39      	ldr	r3, [pc, #228]	@ (8007940 <xQueueGenericSend+0x200>)
 800785a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800785e:	601a      	str	r2, [r3, #0]
 8007860:	f3bf 8f4f 	dsb	sy
 8007864:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007868:	f001 fa38 	bl	8008cdc <vPortExitCritical>
				return pdPASS;
 800786c:	2301      	movs	r3, #1
 800786e:	e063      	b.n	8007938 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d103      	bne.n	800787e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007876:	f001 fa31 	bl	8008cdc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800787a:	2300      	movs	r3, #0
 800787c:	e05c      	b.n	8007938 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800787e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007880:	2b00      	cmp	r3, #0
 8007882:	d106      	bne.n	8007892 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007884:	f107 0314 	add.w	r3, r7, #20
 8007888:	4618      	mov	r0, r3
 800788a:	f000 fe3f 	bl	800850c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800788e:	2301      	movs	r3, #1
 8007890:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007892:	f001 fa23 	bl	8008cdc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007896:	f000 fb43 	bl	8007f20 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800789a:	f001 f9ed 	bl	8008c78 <vPortEnterCritical>
 800789e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078a0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80078a4:	b25b      	sxtb	r3, r3
 80078a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078aa:	d103      	bne.n	80078b4 <xQueueGenericSend+0x174>
 80078ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078ae:	2200      	movs	r2, #0
 80078b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80078b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078b6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80078ba:	b25b      	sxtb	r3, r3
 80078bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078c0:	d103      	bne.n	80078ca <xQueueGenericSend+0x18a>
 80078c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078c4:	2200      	movs	r2, #0
 80078c6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80078ca:	f001 fa07 	bl	8008cdc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80078ce:	1d3a      	adds	r2, r7, #4
 80078d0:	f107 0314 	add.w	r3, r7, #20
 80078d4:	4611      	mov	r1, r2
 80078d6:	4618      	mov	r0, r3
 80078d8:	f000 fe2e 	bl	8008538 <xTaskCheckForTimeOut>
 80078dc:	4603      	mov	r3, r0
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d124      	bne.n	800792c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80078e2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80078e4:	f000 f8ea 	bl	8007abc <prvIsQueueFull>
 80078e8:	4603      	mov	r3, r0
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d018      	beq.n	8007920 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80078ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078f0:	3310      	adds	r3, #16
 80078f2:	687a      	ldr	r2, [r7, #4]
 80078f4:	4611      	mov	r1, r2
 80078f6:	4618      	mov	r0, r3
 80078f8:	f000 fcdc 	bl	80082b4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80078fc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80078fe:	f000 f88b 	bl	8007a18 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007902:	f000 fb1b 	bl	8007f3c <xTaskResumeAll>
 8007906:	4603      	mov	r3, r0
 8007908:	2b00      	cmp	r3, #0
 800790a:	f47f af7c 	bne.w	8007806 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800790e:	4b0c      	ldr	r3, [pc, #48]	@ (8007940 <xQueueGenericSend+0x200>)
 8007910:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007914:	601a      	str	r2, [r3, #0]
 8007916:	f3bf 8f4f 	dsb	sy
 800791a:	f3bf 8f6f 	isb	sy
 800791e:	e772      	b.n	8007806 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007920:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007922:	f000 f879 	bl	8007a18 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007926:	f000 fb09 	bl	8007f3c <xTaskResumeAll>
 800792a:	e76c      	b.n	8007806 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800792c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800792e:	f000 f873 	bl	8007a18 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007932:	f000 fb03 	bl	8007f3c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007936:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007938:	4618      	mov	r0, r3
 800793a:	3738      	adds	r7, #56	@ 0x38
 800793c:	46bd      	mov	sp, r7
 800793e:	bd80      	pop	{r7, pc}
 8007940:	e000ed04 	.word	0xe000ed04

08007944 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007944:	b580      	push	{r7, lr}
 8007946:	b086      	sub	sp, #24
 8007948:	af00      	add	r7, sp, #0
 800794a:	60f8      	str	r0, [r7, #12]
 800794c:	60b9      	str	r1, [r7, #8]
 800794e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007950:	2300      	movs	r3, #0
 8007952:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007958:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800795e:	2b00      	cmp	r3, #0
 8007960:	d10d      	bne.n	800797e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d14d      	bne.n	8007a06 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	689b      	ldr	r3, [r3, #8]
 800796e:	4618      	mov	r0, r3
 8007970:	f000 ff4c 	bl	800880c <xTaskPriorityDisinherit>
 8007974:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	2200      	movs	r2, #0
 800797a:	609a      	str	r2, [r3, #8]
 800797c:	e043      	b.n	8007a06 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d119      	bne.n	80079b8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	6858      	ldr	r0, [r3, #4]
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800798c:	461a      	mov	r2, r3
 800798e:	68b9      	ldr	r1, [r7, #8]
 8007990:	f002 f9b8 	bl	8009d04 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	685a      	ldr	r2, [r3, #4]
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800799c:	441a      	add	r2, r3
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	685a      	ldr	r2, [r3, #4]
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	689b      	ldr	r3, [r3, #8]
 80079aa:	429a      	cmp	r2, r3
 80079ac:	d32b      	bcc.n	8007a06 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	681a      	ldr	r2, [r3, #0]
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	605a      	str	r2, [r3, #4]
 80079b6:	e026      	b.n	8007a06 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	68d8      	ldr	r0, [r3, #12]
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079c0:	461a      	mov	r2, r3
 80079c2:	68b9      	ldr	r1, [r7, #8]
 80079c4:	f002 f99e 	bl	8009d04 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	68da      	ldr	r2, [r3, #12]
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079d0:	425b      	negs	r3, r3
 80079d2:	441a      	add	r2, r3
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	68da      	ldr	r2, [r3, #12]
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	429a      	cmp	r2, r3
 80079e2:	d207      	bcs.n	80079f4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	689a      	ldr	r2, [r3, #8]
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079ec:	425b      	negs	r3, r3
 80079ee:	441a      	add	r2, r3
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2b02      	cmp	r3, #2
 80079f8:	d105      	bne.n	8007a06 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80079fa:	693b      	ldr	r3, [r7, #16]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d002      	beq.n	8007a06 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007a00:	693b      	ldr	r3, [r7, #16]
 8007a02:	3b01      	subs	r3, #1
 8007a04:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007a06:	693b      	ldr	r3, [r7, #16]
 8007a08:	1c5a      	adds	r2, r3, #1
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8007a0e:	697b      	ldr	r3, [r7, #20]
}
 8007a10:	4618      	mov	r0, r3
 8007a12:	3718      	adds	r7, #24
 8007a14:	46bd      	mov	sp, r7
 8007a16:	bd80      	pop	{r7, pc}

08007a18 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b084      	sub	sp, #16
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007a20:	f001 f92a 	bl	8008c78 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007a2a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007a2c:	e011      	b.n	8007a52 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d012      	beq.n	8007a5c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	3324      	adds	r3, #36	@ 0x24
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	f000 fc9e 	bl	800837c <xTaskRemoveFromEventList>
 8007a40:	4603      	mov	r3, r0
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d001      	beq.n	8007a4a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007a46:	f000 fddb 	bl	8008600 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007a4a:	7bfb      	ldrb	r3, [r7, #15]
 8007a4c:	3b01      	subs	r3, #1
 8007a4e:	b2db      	uxtb	r3, r3
 8007a50:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007a52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	dce9      	bgt.n	8007a2e <prvUnlockQueue+0x16>
 8007a5a:	e000      	b.n	8007a5e <prvUnlockQueue+0x46>
					break;
 8007a5c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	22ff      	movs	r2, #255	@ 0xff
 8007a62:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8007a66:	f001 f939 	bl	8008cdc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007a6a:	f001 f905 	bl	8008c78 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007a74:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007a76:	e011      	b.n	8007a9c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	691b      	ldr	r3, [r3, #16]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d012      	beq.n	8007aa6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	3310      	adds	r3, #16
 8007a84:	4618      	mov	r0, r3
 8007a86:	f000 fc79 	bl	800837c <xTaskRemoveFromEventList>
 8007a8a:	4603      	mov	r3, r0
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d001      	beq.n	8007a94 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007a90:	f000 fdb6 	bl	8008600 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007a94:	7bbb      	ldrb	r3, [r7, #14]
 8007a96:	3b01      	subs	r3, #1
 8007a98:	b2db      	uxtb	r3, r3
 8007a9a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007a9c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	dce9      	bgt.n	8007a78 <prvUnlockQueue+0x60>
 8007aa4:	e000      	b.n	8007aa8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007aa6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	22ff      	movs	r2, #255	@ 0xff
 8007aac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8007ab0:	f001 f914 	bl	8008cdc <vPortExitCritical>
}
 8007ab4:	bf00      	nop
 8007ab6:	3710      	adds	r7, #16
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	bd80      	pop	{r7, pc}

08007abc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b084      	sub	sp, #16
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007ac4:	f001 f8d8 	bl	8008c78 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ad0:	429a      	cmp	r2, r3
 8007ad2:	d102      	bne.n	8007ada <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007ad4:	2301      	movs	r3, #1
 8007ad6:	60fb      	str	r3, [r7, #12]
 8007ad8:	e001      	b.n	8007ade <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007ada:	2300      	movs	r3, #0
 8007adc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007ade:	f001 f8fd 	bl	8008cdc <vPortExitCritical>

	return xReturn;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
}
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	3710      	adds	r7, #16
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	bd80      	pop	{r7, pc}

08007aec <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b08e      	sub	sp, #56	@ 0x38
 8007af0:	af04      	add	r7, sp, #16
 8007af2:	60f8      	str	r0, [r7, #12]
 8007af4:	60b9      	str	r1, [r7, #8]
 8007af6:	607a      	str	r2, [r7, #4]
 8007af8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007afa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d10b      	bne.n	8007b18 <xTaskCreateStatic+0x2c>
	__asm volatile
 8007b00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b04:	f383 8811 	msr	BASEPRI, r3
 8007b08:	f3bf 8f6f 	isb	sy
 8007b0c:	f3bf 8f4f 	dsb	sy
 8007b10:	623b      	str	r3, [r7, #32]
}
 8007b12:	bf00      	nop
 8007b14:	bf00      	nop
 8007b16:	e7fd      	b.n	8007b14 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007b18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d10b      	bne.n	8007b36 <xTaskCreateStatic+0x4a>
	__asm volatile
 8007b1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b22:	f383 8811 	msr	BASEPRI, r3
 8007b26:	f3bf 8f6f 	isb	sy
 8007b2a:	f3bf 8f4f 	dsb	sy
 8007b2e:	61fb      	str	r3, [r7, #28]
}
 8007b30:	bf00      	nop
 8007b32:	bf00      	nop
 8007b34:	e7fd      	b.n	8007b32 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007b36:	23a0      	movs	r3, #160	@ 0xa0
 8007b38:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007b3a:	693b      	ldr	r3, [r7, #16]
 8007b3c:	2ba0      	cmp	r3, #160	@ 0xa0
 8007b3e:	d00b      	beq.n	8007b58 <xTaskCreateStatic+0x6c>
	__asm volatile
 8007b40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b44:	f383 8811 	msr	BASEPRI, r3
 8007b48:	f3bf 8f6f 	isb	sy
 8007b4c:	f3bf 8f4f 	dsb	sy
 8007b50:	61bb      	str	r3, [r7, #24]
}
 8007b52:	bf00      	nop
 8007b54:	bf00      	nop
 8007b56:	e7fd      	b.n	8007b54 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007b58:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007b5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d01e      	beq.n	8007b9e <xTaskCreateStatic+0xb2>
 8007b60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d01b      	beq.n	8007b9e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007b66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b68:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b6c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007b6e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007b70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b72:	2202      	movs	r2, #2
 8007b74:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007b78:	2300      	movs	r3, #0
 8007b7a:	9303      	str	r3, [sp, #12]
 8007b7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b7e:	9302      	str	r3, [sp, #8]
 8007b80:	f107 0314 	add.w	r3, r7, #20
 8007b84:	9301      	str	r3, [sp, #4]
 8007b86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b88:	9300      	str	r3, [sp, #0]
 8007b8a:	683b      	ldr	r3, [r7, #0]
 8007b8c:	687a      	ldr	r2, [r7, #4]
 8007b8e:	68b9      	ldr	r1, [r7, #8]
 8007b90:	68f8      	ldr	r0, [r7, #12]
 8007b92:	f000 f851 	bl	8007c38 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007b96:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007b98:	f000 f8ee 	bl	8007d78 <prvAddNewTaskToReadyList>
 8007b9c:	e001      	b.n	8007ba2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007ba2:	697b      	ldr	r3, [r7, #20]
	}
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	3728      	adds	r7, #40	@ 0x28
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	bd80      	pop	{r7, pc}

08007bac <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b08c      	sub	sp, #48	@ 0x30
 8007bb0:	af04      	add	r7, sp, #16
 8007bb2:	60f8      	str	r0, [r7, #12]
 8007bb4:	60b9      	str	r1, [r7, #8]
 8007bb6:	603b      	str	r3, [r7, #0]
 8007bb8:	4613      	mov	r3, r2
 8007bba:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007bbc:	88fb      	ldrh	r3, [r7, #6]
 8007bbe:	009b      	lsls	r3, r3, #2
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	f001 f939 	bl	8008e38 <pvPortMalloc>
 8007bc6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007bc8:	697b      	ldr	r3, [r7, #20]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d00e      	beq.n	8007bec <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007bce:	20a0      	movs	r0, #160	@ 0xa0
 8007bd0:	f001 f932 	bl	8008e38 <pvPortMalloc>
 8007bd4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007bd6:	69fb      	ldr	r3, [r7, #28]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d003      	beq.n	8007be4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007bdc:	69fb      	ldr	r3, [r7, #28]
 8007bde:	697a      	ldr	r2, [r7, #20]
 8007be0:	631a      	str	r2, [r3, #48]	@ 0x30
 8007be2:	e005      	b.n	8007bf0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007be4:	6978      	ldr	r0, [r7, #20]
 8007be6:	f001 f9f5 	bl	8008fd4 <vPortFree>
 8007bea:	e001      	b.n	8007bf0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007bec:	2300      	movs	r3, #0
 8007bee:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007bf0:	69fb      	ldr	r3, [r7, #28]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d017      	beq.n	8007c26 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007bf6:	69fb      	ldr	r3, [r7, #28]
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007bfe:	88fa      	ldrh	r2, [r7, #6]
 8007c00:	2300      	movs	r3, #0
 8007c02:	9303      	str	r3, [sp, #12]
 8007c04:	69fb      	ldr	r3, [r7, #28]
 8007c06:	9302      	str	r3, [sp, #8]
 8007c08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c0a:	9301      	str	r3, [sp, #4]
 8007c0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c0e:	9300      	str	r3, [sp, #0]
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	68b9      	ldr	r1, [r7, #8]
 8007c14:	68f8      	ldr	r0, [r7, #12]
 8007c16:	f000 f80f 	bl	8007c38 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007c1a:	69f8      	ldr	r0, [r7, #28]
 8007c1c:	f000 f8ac 	bl	8007d78 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007c20:	2301      	movs	r3, #1
 8007c22:	61bb      	str	r3, [r7, #24]
 8007c24:	e002      	b.n	8007c2c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007c26:	f04f 33ff 	mov.w	r3, #4294967295
 8007c2a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007c2c:	69bb      	ldr	r3, [r7, #24]
	}
 8007c2e:	4618      	mov	r0, r3
 8007c30:	3720      	adds	r7, #32
 8007c32:	46bd      	mov	sp, r7
 8007c34:	bd80      	pop	{r7, pc}
	...

08007c38 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b088      	sub	sp, #32
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	60f8      	str	r0, [r7, #12]
 8007c40:	60b9      	str	r1, [r7, #8]
 8007c42:	607a      	str	r2, [r7, #4]
 8007c44:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007c46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c48:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007c50:	3b01      	subs	r3, #1
 8007c52:	009b      	lsls	r3, r3, #2
 8007c54:	4413      	add	r3, r2
 8007c56:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007c58:	69bb      	ldr	r3, [r7, #24]
 8007c5a:	f023 0307 	bic.w	r3, r3, #7
 8007c5e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007c60:	69bb      	ldr	r3, [r7, #24]
 8007c62:	f003 0307 	and.w	r3, r3, #7
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d00b      	beq.n	8007c82 <prvInitialiseNewTask+0x4a>
	__asm volatile
 8007c6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c6e:	f383 8811 	msr	BASEPRI, r3
 8007c72:	f3bf 8f6f 	isb	sy
 8007c76:	f3bf 8f4f 	dsb	sy
 8007c7a:	617b      	str	r3, [r7, #20]
}
 8007c7c:	bf00      	nop
 8007c7e:	bf00      	nop
 8007c80:	e7fd      	b.n	8007c7e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007c82:	68bb      	ldr	r3, [r7, #8]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d01f      	beq.n	8007cc8 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007c88:	2300      	movs	r3, #0
 8007c8a:	61fb      	str	r3, [r7, #28]
 8007c8c:	e012      	b.n	8007cb4 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007c8e:	68ba      	ldr	r2, [r7, #8]
 8007c90:	69fb      	ldr	r3, [r7, #28]
 8007c92:	4413      	add	r3, r2
 8007c94:	7819      	ldrb	r1, [r3, #0]
 8007c96:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007c98:	69fb      	ldr	r3, [r7, #28]
 8007c9a:	4413      	add	r3, r2
 8007c9c:	3334      	adds	r3, #52	@ 0x34
 8007c9e:	460a      	mov	r2, r1
 8007ca0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007ca2:	68ba      	ldr	r2, [r7, #8]
 8007ca4:	69fb      	ldr	r3, [r7, #28]
 8007ca6:	4413      	add	r3, r2
 8007ca8:	781b      	ldrb	r3, [r3, #0]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d006      	beq.n	8007cbc <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007cae:	69fb      	ldr	r3, [r7, #28]
 8007cb0:	3301      	adds	r3, #1
 8007cb2:	61fb      	str	r3, [r7, #28]
 8007cb4:	69fb      	ldr	r3, [r7, #28]
 8007cb6:	2b0f      	cmp	r3, #15
 8007cb8:	d9e9      	bls.n	8007c8e <prvInitialiseNewTask+0x56>
 8007cba:	e000      	b.n	8007cbe <prvInitialiseNewTask+0x86>
			{
				break;
 8007cbc:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007cbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007cc6:	e003      	b.n	8007cd0 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007cc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cca:	2200      	movs	r2, #0
 8007ccc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007cd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cd2:	2b09      	cmp	r3, #9
 8007cd4:	d901      	bls.n	8007cda <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007cd6:	2309      	movs	r3, #9
 8007cd8:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007cda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cdc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007cde:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007ce0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ce2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007ce4:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007ce6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ce8:	2200      	movs	r2, #0
 8007cea:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007cec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cee:	3304      	adds	r3, #4
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	f7ff fb4f 	bl	8007394 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007cf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cf8:	3318      	adds	r3, #24
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	f7ff fb4a 	bl	8007394 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007d00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d02:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007d04:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d08:	f1c3 020a 	rsb	r2, r3, #10
 8007d0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d0e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007d10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d12:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007d14:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007d16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d18:	2200      	movs	r2, #0
 8007d1a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007d1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d20:	2200      	movs	r2, #0
 8007d22:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007d26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d28:	334c      	adds	r3, #76	@ 0x4c
 8007d2a:	224c      	movs	r2, #76	@ 0x4c
 8007d2c:	2100      	movs	r1, #0
 8007d2e:	4618      	mov	r0, r3
 8007d30:	f001 ff64 	bl	8009bfc <memset>
 8007d34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d36:	4a0d      	ldr	r2, [pc, #52]	@ (8007d6c <prvInitialiseNewTask+0x134>)
 8007d38:	651a      	str	r2, [r3, #80]	@ 0x50
 8007d3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d3c:	4a0c      	ldr	r2, [pc, #48]	@ (8007d70 <prvInitialiseNewTask+0x138>)
 8007d3e:	655a      	str	r2, [r3, #84]	@ 0x54
 8007d40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d42:	4a0c      	ldr	r2, [pc, #48]	@ (8007d74 <prvInitialiseNewTask+0x13c>)
 8007d44:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007d46:	683a      	ldr	r2, [r7, #0]
 8007d48:	68f9      	ldr	r1, [r7, #12]
 8007d4a:	69b8      	ldr	r0, [r7, #24]
 8007d4c:	f000 fe64 	bl	8008a18 <pxPortInitialiseStack>
 8007d50:	4602      	mov	r2, r0
 8007d52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d54:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007d56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d002      	beq.n	8007d62 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007d5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d5e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007d60:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007d62:	bf00      	nop
 8007d64:	3720      	adds	r7, #32
 8007d66:	46bd      	mov	sp, r7
 8007d68:	bd80      	pop	{r7, pc}
 8007d6a:	bf00      	nop
 8007d6c:	20005e78 	.word	0x20005e78
 8007d70:	20005ee0 	.word	0x20005ee0
 8007d74:	20005f48 	.word	0x20005f48

08007d78 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	b082      	sub	sp, #8
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007d80:	f000 ff7a 	bl	8008c78 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007d84:	4b2a      	ldr	r3, [pc, #168]	@ (8007e30 <prvAddNewTaskToReadyList+0xb8>)
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	3301      	adds	r3, #1
 8007d8a:	4a29      	ldr	r2, [pc, #164]	@ (8007e30 <prvAddNewTaskToReadyList+0xb8>)
 8007d8c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007d8e:	4b29      	ldr	r3, [pc, #164]	@ (8007e34 <prvAddNewTaskToReadyList+0xbc>)
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d109      	bne.n	8007daa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007d96:	4a27      	ldr	r2, [pc, #156]	@ (8007e34 <prvAddNewTaskToReadyList+0xbc>)
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007d9c:	4b24      	ldr	r3, [pc, #144]	@ (8007e30 <prvAddNewTaskToReadyList+0xb8>)
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	2b01      	cmp	r3, #1
 8007da2:	d110      	bne.n	8007dc6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007da4:	f000 fc50 	bl	8008648 <prvInitialiseTaskLists>
 8007da8:	e00d      	b.n	8007dc6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007daa:	4b23      	ldr	r3, [pc, #140]	@ (8007e38 <prvAddNewTaskToReadyList+0xc0>)
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d109      	bne.n	8007dc6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007db2:	4b20      	ldr	r3, [pc, #128]	@ (8007e34 <prvAddNewTaskToReadyList+0xbc>)
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dbc:	429a      	cmp	r2, r3
 8007dbe:	d802      	bhi.n	8007dc6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007dc0:	4a1c      	ldr	r2, [pc, #112]	@ (8007e34 <prvAddNewTaskToReadyList+0xbc>)
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007dc6:	4b1d      	ldr	r3, [pc, #116]	@ (8007e3c <prvAddNewTaskToReadyList+0xc4>)
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	3301      	adds	r3, #1
 8007dcc:	4a1b      	ldr	r2, [pc, #108]	@ (8007e3c <prvAddNewTaskToReadyList+0xc4>)
 8007dce:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dd4:	2201      	movs	r2, #1
 8007dd6:	409a      	lsls	r2, r3
 8007dd8:	4b19      	ldr	r3, [pc, #100]	@ (8007e40 <prvAddNewTaskToReadyList+0xc8>)
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	4313      	orrs	r3, r2
 8007dde:	4a18      	ldr	r2, [pc, #96]	@ (8007e40 <prvAddNewTaskToReadyList+0xc8>)
 8007de0:	6013      	str	r3, [r2, #0]
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007de6:	4613      	mov	r3, r2
 8007de8:	009b      	lsls	r3, r3, #2
 8007dea:	4413      	add	r3, r2
 8007dec:	009b      	lsls	r3, r3, #2
 8007dee:	4a15      	ldr	r2, [pc, #84]	@ (8007e44 <prvAddNewTaskToReadyList+0xcc>)
 8007df0:	441a      	add	r2, r3
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	3304      	adds	r3, #4
 8007df6:	4619      	mov	r1, r3
 8007df8:	4610      	mov	r0, r2
 8007dfa:	f7ff fad8 	bl	80073ae <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007dfe:	f000 ff6d 	bl	8008cdc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007e02:	4b0d      	ldr	r3, [pc, #52]	@ (8007e38 <prvAddNewTaskToReadyList+0xc0>)
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d00e      	beq.n	8007e28 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007e0a:	4b0a      	ldr	r3, [pc, #40]	@ (8007e34 <prvAddNewTaskToReadyList+0xbc>)
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e14:	429a      	cmp	r2, r3
 8007e16:	d207      	bcs.n	8007e28 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007e18:	4b0b      	ldr	r3, [pc, #44]	@ (8007e48 <prvAddNewTaskToReadyList+0xd0>)
 8007e1a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007e1e:	601a      	str	r2, [r3, #0]
 8007e20:	f3bf 8f4f 	dsb	sy
 8007e24:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007e28:	bf00      	nop
 8007e2a:	3708      	adds	r7, #8
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	bd80      	pop	{r7, pc}
 8007e30:	20000644 	.word	0x20000644
 8007e34:	20000508 	.word	0x20000508
 8007e38:	20000650 	.word	0x20000650
 8007e3c:	20000660 	.word	0x20000660
 8007e40:	2000064c 	.word	0x2000064c
 8007e44:	2000050c 	.word	0x2000050c
 8007e48:	e000ed04 	.word	0xe000ed04

08007e4c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b08a      	sub	sp, #40	@ 0x28
 8007e50:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007e52:	2300      	movs	r3, #0
 8007e54:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007e56:	2300      	movs	r3, #0
 8007e58:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007e5a:	463a      	mov	r2, r7
 8007e5c:	1d39      	adds	r1, r7, #4
 8007e5e:	f107 0308 	add.w	r3, r7, #8
 8007e62:	4618      	mov	r0, r3
 8007e64:	f7f8 fb2c 	bl	80004c0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007e68:	6839      	ldr	r1, [r7, #0]
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	68ba      	ldr	r2, [r7, #8]
 8007e6e:	9202      	str	r2, [sp, #8]
 8007e70:	9301      	str	r3, [sp, #4]
 8007e72:	2300      	movs	r3, #0
 8007e74:	9300      	str	r3, [sp, #0]
 8007e76:	2300      	movs	r3, #0
 8007e78:	460a      	mov	r2, r1
 8007e7a:	4921      	ldr	r1, [pc, #132]	@ (8007f00 <vTaskStartScheduler+0xb4>)
 8007e7c:	4821      	ldr	r0, [pc, #132]	@ (8007f04 <vTaskStartScheduler+0xb8>)
 8007e7e:	f7ff fe35 	bl	8007aec <xTaskCreateStatic>
 8007e82:	4603      	mov	r3, r0
 8007e84:	4a20      	ldr	r2, [pc, #128]	@ (8007f08 <vTaskStartScheduler+0xbc>)
 8007e86:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007e88:	4b1f      	ldr	r3, [pc, #124]	@ (8007f08 <vTaskStartScheduler+0xbc>)
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d002      	beq.n	8007e96 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007e90:	2301      	movs	r3, #1
 8007e92:	617b      	str	r3, [r7, #20]
 8007e94:	e001      	b.n	8007e9a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007e96:	2300      	movs	r3, #0
 8007e98:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007e9a:	697b      	ldr	r3, [r7, #20]
 8007e9c:	2b01      	cmp	r3, #1
 8007e9e:	d11b      	bne.n	8007ed8 <vTaskStartScheduler+0x8c>
	__asm volatile
 8007ea0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ea4:	f383 8811 	msr	BASEPRI, r3
 8007ea8:	f3bf 8f6f 	isb	sy
 8007eac:	f3bf 8f4f 	dsb	sy
 8007eb0:	613b      	str	r3, [r7, #16]
}
 8007eb2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007eb4:	4b15      	ldr	r3, [pc, #84]	@ (8007f0c <vTaskStartScheduler+0xc0>)
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	334c      	adds	r3, #76	@ 0x4c
 8007eba:	4a15      	ldr	r2, [pc, #84]	@ (8007f10 <vTaskStartScheduler+0xc4>)
 8007ebc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007ebe:	4b15      	ldr	r3, [pc, #84]	@ (8007f14 <vTaskStartScheduler+0xc8>)
 8007ec0:	f04f 32ff 	mov.w	r2, #4294967295
 8007ec4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007ec6:	4b14      	ldr	r3, [pc, #80]	@ (8007f18 <vTaskStartScheduler+0xcc>)
 8007ec8:	2201      	movs	r2, #1
 8007eca:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007ecc:	4b13      	ldr	r3, [pc, #76]	@ (8007f1c <vTaskStartScheduler+0xd0>)
 8007ece:	2200      	movs	r2, #0
 8007ed0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007ed2:	f000 fe2d 	bl	8008b30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007ed6:	e00f      	b.n	8007ef8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007ed8:	697b      	ldr	r3, [r7, #20]
 8007eda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ede:	d10b      	bne.n	8007ef8 <vTaskStartScheduler+0xac>
	__asm volatile
 8007ee0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ee4:	f383 8811 	msr	BASEPRI, r3
 8007ee8:	f3bf 8f6f 	isb	sy
 8007eec:	f3bf 8f4f 	dsb	sy
 8007ef0:	60fb      	str	r3, [r7, #12]
}
 8007ef2:	bf00      	nop
 8007ef4:	bf00      	nop
 8007ef6:	e7fd      	b.n	8007ef4 <vTaskStartScheduler+0xa8>
}
 8007ef8:	bf00      	nop
 8007efa:	3718      	adds	r7, #24
 8007efc:	46bd      	mov	sp, r7
 8007efe:	bd80      	pop	{r7, pc}
 8007f00:	08009e54 	.word	0x08009e54
 8007f04:	08008619 	.word	0x08008619
 8007f08:	20000668 	.word	0x20000668
 8007f0c:	20000508 	.word	0x20000508
 8007f10:	20000100 	.word	0x20000100
 8007f14:	20000664 	.word	0x20000664
 8007f18:	20000650 	.word	0x20000650
 8007f1c:	20000648 	.word	0x20000648

08007f20 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007f20:	b480      	push	{r7}
 8007f22:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007f24:	4b04      	ldr	r3, [pc, #16]	@ (8007f38 <vTaskSuspendAll+0x18>)
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	3301      	adds	r3, #1
 8007f2a:	4a03      	ldr	r2, [pc, #12]	@ (8007f38 <vTaskSuspendAll+0x18>)
 8007f2c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007f2e:	bf00      	nop
 8007f30:	46bd      	mov	sp, r7
 8007f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f36:	4770      	bx	lr
 8007f38:	2000066c 	.word	0x2000066c

08007f3c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	b084      	sub	sp, #16
 8007f40:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007f42:	2300      	movs	r3, #0
 8007f44:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007f46:	2300      	movs	r3, #0
 8007f48:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007f4a:	4b42      	ldr	r3, [pc, #264]	@ (8008054 <xTaskResumeAll+0x118>)
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d10b      	bne.n	8007f6a <xTaskResumeAll+0x2e>
	__asm volatile
 8007f52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f56:	f383 8811 	msr	BASEPRI, r3
 8007f5a:	f3bf 8f6f 	isb	sy
 8007f5e:	f3bf 8f4f 	dsb	sy
 8007f62:	603b      	str	r3, [r7, #0]
}
 8007f64:	bf00      	nop
 8007f66:	bf00      	nop
 8007f68:	e7fd      	b.n	8007f66 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007f6a:	f000 fe85 	bl	8008c78 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007f6e:	4b39      	ldr	r3, [pc, #228]	@ (8008054 <xTaskResumeAll+0x118>)
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	3b01      	subs	r3, #1
 8007f74:	4a37      	ldr	r2, [pc, #220]	@ (8008054 <xTaskResumeAll+0x118>)
 8007f76:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007f78:	4b36      	ldr	r3, [pc, #216]	@ (8008054 <xTaskResumeAll+0x118>)
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d161      	bne.n	8008044 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007f80:	4b35      	ldr	r3, [pc, #212]	@ (8008058 <xTaskResumeAll+0x11c>)
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d05d      	beq.n	8008044 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007f88:	e02e      	b.n	8007fe8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f8a:	4b34      	ldr	r3, [pc, #208]	@ (800805c <xTaskResumeAll+0x120>)
 8007f8c:	68db      	ldr	r3, [r3, #12]
 8007f8e:	68db      	ldr	r3, [r3, #12]
 8007f90:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	3318      	adds	r3, #24
 8007f96:	4618      	mov	r0, r3
 8007f98:	f7ff fa66 	bl	8007468 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	3304      	adds	r3, #4
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	f7ff fa61 	bl	8007468 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007faa:	2201      	movs	r2, #1
 8007fac:	409a      	lsls	r2, r3
 8007fae:	4b2c      	ldr	r3, [pc, #176]	@ (8008060 <xTaskResumeAll+0x124>)
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	4313      	orrs	r3, r2
 8007fb4:	4a2a      	ldr	r2, [pc, #168]	@ (8008060 <xTaskResumeAll+0x124>)
 8007fb6:	6013      	str	r3, [r2, #0]
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007fbc:	4613      	mov	r3, r2
 8007fbe:	009b      	lsls	r3, r3, #2
 8007fc0:	4413      	add	r3, r2
 8007fc2:	009b      	lsls	r3, r3, #2
 8007fc4:	4a27      	ldr	r2, [pc, #156]	@ (8008064 <xTaskResumeAll+0x128>)
 8007fc6:	441a      	add	r2, r3
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	3304      	adds	r3, #4
 8007fcc:	4619      	mov	r1, r3
 8007fce:	4610      	mov	r0, r2
 8007fd0:	f7ff f9ed 	bl	80073ae <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007fd8:	4b23      	ldr	r3, [pc, #140]	@ (8008068 <xTaskResumeAll+0x12c>)
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fde:	429a      	cmp	r2, r3
 8007fe0:	d302      	bcc.n	8007fe8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007fe2:	4b22      	ldr	r3, [pc, #136]	@ (800806c <xTaskResumeAll+0x130>)
 8007fe4:	2201      	movs	r2, #1
 8007fe6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007fe8:	4b1c      	ldr	r3, [pc, #112]	@ (800805c <xTaskResumeAll+0x120>)
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d1cc      	bne.n	8007f8a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d001      	beq.n	8007ffa <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007ff6:	f000 fbcb 	bl	8008790 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007ffa:	4b1d      	ldr	r3, [pc, #116]	@ (8008070 <xTaskResumeAll+0x134>)
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d010      	beq.n	8008028 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008006:	f000 f837 	bl	8008078 <xTaskIncrementTick>
 800800a:	4603      	mov	r3, r0
 800800c:	2b00      	cmp	r3, #0
 800800e:	d002      	beq.n	8008016 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008010:	4b16      	ldr	r3, [pc, #88]	@ (800806c <xTaskResumeAll+0x130>)
 8008012:	2201      	movs	r2, #1
 8008014:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	3b01      	subs	r3, #1
 800801a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d1f1      	bne.n	8008006 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8008022:	4b13      	ldr	r3, [pc, #76]	@ (8008070 <xTaskResumeAll+0x134>)
 8008024:	2200      	movs	r2, #0
 8008026:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008028:	4b10      	ldr	r3, [pc, #64]	@ (800806c <xTaskResumeAll+0x130>)
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	2b00      	cmp	r3, #0
 800802e:	d009      	beq.n	8008044 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008030:	2301      	movs	r3, #1
 8008032:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008034:	4b0f      	ldr	r3, [pc, #60]	@ (8008074 <xTaskResumeAll+0x138>)
 8008036:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800803a:	601a      	str	r2, [r3, #0]
 800803c:	f3bf 8f4f 	dsb	sy
 8008040:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008044:	f000 fe4a 	bl	8008cdc <vPortExitCritical>

	return xAlreadyYielded;
 8008048:	68bb      	ldr	r3, [r7, #8]
}
 800804a:	4618      	mov	r0, r3
 800804c:	3710      	adds	r7, #16
 800804e:	46bd      	mov	sp, r7
 8008050:	bd80      	pop	{r7, pc}
 8008052:	bf00      	nop
 8008054:	2000066c 	.word	0x2000066c
 8008058:	20000644 	.word	0x20000644
 800805c:	20000604 	.word	0x20000604
 8008060:	2000064c 	.word	0x2000064c
 8008064:	2000050c 	.word	0x2000050c
 8008068:	20000508 	.word	0x20000508
 800806c:	20000658 	.word	0x20000658
 8008070:	20000654 	.word	0x20000654
 8008074:	e000ed04 	.word	0xe000ed04

08008078 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008078:	b580      	push	{r7, lr}
 800807a:	b086      	sub	sp, #24
 800807c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800807e:	2300      	movs	r3, #0
 8008080:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008082:	4b4f      	ldr	r3, [pc, #316]	@ (80081c0 <xTaskIncrementTick+0x148>)
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	2b00      	cmp	r3, #0
 8008088:	f040 808f 	bne.w	80081aa <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800808c:	4b4d      	ldr	r3, [pc, #308]	@ (80081c4 <xTaskIncrementTick+0x14c>)
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	3301      	adds	r3, #1
 8008092:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008094:	4a4b      	ldr	r2, [pc, #300]	@ (80081c4 <xTaskIncrementTick+0x14c>)
 8008096:	693b      	ldr	r3, [r7, #16]
 8008098:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800809a:	693b      	ldr	r3, [r7, #16]
 800809c:	2b00      	cmp	r3, #0
 800809e:	d121      	bne.n	80080e4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80080a0:	4b49      	ldr	r3, [pc, #292]	@ (80081c8 <xTaskIncrementTick+0x150>)
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d00b      	beq.n	80080c2 <xTaskIncrementTick+0x4a>
	__asm volatile
 80080aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080ae:	f383 8811 	msr	BASEPRI, r3
 80080b2:	f3bf 8f6f 	isb	sy
 80080b6:	f3bf 8f4f 	dsb	sy
 80080ba:	603b      	str	r3, [r7, #0]
}
 80080bc:	bf00      	nop
 80080be:	bf00      	nop
 80080c0:	e7fd      	b.n	80080be <xTaskIncrementTick+0x46>
 80080c2:	4b41      	ldr	r3, [pc, #260]	@ (80081c8 <xTaskIncrementTick+0x150>)
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	60fb      	str	r3, [r7, #12]
 80080c8:	4b40      	ldr	r3, [pc, #256]	@ (80081cc <xTaskIncrementTick+0x154>)
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	4a3e      	ldr	r2, [pc, #248]	@ (80081c8 <xTaskIncrementTick+0x150>)
 80080ce:	6013      	str	r3, [r2, #0]
 80080d0:	4a3e      	ldr	r2, [pc, #248]	@ (80081cc <xTaskIncrementTick+0x154>)
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	6013      	str	r3, [r2, #0]
 80080d6:	4b3e      	ldr	r3, [pc, #248]	@ (80081d0 <xTaskIncrementTick+0x158>)
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	3301      	adds	r3, #1
 80080dc:	4a3c      	ldr	r2, [pc, #240]	@ (80081d0 <xTaskIncrementTick+0x158>)
 80080de:	6013      	str	r3, [r2, #0]
 80080e0:	f000 fb56 	bl	8008790 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80080e4:	4b3b      	ldr	r3, [pc, #236]	@ (80081d4 <xTaskIncrementTick+0x15c>)
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	693a      	ldr	r2, [r7, #16]
 80080ea:	429a      	cmp	r2, r3
 80080ec:	d348      	bcc.n	8008180 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80080ee:	4b36      	ldr	r3, [pc, #216]	@ (80081c8 <xTaskIncrementTick+0x150>)
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d104      	bne.n	8008102 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80080f8:	4b36      	ldr	r3, [pc, #216]	@ (80081d4 <xTaskIncrementTick+0x15c>)
 80080fa:	f04f 32ff 	mov.w	r2, #4294967295
 80080fe:	601a      	str	r2, [r3, #0]
					break;
 8008100:	e03e      	b.n	8008180 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008102:	4b31      	ldr	r3, [pc, #196]	@ (80081c8 <xTaskIncrementTick+0x150>)
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	68db      	ldr	r3, [r3, #12]
 8008108:	68db      	ldr	r3, [r3, #12]
 800810a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800810c:	68bb      	ldr	r3, [r7, #8]
 800810e:	685b      	ldr	r3, [r3, #4]
 8008110:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008112:	693a      	ldr	r2, [r7, #16]
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	429a      	cmp	r2, r3
 8008118:	d203      	bcs.n	8008122 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800811a:	4a2e      	ldr	r2, [pc, #184]	@ (80081d4 <xTaskIncrementTick+0x15c>)
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008120:	e02e      	b.n	8008180 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008122:	68bb      	ldr	r3, [r7, #8]
 8008124:	3304      	adds	r3, #4
 8008126:	4618      	mov	r0, r3
 8008128:	f7ff f99e 	bl	8007468 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800812c:	68bb      	ldr	r3, [r7, #8]
 800812e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008130:	2b00      	cmp	r3, #0
 8008132:	d004      	beq.n	800813e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008134:	68bb      	ldr	r3, [r7, #8]
 8008136:	3318      	adds	r3, #24
 8008138:	4618      	mov	r0, r3
 800813a:	f7ff f995 	bl	8007468 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800813e:	68bb      	ldr	r3, [r7, #8]
 8008140:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008142:	2201      	movs	r2, #1
 8008144:	409a      	lsls	r2, r3
 8008146:	4b24      	ldr	r3, [pc, #144]	@ (80081d8 <xTaskIncrementTick+0x160>)
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	4313      	orrs	r3, r2
 800814c:	4a22      	ldr	r2, [pc, #136]	@ (80081d8 <xTaskIncrementTick+0x160>)
 800814e:	6013      	str	r3, [r2, #0]
 8008150:	68bb      	ldr	r3, [r7, #8]
 8008152:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008154:	4613      	mov	r3, r2
 8008156:	009b      	lsls	r3, r3, #2
 8008158:	4413      	add	r3, r2
 800815a:	009b      	lsls	r3, r3, #2
 800815c:	4a1f      	ldr	r2, [pc, #124]	@ (80081dc <xTaskIncrementTick+0x164>)
 800815e:	441a      	add	r2, r3
 8008160:	68bb      	ldr	r3, [r7, #8]
 8008162:	3304      	adds	r3, #4
 8008164:	4619      	mov	r1, r3
 8008166:	4610      	mov	r0, r2
 8008168:	f7ff f921 	bl	80073ae <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800816c:	68bb      	ldr	r3, [r7, #8]
 800816e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008170:	4b1b      	ldr	r3, [pc, #108]	@ (80081e0 <xTaskIncrementTick+0x168>)
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008176:	429a      	cmp	r2, r3
 8008178:	d3b9      	bcc.n	80080ee <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800817a:	2301      	movs	r3, #1
 800817c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800817e:	e7b6      	b.n	80080ee <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008180:	4b17      	ldr	r3, [pc, #92]	@ (80081e0 <xTaskIncrementTick+0x168>)
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008186:	4915      	ldr	r1, [pc, #84]	@ (80081dc <xTaskIncrementTick+0x164>)
 8008188:	4613      	mov	r3, r2
 800818a:	009b      	lsls	r3, r3, #2
 800818c:	4413      	add	r3, r2
 800818e:	009b      	lsls	r3, r3, #2
 8008190:	440b      	add	r3, r1
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	2b01      	cmp	r3, #1
 8008196:	d901      	bls.n	800819c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8008198:	2301      	movs	r3, #1
 800819a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800819c:	4b11      	ldr	r3, [pc, #68]	@ (80081e4 <xTaskIncrementTick+0x16c>)
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d007      	beq.n	80081b4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80081a4:	2301      	movs	r3, #1
 80081a6:	617b      	str	r3, [r7, #20]
 80081a8:	e004      	b.n	80081b4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80081aa:	4b0f      	ldr	r3, [pc, #60]	@ (80081e8 <xTaskIncrementTick+0x170>)
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	3301      	adds	r3, #1
 80081b0:	4a0d      	ldr	r2, [pc, #52]	@ (80081e8 <xTaskIncrementTick+0x170>)
 80081b2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80081b4:	697b      	ldr	r3, [r7, #20]
}
 80081b6:	4618      	mov	r0, r3
 80081b8:	3718      	adds	r7, #24
 80081ba:	46bd      	mov	sp, r7
 80081bc:	bd80      	pop	{r7, pc}
 80081be:	bf00      	nop
 80081c0:	2000066c 	.word	0x2000066c
 80081c4:	20000648 	.word	0x20000648
 80081c8:	200005fc 	.word	0x200005fc
 80081cc:	20000600 	.word	0x20000600
 80081d0:	2000065c 	.word	0x2000065c
 80081d4:	20000664 	.word	0x20000664
 80081d8:	2000064c 	.word	0x2000064c
 80081dc:	2000050c 	.word	0x2000050c
 80081e0:	20000508 	.word	0x20000508
 80081e4:	20000658 	.word	0x20000658
 80081e8:	20000654 	.word	0x20000654

080081ec <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80081ec:	b480      	push	{r7}
 80081ee:	b087      	sub	sp, #28
 80081f0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80081f2:	4b2a      	ldr	r3, [pc, #168]	@ (800829c <vTaskSwitchContext+0xb0>)
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d003      	beq.n	8008202 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80081fa:	4b29      	ldr	r3, [pc, #164]	@ (80082a0 <vTaskSwitchContext+0xb4>)
 80081fc:	2201      	movs	r2, #1
 80081fe:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008200:	e045      	b.n	800828e <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8008202:	4b27      	ldr	r3, [pc, #156]	@ (80082a0 <vTaskSwitchContext+0xb4>)
 8008204:	2200      	movs	r2, #0
 8008206:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008208:	4b26      	ldr	r3, [pc, #152]	@ (80082a4 <vTaskSwitchContext+0xb8>)
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	fab3 f383 	clz	r3, r3
 8008214:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8008216:	7afb      	ldrb	r3, [r7, #11]
 8008218:	f1c3 031f 	rsb	r3, r3, #31
 800821c:	617b      	str	r3, [r7, #20]
 800821e:	4922      	ldr	r1, [pc, #136]	@ (80082a8 <vTaskSwitchContext+0xbc>)
 8008220:	697a      	ldr	r2, [r7, #20]
 8008222:	4613      	mov	r3, r2
 8008224:	009b      	lsls	r3, r3, #2
 8008226:	4413      	add	r3, r2
 8008228:	009b      	lsls	r3, r3, #2
 800822a:	440b      	add	r3, r1
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	2b00      	cmp	r3, #0
 8008230:	d10b      	bne.n	800824a <vTaskSwitchContext+0x5e>
	__asm volatile
 8008232:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008236:	f383 8811 	msr	BASEPRI, r3
 800823a:	f3bf 8f6f 	isb	sy
 800823e:	f3bf 8f4f 	dsb	sy
 8008242:	607b      	str	r3, [r7, #4]
}
 8008244:	bf00      	nop
 8008246:	bf00      	nop
 8008248:	e7fd      	b.n	8008246 <vTaskSwitchContext+0x5a>
 800824a:	697a      	ldr	r2, [r7, #20]
 800824c:	4613      	mov	r3, r2
 800824e:	009b      	lsls	r3, r3, #2
 8008250:	4413      	add	r3, r2
 8008252:	009b      	lsls	r3, r3, #2
 8008254:	4a14      	ldr	r2, [pc, #80]	@ (80082a8 <vTaskSwitchContext+0xbc>)
 8008256:	4413      	add	r3, r2
 8008258:	613b      	str	r3, [r7, #16]
 800825a:	693b      	ldr	r3, [r7, #16]
 800825c:	685b      	ldr	r3, [r3, #4]
 800825e:	685a      	ldr	r2, [r3, #4]
 8008260:	693b      	ldr	r3, [r7, #16]
 8008262:	605a      	str	r2, [r3, #4]
 8008264:	693b      	ldr	r3, [r7, #16]
 8008266:	685a      	ldr	r2, [r3, #4]
 8008268:	693b      	ldr	r3, [r7, #16]
 800826a:	3308      	adds	r3, #8
 800826c:	429a      	cmp	r2, r3
 800826e:	d104      	bne.n	800827a <vTaskSwitchContext+0x8e>
 8008270:	693b      	ldr	r3, [r7, #16]
 8008272:	685b      	ldr	r3, [r3, #4]
 8008274:	685a      	ldr	r2, [r3, #4]
 8008276:	693b      	ldr	r3, [r7, #16]
 8008278:	605a      	str	r2, [r3, #4]
 800827a:	693b      	ldr	r3, [r7, #16]
 800827c:	685b      	ldr	r3, [r3, #4]
 800827e:	68db      	ldr	r3, [r3, #12]
 8008280:	4a0a      	ldr	r2, [pc, #40]	@ (80082ac <vTaskSwitchContext+0xc0>)
 8008282:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008284:	4b09      	ldr	r3, [pc, #36]	@ (80082ac <vTaskSwitchContext+0xc0>)
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	334c      	adds	r3, #76	@ 0x4c
 800828a:	4a09      	ldr	r2, [pc, #36]	@ (80082b0 <vTaskSwitchContext+0xc4>)
 800828c:	6013      	str	r3, [r2, #0]
}
 800828e:	bf00      	nop
 8008290:	371c      	adds	r7, #28
 8008292:	46bd      	mov	sp, r7
 8008294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008298:	4770      	bx	lr
 800829a:	bf00      	nop
 800829c:	2000066c 	.word	0x2000066c
 80082a0:	20000658 	.word	0x20000658
 80082a4:	2000064c 	.word	0x2000064c
 80082a8:	2000050c 	.word	0x2000050c
 80082ac:	20000508 	.word	0x20000508
 80082b0:	20000100 	.word	0x20000100

080082b4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	b084      	sub	sp, #16
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
 80082bc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d10b      	bne.n	80082dc <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80082c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082c8:	f383 8811 	msr	BASEPRI, r3
 80082cc:	f3bf 8f6f 	isb	sy
 80082d0:	f3bf 8f4f 	dsb	sy
 80082d4:	60fb      	str	r3, [r7, #12]
}
 80082d6:	bf00      	nop
 80082d8:	bf00      	nop
 80082da:	e7fd      	b.n	80082d8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80082dc:	4b07      	ldr	r3, [pc, #28]	@ (80082fc <vTaskPlaceOnEventList+0x48>)
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	3318      	adds	r3, #24
 80082e2:	4619      	mov	r1, r3
 80082e4:	6878      	ldr	r0, [r7, #4]
 80082e6:	f7ff f886 	bl	80073f6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80082ea:	2101      	movs	r1, #1
 80082ec:	6838      	ldr	r0, [r7, #0]
 80082ee:	f000 fb2d 	bl	800894c <prvAddCurrentTaskToDelayedList>
}
 80082f2:	bf00      	nop
 80082f4:	3710      	adds	r7, #16
 80082f6:	46bd      	mov	sp, r7
 80082f8:	bd80      	pop	{r7, pc}
 80082fa:	bf00      	nop
 80082fc:	20000508 	.word	0x20000508

08008300 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8008300:	b580      	push	{r7, lr}
 8008302:	b086      	sub	sp, #24
 8008304:	af00      	add	r7, sp, #0
 8008306:	60f8      	str	r0, [r7, #12]
 8008308:	60b9      	str	r1, [r7, #8]
 800830a:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d10b      	bne.n	800832a <vTaskPlaceOnUnorderedEventList+0x2a>
	__asm volatile
 8008312:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008316:	f383 8811 	msr	BASEPRI, r3
 800831a:	f3bf 8f6f 	isb	sy
 800831e:	f3bf 8f4f 	dsb	sy
 8008322:	617b      	str	r3, [r7, #20]
}
 8008324:	bf00      	nop
 8008326:	bf00      	nop
 8008328:	e7fd      	b.n	8008326 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 800832a:	4b12      	ldr	r3, [pc, #72]	@ (8008374 <vTaskPlaceOnUnorderedEventList+0x74>)
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	2b00      	cmp	r3, #0
 8008330:	d10b      	bne.n	800834a <vTaskPlaceOnUnorderedEventList+0x4a>
	__asm volatile
 8008332:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008336:	f383 8811 	msr	BASEPRI, r3
 800833a:	f3bf 8f6f 	isb	sy
 800833e:	f3bf 8f4f 	dsb	sy
 8008342:	613b      	str	r3, [r7, #16]
}
 8008344:	bf00      	nop
 8008346:	bf00      	nop
 8008348:	e7fd      	b.n	8008346 <vTaskPlaceOnUnorderedEventList+0x46>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800834a:	4b0b      	ldr	r3, [pc, #44]	@ (8008378 <vTaskPlaceOnUnorderedEventList+0x78>)
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	68ba      	ldr	r2, [r7, #8]
 8008350:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8008354:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008356:	4b08      	ldr	r3, [pc, #32]	@ (8008378 <vTaskPlaceOnUnorderedEventList+0x78>)
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	3318      	adds	r3, #24
 800835c:	4619      	mov	r1, r3
 800835e:	68f8      	ldr	r0, [r7, #12]
 8008360:	f7ff f825 	bl	80073ae <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008364:	2101      	movs	r1, #1
 8008366:	6878      	ldr	r0, [r7, #4]
 8008368:	f000 faf0 	bl	800894c <prvAddCurrentTaskToDelayedList>
}
 800836c:	bf00      	nop
 800836e:	3718      	adds	r7, #24
 8008370:	46bd      	mov	sp, r7
 8008372:	bd80      	pop	{r7, pc}
 8008374:	2000066c 	.word	0x2000066c
 8008378:	20000508 	.word	0x20000508

0800837c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800837c:	b580      	push	{r7, lr}
 800837e:	b086      	sub	sp, #24
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	68db      	ldr	r3, [r3, #12]
 8008388:	68db      	ldr	r3, [r3, #12]
 800838a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800838c:	693b      	ldr	r3, [r7, #16]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d10b      	bne.n	80083aa <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8008392:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008396:	f383 8811 	msr	BASEPRI, r3
 800839a:	f3bf 8f6f 	isb	sy
 800839e:	f3bf 8f4f 	dsb	sy
 80083a2:	60fb      	str	r3, [r7, #12]
}
 80083a4:	bf00      	nop
 80083a6:	bf00      	nop
 80083a8:	e7fd      	b.n	80083a6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80083aa:	693b      	ldr	r3, [r7, #16]
 80083ac:	3318      	adds	r3, #24
 80083ae:	4618      	mov	r0, r3
 80083b0:	f7ff f85a 	bl	8007468 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80083b4:	4b1d      	ldr	r3, [pc, #116]	@ (800842c <xTaskRemoveFromEventList+0xb0>)
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d11c      	bne.n	80083f6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80083bc:	693b      	ldr	r3, [r7, #16]
 80083be:	3304      	adds	r3, #4
 80083c0:	4618      	mov	r0, r3
 80083c2:	f7ff f851 	bl	8007468 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80083c6:	693b      	ldr	r3, [r7, #16]
 80083c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083ca:	2201      	movs	r2, #1
 80083cc:	409a      	lsls	r2, r3
 80083ce:	4b18      	ldr	r3, [pc, #96]	@ (8008430 <xTaskRemoveFromEventList+0xb4>)
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	4313      	orrs	r3, r2
 80083d4:	4a16      	ldr	r2, [pc, #88]	@ (8008430 <xTaskRemoveFromEventList+0xb4>)
 80083d6:	6013      	str	r3, [r2, #0]
 80083d8:	693b      	ldr	r3, [r7, #16]
 80083da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80083dc:	4613      	mov	r3, r2
 80083de:	009b      	lsls	r3, r3, #2
 80083e0:	4413      	add	r3, r2
 80083e2:	009b      	lsls	r3, r3, #2
 80083e4:	4a13      	ldr	r2, [pc, #76]	@ (8008434 <xTaskRemoveFromEventList+0xb8>)
 80083e6:	441a      	add	r2, r3
 80083e8:	693b      	ldr	r3, [r7, #16]
 80083ea:	3304      	adds	r3, #4
 80083ec:	4619      	mov	r1, r3
 80083ee:	4610      	mov	r0, r2
 80083f0:	f7fe ffdd 	bl	80073ae <vListInsertEnd>
 80083f4:	e005      	b.n	8008402 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80083f6:	693b      	ldr	r3, [r7, #16]
 80083f8:	3318      	adds	r3, #24
 80083fa:	4619      	mov	r1, r3
 80083fc:	480e      	ldr	r0, [pc, #56]	@ (8008438 <xTaskRemoveFromEventList+0xbc>)
 80083fe:	f7fe ffd6 	bl	80073ae <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008402:	693b      	ldr	r3, [r7, #16]
 8008404:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008406:	4b0d      	ldr	r3, [pc, #52]	@ (800843c <xTaskRemoveFromEventList+0xc0>)
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800840c:	429a      	cmp	r2, r3
 800840e:	d905      	bls.n	800841c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008410:	2301      	movs	r3, #1
 8008412:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008414:	4b0a      	ldr	r3, [pc, #40]	@ (8008440 <xTaskRemoveFromEventList+0xc4>)
 8008416:	2201      	movs	r2, #1
 8008418:	601a      	str	r2, [r3, #0]
 800841a:	e001      	b.n	8008420 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800841c:	2300      	movs	r3, #0
 800841e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008420:	697b      	ldr	r3, [r7, #20]
}
 8008422:	4618      	mov	r0, r3
 8008424:	3718      	adds	r7, #24
 8008426:	46bd      	mov	sp, r7
 8008428:	bd80      	pop	{r7, pc}
 800842a:	bf00      	nop
 800842c:	2000066c 	.word	0x2000066c
 8008430:	2000064c 	.word	0x2000064c
 8008434:	2000050c 	.word	0x2000050c
 8008438:	20000604 	.word	0x20000604
 800843c:	20000508 	.word	0x20000508
 8008440:	20000658 	.word	0x20000658

08008444 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8008444:	b580      	push	{r7, lr}
 8008446:	b086      	sub	sp, #24
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
 800844c:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 800844e:	4b2a      	ldr	r3, [pc, #168]	@ (80084f8 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d10b      	bne.n	800846e <vTaskRemoveFromUnorderedEventList+0x2a>
	__asm volatile
 8008456:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800845a:	f383 8811 	msr	BASEPRI, r3
 800845e:	f3bf 8f6f 	isb	sy
 8008462:	f3bf 8f4f 	dsb	sy
 8008466:	613b      	str	r3, [r7, #16]
}
 8008468:	bf00      	nop
 800846a:	bf00      	nop
 800846c:	e7fd      	b.n	800846a <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800846e:	683b      	ldr	r3, [r7, #0]
 8008470:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	68db      	ldr	r3, [r3, #12]
 800847c:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 800847e:	697b      	ldr	r3, [r7, #20]
 8008480:	2b00      	cmp	r3, #0
 8008482:	d10b      	bne.n	800849c <vTaskRemoveFromUnorderedEventList+0x58>
	__asm volatile
 8008484:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008488:	f383 8811 	msr	BASEPRI, r3
 800848c:	f3bf 8f6f 	isb	sy
 8008490:	f3bf 8f4f 	dsb	sy
 8008494:	60fb      	str	r3, [r7, #12]
}
 8008496:	bf00      	nop
 8008498:	bf00      	nop
 800849a:	e7fd      	b.n	8008498 <vTaskRemoveFromUnorderedEventList+0x54>
	( void ) uxListRemove( pxEventListItem );
 800849c:	6878      	ldr	r0, [r7, #4]
 800849e:	f7fe ffe3 	bl	8007468 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80084a2:	697b      	ldr	r3, [r7, #20]
 80084a4:	3304      	adds	r3, #4
 80084a6:	4618      	mov	r0, r3
 80084a8:	f7fe ffde 	bl	8007468 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 80084ac:	697b      	ldr	r3, [r7, #20]
 80084ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084b0:	2201      	movs	r2, #1
 80084b2:	409a      	lsls	r2, r3
 80084b4:	4b11      	ldr	r3, [pc, #68]	@ (80084fc <vTaskRemoveFromUnorderedEventList+0xb8>)
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	4313      	orrs	r3, r2
 80084ba:	4a10      	ldr	r2, [pc, #64]	@ (80084fc <vTaskRemoveFromUnorderedEventList+0xb8>)
 80084bc:	6013      	str	r3, [r2, #0]
 80084be:	697b      	ldr	r3, [r7, #20]
 80084c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80084c2:	4613      	mov	r3, r2
 80084c4:	009b      	lsls	r3, r3, #2
 80084c6:	4413      	add	r3, r2
 80084c8:	009b      	lsls	r3, r3, #2
 80084ca:	4a0d      	ldr	r2, [pc, #52]	@ (8008500 <vTaskRemoveFromUnorderedEventList+0xbc>)
 80084cc:	441a      	add	r2, r3
 80084ce:	697b      	ldr	r3, [r7, #20]
 80084d0:	3304      	adds	r3, #4
 80084d2:	4619      	mov	r1, r3
 80084d4:	4610      	mov	r0, r2
 80084d6:	f7fe ff6a 	bl	80073ae <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80084da:	697b      	ldr	r3, [r7, #20]
 80084dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80084de:	4b09      	ldr	r3, [pc, #36]	@ (8008504 <vTaskRemoveFromUnorderedEventList+0xc0>)
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084e4:	429a      	cmp	r2, r3
 80084e6:	d902      	bls.n	80084ee <vTaskRemoveFromUnorderedEventList+0xaa>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 80084e8:	4b07      	ldr	r3, [pc, #28]	@ (8008508 <vTaskRemoveFromUnorderedEventList+0xc4>)
 80084ea:	2201      	movs	r2, #1
 80084ec:	601a      	str	r2, [r3, #0]
	}
}
 80084ee:	bf00      	nop
 80084f0:	3718      	adds	r7, #24
 80084f2:	46bd      	mov	sp, r7
 80084f4:	bd80      	pop	{r7, pc}
 80084f6:	bf00      	nop
 80084f8:	2000066c 	.word	0x2000066c
 80084fc:	2000064c 	.word	0x2000064c
 8008500:	2000050c 	.word	0x2000050c
 8008504:	20000508 	.word	0x20000508
 8008508:	20000658 	.word	0x20000658

0800850c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800850c:	b480      	push	{r7}
 800850e:	b083      	sub	sp, #12
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008514:	4b06      	ldr	r3, [pc, #24]	@ (8008530 <vTaskInternalSetTimeOutState+0x24>)
 8008516:	681a      	ldr	r2, [r3, #0]
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800851c:	4b05      	ldr	r3, [pc, #20]	@ (8008534 <vTaskInternalSetTimeOutState+0x28>)
 800851e:	681a      	ldr	r2, [r3, #0]
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	605a      	str	r2, [r3, #4]
}
 8008524:	bf00      	nop
 8008526:	370c      	adds	r7, #12
 8008528:	46bd      	mov	sp, r7
 800852a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852e:	4770      	bx	lr
 8008530:	2000065c 	.word	0x2000065c
 8008534:	20000648 	.word	0x20000648

08008538 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b088      	sub	sp, #32
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
 8008540:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d10b      	bne.n	8008560 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8008548:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800854c:	f383 8811 	msr	BASEPRI, r3
 8008550:	f3bf 8f6f 	isb	sy
 8008554:	f3bf 8f4f 	dsb	sy
 8008558:	613b      	str	r3, [r7, #16]
}
 800855a:	bf00      	nop
 800855c:	bf00      	nop
 800855e:	e7fd      	b.n	800855c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008560:	683b      	ldr	r3, [r7, #0]
 8008562:	2b00      	cmp	r3, #0
 8008564:	d10b      	bne.n	800857e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8008566:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800856a:	f383 8811 	msr	BASEPRI, r3
 800856e:	f3bf 8f6f 	isb	sy
 8008572:	f3bf 8f4f 	dsb	sy
 8008576:	60fb      	str	r3, [r7, #12]
}
 8008578:	bf00      	nop
 800857a:	bf00      	nop
 800857c:	e7fd      	b.n	800857a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800857e:	f000 fb7b 	bl	8008c78 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008582:	4b1d      	ldr	r3, [pc, #116]	@ (80085f8 <xTaskCheckForTimeOut+0xc0>)
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	685b      	ldr	r3, [r3, #4]
 800858c:	69ba      	ldr	r2, [r7, #24]
 800858e:	1ad3      	subs	r3, r2, r3
 8008590:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008592:	683b      	ldr	r3, [r7, #0]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	f1b3 3fff 	cmp.w	r3, #4294967295
 800859a:	d102      	bne.n	80085a2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800859c:	2300      	movs	r3, #0
 800859e:	61fb      	str	r3, [r7, #28]
 80085a0:	e023      	b.n	80085ea <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681a      	ldr	r2, [r3, #0]
 80085a6:	4b15      	ldr	r3, [pc, #84]	@ (80085fc <xTaskCheckForTimeOut+0xc4>)
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	429a      	cmp	r2, r3
 80085ac:	d007      	beq.n	80085be <xTaskCheckForTimeOut+0x86>
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	685b      	ldr	r3, [r3, #4]
 80085b2:	69ba      	ldr	r2, [r7, #24]
 80085b4:	429a      	cmp	r2, r3
 80085b6:	d302      	bcc.n	80085be <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80085b8:	2301      	movs	r3, #1
 80085ba:	61fb      	str	r3, [r7, #28]
 80085bc:	e015      	b.n	80085ea <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80085be:	683b      	ldr	r3, [r7, #0]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	697a      	ldr	r2, [r7, #20]
 80085c4:	429a      	cmp	r2, r3
 80085c6:	d20b      	bcs.n	80085e0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80085c8:	683b      	ldr	r3, [r7, #0]
 80085ca:	681a      	ldr	r2, [r3, #0]
 80085cc:	697b      	ldr	r3, [r7, #20]
 80085ce:	1ad2      	subs	r2, r2, r3
 80085d0:	683b      	ldr	r3, [r7, #0]
 80085d2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80085d4:	6878      	ldr	r0, [r7, #4]
 80085d6:	f7ff ff99 	bl	800850c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80085da:	2300      	movs	r3, #0
 80085dc:	61fb      	str	r3, [r7, #28]
 80085de:	e004      	b.n	80085ea <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80085e0:	683b      	ldr	r3, [r7, #0]
 80085e2:	2200      	movs	r2, #0
 80085e4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80085e6:	2301      	movs	r3, #1
 80085e8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80085ea:	f000 fb77 	bl	8008cdc <vPortExitCritical>

	return xReturn;
 80085ee:	69fb      	ldr	r3, [r7, #28]
}
 80085f0:	4618      	mov	r0, r3
 80085f2:	3720      	adds	r7, #32
 80085f4:	46bd      	mov	sp, r7
 80085f6:	bd80      	pop	{r7, pc}
 80085f8:	20000648 	.word	0x20000648
 80085fc:	2000065c 	.word	0x2000065c

08008600 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008600:	b480      	push	{r7}
 8008602:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008604:	4b03      	ldr	r3, [pc, #12]	@ (8008614 <vTaskMissedYield+0x14>)
 8008606:	2201      	movs	r2, #1
 8008608:	601a      	str	r2, [r3, #0]
}
 800860a:	bf00      	nop
 800860c:	46bd      	mov	sp, r7
 800860e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008612:	4770      	bx	lr
 8008614:	20000658 	.word	0x20000658

08008618 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008618:	b580      	push	{r7, lr}
 800861a:	b082      	sub	sp, #8
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008620:	f000 f852 	bl	80086c8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008624:	4b06      	ldr	r3, [pc, #24]	@ (8008640 <prvIdleTask+0x28>)
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	2b01      	cmp	r3, #1
 800862a:	d9f9      	bls.n	8008620 <prvIdleTask+0x8>
			{
				taskYIELD();
 800862c:	4b05      	ldr	r3, [pc, #20]	@ (8008644 <prvIdleTask+0x2c>)
 800862e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008632:	601a      	str	r2, [r3, #0]
 8008634:	f3bf 8f4f 	dsb	sy
 8008638:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800863c:	e7f0      	b.n	8008620 <prvIdleTask+0x8>
 800863e:	bf00      	nop
 8008640:	2000050c 	.word	0x2000050c
 8008644:	e000ed04 	.word	0xe000ed04

08008648 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008648:	b580      	push	{r7, lr}
 800864a:	b082      	sub	sp, #8
 800864c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800864e:	2300      	movs	r3, #0
 8008650:	607b      	str	r3, [r7, #4]
 8008652:	e00c      	b.n	800866e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008654:	687a      	ldr	r2, [r7, #4]
 8008656:	4613      	mov	r3, r2
 8008658:	009b      	lsls	r3, r3, #2
 800865a:	4413      	add	r3, r2
 800865c:	009b      	lsls	r3, r3, #2
 800865e:	4a12      	ldr	r2, [pc, #72]	@ (80086a8 <prvInitialiseTaskLists+0x60>)
 8008660:	4413      	add	r3, r2
 8008662:	4618      	mov	r0, r3
 8008664:	f7fe fe76 	bl	8007354 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	3301      	adds	r3, #1
 800866c:	607b      	str	r3, [r7, #4]
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	2b09      	cmp	r3, #9
 8008672:	d9ef      	bls.n	8008654 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008674:	480d      	ldr	r0, [pc, #52]	@ (80086ac <prvInitialiseTaskLists+0x64>)
 8008676:	f7fe fe6d 	bl	8007354 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800867a:	480d      	ldr	r0, [pc, #52]	@ (80086b0 <prvInitialiseTaskLists+0x68>)
 800867c:	f7fe fe6a 	bl	8007354 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008680:	480c      	ldr	r0, [pc, #48]	@ (80086b4 <prvInitialiseTaskLists+0x6c>)
 8008682:	f7fe fe67 	bl	8007354 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008686:	480c      	ldr	r0, [pc, #48]	@ (80086b8 <prvInitialiseTaskLists+0x70>)
 8008688:	f7fe fe64 	bl	8007354 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800868c:	480b      	ldr	r0, [pc, #44]	@ (80086bc <prvInitialiseTaskLists+0x74>)
 800868e:	f7fe fe61 	bl	8007354 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008692:	4b0b      	ldr	r3, [pc, #44]	@ (80086c0 <prvInitialiseTaskLists+0x78>)
 8008694:	4a05      	ldr	r2, [pc, #20]	@ (80086ac <prvInitialiseTaskLists+0x64>)
 8008696:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008698:	4b0a      	ldr	r3, [pc, #40]	@ (80086c4 <prvInitialiseTaskLists+0x7c>)
 800869a:	4a05      	ldr	r2, [pc, #20]	@ (80086b0 <prvInitialiseTaskLists+0x68>)
 800869c:	601a      	str	r2, [r3, #0]
}
 800869e:	bf00      	nop
 80086a0:	3708      	adds	r7, #8
 80086a2:	46bd      	mov	sp, r7
 80086a4:	bd80      	pop	{r7, pc}
 80086a6:	bf00      	nop
 80086a8:	2000050c 	.word	0x2000050c
 80086ac:	200005d4 	.word	0x200005d4
 80086b0:	200005e8 	.word	0x200005e8
 80086b4:	20000604 	.word	0x20000604
 80086b8:	20000618 	.word	0x20000618
 80086bc:	20000630 	.word	0x20000630
 80086c0:	200005fc 	.word	0x200005fc
 80086c4:	20000600 	.word	0x20000600

080086c8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80086c8:	b580      	push	{r7, lr}
 80086ca:	b082      	sub	sp, #8
 80086cc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80086ce:	e019      	b.n	8008704 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80086d0:	f000 fad2 	bl	8008c78 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80086d4:	4b10      	ldr	r3, [pc, #64]	@ (8008718 <prvCheckTasksWaitingTermination+0x50>)
 80086d6:	68db      	ldr	r3, [r3, #12]
 80086d8:	68db      	ldr	r3, [r3, #12]
 80086da:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	3304      	adds	r3, #4
 80086e0:	4618      	mov	r0, r3
 80086e2:	f7fe fec1 	bl	8007468 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80086e6:	4b0d      	ldr	r3, [pc, #52]	@ (800871c <prvCheckTasksWaitingTermination+0x54>)
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	3b01      	subs	r3, #1
 80086ec:	4a0b      	ldr	r2, [pc, #44]	@ (800871c <prvCheckTasksWaitingTermination+0x54>)
 80086ee:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80086f0:	4b0b      	ldr	r3, [pc, #44]	@ (8008720 <prvCheckTasksWaitingTermination+0x58>)
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	3b01      	subs	r3, #1
 80086f6:	4a0a      	ldr	r2, [pc, #40]	@ (8008720 <prvCheckTasksWaitingTermination+0x58>)
 80086f8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80086fa:	f000 faef 	bl	8008cdc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80086fe:	6878      	ldr	r0, [r7, #4]
 8008700:	f000 f810 	bl	8008724 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008704:	4b06      	ldr	r3, [pc, #24]	@ (8008720 <prvCheckTasksWaitingTermination+0x58>)
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d1e1      	bne.n	80086d0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800870c:	bf00      	nop
 800870e:	bf00      	nop
 8008710:	3708      	adds	r7, #8
 8008712:	46bd      	mov	sp, r7
 8008714:	bd80      	pop	{r7, pc}
 8008716:	bf00      	nop
 8008718:	20000618 	.word	0x20000618
 800871c:	20000644 	.word	0x20000644
 8008720:	2000062c 	.word	0x2000062c

08008724 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008724:	b580      	push	{r7, lr}
 8008726:	b084      	sub	sp, #16
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	334c      	adds	r3, #76	@ 0x4c
 8008730:	4618      	mov	r0, r3
 8008732:	f001 fa6b 	bl	8009c0c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800873c:	2b00      	cmp	r3, #0
 800873e:	d108      	bne.n	8008752 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008744:	4618      	mov	r0, r3
 8008746:	f000 fc45 	bl	8008fd4 <vPortFree>
				vPortFree( pxTCB );
 800874a:	6878      	ldr	r0, [r7, #4]
 800874c:	f000 fc42 	bl	8008fd4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008750:	e019      	b.n	8008786 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8008758:	2b01      	cmp	r3, #1
 800875a:	d103      	bne.n	8008764 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800875c:	6878      	ldr	r0, [r7, #4]
 800875e:	f000 fc39 	bl	8008fd4 <vPortFree>
	}
 8008762:	e010      	b.n	8008786 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800876a:	2b02      	cmp	r3, #2
 800876c:	d00b      	beq.n	8008786 <prvDeleteTCB+0x62>
	__asm volatile
 800876e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008772:	f383 8811 	msr	BASEPRI, r3
 8008776:	f3bf 8f6f 	isb	sy
 800877a:	f3bf 8f4f 	dsb	sy
 800877e:	60fb      	str	r3, [r7, #12]
}
 8008780:	bf00      	nop
 8008782:	bf00      	nop
 8008784:	e7fd      	b.n	8008782 <prvDeleteTCB+0x5e>
	}
 8008786:	bf00      	nop
 8008788:	3710      	adds	r7, #16
 800878a:	46bd      	mov	sp, r7
 800878c:	bd80      	pop	{r7, pc}
	...

08008790 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008790:	b480      	push	{r7}
 8008792:	b083      	sub	sp, #12
 8008794:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008796:	4b0c      	ldr	r3, [pc, #48]	@ (80087c8 <prvResetNextTaskUnblockTime+0x38>)
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d104      	bne.n	80087aa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80087a0:	4b0a      	ldr	r3, [pc, #40]	@ (80087cc <prvResetNextTaskUnblockTime+0x3c>)
 80087a2:	f04f 32ff 	mov.w	r2, #4294967295
 80087a6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80087a8:	e008      	b.n	80087bc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80087aa:	4b07      	ldr	r3, [pc, #28]	@ (80087c8 <prvResetNextTaskUnblockTime+0x38>)
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	68db      	ldr	r3, [r3, #12]
 80087b0:	68db      	ldr	r3, [r3, #12]
 80087b2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	685b      	ldr	r3, [r3, #4]
 80087b8:	4a04      	ldr	r2, [pc, #16]	@ (80087cc <prvResetNextTaskUnblockTime+0x3c>)
 80087ba:	6013      	str	r3, [r2, #0]
}
 80087bc:	bf00      	nop
 80087be:	370c      	adds	r7, #12
 80087c0:	46bd      	mov	sp, r7
 80087c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c6:	4770      	bx	lr
 80087c8:	200005fc 	.word	0x200005fc
 80087cc:	20000664 	.word	0x20000664

080087d0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80087d0:	b480      	push	{r7}
 80087d2:	b083      	sub	sp, #12
 80087d4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80087d6:	4b0b      	ldr	r3, [pc, #44]	@ (8008804 <xTaskGetSchedulerState+0x34>)
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d102      	bne.n	80087e4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80087de:	2301      	movs	r3, #1
 80087e0:	607b      	str	r3, [r7, #4]
 80087e2:	e008      	b.n	80087f6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80087e4:	4b08      	ldr	r3, [pc, #32]	@ (8008808 <xTaskGetSchedulerState+0x38>)
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d102      	bne.n	80087f2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80087ec:	2302      	movs	r3, #2
 80087ee:	607b      	str	r3, [r7, #4]
 80087f0:	e001      	b.n	80087f6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80087f2:	2300      	movs	r3, #0
 80087f4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80087f6:	687b      	ldr	r3, [r7, #4]
	}
 80087f8:	4618      	mov	r0, r3
 80087fa:	370c      	adds	r7, #12
 80087fc:	46bd      	mov	sp, r7
 80087fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008802:	4770      	bx	lr
 8008804:	20000650 	.word	0x20000650
 8008808:	2000066c 	.word	0x2000066c

0800880c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800880c:	b580      	push	{r7, lr}
 800880e:	b086      	sub	sp, #24
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008818:	2300      	movs	r3, #0
 800881a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d070      	beq.n	8008904 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008822:	4b3b      	ldr	r3, [pc, #236]	@ (8008910 <xTaskPriorityDisinherit+0x104>)
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	693a      	ldr	r2, [r7, #16]
 8008828:	429a      	cmp	r2, r3
 800882a:	d00b      	beq.n	8008844 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800882c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008830:	f383 8811 	msr	BASEPRI, r3
 8008834:	f3bf 8f6f 	isb	sy
 8008838:	f3bf 8f4f 	dsb	sy
 800883c:	60fb      	str	r3, [r7, #12]
}
 800883e:	bf00      	nop
 8008840:	bf00      	nop
 8008842:	e7fd      	b.n	8008840 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008844:	693b      	ldr	r3, [r7, #16]
 8008846:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008848:	2b00      	cmp	r3, #0
 800884a:	d10b      	bne.n	8008864 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800884c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008850:	f383 8811 	msr	BASEPRI, r3
 8008854:	f3bf 8f6f 	isb	sy
 8008858:	f3bf 8f4f 	dsb	sy
 800885c:	60bb      	str	r3, [r7, #8]
}
 800885e:	bf00      	nop
 8008860:	bf00      	nop
 8008862:	e7fd      	b.n	8008860 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8008864:	693b      	ldr	r3, [r7, #16]
 8008866:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008868:	1e5a      	subs	r2, r3, #1
 800886a:	693b      	ldr	r3, [r7, #16]
 800886c:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800886e:	693b      	ldr	r3, [r7, #16]
 8008870:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008872:	693b      	ldr	r3, [r7, #16]
 8008874:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008876:	429a      	cmp	r2, r3
 8008878:	d044      	beq.n	8008904 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800887a:	693b      	ldr	r3, [r7, #16]
 800887c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800887e:	2b00      	cmp	r3, #0
 8008880:	d140      	bne.n	8008904 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008882:	693b      	ldr	r3, [r7, #16]
 8008884:	3304      	adds	r3, #4
 8008886:	4618      	mov	r0, r3
 8008888:	f7fe fdee 	bl	8007468 <uxListRemove>
 800888c:	4603      	mov	r3, r0
 800888e:	2b00      	cmp	r3, #0
 8008890:	d115      	bne.n	80088be <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008892:	693b      	ldr	r3, [r7, #16]
 8008894:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008896:	491f      	ldr	r1, [pc, #124]	@ (8008914 <xTaskPriorityDisinherit+0x108>)
 8008898:	4613      	mov	r3, r2
 800889a:	009b      	lsls	r3, r3, #2
 800889c:	4413      	add	r3, r2
 800889e:	009b      	lsls	r3, r3, #2
 80088a0:	440b      	add	r3, r1
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d10a      	bne.n	80088be <xTaskPriorityDisinherit+0xb2>
 80088a8:	693b      	ldr	r3, [r7, #16]
 80088aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088ac:	2201      	movs	r2, #1
 80088ae:	fa02 f303 	lsl.w	r3, r2, r3
 80088b2:	43da      	mvns	r2, r3
 80088b4:	4b18      	ldr	r3, [pc, #96]	@ (8008918 <xTaskPriorityDisinherit+0x10c>)
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	4013      	ands	r3, r2
 80088ba:	4a17      	ldr	r2, [pc, #92]	@ (8008918 <xTaskPriorityDisinherit+0x10c>)
 80088bc:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80088be:	693b      	ldr	r3, [r7, #16]
 80088c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80088c2:	693b      	ldr	r3, [r7, #16]
 80088c4:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80088c6:	693b      	ldr	r3, [r7, #16]
 80088c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088ca:	f1c3 020a 	rsb	r2, r3, #10
 80088ce:	693b      	ldr	r3, [r7, #16]
 80088d0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80088d2:	693b      	ldr	r3, [r7, #16]
 80088d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088d6:	2201      	movs	r2, #1
 80088d8:	409a      	lsls	r2, r3
 80088da:	4b0f      	ldr	r3, [pc, #60]	@ (8008918 <xTaskPriorityDisinherit+0x10c>)
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	4313      	orrs	r3, r2
 80088e0:	4a0d      	ldr	r2, [pc, #52]	@ (8008918 <xTaskPriorityDisinherit+0x10c>)
 80088e2:	6013      	str	r3, [r2, #0]
 80088e4:	693b      	ldr	r3, [r7, #16]
 80088e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80088e8:	4613      	mov	r3, r2
 80088ea:	009b      	lsls	r3, r3, #2
 80088ec:	4413      	add	r3, r2
 80088ee:	009b      	lsls	r3, r3, #2
 80088f0:	4a08      	ldr	r2, [pc, #32]	@ (8008914 <xTaskPriorityDisinherit+0x108>)
 80088f2:	441a      	add	r2, r3
 80088f4:	693b      	ldr	r3, [r7, #16]
 80088f6:	3304      	adds	r3, #4
 80088f8:	4619      	mov	r1, r3
 80088fa:	4610      	mov	r0, r2
 80088fc:	f7fe fd57 	bl	80073ae <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008900:	2301      	movs	r3, #1
 8008902:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008904:	697b      	ldr	r3, [r7, #20]
	}
 8008906:	4618      	mov	r0, r3
 8008908:	3718      	adds	r7, #24
 800890a:	46bd      	mov	sp, r7
 800890c:	bd80      	pop	{r7, pc}
 800890e:	bf00      	nop
 8008910:	20000508 	.word	0x20000508
 8008914:	2000050c 	.word	0x2000050c
 8008918:	2000064c 	.word	0x2000064c

0800891c <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 800891c:	b480      	push	{r7}
 800891e:	b083      	sub	sp, #12
 8008920:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8008922:	4b09      	ldr	r3, [pc, #36]	@ (8008948 <uxTaskResetEventItemValue+0x2c>)
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	699b      	ldr	r3, [r3, #24]
 8008928:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800892a:	4b07      	ldr	r3, [pc, #28]	@ (8008948 <uxTaskResetEventItemValue+0x2c>)
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008930:	4b05      	ldr	r3, [pc, #20]	@ (8008948 <uxTaskResetEventItemValue+0x2c>)
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	f1c2 020a 	rsb	r2, r2, #10
 8008938:	619a      	str	r2, [r3, #24]

	return uxReturn;
 800893a:	687b      	ldr	r3, [r7, #4]
}
 800893c:	4618      	mov	r0, r3
 800893e:	370c      	adds	r7, #12
 8008940:	46bd      	mov	sp, r7
 8008942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008946:	4770      	bx	lr
 8008948:	20000508 	.word	0x20000508

0800894c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800894c:	b580      	push	{r7, lr}
 800894e:	b084      	sub	sp, #16
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]
 8008954:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008956:	4b29      	ldr	r3, [pc, #164]	@ (80089fc <prvAddCurrentTaskToDelayedList+0xb0>)
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800895c:	4b28      	ldr	r3, [pc, #160]	@ (8008a00 <prvAddCurrentTaskToDelayedList+0xb4>)
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	3304      	adds	r3, #4
 8008962:	4618      	mov	r0, r3
 8008964:	f7fe fd80 	bl	8007468 <uxListRemove>
 8008968:	4603      	mov	r3, r0
 800896a:	2b00      	cmp	r3, #0
 800896c:	d10b      	bne.n	8008986 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800896e:	4b24      	ldr	r3, [pc, #144]	@ (8008a00 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008974:	2201      	movs	r2, #1
 8008976:	fa02 f303 	lsl.w	r3, r2, r3
 800897a:	43da      	mvns	r2, r3
 800897c:	4b21      	ldr	r3, [pc, #132]	@ (8008a04 <prvAddCurrentTaskToDelayedList+0xb8>)
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	4013      	ands	r3, r2
 8008982:	4a20      	ldr	r2, [pc, #128]	@ (8008a04 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008984:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	f1b3 3fff 	cmp.w	r3, #4294967295
 800898c:	d10a      	bne.n	80089a4 <prvAddCurrentTaskToDelayedList+0x58>
 800898e:	683b      	ldr	r3, [r7, #0]
 8008990:	2b00      	cmp	r3, #0
 8008992:	d007      	beq.n	80089a4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008994:	4b1a      	ldr	r3, [pc, #104]	@ (8008a00 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	3304      	adds	r3, #4
 800899a:	4619      	mov	r1, r3
 800899c:	481a      	ldr	r0, [pc, #104]	@ (8008a08 <prvAddCurrentTaskToDelayedList+0xbc>)
 800899e:	f7fe fd06 	bl	80073ae <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80089a2:	e026      	b.n	80089f2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80089a4:	68fa      	ldr	r2, [r7, #12]
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	4413      	add	r3, r2
 80089aa:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80089ac:	4b14      	ldr	r3, [pc, #80]	@ (8008a00 <prvAddCurrentTaskToDelayedList+0xb4>)
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	68ba      	ldr	r2, [r7, #8]
 80089b2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80089b4:	68ba      	ldr	r2, [r7, #8]
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	429a      	cmp	r2, r3
 80089ba:	d209      	bcs.n	80089d0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80089bc:	4b13      	ldr	r3, [pc, #76]	@ (8008a0c <prvAddCurrentTaskToDelayedList+0xc0>)
 80089be:	681a      	ldr	r2, [r3, #0]
 80089c0:	4b0f      	ldr	r3, [pc, #60]	@ (8008a00 <prvAddCurrentTaskToDelayedList+0xb4>)
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	3304      	adds	r3, #4
 80089c6:	4619      	mov	r1, r3
 80089c8:	4610      	mov	r0, r2
 80089ca:	f7fe fd14 	bl	80073f6 <vListInsert>
}
 80089ce:	e010      	b.n	80089f2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80089d0:	4b0f      	ldr	r3, [pc, #60]	@ (8008a10 <prvAddCurrentTaskToDelayedList+0xc4>)
 80089d2:	681a      	ldr	r2, [r3, #0]
 80089d4:	4b0a      	ldr	r3, [pc, #40]	@ (8008a00 <prvAddCurrentTaskToDelayedList+0xb4>)
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	3304      	adds	r3, #4
 80089da:	4619      	mov	r1, r3
 80089dc:	4610      	mov	r0, r2
 80089de:	f7fe fd0a 	bl	80073f6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80089e2:	4b0c      	ldr	r3, [pc, #48]	@ (8008a14 <prvAddCurrentTaskToDelayedList+0xc8>)
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	68ba      	ldr	r2, [r7, #8]
 80089e8:	429a      	cmp	r2, r3
 80089ea:	d202      	bcs.n	80089f2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80089ec:	4a09      	ldr	r2, [pc, #36]	@ (8008a14 <prvAddCurrentTaskToDelayedList+0xc8>)
 80089ee:	68bb      	ldr	r3, [r7, #8]
 80089f0:	6013      	str	r3, [r2, #0]
}
 80089f2:	bf00      	nop
 80089f4:	3710      	adds	r7, #16
 80089f6:	46bd      	mov	sp, r7
 80089f8:	bd80      	pop	{r7, pc}
 80089fa:	bf00      	nop
 80089fc:	20000648 	.word	0x20000648
 8008a00:	20000508 	.word	0x20000508
 8008a04:	2000064c 	.word	0x2000064c
 8008a08:	20000630 	.word	0x20000630
 8008a0c:	20000600 	.word	0x20000600
 8008a10:	200005fc 	.word	0x200005fc
 8008a14:	20000664 	.word	0x20000664

08008a18 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008a18:	b480      	push	{r7}
 8008a1a:	b085      	sub	sp, #20
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	60f8      	str	r0, [r7, #12]
 8008a20:	60b9      	str	r1, [r7, #8]
 8008a22:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	3b04      	subs	r3, #4
 8008a28:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008a30:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	3b04      	subs	r3, #4
 8008a36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008a38:	68bb      	ldr	r3, [r7, #8]
 8008a3a:	f023 0201 	bic.w	r2, r3, #1
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	3b04      	subs	r3, #4
 8008a46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008a48:	4a0c      	ldr	r2, [pc, #48]	@ (8008a7c <pxPortInitialiseStack+0x64>)
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	3b14      	subs	r3, #20
 8008a52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008a54:	687a      	ldr	r2, [r7, #4]
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	3b04      	subs	r3, #4
 8008a5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	f06f 0202 	mvn.w	r2, #2
 8008a66:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	3b20      	subs	r3, #32
 8008a6c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008a6e:	68fb      	ldr	r3, [r7, #12]
}
 8008a70:	4618      	mov	r0, r3
 8008a72:	3714      	adds	r7, #20
 8008a74:	46bd      	mov	sp, r7
 8008a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7a:	4770      	bx	lr
 8008a7c:	08008a81 	.word	0x08008a81

08008a80 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008a80:	b480      	push	{r7}
 8008a82:	b085      	sub	sp, #20
 8008a84:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008a86:	2300      	movs	r3, #0
 8008a88:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008a8a:	4b13      	ldr	r3, [pc, #76]	@ (8008ad8 <prvTaskExitError+0x58>)
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a92:	d00b      	beq.n	8008aac <prvTaskExitError+0x2c>
	__asm volatile
 8008a94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a98:	f383 8811 	msr	BASEPRI, r3
 8008a9c:	f3bf 8f6f 	isb	sy
 8008aa0:	f3bf 8f4f 	dsb	sy
 8008aa4:	60fb      	str	r3, [r7, #12]
}
 8008aa6:	bf00      	nop
 8008aa8:	bf00      	nop
 8008aaa:	e7fd      	b.n	8008aa8 <prvTaskExitError+0x28>
	__asm volatile
 8008aac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ab0:	f383 8811 	msr	BASEPRI, r3
 8008ab4:	f3bf 8f6f 	isb	sy
 8008ab8:	f3bf 8f4f 	dsb	sy
 8008abc:	60bb      	str	r3, [r7, #8]
}
 8008abe:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008ac0:	bf00      	nop
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d0fc      	beq.n	8008ac2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008ac8:	bf00      	nop
 8008aca:	bf00      	nop
 8008acc:	3714      	adds	r7, #20
 8008ace:	46bd      	mov	sp, r7
 8008ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad4:	4770      	bx	lr
 8008ad6:	bf00      	nop
 8008ad8:	20000098 	.word	0x20000098
 8008adc:	00000000 	.word	0x00000000

08008ae0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008ae0:	4b07      	ldr	r3, [pc, #28]	@ (8008b00 <pxCurrentTCBConst2>)
 8008ae2:	6819      	ldr	r1, [r3, #0]
 8008ae4:	6808      	ldr	r0, [r1, #0]
 8008ae6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008aea:	f380 8809 	msr	PSP, r0
 8008aee:	f3bf 8f6f 	isb	sy
 8008af2:	f04f 0000 	mov.w	r0, #0
 8008af6:	f380 8811 	msr	BASEPRI, r0
 8008afa:	4770      	bx	lr
 8008afc:	f3af 8000 	nop.w

08008b00 <pxCurrentTCBConst2>:
 8008b00:	20000508 	.word	0x20000508
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008b04:	bf00      	nop
 8008b06:	bf00      	nop

08008b08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008b08:	4808      	ldr	r0, [pc, #32]	@ (8008b2c <prvPortStartFirstTask+0x24>)
 8008b0a:	6800      	ldr	r0, [r0, #0]
 8008b0c:	6800      	ldr	r0, [r0, #0]
 8008b0e:	f380 8808 	msr	MSP, r0
 8008b12:	f04f 0000 	mov.w	r0, #0
 8008b16:	f380 8814 	msr	CONTROL, r0
 8008b1a:	b662      	cpsie	i
 8008b1c:	b661      	cpsie	f
 8008b1e:	f3bf 8f4f 	dsb	sy
 8008b22:	f3bf 8f6f 	isb	sy
 8008b26:	df00      	svc	0
 8008b28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008b2a:	bf00      	nop
 8008b2c:	e000ed08 	.word	0xe000ed08

08008b30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b086      	sub	sp, #24
 8008b34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008b36:	4b47      	ldr	r3, [pc, #284]	@ (8008c54 <xPortStartScheduler+0x124>)
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	4a47      	ldr	r2, [pc, #284]	@ (8008c58 <xPortStartScheduler+0x128>)
 8008b3c:	4293      	cmp	r3, r2
 8008b3e:	d10b      	bne.n	8008b58 <xPortStartScheduler+0x28>
	__asm volatile
 8008b40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b44:	f383 8811 	msr	BASEPRI, r3
 8008b48:	f3bf 8f6f 	isb	sy
 8008b4c:	f3bf 8f4f 	dsb	sy
 8008b50:	613b      	str	r3, [r7, #16]
}
 8008b52:	bf00      	nop
 8008b54:	bf00      	nop
 8008b56:	e7fd      	b.n	8008b54 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008b58:	4b3e      	ldr	r3, [pc, #248]	@ (8008c54 <xPortStartScheduler+0x124>)
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	4a3f      	ldr	r2, [pc, #252]	@ (8008c5c <xPortStartScheduler+0x12c>)
 8008b5e:	4293      	cmp	r3, r2
 8008b60:	d10b      	bne.n	8008b7a <xPortStartScheduler+0x4a>
	__asm volatile
 8008b62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b66:	f383 8811 	msr	BASEPRI, r3
 8008b6a:	f3bf 8f6f 	isb	sy
 8008b6e:	f3bf 8f4f 	dsb	sy
 8008b72:	60fb      	str	r3, [r7, #12]
}
 8008b74:	bf00      	nop
 8008b76:	bf00      	nop
 8008b78:	e7fd      	b.n	8008b76 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008b7a:	4b39      	ldr	r3, [pc, #228]	@ (8008c60 <xPortStartScheduler+0x130>)
 8008b7c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008b7e:	697b      	ldr	r3, [r7, #20]
 8008b80:	781b      	ldrb	r3, [r3, #0]
 8008b82:	b2db      	uxtb	r3, r3
 8008b84:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008b86:	697b      	ldr	r3, [r7, #20]
 8008b88:	22ff      	movs	r2, #255	@ 0xff
 8008b8a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008b8c:	697b      	ldr	r3, [r7, #20]
 8008b8e:	781b      	ldrb	r3, [r3, #0]
 8008b90:	b2db      	uxtb	r3, r3
 8008b92:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008b94:	78fb      	ldrb	r3, [r7, #3]
 8008b96:	b2db      	uxtb	r3, r3
 8008b98:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8008b9c:	b2da      	uxtb	r2, r3
 8008b9e:	4b31      	ldr	r3, [pc, #196]	@ (8008c64 <xPortStartScheduler+0x134>)
 8008ba0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008ba2:	4b31      	ldr	r3, [pc, #196]	@ (8008c68 <xPortStartScheduler+0x138>)
 8008ba4:	2207      	movs	r2, #7
 8008ba6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008ba8:	e009      	b.n	8008bbe <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8008baa:	4b2f      	ldr	r3, [pc, #188]	@ (8008c68 <xPortStartScheduler+0x138>)
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	3b01      	subs	r3, #1
 8008bb0:	4a2d      	ldr	r2, [pc, #180]	@ (8008c68 <xPortStartScheduler+0x138>)
 8008bb2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008bb4:	78fb      	ldrb	r3, [r7, #3]
 8008bb6:	b2db      	uxtb	r3, r3
 8008bb8:	005b      	lsls	r3, r3, #1
 8008bba:	b2db      	uxtb	r3, r3
 8008bbc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008bbe:	78fb      	ldrb	r3, [r7, #3]
 8008bc0:	b2db      	uxtb	r3, r3
 8008bc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008bc6:	2b80      	cmp	r3, #128	@ 0x80
 8008bc8:	d0ef      	beq.n	8008baa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008bca:	4b27      	ldr	r3, [pc, #156]	@ (8008c68 <xPortStartScheduler+0x138>)
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	f1c3 0307 	rsb	r3, r3, #7
 8008bd2:	2b04      	cmp	r3, #4
 8008bd4:	d00b      	beq.n	8008bee <xPortStartScheduler+0xbe>
	__asm volatile
 8008bd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bda:	f383 8811 	msr	BASEPRI, r3
 8008bde:	f3bf 8f6f 	isb	sy
 8008be2:	f3bf 8f4f 	dsb	sy
 8008be6:	60bb      	str	r3, [r7, #8]
}
 8008be8:	bf00      	nop
 8008bea:	bf00      	nop
 8008bec:	e7fd      	b.n	8008bea <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008bee:	4b1e      	ldr	r3, [pc, #120]	@ (8008c68 <xPortStartScheduler+0x138>)
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	021b      	lsls	r3, r3, #8
 8008bf4:	4a1c      	ldr	r2, [pc, #112]	@ (8008c68 <xPortStartScheduler+0x138>)
 8008bf6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008bf8:	4b1b      	ldr	r3, [pc, #108]	@ (8008c68 <xPortStartScheduler+0x138>)
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008c00:	4a19      	ldr	r2, [pc, #100]	@ (8008c68 <xPortStartScheduler+0x138>)
 8008c02:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	b2da      	uxtb	r2, r3
 8008c08:	697b      	ldr	r3, [r7, #20]
 8008c0a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008c0c:	4b17      	ldr	r3, [pc, #92]	@ (8008c6c <xPortStartScheduler+0x13c>)
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	4a16      	ldr	r2, [pc, #88]	@ (8008c6c <xPortStartScheduler+0x13c>)
 8008c12:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008c16:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008c18:	4b14      	ldr	r3, [pc, #80]	@ (8008c6c <xPortStartScheduler+0x13c>)
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	4a13      	ldr	r2, [pc, #76]	@ (8008c6c <xPortStartScheduler+0x13c>)
 8008c1e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008c22:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008c24:	f000 f8da 	bl	8008ddc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008c28:	4b11      	ldr	r3, [pc, #68]	@ (8008c70 <xPortStartScheduler+0x140>)
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008c2e:	f000 f8f9 	bl	8008e24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008c32:	4b10      	ldr	r3, [pc, #64]	@ (8008c74 <xPortStartScheduler+0x144>)
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	4a0f      	ldr	r2, [pc, #60]	@ (8008c74 <xPortStartScheduler+0x144>)
 8008c38:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8008c3c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008c3e:	f7ff ff63 	bl	8008b08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008c42:	f7ff fad3 	bl	80081ec <vTaskSwitchContext>
	prvTaskExitError();
 8008c46:	f7ff ff1b 	bl	8008a80 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008c4a:	2300      	movs	r3, #0
}
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	3718      	adds	r7, #24
 8008c50:	46bd      	mov	sp, r7
 8008c52:	bd80      	pop	{r7, pc}
 8008c54:	e000ed00 	.word	0xe000ed00
 8008c58:	410fc271 	.word	0x410fc271
 8008c5c:	410fc270 	.word	0x410fc270
 8008c60:	e000e400 	.word	0xe000e400
 8008c64:	20000670 	.word	0x20000670
 8008c68:	20000674 	.word	0x20000674
 8008c6c:	e000ed20 	.word	0xe000ed20
 8008c70:	20000098 	.word	0x20000098
 8008c74:	e000ef34 	.word	0xe000ef34

08008c78 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008c78:	b480      	push	{r7}
 8008c7a:	b083      	sub	sp, #12
 8008c7c:	af00      	add	r7, sp, #0
	__asm volatile
 8008c7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c82:	f383 8811 	msr	BASEPRI, r3
 8008c86:	f3bf 8f6f 	isb	sy
 8008c8a:	f3bf 8f4f 	dsb	sy
 8008c8e:	607b      	str	r3, [r7, #4]
}
 8008c90:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008c92:	4b10      	ldr	r3, [pc, #64]	@ (8008cd4 <vPortEnterCritical+0x5c>)
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	3301      	adds	r3, #1
 8008c98:	4a0e      	ldr	r2, [pc, #56]	@ (8008cd4 <vPortEnterCritical+0x5c>)
 8008c9a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008c9c:	4b0d      	ldr	r3, [pc, #52]	@ (8008cd4 <vPortEnterCritical+0x5c>)
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	2b01      	cmp	r3, #1
 8008ca2:	d110      	bne.n	8008cc6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008ca4:	4b0c      	ldr	r3, [pc, #48]	@ (8008cd8 <vPortEnterCritical+0x60>)
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	b2db      	uxtb	r3, r3
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d00b      	beq.n	8008cc6 <vPortEnterCritical+0x4e>
	__asm volatile
 8008cae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cb2:	f383 8811 	msr	BASEPRI, r3
 8008cb6:	f3bf 8f6f 	isb	sy
 8008cba:	f3bf 8f4f 	dsb	sy
 8008cbe:	603b      	str	r3, [r7, #0]
}
 8008cc0:	bf00      	nop
 8008cc2:	bf00      	nop
 8008cc4:	e7fd      	b.n	8008cc2 <vPortEnterCritical+0x4a>
	}
}
 8008cc6:	bf00      	nop
 8008cc8:	370c      	adds	r7, #12
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd0:	4770      	bx	lr
 8008cd2:	bf00      	nop
 8008cd4:	20000098 	.word	0x20000098
 8008cd8:	e000ed04 	.word	0xe000ed04

08008cdc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008cdc:	b480      	push	{r7}
 8008cde:	b083      	sub	sp, #12
 8008ce0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008ce2:	4b12      	ldr	r3, [pc, #72]	@ (8008d2c <vPortExitCritical+0x50>)
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d10b      	bne.n	8008d02 <vPortExitCritical+0x26>
	__asm volatile
 8008cea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cee:	f383 8811 	msr	BASEPRI, r3
 8008cf2:	f3bf 8f6f 	isb	sy
 8008cf6:	f3bf 8f4f 	dsb	sy
 8008cfa:	607b      	str	r3, [r7, #4]
}
 8008cfc:	bf00      	nop
 8008cfe:	bf00      	nop
 8008d00:	e7fd      	b.n	8008cfe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008d02:	4b0a      	ldr	r3, [pc, #40]	@ (8008d2c <vPortExitCritical+0x50>)
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	3b01      	subs	r3, #1
 8008d08:	4a08      	ldr	r2, [pc, #32]	@ (8008d2c <vPortExitCritical+0x50>)
 8008d0a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008d0c:	4b07      	ldr	r3, [pc, #28]	@ (8008d2c <vPortExitCritical+0x50>)
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d105      	bne.n	8008d20 <vPortExitCritical+0x44>
 8008d14:	2300      	movs	r3, #0
 8008d16:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008d18:	683b      	ldr	r3, [r7, #0]
 8008d1a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008d1e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008d20:	bf00      	nop
 8008d22:	370c      	adds	r7, #12
 8008d24:	46bd      	mov	sp, r7
 8008d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2a:	4770      	bx	lr
 8008d2c:	20000098 	.word	0x20000098

08008d30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008d30:	f3ef 8009 	mrs	r0, PSP
 8008d34:	f3bf 8f6f 	isb	sy
 8008d38:	4b15      	ldr	r3, [pc, #84]	@ (8008d90 <pxCurrentTCBConst>)
 8008d3a:	681a      	ldr	r2, [r3, #0]
 8008d3c:	f01e 0f10 	tst.w	lr, #16
 8008d40:	bf08      	it	eq
 8008d42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008d46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d4a:	6010      	str	r0, [r2, #0]
 8008d4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008d50:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008d54:	f380 8811 	msr	BASEPRI, r0
 8008d58:	f3bf 8f4f 	dsb	sy
 8008d5c:	f3bf 8f6f 	isb	sy
 8008d60:	f7ff fa44 	bl	80081ec <vTaskSwitchContext>
 8008d64:	f04f 0000 	mov.w	r0, #0
 8008d68:	f380 8811 	msr	BASEPRI, r0
 8008d6c:	bc09      	pop	{r0, r3}
 8008d6e:	6819      	ldr	r1, [r3, #0]
 8008d70:	6808      	ldr	r0, [r1, #0]
 8008d72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d76:	f01e 0f10 	tst.w	lr, #16
 8008d7a:	bf08      	it	eq
 8008d7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008d80:	f380 8809 	msr	PSP, r0
 8008d84:	f3bf 8f6f 	isb	sy
 8008d88:	4770      	bx	lr
 8008d8a:	bf00      	nop
 8008d8c:	f3af 8000 	nop.w

08008d90 <pxCurrentTCBConst>:
 8008d90:	20000508 	.word	0x20000508
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008d94:	bf00      	nop
 8008d96:	bf00      	nop

08008d98 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	b082      	sub	sp, #8
 8008d9c:	af00      	add	r7, sp, #0
	__asm volatile
 8008d9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008da2:	f383 8811 	msr	BASEPRI, r3
 8008da6:	f3bf 8f6f 	isb	sy
 8008daa:	f3bf 8f4f 	dsb	sy
 8008dae:	607b      	str	r3, [r7, #4]
}
 8008db0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008db2:	f7ff f961 	bl	8008078 <xTaskIncrementTick>
 8008db6:	4603      	mov	r3, r0
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d003      	beq.n	8008dc4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008dbc:	4b06      	ldr	r3, [pc, #24]	@ (8008dd8 <SysTick_Handler+0x40>)
 8008dbe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008dc2:	601a      	str	r2, [r3, #0]
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008dc8:	683b      	ldr	r3, [r7, #0]
 8008dca:	f383 8811 	msr	BASEPRI, r3
}
 8008dce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008dd0:	bf00      	nop
 8008dd2:	3708      	adds	r7, #8
 8008dd4:	46bd      	mov	sp, r7
 8008dd6:	bd80      	pop	{r7, pc}
 8008dd8:	e000ed04 	.word	0xe000ed04

08008ddc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008ddc:	b480      	push	{r7}
 8008dde:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008de0:	4b0b      	ldr	r3, [pc, #44]	@ (8008e10 <vPortSetupTimerInterrupt+0x34>)
 8008de2:	2200      	movs	r2, #0
 8008de4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008de6:	4b0b      	ldr	r3, [pc, #44]	@ (8008e14 <vPortSetupTimerInterrupt+0x38>)
 8008de8:	2200      	movs	r2, #0
 8008dea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008dec:	4b0a      	ldr	r3, [pc, #40]	@ (8008e18 <vPortSetupTimerInterrupt+0x3c>)
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	4a0a      	ldr	r2, [pc, #40]	@ (8008e1c <vPortSetupTimerInterrupt+0x40>)
 8008df2:	fba2 2303 	umull	r2, r3, r2, r3
 8008df6:	099b      	lsrs	r3, r3, #6
 8008df8:	4a09      	ldr	r2, [pc, #36]	@ (8008e20 <vPortSetupTimerInterrupt+0x44>)
 8008dfa:	3b01      	subs	r3, #1
 8008dfc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008dfe:	4b04      	ldr	r3, [pc, #16]	@ (8008e10 <vPortSetupTimerInterrupt+0x34>)
 8008e00:	2207      	movs	r2, #7
 8008e02:	601a      	str	r2, [r3, #0]
}
 8008e04:	bf00      	nop
 8008e06:	46bd      	mov	sp, r7
 8008e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0c:	4770      	bx	lr
 8008e0e:	bf00      	nop
 8008e10:	e000e010 	.word	0xe000e010
 8008e14:	e000e018 	.word	0xe000e018
 8008e18:	20000000 	.word	0x20000000
 8008e1c:	10624dd3 	.word	0x10624dd3
 8008e20:	e000e014 	.word	0xe000e014

08008e24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008e24:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008e34 <vPortEnableVFP+0x10>
 8008e28:	6801      	ldr	r1, [r0, #0]
 8008e2a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8008e2e:	6001      	str	r1, [r0, #0]
 8008e30:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008e32:	bf00      	nop
 8008e34:	e000ed88 	.word	0xe000ed88

08008e38 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008e38:	b580      	push	{r7, lr}
 8008e3a:	b08a      	sub	sp, #40	@ 0x28
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008e40:	2300      	movs	r3, #0
 8008e42:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008e44:	f7ff f86c 	bl	8007f20 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008e48:	4b5c      	ldr	r3, [pc, #368]	@ (8008fbc <pvPortMalloc+0x184>)
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d101      	bne.n	8008e54 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008e50:	f000 f924 	bl	800909c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008e54:	4b5a      	ldr	r3, [pc, #360]	@ (8008fc0 <pvPortMalloc+0x188>)
 8008e56:	681a      	ldr	r2, [r3, #0]
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	4013      	ands	r3, r2
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	f040 8095 	bne.w	8008f8c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d01e      	beq.n	8008ea6 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8008e68:	2208      	movs	r2, #8
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	4413      	add	r3, r2
 8008e6e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	f003 0307 	and.w	r3, r3, #7
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d015      	beq.n	8008ea6 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	f023 0307 	bic.w	r3, r3, #7
 8008e80:	3308      	adds	r3, #8
 8008e82:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	f003 0307 	and.w	r3, r3, #7
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d00b      	beq.n	8008ea6 <pvPortMalloc+0x6e>
	__asm volatile
 8008e8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e92:	f383 8811 	msr	BASEPRI, r3
 8008e96:	f3bf 8f6f 	isb	sy
 8008e9a:	f3bf 8f4f 	dsb	sy
 8008e9e:	617b      	str	r3, [r7, #20]
}
 8008ea0:	bf00      	nop
 8008ea2:	bf00      	nop
 8008ea4:	e7fd      	b.n	8008ea2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d06f      	beq.n	8008f8c <pvPortMalloc+0x154>
 8008eac:	4b45      	ldr	r3, [pc, #276]	@ (8008fc4 <pvPortMalloc+0x18c>)
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	687a      	ldr	r2, [r7, #4]
 8008eb2:	429a      	cmp	r2, r3
 8008eb4:	d86a      	bhi.n	8008f8c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008eb6:	4b44      	ldr	r3, [pc, #272]	@ (8008fc8 <pvPortMalloc+0x190>)
 8008eb8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008eba:	4b43      	ldr	r3, [pc, #268]	@ (8008fc8 <pvPortMalloc+0x190>)
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008ec0:	e004      	b.n	8008ecc <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ec4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008ecc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ece:	685b      	ldr	r3, [r3, #4]
 8008ed0:	687a      	ldr	r2, [r7, #4]
 8008ed2:	429a      	cmp	r2, r3
 8008ed4:	d903      	bls.n	8008ede <pvPortMalloc+0xa6>
 8008ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d1f1      	bne.n	8008ec2 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008ede:	4b37      	ldr	r3, [pc, #220]	@ (8008fbc <pvPortMalloc+0x184>)
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008ee4:	429a      	cmp	r2, r3
 8008ee6:	d051      	beq.n	8008f8c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008ee8:	6a3b      	ldr	r3, [r7, #32]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	2208      	movs	r2, #8
 8008eee:	4413      	add	r3, r2
 8008ef0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008ef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ef4:	681a      	ldr	r2, [r3, #0]
 8008ef6:	6a3b      	ldr	r3, [r7, #32]
 8008ef8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008efa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008efc:	685a      	ldr	r2, [r3, #4]
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	1ad2      	subs	r2, r2, r3
 8008f02:	2308      	movs	r3, #8
 8008f04:	005b      	lsls	r3, r3, #1
 8008f06:	429a      	cmp	r2, r3
 8008f08:	d920      	bls.n	8008f4c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008f0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	4413      	add	r3, r2
 8008f10:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008f12:	69bb      	ldr	r3, [r7, #24]
 8008f14:	f003 0307 	and.w	r3, r3, #7
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d00b      	beq.n	8008f34 <pvPortMalloc+0xfc>
	__asm volatile
 8008f1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f20:	f383 8811 	msr	BASEPRI, r3
 8008f24:	f3bf 8f6f 	isb	sy
 8008f28:	f3bf 8f4f 	dsb	sy
 8008f2c:	613b      	str	r3, [r7, #16]
}
 8008f2e:	bf00      	nop
 8008f30:	bf00      	nop
 8008f32:	e7fd      	b.n	8008f30 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008f34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f36:	685a      	ldr	r2, [r3, #4]
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	1ad2      	subs	r2, r2, r3
 8008f3c:	69bb      	ldr	r3, [r7, #24]
 8008f3e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008f40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f42:	687a      	ldr	r2, [r7, #4]
 8008f44:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008f46:	69b8      	ldr	r0, [r7, #24]
 8008f48:	f000 f90a 	bl	8009160 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008f4c:	4b1d      	ldr	r3, [pc, #116]	@ (8008fc4 <pvPortMalloc+0x18c>)
 8008f4e:	681a      	ldr	r2, [r3, #0]
 8008f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f52:	685b      	ldr	r3, [r3, #4]
 8008f54:	1ad3      	subs	r3, r2, r3
 8008f56:	4a1b      	ldr	r2, [pc, #108]	@ (8008fc4 <pvPortMalloc+0x18c>)
 8008f58:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008f5a:	4b1a      	ldr	r3, [pc, #104]	@ (8008fc4 <pvPortMalloc+0x18c>)
 8008f5c:	681a      	ldr	r2, [r3, #0]
 8008f5e:	4b1b      	ldr	r3, [pc, #108]	@ (8008fcc <pvPortMalloc+0x194>)
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	429a      	cmp	r2, r3
 8008f64:	d203      	bcs.n	8008f6e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008f66:	4b17      	ldr	r3, [pc, #92]	@ (8008fc4 <pvPortMalloc+0x18c>)
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	4a18      	ldr	r2, [pc, #96]	@ (8008fcc <pvPortMalloc+0x194>)
 8008f6c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f70:	685a      	ldr	r2, [r3, #4]
 8008f72:	4b13      	ldr	r3, [pc, #76]	@ (8008fc0 <pvPortMalloc+0x188>)
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	431a      	orrs	r2, r3
 8008f78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f7a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008f7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f7e:	2200      	movs	r2, #0
 8008f80:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008f82:	4b13      	ldr	r3, [pc, #76]	@ (8008fd0 <pvPortMalloc+0x198>)
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	3301      	adds	r3, #1
 8008f88:	4a11      	ldr	r2, [pc, #68]	@ (8008fd0 <pvPortMalloc+0x198>)
 8008f8a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008f8c:	f7fe ffd6 	bl	8007f3c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008f90:	69fb      	ldr	r3, [r7, #28]
 8008f92:	f003 0307 	and.w	r3, r3, #7
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d00b      	beq.n	8008fb2 <pvPortMalloc+0x17a>
	__asm volatile
 8008f9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f9e:	f383 8811 	msr	BASEPRI, r3
 8008fa2:	f3bf 8f6f 	isb	sy
 8008fa6:	f3bf 8f4f 	dsb	sy
 8008faa:	60fb      	str	r3, [r7, #12]
}
 8008fac:	bf00      	nop
 8008fae:	bf00      	nop
 8008fb0:	e7fd      	b.n	8008fae <pvPortMalloc+0x176>
	return pvReturn;
 8008fb2:	69fb      	ldr	r3, [r7, #28]
}
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	3728      	adds	r7, #40	@ 0x28
 8008fb8:	46bd      	mov	sp, r7
 8008fba:	bd80      	pop	{r7, pc}
 8008fbc:	20004280 	.word	0x20004280
 8008fc0:	20004294 	.word	0x20004294
 8008fc4:	20004284 	.word	0x20004284
 8008fc8:	20004278 	.word	0x20004278
 8008fcc:	20004288 	.word	0x20004288
 8008fd0:	2000428c 	.word	0x2000428c

08008fd4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008fd4:	b580      	push	{r7, lr}
 8008fd6:	b086      	sub	sp, #24
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d04f      	beq.n	8009086 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008fe6:	2308      	movs	r3, #8
 8008fe8:	425b      	negs	r3, r3
 8008fea:	697a      	ldr	r2, [r7, #20]
 8008fec:	4413      	add	r3, r2
 8008fee:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008ff0:	697b      	ldr	r3, [r7, #20]
 8008ff2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008ff4:	693b      	ldr	r3, [r7, #16]
 8008ff6:	685a      	ldr	r2, [r3, #4]
 8008ff8:	4b25      	ldr	r3, [pc, #148]	@ (8009090 <vPortFree+0xbc>)
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	4013      	ands	r3, r2
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d10b      	bne.n	800901a <vPortFree+0x46>
	__asm volatile
 8009002:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009006:	f383 8811 	msr	BASEPRI, r3
 800900a:	f3bf 8f6f 	isb	sy
 800900e:	f3bf 8f4f 	dsb	sy
 8009012:	60fb      	str	r3, [r7, #12]
}
 8009014:	bf00      	nop
 8009016:	bf00      	nop
 8009018:	e7fd      	b.n	8009016 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800901a:	693b      	ldr	r3, [r7, #16]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	2b00      	cmp	r3, #0
 8009020:	d00b      	beq.n	800903a <vPortFree+0x66>
	__asm volatile
 8009022:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009026:	f383 8811 	msr	BASEPRI, r3
 800902a:	f3bf 8f6f 	isb	sy
 800902e:	f3bf 8f4f 	dsb	sy
 8009032:	60bb      	str	r3, [r7, #8]
}
 8009034:	bf00      	nop
 8009036:	bf00      	nop
 8009038:	e7fd      	b.n	8009036 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800903a:	693b      	ldr	r3, [r7, #16]
 800903c:	685a      	ldr	r2, [r3, #4]
 800903e:	4b14      	ldr	r3, [pc, #80]	@ (8009090 <vPortFree+0xbc>)
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	4013      	ands	r3, r2
 8009044:	2b00      	cmp	r3, #0
 8009046:	d01e      	beq.n	8009086 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009048:	693b      	ldr	r3, [r7, #16]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	2b00      	cmp	r3, #0
 800904e:	d11a      	bne.n	8009086 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009050:	693b      	ldr	r3, [r7, #16]
 8009052:	685a      	ldr	r2, [r3, #4]
 8009054:	4b0e      	ldr	r3, [pc, #56]	@ (8009090 <vPortFree+0xbc>)
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	43db      	mvns	r3, r3
 800905a:	401a      	ands	r2, r3
 800905c:	693b      	ldr	r3, [r7, #16]
 800905e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009060:	f7fe ff5e 	bl	8007f20 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009064:	693b      	ldr	r3, [r7, #16]
 8009066:	685a      	ldr	r2, [r3, #4]
 8009068:	4b0a      	ldr	r3, [pc, #40]	@ (8009094 <vPortFree+0xc0>)
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	4413      	add	r3, r2
 800906e:	4a09      	ldr	r2, [pc, #36]	@ (8009094 <vPortFree+0xc0>)
 8009070:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009072:	6938      	ldr	r0, [r7, #16]
 8009074:	f000 f874 	bl	8009160 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009078:	4b07      	ldr	r3, [pc, #28]	@ (8009098 <vPortFree+0xc4>)
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	3301      	adds	r3, #1
 800907e:	4a06      	ldr	r2, [pc, #24]	@ (8009098 <vPortFree+0xc4>)
 8009080:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009082:	f7fe ff5b 	bl	8007f3c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009086:	bf00      	nop
 8009088:	3718      	adds	r7, #24
 800908a:	46bd      	mov	sp, r7
 800908c:	bd80      	pop	{r7, pc}
 800908e:	bf00      	nop
 8009090:	20004294 	.word	0x20004294
 8009094:	20004284 	.word	0x20004284
 8009098:	20004290 	.word	0x20004290

0800909c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800909c:	b480      	push	{r7}
 800909e:	b085      	sub	sp, #20
 80090a0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80090a2:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80090a6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80090a8:	4b27      	ldr	r3, [pc, #156]	@ (8009148 <prvHeapInit+0xac>)
 80090aa:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	f003 0307 	and.w	r3, r3, #7
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d00c      	beq.n	80090d0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	3307      	adds	r3, #7
 80090ba:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	f023 0307 	bic.w	r3, r3, #7
 80090c2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80090c4:	68ba      	ldr	r2, [r7, #8]
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	1ad3      	subs	r3, r2, r3
 80090ca:	4a1f      	ldr	r2, [pc, #124]	@ (8009148 <prvHeapInit+0xac>)
 80090cc:	4413      	add	r3, r2
 80090ce:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80090d4:	4a1d      	ldr	r2, [pc, #116]	@ (800914c <prvHeapInit+0xb0>)
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80090da:	4b1c      	ldr	r3, [pc, #112]	@ (800914c <prvHeapInit+0xb0>)
 80090dc:	2200      	movs	r2, #0
 80090de:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	68ba      	ldr	r2, [r7, #8]
 80090e4:	4413      	add	r3, r2
 80090e6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80090e8:	2208      	movs	r2, #8
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	1a9b      	subs	r3, r3, r2
 80090ee:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	f023 0307 	bic.w	r3, r3, #7
 80090f6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	4a15      	ldr	r2, [pc, #84]	@ (8009150 <prvHeapInit+0xb4>)
 80090fc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80090fe:	4b14      	ldr	r3, [pc, #80]	@ (8009150 <prvHeapInit+0xb4>)
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	2200      	movs	r2, #0
 8009104:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009106:	4b12      	ldr	r3, [pc, #72]	@ (8009150 <prvHeapInit+0xb4>)
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	2200      	movs	r2, #0
 800910c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009112:	683b      	ldr	r3, [r7, #0]
 8009114:	68fa      	ldr	r2, [r7, #12]
 8009116:	1ad2      	subs	r2, r2, r3
 8009118:	683b      	ldr	r3, [r7, #0]
 800911a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800911c:	4b0c      	ldr	r3, [pc, #48]	@ (8009150 <prvHeapInit+0xb4>)
 800911e:	681a      	ldr	r2, [r3, #0]
 8009120:	683b      	ldr	r3, [r7, #0]
 8009122:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009124:	683b      	ldr	r3, [r7, #0]
 8009126:	685b      	ldr	r3, [r3, #4]
 8009128:	4a0a      	ldr	r2, [pc, #40]	@ (8009154 <prvHeapInit+0xb8>)
 800912a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800912c:	683b      	ldr	r3, [r7, #0]
 800912e:	685b      	ldr	r3, [r3, #4]
 8009130:	4a09      	ldr	r2, [pc, #36]	@ (8009158 <prvHeapInit+0xbc>)
 8009132:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009134:	4b09      	ldr	r3, [pc, #36]	@ (800915c <prvHeapInit+0xc0>)
 8009136:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800913a:	601a      	str	r2, [r3, #0]
}
 800913c:	bf00      	nop
 800913e:	3714      	adds	r7, #20
 8009140:	46bd      	mov	sp, r7
 8009142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009146:	4770      	bx	lr
 8009148:	20000678 	.word	0x20000678
 800914c:	20004278 	.word	0x20004278
 8009150:	20004280 	.word	0x20004280
 8009154:	20004288 	.word	0x20004288
 8009158:	20004284 	.word	0x20004284
 800915c:	20004294 	.word	0x20004294

08009160 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009160:	b480      	push	{r7}
 8009162:	b085      	sub	sp, #20
 8009164:	af00      	add	r7, sp, #0
 8009166:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009168:	4b28      	ldr	r3, [pc, #160]	@ (800920c <prvInsertBlockIntoFreeList+0xac>)
 800916a:	60fb      	str	r3, [r7, #12]
 800916c:	e002      	b.n	8009174 <prvInsertBlockIntoFreeList+0x14>
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	60fb      	str	r3, [r7, #12]
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	687a      	ldr	r2, [r7, #4]
 800917a:	429a      	cmp	r2, r3
 800917c:	d8f7      	bhi.n	800916e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	685b      	ldr	r3, [r3, #4]
 8009186:	68ba      	ldr	r2, [r7, #8]
 8009188:	4413      	add	r3, r2
 800918a:	687a      	ldr	r2, [r7, #4]
 800918c:	429a      	cmp	r2, r3
 800918e:	d108      	bne.n	80091a2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	685a      	ldr	r2, [r3, #4]
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	685b      	ldr	r3, [r3, #4]
 8009198:	441a      	add	r2, r3
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	685b      	ldr	r3, [r3, #4]
 80091aa:	68ba      	ldr	r2, [r7, #8]
 80091ac:	441a      	add	r2, r3
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	429a      	cmp	r2, r3
 80091b4:	d118      	bne.n	80091e8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	681a      	ldr	r2, [r3, #0]
 80091ba:	4b15      	ldr	r3, [pc, #84]	@ (8009210 <prvInsertBlockIntoFreeList+0xb0>)
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	429a      	cmp	r2, r3
 80091c0:	d00d      	beq.n	80091de <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	685a      	ldr	r2, [r3, #4]
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	685b      	ldr	r3, [r3, #4]
 80091cc:	441a      	add	r2, r3
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	681a      	ldr	r2, [r3, #0]
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	601a      	str	r2, [r3, #0]
 80091dc:	e008      	b.n	80091f0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80091de:	4b0c      	ldr	r3, [pc, #48]	@ (8009210 <prvInsertBlockIntoFreeList+0xb0>)
 80091e0:	681a      	ldr	r2, [r3, #0]
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	601a      	str	r2, [r3, #0]
 80091e6:	e003      	b.n	80091f0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	681a      	ldr	r2, [r3, #0]
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80091f0:	68fa      	ldr	r2, [r7, #12]
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	429a      	cmp	r2, r3
 80091f6:	d002      	beq.n	80091fe <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	687a      	ldr	r2, [r7, #4]
 80091fc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80091fe:	bf00      	nop
 8009200:	3714      	adds	r7, #20
 8009202:	46bd      	mov	sp, r7
 8009204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009208:	4770      	bx	lr
 800920a:	bf00      	nop
 800920c:	20004278 	.word	0x20004278
 8009210:	20004280 	.word	0x20004280

08009214 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009214:	b580      	push	{r7, lr}
 8009216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009218:	2200      	movs	r2, #0
 800921a:	4912      	ldr	r1, [pc, #72]	@ (8009264 <MX_USB_DEVICE_Init+0x50>)
 800921c:	4812      	ldr	r0, [pc, #72]	@ (8009268 <MX_USB_DEVICE_Init+0x54>)
 800921e:	f7fc fbdd 	bl	80059dc <USBD_Init>
 8009222:	4603      	mov	r3, r0
 8009224:	2b00      	cmp	r3, #0
 8009226:	d001      	beq.n	800922c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009228:	f7f7 fbda 	bl	80009e0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800922c:	490f      	ldr	r1, [pc, #60]	@ (800926c <MX_USB_DEVICE_Init+0x58>)
 800922e:	480e      	ldr	r0, [pc, #56]	@ (8009268 <MX_USB_DEVICE_Init+0x54>)
 8009230:	f7fc fc04 	bl	8005a3c <USBD_RegisterClass>
 8009234:	4603      	mov	r3, r0
 8009236:	2b00      	cmp	r3, #0
 8009238:	d001      	beq.n	800923e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800923a:	f7f7 fbd1 	bl	80009e0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800923e:	490c      	ldr	r1, [pc, #48]	@ (8009270 <MX_USB_DEVICE_Init+0x5c>)
 8009240:	4809      	ldr	r0, [pc, #36]	@ (8009268 <MX_USB_DEVICE_Init+0x54>)
 8009242:	f7fc fb3b 	bl	80058bc <USBD_CDC_RegisterInterface>
 8009246:	4603      	mov	r3, r0
 8009248:	2b00      	cmp	r3, #0
 800924a:	d001      	beq.n	8009250 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800924c:	f7f7 fbc8 	bl	80009e0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009250:	4805      	ldr	r0, [pc, #20]	@ (8009268 <MX_USB_DEVICE_Init+0x54>)
 8009252:	f7fc fc29 	bl	8005aa8 <USBD_Start>
 8009256:	4603      	mov	r3, r0
 8009258:	2b00      	cmp	r3, #0
 800925a:	d001      	beq.n	8009260 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800925c:	f7f7 fbc0 	bl	80009e0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009260:	bf00      	nop
 8009262:	bd80      	pop	{r7, pc}
 8009264:	200000b0 	.word	0x200000b0
 8009268:	20004298 	.word	0x20004298
 800926c:	20000018 	.word	0x20000018
 8009270:	2000009c 	.word	0x2000009c

08009274 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009274:	b580      	push	{r7, lr}
 8009276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009278:	2200      	movs	r2, #0
 800927a:	4905      	ldr	r1, [pc, #20]	@ (8009290 <CDC_Init_FS+0x1c>)
 800927c:	4805      	ldr	r0, [pc, #20]	@ (8009294 <CDC_Init_FS+0x20>)
 800927e:	f7fc fb37 	bl	80058f0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009282:	4905      	ldr	r1, [pc, #20]	@ (8009298 <CDC_Init_FS+0x24>)
 8009284:	4803      	ldr	r0, [pc, #12]	@ (8009294 <CDC_Init_FS+0x20>)
 8009286:	f7fc fb55 	bl	8005934 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800928a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800928c:	4618      	mov	r0, r3
 800928e:	bd80      	pop	{r7, pc}
 8009290:	20004d74 	.word	0x20004d74
 8009294:	20004298 	.word	0x20004298
 8009298:	20004574 	.word	0x20004574

0800929c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800929c:	b480      	push	{r7}
 800929e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80092a0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80092a2:	4618      	mov	r0, r3
 80092a4:	46bd      	mov	sp, r7
 80092a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092aa:	4770      	bx	lr

080092ac <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80092ac:	b480      	push	{r7}
 80092ae:	b083      	sub	sp, #12
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	4603      	mov	r3, r0
 80092b4:	6039      	str	r1, [r7, #0]
 80092b6:	71fb      	strb	r3, [r7, #7]
 80092b8:	4613      	mov	r3, r2
 80092ba:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80092bc:	79fb      	ldrb	r3, [r7, #7]
 80092be:	2b23      	cmp	r3, #35	@ 0x23
 80092c0:	d84a      	bhi.n	8009358 <CDC_Control_FS+0xac>
 80092c2:	a201      	add	r2, pc, #4	@ (adr r2, 80092c8 <CDC_Control_FS+0x1c>)
 80092c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092c8:	08009359 	.word	0x08009359
 80092cc:	08009359 	.word	0x08009359
 80092d0:	08009359 	.word	0x08009359
 80092d4:	08009359 	.word	0x08009359
 80092d8:	08009359 	.word	0x08009359
 80092dc:	08009359 	.word	0x08009359
 80092e0:	08009359 	.word	0x08009359
 80092e4:	08009359 	.word	0x08009359
 80092e8:	08009359 	.word	0x08009359
 80092ec:	08009359 	.word	0x08009359
 80092f0:	08009359 	.word	0x08009359
 80092f4:	08009359 	.word	0x08009359
 80092f8:	08009359 	.word	0x08009359
 80092fc:	08009359 	.word	0x08009359
 8009300:	08009359 	.word	0x08009359
 8009304:	08009359 	.word	0x08009359
 8009308:	08009359 	.word	0x08009359
 800930c:	08009359 	.word	0x08009359
 8009310:	08009359 	.word	0x08009359
 8009314:	08009359 	.word	0x08009359
 8009318:	08009359 	.word	0x08009359
 800931c:	08009359 	.word	0x08009359
 8009320:	08009359 	.word	0x08009359
 8009324:	08009359 	.word	0x08009359
 8009328:	08009359 	.word	0x08009359
 800932c:	08009359 	.word	0x08009359
 8009330:	08009359 	.word	0x08009359
 8009334:	08009359 	.word	0x08009359
 8009338:	08009359 	.word	0x08009359
 800933c:	08009359 	.word	0x08009359
 8009340:	08009359 	.word	0x08009359
 8009344:	08009359 	.word	0x08009359
 8009348:	08009359 	.word	0x08009359
 800934c:	08009359 	.word	0x08009359
 8009350:	08009359 	.word	0x08009359
 8009354:	08009359 	.word	0x08009359
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009358:	bf00      	nop
  }

  return (USBD_OK);
 800935a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800935c:	4618      	mov	r0, r3
 800935e:	370c      	adds	r7, #12
 8009360:	46bd      	mov	sp, r7
 8009362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009366:	4770      	bx	lr

08009368 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009368:	b580      	push	{r7, lr}
 800936a:	b082      	sub	sp, #8
 800936c:	af00      	add	r7, sp, #0
 800936e:	6078      	str	r0, [r7, #4]
 8009370:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009372:	6879      	ldr	r1, [r7, #4]
 8009374:	4805      	ldr	r0, [pc, #20]	@ (800938c <CDC_Receive_FS+0x24>)
 8009376:	f7fc fadd 	bl	8005934 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800937a:	4804      	ldr	r0, [pc, #16]	@ (800938c <CDC_Receive_FS+0x24>)
 800937c:	f7fc faf8 	bl	8005970 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009380:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009382:	4618      	mov	r0, r3
 8009384:	3708      	adds	r7, #8
 8009386:	46bd      	mov	sp, r7
 8009388:	bd80      	pop	{r7, pc}
 800938a:	bf00      	nop
 800938c:	20004298 	.word	0x20004298

08009390 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009390:	b480      	push	{r7}
 8009392:	b087      	sub	sp, #28
 8009394:	af00      	add	r7, sp, #0
 8009396:	60f8      	str	r0, [r7, #12]
 8009398:	60b9      	str	r1, [r7, #8]
 800939a:	4613      	mov	r3, r2
 800939c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800939e:	2300      	movs	r3, #0
 80093a0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80093a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80093a6:	4618      	mov	r0, r3
 80093a8:	371c      	adds	r7, #28
 80093aa:	46bd      	mov	sp, r7
 80093ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b0:	4770      	bx	lr
	...

080093b4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80093b4:	b480      	push	{r7}
 80093b6:	b083      	sub	sp, #12
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	4603      	mov	r3, r0
 80093bc:	6039      	str	r1, [r7, #0]
 80093be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80093c0:	683b      	ldr	r3, [r7, #0]
 80093c2:	2212      	movs	r2, #18
 80093c4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80093c6:	4b03      	ldr	r3, [pc, #12]	@ (80093d4 <USBD_FS_DeviceDescriptor+0x20>)
}
 80093c8:	4618      	mov	r0, r3
 80093ca:	370c      	adds	r7, #12
 80093cc:	46bd      	mov	sp, r7
 80093ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d2:	4770      	bx	lr
 80093d4:	200000cc 	.word	0x200000cc

080093d8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80093d8:	b480      	push	{r7}
 80093da:	b083      	sub	sp, #12
 80093dc:	af00      	add	r7, sp, #0
 80093de:	4603      	mov	r3, r0
 80093e0:	6039      	str	r1, [r7, #0]
 80093e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80093e4:	683b      	ldr	r3, [r7, #0]
 80093e6:	2204      	movs	r2, #4
 80093e8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80093ea:	4b03      	ldr	r3, [pc, #12]	@ (80093f8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80093ec:	4618      	mov	r0, r3
 80093ee:	370c      	adds	r7, #12
 80093f0:	46bd      	mov	sp, r7
 80093f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f6:	4770      	bx	lr
 80093f8:	200000e0 	.word	0x200000e0

080093fc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80093fc:	b580      	push	{r7, lr}
 80093fe:	b082      	sub	sp, #8
 8009400:	af00      	add	r7, sp, #0
 8009402:	4603      	mov	r3, r0
 8009404:	6039      	str	r1, [r7, #0]
 8009406:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009408:	79fb      	ldrb	r3, [r7, #7]
 800940a:	2b00      	cmp	r3, #0
 800940c:	d105      	bne.n	800941a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800940e:	683a      	ldr	r2, [r7, #0]
 8009410:	4907      	ldr	r1, [pc, #28]	@ (8009430 <USBD_FS_ProductStrDescriptor+0x34>)
 8009412:	4808      	ldr	r0, [pc, #32]	@ (8009434 <USBD_FS_ProductStrDescriptor+0x38>)
 8009414:	f7fd fcf8 	bl	8006e08 <USBD_GetString>
 8009418:	e004      	b.n	8009424 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800941a:	683a      	ldr	r2, [r7, #0]
 800941c:	4904      	ldr	r1, [pc, #16]	@ (8009430 <USBD_FS_ProductStrDescriptor+0x34>)
 800941e:	4805      	ldr	r0, [pc, #20]	@ (8009434 <USBD_FS_ProductStrDescriptor+0x38>)
 8009420:	f7fd fcf2 	bl	8006e08 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009424:	4b02      	ldr	r3, [pc, #8]	@ (8009430 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009426:	4618      	mov	r0, r3
 8009428:	3708      	adds	r7, #8
 800942a:	46bd      	mov	sp, r7
 800942c:	bd80      	pop	{r7, pc}
 800942e:	bf00      	nop
 8009430:	20005574 	.word	0x20005574
 8009434:	08009e5c 	.word	0x08009e5c

08009438 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009438:	b580      	push	{r7, lr}
 800943a:	b082      	sub	sp, #8
 800943c:	af00      	add	r7, sp, #0
 800943e:	4603      	mov	r3, r0
 8009440:	6039      	str	r1, [r7, #0]
 8009442:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009444:	683a      	ldr	r2, [r7, #0]
 8009446:	4904      	ldr	r1, [pc, #16]	@ (8009458 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009448:	4804      	ldr	r0, [pc, #16]	@ (800945c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800944a:	f7fd fcdd 	bl	8006e08 <USBD_GetString>
  return USBD_StrDesc;
 800944e:	4b02      	ldr	r3, [pc, #8]	@ (8009458 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009450:	4618      	mov	r0, r3
 8009452:	3708      	adds	r7, #8
 8009454:	46bd      	mov	sp, r7
 8009456:	bd80      	pop	{r7, pc}
 8009458:	20005574 	.word	0x20005574
 800945c:	08009e70 	.word	0x08009e70

08009460 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009460:	b580      	push	{r7, lr}
 8009462:	b082      	sub	sp, #8
 8009464:	af00      	add	r7, sp, #0
 8009466:	4603      	mov	r3, r0
 8009468:	6039      	str	r1, [r7, #0]
 800946a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800946c:	683b      	ldr	r3, [r7, #0]
 800946e:	221a      	movs	r2, #26
 8009470:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009472:	f000 f843 	bl	80094fc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009476:	4b02      	ldr	r3, [pc, #8]	@ (8009480 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009478:	4618      	mov	r0, r3
 800947a:	3708      	adds	r7, #8
 800947c:	46bd      	mov	sp, r7
 800947e:	bd80      	pop	{r7, pc}
 8009480:	200000e4 	.word	0x200000e4

08009484 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009484:	b580      	push	{r7, lr}
 8009486:	b082      	sub	sp, #8
 8009488:	af00      	add	r7, sp, #0
 800948a:	4603      	mov	r3, r0
 800948c:	6039      	str	r1, [r7, #0]
 800948e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009490:	79fb      	ldrb	r3, [r7, #7]
 8009492:	2b00      	cmp	r3, #0
 8009494:	d105      	bne.n	80094a2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009496:	683a      	ldr	r2, [r7, #0]
 8009498:	4907      	ldr	r1, [pc, #28]	@ (80094b8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800949a:	4808      	ldr	r0, [pc, #32]	@ (80094bc <USBD_FS_ConfigStrDescriptor+0x38>)
 800949c:	f7fd fcb4 	bl	8006e08 <USBD_GetString>
 80094a0:	e004      	b.n	80094ac <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80094a2:	683a      	ldr	r2, [r7, #0]
 80094a4:	4904      	ldr	r1, [pc, #16]	@ (80094b8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80094a6:	4805      	ldr	r0, [pc, #20]	@ (80094bc <USBD_FS_ConfigStrDescriptor+0x38>)
 80094a8:	f7fd fcae 	bl	8006e08 <USBD_GetString>
  }
  return USBD_StrDesc;
 80094ac:	4b02      	ldr	r3, [pc, #8]	@ (80094b8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80094ae:	4618      	mov	r0, r3
 80094b0:	3708      	adds	r7, #8
 80094b2:	46bd      	mov	sp, r7
 80094b4:	bd80      	pop	{r7, pc}
 80094b6:	bf00      	nop
 80094b8:	20005574 	.word	0x20005574
 80094bc:	08009e84 	.word	0x08009e84

080094c0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80094c0:	b580      	push	{r7, lr}
 80094c2:	b082      	sub	sp, #8
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	4603      	mov	r3, r0
 80094c8:	6039      	str	r1, [r7, #0]
 80094ca:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80094cc:	79fb      	ldrb	r3, [r7, #7]
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d105      	bne.n	80094de <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80094d2:	683a      	ldr	r2, [r7, #0]
 80094d4:	4907      	ldr	r1, [pc, #28]	@ (80094f4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80094d6:	4808      	ldr	r0, [pc, #32]	@ (80094f8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80094d8:	f7fd fc96 	bl	8006e08 <USBD_GetString>
 80094dc:	e004      	b.n	80094e8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80094de:	683a      	ldr	r2, [r7, #0]
 80094e0:	4904      	ldr	r1, [pc, #16]	@ (80094f4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80094e2:	4805      	ldr	r0, [pc, #20]	@ (80094f8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80094e4:	f7fd fc90 	bl	8006e08 <USBD_GetString>
  }
  return USBD_StrDesc;
 80094e8:	4b02      	ldr	r3, [pc, #8]	@ (80094f4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80094ea:	4618      	mov	r0, r3
 80094ec:	3708      	adds	r7, #8
 80094ee:	46bd      	mov	sp, r7
 80094f0:	bd80      	pop	{r7, pc}
 80094f2:	bf00      	nop
 80094f4:	20005574 	.word	0x20005574
 80094f8:	08009e90 	.word	0x08009e90

080094fc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80094fc:	b580      	push	{r7, lr}
 80094fe:	b084      	sub	sp, #16
 8009500:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009502:	4b0f      	ldr	r3, [pc, #60]	@ (8009540 <Get_SerialNum+0x44>)
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009508:	4b0e      	ldr	r3, [pc, #56]	@ (8009544 <Get_SerialNum+0x48>)
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800950e:	4b0e      	ldr	r3, [pc, #56]	@ (8009548 <Get_SerialNum+0x4c>)
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009514:	68fa      	ldr	r2, [r7, #12]
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	4413      	add	r3, r2
 800951a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	2b00      	cmp	r3, #0
 8009520:	d009      	beq.n	8009536 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009522:	2208      	movs	r2, #8
 8009524:	4909      	ldr	r1, [pc, #36]	@ (800954c <Get_SerialNum+0x50>)
 8009526:	68f8      	ldr	r0, [r7, #12]
 8009528:	f000 f814 	bl	8009554 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800952c:	2204      	movs	r2, #4
 800952e:	4908      	ldr	r1, [pc, #32]	@ (8009550 <Get_SerialNum+0x54>)
 8009530:	68b8      	ldr	r0, [r7, #8]
 8009532:	f000 f80f 	bl	8009554 <IntToUnicode>
  }
}
 8009536:	bf00      	nop
 8009538:	3710      	adds	r7, #16
 800953a:	46bd      	mov	sp, r7
 800953c:	bd80      	pop	{r7, pc}
 800953e:	bf00      	nop
 8009540:	1fff7a10 	.word	0x1fff7a10
 8009544:	1fff7a14 	.word	0x1fff7a14
 8009548:	1fff7a18 	.word	0x1fff7a18
 800954c:	200000e6 	.word	0x200000e6
 8009550:	200000f6 	.word	0x200000f6

08009554 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009554:	b480      	push	{r7}
 8009556:	b087      	sub	sp, #28
 8009558:	af00      	add	r7, sp, #0
 800955a:	60f8      	str	r0, [r7, #12]
 800955c:	60b9      	str	r1, [r7, #8]
 800955e:	4613      	mov	r3, r2
 8009560:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009562:	2300      	movs	r3, #0
 8009564:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009566:	2300      	movs	r3, #0
 8009568:	75fb      	strb	r3, [r7, #23]
 800956a:	e027      	b.n	80095bc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	0f1b      	lsrs	r3, r3, #28
 8009570:	2b09      	cmp	r3, #9
 8009572:	d80b      	bhi.n	800958c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	0f1b      	lsrs	r3, r3, #28
 8009578:	b2da      	uxtb	r2, r3
 800957a:	7dfb      	ldrb	r3, [r7, #23]
 800957c:	005b      	lsls	r3, r3, #1
 800957e:	4619      	mov	r1, r3
 8009580:	68bb      	ldr	r3, [r7, #8]
 8009582:	440b      	add	r3, r1
 8009584:	3230      	adds	r2, #48	@ 0x30
 8009586:	b2d2      	uxtb	r2, r2
 8009588:	701a      	strb	r2, [r3, #0]
 800958a:	e00a      	b.n	80095a2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	0f1b      	lsrs	r3, r3, #28
 8009590:	b2da      	uxtb	r2, r3
 8009592:	7dfb      	ldrb	r3, [r7, #23]
 8009594:	005b      	lsls	r3, r3, #1
 8009596:	4619      	mov	r1, r3
 8009598:	68bb      	ldr	r3, [r7, #8]
 800959a:	440b      	add	r3, r1
 800959c:	3237      	adds	r2, #55	@ 0x37
 800959e:	b2d2      	uxtb	r2, r2
 80095a0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	011b      	lsls	r3, r3, #4
 80095a6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80095a8:	7dfb      	ldrb	r3, [r7, #23]
 80095aa:	005b      	lsls	r3, r3, #1
 80095ac:	3301      	adds	r3, #1
 80095ae:	68ba      	ldr	r2, [r7, #8]
 80095b0:	4413      	add	r3, r2
 80095b2:	2200      	movs	r2, #0
 80095b4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80095b6:	7dfb      	ldrb	r3, [r7, #23]
 80095b8:	3301      	adds	r3, #1
 80095ba:	75fb      	strb	r3, [r7, #23]
 80095bc:	7dfa      	ldrb	r2, [r7, #23]
 80095be:	79fb      	ldrb	r3, [r7, #7]
 80095c0:	429a      	cmp	r2, r3
 80095c2:	d3d3      	bcc.n	800956c <IntToUnicode+0x18>
  }
}
 80095c4:	bf00      	nop
 80095c6:	bf00      	nop
 80095c8:	371c      	adds	r7, #28
 80095ca:	46bd      	mov	sp, r7
 80095cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d0:	4770      	bx	lr
	...

080095d4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80095d4:	b580      	push	{r7, lr}
 80095d6:	b08a      	sub	sp, #40	@ 0x28
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80095dc:	f107 0314 	add.w	r3, r7, #20
 80095e0:	2200      	movs	r2, #0
 80095e2:	601a      	str	r2, [r3, #0]
 80095e4:	605a      	str	r2, [r3, #4]
 80095e6:	609a      	str	r2, [r3, #8]
 80095e8:	60da      	str	r2, [r3, #12]
 80095ea:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80095f4:	d13a      	bne.n	800966c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80095f6:	2300      	movs	r3, #0
 80095f8:	613b      	str	r3, [r7, #16]
 80095fa:	4b1e      	ldr	r3, [pc, #120]	@ (8009674 <HAL_PCD_MspInit+0xa0>)
 80095fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80095fe:	4a1d      	ldr	r2, [pc, #116]	@ (8009674 <HAL_PCD_MspInit+0xa0>)
 8009600:	f043 0301 	orr.w	r3, r3, #1
 8009604:	6313      	str	r3, [r2, #48]	@ 0x30
 8009606:	4b1b      	ldr	r3, [pc, #108]	@ (8009674 <HAL_PCD_MspInit+0xa0>)
 8009608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800960a:	f003 0301 	and.w	r3, r3, #1
 800960e:	613b      	str	r3, [r7, #16]
 8009610:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009612:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8009616:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009618:	2302      	movs	r3, #2
 800961a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800961c:	2300      	movs	r3, #0
 800961e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009620:	2303      	movs	r3, #3
 8009622:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009624:	230a      	movs	r3, #10
 8009626:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009628:	f107 0314 	add.w	r3, r7, #20
 800962c:	4619      	mov	r1, r3
 800962e:	4812      	ldr	r0, [pc, #72]	@ (8009678 <HAL_PCD_MspInit+0xa4>)
 8009630:	f7f7 fc98 	bl	8000f64 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009634:	4b0f      	ldr	r3, [pc, #60]	@ (8009674 <HAL_PCD_MspInit+0xa0>)
 8009636:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009638:	4a0e      	ldr	r2, [pc, #56]	@ (8009674 <HAL_PCD_MspInit+0xa0>)
 800963a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800963e:	6353      	str	r3, [r2, #52]	@ 0x34
 8009640:	2300      	movs	r3, #0
 8009642:	60fb      	str	r3, [r7, #12]
 8009644:	4b0b      	ldr	r3, [pc, #44]	@ (8009674 <HAL_PCD_MspInit+0xa0>)
 8009646:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009648:	4a0a      	ldr	r2, [pc, #40]	@ (8009674 <HAL_PCD_MspInit+0xa0>)
 800964a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800964e:	6453      	str	r3, [r2, #68]	@ 0x44
 8009650:	4b08      	ldr	r3, [pc, #32]	@ (8009674 <HAL_PCD_MspInit+0xa0>)
 8009652:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009654:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009658:	60fb      	str	r3, [r7, #12]
 800965a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800965c:	2200      	movs	r2, #0
 800965e:	2105      	movs	r1, #5
 8009660:	2043      	movs	r0, #67	@ 0x43
 8009662:	f7f7 fc55 	bl	8000f10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009666:	2043      	movs	r0, #67	@ 0x43
 8009668:	f7f7 fc6e 	bl	8000f48 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800966c:	bf00      	nop
 800966e:	3728      	adds	r7, #40	@ 0x28
 8009670:	46bd      	mov	sp, r7
 8009672:	bd80      	pop	{r7, pc}
 8009674:	40023800 	.word	0x40023800
 8009678:	40020000 	.word	0x40020000

0800967c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800967c:	b580      	push	{r7, lr}
 800967e:	b082      	sub	sp, #8
 8009680:	af00      	add	r7, sp, #0
 8009682:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8009690:	4619      	mov	r1, r3
 8009692:	4610      	mov	r0, r2
 8009694:	f7fc fa55 	bl	8005b42 <USBD_LL_SetupStage>
}
 8009698:	bf00      	nop
 800969a:	3708      	adds	r7, #8
 800969c:	46bd      	mov	sp, r7
 800969e:	bd80      	pop	{r7, pc}

080096a0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80096a0:	b580      	push	{r7, lr}
 80096a2:	b082      	sub	sp, #8
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	6078      	str	r0, [r7, #4]
 80096a8:	460b      	mov	r3, r1
 80096aa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80096b2:	78fa      	ldrb	r2, [r7, #3]
 80096b4:	6879      	ldr	r1, [r7, #4]
 80096b6:	4613      	mov	r3, r2
 80096b8:	00db      	lsls	r3, r3, #3
 80096ba:	4413      	add	r3, r2
 80096bc:	009b      	lsls	r3, r3, #2
 80096be:	440b      	add	r3, r1
 80096c0:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80096c4:	681a      	ldr	r2, [r3, #0]
 80096c6:	78fb      	ldrb	r3, [r7, #3]
 80096c8:	4619      	mov	r1, r3
 80096ca:	f7fc fa8f 	bl	8005bec <USBD_LL_DataOutStage>
}
 80096ce:	bf00      	nop
 80096d0:	3708      	adds	r7, #8
 80096d2:	46bd      	mov	sp, r7
 80096d4:	bd80      	pop	{r7, pc}

080096d6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80096d6:	b580      	push	{r7, lr}
 80096d8:	b082      	sub	sp, #8
 80096da:	af00      	add	r7, sp, #0
 80096dc:	6078      	str	r0, [r7, #4]
 80096de:	460b      	mov	r3, r1
 80096e0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80096e8:	78fa      	ldrb	r2, [r7, #3]
 80096ea:	6879      	ldr	r1, [r7, #4]
 80096ec:	4613      	mov	r3, r2
 80096ee:	00db      	lsls	r3, r3, #3
 80096f0:	4413      	add	r3, r2
 80096f2:	009b      	lsls	r3, r3, #2
 80096f4:	440b      	add	r3, r1
 80096f6:	3320      	adds	r3, #32
 80096f8:	681a      	ldr	r2, [r3, #0]
 80096fa:	78fb      	ldrb	r3, [r7, #3]
 80096fc:	4619      	mov	r1, r3
 80096fe:	f7fc fb28 	bl	8005d52 <USBD_LL_DataInStage>
}
 8009702:	bf00      	nop
 8009704:	3708      	adds	r7, #8
 8009706:	46bd      	mov	sp, r7
 8009708:	bd80      	pop	{r7, pc}

0800970a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800970a:	b580      	push	{r7, lr}
 800970c:	b082      	sub	sp, #8
 800970e:	af00      	add	r7, sp, #0
 8009710:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009718:	4618      	mov	r0, r3
 800971a:	f7fc fc62 	bl	8005fe2 <USBD_LL_SOF>
}
 800971e:	bf00      	nop
 8009720:	3708      	adds	r7, #8
 8009722:	46bd      	mov	sp, r7
 8009724:	bd80      	pop	{r7, pc}

08009726 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009726:	b580      	push	{r7, lr}
 8009728:	b084      	sub	sp, #16
 800972a:	af00      	add	r7, sp, #0
 800972c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800972e:	2301      	movs	r3, #1
 8009730:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	79db      	ldrb	r3, [r3, #7]
 8009736:	2b00      	cmp	r3, #0
 8009738:	d102      	bne.n	8009740 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800973a:	2300      	movs	r3, #0
 800973c:	73fb      	strb	r3, [r7, #15]
 800973e:	e008      	b.n	8009752 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	79db      	ldrb	r3, [r3, #7]
 8009744:	2b02      	cmp	r3, #2
 8009746:	d102      	bne.n	800974e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8009748:	2301      	movs	r3, #1
 800974a:	73fb      	strb	r3, [r7, #15]
 800974c:	e001      	b.n	8009752 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800974e:	f7f7 f947 	bl	80009e0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009758:	7bfa      	ldrb	r2, [r7, #15]
 800975a:	4611      	mov	r1, r2
 800975c:	4618      	mov	r0, r3
 800975e:	f7fc fbfc 	bl	8005f5a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009768:	4618      	mov	r0, r3
 800976a:	f7fc fba4 	bl	8005eb6 <USBD_LL_Reset>
}
 800976e:	bf00      	nop
 8009770:	3710      	adds	r7, #16
 8009772:	46bd      	mov	sp, r7
 8009774:	bd80      	pop	{r7, pc}
	...

08009778 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009778:	b580      	push	{r7, lr}
 800977a:	b082      	sub	sp, #8
 800977c:	af00      	add	r7, sp, #0
 800977e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009786:	4618      	mov	r0, r3
 8009788:	f7fc fbf7 	bl	8005f7a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	687a      	ldr	r2, [r7, #4]
 8009798:	6812      	ldr	r2, [r2, #0]
 800979a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800979e:	f043 0301 	orr.w	r3, r3, #1
 80097a2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	7adb      	ldrb	r3, [r3, #11]
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d005      	beq.n	80097b8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80097ac:	4b04      	ldr	r3, [pc, #16]	@ (80097c0 <HAL_PCD_SuspendCallback+0x48>)
 80097ae:	691b      	ldr	r3, [r3, #16]
 80097b0:	4a03      	ldr	r2, [pc, #12]	@ (80097c0 <HAL_PCD_SuspendCallback+0x48>)
 80097b2:	f043 0306 	orr.w	r3, r3, #6
 80097b6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80097b8:	bf00      	nop
 80097ba:	3708      	adds	r7, #8
 80097bc:	46bd      	mov	sp, r7
 80097be:	bd80      	pop	{r7, pc}
 80097c0:	e000ed00 	.word	0xe000ed00

080097c4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80097c4:	b580      	push	{r7, lr}
 80097c6:	b082      	sub	sp, #8
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80097d2:	4618      	mov	r0, r3
 80097d4:	f7fc fbed 	bl	8005fb2 <USBD_LL_Resume>
}
 80097d8:	bf00      	nop
 80097da:	3708      	adds	r7, #8
 80097dc:	46bd      	mov	sp, r7
 80097de:	bd80      	pop	{r7, pc}

080097e0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80097e0:	b580      	push	{r7, lr}
 80097e2:	b082      	sub	sp, #8
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	6078      	str	r0, [r7, #4]
 80097e8:	460b      	mov	r3, r1
 80097ea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80097f2:	78fa      	ldrb	r2, [r7, #3]
 80097f4:	4611      	mov	r1, r2
 80097f6:	4618      	mov	r0, r3
 80097f8:	f7fc fc45 	bl	8006086 <USBD_LL_IsoOUTIncomplete>
}
 80097fc:	bf00      	nop
 80097fe:	3708      	adds	r7, #8
 8009800:	46bd      	mov	sp, r7
 8009802:	bd80      	pop	{r7, pc}

08009804 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009804:	b580      	push	{r7, lr}
 8009806:	b082      	sub	sp, #8
 8009808:	af00      	add	r7, sp, #0
 800980a:	6078      	str	r0, [r7, #4]
 800980c:	460b      	mov	r3, r1
 800980e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009816:	78fa      	ldrb	r2, [r7, #3]
 8009818:	4611      	mov	r1, r2
 800981a:	4618      	mov	r0, r3
 800981c:	f7fc fc01 	bl	8006022 <USBD_LL_IsoINIncomplete>
}
 8009820:	bf00      	nop
 8009822:	3708      	adds	r7, #8
 8009824:	46bd      	mov	sp, r7
 8009826:	bd80      	pop	{r7, pc}

08009828 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009828:	b580      	push	{r7, lr}
 800982a:	b082      	sub	sp, #8
 800982c:	af00      	add	r7, sp, #0
 800982e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009836:	4618      	mov	r0, r3
 8009838:	f7fc fc57 	bl	80060ea <USBD_LL_DevConnected>
}
 800983c:	bf00      	nop
 800983e:	3708      	adds	r7, #8
 8009840:	46bd      	mov	sp, r7
 8009842:	bd80      	pop	{r7, pc}

08009844 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009844:	b580      	push	{r7, lr}
 8009846:	b082      	sub	sp, #8
 8009848:	af00      	add	r7, sp, #0
 800984a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009852:	4618      	mov	r0, r3
 8009854:	f7fc fc54 	bl	8006100 <USBD_LL_DevDisconnected>
}
 8009858:	bf00      	nop
 800985a:	3708      	adds	r7, #8
 800985c:	46bd      	mov	sp, r7
 800985e:	bd80      	pop	{r7, pc}

08009860 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009860:	b580      	push	{r7, lr}
 8009862:	b082      	sub	sp, #8
 8009864:	af00      	add	r7, sp, #0
 8009866:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	781b      	ldrb	r3, [r3, #0]
 800986c:	2b00      	cmp	r3, #0
 800986e:	d13c      	bne.n	80098ea <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009870:	4a20      	ldr	r2, [pc, #128]	@ (80098f4 <USBD_LL_Init+0x94>)
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	4a1e      	ldr	r2, [pc, #120]	@ (80098f4 <USBD_LL_Init+0x94>)
 800987c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009880:	4b1c      	ldr	r3, [pc, #112]	@ (80098f4 <USBD_LL_Init+0x94>)
 8009882:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8009886:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009888:	4b1a      	ldr	r3, [pc, #104]	@ (80098f4 <USBD_LL_Init+0x94>)
 800988a:	2204      	movs	r2, #4
 800988c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800988e:	4b19      	ldr	r3, [pc, #100]	@ (80098f4 <USBD_LL_Init+0x94>)
 8009890:	2202      	movs	r2, #2
 8009892:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009894:	4b17      	ldr	r3, [pc, #92]	@ (80098f4 <USBD_LL_Init+0x94>)
 8009896:	2200      	movs	r2, #0
 8009898:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800989a:	4b16      	ldr	r3, [pc, #88]	@ (80098f4 <USBD_LL_Init+0x94>)
 800989c:	2202      	movs	r2, #2
 800989e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80098a0:	4b14      	ldr	r3, [pc, #80]	@ (80098f4 <USBD_LL_Init+0x94>)
 80098a2:	2200      	movs	r2, #0
 80098a4:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80098a6:	4b13      	ldr	r3, [pc, #76]	@ (80098f4 <USBD_LL_Init+0x94>)
 80098a8:	2200      	movs	r2, #0
 80098aa:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80098ac:	4b11      	ldr	r3, [pc, #68]	@ (80098f4 <USBD_LL_Init+0x94>)
 80098ae:	2200      	movs	r2, #0
 80098b0:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80098b2:	4b10      	ldr	r3, [pc, #64]	@ (80098f4 <USBD_LL_Init+0x94>)
 80098b4:	2200      	movs	r2, #0
 80098b6:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80098b8:	4b0e      	ldr	r3, [pc, #56]	@ (80098f4 <USBD_LL_Init+0x94>)
 80098ba:	2200      	movs	r2, #0
 80098bc:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80098be:	480d      	ldr	r0, [pc, #52]	@ (80098f4 <USBD_LL_Init+0x94>)
 80098c0:	f7f7 fd36 	bl	8001330 <HAL_PCD_Init>
 80098c4:	4603      	mov	r3, r0
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d001      	beq.n	80098ce <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80098ca:	f7f7 f889 	bl	80009e0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80098ce:	2180      	movs	r1, #128	@ 0x80
 80098d0:	4808      	ldr	r0, [pc, #32]	@ (80098f4 <USBD_LL_Init+0x94>)
 80098d2:	f7f8 ff62 	bl	800279a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80098d6:	2240      	movs	r2, #64	@ 0x40
 80098d8:	2100      	movs	r1, #0
 80098da:	4806      	ldr	r0, [pc, #24]	@ (80098f4 <USBD_LL_Init+0x94>)
 80098dc:	f7f8 ff16 	bl	800270c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80098e0:	2280      	movs	r2, #128	@ 0x80
 80098e2:	2101      	movs	r1, #1
 80098e4:	4803      	ldr	r0, [pc, #12]	@ (80098f4 <USBD_LL_Init+0x94>)
 80098e6:	f7f8 ff11 	bl	800270c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80098ea:	2300      	movs	r3, #0
}
 80098ec:	4618      	mov	r0, r3
 80098ee:	3708      	adds	r7, #8
 80098f0:	46bd      	mov	sp, r7
 80098f2:	bd80      	pop	{r7, pc}
 80098f4:	20005774 	.word	0x20005774

080098f8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80098f8:	b580      	push	{r7, lr}
 80098fa:	b084      	sub	sp, #16
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009900:	2300      	movs	r3, #0
 8009902:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009904:	2300      	movs	r3, #0
 8009906:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800990e:	4618      	mov	r0, r3
 8009910:	f7f7 fe1d 	bl	800154e <HAL_PCD_Start>
 8009914:	4603      	mov	r3, r0
 8009916:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009918:	7bfb      	ldrb	r3, [r7, #15]
 800991a:	4618      	mov	r0, r3
 800991c:	f000 f942 	bl	8009ba4 <USBD_Get_USB_Status>
 8009920:	4603      	mov	r3, r0
 8009922:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009924:	7bbb      	ldrb	r3, [r7, #14]
}
 8009926:	4618      	mov	r0, r3
 8009928:	3710      	adds	r7, #16
 800992a:	46bd      	mov	sp, r7
 800992c:	bd80      	pop	{r7, pc}

0800992e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800992e:	b580      	push	{r7, lr}
 8009930:	b084      	sub	sp, #16
 8009932:	af00      	add	r7, sp, #0
 8009934:	6078      	str	r0, [r7, #4]
 8009936:	4608      	mov	r0, r1
 8009938:	4611      	mov	r1, r2
 800993a:	461a      	mov	r2, r3
 800993c:	4603      	mov	r3, r0
 800993e:	70fb      	strb	r3, [r7, #3]
 8009940:	460b      	mov	r3, r1
 8009942:	70bb      	strb	r3, [r7, #2]
 8009944:	4613      	mov	r3, r2
 8009946:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009948:	2300      	movs	r3, #0
 800994a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800994c:	2300      	movs	r3, #0
 800994e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009956:	78bb      	ldrb	r3, [r7, #2]
 8009958:	883a      	ldrh	r2, [r7, #0]
 800995a:	78f9      	ldrb	r1, [r7, #3]
 800995c:	f7f8 faf1 	bl	8001f42 <HAL_PCD_EP_Open>
 8009960:	4603      	mov	r3, r0
 8009962:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009964:	7bfb      	ldrb	r3, [r7, #15]
 8009966:	4618      	mov	r0, r3
 8009968:	f000 f91c 	bl	8009ba4 <USBD_Get_USB_Status>
 800996c:	4603      	mov	r3, r0
 800996e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009970:	7bbb      	ldrb	r3, [r7, #14]
}
 8009972:	4618      	mov	r0, r3
 8009974:	3710      	adds	r7, #16
 8009976:	46bd      	mov	sp, r7
 8009978:	bd80      	pop	{r7, pc}

0800997a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800997a:	b580      	push	{r7, lr}
 800997c:	b084      	sub	sp, #16
 800997e:	af00      	add	r7, sp, #0
 8009980:	6078      	str	r0, [r7, #4]
 8009982:	460b      	mov	r3, r1
 8009984:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009986:	2300      	movs	r3, #0
 8009988:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800998a:	2300      	movs	r3, #0
 800998c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009994:	78fa      	ldrb	r2, [r7, #3]
 8009996:	4611      	mov	r1, r2
 8009998:	4618      	mov	r0, r3
 800999a:	f7f8 fb3c 	bl	8002016 <HAL_PCD_EP_Close>
 800999e:	4603      	mov	r3, r0
 80099a0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80099a2:	7bfb      	ldrb	r3, [r7, #15]
 80099a4:	4618      	mov	r0, r3
 80099a6:	f000 f8fd 	bl	8009ba4 <USBD_Get_USB_Status>
 80099aa:	4603      	mov	r3, r0
 80099ac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80099ae:	7bbb      	ldrb	r3, [r7, #14]
}
 80099b0:	4618      	mov	r0, r3
 80099b2:	3710      	adds	r7, #16
 80099b4:	46bd      	mov	sp, r7
 80099b6:	bd80      	pop	{r7, pc}

080099b8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80099b8:	b580      	push	{r7, lr}
 80099ba:	b084      	sub	sp, #16
 80099bc:	af00      	add	r7, sp, #0
 80099be:	6078      	str	r0, [r7, #4]
 80099c0:	460b      	mov	r3, r1
 80099c2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80099c4:	2300      	movs	r3, #0
 80099c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80099c8:	2300      	movs	r3, #0
 80099ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80099d2:	78fa      	ldrb	r2, [r7, #3]
 80099d4:	4611      	mov	r1, r2
 80099d6:	4618      	mov	r0, r3
 80099d8:	f7f8 fbf4 	bl	80021c4 <HAL_PCD_EP_SetStall>
 80099dc:	4603      	mov	r3, r0
 80099de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80099e0:	7bfb      	ldrb	r3, [r7, #15]
 80099e2:	4618      	mov	r0, r3
 80099e4:	f000 f8de 	bl	8009ba4 <USBD_Get_USB_Status>
 80099e8:	4603      	mov	r3, r0
 80099ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80099ec:	7bbb      	ldrb	r3, [r7, #14]
}
 80099ee:	4618      	mov	r0, r3
 80099f0:	3710      	adds	r7, #16
 80099f2:	46bd      	mov	sp, r7
 80099f4:	bd80      	pop	{r7, pc}

080099f6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80099f6:	b580      	push	{r7, lr}
 80099f8:	b084      	sub	sp, #16
 80099fa:	af00      	add	r7, sp, #0
 80099fc:	6078      	str	r0, [r7, #4]
 80099fe:	460b      	mov	r3, r1
 8009a00:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a02:	2300      	movs	r3, #0
 8009a04:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a06:	2300      	movs	r3, #0
 8009a08:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009a10:	78fa      	ldrb	r2, [r7, #3]
 8009a12:	4611      	mov	r1, r2
 8009a14:	4618      	mov	r0, r3
 8009a16:	f7f8 fc38 	bl	800228a <HAL_PCD_EP_ClrStall>
 8009a1a:	4603      	mov	r3, r0
 8009a1c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a1e:	7bfb      	ldrb	r3, [r7, #15]
 8009a20:	4618      	mov	r0, r3
 8009a22:	f000 f8bf 	bl	8009ba4 <USBD_Get_USB_Status>
 8009a26:	4603      	mov	r3, r0
 8009a28:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a2a:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	3710      	adds	r7, #16
 8009a30:	46bd      	mov	sp, r7
 8009a32:	bd80      	pop	{r7, pc}

08009a34 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009a34:	b480      	push	{r7}
 8009a36:	b085      	sub	sp, #20
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	6078      	str	r0, [r7, #4]
 8009a3c:	460b      	mov	r3, r1
 8009a3e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009a46:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009a48:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	da0b      	bge.n	8009a68 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009a50:	78fb      	ldrb	r3, [r7, #3]
 8009a52:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009a56:	68f9      	ldr	r1, [r7, #12]
 8009a58:	4613      	mov	r3, r2
 8009a5a:	00db      	lsls	r3, r3, #3
 8009a5c:	4413      	add	r3, r2
 8009a5e:	009b      	lsls	r3, r3, #2
 8009a60:	440b      	add	r3, r1
 8009a62:	3316      	adds	r3, #22
 8009a64:	781b      	ldrb	r3, [r3, #0]
 8009a66:	e00b      	b.n	8009a80 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009a68:	78fb      	ldrb	r3, [r7, #3]
 8009a6a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009a6e:	68f9      	ldr	r1, [r7, #12]
 8009a70:	4613      	mov	r3, r2
 8009a72:	00db      	lsls	r3, r3, #3
 8009a74:	4413      	add	r3, r2
 8009a76:	009b      	lsls	r3, r3, #2
 8009a78:	440b      	add	r3, r1
 8009a7a:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8009a7e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009a80:	4618      	mov	r0, r3
 8009a82:	3714      	adds	r7, #20
 8009a84:	46bd      	mov	sp, r7
 8009a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a8a:	4770      	bx	lr

08009a8c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009a8c:	b580      	push	{r7, lr}
 8009a8e:	b084      	sub	sp, #16
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	6078      	str	r0, [r7, #4]
 8009a94:	460b      	mov	r3, r1
 8009a96:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a98:	2300      	movs	r3, #0
 8009a9a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009aa6:	78fa      	ldrb	r2, [r7, #3]
 8009aa8:	4611      	mov	r1, r2
 8009aaa:	4618      	mov	r0, r3
 8009aac:	f7f8 fa25 	bl	8001efa <HAL_PCD_SetAddress>
 8009ab0:	4603      	mov	r3, r0
 8009ab2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009ab4:	7bfb      	ldrb	r3, [r7, #15]
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	f000 f874 	bl	8009ba4 <USBD_Get_USB_Status>
 8009abc:	4603      	mov	r3, r0
 8009abe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009ac0:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	3710      	adds	r7, #16
 8009ac6:	46bd      	mov	sp, r7
 8009ac8:	bd80      	pop	{r7, pc}

08009aca <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009aca:	b580      	push	{r7, lr}
 8009acc:	b086      	sub	sp, #24
 8009ace:	af00      	add	r7, sp, #0
 8009ad0:	60f8      	str	r0, [r7, #12]
 8009ad2:	607a      	str	r2, [r7, #4]
 8009ad4:	603b      	str	r3, [r7, #0]
 8009ad6:	460b      	mov	r3, r1
 8009ad8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ada:	2300      	movs	r3, #0
 8009adc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ade:	2300      	movs	r3, #0
 8009ae0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009ae8:	7af9      	ldrb	r1, [r7, #11]
 8009aea:	683b      	ldr	r3, [r7, #0]
 8009aec:	687a      	ldr	r2, [r7, #4]
 8009aee:	f7f8 fb2f 	bl	8002150 <HAL_PCD_EP_Transmit>
 8009af2:	4603      	mov	r3, r0
 8009af4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009af6:	7dfb      	ldrb	r3, [r7, #23]
 8009af8:	4618      	mov	r0, r3
 8009afa:	f000 f853 	bl	8009ba4 <USBD_Get_USB_Status>
 8009afe:	4603      	mov	r3, r0
 8009b00:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009b02:	7dbb      	ldrb	r3, [r7, #22]
}
 8009b04:	4618      	mov	r0, r3
 8009b06:	3718      	adds	r7, #24
 8009b08:	46bd      	mov	sp, r7
 8009b0a:	bd80      	pop	{r7, pc}

08009b0c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009b0c:	b580      	push	{r7, lr}
 8009b0e:	b086      	sub	sp, #24
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	60f8      	str	r0, [r7, #12]
 8009b14:	607a      	str	r2, [r7, #4]
 8009b16:	603b      	str	r3, [r7, #0]
 8009b18:	460b      	mov	r3, r1
 8009b1a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b1c:	2300      	movs	r3, #0
 8009b1e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b20:	2300      	movs	r3, #0
 8009b22:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009b2a:	7af9      	ldrb	r1, [r7, #11]
 8009b2c:	683b      	ldr	r3, [r7, #0]
 8009b2e:	687a      	ldr	r2, [r7, #4]
 8009b30:	f7f8 fabb 	bl	80020aa <HAL_PCD_EP_Receive>
 8009b34:	4603      	mov	r3, r0
 8009b36:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b38:	7dfb      	ldrb	r3, [r7, #23]
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	f000 f832 	bl	8009ba4 <USBD_Get_USB_Status>
 8009b40:	4603      	mov	r3, r0
 8009b42:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009b44:	7dbb      	ldrb	r3, [r7, #22]
}
 8009b46:	4618      	mov	r0, r3
 8009b48:	3718      	adds	r7, #24
 8009b4a:	46bd      	mov	sp, r7
 8009b4c:	bd80      	pop	{r7, pc}

08009b4e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009b4e:	b580      	push	{r7, lr}
 8009b50:	b082      	sub	sp, #8
 8009b52:	af00      	add	r7, sp, #0
 8009b54:	6078      	str	r0, [r7, #4]
 8009b56:	460b      	mov	r3, r1
 8009b58:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009b60:	78fa      	ldrb	r2, [r7, #3]
 8009b62:	4611      	mov	r1, r2
 8009b64:	4618      	mov	r0, r3
 8009b66:	f7f8 fadb 	bl	8002120 <HAL_PCD_EP_GetRxCount>
 8009b6a:	4603      	mov	r3, r0
}
 8009b6c:	4618      	mov	r0, r3
 8009b6e:	3708      	adds	r7, #8
 8009b70:	46bd      	mov	sp, r7
 8009b72:	bd80      	pop	{r7, pc}

08009b74 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009b74:	b480      	push	{r7}
 8009b76:	b083      	sub	sp, #12
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009b7c:	4b03      	ldr	r3, [pc, #12]	@ (8009b8c <USBD_static_malloc+0x18>)
}
 8009b7e:	4618      	mov	r0, r3
 8009b80:	370c      	adds	r7, #12
 8009b82:	46bd      	mov	sp, r7
 8009b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b88:	4770      	bx	lr
 8009b8a:	bf00      	nop
 8009b8c:	20005c58 	.word	0x20005c58

08009b90 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009b90:	b480      	push	{r7}
 8009b92:	b083      	sub	sp, #12
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	6078      	str	r0, [r7, #4]

}
 8009b98:	bf00      	nop
 8009b9a:	370c      	adds	r7, #12
 8009b9c:	46bd      	mov	sp, r7
 8009b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba2:	4770      	bx	lr

08009ba4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009ba4:	b480      	push	{r7}
 8009ba6:	b085      	sub	sp, #20
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	4603      	mov	r3, r0
 8009bac:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009bae:	2300      	movs	r3, #0
 8009bb0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009bb2:	79fb      	ldrb	r3, [r7, #7]
 8009bb4:	2b03      	cmp	r3, #3
 8009bb6:	d817      	bhi.n	8009be8 <USBD_Get_USB_Status+0x44>
 8009bb8:	a201      	add	r2, pc, #4	@ (adr r2, 8009bc0 <USBD_Get_USB_Status+0x1c>)
 8009bba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bbe:	bf00      	nop
 8009bc0:	08009bd1 	.word	0x08009bd1
 8009bc4:	08009bd7 	.word	0x08009bd7
 8009bc8:	08009bdd 	.word	0x08009bdd
 8009bcc:	08009be3 	.word	0x08009be3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009bd0:	2300      	movs	r3, #0
 8009bd2:	73fb      	strb	r3, [r7, #15]
    break;
 8009bd4:	e00b      	b.n	8009bee <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009bd6:	2303      	movs	r3, #3
 8009bd8:	73fb      	strb	r3, [r7, #15]
    break;
 8009bda:	e008      	b.n	8009bee <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009bdc:	2301      	movs	r3, #1
 8009bde:	73fb      	strb	r3, [r7, #15]
    break;
 8009be0:	e005      	b.n	8009bee <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009be2:	2303      	movs	r3, #3
 8009be4:	73fb      	strb	r3, [r7, #15]
    break;
 8009be6:	e002      	b.n	8009bee <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009be8:	2303      	movs	r3, #3
 8009bea:	73fb      	strb	r3, [r7, #15]
    break;
 8009bec:	bf00      	nop
  }
  return usb_status;
 8009bee:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bf0:	4618      	mov	r0, r3
 8009bf2:	3714      	adds	r7, #20
 8009bf4:	46bd      	mov	sp, r7
 8009bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bfa:	4770      	bx	lr

08009bfc <memset>:
 8009bfc:	4402      	add	r2, r0
 8009bfe:	4603      	mov	r3, r0
 8009c00:	4293      	cmp	r3, r2
 8009c02:	d100      	bne.n	8009c06 <memset+0xa>
 8009c04:	4770      	bx	lr
 8009c06:	f803 1b01 	strb.w	r1, [r3], #1
 8009c0a:	e7f9      	b.n	8009c00 <memset+0x4>

08009c0c <_reclaim_reent>:
 8009c0c:	4b29      	ldr	r3, [pc, #164]	@ (8009cb4 <_reclaim_reent+0xa8>)
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	4283      	cmp	r3, r0
 8009c12:	b570      	push	{r4, r5, r6, lr}
 8009c14:	4604      	mov	r4, r0
 8009c16:	d04b      	beq.n	8009cb0 <_reclaim_reent+0xa4>
 8009c18:	69c3      	ldr	r3, [r0, #28]
 8009c1a:	b1ab      	cbz	r3, 8009c48 <_reclaim_reent+0x3c>
 8009c1c:	68db      	ldr	r3, [r3, #12]
 8009c1e:	b16b      	cbz	r3, 8009c3c <_reclaim_reent+0x30>
 8009c20:	2500      	movs	r5, #0
 8009c22:	69e3      	ldr	r3, [r4, #28]
 8009c24:	68db      	ldr	r3, [r3, #12]
 8009c26:	5959      	ldr	r1, [r3, r5]
 8009c28:	2900      	cmp	r1, #0
 8009c2a:	d13b      	bne.n	8009ca4 <_reclaim_reent+0x98>
 8009c2c:	3504      	adds	r5, #4
 8009c2e:	2d80      	cmp	r5, #128	@ 0x80
 8009c30:	d1f7      	bne.n	8009c22 <_reclaim_reent+0x16>
 8009c32:	69e3      	ldr	r3, [r4, #28]
 8009c34:	4620      	mov	r0, r4
 8009c36:	68d9      	ldr	r1, [r3, #12]
 8009c38:	f000 f872 	bl	8009d20 <_free_r>
 8009c3c:	69e3      	ldr	r3, [r4, #28]
 8009c3e:	6819      	ldr	r1, [r3, #0]
 8009c40:	b111      	cbz	r1, 8009c48 <_reclaim_reent+0x3c>
 8009c42:	4620      	mov	r0, r4
 8009c44:	f000 f86c 	bl	8009d20 <_free_r>
 8009c48:	6961      	ldr	r1, [r4, #20]
 8009c4a:	b111      	cbz	r1, 8009c52 <_reclaim_reent+0x46>
 8009c4c:	4620      	mov	r0, r4
 8009c4e:	f000 f867 	bl	8009d20 <_free_r>
 8009c52:	69e1      	ldr	r1, [r4, #28]
 8009c54:	b111      	cbz	r1, 8009c5c <_reclaim_reent+0x50>
 8009c56:	4620      	mov	r0, r4
 8009c58:	f000 f862 	bl	8009d20 <_free_r>
 8009c5c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8009c5e:	b111      	cbz	r1, 8009c66 <_reclaim_reent+0x5a>
 8009c60:	4620      	mov	r0, r4
 8009c62:	f000 f85d 	bl	8009d20 <_free_r>
 8009c66:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009c68:	b111      	cbz	r1, 8009c70 <_reclaim_reent+0x64>
 8009c6a:	4620      	mov	r0, r4
 8009c6c:	f000 f858 	bl	8009d20 <_free_r>
 8009c70:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8009c72:	b111      	cbz	r1, 8009c7a <_reclaim_reent+0x6e>
 8009c74:	4620      	mov	r0, r4
 8009c76:	f000 f853 	bl	8009d20 <_free_r>
 8009c7a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8009c7c:	b111      	cbz	r1, 8009c84 <_reclaim_reent+0x78>
 8009c7e:	4620      	mov	r0, r4
 8009c80:	f000 f84e 	bl	8009d20 <_free_r>
 8009c84:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8009c86:	b111      	cbz	r1, 8009c8e <_reclaim_reent+0x82>
 8009c88:	4620      	mov	r0, r4
 8009c8a:	f000 f849 	bl	8009d20 <_free_r>
 8009c8e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8009c90:	b111      	cbz	r1, 8009c98 <_reclaim_reent+0x8c>
 8009c92:	4620      	mov	r0, r4
 8009c94:	f000 f844 	bl	8009d20 <_free_r>
 8009c98:	6a23      	ldr	r3, [r4, #32]
 8009c9a:	b14b      	cbz	r3, 8009cb0 <_reclaim_reent+0xa4>
 8009c9c:	4620      	mov	r0, r4
 8009c9e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009ca2:	4718      	bx	r3
 8009ca4:	680e      	ldr	r6, [r1, #0]
 8009ca6:	4620      	mov	r0, r4
 8009ca8:	f000 f83a 	bl	8009d20 <_free_r>
 8009cac:	4631      	mov	r1, r6
 8009cae:	e7bb      	b.n	8009c28 <_reclaim_reent+0x1c>
 8009cb0:	bd70      	pop	{r4, r5, r6, pc}
 8009cb2:	bf00      	nop
 8009cb4:	20000100 	.word	0x20000100

08009cb8 <__libc_init_array>:
 8009cb8:	b570      	push	{r4, r5, r6, lr}
 8009cba:	4d0d      	ldr	r5, [pc, #52]	@ (8009cf0 <__libc_init_array+0x38>)
 8009cbc:	4c0d      	ldr	r4, [pc, #52]	@ (8009cf4 <__libc_init_array+0x3c>)
 8009cbe:	1b64      	subs	r4, r4, r5
 8009cc0:	10a4      	asrs	r4, r4, #2
 8009cc2:	2600      	movs	r6, #0
 8009cc4:	42a6      	cmp	r6, r4
 8009cc6:	d109      	bne.n	8009cdc <__libc_init_array+0x24>
 8009cc8:	4d0b      	ldr	r5, [pc, #44]	@ (8009cf8 <__libc_init_array+0x40>)
 8009cca:	4c0c      	ldr	r4, [pc, #48]	@ (8009cfc <__libc_init_array+0x44>)
 8009ccc:	f000 f87e 	bl	8009dcc <_init>
 8009cd0:	1b64      	subs	r4, r4, r5
 8009cd2:	10a4      	asrs	r4, r4, #2
 8009cd4:	2600      	movs	r6, #0
 8009cd6:	42a6      	cmp	r6, r4
 8009cd8:	d105      	bne.n	8009ce6 <__libc_init_array+0x2e>
 8009cda:	bd70      	pop	{r4, r5, r6, pc}
 8009cdc:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ce0:	4798      	blx	r3
 8009ce2:	3601      	adds	r6, #1
 8009ce4:	e7ee      	b.n	8009cc4 <__libc_init_array+0xc>
 8009ce6:	f855 3b04 	ldr.w	r3, [r5], #4
 8009cea:	4798      	blx	r3
 8009cec:	3601      	adds	r6, #1
 8009cee:	e7f2      	b.n	8009cd6 <__libc_init_array+0x1e>
 8009cf0:	08009ec0 	.word	0x08009ec0
 8009cf4:	08009ec0 	.word	0x08009ec0
 8009cf8:	08009ec0 	.word	0x08009ec0
 8009cfc:	08009ec4 	.word	0x08009ec4

08009d00 <__retarget_lock_acquire_recursive>:
 8009d00:	4770      	bx	lr

08009d02 <__retarget_lock_release_recursive>:
 8009d02:	4770      	bx	lr

08009d04 <memcpy>:
 8009d04:	440a      	add	r2, r1
 8009d06:	4291      	cmp	r1, r2
 8009d08:	f100 33ff 	add.w	r3, r0, #4294967295
 8009d0c:	d100      	bne.n	8009d10 <memcpy+0xc>
 8009d0e:	4770      	bx	lr
 8009d10:	b510      	push	{r4, lr}
 8009d12:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009d16:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009d1a:	4291      	cmp	r1, r2
 8009d1c:	d1f9      	bne.n	8009d12 <memcpy+0xe>
 8009d1e:	bd10      	pop	{r4, pc}

08009d20 <_free_r>:
 8009d20:	b538      	push	{r3, r4, r5, lr}
 8009d22:	4605      	mov	r5, r0
 8009d24:	2900      	cmp	r1, #0
 8009d26:	d041      	beq.n	8009dac <_free_r+0x8c>
 8009d28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009d2c:	1f0c      	subs	r4, r1, #4
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	bfb8      	it	lt
 8009d32:	18e4      	addlt	r4, r4, r3
 8009d34:	f000 f83e 	bl	8009db4 <__malloc_lock>
 8009d38:	4a1d      	ldr	r2, [pc, #116]	@ (8009db0 <_free_r+0x90>)
 8009d3a:	6813      	ldr	r3, [r2, #0]
 8009d3c:	b933      	cbnz	r3, 8009d4c <_free_r+0x2c>
 8009d3e:	6063      	str	r3, [r4, #4]
 8009d40:	6014      	str	r4, [r2, #0]
 8009d42:	4628      	mov	r0, r5
 8009d44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009d48:	f000 b83a 	b.w	8009dc0 <__malloc_unlock>
 8009d4c:	42a3      	cmp	r3, r4
 8009d4e:	d908      	bls.n	8009d62 <_free_r+0x42>
 8009d50:	6820      	ldr	r0, [r4, #0]
 8009d52:	1821      	adds	r1, r4, r0
 8009d54:	428b      	cmp	r3, r1
 8009d56:	bf01      	itttt	eq
 8009d58:	6819      	ldreq	r1, [r3, #0]
 8009d5a:	685b      	ldreq	r3, [r3, #4]
 8009d5c:	1809      	addeq	r1, r1, r0
 8009d5e:	6021      	streq	r1, [r4, #0]
 8009d60:	e7ed      	b.n	8009d3e <_free_r+0x1e>
 8009d62:	461a      	mov	r2, r3
 8009d64:	685b      	ldr	r3, [r3, #4]
 8009d66:	b10b      	cbz	r3, 8009d6c <_free_r+0x4c>
 8009d68:	42a3      	cmp	r3, r4
 8009d6a:	d9fa      	bls.n	8009d62 <_free_r+0x42>
 8009d6c:	6811      	ldr	r1, [r2, #0]
 8009d6e:	1850      	adds	r0, r2, r1
 8009d70:	42a0      	cmp	r0, r4
 8009d72:	d10b      	bne.n	8009d8c <_free_r+0x6c>
 8009d74:	6820      	ldr	r0, [r4, #0]
 8009d76:	4401      	add	r1, r0
 8009d78:	1850      	adds	r0, r2, r1
 8009d7a:	4283      	cmp	r3, r0
 8009d7c:	6011      	str	r1, [r2, #0]
 8009d7e:	d1e0      	bne.n	8009d42 <_free_r+0x22>
 8009d80:	6818      	ldr	r0, [r3, #0]
 8009d82:	685b      	ldr	r3, [r3, #4]
 8009d84:	6053      	str	r3, [r2, #4]
 8009d86:	4408      	add	r0, r1
 8009d88:	6010      	str	r0, [r2, #0]
 8009d8a:	e7da      	b.n	8009d42 <_free_r+0x22>
 8009d8c:	d902      	bls.n	8009d94 <_free_r+0x74>
 8009d8e:	230c      	movs	r3, #12
 8009d90:	602b      	str	r3, [r5, #0]
 8009d92:	e7d6      	b.n	8009d42 <_free_r+0x22>
 8009d94:	6820      	ldr	r0, [r4, #0]
 8009d96:	1821      	adds	r1, r4, r0
 8009d98:	428b      	cmp	r3, r1
 8009d9a:	bf04      	itt	eq
 8009d9c:	6819      	ldreq	r1, [r3, #0]
 8009d9e:	685b      	ldreq	r3, [r3, #4]
 8009da0:	6063      	str	r3, [r4, #4]
 8009da2:	bf04      	itt	eq
 8009da4:	1809      	addeq	r1, r1, r0
 8009da6:	6021      	streq	r1, [r4, #0]
 8009da8:	6054      	str	r4, [r2, #4]
 8009daa:	e7ca      	b.n	8009d42 <_free_r+0x22>
 8009dac:	bd38      	pop	{r3, r4, r5, pc}
 8009dae:	bf00      	nop
 8009db0:	20005fb4 	.word	0x20005fb4

08009db4 <__malloc_lock>:
 8009db4:	4801      	ldr	r0, [pc, #4]	@ (8009dbc <__malloc_lock+0x8>)
 8009db6:	f7ff bfa3 	b.w	8009d00 <__retarget_lock_acquire_recursive>
 8009dba:	bf00      	nop
 8009dbc:	20005fb0 	.word	0x20005fb0

08009dc0 <__malloc_unlock>:
 8009dc0:	4801      	ldr	r0, [pc, #4]	@ (8009dc8 <__malloc_unlock+0x8>)
 8009dc2:	f7ff bf9e 	b.w	8009d02 <__retarget_lock_release_recursive>
 8009dc6:	bf00      	nop
 8009dc8:	20005fb0 	.word	0x20005fb0

08009dcc <_init>:
 8009dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dce:	bf00      	nop
 8009dd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009dd2:	bc08      	pop	{r3}
 8009dd4:	469e      	mov	lr, r3
 8009dd6:	4770      	bx	lr

08009dd8 <_fini>:
 8009dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dda:	bf00      	nop
 8009ddc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009dde:	bc08      	pop	{r3}
 8009de0:	469e      	mov	lr, r3
 8009de2:	4770      	bx	lr
