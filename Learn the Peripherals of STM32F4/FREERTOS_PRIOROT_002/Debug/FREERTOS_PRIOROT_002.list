
FREERTOS_PRIOROT_002.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009fd0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  0800a160  0800a160  0000b160  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a238  0800a238  0000c150  2**0
                  CONTENTS
  4 .ARM          00000008  0800a238  0800a238  0000b238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a240  0800a240  0000c150  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a240  0800a240  0000b240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a244  0800a244  0000b244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000150  20000000  0800a248  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c150  2**0
                  CONTENTS
 10 .bss          00005ddc  20000150  20000150  0000c150  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20005f2c  20005f2c  0000c150  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c150  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b975  00000000  00000000  0000c180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000043b8  00000000  00000000  00027af5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016e8  00000000  00000000  0002beb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000119e  00000000  00000000  0002d598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025899  00000000  00000000  0002e736  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d64b  00000000  00000000  00053fcf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d7a3a  00000000  00000000  0007161a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00149054  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000622c  00000000  00000000  00149098  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000070  00000000  00000000  0014f2c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000150 	.word	0x20000150
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a148 	.word	0x0800a148

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000154 	.word	0x20000154
 80001cc:	0800a148 	.word	0x0800a148

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b96a 	b.w	80004cc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	460c      	mov	r4, r1
 8000218:	2b00      	cmp	r3, #0
 800021a:	d14e      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021c:	4694      	mov	ip, r2
 800021e:	458c      	cmp	ip, r1
 8000220:	4686      	mov	lr, r0
 8000222:	fab2 f282 	clz	r2, r2
 8000226:	d962      	bls.n	80002ee <__udivmoddi4+0xde>
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0320 	rsb	r3, r2, #32
 800022e:	4091      	lsls	r1, r2
 8000230:	fa20 f303 	lsr.w	r3, r0, r3
 8000234:	fa0c fc02 	lsl.w	ip, ip, r2
 8000238:	4319      	orrs	r1, r3
 800023a:	fa00 fe02 	lsl.w	lr, r0, r2
 800023e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000242:	fa1f f68c 	uxth.w	r6, ip
 8000246:	fbb1 f4f7 	udiv	r4, r1, r7
 800024a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800024e:	fb07 1114 	mls	r1, r7, r4, r1
 8000252:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000256:	fb04 f106 	mul.w	r1, r4, r6
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f104 30ff 	add.w	r0, r4, #4294967295
 8000266:	f080 8112 	bcs.w	800048e <__udivmoddi4+0x27e>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 810f 	bls.w	800048e <__udivmoddi4+0x27e>
 8000270:	3c02      	subs	r4, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a59      	subs	r1, r3, r1
 8000276:	fa1f f38e 	uxth.w	r3, lr
 800027a:	fbb1 f0f7 	udiv	r0, r1, r7
 800027e:	fb07 1110 	mls	r1, r7, r0, r1
 8000282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000286:	fb00 f606 	mul.w	r6, r0, r6
 800028a:	429e      	cmp	r6, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x94>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f100 31ff 	add.w	r1, r0, #4294967295
 8000296:	f080 80fc 	bcs.w	8000492 <__udivmoddi4+0x282>
 800029a:	429e      	cmp	r6, r3
 800029c:	f240 80f9 	bls.w	8000492 <__udivmoddi4+0x282>
 80002a0:	4463      	add	r3, ip
 80002a2:	3802      	subs	r0, #2
 80002a4:	1b9b      	subs	r3, r3, r6
 80002a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002aa:	2100      	movs	r1, #0
 80002ac:	b11d      	cbz	r5, 80002b6 <__udivmoddi4+0xa6>
 80002ae:	40d3      	lsrs	r3, r2
 80002b0:	2200      	movs	r2, #0
 80002b2:	e9c5 3200 	strd	r3, r2, [r5]
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d905      	bls.n	80002ca <__udivmoddi4+0xba>
 80002be:	b10d      	cbz	r5, 80002c4 <__udivmoddi4+0xb4>
 80002c0:	e9c5 0100 	strd	r0, r1, [r5]
 80002c4:	2100      	movs	r1, #0
 80002c6:	4608      	mov	r0, r1
 80002c8:	e7f5      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ca:	fab3 f183 	clz	r1, r3
 80002ce:	2900      	cmp	r1, #0
 80002d0:	d146      	bne.n	8000360 <__udivmoddi4+0x150>
 80002d2:	42a3      	cmp	r3, r4
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xcc>
 80002d6:	4290      	cmp	r0, r2
 80002d8:	f0c0 80f0 	bcc.w	80004bc <__udivmoddi4+0x2ac>
 80002dc:	1a86      	subs	r6, r0, r2
 80002de:	eb64 0303 	sbc.w	r3, r4, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	2d00      	cmp	r5, #0
 80002e6:	d0e6      	beq.n	80002b6 <__udivmoddi4+0xa6>
 80002e8:	e9c5 6300 	strd	r6, r3, [r5]
 80002ec:	e7e3      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x204>
 80002f4:	eba1 040c 	sub.w	r4, r1, ip
 80002f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002fc:	fa1f f78c 	uxth.w	r7, ip
 8000300:	2101      	movs	r1, #1
 8000302:	fbb4 f6f8 	udiv	r6, r4, r8
 8000306:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030a:	fb08 4416 	mls	r4, r8, r6, r4
 800030e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000312:	fb07 f006 	mul.w	r0, r7, r6
 8000316:	4298      	cmp	r0, r3
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x11c>
 800031a:	eb1c 0303 	adds.w	r3, ip, r3
 800031e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x11a>
 8000324:	4298      	cmp	r0, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2b4>
 800032a:	4626      	mov	r6, r4
 800032c:	1a1c      	subs	r4, r3, r0
 800032e:	fa1f f38e 	uxth.w	r3, lr
 8000332:	fbb4 f0f8 	udiv	r0, r4, r8
 8000336:	fb08 4410 	mls	r4, r8, r0, r4
 800033a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800033e:	fb00 f707 	mul.w	r7, r0, r7
 8000342:	429f      	cmp	r7, r3
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x148>
 8000346:	eb1c 0303 	adds.w	r3, ip, r3
 800034a:	f100 34ff 	add.w	r4, r0, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x146>
 8000350:	429f      	cmp	r7, r3
 8000352:	f200 80b0 	bhi.w	80004b6 <__udivmoddi4+0x2a6>
 8000356:	4620      	mov	r0, r4
 8000358:	1bdb      	subs	r3, r3, r7
 800035a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800035e:	e7a5      	b.n	80002ac <__udivmoddi4+0x9c>
 8000360:	f1c1 0620 	rsb	r6, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 f706 	lsr.w	r7, r2, r6
 800036a:	431f      	orrs	r7, r3
 800036c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000370:	fa04 f301 	lsl.w	r3, r4, r1
 8000374:	ea43 030c 	orr.w	r3, r3, ip
 8000378:	40f4      	lsrs	r4, r6
 800037a:	fa00 f801 	lsl.w	r8, r0, r1
 800037e:	0c38      	lsrs	r0, r7, #16
 8000380:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000384:	fbb4 fef0 	udiv	lr, r4, r0
 8000388:	fa1f fc87 	uxth.w	ip, r7
 800038c:	fb00 441e 	mls	r4, r0, lr, r4
 8000390:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000394:	fb0e f90c 	mul.w	r9, lr, ip
 8000398:	45a1      	cmp	r9, r4
 800039a:	fa02 f201 	lsl.w	r2, r2, r1
 800039e:	d90a      	bls.n	80003b6 <__udivmoddi4+0x1a6>
 80003a0:	193c      	adds	r4, r7, r4
 80003a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003a6:	f080 8084 	bcs.w	80004b2 <__udivmoddi4+0x2a2>
 80003aa:	45a1      	cmp	r9, r4
 80003ac:	f240 8081 	bls.w	80004b2 <__udivmoddi4+0x2a2>
 80003b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003b4:	443c      	add	r4, r7
 80003b6:	eba4 0409 	sub.w	r4, r4, r9
 80003ba:	fa1f f983 	uxth.w	r9, r3
 80003be:	fbb4 f3f0 	udiv	r3, r4, r0
 80003c2:	fb00 4413 	mls	r4, r0, r3, r4
 80003c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d907      	bls.n	80003e2 <__udivmoddi4+0x1d2>
 80003d2:	193c      	adds	r4, r7, r4
 80003d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d8:	d267      	bcs.n	80004aa <__udivmoddi4+0x29a>
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d965      	bls.n	80004aa <__udivmoddi4+0x29a>
 80003de:	3b02      	subs	r3, #2
 80003e0:	443c      	add	r4, r7
 80003e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003e6:	fba0 9302 	umull	r9, r3, r0, r2
 80003ea:	eba4 040c 	sub.w	r4, r4, ip
 80003ee:	429c      	cmp	r4, r3
 80003f0:	46ce      	mov	lr, r9
 80003f2:	469c      	mov	ip, r3
 80003f4:	d351      	bcc.n	800049a <__udivmoddi4+0x28a>
 80003f6:	d04e      	beq.n	8000496 <__udivmoddi4+0x286>
 80003f8:	b155      	cbz	r5, 8000410 <__udivmoddi4+0x200>
 80003fa:	ebb8 030e 	subs.w	r3, r8, lr
 80003fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000402:	fa04 f606 	lsl.w	r6, r4, r6
 8000406:	40cb      	lsrs	r3, r1
 8000408:	431e      	orrs	r6, r3
 800040a:	40cc      	lsrs	r4, r1
 800040c:	e9c5 6400 	strd	r6, r4, [r5]
 8000410:	2100      	movs	r1, #0
 8000412:	e750      	b.n	80002b6 <__udivmoddi4+0xa6>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f103 	lsr.w	r1, r0, r3
 800041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000420:	fa24 f303 	lsr.w	r3, r4, r3
 8000424:	4094      	lsls	r4, r2
 8000426:	430c      	orrs	r4, r1
 8000428:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800042c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000430:	fa1f f78c 	uxth.w	r7, ip
 8000434:	fbb3 f0f8 	udiv	r0, r3, r8
 8000438:	fb08 3110 	mls	r1, r8, r0, r3
 800043c:	0c23      	lsrs	r3, r4, #16
 800043e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000442:	fb00 f107 	mul.w	r1, r0, r7
 8000446:	4299      	cmp	r1, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x24c>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000452:	d22c      	bcs.n	80004ae <__udivmoddi4+0x29e>
 8000454:	4299      	cmp	r1, r3
 8000456:	d92a      	bls.n	80004ae <__udivmoddi4+0x29e>
 8000458:	3802      	subs	r0, #2
 800045a:	4463      	add	r3, ip
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b2a4      	uxth	r4, r4
 8000460:	fbb3 f1f8 	udiv	r1, r3, r8
 8000464:	fb08 3311 	mls	r3, r8, r1, r3
 8000468:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800046c:	fb01 f307 	mul.w	r3, r1, r7
 8000470:	42a3      	cmp	r3, r4
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x276>
 8000474:	eb1c 0404 	adds.w	r4, ip, r4
 8000478:	f101 36ff 	add.w	r6, r1, #4294967295
 800047c:	d213      	bcs.n	80004a6 <__udivmoddi4+0x296>
 800047e:	42a3      	cmp	r3, r4
 8000480:	d911      	bls.n	80004a6 <__udivmoddi4+0x296>
 8000482:	3902      	subs	r1, #2
 8000484:	4464      	add	r4, ip
 8000486:	1ae4      	subs	r4, r4, r3
 8000488:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800048c:	e739      	b.n	8000302 <__udivmoddi4+0xf2>
 800048e:	4604      	mov	r4, r0
 8000490:	e6f0      	b.n	8000274 <__udivmoddi4+0x64>
 8000492:	4608      	mov	r0, r1
 8000494:	e706      	b.n	80002a4 <__udivmoddi4+0x94>
 8000496:	45c8      	cmp	r8, r9
 8000498:	d2ae      	bcs.n	80003f8 <__udivmoddi4+0x1e8>
 800049a:	ebb9 0e02 	subs.w	lr, r9, r2
 800049e:	eb63 0c07 	sbc.w	ip, r3, r7
 80004a2:	3801      	subs	r0, #1
 80004a4:	e7a8      	b.n	80003f8 <__udivmoddi4+0x1e8>
 80004a6:	4631      	mov	r1, r6
 80004a8:	e7ed      	b.n	8000486 <__udivmoddi4+0x276>
 80004aa:	4603      	mov	r3, r0
 80004ac:	e799      	b.n	80003e2 <__udivmoddi4+0x1d2>
 80004ae:	4630      	mov	r0, r6
 80004b0:	e7d4      	b.n	800045c <__udivmoddi4+0x24c>
 80004b2:	46d6      	mov	lr, sl
 80004b4:	e77f      	b.n	80003b6 <__udivmoddi4+0x1a6>
 80004b6:	4463      	add	r3, ip
 80004b8:	3802      	subs	r0, #2
 80004ba:	e74d      	b.n	8000358 <__udivmoddi4+0x148>
 80004bc:	4606      	mov	r6, r0
 80004be:	4623      	mov	r3, r4
 80004c0:	4608      	mov	r0, r1
 80004c2:	e70f      	b.n	80002e4 <__udivmoddi4+0xd4>
 80004c4:	3e02      	subs	r6, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	e730      	b.n	800032c <__udivmoddi4+0x11c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004d0:	b480      	push	{r7}
 80004d2:	b085      	sub	sp, #20
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	60f8      	str	r0, [r7, #12]
 80004d8:	60b9      	str	r1, [r7, #8]
 80004da:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004dc:	68fb      	ldr	r3, [r7, #12]
 80004de:	4a07      	ldr	r2, [pc, #28]	@ (80004fc <vApplicationGetIdleTaskMemory+0x2c>)
 80004e0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004e2:	68bb      	ldr	r3, [r7, #8]
 80004e4:	4a06      	ldr	r2, [pc, #24]	@ (8000500 <vApplicationGetIdleTaskMemory+0x30>)
 80004e6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	2280      	movs	r2, #128	@ 0x80
 80004ec:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004ee:	bf00      	nop
 80004f0:	3714      	adds	r7, #20
 80004f2:	46bd      	mov	sp, r7
 80004f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop
 80004fc:	2000016c 	.word	0x2000016c
 8000500:	2000020c 	.word	0x2000020c

08000504 <Task1>:
void Task2(void *pvParameters);
void Task3(void *pvParameters);
void Task4(void *pvParameters);

void Task1(void *pvParameters)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b086      	sub	sp, #24
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
	UBaseType_t priority1;
	TickType_t delay;
	delay = pdMS_TO_TICKS(4000);
 800050c:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 8000510:	617b      	str	r3, [r7, #20]

	priority1 = uxTaskPriorityGet(xTask1Handle);
 8000512:	4b12      	ldr	r3, [pc, #72]	@ (800055c <Task1+0x58>)
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	4618      	mov	r0, r3
 8000518:	f007 fd0c 	bl	8007f34 <uxTaskPriorityGet>
 800051c:	6138      	str	r0, [r7, #16]

	for(;;)
	{
		HAL_Delay(1);
 800051e:	2001      	movs	r0, #1
 8000520:	f000 fbae 	bl	8000c80 <HAL_Delay>
		char *str1 = "Entered and running Task 1\n";
 8000524:	4b0e      	ldr	r3, [pc, #56]	@ (8000560 <Task1+0x5c>)
 8000526:	60fb      	str	r3, [r7, #12]
		CDC_Transmit_FS((uint8_t *)str1, strlen(str1));
 8000528:	68f8      	ldr	r0, [r7, #12]
 800052a:	f7ff fe51 	bl	80001d0 <strlen>
 800052e:	4603      	mov	r3, r0
 8000530:	b29b      	uxth	r3, r3
 8000532:	4619      	mov	r1, r3
 8000534:	68f8      	ldr	r0, [r7, #12]
 8000536:	f009 f8c3 	bl	80096c0 <CDC_Transmit_FS>
		HAL_Delay(1);
 800053a:	2001      	movs	r0, #1
 800053c:	f000 fba0 	bl	8000c80 <HAL_Delay>

		//HAL_GPIO_WritePin(GPIOD,GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15, GPIO_PIN_SET);

		vTaskPrioritySet(xTask2Handle,priority1 + 1);
 8000540:	4b08      	ldr	r3, [pc, #32]	@ (8000564 <Task1+0x60>)
 8000542:	681a      	ldr	r2, [r3, #0]
 8000544:	693b      	ldr	r3, [r7, #16]
 8000546:	3301      	adds	r3, #1
 8000548:	4619      	mov	r1, r3
 800054a:	4610      	mov	r0, r2
 800054c:	f007 fd0c 	bl	8007f68 <vTaskPrioritySet>
		vTaskDelay(delay);
 8000550:	6978      	ldr	r0, [r7, #20]
 8000552:	f007 fcb9 	bl	8007ec8 <vTaskDelay>
	{
 8000556:	bf00      	nop
 8000558:	e7e1      	b.n	800051e <Task1+0x1a>
 800055a:	bf00      	nop
 800055c:	20000454 	.word	0x20000454
 8000560:	0800a160 	.word	0x0800a160
 8000564:	20000458 	.word	0x20000458

08000568 <Task2>:
	}

}

void Task2(void *pvParameters)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b086      	sub	sp, #24
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
	UBaseType_t priority2;
	TickType_t delay;
	delay = pdMS_TO_TICKS(4000);
 8000570:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 8000574:	617b      	str	r3, [r7, #20]

	priority2 = uxTaskPriorityGet(xTask2Handle);
 8000576:	4b12      	ldr	r3, [pc, #72]	@ (80005c0 <Task2+0x58>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	4618      	mov	r0, r3
 800057c:	f007 fcda 	bl	8007f34 <uxTaskPriorityGet>
 8000580:	6138      	str	r0, [r7, #16]

	for(;;)
	{
		HAL_Delay(1);
 8000582:	2001      	movs	r0, #1
 8000584:	f000 fb7c 	bl	8000c80 <HAL_Delay>
		char *str1 = "Entered and running Task 2\n";
 8000588:	4b0e      	ldr	r3, [pc, #56]	@ (80005c4 <Task2+0x5c>)
 800058a:	60fb      	str	r3, [r7, #12]
		CDC_Transmit_FS((uint8_t *)str1, strlen(str1));
 800058c:	68f8      	ldr	r0, [r7, #12]
 800058e:	f7ff fe1f 	bl	80001d0 <strlen>
 8000592:	4603      	mov	r3, r0
 8000594:	b29b      	uxth	r3, r3
 8000596:	4619      	mov	r1, r3
 8000598:	68f8      	ldr	r0, [r7, #12]
 800059a:	f009 f891 	bl	80096c0 <CDC_Transmit_FS>
		HAL_Delay(1);
 800059e:	2001      	movs	r0, #1
 80005a0:	f000 fb6e 	bl	8000c80 <HAL_Delay>

		// vTaskPrioritySet(xTask2Handle,priority2 - 2);
		vTaskPrioritySet(xTask2Handle,priority2 - 2);
 80005a4:	4b06      	ldr	r3, [pc, #24]	@ (80005c0 <Task2+0x58>)
 80005a6:	681a      	ldr	r2, [r3, #0]
 80005a8:	693b      	ldr	r3, [r7, #16]
 80005aa:	3b02      	subs	r3, #2
 80005ac:	4619      	mov	r1, r3
 80005ae:	4610      	mov	r0, r2
 80005b0:	f007 fcda 	bl	8007f68 <vTaskPrioritySet>
		vTaskDelay(delay);
 80005b4:	6978      	ldr	r0, [r7, #20]
 80005b6:	f007 fc87 	bl	8007ec8 <vTaskDelay>
	{
 80005ba:	bf00      	nop
 80005bc:	e7e1      	b.n	8000582 <Task2+0x1a>
 80005be:	bf00      	nop
 80005c0:	20000458 	.word	0x20000458
 80005c4:	0800a17c 	.word	0x0800a17c

080005c8 <Task3>:


}

void Task3(void *pvParameters)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b086      	sub	sp, #24
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
	volatile uint8_t count_value = 0;
 80005d0:	2300      	movs	r3, #0
 80005d2:	73fb      	strb	r3, [r7, #15]
	TickType_t delay;

	delay = pdMS_TO_TICKS(4000);
 80005d4:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 80005d8:	617b      	str	r3, [r7, #20]

	for(;;)
	{
		HAL_Delay(1);
 80005da:	2001      	movs	r0, #1
 80005dc:	f000 fb50 	bl	8000c80 <HAL_Delay>
		char *str1 = "Entered and running Task 3\n";
 80005e0:	4b13      	ldr	r3, [pc, #76]	@ (8000630 <Task3+0x68>)
 80005e2:	613b      	str	r3, [r7, #16]
		CDC_Transmit_FS((uint8_t *)str1, strlen(str1));
 80005e4:	6938      	ldr	r0, [r7, #16]
 80005e6:	f7ff fdf3 	bl	80001d0 <strlen>
 80005ea:	4603      	mov	r3, r0
 80005ec:	b29b      	uxth	r3, r3
 80005ee:	4619      	mov	r1, r3
 80005f0:	6938      	ldr	r0, [r7, #16]
 80005f2:	f009 f865 	bl	80096c0 <CDC_Transmit_FS>
		HAL_Delay(1);
 80005f6:	2001      	movs	r0, #1
 80005f8:	f000 fb42 	bl	8000c80 <HAL_Delay>

		if(count_value == 3)
 80005fc:	7bfb      	ldrb	r3, [r7, #15]
 80005fe:	b2db      	uxtb	r3, r3
 8000600:	2b03      	cmp	r3, #3
 8000602:	d10c      	bne.n	800061e <Task3+0x56>
		{
			// xTaskNotifyGive(xTask4Handle);
			// ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
			xSemaphoreGive(myBinarySemaphoreHandle);
 8000604:	4b0b      	ldr	r3, [pc, #44]	@ (8000634 <Task3+0x6c>)
 8000606:	6818      	ldr	r0, [r3, #0]
 8000608:	2300      	movs	r3, #0
 800060a:	2200      	movs	r2, #0
 800060c:	2100      	movs	r1, #0
 800060e:	f006 ff07 	bl	8007420 <xQueueGenericSend>

			vTaskDelete(xTask3Handle);
 8000612:	4b09      	ldr	r3, [pc, #36]	@ (8000638 <Task3+0x70>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	4618      	mov	r0, r3
 8000618:	f007 fbc6 	bl	8007da8 <vTaskDelete>
 800061c:	e004      	b.n	8000628 <Task3+0x60>
		}
		else
		{
			count_value++;
 800061e:	7bfb      	ldrb	r3, [r7, #15]
 8000620:	b2db      	uxtb	r3, r3
 8000622:	3301      	adds	r3, #1
 8000624:	b2db      	uxtb	r3, r3
 8000626:	73fb      	strb	r3, [r7, #15]
		}

		vTaskDelay(delay);
 8000628:	6978      	ldr	r0, [r7, #20]
 800062a:	f007 fc4d 	bl	8007ec8 <vTaskDelay>
	{
 800062e:	e7d4      	b.n	80005da <Task3+0x12>
 8000630:	0800a198 	.word	0x0800a198
 8000634:	20000464 	.word	0x20000464
 8000638:	2000045c 	.word	0x2000045c

0800063c <Task4>:
	}

}

void Task4(void *pvParameters)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b082      	sub	sp, #8
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
	// ulTaskNotifyTake(pdTRUE, portMAX_DELAY);

	for(;;)
	{

		if(xSemaphoreTake(myBinarySemaphoreHandle,portMAX_DELAY))
 8000644:	4b08      	ldr	r3, [pc, #32]	@ (8000668 <Task4+0x2c>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	f04f 31ff 	mov.w	r1, #4294967295
 800064c:	4618      	mov	r0, r3
 800064e:	f006 ffe9 	bl	8007624 <xQueueSemaphoreTake>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d0f5      	beq.n	8000644 <Task4+0x8>
		{

			// char *str2 = "Deleting the Task 3 from Task 4\n";
			// CDC_Transmit_FS((uint8_t *)str2, strlen(str2));
			HAL_GPIO_WritePin(GPIOD,GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15, GPIO_PIN_SET);
 8000658:	2201      	movs	r2, #1
 800065a:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 800065e:	4803      	ldr	r0, [pc, #12]	@ (800066c <Task4+0x30>)
 8000660:	f000 fdb0 	bl	80011c4 <HAL_GPIO_WritePin>
		if(xSemaphoreTake(myBinarySemaphoreHandle,portMAX_DELAY))
 8000664:	e7ee      	b.n	8000644 <Task4+0x8>
 8000666:	bf00      	nop
 8000668:	20000464 	.word	0x20000464
 800066c:	40020c00 	.word	0x40020c00

08000670 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000676:	f000 fac1 	bl	8000bfc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800067a:	f000 f859 	bl	8000730 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800067e:	f000 f8eb 	bl	8000858 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000682:	f000 f8bf 	bl	8000804 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  MX_USB_DEVICE_Init();
 8000686:	f008 ff5d 	bl	8009544 <MX_USB_DEVICE_Init>
  // xTaskCreate(vTask1, "Task 1", 1000, NULL, 2, &xTask1Handle);
  // xTaskCreate(vTask2, "Task 2", 1000, NULL, 1, &xTask2Handle);
  // xTaskCreate(vTask3, "Task 3", 1000, NULL, 2, &xTask3Handle);
  // xTaskCreate(vTask4, "Task 4", 1000, NULL, 1, &xTask4Handle);

  myBinarySemaphoreHandle = xSemaphoreCreateBinary();
 800068a:	2203      	movs	r2, #3
 800068c:	2100      	movs	r1, #0
 800068e:	2001      	movs	r0, #1
 8000690:	f006 fe6c 	bl	800736c <xQueueGenericCreate>
 8000694:	4603      	mov	r3, r0
 8000696:	4a19      	ldr	r2, [pc, #100]	@ (80006fc <main+0x8c>)
 8000698:	6013      	str	r3, [r2, #0]

  // xTaskCreate(vHighTask, "High Task", 1000, NULL, 3, &xHighTaskHandle);
  // xTaskCreate(vMediumTask, "Medium Task", 1000, NULL, 2, &xMediumTaskHandle);
  // xTaskCreate(vLowTask, "Low Task", 1000, NULL, 1, &xLowTaskHandle);

  xTaskCreate(Task1,"Task 1",1000,NULL,3,&xTask1Handle);
 800069a:	4b19      	ldr	r3, [pc, #100]	@ (8000700 <main+0x90>)
 800069c:	9301      	str	r3, [sp, #4]
 800069e:	2303      	movs	r3, #3
 80006a0:	9300      	str	r3, [sp, #0]
 80006a2:	2300      	movs	r3, #0
 80006a4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80006a8:	4916      	ldr	r1, [pc, #88]	@ (8000704 <main+0x94>)
 80006aa:	4817      	ldr	r0, [pc, #92]	@ (8000708 <main+0x98>)
 80006ac:	f007 fa2c 	bl	8007b08 <xTaskCreate>
  xTaskCreate(Task2,"Task 2",1000,NULL,2,&xTask2Handle);
 80006b0:	4b16      	ldr	r3, [pc, #88]	@ (800070c <main+0x9c>)
 80006b2:	9301      	str	r3, [sp, #4]
 80006b4:	2302      	movs	r3, #2
 80006b6:	9300      	str	r3, [sp, #0]
 80006b8:	2300      	movs	r3, #0
 80006ba:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80006be:	4914      	ldr	r1, [pc, #80]	@ (8000710 <main+0xa0>)
 80006c0:	4814      	ldr	r0, [pc, #80]	@ (8000714 <main+0xa4>)
 80006c2:	f007 fa21 	bl	8007b08 <xTaskCreate>
  xTaskCreate(Task3,"Task 3",1000,NULL,1,&xTask3Handle);
 80006c6:	4b14      	ldr	r3, [pc, #80]	@ (8000718 <main+0xa8>)
 80006c8:	9301      	str	r3, [sp, #4]
 80006ca:	2301      	movs	r3, #1
 80006cc:	9300      	str	r3, [sp, #0]
 80006ce:	2300      	movs	r3, #0
 80006d0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80006d4:	4911      	ldr	r1, [pc, #68]	@ (800071c <main+0xac>)
 80006d6:	4812      	ldr	r0, [pc, #72]	@ (8000720 <main+0xb0>)
 80006d8:	f007 fa16 	bl	8007b08 <xTaskCreate>
  xTaskCreate(Task4,"Task 4",1000,NULL,5,&xTask4Handle);
 80006dc:	4b11      	ldr	r3, [pc, #68]	@ (8000724 <main+0xb4>)
 80006de:	9301      	str	r3, [sp, #4]
 80006e0:	2305      	movs	r3, #5
 80006e2:	9300      	str	r3, [sp, #0]
 80006e4:	2300      	movs	r3, #0
 80006e6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80006ea:	490f      	ldr	r1, [pc, #60]	@ (8000728 <main+0xb8>)
 80006ec:	480f      	ldr	r0, [pc, #60]	@ (800072c <main+0xbc>)
 80006ee:	f007 fa0b 	bl	8007b08 <xTaskCreate>

  // xSemaphoreGive(myBinarySemaphoreHandle);

  vTaskStartScheduler();
 80006f2:	f007 fce3 	bl	80080bc <vTaskStartScheduler>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006f6:	bf00      	nop
 80006f8:	e7fd      	b.n	80006f6 <main+0x86>
 80006fa:	bf00      	nop
 80006fc:	20000464 	.word	0x20000464
 8000700:	20000454 	.word	0x20000454
 8000704:	0800a1b4 	.word	0x0800a1b4
 8000708:	08000505 	.word	0x08000505
 800070c:	20000458 	.word	0x20000458
 8000710:	0800a1bc 	.word	0x0800a1bc
 8000714:	08000569 	.word	0x08000569
 8000718:	2000045c 	.word	0x2000045c
 800071c:	0800a1c4 	.word	0x0800a1c4
 8000720:	080005c9 	.word	0x080005c9
 8000724:	20000460 	.word	0x20000460
 8000728:	0800a1cc 	.word	0x0800a1cc
 800072c:	0800063d 	.word	0x0800063d

08000730 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b094      	sub	sp, #80	@ 0x50
 8000734:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000736:	f107 0320 	add.w	r3, r7, #32
 800073a:	2230      	movs	r2, #48	@ 0x30
 800073c:	2100      	movs	r1, #0
 800073e:	4618      	mov	r0, r3
 8000740:	f009 fc1a 	bl	8009f78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000744:	f107 030c 	add.w	r3, r7, #12
 8000748:	2200      	movs	r2, #0
 800074a:	601a      	str	r2, [r3, #0]
 800074c:	605a      	str	r2, [r3, #4]
 800074e:	609a      	str	r2, [r3, #8]
 8000750:	60da      	str	r2, [r3, #12]
 8000752:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000754:	2300      	movs	r3, #0
 8000756:	60bb      	str	r3, [r7, #8]
 8000758:	4b28      	ldr	r3, [pc, #160]	@ (80007fc <SystemClock_Config+0xcc>)
 800075a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800075c:	4a27      	ldr	r2, [pc, #156]	@ (80007fc <SystemClock_Config+0xcc>)
 800075e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000762:	6413      	str	r3, [r2, #64]	@ 0x40
 8000764:	4b25      	ldr	r3, [pc, #148]	@ (80007fc <SystemClock_Config+0xcc>)
 8000766:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000768:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800076c:	60bb      	str	r3, [r7, #8]
 800076e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000770:	2300      	movs	r3, #0
 8000772:	607b      	str	r3, [r7, #4]
 8000774:	4b22      	ldr	r3, [pc, #136]	@ (8000800 <SystemClock_Config+0xd0>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	4a21      	ldr	r2, [pc, #132]	@ (8000800 <SystemClock_Config+0xd0>)
 800077a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800077e:	6013      	str	r3, [r2, #0]
 8000780:	4b1f      	ldr	r3, [pc, #124]	@ (8000800 <SystemClock_Config+0xd0>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000788:	607b      	str	r3, [r7, #4]
 800078a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800078c:	2301      	movs	r3, #1
 800078e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000790:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000794:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000796:	2302      	movs	r3, #2
 8000798:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800079a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800079e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007a0:	2304      	movs	r3, #4
 80007a2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80007a4:	23a8      	movs	r3, #168	@ 0xa8
 80007a6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007a8:	2302      	movs	r3, #2
 80007aa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80007ac:	2307      	movs	r3, #7
 80007ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007b0:	f107 0320 	add.w	r3, r7, #32
 80007b4:	4618      	mov	r0, r3
 80007b6:	f001 ff71 	bl	800269c <HAL_RCC_OscConfig>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80007c0:	f000 f8b9 	bl	8000936 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007c4:	230f      	movs	r3, #15
 80007c6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007c8:	2302      	movs	r3, #2
 80007ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007cc:	2300      	movs	r3, #0
 80007ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007d0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80007d4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007d6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007da:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007dc:	f107 030c 	add.w	r3, r7, #12
 80007e0:	2105      	movs	r1, #5
 80007e2:	4618      	mov	r0, r3
 80007e4:	f002 f9d2 	bl	8002b8c <HAL_RCC_ClockConfig>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80007ee:	f000 f8a2 	bl	8000936 <Error_Handler>
  }
}
 80007f2:	bf00      	nop
 80007f4:	3750      	adds	r7, #80	@ 0x50
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	40023800 	.word	0x40023800
 8000800:	40007000 	.word	0x40007000

08000804 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000808:	4b11      	ldr	r3, [pc, #68]	@ (8000850 <MX_USART2_UART_Init+0x4c>)
 800080a:	4a12      	ldr	r2, [pc, #72]	@ (8000854 <MX_USART2_UART_Init+0x50>)
 800080c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800080e:	4b10      	ldr	r3, [pc, #64]	@ (8000850 <MX_USART2_UART_Init+0x4c>)
 8000810:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000814:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000816:	4b0e      	ldr	r3, [pc, #56]	@ (8000850 <MX_USART2_UART_Init+0x4c>)
 8000818:	2200      	movs	r2, #0
 800081a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800081c:	4b0c      	ldr	r3, [pc, #48]	@ (8000850 <MX_USART2_UART_Init+0x4c>)
 800081e:	2200      	movs	r2, #0
 8000820:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000822:	4b0b      	ldr	r3, [pc, #44]	@ (8000850 <MX_USART2_UART_Init+0x4c>)
 8000824:	2200      	movs	r2, #0
 8000826:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000828:	4b09      	ldr	r3, [pc, #36]	@ (8000850 <MX_USART2_UART_Init+0x4c>)
 800082a:	220c      	movs	r2, #12
 800082c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800082e:	4b08      	ldr	r3, [pc, #32]	@ (8000850 <MX_USART2_UART_Init+0x4c>)
 8000830:	2200      	movs	r2, #0
 8000832:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000834:	4b06      	ldr	r3, [pc, #24]	@ (8000850 <MX_USART2_UART_Init+0x4c>)
 8000836:	2200      	movs	r2, #0
 8000838:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800083a:	4805      	ldr	r0, [pc, #20]	@ (8000850 <MX_USART2_UART_Init+0x4c>)
 800083c:	f002 fe9a 	bl	8003574 <HAL_UART_Init>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000846:	f000 f876 	bl	8000936 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800084a:	bf00      	nop
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	2000040c 	.word	0x2000040c
 8000854:	40004400 	.word	0x40004400

08000858 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b088      	sub	sp, #32
 800085c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800085e:	f107 030c 	add.w	r3, r7, #12
 8000862:	2200      	movs	r2, #0
 8000864:	601a      	str	r2, [r3, #0]
 8000866:	605a      	str	r2, [r3, #4]
 8000868:	609a      	str	r2, [r3, #8]
 800086a:	60da      	str	r2, [r3, #12]
 800086c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800086e:	2300      	movs	r3, #0
 8000870:	60bb      	str	r3, [r7, #8]
 8000872:	4b26      	ldr	r3, [pc, #152]	@ (800090c <MX_GPIO_Init+0xb4>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000876:	4a25      	ldr	r2, [pc, #148]	@ (800090c <MX_GPIO_Init+0xb4>)
 8000878:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800087c:	6313      	str	r3, [r2, #48]	@ 0x30
 800087e:	4b23      	ldr	r3, [pc, #140]	@ (800090c <MX_GPIO_Init+0xb4>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000882:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000886:	60bb      	str	r3, [r7, #8]
 8000888:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800088a:	2300      	movs	r3, #0
 800088c:	607b      	str	r3, [r7, #4]
 800088e:	4b1f      	ldr	r3, [pc, #124]	@ (800090c <MX_GPIO_Init+0xb4>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000892:	4a1e      	ldr	r2, [pc, #120]	@ (800090c <MX_GPIO_Init+0xb4>)
 8000894:	f043 0301 	orr.w	r3, r3, #1
 8000898:	6313      	str	r3, [r2, #48]	@ 0x30
 800089a:	4b1c      	ldr	r3, [pc, #112]	@ (800090c <MX_GPIO_Init+0xb4>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089e:	f003 0301 	and.w	r3, r3, #1
 80008a2:	607b      	str	r3, [r7, #4]
 80008a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008a6:	2300      	movs	r3, #0
 80008a8:	603b      	str	r3, [r7, #0]
 80008aa:	4b18      	ldr	r3, [pc, #96]	@ (800090c <MX_GPIO_Init+0xb4>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ae:	4a17      	ldr	r2, [pc, #92]	@ (800090c <MX_GPIO_Init+0xb4>)
 80008b0:	f043 0308 	orr.w	r3, r3, #8
 80008b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008b6:	4b15      	ldr	r3, [pc, #84]	@ (800090c <MX_GPIO_Init+0xb4>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ba:	f003 0308 	and.w	r3, r3, #8
 80008be:	603b      	str	r3, [r7, #0]
 80008c0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80008c2:	2200      	movs	r2, #0
 80008c4:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 80008c8:	4811      	ldr	r0, [pc, #68]	@ (8000910 <MX_GPIO_Init+0xb8>)
 80008ca:	f000 fc7b 	bl	80011c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80008ce:	2301      	movs	r3, #1
 80008d0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008d2:	2300      	movs	r3, #0
 80008d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80008d6:	2302      	movs	r3, #2
 80008d8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008da:	f107 030c 	add.w	r3, r7, #12
 80008de:	4619      	mov	r1, r3
 80008e0:	480c      	ldr	r0, [pc, #48]	@ (8000914 <MX_GPIO_Init+0xbc>)
 80008e2:	f000 fad3 	bl	8000e8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80008e6:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 80008ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ec:	2301      	movs	r3, #1
 80008ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f0:	2300      	movs	r3, #0
 80008f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f4:	2300      	movs	r3, #0
 80008f6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008f8:	f107 030c 	add.w	r3, r7, #12
 80008fc:	4619      	mov	r1, r3
 80008fe:	4804      	ldr	r0, [pc, #16]	@ (8000910 <MX_GPIO_Init+0xb8>)
 8000900:	f000 fac4 	bl	8000e8c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000904:	bf00      	nop
 8000906:	3720      	adds	r7, #32
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	40023800 	.word	0x40023800
 8000910:	40020c00 	.word	0x40020c00
 8000914:	40020000 	.word	0x40020000

08000918 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000928:	d101      	bne.n	800092e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800092a:	f000 f989 	bl	8000c40 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800092e:	bf00      	nop
 8000930:	3708      	adds	r7, #8
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}

08000936 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000936:	b480      	push	{r7}
 8000938:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800093a:	b672      	cpsid	i
}
 800093c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800093e:	bf00      	nop
 8000940:	e7fd      	b.n	800093e <Error_Handler+0x8>
	...

08000944 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800094a:	2300      	movs	r3, #0
 800094c:	607b      	str	r3, [r7, #4]
 800094e:	4b12      	ldr	r3, [pc, #72]	@ (8000998 <HAL_MspInit+0x54>)
 8000950:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000952:	4a11      	ldr	r2, [pc, #68]	@ (8000998 <HAL_MspInit+0x54>)
 8000954:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000958:	6453      	str	r3, [r2, #68]	@ 0x44
 800095a:	4b0f      	ldr	r3, [pc, #60]	@ (8000998 <HAL_MspInit+0x54>)
 800095c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800095e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000962:	607b      	str	r3, [r7, #4]
 8000964:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000966:	2300      	movs	r3, #0
 8000968:	603b      	str	r3, [r7, #0]
 800096a:	4b0b      	ldr	r3, [pc, #44]	@ (8000998 <HAL_MspInit+0x54>)
 800096c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800096e:	4a0a      	ldr	r2, [pc, #40]	@ (8000998 <HAL_MspInit+0x54>)
 8000970:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000974:	6413      	str	r3, [r2, #64]	@ 0x40
 8000976:	4b08      	ldr	r3, [pc, #32]	@ (8000998 <HAL_MspInit+0x54>)
 8000978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800097a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800097e:	603b      	str	r3, [r7, #0]
 8000980:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000982:	2200      	movs	r2, #0
 8000984:	210f      	movs	r1, #15
 8000986:	f06f 0001 	mvn.w	r0, #1
 800098a:	f000 fa55 	bl	8000e38 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800098e:	bf00      	nop
 8000990:	3708      	adds	r7, #8
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	40023800 	.word	0x40023800

0800099c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b08a      	sub	sp, #40	@ 0x28
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a4:	f107 0314 	add.w	r3, r7, #20
 80009a8:	2200      	movs	r2, #0
 80009aa:	601a      	str	r2, [r3, #0]
 80009ac:	605a      	str	r2, [r3, #4]
 80009ae:	609a      	str	r2, [r3, #8]
 80009b0:	60da      	str	r2, [r3, #12]
 80009b2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4a19      	ldr	r2, [pc, #100]	@ (8000a20 <HAL_UART_MspInit+0x84>)
 80009ba:	4293      	cmp	r3, r2
 80009bc:	d12b      	bne.n	8000a16 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009be:	2300      	movs	r3, #0
 80009c0:	613b      	str	r3, [r7, #16]
 80009c2:	4b18      	ldr	r3, [pc, #96]	@ (8000a24 <HAL_UART_MspInit+0x88>)
 80009c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009c6:	4a17      	ldr	r2, [pc, #92]	@ (8000a24 <HAL_UART_MspInit+0x88>)
 80009c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80009ce:	4b15      	ldr	r3, [pc, #84]	@ (8000a24 <HAL_UART_MspInit+0x88>)
 80009d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80009d6:	613b      	str	r3, [r7, #16]
 80009d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009da:	2300      	movs	r3, #0
 80009dc:	60fb      	str	r3, [r7, #12]
 80009de:	4b11      	ldr	r3, [pc, #68]	@ (8000a24 <HAL_UART_MspInit+0x88>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009e2:	4a10      	ldr	r2, [pc, #64]	@ (8000a24 <HAL_UART_MspInit+0x88>)
 80009e4:	f043 0301 	orr.w	r3, r3, #1
 80009e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ea:	4b0e      	ldr	r3, [pc, #56]	@ (8000a24 <HAL_UART_MspInit+0x88>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ee:	f003 0301 	and.w	r3, r3, #1
 80009f2:	60fb      	str	r3, [r7, #12]
 80009f4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80009f6:	230c      	movs	r3, #12
 80009f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009fa:	2302      	movs	r3, #2
 80009fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fe:	2300      	movs	r3, #0
 8000a00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a02:	2303      	movs	r3, #3
 8000a04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a06:	2307      	movs	r3, #7
 8000a08:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a0a:	f107 0314 	add.w	r3, r7, #20
 8000a0e:	4619      	mov	r1, r3
 8000a10:	4805      	ldr	r0, [pc, #20]	@ (8000a28 <HAL_UART_MspInit+0x8c>)
 8000a12:	f000 fa3b 	bl	8000e8c <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000a16:	bf00      	nop
 8000a18:	3728      	adds	r7, #40	@ 0x28
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	40004400 	.word	0x40004400
 8000a24:	40023800 	.word	0x40023800
 8000a28:	40020000 	.word	0x40020000

08000a2c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b08e      	sub	sp, #56	@ 0x38
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000a34:	2300      	movs	r3, #0
 8000a36:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	60fb      	str	r3, [r7, #12]
 8000a40:	4b34      	ldr	r3, [pc, #208]	@ (8000b14 <HAL_InitTick+0xe8>)
 8000a42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a44:	4a33      	ldr	r2, [pc, #204]	@ (8000b14 <HAL_InitTick+0xe8>)
 8000a46:	f043 0301 	orr.w	r3, r3, #1
 8000a4a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a4c:	4b31      	ldr	r3, [pc, #196]	@ (8000b14 <HAL_InitTick+0xe8>)
 8000a4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a50:	f003 0301 	and.w	r3, r3, #1
 8000a54:	60fb      	str	r3, [r7, #12]
 8000a56:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a58:	f107 0210 	add.w	r2, r7, #16
 8000a5c:	f107 0314 	add.w	r3, r7, #20
 8000a60:	4611      	mov	r1, r2
 8000a62:	4618      	mov	r0, r3
 8000a64:	f002 fab2 	bl	8002fcc <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000a68:	6a3b      	ldr	r3, [r7, #32]
 8000a6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000a6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d103      	bne.n	8000a7a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000a72:	f002 fa83 	bl	8002f7c <HAL_RCC_GetPCLK1Freq>
 8000a76:	6378      	str	r0, [r7, #52]	@ 0x34
 8000a78:	e004      	b.n	8000a84 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000a7a:	f002 fa7f 	bl	8002f7c <HAL_RCC_GetPCLK1Freq>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	005b      	lsls	r3, r3, #1
 8000a82:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000a86:	4a24      	ldr	r2, [pc, #144]	@ (8000b18 <HAL_InitTick+0xec>)
 8000a88:	fba2 2303 	umull	r2, r3, r2, r3
 8000a8c:	0c9b      	lsrs	r3, r3, #18
 8000a8e:	3b01      	subs	r3, #1
 8000a90:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8000a92:	4b22      	ldr	r3, [pc, #136]	@ (8000b1c <HAL_InitTick+0xf0>)
 8000a94:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000a98:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8000a9a:	4b20      	ldr	r3, [pc, #128]	@ (8000b1c <HAL_InitTick+0xf0>)
 8000a9c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000aa0:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8000aa2:	4a1e      	ldr	r2, [pc, #120]	@ (8000b1c <HAL_InitTick+0xf0>)
 8000aa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000aa6:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8000aa8:	4b1c      	ldr	r3, [pc, #112]	@ (8000b1c <HAL_InitTick+0xf0>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aae:	4b1b      	ldr	r3, [pc, #108]	@ (8000b1c <HAL_InitTick+0xf0>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ab4:	4b19      	ldr	r3, [pc, #100]	@ (8000b1c <HAL_InitTick+0xf0>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8000aba:	4818      	ldr	r0, [pc, #96]	@ (8000b1c <HAL_InitTick+0xf0>)
 8000abc:	f002 fab8 	bl	8003030 <HAL_TIM_Base_Init>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000ac6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d11b      	bne.n	8000b06 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8000ace:	4813      	ldr	r0, [pc, #76]	@ (8000b1c <HAL_InitTick+0xf0>)
 8000ad0:	f002 fb08 	bl	80030e4 <HAL_TIM_Base_Start_IT>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000ada:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d111      	bne.n	8000b06 <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000ae2:	201c      	movs	r0, #28
 8000ae4:	f000 f9c4 	bl	8000e70 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	2b0f      	cmp	r3, #15
 8000aec:	d808      	bhi.n	8000b00 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8000aee:	2200      	movs	r2, #0
 8000af0:	6879      	ldr	r1, [r7, #4]
 8000af2:	201c      	movs	r0, #28
 8000af4:	f000 f9a0 	bl	8000e38 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000af8:	4a09      	ldr	r2, [pc, #36]	@ (8000b20 <HAL_InitTick+0xf4>)
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	6013      	str	r3, [r2, #0]
 8000afe:	e002      	b.n	8000b06 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8000b00:	2301      	movs	r3, #1
 8000b02:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000b06:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	3738      	adds	r7, #56	@ 0x38
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	40023800 	.word	0x40023800
 8000b18:	431bde83 	.word	0x431bde83
 8000b1c:	20000468 	.word	0x20000468
 8000b20:	20000004 	.word	0x20000004

08000b24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b28:	bf00      	nop
 8000b2a:	e7fd      	b.n	8000b28 <NMI_Handler+0x4>

08000b2c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b30:	bf00      	nop
 8000b32:	e7fd      	b.n	8000b30 <HardFault_Handler+0x4>

08000b34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b38:	bf00      	nop
 8000b3a:	e7fd      	b.n	8000b38 <MemManage_Handler+0x4>

08000b3c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b40:	bf00      	nop
 8000b42:	e7fd      	b.n	8000b40 <BusFault_Handler+0x4>

08000b44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b48:	bf00      	nop
 8000b4a:	e7fd      	b.n	8000b48 <UsageFault_Handler+0x4>

08000b4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b50:	bf00      	nop
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr
	...

08000b5c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000b60:	4802      	ldr	r0, [pc, #8]	@ (8000b6c <TIM2_IRQHandler+0x10>)
 8000b62:	f002 fb2f 	bl	80031c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000b66:	bf00      	nop
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	20000468 	.word	0x20000468

08000b70 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000b74:	4802      	ldr	r0, [pc, #8]	@ (8000b80 <OTG_FS_IRQHandler+0x10>)
 8000b76:	f000 fc82 	bl	800147e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000b7a:	bf00      	nop
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	200056e8 	.word	0x200056e8

08000b84 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b88:	4b06      	ldr	r3, [pc, #24]	@ (8000ba4 <SystemInit+0x20>)
 8000b8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b8e:	4a05      	ldr	r2, [pc, #20]	@ (8000ba4 <SystemInit+0x20>)
 8000b90:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b94:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b98:	bf00      	nop
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop
 8000ba4:	e000ed00 	.word	0xe000ed00

08000ba8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000ba8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000be0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000bac:	f7ff ffea 	bl	8000b84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bb0:	480c      	ldr	r0, [pc, #48]	@ (8000be4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000bb2:	490d      	ldr	r1, [pc, #52]	@ (8000be8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000bb4:	4a0d      	ldr	r2, [pc, #52]	@ (8000bec <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000bb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bb8:	e002      	b.n	8000bc0 <LoopCopyDataInit>

08000bba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bbe:	3304      	adds	r3, #4

08000bc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bc4:	d3f9      	bcc.n	8000bba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bc6:	4a0a      	ldr	r2, [pc, #40]	@ (8000bf0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000bc8:	4c0a      	ldr	r4, [pc, #40]	@ (8000bf4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000bca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bcc:	e001      	b.n	8000bd2 <LoopFillZerobss>

08000bce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bd0:	3204      	adds	r2, #4

08000bd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bd4:	d3fb      	bcc.n	8000bce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bd6:	f009 fa2d 	bl	800a034 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bda:	f7ff fd49 	bl	8000670 <main>
  bx  lr    
 8000bde:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000be0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000be4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000be8:	20000150 	.word	0x20000150
  ldr r2, =_sidata
 8000bec:	0800a248 	.word	0x0800a248
  ldr r2, =_sbss
 8000bf0:	20000150 	.word	0x20000150
  ldr r4, =_ebss
 8000bf4:	20005f2c 	.word	0x20005f2c

08000bf8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bf8:	e7fe      	b.n	8000bf8 <ADC_IRQHandler>
	...

08000bfc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c00:	4b0e      	ldr	r3, [pc, #56]	@ (8000c3c <HAL_Init+0x40>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4a0d      	ldr	r2, [pc, #52]	@ (8000c3c <HAL_Init+0x40>)
 8000c06:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c0a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c0c:	4b0b      	ldr	r3, [pc, #44]	@ (8000c3c <HAL_Init+0x40>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4a0a      	ldr	r2, [pc, #40]	@ (8000c3c <HAL_Init+0x40>)
 8000c12:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000c16:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c18:	4b08      	ldr	r3, [pc, #32]	@ (8000c3c <HAL_Init+0x40>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4a07      	ldr	r2, [pc, #28]	@ (8000c3c <HAL_Init+0x40>)
 8000c1e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c22:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c24:	2003      	movs	r0, #3
 8000c26:	f000 f8fc 	bl	8000e22 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c2a:	200f      	movs	r0, #15
 8000c2c:	f7ff fefe 	bl	8000a2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c30:	f7ff fe88 	bl	8000944 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c34:	2300      	movs	r3, #0
}
 8000c36:	4618      	mov	r0, r3
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	40023c00 	.word	0x40023c00

08000c40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c44:	4b06      	ldr	r3, [pc, #24]	@ (8000c60 <HAL_IncTick+0x20>)
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	461a      	mov	r2, r3
 8000c4a:	4b06      	ldr	r3, [pc, #24]	@ (8000c64 <HAL_IncTick+0x24>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	4413      	add	r3, r2
 8000c50:	4a04      	ldr	r2, [pc, #16]	@ (8000c64 <HAL_IncTick+0x24>)
 8000c52:	6013      	str	r3, [r2, #0]
}
 8000c54:	bf00      	nop
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop
 8000c60:	20000008 	.word	0x20000008
 8000c64:	200004b0 	.word	0x200004b0

08000c68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c6c:	4b03      	ldr	r3, [pc, #12]	@ (8000c7c <HAL_GetTick+0x14>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
}
 8000c70:	4618      	mov	r0, r3
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop
 8000c7c:	200004b0 	.word	0x200004b0

08000c80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b084      	sub	sp, #16
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c88:	f7ff ffee 	bl	8000c68 <HAL_GetTick>
 8000c8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c98:	d005      	beq.n	8000ca6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c9a:	4b0a      	ldr	r3, [pc, #40]	@ (8000cc4 <HAL_Delay+0x44>)
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	461a      	mov	r2, r3
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	4413      	add	r3, r2
 8000ca4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ca6:	bf00      	nop
 8000ca8:	f7ff ffde 	bl	8000c68 <HAL_GetTick>
 8000cac:	4602      	mov	r2, r0
 8000cae:	68bb      	ldr	r3, [r7, #8]
 8000cb0:	1ad3      	subs	r3, r2, r3
 8000cb2:	68fa      	ldr	r2, [r7, #12]
 8000cb4:	429a      	cmp	r2, r3
 8000cb6:	d8f7      	bhi.n	8000ca8 <HAL_Delay+0x28>
  {
  }
}
 8000cb8:	bf00      	nop
 8000cba:	bf00      	nop
 8000cbc:	3710      	adds	r7, #16
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	20000008 	.word	0x20000008

08000cc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b085      	sub	sp, #20
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	f003 0307 	and.w	r3, r3, #7
 8000cd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cd8:	4b0c      	ldr	r3, [pc, #48]	@ (8000d0c <__NVIC_SetPriorityGrouping+0x44>)
 8000cda:	68db      	ldr	r3, [r3, #12]
 8000cdc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cde:	68ba      	ldr	r2, [r7, #8]
 8000ce0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ce4:	4013      	ands	r3, r2
 8000ce6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cec:	68bb      	ldr	r3, [r7, #8]
 8000cee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cf0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000cf4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000cf8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cfa:	4a04      	ldr	r2, [pc, #16]	@ (8000d0c <__NVIC_SetPriorityGrouping+0x44>)
 8000cfc:	68bb      	ldr	r3, [r7, #8]
 8000cfe:	60d3      	str	r3, [r2, #12]
}
 8000d00:	bf00      	nop
 8000d02:	3714      	adds	r7, #20
 8000d04:	46bd      	mov	sp, r7
 8000d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0a:	4770      	bx	lr
 8000d0c:	e000ed00 	.word	0xe000ed00

08000d10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d14:	4b04      	ldr	r3, [pc, #16]	@ (8000d28 <__NVIC_GetPriorityGrouping+0x18>)
 8000d16:	68db      	ldr	r3, [r3, #12]
 8000d18:	0a1b      	lsrs	r3, r3, #8
 8000d1a:	f003 0307 	and.w	r3, r3, #7
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	46bd      	mov	sp, r7
 8000d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d26:	4770      	bx	lr
 8000d28:	e000ed00 	.word	0xe000ed00

08000d2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b083      	sub	sp, #12
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	4603      	mov	r3, r0
 8000d34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	db0b      	blt.n	8000d56 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d3e:	79fb      	ldrb	r3, [r7, #7]
 8000d40:	f003 021f 	and.w	r2, r3, #31
 8000d44:	4907      	ldr	r1, [pc, #28]	@ (8000d64 <__NVIC_EnableIRQ+0x38>)
 8000d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d4a:	095b      	lsrs	r3, r3, #5
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	fa00 f202 	lsl.w	r2, r0, r2
 8000d52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d56:	bf00      	nop
 8000d58:	370c      	adds	r7, #12
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	e000e100 	.word	0xe000e100

08000d68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b083      	sub	sp, #12
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	4603      	mov	r3, r0
 8000d70:	6039      	str	r1, [r7, #0]
 8000d72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	db0a      	blt.n	8000d92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	b2da      	uxtb	r2, r3
 8000d80:	490c      	ldr	r1, [pc, #48]	@ (8000db4 <__NVIC_SetPriority+0x4c>)
 8000d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d86:	0112      	lsls	r2, r2, #4
 8000d88:	b2d2      	uxtb	r2, r2
 8000d8a:	440b      	add	r3, r1
 8000d8c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d90:	e00a      	b.n	8000da8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	b2da      	uxtb	r2, r3
 8000d96:	4908      	ldr	r1, [pc, #32]	@ (8000db8 <__NVIC_SetPriority+0x50>)
 8000d98:	79fb      	ldrb	r3, [r7, #7]
 8000d9a:	f003 030f 	and.w	r3, r3, #15
 8000d9e:	3b04      	subs	r3, #4
 8000da0:	0112      	lsls	r2, r2, #4
 8000da2:	b2d2      	uxtb	r2, r2
 8000da4:	440b      	add	r3, r1
 8000da6:	761a      	strb	r2, [r3, #24]
}
 8000da8:	bf00      	nop
 8000daa:	370c      	adds	r7, #12
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr
 8000db4:	e000e100 	.word	0xe000e100
 8000db8:	e000ed00 	.word	0xe000ed00

08000dbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b089      	sub	sp, #36	@ 0x24
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	60f8      	str	r0, [r7, #12]
 8000dc4:	60b9      	str	r1, [r7, #8]
 8000dc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	f003 0307 	and.w	r3, r3, #7
 8000dce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dd0:	69fb      	ldr	r3, [r7, #28]
 8000dd2:	f1c3 0307 	rsb	r3, r3, #7
 8000dd6:	2b04      	cmp	r3, #4
 8000dd8:	bf28      	it	cs
 8000dda:	2304      	movcs	r3, #4
 8000ddc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dde:	69fb      	ldr	r3, [r7, #28]
 8000de0:	3304      	adds	r3, #4
 8000de2:	2b06      	cmp	r3, #6
 8000de4:	d902      	bls.n	8000dec <NVIC_EncodePriority+0x30>
 8000de6:	69fb      	ldr	r3, [r7, #28]
 8000de8:	3b03      	subs	r3, #3
 8000dea:	e000      	b.n	8000dee <NVIC_EncodePriority+0x32>
 8000dec:	2300      	movs	r3, #0
 8000dee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000df0:	f04f 32ff 	mov.w	r2, #4294967295
 8000df4:	69bb      	ldr	r3, [r7, #24]
 8000df6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfa:	43da      	mvns	r2, r3
 8000dfc:	68bb      	ldr	r3, [r7, #8]
 8000dfe:	401a      	ands	r2, r3
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e04:	f04f 31ff 	mov.w	r1, #4294967295
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e0e:	43d9      	mvns	r1, r3
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e14:	4313      	orrs	r3, r2
         );
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	3724      	adds	r7, #36	@ 0x24
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr

08000e22 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e22:	b580      	push	{r7, lr}
 8000e24:	b082      	sub	sp, #8
 8000e26:	af00      	add	r7, sp, #0
 8000e28:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e2a:	6878      	ldr	r0, [r7, #4]
 8000e2c:	f7ff ff4c 	bl	8000cc8 <__NVIC_SetPriorityGrouping>
}
 8000e30:	bf00      	nop
 8000e32:	3708      	adds	r7, #8
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}

08000e38 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b086      	sub	sp, #24
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	4603      	mov	r3, r0
 8000e40:	60b9      	str	r1, [r7, #8]
 8000e42:	607a      	str	r2, [r7, #4]
 8000e44:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e46:	2300      	movs	r3, #0
 8000e48:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e4a:	f7ff ff61 	bl	8000d10 <__NVIC_GetPriorityGrouping>
 8000e4e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e50:	687a      	ldr	r2, [r7, #4]
 8000e52:	68b9      	ldr	r1, [r7, #8]
 8000e54:	6978      	ldr	r0, [r7, #20]
 8000e56:	f7ff ffb1 	bl	8000dbc <NVIC_EncodePriority>
 8000e5a:	4602      	mov	r2, r0
 8000e5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e60:	4611      	mov	r1, r2
 8000e62:	4618      	mov	r0, r3
 8000e64:	f7ff ff80 	bl	8000d68 <__NVIC_SetPriority>
}
 8000e68:	bf00      	nop
 8000e6a:	3718      	adds	r7, #24
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}

08000e70 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	4603      	mov	r3, r0
 8000e78:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f7ff ff54 	bl	8000d2c <__NVIC_EnableIRQ>
}
 8000e84:	bf00      	nop
 8000e86:	3708      	adds	r7, #8
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}

08000e8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b089      	sub	sp, #36	@ 0x24
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
 8000e94:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e96:	2300      	movs	r3, #0
 8000e98:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	61fb      	str	r3, [r7, #28]
 8000ea6:	e16b      	b.n	8001180 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	69fb      	ldr	r3, [r7, #28]
 8000eac:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	697a      	ldr	r2, [r7, #20]
 8000eb8:	4013      	ands	r3, r2
 8000eba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ebc:	693a      	ldr	r2, [r7, #16]
 8000ebe:	697b      	ldr	r3, [r7, #20]
 8000ec0:	429a      	cmp	r2, r3
 8000ec2:	f040 815a 	bne.w	800117a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	685b      	ldr	r3, [r3, #4]
 8000eca:	f003 0303 	and.w	r3, r3, #3
 8000ece:	2b01      	cmp	r3, #1
 8000ed0:	d005      	beq.n	8000ede <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000eda:	2b02      	cmp	r3, #2
 8000edc:	d130      	bne.n	8000f40 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	689b      	ldr	r3, [r3, #8]
 8000ee2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ee4:	69fb      	ldr	r3, [r7, #28]
 8000ee6:	005b      	lsls	r3, r3, #1
 8000ee8:	2203      	movs	r2, #3
 8000eea:	fa02 f303 	lsl.w	r3, r2, r3
 8000eee:	43db      	mvns	r3, r3
 8000ef0:	69ba      	ldr	r2, [r7, #24]
 8000ef2:	4013      	ands	r3, r2
 8000ef4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	68da      	ldr	r2, [r3, #12]
 8000efa:	69fb      	ldr	r3, [r7, #28]
 8000efc:	005b      	lsls	r3, r3, #1
 8000efe:	fa02 f303 	lsl.w	r3, r2, r3
 8000f02:	69ba      	ldr	r2, [r7, #24]
 8000f04:	4313      	orrs	r3, r2
 8000f06:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	69ba      	ldr	r2, [r7, #24]
 8000f0c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f14:	2201      	movs	r2, #1
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1c:	43db      	mvns	r3, r3
 8000f1e:	69ba      	ldr	r2, [r7, #24]
 8000f20:	4013      	ands	r3, r2
 8000f22:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	091b      	lsrs	r3, r3, #4
 8000f2a:	f003 0201 	and.w	r2, r3, #1
 8000f2e:	69fb      	ldr	r3, [r7, #28]
 8000f30:	fa02 f303 	lsl.w	r3, r2, r3
 8000f34:	69ba      	ldr	r2, [r7, #24]
 8000f36:	4313      	orrs	r3, r2
 8000f38:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	69ba      	ldr	r2, [r7, #24]
 8000f3e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	f003 0303 	and.w	r3, r3, #3
 8000f48:	2b03      	cmp	r3, #3
 8000f4a:	d017      	beq.n	8000f7c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	68db      	ldr	r3, [r3, #12]
 8000f50:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f52:	69fb      	ldr	r3, [r7, #28]
 8000f54:	005b      	lsls	r3, r3, #1
 8000f56:	2203      	movs	r2, #3
 8000f58:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5c:	43db      	mvns	r3, r3
 8000f5e:	69ba      	ldr	r2, [r7, #24]
 8000f60:	4013      	ands	r3, r2
 8000f62:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	689a      	ldr	r2, [r3, #8]
 8000f68:	69fb      	ldr	r3, [r7, #28]
 8000f6a:	005b      	lsls	r3, r3, #1
 8000f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f70:	69ba      	ldr	r2, [r7, #24]
 8000f72:	4313      	orrs	r3, r2
 8000f74:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	69ba      	ldr	r2, [r7, #24]
 8000f7a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	f003 0303 	and.w	r3, r3, #3
 8000f84:	2b02      	cmp	r3, #2
 8000f86:	d123      	bne.n	8000fd0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f88:	69fb      	ldr	r3, [r7, #28]
 8000f8a:	08da      	lsrs	r2, r3, #3
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	3208      	adds	r2, #8
 8000f90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f94:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f96:	69fb      	ldr	r3, [r7, #28]
 8000f98:	f003 0307 	and.w	r3, r3, #7
 8000f9c:	009b      	lsls	r3, r3, #2
 8000f9e:	220f      	movs	r2, #15
 8000fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa4:	43db      	mvns	r3, r3
 8000fa6:	69ba      	ldr	r2, [r7, #24]
 8000fa8:	4013      	ands	r3, r2
 8000faa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	691a      	ldr	r2, [r3, #16]
 8000fb0:	69fb      	ldr	r3, [r7, #28]
 8000fb2:	f003 0307 	and.w	r3, r3, #7
 8000fb6:	009b      	lsls	r3, r3, #2
 8000fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbc:	69ba      	ldr	r2, [r7, #24]
 8000fbe:	4313      	orrs	r3, r2
 8000fc0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000fc2:	69fb      	ldr	r3, [r7, #28]
 8000fc4:	08da      	lsrs	r2, r3, #3
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	3208      	adds	r2, #8
 8000fca:	69b9      	ldr	r1, [r7, #24]
 8000fcc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	005b      	lsls	r3, r3, #1
 8000fda:	2203      	movs	r2, #3
 8000fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe0:	43db      	mvns	r3, r3
 8000fe2:	69ba      	ldr	r2, [r7, #24]
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	f003 0203 	and.w	r2, r3, #3
 8000ff0:	69fb      	ldr	r3, [r7, #28]
 8000ff2:	005b      	lsls	r3, r3, #1
 8000ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff8:	69ba      	ldr	r2, [r7, #24]
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	69ba      	ldr	r2, [r7, #24]
 8001002:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800100c:	2b00      	cmp	r3, #0
 800100e:	f000 80b4 	beq.w	800117a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001012:	2300      	movs	r3, #0
 8001014:	60fb      	str	r3, [r7, #12]
 8001016:	4b60      	ldr	r3, [pc, #384]	@ (8001198 <HAL_GPIO_Init+0x30c>)
 8001018:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800101a:	4a5f      	ldr	r2, [pc, #380]	@ (8001198 <HAL_GPIO_Init+0x30c>)
 800101c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001020:	6453      	str	r3, [r2, #68]	@ 0x44
 8001022:	4b5d      	ldr	r3, [pc, #372]	@ (8001198 <HAL_GPIO_Init+0x30c>)
 8001024:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001026:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800102a:	60fb      	str	r3, [r7, #12]
 800102c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800102e:	4a5b      	ldr	r2, [pc, #364]	@ (800119c <HAL_GPIO_Init+0x310>)
 8001030:	69fb      	ldr	r3, [r7, #28]
 8001032:	089b      	lsrs	r3, r3, #2
 8001034:	3302      	adds	r3, #2
 8001036:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800103a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800103c:	69fb      	ldr	r3, [r7, #28]
 800103e:	f003 0303 	and.w	r3, r3, #3
 8001042:	009b      	lsls	r3, r3, #2
 8001044:	220f      	movs	r2, #15
 8001046:	fa02 f303 	lsl.w	r3, r2, r3
 800104a:	43db      	mvns	r3, r3
 800104c:	69ba      	ldr	r2, [r7, #24]
 800104e:	4013      	ands	r3, r2
 8001050:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4a52      	ldr	r2, [pc, #328]	@ (80011a0 <HAL_GPIO_Init+0x314>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d02b      	beq.n	80010b2 <HAL_GPIO_Init+0x226>
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	4a51      	ldr	r2, [pc, #324]	@ (80011a4 <HAL_GPIO_Init+0x318>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d025      	beq.n	80010ae <HAL_GPIO_Init+0x222>
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4a50      	ldr	r2, [pc, #320]	@ (80011a8 <HAL_GPIO_Init+0x31c>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d01f      	beq.n	80010aa <HAL_GPIO_Init+0x21e>
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	4a4f      	ldr	r2, [pc, #316]	@ (80011ac <HAL_GPIO_Init+0x320>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d019      	beq.n	80010a6 <HAL_GPIO_Init+0x21a>
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	4a4e      	ldr	r2, [pc, #312]	@ (80011b0 <HAL_GPIO_Init+0x324>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d013      	beq.n	80010a2 <HAL_GPIO_Init+0x216>
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	4a4d      	ldr	r2, [pc, #308]	@ (80011b4 <HAL_GPIO_Init+0x328>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d00d      	beq.n	800109e <HAL_GPIO_Init+0x212>
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	4a4c      	ldr	r2, [pc, #304]	@ (80011b8 <HAL_GPIO_Init+0x32c>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d007      	beq.n	800109a <HAL_GPIO_Init+0x20e>
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4a4b      	ldr	r2, [pc, #300]	@ (80011bc <HAL_GPIO_Init+0x330>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d101      	bne.n	8001096 <HAL_GPIO_Init+0x20a>
 8001092:	2307      	movs	r3, #7
 8001094:	e00e      	b.n	80010b4 <HAL_GPIO_Init+0x228>
 8001096:	2308      	movs	r3, #8
 8001098:	e00c      	b.n	80010b4 <HAL_GPIO_Init+0x228>
 800109a:	2306      	movs	r3, #6
 800109c:	e00a      	b.n	80010b4 <HAL_GPIO_Init+0x228>
 800109e:	2305      	movs	r3, #5
 80010a0:	e008      	b.n	80010b4 <HAL_GPIO_Init+0x228>
 80010a2:	2304      	movs	r3, #4
 80010a4:	e006      	b.n	80010b4 <HAL_GPIO_Init+0x228>
 80010a6:	2303      	movs	r3, #3
 80010a8:	e004      	b.n	80010b4 <HAL_GPIO_Init+0x228>
 80010aa:	2302      	movs	r3, #2
 80010ac:	e002      	b.n	80010b4 <HAL_GPIO_Init+0x228>
 80010ae:	2301      	movs	r3, #1
 80010b0:	e000      	b.n	80010b4 <HAL_GPIO_Init+0x228>
 80010b2:	2300      	movs	r3, #0
 80010b4:	69fa      	ldr	r2, [r7, #28]
 80010b6:	f002 0203 	and.w	r2, r2, #3
 80010ba:	0092      	lsls	r2, r2, #2
 80010bc:	4093      	lsls	r3, r2
 80010be:	69ba      	ldr	r2, [r7, #24]
 80010c0:	4313      	orrs	r3, r2
 80010c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010c4:	4935      	ldr	r1, [pc, #212]	@ (800119c <HAL_GPIO_Init+0x310>)
 80010c6:	69fb      	ldr	r3, [r7, #28]
 80010c8:	089b      	lsrs	r3, r3, #2
 80010ca:	3302      	adds	r3, #2
 80010cc:	69ba      	ldr	r2, [r7, #24]
 80010ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010d2:	4b3b      	ldr	r3, [pc, #236]	@ (80011c0 <HAL_GPIO_Init+0x334>)
 80010d4:	689b      	ldr	r3, [r3, #8]
 80010d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010d8:	693b      	ldr	r3, [r7, #16]
 80010da:	43db      	mvns	r3, r3
 80010dc:	69ba      	ldr	r2, [r7, #24]
 80010de:	4013      	ands	r3, r2
 80010e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d003      	beq.n	80010f6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80010ee:	69ba      	ldr	r2, [r7, #24]
 80010f0:	693b      	ldr	r3, [r7, #16]
 80010f2:	4313      	orrs	r3, r2
 80010f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010f6:	4a32      	ldr	r2, [pc, #200]	@ (80011c0 <HAL_GPIO_Init+0x334>)
 80010f8:	69bb      	ldr	r3, [r7, #24]
 80010fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010fc:	4b30      	ldr	r3, [pc, #192]	@ (80011c0 <HAL_GPIO_Init+0x334>)
 80010fe:	68db      	ldr	r3, [r3, #12]
 8001100:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001102:	693b      	ldr	r3, [r7, #16]
 8001104:	43db      	mvns	r3, r3
 8001106:	69ba      	ldr	r2, [r7, #24]
 8001108:	4013      	ands	r3, r2
 800110a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001114:	2b00      	cmp	r3, #0
 8001116:	d003      	beq.n	8001120 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001118:	69ba      	ldr	r2, [r7, #24]
 800111a:	693b      	ldr	r3, [r7, #16]
 800111c:	4313      	orrs	r3, r2
 800111e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001120:	4a27      	ldr	r2, [pc, #156]	@ (80011c0 <HAL_GPIO_Init+0x334>)
 8001122:	69bb      	ldr	r3, [r7, #24]
 8001124:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001126:	4b26      	ldr	r3, [pc, #152]	@ (80011c0 <HAL_GPIO_Init+0x334>)
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800112c:	693b      	ldr	r3, [r7, #16]
 800112e:	43db      	mvns	r3, r3
 8001130:	69ba      	ldr	r2, [r7, #24]
 8001132:	4013      	ands	r3, r2
 8001134:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800113e:	2b00      	cmp	r3, #0
 8001140:	d003      	beq.n	800114a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001142:	69ba      	ldr	r2, [r7, #24]
 8001144:	693b      	ldr	r3, [r7, #16]
 8001146:	4313      	orrs	r3, r2
 8001148:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800114a:	4a1d      	ldr	r2, [pc, #116]	@ (80011c0 <HAL_GPIO_Init+0x334>)
 800114c:	69bb      	ldr	r3, [r7, #24]
 800114e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001150:	4b1b      	ldr	r3, [pc, #108]	@ (80011c0 <HAL_GPIO_Init+0x334>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001156:	693b      	ldr	r3, [r7, #16]
 8001158:	43db      	mvns	r3, r3
 800115a:	69ba      	ldr	r2, [r7, #24]
 800115c:	4013      	ands	r3, r2
 800115e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001168:	2b00      	cmp	r3, #0
 800116a:	d003      	beq.n	8001174 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800116c:	69ba      	ldr	r2, [r7, #24]
 800116e:	693b      	ldr	r3, [r7, #16]
 8001170:	4313      	orrs	r3, r2
 8001172:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001174:	4a12      	ldr	r2, [pc, #72]	@ (80011c0 <HAL_GPIO_Init+0x334>)
 8001176:	69bb      	ldr	r3, [r7, #24]
 8001178:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800117a:	69fb      	ldr	r3, [r7, #28]
 800117c:	3301      	adds	r3, #1
 800117e:	61fb      	str	r3, [r7, #28]
 8001180:	69fb      	ldr	r3, [r7, #28]
 8001182:	2b0f      	cmp	r3, #15
 8001184:	f67f ae90 	bls.w	8000ea8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001188:	bf00      	nop
 800118a:	bf00      	nop
 800118c:	3724      	adds	r7, #36	@ 0x24
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop
 8001198:	40023800 	.word	0x40023800
 800119c:	40013800 	.word	0x40013800
 80011a0:	40020000 	.word	0x40020000
 80011a4:	40020400 	.word	0x40020400
 80011a8:	40020800 	.word	0x40020800
 80011ac:	40020c00 	.word	0x40020c00
 80011b0:	40021000 	.word	0x40021000
 80011b4:	40021400 	.word	0x40021400
 80011b8:	40021800 	.word	0x40021800
 80011bc:	40021c00 	.word	0x40021c00
 80011c0:	40013c00 	.word	0x40013c00

080011c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b083      	sub	sp, #12
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
 80011cc:	460b      	mov	r3, r1
 80011ce:	807b      	strh	r3, [r7, #2]
 80011d0:	4613      	mov	r3, r2
 80011d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011d4:	787b      	ldrb	r3, [r7, #1]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d003      	beq.n	80011e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011da:	887a      	ldrh	r2, [r7, #2]
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80011e0:	e003      	b.n	80011ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80011e2:	887b      	ldrh	r3, [r7, #2]
 80011e4:	041a      	lsls	r2, r3, #16
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	619a      	str	r2, [r3, #24]
}
 80011ea:	bf00      	nop
 80011ec:	370c      	adds	r7, #12
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr

080011f6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80011f6:	b580      	push	{r7, lr}
 80011f8:	b086      	sub	sp, #24
 80011fa:	af02      	add	r7, sp, #8
 80011fc:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d101      	bne.n	8001208 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001204:	2301      	movs	r3, #1
 8001206:	e101      	b.n	800140c <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001214:	b2db      	uxtb	r3, r3
 8001216:	2b00      	cmp	r3, #0
 8001218:	d106      	bne.n	8001228 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2200      	movs	r2, #0
 800121e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001222:	6878      	ldr	r0, [r7, #4]
 8001224:	f008 fb94 	bl	8009950 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2203      	movs	r2, #3
 800122c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001230:	68bb      	ldr	r3, [r7, #8]
 8001232:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001236:	d102      	bne.n	800123e <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	2200      	movs	r2, #0
 800123c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4618      	mov	r0, r3
 8001244:	f002 fd71 	bl	8003d2a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	6818      	ldr	r0, [r3, #0]
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	7c1a      	ldrb	r2, [r3, #16]
 8001250:	f88d 2000 	strb.w	r2, [sp]
 8001254:	3304      	adds	r3, #4
 8001256:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001258:	f002 fc50 	bl	8003afc <USB_CoreInit>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d005      	beq.n	800126e <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2202      	movs	r2, #2
 8001266:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800126a:	2301      	movs	r3, #1
 800126c:	e0ce      	b.n	800140c <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	2100      	movs	r1, #0
 8001274:	4618      	mov	r0, r3
 8001276:	f002 fd69 	bl	8003d4c <USB_SetCurrentMode>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d005      	beq.n	800128c <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2202      	movs	r2, #2
 8001284:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001288:	2301      	movs	r3, #1
 800128a:	e0bf      	b.n	800140c <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800128c:	2300      	movs	r3, #0
 800128e:	73fb      	strb	r3, [r7, #15]
 8001290:	e04a      	b.n	8001328 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001292:	7bfa      	ldrb	r2, [r7, #15]
 8001294:	6879      	ldr	r1, [r7, #4]
 8001296:	4613      	mov	r3, r2
 8001298:	00db      	lsls	r3, r3, #3
 800129a:	4413      	add	r3, r2
 800129c:	009b      	lsls	r3, r3, #2
 800129e:	440b      	add	r3, r1
 80012a0:	3315      	adds	r3, #21
 80012a2:	2201      	movs	r2, #1
 80012a4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80012a6:	7bfa      	ldrb	r2, [r7, #15]
 80012a8:	6879      	ldr	r1, [r7, #4]
 80012aa:	4613      	mov	r3, r2
 80012ac:	00db      	lsls	r3, r3, #3
 80012ae:	4413      	add	r3, r2
 80012b0:	009b      	lsls	r3, r3, #2
 80012b2:	440b      	add	r3, r1
 80012b4:	3314      	adds	r3, #20
 80012b6:	7bfa      	ldrb	r2, [r7, #15]
 80012b8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80012ba:	7bfa      	ldrb	r2, [r7, #15]
 80012bc:	7bfb      	ldrb	r3, [r7, #15]
 80012be:	b298      	uxth	r0, r3
 80012c0:	6879      	ldr	r1, [r7, #4]
 80012c2:	4613      	mov	r3, r2
 80012c4:	00db      	lsls	r3, r3, #3
 80012c6:	4413      	add	r3, r2
 80012c8:	009b      	lsls	r3, r3, #2
 80012ca:	440b      	add	r3, r1
 80012cc:	332e      	adds	r3, #46	@ 0x2e
 80012ce:	4602      	mov	r2, r0
 80012d0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80012d2:	7bfa      	ldrb	r2, [r7, #15]
 80012d4:	6879      	ldr	r1, [r7, #4]
 80012d6:	4613      	mov	r3, r2
 80012d8:	00db      	lsls	r3, r3, #3
 80012da:	4413      	add	r3, r2
 80012dc:	009b      	lsls	r3, r3, #2
 80012de:	440b      	add	r3, r1
 80012e0:	3318      	adds	r3, #24
 80012e2:	2200      	movs	r2, #0
 80012e4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80012e6:	7bfa      	ldrb	r2, [r7, #15]
 80012e8:	6879      	ldr	r1, [r7, #4]
 80012ea:	4613      	mov	r3, r2
 80012ec:	00db      	lsls	r3, r3, #3
 80012ee:	4413      	add	r3, r2
 80012f0:	009b      	lsls	r3, r3, #2
 80012f2:	440b      	add	r3, r1
 80012f4:	331c      	adds	r3, #28
 80012f6:	2200      	movs	r2, #0
 80012f8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80012fa:	7bfa      	ldrb	r2, [r7, #15]
 80012fc:	6879      	ldr	r1, [r7, #4]
 80012fe:	4613      	mov	r3, r2
 8001300:	00db      	lsls	r3, r3, #3
 8001302:	4413      	add	r3, r2
 8001304:	009b      	lsls	r3, r3, #2
 8001306:	440b      	add	r3, r1
 8001308:	3320      	adds	r3, #32
 800130a:	2200      	movs	r2, #0
 800130c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800130e:	7bfa      	ldrb	r2, [r7, #15]
 8001310:	6879      	ldr	r1, [r7, #4]
 8001312:	4613      	mov	r3, r2
 8001314:	00db      	lsls	r3, r3, #3
 8001316:	4413      	add	r3, r2
 8001318:	009b      	lsls	r3, r3, #2
 800131a:	440b      	add	r3, r1
 800131c:	3324      	adds	r3, #36	@ 0x24
 800131e:	2200      	movs	r2, #0
 8001320:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001322:	7bfb      	ldrb	r3, [r7, #15]
 8001324:	3301      	adds	r3, #1
 8001326:	73fb      	strb	r3, [r7, #15]
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	791b      	ldrb	r3, [r3, #4]
 800132c:	7bfa      	ldrb	r2, [r7, #15]
 800132e:	429a      	cmp	r2, r3
 8001330:	d3af      	bcc.n	8001292 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001332:	2300      	movs	r3, #0
 8001334:	73fb      	strb	r3, [r7, #15]
 8001336:	e044      	b.n	80013c2 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001338:	7bfa      	ldrb	r2, [r7, #15]
 800133a:	6879      	ldr	r1, [r7, #4]
 800133c:	4613      	mov	r3, r2
 800133e:	00db      	lsls	r3, r3, #3
 8001340:	4413      	add	r3, r2
 8001342:	009b      	lsls	r3, r3, #2
 8001344:	440b      	add	r3, r1
 8001346:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800134a:	2200      	movs	r2, #0
 800134c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800134e:	7bfa      	ldrb	r2, [r7, #15]
 8001350:	6879      	ldr	r1, [r7, #4]
 8001352:	4613      	mov	r3, r2
 8001354:	00db      	lsls	r3, r3, #3
 8001356:	4413      	add	r3, r2
 8001358:	009b      	lsls	r3, r3, #2
 800135a:	440b      	add	r3, r1
 800135c:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8001360:	7bfa      	ldrb	r2, [r7, #15]
 8001362:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001364:	7bfa      	ldrb	r2, [r7, #15]
 8001366:	6879      	ldr	r1, [r7, #4]
 8001368:	4613      	mov	r3, r2
 800136a:	00db      	lsls	r3, r3, #3
 800136c:	4413      	add	r3, r2
 800136e:	009b      	lsls	r3, r3, #2
 8001370:	440b      	add	r3, r1
 8001372:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001376:	2200      	movs	r2, #0
 8001378:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800137a:	7bfa      	ldrb	r2, [r7, #15]
 800137c:	6879      	ldr	r1, [r7, #4]
 800137e:	4613      	mov	r3, r2
 8001380:	00db      	lsls	r3, r3, #3
 8001382:	4413      	add	r3, r2
 8001384:	009b      	lsls	r3, r3, #2
 8001386:	440b      	add	r3, r1
 8001388:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800138c:	2200      	movs	r2, #0
 800138e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001390:	7bfa      	ldrb	r2, [r7, #15]
 8001392:	6879      	ldr	r1, [r7, #4]
 8001394:	4613      	mov	r3, r2
 8001396:	00db      	lsls	r3, r3, #3
 8001398:	4413      	add	r3, r2
 800139a:	009b      	lsls	r3, r3, #2
 800139c:	440b      	add	r3, r1
 800139e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80013a2:	2200      	movs	r2, #0
 80013a4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80013a6:	7bfa      	ldrb	r2, [r7, #15]
 80013a8:	6879      	ldr	r1, [r7, #4]
 80013aa:	4613      	mov	r3, r2
 80013ac:	00db      	lsls	r3, r3, #3
 80013ae:	4413      	add	r3, r2
 80013b0:	009b      	lsls	r3, r3, #2
 80013b2:	440b      	add	r3, r1
 80013b4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80013b8:	2200      	movs	r2, #0
 80013ba:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013bc:	7bfb      	ldrb	r3, [r7, #15]
 80013be:	3301      	adds	r3, #1
 80013c0:	73fb      	strb	r3, [r7, #15]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	791b      	ldrb	r3, [r3, #4]
 80013c6:	7bfa      	ldrb	r2, [r7, #15]
 80013c8:	429a      	cmp	r2, r3
 80013ca:	d3b5      	bcc.n	8001338 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6818      	ldr	r0, [r3, #0]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	7c1a      	ldrb	r2, [r3, #16]
 80013d4:	f88d 2000 	strb.w	r2, [sp]
 80013d8:	3304      	adds	r3, #4
 80013da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80013dc:	f002 fd02 	bl	8003de4 <USB_DevInit>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d005      	beq.n	80013f2 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	2202      	movs	r2, #2
 80013ea:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80013ee:	2301      	movs	r3, #1
 80013f0:	e00c      	b.n	800140c <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	2200      	movs	r2, #0
 80013f6:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2201      	movs	r2, #1
 80013fc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4618      	mov	r0, r3
 8001406:	f003 fd4c 	bl	8004ea2 <USB_DevDisconnect>

  return HAL_OK;
 800140a:	2300      	movs	r3, #0
}
 800140c:	4618      	mov	r0, r3
 800140e:	3710      	adds	r7, #16
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}

08001414 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b084      	sub	sp, #16
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001428:	2b01      	cmp	r3, #1
 800142a:	d101      	bne.n	8001430 <HAL_PCD_Start+0x1c>
 800142c:	2302      	movs	r3, #2
 800142e:	e022      	b.n	8001476 <HAL_PCD_Start+0x62>
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2201      	movs	r2, #1
 8001434:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	68db      	ldr	r3, [r3, #12]
 800143c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001440:	2b00      	cmp	r3, #0
 8001442:	d009      	beq.n	8001458 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001448:	2b01      	cmp	r3, #1
 800144a:	d105      	bne.n	8001458 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001450:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4618      	mov	r0, r3
 800145e:	f002 fc53 	bl	8003d08 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4618      	mov	r0, r3
 8001468:	f003 fcfa 	bl	8004e60 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2200      	movs	r2, #0
 8001470:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001474:	2300      	movs	r3, #0
}
 8001476:	4618      	mov	r0, r3
 8001478:	3710      	adds	r7, #16
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}

0800147e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800147e:	b590      	push	{r4, r7, lr}
 8001480:	b08d      	sub	sp, #52	@ 0x34
 8001482:	af00      	add	r7, sp, #0
 8001484:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800148c:	6a3b      	ldr	r3, [r7, #32]
 800148e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4618      	mov	r0, r3
 8001496:	f003 fdb8 	bl	800500a <USB_GetMode>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	f040 848c 	bne.w	8001dba <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4618      	mov	r0, r3
 80014a8:	f003 fd1c 	bl	8004ee4 <USB_ReadInterrupts>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	f000 8482 	beq.w	8001db8 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80014b4:	69fb      	ldr	r3, [r7, #28]
 80014b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80014ba:	689b      	ldr	r3, [r3, #8]
 80014bc:	0a1b      	lsrs	r3, r3, #8
 80014be:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4618      	mov	r0, r3
 80014ce:	f003 fd09 	bl	8004ee4 <USB_ReadInterrupts>
 80014d2:	4603      	mov	r3, r0
 80014d4:	f003 0302 	and.w	r3, r3, #2
 80014d8:	2b02      	cmp	r3, #2
 80014da:	d107      	bne.n	80014ec <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	695a      	ldr	r2, [r3, #20]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f002 0202 	and.w	r2, r2, #2
 80014ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4618      	mov	r0, r3
 80014f2:	f003 fcf7 	bl	8004ee4 <USB_ReadInterrupts>
 80014f6:	4603      	mov	r3, r0
 80014f8:	f003 0310 	and.w	r3, r3, #16
 80014fc:	2b10      	cmp	r3, #16
 80014fe:	d161      	bne.n	80015c4 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	699a      	ldr	r2, [r3, #24]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f022 0210 	bic.w	r2, r2, #16
 800150e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001510:	6a3b      	ldr	r3, [r7, #32]
 8001512:	6a1b      	ldr	r3, [r3, #32]
 8001514:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001516:	69bb      	ldr	r3, [r7, #24]
 8001518:	f003 020f 	and.w	r2, r3, #15
 800151c:	4613      	mov	r3, r2
 800151e:	00db      	lsls	r3, r3, #3
 8001520:	4413      	add	r3, r2
 8001522:	009b      	lsls	r3, r3, #2
 8001524:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001528:	687a      	ldr	r2, [r7, #4]
 800152a:	4413      	add	r3, r2
 800152c:	3304      	adds	r3, #4
 800152e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001530:	69bb      	ldr	r3, [r7, #24]
 8001532:	0c5b      	lsrs	r3, r3, #17
 8001534:	f003 030f 	and.w	r3, r3, #15
 8001538:	2b02      	cmp	r3, #2
 800153a:	d124      	bne.n	8001586 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800153c:	69ba      	ldr	r2, [r7, #24]
 800153e:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8001542:	4013      	ands	r3, r2
 8001544:	2b00      	cmp	r3, #0
 8001546:	d035      	beq.n	80015b4 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800154c:	69bb      	ldr	r3, [r7, #24]
 800154e:	091b      	lsrs	r3, r3, #4
 8001550:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001552:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001556:	b29b      	uxth	r3, r3
 8001558:	461a      	mov	r2, r3
 800155a:	6a38      	ldr	r0, [r7, #32]
 800155c:	f003 fb2e 	bl	8004bbc <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	68da      	ldr	r2, [r3, #12]
 8001564:	69bb      	ldr	r3, [r7, #24]
 8001566:	091b      	lsrs	r3, r3, #4
 8001568:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800156c:	441a      	add	r2, r3
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001572:	697b      	ldr	r3, [r7, #20]
 8001574:	695a      	ldr	r2, [r3, #20]
 8001576:	69bb      	ldr	r3, [r7, #24]
 8001578:	091b      	lsrs	r3, r3, #4
 800157a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800157e:	441a      	add	r2, r3
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	615a      	str	r2, [r3, #20]
 8001584:	e016      	b.n	80015b4 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001586:	69bb      	ldr	r3, [r7, #24]
 8001588:	0c5b      	lsrs	r3, r3, #17
 800158a:	f003 030f 	and.w	r3, r3, #15
 800158e:	2b06      	cmp	r3, #6
 8001590:	d110      	bne.n	80015b4 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001598:	2208      	movs	r2, #8
 800159a:	4619      	mov	r1, r3
 800159c:	6a38      	ldr	r0, [r7, #32]
 800159e:	f003 fb0d 	bl	8004bbc <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	695a      	ldr	r2, [r3, #20]
 80015a6:	69bb      	ldr	r3, [r7, #24]
 80015a8:	091b      	lsrs	r3, r3, #4
 80015aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80015ae:	441a      	add	r2, r3
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	699a      	ldr	r2, [r3, #24]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f042 0210 	orr.w	r2, r2, #16
 80015c2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4618      	mov	r0, r3
 80015ca:	f003 fc8b 	bl	8004ee4 <USB_ReadInterrupts>
 80015ce:	4603      	mov	r3, r0
 80015d0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80015d4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80015d8:	f040 80a7 	bne.w	800172a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80015dc:	2300      	movs	r3, #0
 80015de:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4618      	mov	r0, r3
 80015e6:	f003 fc90 	bl	8004f0a <USB_ReadDevAllOutEpInterrupt>
 80015ea:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80015ec:	e099      	b.n	8001722 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80015ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015f0:	f003 0301 	and.w	r3, r3, #1
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	f000 808e 	beq.w	8001716 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001600:	b2d2      	uxtb	r2, r2
 8001602:	4611      	mov	r1, r2
 8001604:	4618      	mov	r0, r3
 8001606:	f003 fcb4 	bl	8004f72 <USB_ReadDevOutEPInterrupt>
 800160a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800160c:	693b      	ldr	r3, [r7, #16]
 800160e:	f003 0301 	and.w	r3, r3, #1
 8001612:	2b00      	cmp	r3, #0
 8001614:	d00c      	beq.n	8001630 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001618:	015a      	lsls	r2, r3, #5
 800161a:	69fb      	ldr	r3, [r7, #28]
 800161c:	4413      	add	r3, r2
 800161e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001622:	461a      	mov	r2, r3
 8001624:	2301      	movs	r3, #1
 8001626:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001628:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800162a:	6878      	ldr	r0, [r7, #4]
 800162c:	f000 fea4 	bl	8002378 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	f003 0308 	and.w	r3, r3, #8
 8001636:	2b00      	cmp	r3, #0
 8001638:	d00c      	beq.n	8001654 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800163a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800163c:	015a      	lsls	r2, r3, #5
 800163e:	69fb      	ldr	r3, [r7, #28]
 8001640:	4413      	add	r3, r2
 8001642:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001646:	461a      	mov	r2, r3
 8001648:	2308      	movs	r3, #8
 800164a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800164c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800164e:	6878      	ldr	r0, [r7, #4]
 8001650:	f000 ff7a 	bl	8002548 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	f003 0310 	and.w	r3, r3, #16
 800165a:	2b00      	cmp	r3, #0
 800165c:	d008      	beq.n	8001670 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800165e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001660:	015a      	lsls	r2, r3, #5
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	4413      	add	r3, r2
 8001666:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800166a:	461a      	mov	r2, r3
 800166c:	2310      	movs	r3, #16
 800166e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	f003 0302 	and.w	r3, r3, #2
 8001676:	2b00      	cmp	r3, #0
 8001678:	d030      	beq.n	80016dc <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800167a:	6a3b      	ldr	r3, [r7, #32]
 800167c:	695b      	ldr	r3, [r3, #20]
 800167e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001682:	2b80      	cmp	r3, #128	@ 0x80
 8001684:	d109      	bne.n	800169a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	69fa      	ldr	r2, [r7, #28]
 8001690:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001694:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001698:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800169a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800169c:	4613      	mov	r3, r2
 800169e:	00db      	lsls	r3, r3, #3
 80016a0:	4413      	add	r3, r2
 80016a2:	009b      	lsls	r3, r3, #2
 80016a4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80016a8:	687a      	ldr	r2, [r7, #4]
 80016aa:	4413      	add	r3, r2
 80016ac:	3304      	adds	r3, #4
 80016ae:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	78db      	ldrb	r3, [r3, #3]
 80016b4:	2b01      	cmp	r3, #1
 80016b6:	d108      	bne.n	80016ca <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	2200      	movs	r2, #0
 80016bc:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80016be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	4619      	mov	r1, r3
 80016c4:	6878      	ldr	r0, [r7, #4]
 80016c6:	f008 fa49 	bl	8009b5c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80016ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016cc:	015a      	lsls	r2, r3, #5
 80016ce:	69fb      	ldr	r3, [r7, #28]
 80016d0:	4413      	add	r3, r2
 80016d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80016d6:	461a      	mov	r2, r3
 80016d8:	2302      	movs	r3, #2
 80016da:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80016dc:	693b      	ldr	r3, [r7, #16]
 80016de:	f003 0320 	and.w	r3, r3, #32
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d008      	beq.n	80016f8 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80016e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016e8:	015a      	lsls	r2, r3, #5
 80016ea:	69fb      	ldr	r3, [r7, #28]
 80016ec:	4413      	add	r3, r2
 80016ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80016f2:	461a      	mov	r2, r3
 80016f4:	2320      	movs	r3, #32
 80016f6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80016f8:	693b      	ldr	r3, [r7, #16]
 80016fa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d009      	beq.n	8001716 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001704:	015a      	lsls	r2, r3, #5
 8001706:	69fb      	ldr	r3, [r7, #28]
 8001708:	4413      	add	r3, r2
 800170a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800170e:	461a      	mov	r2, r3
 8001710:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001714:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001718:	3301      	adds	r3, #1
 800171a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800171c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800171e:	085b      	lsrs	r3, r3, #1
 8001720:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8001722:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001724:	2b00      	cmp	r3, #0
 8001726:	f47f af62 	bne.w	80015ee <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4618      	mov	r0, r3
 8001730:	f003 fbd8 	bl	8004ee4 <USB_ReadInterrupts>
 8001734:	4603      	mov	r3, r0
 8001736:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800173a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800173e:	f040 80db 	bne.w	80018f8 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4618      	mov	r0, r3
 8001748:	f003 fbf9 	bl	8004f3e <USB_ReadDevAllInEpInterrupt>
 800174c:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800174e:	2300      	movs	r3, #0
 8001750:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8001752:	e0cd      	b.n	80018f0 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001754:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001756:	f003 0301 	and.w	r3, r3, #1
 800175a:	2b00      	cmp	r3, #0
 800175c:	f000 80c2 	beq.w	80018e4 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001766:	b2d2      	uxtb	r2, r2
 8001768:	4611      	mov	r1, r2
 800176a:	4618      	mov	r0, r3
 800176c:	f003 fc1f 	bl	8004fae <USB_ReadDevInEPInterrupt>
 8001770:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001772:	693b      	ldr	r3, [r7, #16]
 8001774:	f003 0301 	and.w	r3, r3, #1
 8001778:	2b00      	cmp	r3, #0
 800177a:	d057      	beq.n	800182c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800177c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800177e:	f003 030f 	and.w	r3, r3, #15
 8001782:	2201      	movs	r2, #1
 8001784:	fa02 f303 	lsl.w	r3, r2, r3
 8001788:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800178a:	69fb      	ldr	r3, [r7, #28]
 800178c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001790:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	43db      	mvns	r3, r3
 8001796:	69f9      	ldr	r1, [r7, #28]
 8001798:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800179c:	4013      	ands	r3, r2
 800179e:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80017a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017a2:	015a      	lsls	r2, r3, #5
 80017a4:	69fb      	ldr	r3, [r7, #28]
 80017a6:	4413      	add	r3, r2
 80017a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80017ac:	461a      	mov	r2, r3
 80017ae:	2301      	movs	r3, #1
 80017b0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	799b      	ldrb	r3, [r3, #6]
 80017b6:	2b01      	cmp	r3, #1
 80017b8:	d132      	bne.n	8001820 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80017ba:	6879      	ldr	r1, [r7, #4]
 80017bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80017be:	4613      	mov	r3, r2
 80017c0:	00db      	lsls	r3, r3, #3
 80017c2:	4413      	add	r3, r2
 80017c4:	009b      	lsls	r3, r3, #2
 80017c6:	440b      	add	r3, r1
 80017c8:	3320      	adds	r3, #32
 80017ca:	6819      	ldr	r1, [r3, #0]
 80017cc:	6878      	ldr	r0, [r7, #4]
 80017ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80017d0:	4613      	mov	r3, r2
 80017d2:	00db      	lsls	r3, r3, #3
 80017d4:	4413      	add	r3, r2
 80017d6:	009b      	lsls	r3, r3, #2
 80017d8:	4403      	add	r3, r0
 80017da:	331c      	adds	r3, #28
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4419      	add	r1, r3
 80017e0:	6878      	ldr	r0, [r7, #4]
 80017e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80017e4:	4613      	mov	r3, r2
 80017e6:	00db      	lsls	r3, r3, #3
 80017e8:	4413      	add	r3, r2
 80017ea:	009b      	lsls	r3, r3, #2
 80017ec:	4403      	add	r3, r0
 80017ee:	3320      	adds	r3, #32
 80017f0:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80017f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d113      	bne.n	8001820 <HAL_PCD_IRQHandler+0x3a2>
 80017f8:	6879      	ldr	r1, [r7, #4]
 80017fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80017fc:	4613      	mov	r3, r2
 80017fe:	00db      	lsls	r3, r3, #3
 8001800:	4413      	add	r3, r2
 8001802:	009b      	lsls	r3, r3, #2
 8001804:	440b      	add	r3, r1
 8001806:	3324      	adds	r3, #36	@ 0x24
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d108      	bne.n	8001820 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6818      	ldr	r0, [r3, #0]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001818:	461a      	mov	r2, r3
 800181a:	2101      	movs	r1, #1
 800181c:	f003 fc26 	bl	800506c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001820:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001822:	b2db      	uxtb	r3, r3
 8001824:	4619      	mov	r1, r3
 8001826:	6878      	ldr	r0, [r7, #4]
 8001828:	f008 f913 	bl	8009a52 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	f003 0308 	and.w	r3, r3, #8
 8001832:	2b00      	cmp	r3, #0
 8001834:	d008      	beq.n	8001848 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001838:	015a      	lsls	r2, r3, #5
 800183a:	69fb      	ldr	r3, [r7, #28]
 800183c:	4413      	add	r3, r2
 800183e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001842:	461a      	mov	r2, r3
 8001844:	2308      	movs	r3, #8
 8001846:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	f003 0310 	and.w	r3, r3, #16
 800184e:	2b00      	cmp	r3, #0
 8001850:	d008      	beq.n	8001864 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001854:	015a      	lsls	r2, r3, #5
 8001856:	69fb      	ldr	r3, [r7, #28]
 8001858:	4413      	add	r3, r2
 800185a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800185e:	461a      	mov	r2, r3
 8001860:	2310      	movs	r3, #16
 8001862:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001864:	693b      	ldr	r3, [r7, #16]
 8001866:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800186a:	2b00      	cmp	r3, #0
 800186c:	d008      	beq.n	8001880 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800186e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001870:	015a      	lsls	r2, r3, #5
 8001872:	69fb      	ldr	r3, [r7, #28]
 8001874:	4413      	add	r3, r2
 8001876:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800187a:	461a      	mov	r2, r3
 800187c:	2340      	movs	r3, #64	@ 0x40
 800187e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	f003 0302 	and.w	r3, r3, #2
 8001886:	2b00      	cmp	r3, #0
 8001888:	d023      	beq.n	80018d2 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800188a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800188c:	6a38      	ldr	r0, [r7, #32]
 800188e:	f002 fc0d 	bl	80040ac <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001892:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001894:	4613      	mov	r3, r2
 8001896:	00db      	lsls	r3, r3, #3
 8001898:	4413      	add	r3, r2
 800189a:	009b      	lsls	r3, r3, #2
 800189c:	3310      	adds	r3, #16
 800189e:	687a      	ldr	r2, [r7, #4]
 80018a0:	4413      	add	r3, r2
 80018a2:	3304      	adds	r3, #4
 80018a4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	78db      	ldrb	r3, [r3, #3]
 80018aa:	2b01      	cmp	r3, #1
 80018ac:	d108      	bne.n	80018c0 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	2200      	movs	r2, #0
 80018b2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80018b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018b6:	b2db      	uxtb	r3, r3
 80018b8:	4619      	mov	r1, r3
 80018ba:	6878      	ldr	r0, [r7, #4]
 80018bc:	f008 f960 	bl	8009b80 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80018c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018c2:	015a      	lsls	r2, r3, #5
 80018c4:	69fb      	ldr	r3, [r7, #28]
 80018c6:	4413      	add	r3, r2
 80018c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80018cc:	461a      	mov	r2, r3
 80018ce:	2302      	movs	r3, #2
 80018d0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d003      	beq.n	80018e4 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80018dc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80018de:	6878      	ldr	r0, [r7, #4]
 80018e0:	f000 fcbd 	bl	800225e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80018e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018e6:	3301      	adds	r3, #1
 80018e8:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80018ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018ec:	085b      	lsrs	r3, r3, #1
 80018ee:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80018f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	f47f af2e 	bne.w	8001754 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4618      	mov	r0, r3
 80018fe:	f003 faf1 	bl	8004ee4 <USB_ReadInterrupts>
 8001902:	4603      	mov	r3, r0
 8001904:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001908:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800190c:	d122      	bne.n	8001954 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800190e:	69fb      	ldr	r3, [r7, #28]
 8001910:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	69fa      	ldr	r2, [r7, #28]
 8001918:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800191c:	f023 0301 	bic.w	r3, r3, #1
 8001920:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8001928:	2b01      	cmp	r3, #1
 800192a:	d108      	bne.n	800193e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2200      	movs	r2, #0
 8001930:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001934:	2100      	movs	r1, #0
 8001936:	6878      	ldr	r0, [r7, #4]
 8001938:	f000 fea4 	bl	8002684 <HAL_PCDEx_LPM_Callback>
 800193c:	e002      	b.n	8001944 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800193e:	6878      	ldr	r0, [r7, #4]
 8001940:	f008 f8fe 	bl	8009b40 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	695a      	ldr	r2, [r3, #20]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8001952:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4618      	mov	r0, r3
 800195a:	f003 fac3 	bl	8004ee4 <USB_ReadInterrupts>
 800195e:	4603      	mov	r3, r0
 8001960:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001964:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001968:	d112      	bne.n	8001990 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800196a:	69fb      	ldr	r3, [r7, #28]
 800196c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	f003 0301 	and.w	r3, r3, #1
 8001976:	2b01      	cmp	r3, #1
 8001978:	d102      	bne.n	8001980 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800197a:	6878      	ldr	r0, [r7, #4]
 800197c:	f008 f8ba 	bl	8009af4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	695a      	ldr	r2, [r3, #20]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800198e:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4618      	mov	r0, r3
 8001996:	f003 faa5 	bl	8004ee4 <USB_ReadInterrupts>
 800199a:	4603      	mov	r3, r0
 800199c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80019a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80019a4:	f040 80b7 	bne.w	8001b16 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80019a8:	69fb      	ldr	r3, [r7, #28]
 80019aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	69fa      	ldr	r2, [r7, #28]
 80019b2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80019b6:	f023 0301 	bic.w	r3, r3, #1
 80019ba:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	2110      	movs	r1, #16
 80019c2:	4618      	mov	r0, r3
 80019c4:	f002 fb72 	bl	80040ac <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019c8:	2300      	movs	r3, #0
 80019ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80019cc:	e046      	b.n	8001a5c <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80019ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019d0:	015a      	lsls	r2, r3, #5
 80019d2:	69fb      	ldr	r3, [r7, #28]
 80019d4:	4413      	add	r3, r2
 80019d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80019da:	461a      	mov	r2, r3
 80019dc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80019e0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80019e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019e4:	015a      	lsls	r2, r3, #5
 80019e6:	69fb      	ldr	r3, [r7, #28]
 80019e8:	4413      	add	r3, r2
 80019ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80019f2:	0151      	lsls	r1, r2, #5
 80019f4:	69fa      	ldr	r2, [r7, #28]
 80019f6:	440a      	add	r2, r1
 80019f8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80019fc:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001a00:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001a02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a04:	015a      	lsls	r2, r3, #5
 8001a06:	69fb      	ldr	r3, [r7, #28]
 8001a08:	4413      	add	r3, r2
 8001a0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001a0e:	461a      	mov	r2, r3
 8001a10:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8001a14:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001a16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a18:	015a      	lsls	r2, r3, #5
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	4413      	add	r3, r2
 8001a1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001a26:	0151      	lsls	r1, r2, #5
 8001a28:	69fa      	ldr	r2, [r7, #28]
 8001a2a:	440a      	add	r2, r1
 8001a2c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8001a30:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001a34:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001a36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a38:	015a      	lsls	r2, r3, #5
 8001a3a:	69fb      	ldr	r3, [r7, #28]
 8001a3c:	4413      	add	r3, r2
 8001a3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001a46:	0151      	lsls	r1, r2, #5
 8001a48:	69fa      	ldr	r2, [r7, #28]
 8001a4a:	440a      	add	r2, r1
 8001a4c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8001a50:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001a54:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a58:	3301      	adds	r3, #1
 8001a5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	791b      	ldrb	r3, [r3, #4]
 8001a60:	461a      	mov	r2, r3
 8001a62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d3b2      	bcc.n	80019ce <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001a68:	69fb      	ldr	r3, [r7, #28]
 8001a6a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001a6e:	69db      	ldr	r3, [r3, #28]
 8001a70:	69fa      	ldr	r2, [r7, #28]
 8001a72:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001a76:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8001a7a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	7bdb      	ldrb	r3, [r3, #15]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d016      	beq.n	8001ab2 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001a84:	69fb      	ldr	r3, [r7, #28]
 8001a86:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001a8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001a8e:	69fa      	ldr	r2, [r7, #28]
 8001a90:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001a94:	f043 030b 	orr.w	r3, r3, #11
 8001a98:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001a9c:	69fb      	ldr	r3, [r7, #28]
 8001a9e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001aa2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aa4:	69fa      	ldr	r2, [r7, #28]
 8001aa6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001aaa:	f043 030b 	orr.w	r3, r3, #11
 8001aae:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ab0:	e015      	b.n	8001ade <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001ab2:	69fb      	ldr	r3, [r7, #28]
 8001ab4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001ab8:	695b      	ldr	r3, [r3, #20]
 8001aba:	69fa      	ldr	r2, [r7, #28]
 8001abc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001ac0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001ac4:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8001ac8:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001ad0:	691b      	ldr	r3, [r3, #16]
 8001ad2:	69fa      	ldr	r2, [r7, #28]
 8001ad4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001ad8:	f043 030b 	orr.w	r3, r3, #11
 8001adc:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	69fa      	ldr	r2, [r7, #28]
 8001ae8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001aec:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8001af0:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6818      	ldr	r0, [r3, #0]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001b00:	461a      	mov	r2, r3
 8001b02:	f003 fab3 	bl	800506c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	695a      	ldr	r2, [r3, #20]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8001b14:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f003 f9e2 	bl	8004ee4 <USB_ReadInterrupts>
 8001b20:	4603      	mov	r3, r0
 8001b22:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001b26:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001b2a:	d123      	bne.n	8001b74 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4618      	mov	r0, r3
 8001b32:	f003 fa78 	bl	8005026 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f002 fb2f 	bl	800419e <USB_GetDevSpeed>
 8001b40:	4603      	mov	r3, r0
 8001b42:	461a      	mov	r2, r3
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681c      	ldr	r4, [r3, #0]
 8001b4c:	f001 fa0a 	bl	8002f64 <HAL_RCC_GetHCLKFreq>
 8001b50:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001b56:	461a      	mov	r2, r3
 8001b58:	4620      	mov	r0, r4
 8001b5a:	f002 f833 	bl	8003bc4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001b5e:	6878      	ldr	r0, [r7, #4]
 8001b60:	f007 ff9f 	bl	8009aa2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	695a      	ldr	r2, [r3, #20]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8001b72:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f003 f9b3 	bl	8004ee4 <USB_ReadInterrupts>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	f003 0308 	and.w	r3, r3, #8
 8001b84:	2b08      	cmp	r3, #8
 8001b86:	d10a      	bne.n	8001b9e <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001b88:	6878      	ldr	r0, [r7, #4]
 8001b8a:	f007 ff7c 	bl	8009a86 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	695a      	ldr	r2, [r3, #20]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f002 0208 	and.w	r2, r2, #8
 8001b9c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f003 f99e 	bl	8004ee4 <USB_ReadInterrupts>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001bae:	2b80      	cmp	r3, #128	@ 0x80
 8001bb0:	d123      	bne.n	8001bfa <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001bb2:	6a3b      	ldr	r3, [r7, #32]
 8001bb4:	699b      	ldr	r3, [r3, #24]
 8001bb6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001bba:	6a3b      	ldr	r3, [r7, #32]
 8001bbc:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	627b      	str	r3, [r7, #36]	@ 0x24
 8001bc2:	e014      	b.n	8001bee <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001bc4:	6879      	ldr	r1, [r7, #4]
 8001bc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001bc8:	4613      	mov	r3, r2
 8001bca:	00db      	lsls	r3, r3, #3
 8001bcc:	4413      	add	r3, r2
 8001bce:	009b      	lsls	r3, r3, #2
 8001bd0:	440b      	add	r3, r1
 8001bd2:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	2b01      	cmp	r3, #1
 8001bda:	d105      	bne.n	8001be8 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001bdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bde:	b2db      	uxtb	r3, r3
 8001be0:	4619      	mov	r1, r3
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	f000 fb0a 	bl	80021fc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001be8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bea:	3301      	adds	r3, #1
 8001bec:	627b      	str	r3, [r7, #36]	@ 0x24
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	791b      	ldrb	r3, [r3, #4]
 8001bf2:	461a      	mov	r2, r3
 8001bf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d3e4      	bcc.n	8001bc4 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f003 f970 	bl	8004ee4 <USB_ReadInterrupts>
 8001c04:	4603      	mov	r3, r0
 8001c06:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c0a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001c0e:	d13c      	bne.n	8001c8a <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001c10:	2301      	movs	r3, #1
 8001c12:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c14:	e02b      	b.n	8001c6e <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c18:	015a      	lsls	r2, r3, #5
 8001c1a:	69fb      	ldr	r3, [r7, #28]
 8001c1c:	4413      	add	r3, r2
 8001c1e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001c26:	6879      	ldr	r1, [r7, #4]
 8001c28:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c2a:	4613      	mov	r3, r2
 8001c2c:	00db      	lsls	r3, r3, #3
 8001c2e:	4413      	add	r3, r2
 8001c30:	009b      	lsls	r3, r3, #2
 8001c32:	440b      	add	r3, r1
 8001c34:	3318      	adds	r3, #24
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d115      	bne.n	8001c68 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001c3c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	da12      	bge.n	8001c68 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001c42:	6879      	ldr	r1, [r7, #4]
 8001c44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c46:	4613      	mov	r3, r2
 8001c48:	00db      	lsls	r3, r3, #3
 8001c4a:	4413      	add	r3, r2
 8001c4c:	009b      	lsls	r3, r3, #2
 8001c4e:	440b      	add	r3, r1
 8001c50:	3317      	adds	r3, #23
 8001c52:	2201      	movs	r2, #1
 8001c54:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	4619      	mov	r1, r3
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	f000 faca 	bl	80021fc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001c68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c6a:	3301      	adds	r3, #1
 8001c6c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	791b      	ldrb	r3, [r3, #4]
 8001c72:	461a      	mov	r2, r3
 8001c74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d3cd      	bcc.n	8001c16 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	695a      	ldr	r2, [r3, #20]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8001c88:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f003 f928 	bl	8004ee4 <USB_ReadInterrupts>
 8001c94:	4603      	mov	r3, r0
 8001c96:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c9a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001c9e:	d156      	bne.n	8001d4e <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ca4:	e045      	b.n	8001d32 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ca8:	015a      	lsls	r2, r3, #5
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	4413      	add	r3, r2
 8001cae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001cb6:	6879      	ldr	r1, [r7, #4]
 8001cb8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001cba:	4613      	mov	r3, r2
 8001cbc:	00db      	lsls	r3, r3, #3
 8001cbe:	4413      	add	r3, r2
 8001cc0:	009b      	lsls	r3, r3, #2
 8001cc2:	440b      	add	r3, r1
 8001cc4:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001cc8:	781b      	ldrb	r3, [r3, #0]
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	d12e      	bne.n	8001d2c <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001cce:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	da2b      	bge.n	8001d2c <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001cd4:	69bb      	ldr	r3, [r7, #24]
 8001cd6:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8001ce0:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d121      	bne.n	8001d2c <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001ce8:	6879      	ldr	r1, [r7, #4]
 8001cea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001cec:	4613      	mov	r3, r2
 8001cee:	00db      	lsls	r3, r3, #3
 8001cf0:	4413      	add	r3, r2
 8001cf2:	009b      	lsls	r3, r3, #2
 8001cf4:	440b      	add	r3, r1
 8001cf6:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001cfe:	6a3b      	ldr	r3, [r7, #32]
 8001d00:	699b      	ldr	r3, [r3, #24]
 8001d02:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001d06:	6a3b      	ldr	r3, [r7, #32]
 8001d08:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001d0a:	6a3b      	ldr	r3, [r7, #32]
 8001d0c:	695b      	ldr	r3, [r3, #20]
 8001d0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d10a      	bne.n	8001d2c <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001d16:	69fb      	ldr	r3, [r7, #28]
 8001d18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	69fa      	ldr	r2, [r7, #28]
 8001d20:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001d24:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001d28:	6053      	str	r3, [r2, #4]
            break;
 8001d2a:	e008      	b.n	8001d3e <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001d2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d2e:	3301      	adds	r3, #1
 8001d30:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	791b      	ldrb	r3, [r3, #4]
 8001d36:	461a      	mov	r2, r3
 8001d38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d3b3      	bcc.n	8001ca6 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	695a      	ldr	r2, [r3, #20]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8001d4c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4618      	mov	r0, r3
 8001d54:	f003 f8c6 	bl	8004ee4 <USB_ReadInterrupts>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001d5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d62:	d10a      	bne.n	8001d7a <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001d64:	6878      	ldr	r0, [r7, #4]
 8001d66:	f007 ff1d 	bl	8009ba4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	695a      	ldr	r2, [r3, #20]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8001d78:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f003 f8b0 	bl	8004ee4 <USB_ReadInterrupts>
 8001d84:	4603      	mov	r3, r0
 8001d86:	f003 0304 	and.w	r3, r3, #4
 8001d8a:	2b04      	cmp	r3, #4
 8001d8c:	d115      	bne.n	8001dba <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001d96:	69bb      	ldr	r3, [r7, #24]
 8001d98:	f003 0304 	and.w	r3, r3, #4
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d002      	beq.n	8001da6 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001da0:	6878      	ldr	r0, [r7, #4]
 8001da2:	f007 ff0d 	bl	8009bc0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	6859      	ldr	r1, [r3, #4]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	69ba      	ldr	r2, [r7, #24]
 8001db2:	430a      	orrs	r2, r1
 8001db4:	605a      	str	r2, [r3, #4]
 8001db6:	e000      	b.n	8001dba <HAL_PCD_IRQHandler+0x93c>
      return;
 8001db8:	bf00      	nop
    }
  }
}
 8001dba:	3734      	adds	r7, #52	@ 0x34
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd90      	pop	{r4, r7, pc}

08001dc0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b082      	sub	sp, #8
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
 8001dc8:	460b      	mov	r3, r1
 8001dca:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001dd2:	2b01      	cmp	r3, #1
 8001dd4:	d101      	bne.n	8001dda <HAL_PCD_SetAddress+0x1a>
 8001dd6:	2302      	movs	r3, #2
 8001dd8:	e012      	b.n	8001e00 <HAL_PCD_SetAddress+0x40>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2201      	movs	r2, #1
 8001dde:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	78fa      	ldrb	r2, [r7, #3]
 8001de6:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	78fa      	ldrb	r2, [r7, #3]
 8001dee:	4611      	mov	r1, r2
 8001df0:	4618      	mov	r0, r3
 8001df2:	f003 f80f 	bl	8004e14 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2200      	movs	r2, #0
 8001dfa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001dfe:	2300      	movs	r3, #0
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	3708      	adds	r7, #8
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}

08001e08 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b084      	sub	sp, #16
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
 8001e10:	4608      	mov	r0, r1
 8001e12:	4611      	mov	r1, r2
 8001e14:	461a      	mov	r2, r3
 8001e16:	4603      	mov	r3, r0
 8001e18:	70fb      	strb	r3, [r7, #3]
 8001e1a:	460b      	mov	r3, r1
 8001e1c:	803b      	strh	r3, [r7, #0]
 8001e1e:	4613      	mov	r3, r2
 8001e20:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8001e22:	2300      	movs	r3, #0
 8001e24:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001e26:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	da0f      	bge.n	8001e4e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e2e:	78fb      	ldrb	r3, [r7, #3]
 8001e30:	f003 020f 	and.w	r2, r3, #15
 8001e34:	4613      	mov	r3, r2
 8001e36:	00db      	lsls	r3, r3, #3
 8001e38:	4413      	add	r3, r2
 8001e3a:	009b      	lsls	r3, r3, #2
 8001e3c:	3310      	adds	r3, #16
 8001e3e:	687a      	ldr	r2, [r7, #4]
 8001e40:	4413      	add	r3, r2
 8001e42:	3304      	adds	r3, #4
 8001e44:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	2201      	movs	r2, #1
 8001e4a:	705a      	strb	r2, [r3, #1]
 8001e4c:	e00f      	b.n	8001e6e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e4e:	78fb      	ldrb	r3, [r7, #3]
 8001e50:	f003 020f 	and.w	r2, r3, #15
 8001e54:	4613      	mov	r3, r2
 8001e56:	00db      	lsls	r3, r3, #3
 8001e58:	4413      	add	r3, r2
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001e60:	687a      	ldr	r2, [r7, #4]
 8001e62:	4413      	add	r3, r2
 8001e64:	3304      	adds	r3, #4
 8001e66:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001e6e:	78fb      	ldrb	r3, [r7, #3]
 8001e70:	f003 030f 	and.w	r3, r3, #15
 8001e74:	b2da      	uxtb	r2, r3
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8001e7a:	883b      	ldrh	r3, [r7, #0]
 8001e7c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	78ba      	ldrb	r2, [r7, #2]
 8001e88:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	785b      	ldrb	r3, [r3, #1]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d004      	beq.n	8001e9c <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	781b      	ldrb	r3, [r3, #0]
 8001e96:	461a      	mov	r2, r3
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001e9c:	78bb      	ldrb	r3, [r7, #2]
 8001e9e:	2b02      	cmp	r3, #2
 8001ea0:	d102      	bne.n	8001ea8 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001eae:	2b01      	cmp	r3, #1
 8001eb0:	d101      	bne.n	8001eb6 <HAL_PCD_EP_Open+0xae>
 8001eb2:	2302      	movs	r3, #2
 8001eb4:	e00e      	b.n	8001ed4 <HAL_PCD_EP_Open+0xcc>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2201      	movs	r2, #1
 8001eba:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	68f9      	ldr	r1, [r7, #12]
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f002 f98f 	bl	80041e8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2200      	movs	r2, #0
 8001ece:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8001ed2:	7afb      	ldrb	r3, [r7, #11]
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	3710      	adds	r7, #16
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}

08001edc <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b084      	sub	sp, #16
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
 8001ee4:	460b      	mov	r3, r1
 8001ee6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001ee8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	da0f      	bge.n	8001f10 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ef0:	78fb      	ldrb	r3, [r7, #3]
 8001ef2:	f003 020f 	and.w	r2, r3, #15
 8001ef6:	4613      	mov	r3, r2
 8001ef8:	00db      	lsls	r3, r3, #3
 8001efa:	4413      	add	r3, r2
 8001efc:	009b      	lsls	r3, r3, #2
 8001efe:	3310      	adds	r3, #16
 8001f00:	687a      	ldr	r2, [r7, #4]
 8001f02:	4413      	add	r3, r2
 8001f04:	3304      	adds	r3, #4
 8001f06:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	705a      	strb	r2, [r3, #1]
 8001f0e:	e00f      	b.n	8001f30 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f10:	78fb      	ldrb	r3, [r7, #3]
 8001f12:	f003 020f 	and.w	r2, r3, #15
 8001f16:	4613      	mov	r3, r2
 8001f18:	00db      	lsls	r3, r3, #3
 8001f1a:	4413      	add	r3, r2
 8001f1c:	009b      	lsls	r3, r3, #2
 8001f1e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001f22:	687a      	ldr	r2, [r7, #4]
 8001f24:	4413      	add	r3, r2
 8001f26:	3304      	adds	r3, #4
 8001f28:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f30:	78fb      	ldrb	r3, [r7, #3]
 8001f32:	f003 030f 	and.w	r3, r3, #15
 8001f36:	b2da      	uxtb	r2, r3
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001f42:	2b01      	cmp	r3, #1
 8001f44:	d101      	bne.n	8001f4a <HAL_PCD_EP_Close+0x6e>
 8001f46:	2302      	movs	r3, #2
 8001f48:	e00e      	b.n	8001f68 <HAL_PCD_EP_Close+0x8c>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	68f9      	ldr	r1, [r7, #12]
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f002 f9cd 	bl	80042f8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2200      	movs	r2, #0
 8001f62:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8001f66:	2300      	movs	r3, #0
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	3710      	adds	r7, #16
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}

08001f70 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b086      	sub	sp, #24
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	60f8      	str	r0, [r7, #12]
 8001f78:	607a      	str	r2, [r7, #4]
 8001f7a:	603b      	str	r3, [r7, #0]
 8001f7c:	460b      	mov	r3, r1
 8001f7e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f80:	7afb      	ldrb	r3, [r7, #11]
 8001f82:	f003 020f 	and.w	r2, r3, #15
 8001f86:	4613      	mov	r3, r2
 8001f88:	00db      	lsls	r3, r3, #3
 8001f8a:	4413      	add	r3, r2
 8001f8c:	009b      	lsls	r3, r3, #2
 8001f8e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001f92:	68fa      	ldr	r2, [r7, #12]
 8001f94:	4413      	add	r3, r2
 8001f96:	3304      	adds	r3, #4
 8001f98:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	687a      	ldr	r2, [r7, #4]
 8001f9e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	683a      	ldr	r2, [r7, #0]
 8001fa4:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	2200      	movs	r2, #0
 8001fb0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001fb2:	7afb      	ldrb	r3, [r7, #11]
 8001fb4:	f003 030f 	and.w	r3, r3, #15
 8001fb8:	b2da      	uxtb	r2, r3
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	799b      	ldrb	r3, [r3, #6]
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d102      	bne.n	8001fcc <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001fc6:	687a      	ldr	r2, [r7, #4]
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	6818      	ldr	r0, [r3, #0]
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	799b      	ldrb	r3, [r3, #6]
 8001fd4:	461a      	mov	r2, r3
 8001fd6:	6979      	ldr	r1, [r7, #20]
 8001fd8:	f002 fa6a 	bl	80044b0 <USB_EPStartXfer>

  return HAL_OK;
 8001fdc:	2300      	movs	r3, #0
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3718      	adds	r7, #24
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}

08001fe6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8001fe6:	b480      	push	{r7}
 8001fe8:	b083      	sub	sp, #12
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	6078      	str	r0, [r7, #4]
 8001fee:	460b      	mov	r3, r1
 8001ff0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001ff2:	78fb      	ldrb	r3, [r7, #3]
 8001ff4:	f003 020f 	and.w	r2, r3, #15
 8001ff8:	6879      	ldr	r1, [r7, #4]
 8001ffa:	4613      	mov	r3, r2
 8001ffc:	00db      	lsls	r3, r3, #3
 8001ffe:	4413      	add	r3, r2
 8002000:	009b      	lsls	r3, r3, #2
 8002002:	440b      	add	r3, r1
 8002004:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8002008:	681b      	ldr	r3, [r3, #0]
}
 800200a:	4618      	mov	r0, r3
 800200c:	370c      	adds	r7, #12
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr

08002016 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002016:	b580      	push	{r7, lr}
 8002018:	b086      	sub	sp, #24
 800201a:	af00      	add	r7, sp, #0
 800201c:	60f8      	str	r0, [r7, #12]
 800201e:	607a      	str	r2, [r7, #4]
 8002020:	603b      	str	r3, [r7, #0]
 8002022:	460b      	mov	r3, r1
 8002024:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002026:	7afb      	ldrb	r3, [r7, #11]
 8002028:	f003 020f 	and.w	r2, r3, #15
 800202c:	4613      	mov	r3, r2
 800202e:	00db      	lsls	r3, r3, #3
 8002030:	4413      	add	r3, r2
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	3310      	adds	r3, #16
 8002036:	68fa      	ldr	r2, [r7, #12]
 8002038:	4413      	add	r3, r2
 800203a:	3304      	adds	r3, #4
 800203c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	687a      	ldr	r2, [r7, #4]
 8002042:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	683a      	ldr	r2, [r7, #0]
 8002048:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	2200      	movs	r2, #0
 800204e:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	2201      	movs	r2, #1
 8002054:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002056:	7afb      	ldrb	r3, [r7, #11]
 8002058:	f003 030f 	and.w	r3, r3, #15
 800205c:	b2da      	uxtb	r2, r3
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	799b      	ldrb	r3, [r3, #6]
 8002066:	2b01      	cmp	r3, #1
 8002068:	d102      	bne.n	8002070 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800206a:	687a      	ldr	r2, [r7, #4]
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	6818      	ldr	r0, [r3, #0]
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	799b      	ldrb	r3, [r3, #6]
 8002078:	461a      	mov	r2, r3
 800207a:	6979      	ldr	r1, [r7, #20]
 800207c:	f002 fa18 	bl	80044b0 <USB_EPStartXfer>

  return HAL_OK;
 8002080:	2300      	movs	r3, #0
}
 8002082:	4618      	mov	r0, r3
 8002084:	3718      	adds	r7, #24
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}

0800208a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800208a:	b580      	push	{r7, lr}
 800208c:	b084      	sub	sp, #16
 800208e:	af00      	add	r7, sp, #0
 8002090:	6078      	str	r0, [r7, #4]
 8002092:	460b      	mov	r3, r1
 8002094:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002096:	78fb      	ldrb	r3, [r7, #3]
 8002098:	f003 030f 	and.w	r3, r3, #15
 800209c:	687a      	ldr	r2, [r7, #4]
 800209e:	7912      	ldrb	r2, [r2, #4]
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d901      	bls.n	80020a8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80020a4:	2301      	movs	r3, #1
 80020a6:	e04f      	b.n	8002148 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80020a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	da0f      	bge.n	80020d0 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020b0:	78fb      	ldrb	r3, [r7, #3]
 80020b2:	f003 020f 	and.w	r2, r3, #15
 80020b6:	4613      	mov	r3, r2
 80020b8:	00db      	lsls	r3, r3, #3
 80020ba:	4413      	add	r3, r2
 80020bc:	009b      	lsls	r3, r3, #2
 80020be:	3310      	adds	r3, #16
 80020c0:	687a      	ldr	r2, [r7, #4]
 80020c2:	4413      	add	r3, r2
 80020c4:	3304      	adds	r3, #4
 80020c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	2201      	movs	r2, #1
 80020cc:	705a      	strb	r2, [r3, #1]
 80020ce:	e00d      	b.n	80020ec <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80020d0:	78fa      	ldrb	r2, [r7, #3]
 80020d2:	4613      	mov	r3, r2
 80020d4:	00db      	lsls	r3, r3, #3
 80020d6:	4413      	add	r3, r2
 80020d8:	009b      	lsls	r3, r3, #2
 80020da:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80020de:	687a      	ldr	r2, [r7, #4]
 80020e0:	4413      	add	r3, r2
 80020e2:	3304      	adds	r3, #4
 80020e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	2200      	movs	r2, #0
 80020ea:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	2201      	movs	r2, #1
 80020f0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80020f2:	78fb      	ldrb	r3, [r7, #3]
 80020f4:	f003 030f 	and.w	r3, r3, #15
 80020f8:	b2da      	uxtb	r2, r3
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002104:	2b01      	cmp	r3, #1
 8002106:	d101      	bne.n	800210c <HAL_PCD_EP_SetStall+0x82>
 8002108:	2302      	movs	r3, #2
 800210a:	e01d      	b.n	8002148 <HAL_PCD_EP_SetStall+0xbe>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2201      	movs	r2, #1
 8002110:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	68f9      	ldr	r1, [r7, #12]
 800211a:	4618      	mov	r0, r3
 800211c:	f002 fda6 	bl	8004c6c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002120:	78fb      	ldrb	r3, [r7, #3]
 8002122:	f003 030f 	and.w	r3, r3, #15
 8002126:	2b00      	cmp	r3, #0
 8002128:	d109      	bne.n	800213e <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6818      	ldr	r0, [r3, #0]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	7999      	ldrb	r1, [r3, #6]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002138:	461a      	mov	r2, r3
 800213a:	f002 ff97 	bl	800506c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2200      	movs	r2, #0
 8002142:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002146:	2300      	movs	r3, #0
}
 8002148:	4618      	mov	r0, r3
 800214a:	3710      	adds	r7, #16
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}

08002150 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b084      	sub	sp, #16
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
 8002158:	460b      	mov	r3, r1
 800215a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800215c:	78fb      	ldrb	r3, [r7, #3]
 800215e:	f003 030f 	and.w	r3, r3, #15
 8002162:	687a      	ldr	r2, [r7, #4]
 8002164:	7912      	ldrb	r2, [r2, #4]
 8002166:	4293      	cmp	r3, r2
 8002168:	d901      	bls.n	800216e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e042      	b.n	80021f4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800216e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002172:	2b00      	cmp	r3, #0
 8002174:	da0f      	bge.n	8002196 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002176:	78fb      	ldrb	r3, [r7, #3]
 8002178:	f003 020f 	and.w	r2, r3, #15
 800217c:	4613      	mov	r3, r2
 800217e:	00db      	lsls	r3, r3, #3
 8002180:	4413      	add	r3, r2
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	3310      	adds	r3, #16
 8002186:	687a      	ldr	r2, [r7, #4]
 8002188:	4413      	add	r3, r2
 800218a:	3304      	adds	r3, #4
 800218c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	2201      	movs	r2, #1
 8002192:	705a      	strb	r2, [r3, #1]
 8002194:	e00f      	b.n	80021b6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002196:	78fb      	ldrb	r3, [r7, #3]
 8002198:	f003 020f 	and.w	r2, r3, #15
 800219c:	4613      	mov	r3, r2
 800219e:	00db      	lsls	r3, r3, #3
 80021a0:	4413      	add	r3, r2
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80021a8:	687a      	ldr	r2, [r7, #4]
 80021aa:	4413      	add	r3, r2
 80021ac:	3304      	adds	r3, #4
 80021ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	2200      	movs	r2, #0
 80021b4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	2200      	movs	r2, #0
 80021ba:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80021bc:	78fb      	ldrb	r3, [r7, #3]
 80021be:	f003 030f 	and.w	r3, r3, #15
 80021c2:	b2da      	uxtb	r2, r3
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d101      	bne.n	80021d6 <HAL_PCD_EP_ClrStall+0x86>
 80021d2:	2302      	movs	r3, #2
 80021d4:	e00e      	b.n	80021f4 <HAL_PCD_EP_ClrStall+0xa4>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2201      	movs	r2, #1
 80021da:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	68f9      	ldr	r1, [r7, #12]
 80021e4:	4618      	mov	r0, r3
 80021e6:	f002 fdaf 	bl	8004d48 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2200      	movs	r2, #0
 80021ee:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80021f2:	2300      	movs	r3, #0
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	3710      	adds	r7, #16
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}

080021fc <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b084      	sub	sp, #16
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
 8002204:	460b      	mov	r3, r1
 8002206:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002208:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800220c:	2b00      	cmp	r3, #0
 800220e:	da0c      	bge.n	800222a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002210:	78fb      	ldrb	r3, [r7, #3]
 8002212:	f003 020f 	and.w	r2, r3, #15
 8002216:	4613      	mov	r3, r2
 8002218:	00db      	lsls	r3, r3, #3
 800221a:	4413      	add	r3, r2
 800221c:	009b      	lsls	r3, r3, #2
 800221e:	3310      	adds	r3, #16
 8002220:	687a      	ldr	r2, [r7, #4]
 8002222:	4413      	add	r3, r2
 8002224:	3304      	adds	r3, #4
 8002226:	60fb      	str	r3, [r7, #12]
 8002228:	e00c      	b.n	8002244 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800222a:	78fb      	ldrb	r3, [r7, #3]
 800222c:	f003 020f 	and.w	r2, r3, #15
 8002230:	4613      	mov	r3, r2
 8002232:	00db      	lsls	r3, r3, #3
 8002234:	4413      	add	r3, r2
 8002236:	009b      	lsls	r3, r3, #2
 8002238:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800223c:	687a      	ldr	r2, [r7, #4]
 800223e:	4413      	add	r3, r2
 8002240:	3304      	adds	r3, #4
 8002242:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	68f9      	ldr	r1, [r7, #12]
 800224a:	4618      	mov	r0, r3
 800224c:	f002 fbce 	bl	80049ec <USB_EPStopXfer>
 8002250:	4603      	mov	r3, r0
 8002252:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002254:	7afb      	ldrb	r3, [r7, #11]
}
 8002256:	4618      	mov	r0, r3
 8002258:	3710      	adds	r7, #16
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}

0800225e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800225e:	b580      	push	{r7, lr}
 8002260:	b08a      	sub	sp, #40	@ 0x28
 8002262:	af02      	add	r7, sp, #8
 8002264:	6078      	str	r0, [r7, #4]
 8002266:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002272:	683a      	ldr	r2, [r7, #0]
 8002274:	4613      	mov	r3, r2
 8002276:	00db      	lsls	r3, r3, #3
 8002278:	4413      	add	r3, r2
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	3310      	adds	r3, #16
 800227e:	687a      	ldr	r2, [r7, #4]
 8002280:	4413      	add	r3, r2
 8002282:	3304      	adds	r3, #4
 8002284:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	695a      	ldr	r2, [r3, #20]
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	691b      	ldr	r3, [r3, #16]
 800228e:	429a      	cmp	r2, r3
 8002290:	d901      	bls.n	8002296 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e06b      	b.n	800236e <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	691a      	ldr	r2, [r3, #16]
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	695b      	ldr	r3, [r3, #20]
 800229e:	1ad3      	subs	r3, r2, r3
 80022a0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	69fa      	ldr	r2, [r7, #28]
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d902      	bls.n	80022b2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80022b2:	69fb      	ldr	r3, [r7, #28]
 80022b4:	3303      	adds	r3, #3
 80022b6:	089b      	lsrs	r3, r3, #2
 80022b8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80022ba:	e02a      	b.n	8002312 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	691a      	ldr	r2, [r3, #16]
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	695b      	ldr	r3, [r3, #20]
 80022c4:	1ad3      	subs	r3, r2, r3
 80022c6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	69fa      	ldr	r2, [r7, #28]
 80022ce:	429a      	cmp	r2, r3
 80022d0:	d902      	bls.n	80022d8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80022d8:	69fb      	ldr	r3, [r7, #28]
 80022da:	3303      	adds	r3, #3
 80022dc:	089b      	lsrs	r3, r3, #2
 80022de:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	68d9      	ldr	r1, [r3, #12]
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	b2da      	uxtb	r2, r3
 80022e8:	69fb      	ldr	r3, [r7, #28]
 80022ea:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80022f0:	9300      	str	r3, [sp, #0]
 80022f2:	4603      	mov	r3, r0
 80022f4:	6978      	ldr	r0, [r7, #20]
 80022f6:	f002 fc23 	bl	8004b40 <USB_WritePacket>

    ep->xfer_buff  += len;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	68da      	ldr	r2, [r3, #12]
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	441a      	add	r2, r3
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	695a      	ldr	r2, [r3, #20]
 800230a:	69fb      	ldr	r3, [r7, #28]
 800230c:	441a      	add	r2, r3
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	015a      	lsls	r2, r3, #5
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	4413      	add	r3, r2
 800231a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800231e:	699b      	ldr	r3, [r3, #24]
 8002320:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002322:	69ba      	ldr	r2, [r7, #24]
 8002324:	429a      	cmp	r2, r3
 8002326:	d809      	bhi.n	800233c <PCD_WriteEmptyTxFifo+0xde>
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	695a      	ldr	r2, [r3, #20]
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002330:	429a      	cmp	r2, r3
 8002332:	d203      	bcs.n	800233c <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	691b      	ldr	r3, [r3, #16]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d1bf      	bne.n	80022bc <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	691a      	ldr	r2, [r3, #16]
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	695b      	ldr	r3, [r3, #20]
 8002344:	429a      	cmp	r2, r3
 8002346:	d811      	bhi.n	800236c <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	f003 030f 	and.w	r3, r3, #15
 800234e:	2201      	movs	r2, #1
 8002350:	fa02 f303 	lsl.w	r3, r2, r3
 8002354:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800235c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800235e:	68bb      	ldr	r3, [r7, #8]
 8002360:	43db      	mvns	r3, r3
 8002362:	6939      	ldr	r1, [r7, #16]
 8002364:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002368:	4013      	ands	r3, r2
 800236a:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800236c:	2300      	movs	r3, #0
}
 800236e:	4618      	mov	r0, r3
 8002370:	3720      	adds	r7, #32
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
	...

08002378 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b088      	sub	sp, #32
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
 8002380:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002388:	69fb      	ldr	r3, [r7, #28]
 800238a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800238c:	69fb      	ldr	r3, [r7, #28]
 800238e:	333c      	adds	r3, #60	@ 0x3c
 8002390:	3304      	adds	r3, #4
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	015a      	lsls	r2, r3, #5
 800239a:	69bb      	ldr	r3, [r7, #24]
 800239c:	4413      	add	r3, r2
 800239e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	799b      	ldrb	r3, [r3, #6]
 80023aa:	2b01      	cmp	r3, #1
 80023ac:	d17b      	bne.n	80024a6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	f003 0308 	and.w	r3, r3, #8
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d015      	beq.n	80023e4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	4a61      	ldr	r2, [pc, #388]	@ (8002540 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	f240 80b9 	bls.w	8002534 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	f000 80b3 	beq.w	8002534 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	015a      	lsls	r2, r3, #5
 80023d2:	69bb      	ldr	r3, [r7, #24]
 80023d4:	4413      	add	r3, r2
 80023d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80023da:	461a      	mov	r2, r3
 80023dc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80023e0:	6093      	str	r3, [r2, #8]
 80023e2:	e0a7      	b.n	8002534 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	f003 0320 	and.w	r3, r3, #32
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d009      	beq.n	8002402 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	015a      	lsls	r2, r3, #5
 80023f2:	69bb      	ldr	r3, [r7, #24]
 80023f4:	4413      	add	r3, r2
 80023f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80023fa:	461a      	mov	r2, r3
 80023fc:	2320      	movs	r3, #32
 80023fe:	6093      	str	r3, [r2, #8]
 8002400:	e098      	b.n	8002534 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002408:	2b00      	cmp	r3, #0
 800240a:	f040 8093 	bne.w	8002534 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	4a4b      	ldr	r2, [pc, #300]	@ (8002540 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d90f      	bls.n	8002436 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800241c:	2b00      	cmp	r3, #0
 800241e:	d00a      	beq.n	8002436 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	015a      	lsls	r2, r3, #5
 8002424:	69bb      	ldr	r3, [r7, #24]
 8002426:	4413      	add	r3, r2
 8002428:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800242c:	461a      	mov	r2, r3
 800242e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002432:	6093      	str	r3, [r2, #8]
 8002434:	e07e      	b.n	8002534 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002436:	683a      	ldr	r2, [r7, #0]
 8002438:	4613      	mov	r3, r2
 800243a:	00db      	lsls	r3, r3, #3
 800243c:	4413      	add	r3, r2
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002444:	687a      	ldr	r2, [r7, #4]
 8002446:	4413      	add	r3, r2
 8002448:	3304      	adds	r3, #4
 800244a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	6a1a      	ldr	r2, [r3, #32]
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	0159      	lsls	r1, r3, #5
 8002454:	69bb      	ldr	r3, [r7, #24]
 8002456:	440b      	add	r3, r1
 8002458:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800245c:	691b      	ldr	r3, [r3, #16]
 800245e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002462:	1ad2      	subs	r2, r2, r3
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d114      	bne.n	8002498 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	691b      	ldr	r3, [r3, #16]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d109      	bne.n	800248a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6818      	ldr	r0, [r3, #0]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002480:	461a      	mov	r2, r3
 8002482:	2101      	movs	r1, #1
 8002484:	f002 fdf2 	bl	800506c <USB_EP0_OutStart>
 8002488:	e006      	b.n	8002498 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	68da      	ldr	r2, [r3, #12]
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	695b      	ldr	r3, [r3, #20]
 8002492:	441a      	add	r2, r3
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	b2db      	uxtb	r3, r3
 800249c:	4619      	mov	r1, r3
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	f007 fabc 	bl	8009a1c <HAL_PCD_DataOutStageCallback>
 80024a4:	e046      	b.n	8002534 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	4a26      	ldr	r2, [pc, #152]	@ (8002544 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d124      	bne.n	80024f8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d00a      	beq.n	80024ce <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	015a      	lsls	r2, r3, #5
 80024bc:	69bb      	ldr	r3, [r7, #24]
 80024be:	4413      	add	r3, r2
 80024c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80024c4:	461a      	mov	r2, r3
 80024c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80024ca:	6093      	str	r3, [r2, #8]
 80024cc:	e032      	b.n	8002534 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	f003 0320 	and.w	r3, r3, #32
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d008      	beq.n	80024ea <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	015a      	lsls	r2, r3, #5
 80024dc:	69bb      	ldr	r3, [r7, #24]
 80024de:	4413      	add	r3, r2
 80024e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80024e4:	461a      	mov	r2, r3
 80024e6:	2320      	movs	r3, #32
 80024e8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	4619      	mov	r1, r3
 80024f0:	6878      	ldr	r0, [r7, #4]
 80024f2:	f007 fa93 	bl	8009a1c <HAL_PCD_DataOutStageCallback>
 80024f6:	e01d      	b.n	8002534 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d114      	bne.n	8002528 <PCD_EP_OutXfrComplete_int+0x1b0>
 80024fe:	6879      	ldr	r1, [r7, #4]
 8002500:	683a      	ldr	r2, [r7, #0]
 8002502:	4613      	mov	r3, r2
 8002504:	00db      	lsls	r3, r3, #3
 8002506:	4413      	add	r3, r2
 8002508:	009b      	lsls	r3, r3, #2
 800250a:	440b      	add	r3, r1
 800250c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d108      	bne.n	8002528 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6818      	ldr	r0, [r3, #0]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002520:	461a      	mov	r2, r3
 8002522:	2100      	movs	r1, #0
 8002524:	f002 fda2 	bl	800506c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	b2db      	uxtb	r3, r3
 800252c:	4619      	mov	r1, r3
 800252e:	6878      	ldr	r0, [r7, #4]
 8002530:	f007 fa74 	bl	8009a1c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002534:	2300      	movs	r3, #0
}
 8002536:	4618      	mov	r0, r3
 8002538:	3720      	adds	r7, #32
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	4f54300a 	.word	0x4f54300a
 8002544:	4f54310a 	.word	0x4f54310a

08002548 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b086      	sub	sp, #24
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
 8002550:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	333c      	adds	r3, #60	@ 0x3c
 8002560:	3304      	adds	r3, #4
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	015a      	lsls	r2, r3, #5
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	4413      	add	r3, r2
 800256e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	4a15      	ldr	r2, [pc, #84]	@ (80025d0 <PCD_EP_OutSetupPacket_int+0x88>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d90e      	bls.n	800259c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002584:	2b00      	cmp	r3, #0
 8002586:	d009      	beq.n	800259c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	015a      	lsls	r2, r3, #5
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	4413      	add	r3, r2
 8002590:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002594:	461a      	mov	r2, r3
 8002596:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800259a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800259c:	6878      	ldr	r0, [r7, #4]
 800259e:	f007 fa2b 	bl	80099f8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	4a0a      	ldr	r2, [pc, #40]	@ (80025d0 <PCD_EP_OutSetupPacket_int+0x88>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d90c      	bls.n	80025c4 <PCD_EP_OutSetupPacket_int+0x7c>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	799b      	ldrb	r3, [r3, #6]
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d108      	bne.n	80025c4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6818      	ldr	r0, [r3, #0]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80025bc:	461a      	mov	r2, r3
 80025be:	2101      	movs	r1, #1
 80025c0:	f002 fd54 	bl	800506c <USB_EP0_OutStart>
  }

  return HAL_OK;
 80025c4:	2300      	movs	r3, #0
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	3718      	adds	r7, #24
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	4f54300a 	.word	0x4f54300a

080025d4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b085      	sub	sp, #20
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
 80025dc:	460b      	mov	r3, r1
 80025de:	70fb      	strb	r3, [r7, #3]
 80025e0:	4613      	mov	r3, r2
 80025e2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025ea:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80025ec:	78fb      	ldrb	r3, [r7, #3]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d107      	bne.n	8002602 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80025f2:	883b      	ldrh	r3, [r7, #0]
 80025f4:	0419      	lsls	r1, r3, #16
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	68ba      	ldr	r2, [r7, #8]
 80025fc:	430a      	orrs	r2, r1
 80025fe:	629a      	str	r2, [r3, #40]	@ 0x28
 8002600:	e028      	b.n	8002654 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002608:	0c1b      	lsrs	r3, r3, #16
 800260a:	68ba      	ldr	r2, [r7, #8]
 800260c:	4413      	add	r3, r2
 800260e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002610:	2300      	movs	r3, #0
 8002612:	73fb      	strb	r3, [r7, #15]
 8002614:	e00d      	b.n	8002632 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	7bfb      	ldrb	r3, [r7, #15]
 800261c:	3340      	adds	r3, #64	@ 0x40
 800261e:	009b      	lsls	r3, r3, #2
 8002620:	4413      	add	r3, r2
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	0c1b      	lsrs	r3, r3, #16
 8002626:	68ba      	ldr	r2, [r7, #8]
 8002628:	4413      	add	r3, r2
 800262a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800262c:	7bfb      	ldrb	r3, [r7, #15]
 800262e:	3301      	adds	r3, #1
 8002630:	73fb      	strb	r3, [r7, #15]
 8002632:	7bfa      	ldrb	r2, [r7, #15]
 8002634:	78fb      	ldrb	r3, [r7, #3]
 8002636:	3b01      	subs	r3, #1
 8002638:	429a      	cmp	r2, r3
 800263a:	d3ec      	bcc.n	8002616 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800263c:	883b      	ldrh	r3, [r7, #0]
 800263e:	0418      	lsls	r0, r3, #16
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6819      	ldr	r1, [r3, #0]
 8002644:	78fb      	ldrb	r3, [r7, #3]
 8002646:	3b01      	subs	r3, #1
 8002648:	68ba      	ldr	r2, [r7, #8]
 800264a:	4302      	orrs	r2, r0
 800264c:	3340      	adds	r3, #64	@ 0x40
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	440b      	add	r3, r1
 8002652:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002654:	2300      	movs	r3, #0
}
 8002656:	4618      	mov	r0, r3
 8002658:	3714      	adds	r7, #20
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr

08002662 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002662:	b480      	push	{r7}
 8002664:	b083      	sub	sp, #12
 8002666:	af00      	add	r7, sp, #0
 8002668:	6078      	str	r0, [r7, #4]
 800266a:	460b      	mov	r3, r1
 800266c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	887a      	ldrh	r2, [r7, #2]
 8002674:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002676:	2300      	movs	r3, #0
}
 8002678:	4618      	mov	r0, r3
 800267a:	370c      	adds	r7, #12
 800267c:	46bd      	mov	sp, r7
 800267e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002682:	4770      	bx	lr

08002684 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002684:	b480      	push	{r7}
 8002686:	b083      	sub	sp, #12
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
 800268c:	460b      	mov	r3, r1
 800268e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002690:	bf00      	nop
 8002692:	370c      	adds	r7, #12
 8002694:	46bd      	mov	sp, r7
 8002696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269a:	4770      	bx	lr

0800269c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b086      	sub	sp, #24
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d101      	bne.n	80026ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e267      	b.n	8002b7e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 0301 	and.w	r3, r3, #1
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d075      	beq.n	80027a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80026ba:	4b88      	ldr	r3, [pc, #544]	@ (80028dc <HAL_RCC_OscConfig+0x240>)
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	f003 030c 	and.w	r3, r3, #12
 80026c2:	2b04      	cmp	r3, #4
 80026c4:	d00c      	beq.n	80026e0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026c6:	4b85      	ldr	r3, [pc, #532]	@ (80028dc <HAL_RCC_OscConfig+0x240>)
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80026ce:	2b08      	cmp	r3, #8
 80026d0:	d112      	bne.n	80026f8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026d2:	4b82      	ldr	r3, [pc, #520]	@ (80028dc <HAL_RCC_OscConfig+0x240>)
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80026da:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80026de:	d10b      	bne.n	80026f8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026e0:	4b7e      	ldr	r3, [pc, #504]	@ (80028dc <HAL_RCC_OscConfig+0x240>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d05b      	beq.n	80027a4 <HAL_RCC_OscConfig+0x108>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d157      	bne.n	80027a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80026f4:	2301      	movs	r3, #1
 80026f6:	e242      	b.n	8002b7e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002700:	d106      	bne.n	8002710 <HAL_RCC_OscConfig+0x74>
 8002702:	4b76      	ldr	r3, [pc, #472]	@ (80028dc <HAL_RCC_OscConfig+0x240>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a75      	ldr	r2, [pc, #468]	@ (80028dc <HAL_RCC_OscConfig+0x240>)
 8002708:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800270c:	6013      	str	r3, [r2, #0]
 800270e:	e01d      	b.n	800274c <HAL_RCC_OscConfig+0xb0>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002718:	d10c      	bne.n	8002734 <HAL_RCC_OscConfig+0x98>
 800271a:	4b70      	ldr	r3, [pc, #448]	@ (80028dc <HAL_RCC_OscConfig+0x240>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a6f      	ldr	r2, [pc, #444]	@ (80028dc <HAL_RCC_OscConfig+0x240>)
 8002720:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002724:	6013      	str	r3, [r2, #0]
 8002726:	4b6d      	ldr	r3, [pc, #436]	@ (80028dc <HAL_RCC_OscConfig+0x240>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a6c      	ldr	r2, [pc, #432]	@ (80028dc <HAL_RCC_OscConfig+0x240>)
 800272c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002730:	6013      	str	r3, [r2, #0]
 8002732:	e00b      	b.n	800274c <HAL_RCC_OscConfig+0xb0>
 8002734:	4b69      	ldr	r3, [pc, #420]	@ (80028dc <HAL_RCC_OscConfig+0x240>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a68      	ldr	r2, [pc, #416]	@ (80028dc <HAL_RCC_OscConfig+0x240>)
 800273a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800273e:	6013      	str	r3, [r2, #0]
 8002740:	4b66      	ldr	r3, [pc, #408]	@ (80028dc <HAL_RCC_OscConfig+0x240>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a65      	ldr	r2, [pc, #404]	@ (80028dc <HAL_RCC_OscConfig+0x240>)
 8002746:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800274a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d013      	beq.n	800277c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002754:	f7fe fa88 	bl	8000c68 <HAL_GetTick>
 8002758:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800275a:	e008      	b.n	800276e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800275c:	f7fe fa84 	bl	8000c68 <HAL_GetTick>
 8002760:	4602      	mov	r2, r0
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	2b64      	cmp	r3, #100	@ 0x64
 8002768:	d901      	bls.n	800276e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800276a:	2303      	movs	r3, #3
 800276c:	e207      	b.n	8002b7e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800276e:	4b5b      	ldr	r3, [pc, #364]	@ (80028dc <HAL_RCC_OscConfig+0x240>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002776:	2b00      	cmp	r3, #0
 8002778:	d0f0      	beq.n	800275c <HAL_RCC_OscConfig+0xc0>
 800277a:	e014      	b.n	80027a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800277c:	f7fe fa74 	bl	8000c68 <HAL_GetTick>
 8002780:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002782:	e008      	b.n	8002796 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002784:	f7fe fa70 	bl	8000c68 <HAL_GetTick>
 8002788:	4602      	mov	r2, r0
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	1ad3      	subs	r3, r2, r3
 800278e:	2b64      	cmp	r3, #100	@ 0x64
 8002790:	d901      	bls.n	8002796 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002792:	2303      	movs	r3, #3
 8002794:	e1f3      	b.n	8002b7e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002796:	4b51      	ldr	r3, [pc, #324]	@ (80028dc <HAL_RCC_OscConfig+0x240>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d1f0      	bne.n	8002784 <HAL_RCC_OscConfig+0xe8>
 80027a2:	e000      	b.n	80027a6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 0302 	and.w	r3, r3, #2
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d063      	beq.n	800287a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80027b2:	4b4a      	ldr	r3, [pc, #296]	@ (80028dc <HAL_RCC_OscConfig+0x240>)
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	f003 030c 	and.w	r3, r3, #12
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d00b      	beq.n	80027d6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027be:	4b47      	ldr	r3, [pc, #284]	@ (80028dc <HAL_RCC_OscConfig+0x240>)
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80027c6:	2b08      	cmp	r3, #8
 80027c8:	d11c      	bne.n	8002804 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027ca:	4b44      	ldr	r3, [pc, #272]	@ (80028dc <HAL_RCC_OscConfig+0x240>)
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d116      	bne.n	8002804 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027d6:	4b41      	ldr	r3, [pc, #260]	@ (80028dc <HAL_RCC_OscConfig+0x240>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 0302 	and.w	r3, r3, #2
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d005      	beq.n	80027ee <HAL_RCC_OscConfig+0x152>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	68db      	ldr	r3, [r3, #12]
 80027e6:	2b01      	cmp	r3, #1
 80027e8:	d001      	beq.n	80027ee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e1c7      	b.n	8002b7e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027ee:	4b3b      	ldr	r3, [pc, #236]	@ (80028dc <HAL_RCC_OscConfig+0x240>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	691b      	ldr	r3, [r3, #16]
 80027fa:	00db      	lsls	r3, r3, #3
 80027fc:	4937      	ldr	r1, [pc, #220]	@ (80028dc <HAL_RCC_OscConfig+0x240>)
 80027fe:	4313      	orrs	r3, r2
 8002800:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002802:	e03a      	b.n	800287a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d020      	beq.n	800284e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800280c:	4b34      	ldr	r3, [pc, #208]	@ (80028e0 <HAL_RCC_OscConfig+0x244>)
 800280e:	2201      	movs	r2, #1
 8002810:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002812:	f7fe fa29 	bl	8000c68 <HAL_GetTick>
 8002816:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002818:	e008      	b.n	800282c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800281a:	f7fe fa25 	bl	8000c68 <HAL_GetTick>
 800281e:	4602      	mov	r2, r0
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	1ad3      	subs	r3, r2, r3
 8002824:	2b02      	cmp	r3, #2
 8002826:	d901      	bls.n	800282c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002828:	2303      	movs	r3, #3
 800282a:	e1a8      	b.n	8002b7e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800282c:	4b2b      	ldr	r3, [pc, #172]	@ (80028dc <HAL_RCC_OscConfig+0x240>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 0302 	and.w	r3, r3, #2
 8002834:	2b00      	cmp	r3, #0
 8002836:	d0f0      	beq.n	800281a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002838:	4b28      	ldr	r3, [pc, #160]	@ (80028dc <HAL_RCC_OscConfig+0x240>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	691b      	ldr	r3, [r3, #16]
 8002844:	00db      	lsls	r3, r3, #3
 8002846:	4925      	ldr	r1, [pc, #148]	@ (80028dc <HAL_RCC_OscConfig+0x240>)
 8002848:	4313      	orrs	r3, r2
 800284a:	600b      	str	r3, [r1, #0]
 800284c:	e015      	b.n	800287a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800284e:	4b24      	ldr	r3, [pc, #144]	@ (80028e0 <HAL_RCC_OscConfig+0x244>)
 8002850:	2200      	movs	r2, #0
 8002852:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002854:	f7fe fa08 	bl	8000c68 <HAL_GetTick>
 8002858:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800285a:	e008      	b.n	800286e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800285c:	f7fe fa04 	bl	8000c68 <HAL_GetTick>
 8002860:	4602      	mov	r2, r0
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	2b02      	cmp	r3, #2
 8002868:	d901      	bls.n	800286e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800286a:	2303      	movs	r3, #3
 800286c:	e187      	b.n	8002b7e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800286e:	4b1b      	ldr	r3, [pc, #108]	@ (80028dc <HAL_RCC_OscConfig+0x240>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 0302 	and.w	r3, r3, #2
 8002876:	2b00      	cmp	r3, #0
 8002878:	d1f0      	bne.n	800285c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 0308 	and.w	r3, r3, #8
 8002882:	2b00      	cmp	r3, #0
 8002884:	d036      	beq.n	80028f4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	695b      	ldr	r3, [r3, #20]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d016      	beq.n	80028bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800288e:	4b15      	ldr	r3, [pc, #84]	@ (80028e4 <HAL_RCC_OscConfig+0x248>)
 8002890:	2201      	movs	r2, #1
 8002892:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002894:	f7fe f9e8 	bl	8000c68 <HAL_GetTick>
 8002898:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800289a:	e008      	b.n	80028ae <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800289c:	f7fe f9e4 	bl	8000c68 <HAL_GetTick>
 80028a0:	4602      	mov	r2, r0
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	1ad3      	subs	r3, r2, r3
 80028a6:	2b02      	cmp	r3, #2
 80028a8:	d901      	bls.n	80028ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80028aa:	2303      	movs	r3, #3
 80028ac:	e167      	b.n	8002b7e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028ae:	4b0b      	ldr	r3, [pc, #44]	@ (80028dc <HAL_RCC_OscConfig+0x240>)
 80028b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80028b2:	f003 0302 	and.w	r3, r3, #2
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d0f0      	beq.n	800289c <HAL_RCC_OscConfig+0x200>
 80028ba:	e01b      	b.n	80028f4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028bc:	4b09      	ldr	r3, [pc, #36]	@ (80028e4 <HAL_RCC_OscConfig+0x248>)
 80028be:	2200      	movs	r2, #0
 80028c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028c2:	f7fe f9d1 	bl	8000c68 <HAL_GetTick>
 80028c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028c8:	e00e      	b.n	80028e8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028ca:	f7fe f9cd 	bl	8000c68 <HAL_GetTick>
 80028ce:	4602      	mov	r2, r0
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	1ad3      	subs	r3, r2, r3
 80028d4:	2b02      	cmp	r3, #2
 80028d6:	d907      	bls.n	80028e8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80028d8:	2303      	movs	r3, #3
 80028da:	e150      	b.n	8002b7e <HAL_RCC_OscConfig+0x4e2>
 80028dc:	40023800 	.word	0x40023800
 80028e0:	42470000 	.word	0x42470000
 80028e4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028e8:	4b88      	ldr	r3, [pc, #544]	@ (8002b0c <HAL_RCC_OscConfig+0x470>)
 80028ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80028ec:	f003 0302 	and.w	r3, r3, #2
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d1ea      	bne.n	80028ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f003 0304 	and.w	r3, r3, #4
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	f000 8097 	beq.w	8002a30 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002902:	2300      	movs	r3, #0
 8002904:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002906:	4b81      	ldr	r3, [pc, #516]	@ (8002b0c <HAL_RCC_OscConfig+0x470>)
 8002908:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800290a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800290e:	2b00      	cmp	r3, #0
 8002910:	d10f      	bne.n	8002932 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002912:	2300      	movs	r3, #0
 8002914:	60bb      	str	r3, [r7, #8]
 8002916:	4b7d      	ldr	r3, [pc, #500]	@ (8002b0c <HAL_RCC_OscConfig+0x470>)
 8002918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800291a:	4a7c      	ldr	r2, [pc, #496]	@ (8002b0c <HAL_RCC_OscConfig+0x470>)
 800291c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002920:	6413      	str	r3, [r2, #64]	@ 0x40
 8002922:	4b7a      	ldr	r3, [pc, #488]	@ (8002b0c <HAL_RCC_OscConfig+0x470>)
 8002924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002926:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800292a:	60bb      	str	r3, [r7, #8]
 800292c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800292e:	2301      	movs	r3, #1
 8002930:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002932:	4b77      	ldr	r3, [pc, #476]	@ (8002b10 <HAL_RCC_OscConfig+0x474>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800293a:	2b00      	cmp	r3, #0
 800293c:	d118      	bne.n	8002970 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800293e:	4b74      	ldr	r3, [pc, #464]	@ (8002b10 <HAL_RCC_OscConfig+0x474>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a73      	ldr	r2, [pc, #460]	@ (8002b10 <HAL_RCC_OscConfig+0x474>)
 8002944:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002948:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800294a:	f7fe f98d 	bl	8000c68 <HAL_GetTick>
 800294e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002950:	e008      	b.n	8002964 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002952:	f7fe f989 	bl	8000c68 <HAL_GetTick>
 8002956:	4602      	mov	r2, r0
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	1ad3      	subs	r3, r2, r3
 800295c:	2b02      	cmp	r3, #2
 800295e:	d901      	bls.n	8002964 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002960:	2303      	movs	r3, #3
 8002962:	e10c      	b.n	8002b7e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002964:	4b6a      	ldr	r3, [pc, #424]	@ (8002b10 <HAL_RCC_OscConfig+0x474>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800296c:	2b00      	cmp	r3, #0
 800296e:	d0f0      	beq.n	8002952 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	2b01      	cmp	r3, #1
 8002976:	d106      	bne.n	8002986 <HAL_RCC_OscConfig+0x2ea>
 8002978:	4b64      	ldr	r3, [pc, #400]	@ (8002b0c <HAL_RCC_OscConfig+0x470>)
 800297a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800297c:	4a63      	ldr	r2, [pc, #396]	@ (8002b0c <HAL_RCC_OscConfig+0x470>)
 800297e:	f043 0301 	orr.w	r3, r3, #1
 8002982:	6713      	str	r3, [r2, #112]	@ 0x70
 8002984:	e01c      	b.n	80029c0 <HAL_RCC_OscConfig+0x324>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	2b05      	cmp	r3, #5
 800298c:	d10c      	bne.n	80029a8 <HAL_RCC_OscConfig+0x30c>
 800298e:	4b5f      	ldr	r3, [pc, #380]	@ (8002b0c <HAL_RCC_OscConfig+0x470>)
 8002990:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002992:	4a5e      	ldr	r2, [pc, #376]	@ (8002b0c <HAL_RCC_OscConfig+0x470>)
 8002994:	f043 0304 	orr.w	r3, r3, #4
 8002998:	6713      	str	r3, [r2, #112]	@ 0x70
 800299a:	4b5c      	ldr	r3, [pc, #368]	@ (8002b0c <HAL_RCC_OscConfig+0x470>)
 800299c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800299e:	4a5b      	ldr	r2, [pc, #364]	@ (8002b0c <HAL_RCC_OscConfig+0x470>)
 80029a0:	f043 0301 	orr.w	r3, r3, #1
 80029a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80029a6:	e00b      	b.n	80029c0 <HAL_RCC_OscConfig+0x324>
 80029a8:	4b58      	ldr	r3, [pc, #352]	@ (8002b0c <HAL_RCC_OscConfig+0x470>)
 80029aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029ac:	4a57      	ldr	r2, [pc, #348]	@ (8002b0c <HAL_RCC_OscConfig+0x470>)
 80029ae:	f023 0301 	bic.w	r3, r3, #1
 80029b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80029b4:	4b55      	ldr	r3, [pc, #340]	@ (8002b0c <HAL_RCC_OscConfig+0x470>)
 80029b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029b8:	4a54      	ldr	r2, [pc, #336]	@ (8002b0c <HAL_RCC_OscConfig+0x470>)
 80029ba:	f023 0304 	bic.w	r3, r3, #4
 80029be:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d015      	beq.n	80029f4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029c8:	f7fe f94e 	bl	8000c68 <HAL_GetTick>
 80029cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029ce:	e00a      	b.n	80029e6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029d0:	f7fe f94a 	bl	8000c68 <HAL_GetTick>
 80029d4:	4602      	mov	r2, r0
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	1ad3      	subs	r3, r2, r3
 80029da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029de:	4293      	cmp	r3, r2
 80029e0:	d901      	bls.n	80029e6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80029e2:	2303      	movs	r3, #3
 80029e4:	e0cb      	b.n	8002b7e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029e6:	4b49      	ldr	r3, [pc, #292]	@ (8002b0c <HAL_RCC_OscConfig+0x470>)
 80029e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029ea:	f003 0302 	and.w	r3, r3, #2
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d0ee      	beq.n	80029d0 <HAL_RCC_OscConfig+0x334>
 80029f2:	e014      	b.n	8002a1e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029f4:	f7fe f938 	bl	8000c68 <HAL_GetTick>
 80029f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029fa:	e00a      	b.n	8002a12 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029fc:	f7fe f934 	bl	8000c68 <HAL_GetTick>
 8002a00:	4602      	mov	r2, r0
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	1ad3      	subs	r3, r2, r3
 8002a06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d901      	bls.n	8002a12 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002a0e:	2303      	movs	r3, #3
 8002a10:	e0b5      	b.n	8002b7e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a12:	4b3e      	ldr	r3, [pc, #248]	@ (8002b0c <HAL_RCC_OscConfig+0x470>)
 8002a14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a16:	f003 0302 	and.w	r3, r3, #2
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d1ee      	bne.n	80029fc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002a1e:	7dfb      	ldrb	r3, [r7, #23]
 8002a20:	2b01      	cmp	r3, #1
 8002a22:	d105      	bne.n	8002a30 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a24:	4b39      	ldr	r3, [pc, #228]	@ (8002b0c <HAL_RCC_OscConfig+0x470>)
 8002a26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a28:	4a38      	ldr	r2, [pc, #224]	@ (8002b0c <HAL_RCC_OscConfig+0x470>)
 8002a2a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a2e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	699b      	ldr	r3, [r3, #24]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	f000 80a1 	beq.w	8002b7c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a3a:	4b34      	ldr	r3, [pc, #208]	@ (8002b0c <HAL_RCC_OscConfig+0x470>)
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	f003 030c 	and.w	r3, r3, #12
 8002a42:	2b08      	cmp	r3, #8
 8002a44:	d05c      	beq.n	8002b00 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	699b      	ldr	r3, [r3, #24]
 8002a4a:	2b02      	cmp	r3, #2
 8002a4c:	d141      	bne.n	8002ad2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a4e:	4b31      	ldr	r3, [pc, #196]	@ (8002b14 <HAL_RCC_OscConfig+0x478>)
 8002a50:	2200      	movs	r2, #0
 8002a52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a54:	f7fe f908 	bl	8000c68 <HAL_GetTick>
 8002a58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a5a:	e008      	b.n	8002a6e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a5c:	f7fe f904 	bl	8000c68 <HAL_GetTick>
 8002a60:	4602      	mov	r2, r0
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	1ad3      	subs	r3, r2, r3
 8002a66:	2b02      	cmp	r3, #2
 8002a68:	d901      	bls.n	8002a6e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002a6a:	2303      	movs	r3, #3
 8002a6c:	e087      	b.n	8002b7e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a6e:	4b27      	ldr	r3, [pc, #156]	@ (8002b0c <HAL_RCC_OscConfig+0x470>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d1f0      	bne.n	8002a5c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	69da      	ldr	r2, [r3, #28]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6a1b      	ldr	r3, [r3, #32]
 8002a82:	431a      	orrs	r2, r3
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a88:	019b      	lsls	r3, r3, #6
 8002a8a:	431a      	orrs	r2, r3
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a90:	085b      	lsrs	r3, r3, #1
 8002a92:	3b01      	subs	r3, #1
 8002a94:	041b      	lsls	r3, r3, #16
 8002a96:	431a      	orrs	r2, r3
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a9c:	061b      	lsls	r3, r3, #24
 8002a9e:	491b      	ldr	r1, [pc, #108]	@ (8002b0c <HAL_RCC_OscConfig+0x470>)
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002aa4:	4b1b      	ldr	r3, [pc, #108]	@ (8002b14 <HAL_RCC_OscConfig+0x478>)
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aaa:	f7fe f8dd 	bl	8000c68 <HAL_GetTick>
 8002aae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ab0:	e008      	b.n	8002ac4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ab2:	f7fe f8d9 	bl	8000c68 <HAL_GetTick>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	1ad3      	subs	r3, r2, r3
 8002abc:	2b02      	cmp	r3, #2
 8002abe:	d901      	bls.n	8002ac4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002ac0:	2303      	movs	r3, #3
 8002ac2:	e05c      	b.n	8002b7e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ac4:	4b11      	ldr	r3, [pc, #68]	@ (8002b0c <HAL_RCC_OscConfig+0x470>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d0f0      	beq.n	8002ab2 <HAL_RCC_OscConfig+0x416>
 8002ad0:	e054      	b.n	8002b7c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ad2:	4b10      	ldr	r3, [pc, #64]	@ (8002b14 <HAL_RCC_OscConfig+0x478>)
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ad8:	f7fe f8c6 	bl	8000c68 <HAL_GetTick>
 8002adc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ade:	e008      	b.n	8002af2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ae0:	f7fe f8c2 	bl	8000c68 <HAL_GetTick>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	1ad3      	subs	r3, r2, r3
 8002aea:	2b02      	cmp	r3, #2
 8002aec:	d901      	bls.n	8002af2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002aee:	2303      	movs	r3, #3
 8002af0:	e045      	b.n	8002b7e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002af2:	4b06      	ldr	r3, [pc, #24]	@ (8002b0c <HAL_RCC_OscConfig+0x470>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d1f0      	bne.n	8002ae0 <HAL_RCC_OscConfig+0x444>
 8002afe:	e03d      	b.n	8002b7c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	699b      	ldr	r3, [r3, #24]
 8002b04:	2b01      	cmp	r3, #1
 8002b06:	d107      	bne.n	8002b18 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	e038      	b.n	8002b7e <HAL_RCC_OscConfig+0x4e2>
 8002b0c:	40023800 	.word	0x40023800
 8002b10:	40007000 	.word	0x40007000
 8002b14:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002b18:	4b1b      	ldr	r3, [pc, #108]	@ (8002b88 <HAL_RCC_OscConfig+0x4ec>)
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	699b      	ldr	r3, [r3, #24]
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	d028      	beq.n	8002b78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d121      	bne.n	8002b78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b3e:	429a      	cmp	r2, r3
 8002b40:	d11a      	bne.n	8002b78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b42:	68fa      	ldr	r2, [r7, #12]
 8002b44:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002b48:	4013      	ands	r3, r2
 8002b4a:	687a      	ldr	r2, [r7, #4]
 8002b4c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002b4e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d111      	bne.n	8002b78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b5e:	085b      	lsrs	r3, r3, #1
 8002b60:	3b01      	subs	r3, #1
 8002b62:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d107      	bne.n	8002b78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b72:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d001      	beq.n	8002b7c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	e000      	b.n	8002b7e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002b7c:	2300      	movs	r3, #0
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3718      	adds	r7, #24
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	bf00      	nop
 8002b88:	40023800 	.word	0x40023800

08002b8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b084      	sub	sp, #16
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
 8002b94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d101      	bne.n	8002ba0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	e0cc      	b.n	8002d3a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ba0:	4b68      	ldr	r3, [pc, #416]	@ (8002d44 <HAL_RCC_ClockConfig+0x1b8>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 0307 	and.w	r3, r3, #7
 8002ba8:	683a      	ldr	r2, [r7, #0]
 8002baa:	429a      	cmp	r2, r3
 8002bac:	d90c      	bls.n	8002bc8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bae:	4b65      	ldr	r3, [pc, #404]	@ (8002d44 <HAL_RCC_ClockConfig+0x1b8>)
 8002bb0:	683a      	ldr	r2, [r7, #0]
 8002bb2:	b2d2      	uxtb	r2, r2
 8002bb4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bb6:	4b63      	ldr	r3, [pc, #396]	@ (8002d44 <HAL_RCC_ClockConfig+0x1b8>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 0307 	and.w	r3, r3, #7
 8002bbe:	683a      	ldr	r2, [r7, #0]
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	d001      	beq.n	8002bc8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	e0b8      	b.n	8002d3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 0302 	and.w	r3, r3, #2
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d020      	beq.n	8002c16 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 0304 	and.w	r3, r3, #4
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d005      	beq.n	8002bec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002be0:	4b59      	ldr	r3, [pc, #356]	@ (8002d48 <HAL_RCC_ClockConfig+0x1bc>)
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	4a58      	ldr	r2, [pc, #352]	@ (8002d48 <HAL_RCC_ClockConfig+0x1bc>)
 8002be6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002bea:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f003 0308 	and.w	r3, r3, #8
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d005      	beq.n	8002c04 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002bf8:	4b53      	ldr	r3, [pc, #332]	@ (8002d48 <HAL_RCC_ClockConfig+0x1bc>)
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	4a52      	ldr	r2, [pc, #328]	@ (8002d48 <HAL_RCC_ClockConfig+0x1bc>)
 8002bfe:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002c02:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c04:	4b50      	ldr	r3, [pc, #320]	@ (8002d48 <HAL_RCC_ClockConfig+0x1bc>)
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	494d      	ldr	r1, [pc, #308]	@ (8002d48 <HAL_RCC_ClockConfig+0x1bc>)
 8002c12:	4313      	orrs	r3, r2
 8002c14:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 0301 	and.w	r3, r3, #1
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d044      	beq.n	8002cac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d107      	bne.n	8002c3a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c2a:	4b47      	ldr	r3, [pc, #284]	@ (8002d48 <HAL_RCC_ClockConfig+0x1bc>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d119      	bne.n	8002c6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	e07f      	b.n	8002d3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	2b02      	cmp	r3, #2
 8002c40:	d003      	beq.n	8002c4a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c46:	2b03      	cmp	r3, #3
 8002c48:	d107      	bne.n	8002c5a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c4a:	4b3f      	ldr	r3, [pc, #252]	@ (8002d48 <HAL_RCC_ClockConfig+0x1bc>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d109      	bne.n	8002c6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e06f      	b.n	8002d3a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c5a:	4b3b      	ldr	r3, [pc, #236]	@ (8002d48 <HAL_RCC_ClockConfig+0x1bc>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 0302 	and.w	r3, r3, #2
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d101      	bne.n	8002c6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	e067      	b.n	8002d3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c6a:	4b37      	ldr	r3, [pc, #220]	@ (8002d48 <HAL_RCC_ClockConfig+0x1bc>)
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	f023 0203 	bic.w	r2, r3, #3
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	4934      	ldr	r1, [pc, #208]	@ (8002d48 <HAL_RCC_ClockConfig+0x1bc>)
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c7c:	f7fd fff4 	bl	8000c68 <HAL_GetTick>
 8002c80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c82:	e00a      	b.n	8002c9a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c84:	f7fd fff0 	bl	8000c68 <HAL_GetTick>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d901      	bls.n	8002c9a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c96:	2303      	movs	r3, #3
 8002c98:	e04f      	b.n	8002d3a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c9a:	4b2b      	ldr	r3, [pc, #172]	@ (8002d48 <HAL_RCC_ClockConfig+0x1bc>)
 8002c9c:	689b      	ldr	r3, [r3, #8]
 8002c9e:	f003 020c 	and.w	r2, r3, #12
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	d1eb      	bne.n	8002c84 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002cac:	4b25      	ldr	r3, [pc, #148]	@ (8002d44 <HAL_RCC_ClockConfig+0x1b8>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f003 0307 	and.w	r3, r3, #7
 8002cb4:	683a      	ldr	r2, [r7, #0]
 8002cb6:	429a      	cmp	r2, r3
 8002cb8:	d20c      	bcs.n	8002cd4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cba:	4b22      	ldr	r3, [pc, #136]	@ (8002d44 <HAL_RCC_ClockConfig+0x1b8>)
 8002cbc:	683a      	ldr	r2, [r7, #0]
 8002cbe:	b2d2      	uxtb	r2, r2
 8002cc0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cc2:	4b20      	ldr	r3, [pc, #128]	@ (8002d44 <HAL_RCC_ClockConfig+0x1b8>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f003 0307 	and.w	r3, r3, #7
 8002cca:	683a      	ldr	r2, [r7, #0]
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	d001      	beq.n	8002cd4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	e032      	b.n	8002d3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f003 0304 	and.w	r3, r3, #4
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d008      	beq.n	8002cf2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ce0:	4b19      	ldr	r3, [pc, #100]	@ (8002d48 <HAL_RCC_ClockConfig+0x1bc>)
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	4916      	ldr	r1, [pc, #88]	@ (8002d48 <HAL_RCC_ClockConfig+0x1bc>)
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f003 0308 	and.w	r3, r3, #8
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d009      	beq.n	8002d12 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002cfe:	4b12      	ldr	r3, [pc, #72]	@ (8002d48 <HAL_RCC_ClockConfig+0x1bc>)
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	691b      	ldr	r3, [r3, #16]
 8002d0a:	00db      	lsls	r3, r3, #3
 8002d0c:	490e      	ldr	r1, [pc, #56]	@ (8002d48 <HAL_RCC_ClockConfig+0x1bc>)
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002d12:	f000 f821 	bl	8002d58 <HAL_RCC_GetSysClockFreq>
 8002d16:	4602      	mov	r2, r0
 8002d18:	4b0b      	ldr	r3, [pc, #44]	@ (8002d48 <HAL_RCC_ClockConfig+0x1bc>)
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	091b      	lsrs	r3, r3, #4
 8002d1e:	f003 030f 	and.w	r3, r3, #15
 8002d22:	490a      	ldr	r1, [pc, #40]	@ (8002d4c <HAL_RCC_ClockConfig+0x1c0>)
 8002d24:	5ccb      	ldrb	r3, [r1, r3]
 8002d26:	fa22 f303 	lsr.w	r3, r2, r3
 8002d2a:	4a09      	ldr	r2, [pc, #36]	@ (8002d50 <HAL_RCC_ClockConfig+0x1c4>)
 8002d2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002d2e:	4b09      	ldr	r3, [pc, #36]	@ (8002d54 <HAL_RCC_ClockConfig+0x1c8>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4618      	mov	r0, r3
 8002d34:	f7fd fe7a 	bl	8000a2c <HAL_InitTick>

  return HAL_OK;
 8002d38:	2300      	movs	r3, #0
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	3710      	adds	r7, #16
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	bf00      	nop
 8002d44:	40023c00 	.word	0x40023c00
 8002d48:	40023800 	.word	0x40023800
 8002d4c:	0800a220 	.word	0x0800a220
 8002d50:	20000000 	.word	0x20000000
 8002d54:	20000004 	.word	0x20000004

08002d58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d5c:	b094      	sub	sp, #80	@ 0x50
 8002d5e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002d60:	2300      	movs	r3, #0
 8002d62:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002d64:	2300      	movs	r3, #0
 8002d66:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d70:	4b79      	ldr	r3, [pc, #484]	@ (8002f58 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	f003 030c 	and.w	r3, r3, #12
 8002d78:	2b08      	cmp	r3, #8
 8002d7a:	d00d      	beq.n	8002d98 <HAL_RCC_GetSysClockFreq+0x40>
 8002d7c:	2b08      	cmp	r3, #8
 8002d7e:	f200 80e1 	bhi.w	8002f44 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d002      	beq.n	8002d8c <HAL_RCC_GetSysClockFreq+0x34>
 8002d86:	2b04      	cmp	r3, #4
 8002d88:	d003      	beq.n	8002d92 <HAL_RCC_GetSysClockFreq+0x3a>
 8002d8a:	e0db      	b.n	8002f44 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d8c:	4b73      	ldr	r3, [pc, #460]	@ (8002f5c <HAL_RCC_GetSysClockFreq+0x204>)
 8002d8e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002d90:	e0db      	b.n	8002f4a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d92:	4b73      	ldr	r3, [pc, #460]	@ (8002f60 <HAL_RCC_GetSysClockFreq+0x208>)
 8002d94:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002d96:	e0d8      	b.n	8002f4a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d98:	4b6f      	ldr	r3, [pc, #444]	@ (8002f58 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002da0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002da2:	4b6d      	ldr	r3, [pc, #436]	@ (8002f58 <HAL_RCC_GetSysClockFreq+0x200>)
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d063      	beq.n	8002e76 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dae:	4b6a      	ldr	r3, [pc, #424]	@ (8002f58 <HAL_RCC_GetSysClockFreq+0x200>)
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	099b      	lsrs	r3, r3, #6
 8002db4:	2200      	movs	r2, #0
 8002db6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002db8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002dba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002dc0:	633b      	str	r3, [r7, #48]	@ 0x30
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	637b      	str	r3, [r7, #52]	@ 0x34
 8002dc6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002dca:	4622      	mov	r2, r4
 8002dcc:	462b      	mov	r3, r5
 8002dce:	f04f 0000 	mov.w	r0, #0
 8002dd2:	f04f 0100 	mov.w	r1, #0
 8002dd6:	0159      	lsls	r1, r3, #5
 8002dd8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ddc:	0150      	lsls	r0, r2, #5
 8002dde:	4602      	mov	r2, r0
 8002de0:	460b      	mov	r3, r1
 8002de2:	4621      	mov	r1, r4
 8002de4:	1a51      	subs	r1, r2, r1
 8002de6:	6139      	str	r1, [r7, #16]
 8002de8:	4629      	mov	r1, r5
 8002dea:	eb63 0301 	sbc.w	r3, r3, r1
 8002dee:	617b      	str	r3, [r7, #20]
 8002df0:	f04f 0200 	mov.w	r2, #0
 8002df4:	f04f 0300 	mov.w	r3, #0
 8002df8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002dfc:	4659      	mov	r1, fp
 8002dfe:	018b      	lsls	r3, r1, #6
 8002e00:	4651      	mov	r1, sl
 8002e02:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e06:	4651      	mov	r1, sl
 8002e08:	018a      	lsls	r2, r1, #6
 8002e0a:	4651      	mov	r1, sl
 8002e0c:	ebb2 0801 	subs.w	r8, r2, r1
 8002e10:	4659      	mov	r1, fp
 8002e12:	eb63 0901 	sbc.w	r9, r3, r1
 8002e16:	f04f 0200 	mov.w	r2, #0
 8002e1a:	f04f 0300 	mov.w	r3, #0
 8002e1e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002e22:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002e26:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002e2a:	4690      	mov	r8, r2
 8002e2c:	4699      	mov	r9, r3
 8002e2e:	4623      	mov	r3, r4
 8002e30:	eb18 0303 	adds.w	r3, r8, r3
 8002e34:	60bb      	str	r3, [r7, #8]
 8002e36:	462b      	mov	r3, r5
 8002e38:	eb49 0303 	adc.w	r3, r9, r3
 8002e3c:	60fb      	str	r3, [r7, #12]
 8002e3e:	f04f 0200 	mov.w	r2, #0
 8002e42:	f04f 0300 	mov.w	r3, #0
 8002e46:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002e4a:	4629      	mov	r1, r5
 8002e4c:	024b      	lsls	r3, r1, #9
 8002e4e:	4621      	mov	r1, r4
 8002e50:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002e54:	4621      	mov	r1, r4
 8002e56:	024a      	lsls	r2, r1, #9
 8002e58:	4610      	mov	r0, r2
 8002e5a:	4619      	mov	r1, r3
 8002e5c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002e5e:	2200      	movs	r2, #0
 8002e60:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002e62:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002e64:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002e68:	f7fd f9ba 	bl	80001e0 <__aeabi_uldivmod>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	460b      	mov	r3, r1
 8002e70:	4613      	mov	r3, r2
 8002e72:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002e74:	e058      	b.n	8002f28 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e76:	4b38      	ldr	r3, [pc, #224]	@ (8002f58 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	099b      	lsrs	r3, r3, #6
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	4618      	mov	r0, r3
 8002e80:	4611      	mov	r1, r2
 8002e82:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002e86:	623b      	str	r3, [r7, #32]
 8002e88:	2300      	movs	r3, #0
 8002e8a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e8c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002e90:	4642      	mov	r2, r8
 8002e92:	464b      	mov	r3, r9
 8002e94:	f04f 0000 	mov.w	r0, #0
 8002e98:	f04f 0100 	mov.w	r1, #0
 8002e9c:	0159      	lsls	r1, r3, #5
 8002e9e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ea2:	0150      	lsls	r0, r2, #5
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	460b      	mov	r3, r1
 8002ea8:	4641      	mov	r1, r8
 8002eaa:	ebb2 0a01 	subs.w	sl, r2, r1
 8002eae:	4649      	mov	r1, r9
 8002eb0:	eb63 0b01 	sbc.w	fp, r3, r1
 8002eb4:	f04f 0200 	mov.w	r2, #0
 8002eb8:	f04f 0300 	mov.w	r3, #0
 8002ebc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002ec0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002ec4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002ec8:	ebb2 040a 	subs.w	r4, r2, sl
 8002ecc:	eb63 050b 	sbc.w	r5, r3, fp
 8002ed0:	f04f 0200 	mov.w	r2, #0
 8002ed4:	f04f 0300 	mov.w	r3, #0
 8002ed8:	00eb      	lsls	r3, r5, #3
 8002eda:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002ede:	00e2      	lsls	r2, r4, #3
 8002ee0:	4614      	mov	r4, r2
 8002ee2:	461d      	mov	r5, r3
 8002ee4:	4643      	mov	r3, r8
 8002ee6:	18e3      	adds	r3, r4, r3
 8002ee8:	603b      	str	r3, [r7, #0]
 8002eea:	464b      	mov	r3, r9
 8002eec:	eb45 0303 	adc.w	r3, r5, r3
 8002ef0:	607b      	str	r3, [r7, #4]
 8002ef2:	f04f 0200 	mov.w	r2, #0
 8002ef6:	f04f 0300 	mov.w	r3, #0
 8002efa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002efe:	4629      	mov	r1, r5
 8002f00:	028b      	lsls	r3, r1, #10
 8002f02:	4621      	mov	r1, r4
 8002f04:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002f08:	4621      	mov	r1, r4
 8002f0a:	028a      	lsls	r2, r1, #10
 8002f0c:	4610      	mov	r0, r2
 8002f0e:	4619      	mov	r1, r3
 8002f10:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f12:	2200      	movs	r2, #0
 8002f14:	61bb      	str	r3, [r7, #24]
 8002f16:	61fa      	str	r2, [r7, #28]
 8002f18:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f1c:	f7fd f960 	bl	80001e0 <__aeabi_uldivmod>
 8002f20:	4602      	mov	r2, r0
 8002f22:	460b      	mov	r3, r1
 8002f24:	4613      	mov	r3, r2
 8002f26:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002f28:	4b0b      	ldr	r3, [pc, #44]	@ (8002f58 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	0c1b      	lsrs	r3, r3, #16
 8002f2e:	f003 0303 	and.w	r3, r3, #3
 8002f32:	3301      	adds	r3, #1
 8002f34:	005b      	lsls	r3, r3, #1
 8002f36:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002f38:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002f3a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f40:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002f42:	e002      	b.n	8002f4a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f44:	4b05      	ldr	r3, [pc, #20]	@ (8002f5c <HAL_RCC_GetSysClockFreq+0x204>)
 8002f46:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002f48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f4a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	3750      	adds	r7, #80	@ 0x50
 8002f50:	46bd      	mov	sp, r7
 8002f52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f56:	bf00      	nop
 8002f58:	40023800 	.word	0x40023800
 8002f5c:	00f42400 	.word	0x00f42400
 8002f60:	007a1200 	.word	0x007a1200

08002f64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f64:	b480      	push	{r7}
 8002f66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f68:	4b03      	ldr	r3, [pc, #12]	@ (8002f78 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f74:	4770      	bx	lr
 8002f76:	bf00      	nop
 8002f78:	20000000 	.word	0x20000000

08002f7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002f80:	f7ff fff0 	bl	8002f64 <HAL_RCC_GetHCLKFreq>
 8002f84:	4602      	mov	r2, r0
 8002f86:	4b05      	ldr	r3, [pc, #20]	@ (8002f9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	0a9b      	lsrs	r3, r3, #10
 8002f8c:	f003 0307 	and.w	r3, r3, #7
 8002f90:	4903      	ldr	r1, [pc, #12]	@ (8002fa0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f92:	5ccb      	ldrb	r3, [r1, r3]
 8002f94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	bd80      	pop	{r7, pc}
 8002f9c:	40023800 	.word	0x40023800
 8002fa0:	0800a230 	.word	0x0800a230

08002fa4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002fa8:	f7ff ffdc 	bl	8002f64 <HAL_RCC_GetHCLKFreq>
 8002fac:	4602      	mov	r2, r0
 8002fae:	4b05      	ldr	r3, [pc, #20]	@ (8002fc4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	0b5b      	lsrs	r3, r3, #13
 8002fb4:	f003 0307 	and.w	r3, r3, #7
 8002fb8:	4903      	ldr	r1, [pc, #12]	@ (8002fc8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002fba:	5ccb      	ldrb	r3, [r1, r3]
 8002fbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	bd80      	pop	{r7, pc}
 8002fc4:	40023800 	.word	0x40023800
 8002fc8:	0800a230 	.word	0x0800a230

08002fcc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b083      	sub	sp, #12
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
 8002fd4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	220f      	movs	r2, #15
 8002fda:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002fdc:	4b12      	ldr	r3, [pc, #72]	@ (8003028 <HAL_RCC_GetClockConfig+0x5c>)
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	f003 0203 	and.w	r2, r3, #3
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002fe8:	4b0f      	ldr	r3, [pc, #60]	@ (8003028 <HAL_RCC_GetClockConfig+0x5c>)
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002ff4:	4b0c      	ldr	r3, [pc, #48]	@ (8003028 <HAL_RCC_GetClockConfig+0x5c>)
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003000:	4b09      	ldr	r3, [pc, #36]	@ (8003028 <HAL_RCC_GetClockConfig+0x5c>)
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	08db      	lsrs	r3, r3, #3
 8003006:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800300e:	4b07      	ldr	r3, [pc, #28]	@ (800302c <HAL_RCC_GetClockConfig+0x60>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 0207 	and.w	r2, r3, #7
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	601a      	str	r2, [r3, #0]
}
 800301a:	bf00      	nop
 800301c:	370c      	adds	r7, #12
 800301e:	46bd      	mov	sp, r7
 8003020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003024:	4770      	bx	lr
 8003026:	bf00      	nop
 8003028:	40023800 	.word	0x40023800
 800302c:	40023c00 	.word	0x40023c00

08003030 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b082      	sub	sp, #8
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d101      	bne.n	8003042 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e041      	b.n	80030c6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003048:	b2db      	uxtb	r3, r3
 800304a:	2b00      	cmp	r3, #0
 800304c:	d106      	bne.n	800305c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2200      	movs	r2, #0
 8003052:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f000 f839 	bl	80030ce <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2202      	movs	r2, #2
 8003060:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	3304      	adds	r3, #4
 800306c:	4619      	mov	r1, r3
 800306e:	4610      	mov	r0, r2
 8003070:	f000 f9c0 	bl	80033f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2201      	movs	r2, #1
 8003078:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2201      	movs	r2, #1
 8003080:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2201      	movs	r2, #1
 8003088:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2201      	movs	r2, #1
 8003090:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2201      	movs	r2, #1
 8003098:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2201      	movs	r2, #1
 80030a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2201      	movs	r2, #1
 80030a8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2201      	movs	r2, #1
 80030b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2201      	movs	r2, #1
 80030b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2201      	movs	r2, #1
 80030c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80030c4:	2300      	movs	r3, #0
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3708      	adds	r7, #8
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}

080030ce <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80030ce:	b480      	push	{r7}
 80030d0:	b083      	sub	sp, #12
 80030d2:	af00      	add	r7, sp, #0
 80030d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80030d6:	bf00      	nop
 80030d8:	370c      	adds	r7, #12
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr
	...

080030e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b085      	sub	sp, #20
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030f2:	b2db      	uxtb	r3, r3
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d001      	beq.n	80030fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	e04e      	b.n	800319a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2202      	movs	r2, #2
 8003100:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	68da      	ldr	r2, [r3, #12]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f042 0201 	orr.w	r2, r2, #1
 8003112:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a23      	ldr	r2, [pc, #140]	@ (80031a8 <HAL_TIM_Base_Start_IT+0xc4>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d022      	beq.n	8003164 <HAL_TIM_Base_Start_IT+0x80>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003126:	d01d      	beq.n	8003164 <HAL_TIM_Base_Start_IT+0x80>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a1f      	ldr	r2, [pc, #124]	@ (80031ac <HAL_TIM_Base_Start_IT+0xc8>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d018      	beq.n	8003164 <HAL_TIM_Base_Start_IT+0x80>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a1e      	ldr	r2, [pc, #120]	@ (80031b0 <HAL_TIM_Base_Start_IT+0xcc>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d013      	beq.n	8003164 <HAL_TIM_Base_Start_IT+0x80>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a1c      	ldr	r2, [pc, #112]	@ (80031b4 <HAL_TIM_Base_Start_IT+0xd0>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d00e      	beq.n	8003164 <HAL_TIM_Base_Start_IT+0x80>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a1b      	ldr	r2, [pc, #108]	@ (80031b8 <HAL_TIM_Base_Start_IT+0xd4>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d009      	beq.n	8003164 <HAL_TIM_Base_Start_IT+0x80>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a19      	ldr	r2, [pc, #100]	@ (80031bc <HAL_TIM_Base_Start_IT+0xd8>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d004      	beq.n	8003164 <HAL_TIM_Base_Start_IT+0x80>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a18      	ldr	r2, [pc, #96]	@ (80031c0 <HAL_TIM_Base_Start_IT+0xdc>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d111      	bne.n	8003188 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	f003 0307 	and.w	r3, r3, #7
 800316e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2b06      	cmp	r3, #6
 8003174:	d010      	beq.n	8003198 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f042 0201 	orr.w	r2, r2, #1
 8003184:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003186:	e007      	b.n	8003198 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f042 0201 	orr.w	r2, r2, #1
 8003196:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003198:	2300      	movs	r3, #0
}
 800319a:	4618      	mov	r0, r3
 800319c:	3714      	adds	r7, #20
 800319e:	46bd      	mov	sp, r7
 80031a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a4:	4770      	bx	lr
 80031a6:	bf00      	nop
 80031a8:	40010000 	.word	0x40010000
 80031ac:	40000400 	.word	0x40000400
 80031b0:	40000800 	.word	0x40000800
 80031b4:	40000c00 	.word	0x40000c00
 80031b8:	40010400 	.word	0x40010400
 80031bc:	40014000 	.word	0x40014000
 80031c0:	40001800 	.word	0x40001800

080031c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b084      	sub	sp, #16
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	68db      	ldr	r3, [r3, #12]
 80031d2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	691b      	ldr	r3, [r3, #16]
 80031da:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	f003 0302 	and.w	r3, r3, #2
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d020      	beq.n	8003228 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	f003 0302 	and.w	r3, r3, #2
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d01b      	beq.n	8003228 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f06f 0202 	mvn.w	r2, #2
 80031f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2201      	movs	r2, #1
 80031fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	699b      	ldr	r3, [r3, #24]
 8003206:	f003 0303 	and.w	r3, r3, #3
 800320a:	2b00      	cmp	r3, #0
 800320c:	d003      	beq.n	8003216 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	f000 f8d2 	bl	80033b8 <HAL_TIM_IC_CaptureCallback>
 8003214:	e005      	b.n	8003222 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003216:	6878      	ldr	r0, [r7, #4]
 8003218:	f000 f8c4 	bl	80033a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800321c:	6878      	ldr	r0, [r7, #4]
 800321e:	f000 f8d5 	bl	80033cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2200      	movs	r2, #0
 8003226:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	f003 0304 	and.w	r3, r3, #4
 800322e:	2b00      	cmp	r3, #0
 8003230:	d020      	beq.n	8003274 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	f003 0304 	and.w	r3, r3, #4
 8003238:	2b00      	cmp	r3, #0
 800323a:	d01b      	beq.n	8003274 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f06f 0204 	mvn.w	r2, #4
 8003244:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2202      	movs	r2, #2
 800324a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	699b      	ldr	r3, [r3, #24]
 8003252:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003256:	2b00      	cmp	r3, #0
 8003258:	d003      	beq.n	8003262 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800325a:	6878      	ldr	r0, [r7, #4]
 800325c:	f000 f8ac 	bl	80033b8 <HAL_TIM_IC_CaptureCallback>
 8003260:	e005      	b.n	800326e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f000 f89e 	bl	80033a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003268:	6878      	ldr	r0, [r7, #4]
 800326a:	f000 f8af 	bl	80033cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2200      	movs	r2, #0
 8003272:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	f003 0308 	and.w	r3, r3, #8
 800327a:	2b00      	cmp	r3, #0
 800327c:	d020      	beq.n	80032c0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	f003 0308 	and.w	r3, r3, #8
 8003284:	2b00      	cmp	r3, #0
 8003286:	d01b      	beq.n	80032c0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f06f 0208 	mvn.w	r2, #8
 8003290:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2204      	movs	r2, #4
 8003296:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	69db      	ldr	r3, [r3, #28]
 800329e:	f003 0303 	and.w	r3, r3, #3
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d003      	beq.n	80032ae <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	f000 f886 	bl	80033b8 <HAL_TIM_IC_CaptureCallback>
 80032ac:	e005      	b.n	80032ba <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	f000 f878 	bl	80033a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032b4:	6878      	ldr	r0, [r7, #4]
 80032b6:	f000 f889 	bl	80033cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2200      	movs	r2, #0
 80032be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	f003 0310 	and.w	r3, r3, #16
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d020      	beq.n	800330c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	f003 0310 	and.w	r3, r3, #16
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d01b      	beq.n	800330c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f06f 0210 	mvn.w	r2, #16
 80032dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2208      	movs	r2, #8
 80032e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	69db      	ldr	r3, [r3, #28]
 80032ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d003      	beq.n	80032fa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	f000 f860 	bl	80033b8 <HAL_TIM_IC_CaptureCallback>
 80032f8:	e005      	b.n	8003306 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032fa:	6878      	ldr	r0, [r7, #4]
 80032fc:	f000 f852 	bl	80033a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003300:	6878      	ldr	r0, [r7, #4]
 8003302:	f000 f863 	bl	80033cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2200      	movs	r2, #0
 800330a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	f003 0301 	and.w	r3, r3, #1
 8003312:	2b00      	cmp	r3, #0
 8003314:	d00c      	beq.n	8003330 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	f003 0301 	and.w	r3, r3, #1
 800331c:	2b00      	cmp	r3, #0
 800331e:	d007      	beq.n	8003330 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f06f 0201 	mvn.w	r2, #1
 8003328:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800332a:	6878      	ldr	r0, [r7, #4]
 800332c:	f7fd faf4 	bl	8000918 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003336:	2b00      	cmp	r3, #0
 8003338:	d00c      	beq.n	8003354 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003340:	2b00      	cmp	r3, #0
 8003342:	d007      	beq.n	8003354 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800334c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	f000 f906 	bl	8003560 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800335a:	2b00      	cmp	r3, #0
 800335c:	d00c      	beq.n	8003378 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003364:	2b00      	cmp	r3, #0
 8003366:	d007      	beq.n	8003378 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003370:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	f000 f834 	bl	80033e0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	f003 0320 	and.w	r3, r3, #32
 800337e:	2b00      	cmp	r3, #0
 8003380:	d00c      	beq.n	800339c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	f003 0320 	and.w	r3, r3, #32
 8003388:	2b00      	cmp	r3, #0
 800338a:	d007      	beq.n	800339c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f06f 0220 	mvn.w	r2, #32
 8003394:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	f000 f8d8 	bl	800354c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800339c:	bf00      	nop
 800339e:	3710      	adds	r7, #16
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd80      	pop	{r7, pc}

080033a4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b083      	sub	sp, #12
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80033ac:	bf00      	nop
 80033ae:	370c      	adds	r7, #12
 80033b0:	46bd      	mov	sp, r7
 80033b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b6:	4770      	bx	lr

080033b8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b083      	sub	sp, #12
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80033c0:	bf00      	nop
 80033c2:	370c      	adds	r7, #12
 80033c4:	46bd      	mov	sp, r7
 80033c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ca:	4770      	bx	lr

080033cc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b083      	sub	sp, #12
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80033d4:	bf00      	nop
 80033d6:	370c      	adds	r7, #12
 80033d8:	46bd      	mov	sp, r7
 80033da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033de:	4770      	bx	lr

080033e0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b083      	sub	sp, #12
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80033e8:	bf00      	nop
 80033ea:	370c      	adds	r7, #12
 80033ec:	46bd      	mov	sp, r7
 80033ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f2:	4770      	bx	lr

080033f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b085      	sub	sp, #20
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
 80033fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	4a46      	ldr	r2, [pc, #280]	@ (8003520 <TIM_Base_SetConfig+0x12c>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d013      	beq.n	8003434 <TIM_Base_SetConfig+0x40>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003412:	d00f      	beq.n	8003434 <TIM_Base_SetConfig+0x40>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	4a43      	ldr	r2, [pc, #268]	@ (8003524 <TIM_Base_SetConfig+0x130>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d00b      	beq.n	8003434 <TIM_Base_SetConfig+0x40>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	4a42      	ldr	r2, [pc, #264]	@ (8003528 <TIM_Base_SetConfig+0x134>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d007      	beq.n	8003434 <TIM_Base_SetConfig+0x40>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	4a41      	ldr	r2, [pc, #260]	@ (800352c <TIM_Base_SetConfig+0x138>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d003      	beq.n	8003434 <TIM_Base_SetConfig+0x40>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	4a40      	ldr	r2, [pc, #256]	@ (8003530 <TIM_Base_SetConfig+0x13c>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d108      	bne.n	8003446 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800343a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	68fa      	ldr	r2, [r7, #12]
 8003442:	4313      	orrs	r3, r2
 8003444:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	4a35      	ldr	r2, [pc, #212]	@ (8003520 <TIM_Base_SetConfig+0x12c>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d02b      	beq.n	80034a6 <TIM_Base_SetConfig+0xb2>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003454:	d027      	beq.n	80034a6 <TIM_Base_SetConfig+0xb2>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	4a32      	ldr	r2, [pc, #200]	@ (8003524 <TIM_Base_SetConfig+0x130>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d023      	beq.n	80034a6 <TIM_Base_SetConfig+0xb2>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	4a31      	ldr	r2, [pc, #196]	@ (8003528 <TIM_Base_SetConfig+0x134>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d01f      	beq.n	80034a6 <TIM_Base_SetConfig+0xb2>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	4a30      	ldr	r2, [pc, #192]	@ (800352c <TIM_Base_SetConfig+0x138>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d01b      	beq.n	80034a6 <TIM_Base_SetConfig+0xb2>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	4a2f      	ldr	r2, [pc, #188]	@ (8003530 <TIM_Base_SetConfig+0x13c>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d017      	beq.n	80034a6 <TIM_Base_SetConfig+0xb2>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	4a2e      	ldr	r2, [pc, #184]	@ (8003534 <TIM_Base_SetConfig+0x140>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d013      	beq.n	80034a6 <TIM_Base_SetConfig+0xb2>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	4a2d      	ldr	r2, [pc, #180]	@ (8003538 <TIM_Base_SetConfig+0x144>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d00f      	beq.n	80034a6 <TIM_Base_SetConfig+0xb2>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	4a2c      	ldr	r2, [pc, #176]	@ (800353c <TIM_Base_SetConfig+0x148>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d00b      	beq.n	80034a6 <TIM_Base_SetConfig+0xb2>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	4a2b      	ldr	r2, [pc, #172]	@ (8003540 <TIM_Base_SetConfig+0x14c>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d007      	beq.n	80034a6 <TIM_Base_SetConfig+0xb2>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	4a2a      	ldr	r2, [pc, #168]	@ (8003544 <TIM_Base_SetConfig+0x150>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d003      	beq.n	80034a6 <TIM_Base_SetConfig+0xb2>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	4a29      	ldr	r2, [pc, #164]	@ (8003548 <TIM_Base_SetConfig+0x154>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d108      	bne.n	80034b8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80034ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	68db      	ldr	r3, [r3, #12]
 80034b2:	68fa      	ldr	r2, [r7, #12]
 80034b4:	4313      	orrs	r3, r2
 80034b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	695b      	ldr	r3, [r3, #20]
 80034c2:	4313      	orrs	r3, r2
 80034c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	68fa      	ldr	r2, [r7, #12]
 80034ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	689a      	ldr	r2, [r3, #8]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	681a      	ldr	r2, [r3, #0]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	4a10      	ldr	r2, [pc, #64]	@ (8003520 <TIM_Base_SetConfig+0x12c>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d003      	beq.n	80034ec <TIM_Base_SetConfig+0xf8>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	4a12      	ldr	r2, [pc, #72]	@ (8003530 <TIM_Base_SetConfig+0x13c>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d103      	bne.n	80034f4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	691a      	ldr	r2, [r3, #16]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2201      	movs	r2, #1
 80034f8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	691b      	ldr	r3, [r3, #16]
 80034fe:	f003 0301 	and.w	r3, r3, #1
 8003502:	2b01      	cmp	r3, #1
 8003504:	d105      	bne.n	8003512 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	691b      	ldr	r3, [r3, #16]
 800350a:	f023 0201 	bic.w	r2, r3, #1
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	611a      	str	r2, [r3, #16]
  }
}
 8003512:	bf00      	nop
 8003514:	3714      	adds	r7, #20
 8003516:	46bd      	mov	sp, r7
 8003518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351c:	4770      	bx	lr
 800351e:	bf00      	nop
 8003520:	40010000 	.word	0x40010000
 8003524:	40000400 	.word	0x40000400
 8003528:	40000800 	.word	0x40000800
 800352c:	40000c00 	.word	0x40000c00
 8003530:	40010400 	.word	0x40010400
 8003534:	40014000 	.word	0x40014000
 8003538:	40014400 	.word	0x40014400
 800353c:	40014800 	.word	0x40014800
 8003540:	40001800 	.word	0x40001800
 8003544:	40001c00 	.word	0x40001c00
 8003548:	40002000 	.word	0x40002000

0800354c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800354c:	b480      	push	{r7}
 800354e:	b083      	sub	sp, #12
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003554:	bf00      	nop
 8003556:	370c      	adds	r7, #12
 8003558:	46bd      	mov	sp, r7
 800355a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355e:	4770      	bx	lr

08003560 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003560:	b480      	push	{r7}
 8003562:	b083      	sub	sp, #12
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003568:	bf00      	nop
 800356a:	370c      	adds	r7, #12
 800356c:	46bd      	mov	sp, r7
 800356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003572:	4770      	bx	lr

08003574 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b082      	sub	sp, #8
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d101      	bne.n	8003586 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	e042      	b.n	800360c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800358c:	b2db      	uxtb	r3, r3
 800358e:	2b00      	cmp	r3, #0
 8003590:	d106      	bne.n	80035a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2200      	movs	r2, #0
 8003596:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	f7fd f9fe 	bl	800099c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2224      	movs	r2, #36	@ 0x24
 80035a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	68da      	ldr	r2, [r3, #12]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80035b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80035b8:	6878      	ldr	r0, [r7, #4]
 80035ba:	f000 f82b 	bl	8003614 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	691a      	ldr	r2, [r3, #16]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80035cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	695a      	ldr	r2, [r3, #20]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80035dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	68da      	ldr	r2, [r3, #12]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80035ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2200      	movs	r2, #0
 80035f2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2220      	movs	r2, #32
 80035f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2220      	movs	r2, #32
 8003600:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2200      	movs	r2, #0
 8003608:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800360a:	2300      	movs	r3, #0
}
 800360c:	4618      	mov	r0, r3
 800360e:	3708      	adds	r7, #8
 8003610:	46bd      	mov	sp, r7
 8003612:	bd80      	pop	{r7, pc}

08003614 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003614:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003618:	b0c0      	sub	sp, #256	@ 0x100
 800361a:	af00      	add	r7, sp, #0
 800361c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003620:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	691b      	ldr	r3, [r3, #16]
 8003628:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800362c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003630:	68d9      	ldr	r1, [r3, #12]
 8003632:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	ea40 0301 	orr.w	r3, r0, r1
 800363c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800363e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003642:	689a      	ldr	r2, [r3, #8]
 8003644:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003648:	691b      	ldr	r3, [r3, #16]
 800364a:	431a      	orrs	r2, r3
 800364c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003650:	695b      	ldr	r3, [r3, #20]
 8003652:	431a      	orrs	r2, r3
 8003654:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003658:	69db      	ldr	r3, [r3, #28]
 800365a:	4313      	orrs	r3, r2
 800365c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003660:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	68db      	ldr	r3, [r3, #12]
 8003668:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800366c:	f021 010c 	bic.w	r1, r1, #12
 8003670:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800367a:	430b      	orrs	r3, r1
 800367c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800367e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	695b      	ldr	r3, [r3, #20]
 8003686:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800368a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800368e:	6999      	ldr	r1, [r3, #24]
 8003690:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	ea40 0301 	orr.w	r3, r0, r1
 800369a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800369c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036a0:	681a      	ldr	r2, [r3, #0]
 80036a2:	4b8f      	ldr	r3, [pc, #572]	@ (80038e0 <UART_SetConfig+0x2cc>)
 80036a4:	429a      	cmp	r2, r3
 80036a6:	d005      	beq.n	80036b4 <UART_SetConfig+0xa0>
 80036a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	4b8d      	ldr	r3, [pc, #564]	@ (80038e4 <UART_SetConfig+0x2d0>)
 80036b0:	429a      	cmp	r2, r3
 80036b2:	d104      	bne.n	80036be <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80036b4:	f7ff fc76 	bl	8002fa4 <HAL_RCC_GetPCLK2Freq>
 80036b8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80036bc:	e003      	b.n	80036c6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80036be:	f7ff fc5d 	bl	8002f7c <HAL_RCC_GetPCLK1Freq>
 80036c2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80036c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036ca:	69db      	ldr	r3, [r3, #28]
 80036cc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80036d0:	f040 810c 	bne.w	80038ec <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80036d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80036d8:	2200      	movs	r2, #0
 80036da:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80036de:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80036e2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80036e6:	4622      	mov	r2, r4
 80036e8:	462b      	mov	r3, r5
 80036ea:	1891      	adds	r1, r2, r2
 80036ec:	65b9      	str	r1, [r7, #88]	@ 0x58
 80036ee:	415b      	adcs	r3, r3
 80036f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80036f2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80036f6:	4621      	mov	r1, r4
 80036f8:	eb12 0801 	adds.w	r8, r2, r1
 80036fc:	4629      	mov	r1, r5
 80036fe:	eb43 0901 	adc.w	r9, r3, r1
 8003702:	f04f 0200 	mov.w	r2, #0
 8003706:	f04f 0300 	mov.w	r3, #0
 800370a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800370e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003712:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003716:	4690      	mov	r8, r2
 8003718:	4699      	mov	r9, r3
 800371a:	4623      	mov	r3, r4
 800371c:	eb18 0303 	adds.w	r3, r8, r3
 8003720:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003724:	462b      	mov	r3, r5
 8003726:	eb49 0303 	adc.w	r3, r9, r3
 800372a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800372e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	2200      	movs	r2, #0
 8003736:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800373a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800373e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003742:	460b      	mov	r3, r1
 8003744:	18db      	adds	r3, r3, r3
 8003746:	653b      	str	r3, [r7, #80]	@ 0x50
 8003748:	4613      	mov	r3, r2
 800374a:	eb42 0303 	adc.w	r3, r2, r3
 800374e:	657b      	str	r3, [r7, #84]	@ 0x54
 8003750:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003754:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003758:	f7fc fd42 	bl	80001e0 <__aeabi_uldivmod>
 800375c:	4602      	mov	r2, r0
 800375e:	460b      	mov	r3, r1
 8003760:	4b61      	ldr	r3, [pc, #388]	@ (80038e8 <UART_SetConfig+0x2d4>)
 8003762:	fba3 2302 	umull	r2, r3, r3, r2
 8003766:	095b      	lsrs	r3, r3, #5
 8003768:	011c      	lsls	r4, r3, #4
 800376a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800376e:	2200      	movs	r2, #0
 8003770:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003774:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003778:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800377c:	4642      	mov	r2, r8
 800377e:	464b      	mov	r3, r9
 8003780:	1891      	adds	r1, r2, r2
 8003782:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003784:	415b      	adcs	r3, r3
 8003786:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003788:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800378c:	4641      	mov	r1, r8
 800378e:	eb12 0a01 	adds.w	sl, r2, r1
 8003792:	4649      	mov	r1, r9
 8003794:	eb43 0b01 	adc.w	fp, r3, r1
 8003798:	f04f 0200 	mov.w	r2, #0
 800379c:	f04f 0300 	mov.w	r3, #0
 80037a0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80037a4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80037a8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80037ac:	4692      	mov	sl, r2
 80037ae:	469b      	mov	fp, r3
 80037b0:	4643      	mov	r3, r8
 80037b2:	eb1a 0303 	adds.w	r3, sl, r3
 80037b6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80037ba:	464b      	mov	r3, r9
 80037bc:	eb4b 0303 	adc.w	r3, fp, r3
 80037c0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80037c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	2200      	movs	r2, #0
 80037cc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80037d0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80037d4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80037d8:	460b      	mov	r3, r1
 80037da:	18db      	adds	r3, r3, r3
 80037dc:	643b      	str	r3, [r7, #64]	@ 0x40
 80037de:	4613      	mov	r3, r2
 80037e0:	eb42 0303 	adc.w	r3, r2, r3
 80037e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80037e6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80037ea:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80037ee:	f7fc fcf7 	bl	80001e0 <__aeabi_uldivmod>
 80037f2:	4602      	mov	r2, r0
 80037f4:	460b      	mov	r3, r1
 80037f6:	4611      	mov	r1, r2
 80037f8:	4b3b      	ldr	r3, [pc, #236]	@ (80038e8 <UART_SetConfig+0x2d4>)
 80037fa:	fba3 2301 	umull	r2, r3, r3, r1
 80037fe:	095b      	lsrs	r3, r3, #5
 8003800:	2264      	movs	r2, #100	@ 0x64
 8003802:	fb02 f303 	mul.w	r3, r2, r3
 8003806:	1acb      	subs	r3, r1, r3
 8003808:	00db      	lsls	r3, r3, #3
 800380a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800380e:	4b36      	ldr	r3, [pc, #216]	@ (80038e8 <UART_SetConfig+0x2d4>)
 8003810:	fba3 2302 	umull	r2, r3, r3, r2
 8003814:	095b      	lsrs	r3, r3, #5
 8003816:	005b      	lsls	r3, r3, #1
 8003818:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800381c:	441c      	add	r4, r3
 800381e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003822:	2200      	movs	r2, #0
 8003824:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003828:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800382c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003830:	4642      	mov	r2, r8
 8003832:	464b      	mov	r3, r9
 8003834:	1891      	adds	r1, r2, r2
 8003836:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003838:	415b      	adcs	r3, r3
 800383a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800383c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003840:	4641      	mov	r1, r8
 8003842:	1851      	adds	r1, r2, r1
 8003844:	6339      	str	r1, [r7, #48]	@ 0x30
 8003846:	4649      	mov	r1, r9
 8003848:	414b      	adcs	r3, r1
 800384a:	637b      	str	r3, [r7, #52]	@ 0x34
 800384c:	f04f 0200 	mov.w	r2, #0
 8003850:	f04f 0300 	mov.w	r3, #0
 8003854:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003858:	4659      	mov	r1, fp
 800385a:	00cb      	lsls	r3, r1, #3
 800385c:	4651      	mov	r1, sl
 800385e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003862:	4651      	mov	r1, sl
 8003864:	00ca      	lsls	r2, r1, #3
 8003866:	4610      	mov	r0, r2
 8003868:	4619      	mov	r1, r3
 800386a:	4603      	mov	r3, r0
 800386c:	4642      	mov	r2, r8
 800386e:	189b      	adds	r3, r3, r2
 8003870:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003874:	464b      	mov	r3, r9
 8003876:	460a      	mov	r2, r1
 8003878:	eb42 0303 	adc.w	r3, r2, r3
 800387c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003880:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	2200      	movs	r2, #0
 8003888:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800388c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003890:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003894:	460b      	mov	r3, r1
 8003896:	18db      	adds	r3, r3, r3
 8003898:	62bb      	str	r3, [r7, #40]	@ 0x28
 800389a:	4613      	mov	r3, r2
 800389c:	eb42 0303 	adc.w	r3, r2, r3
 80038a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80038a2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80038a6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80038aa:	f7fc fc99 	bl	80001e0 <__aeabi_uldivmod>
 80038ae:	4602      	mov	r2, r0
 80038b0:	460b      	mov	r3, r1
 80038b2:	4b0d      	ldr	r3, [pc, #52]	@ (80038e8 <UART_SetConfig+0x2d4>)
 80038b4:	fba3 1302 	umull	r1, r3, r3, r2
 80038b8:	095b      	lsrs	r3, r3, #5
 80038ba:	2164      	movs	r1, #100	@ 0x64
 80038bc:	fb01 f303 	mul.w	r3, r1, r3
 80038c0:	1ad3      	subs	r3, r2, r3
 80038c2:	00db      	lsls	r3, r3, #3
 80038c4:	3332      	adds	r3, #50	@ 0x32
 80038c6:	4a08      	ldr	r2, [pc, #32]	@ (80038e8 <UART_SetConfig+0x2d4>)
 80038c8:	fba2 2303 	umull	r2, r3, r2, r3
 80038cc:	095b      	lsrs	r3, r3, #5
 80038ce:	f003 0207 	and.w	r2, r3, #7
 80038d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4422      	add	r2, r4
 80038da:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80038dc:	e106      	b.n	8003aec <UART_SetConfig+0x4d8>
 80038de:	bf00      	nop
 80038e0:	40011000 	.word	0x40011000
 80038e4:	40011400 	.word	0x40011400
 80038e8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80038ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80038f0:	2200      	movs	r2, #0
 80038f2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80038f6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80038fa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80038fe:	4642      	mov	r2, r8
 8003900:	464b      	mov	r3, r9
 8003902:	1891      	adds	r1, r2, r2
 8003904:	6239      	str	r1, [r7, #32]
 8003906:	415b      	adcs	r3, r3
 8003908:	627b      	str	r3, [r7, #36]	@ 0x24
 800390a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800390e:	4641      	mov	r1, r8
 8003910:	1854      	adds	r4, r2, r1
 8003912:	4649      	mov	r1, r9
 8003914:	eb43 0501 	adc.w	r5, r3, r1
 8003918:	f04f 0200 	mov.w	r2, #0
 800391c:	f04f 0300 	mov.w	r3, #0
 8003920:	00eb      	lsls	r3, r5, #3
 8003922:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003926:	00e2      	lsls	r2, r4, #3
 8003928:	4614      	mov	r4, r2
 800392a:	461d      	mov	r5, r3
 800392c:	4643      	mov	r3, r8
 800392e:	18e3      	adds	r3, r4, r3
 8003930:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003934:	464b      	mov	r3, r9
 8003936:	eb45 0303 	adc.w	r3, r5, r3
 800393a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800393e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	2200      	movs	r2, #0
 8003946:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800394a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800394e:	f04f 0200 	mov.w	r2, #0
 8003952:	f04f 0300 	mov.w	r3, #0
 8003956:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800395a:	4629      	mov	r1, r5
 800395c:	008b      	lsls	r3, r1, #2
 800395e:	4621      	mov	r1, r4
 8003960:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003964:	4621      	mov	r1, r4
 8003966:	008a      	lsls	r2, r1, #2
 8003968:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800396c:	f7fc fc38 	bl	80001e0 <__aeabi_uldivmod>
 8003970:	4602      	mov	r2, r0
 8003972:	460b      	mov	r3, r1
 8003974:	4b60      	ldr	r3, [pc, #384]	@ (8003af8 <UART_SetConfig+0x4e4>)
 8003976:	fba3 2302 	umull	r2, r3, r3, r2
 800397a:	095b      	lsrs	r3, r3, #5
 800397c:	011c      	lsls	r4, r3, #4
 800397e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003982:	2200      	movs	r2, #0
 8003984:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003988:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800398c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003990:	4642      	mov	r2, r8
 8003992:	464b      	mov	r3, r9
 8003994:	1891      	adds	r1, r2, r2
 8003996:	61b9      	str	r1, [r7, #24]
 8003998:	415b      	adcs	r3, r3
 800399a:	61fb      	str	r3, [r7, #28]
 800399c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80039a0:	4641      	mov	r1, r8
 80039a2:	1851      	adds	r1, r2, r1
 80039a4:	6139      	str	r1, [r7, #16]
 80039a6:	4649      	mov	r1, r9
 80039a8:	414b      	adcs	r3, r1
 80039aa:	617b      	str	r3, [r7, #20]
 80039ac:	f04f 0200 	mov.w	r2, #0
 80039b0:	f04f 0300 	mov.w	r3, #0
 80039b4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80039b8:	4659      	mov	r1, fp
 80039ba:	00cb      	lsls	r3, r1, #3
 80039bc:	4651      	mov	r1, sl
 80039be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80039c2:	4651      	mov	r1, sl
 80039c4:	00ca      	lsls	r2, r1, #3
 80039c6:	4610      	mov	r0, r2
 80039c8:	4619      	mov	r1, r3
 80039ca:	4603      	mov	r3, r0
 80039cc:	4642      	mov	r2, r8
 80039ce:	189b      	adds	r3, r3, r2
 80039d0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80039d4:	464b      	mov	r3, r9
 80039d6:	460a      	mov	r2, r1
 80039d8:	eb42 0303 	adc.w	r3, r2, r3
 80039dc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80039e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	2200      	movs	r2, #0
 80039e8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80039ea:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80039ec:	f04f 0200 	mov.w	r2, #0
 80039f0:	f04f 0300 	mov.w	r3, #0
 80039f4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80039f8:	4649      	mov	r1, r9
 80039fa:	008b      	lsls	r3, r1, #2
 80039fc:	4641      	mov	r1, r8
 80039fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003a02:	4641      	mov	r1, r8
 8003a04:	008a      	lsls	r2, r1, #2
 8003a06:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003a0a:	f7fc fbe9 	bl	80001e0 <__aeabi_uldivmod>
 8003a0e:	4602      	mov	r2, r0
 8003a10:	460b      	mov	r3, r1
 8003a12:	4611      	mov	r1, r2
 8003a14:	4b38      	ldr	r3, [pc, #224]	@ (8003af8 <UART_SetConfig+0x4e4>)
 8003a16:	fba3 2301 	umull	r2, r3, r3, r1
 8003a1a:	095b      	lsrs	r3, r3, #5
 8003a1c:	2264      	movs	r2, #100	@ 0x64
 8003a1e:	fb02 f303 	mul.w	r3, r2, r3
 8003a22:	1acb      	subs	r3, r1, r3
 8003a24:	011b      	lsls	r3, r3, #4
 8003a26:	3332      	adds	r3, #50	@ 0x32
 8003a28:	4a33      	ldr	r2, [pc, #204]	@ (8003af8 <UART_SetConfig+0x4e4>)
 8003a2a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a2e:	095b      	lsrs	r3, r3, #5
 8003a30:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003a34:	441c      	add	r4, r3
 8003a36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	673b      	str	r3, [r7, #112]	@ 0x70
 8003a3e:	677a      	str	r2, [r7, #116]	@ 0x74
 8003a40:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003a44:	4642      	mov	r2, r8
 8003a46:	464b      	mov	r3, r9
 8003a48:	1891      	adds	r1, r2, r2
 8003a4a:	60b9      	str	r1, [r7, #8]
 8003a4c:	415b      	adcs	r3, r3
 8003a4e:	60fb      	str	r3, [r7, #12]
 8003a50:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003a54:	4641      	mov	r1, r8
 8003a56:	1851      	adds	r1, r2, r1
 8003a58:	6039      	str	r1, [r7, #0]
 8003a5a:	4649      	mov	r1, r9
 8003a5c:	414b      	adcs	r3, r1
 8003a5e:	607b      	str	r3, [r7, #4]
 8003a60:	f04f 0200 	mov.w	r2, #0
 8003a64:	f04f 0300 	mov.w	r3, #0
 8003a68:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003a6c:	4659      	mov	r1, fp
 8003a6e:	00cb      	lsls	r3, r1, #3
 8003a70:	4651      	mov	r1, sl
 8003a72:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a76:	4651      	mov	r1, sl
 8003a78:	00ca      	lsls	r2, r1, #3
 8003a7a:	4610      	mov	r0, r2
 8003a7c:	4619      	mov	r1, r3
 8003a7e:	4603      	mov	r3, r0
 8003a80:	4642      	mov	r2, r8
 8003a82:	189b      	adds	r3, r3, r2
 8003a84:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003a86:	464b      	mov	r3, r9
 8003a88:	460a      	mov	r2, r1
 8003a8a:	eb42 0303 	adc.w	r3, r2, r3
 8003a8e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003a90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	2200      	movs	r2, #0
 8003a98:	663b      	str	r3, [r7, #96]	@ 0x60
 8003a9a:	667a      	str	r2, [r7, #100]	@ 0x64
 8003a9c:	f04f 0200 	mov.w	r2, #0
 8003aa0:	f04f 0300 	mov.w	r3, #0
 8003aa4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003aa8:	4649      	mov	r1, r9
 8003aaa:	008b      	lsls	r3, r1, #2
 8003aac:	4641      	mov	r1, r8
 8003aae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ab2:	4641      	mov	r1, r8
 8003ab4:	008a      	lsls	r2, r1, #2
 8003ab6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003aba:	f7fc fb91 	bl	80001e0 <__aeabi_uldivmod>
 8003abe:	4602      	mov	r2, r0
 8003ac0:	460b      	mov	r3, r1
 8003ac2:	4b0d      	ldr	r3, [pc, #52]	@ (8003af8 <UART_SetConfig+0x4e4>)
 8003ac4:	fba3 1302 	umull	r1, r3, r3, r2
 8003ac8:	095b      	lsrs	r3, r3, #5
 8003aca:	2164      	movs	r1, #100	@ 0x64
 8003acc:	fb01 f303 	mul.w	r3, r1, r3
 8003ad0:	1ad3      	subs	r3, r2, r3
 8003ad2:	011b      	lsls	r3, r3, #4
 8003ad4:	3332      	adds	r3, #50	@ 0x32
 8003ad6:	4a08      	ldr	r2, [pc, #32]	@ (8003af8 <UART_SetConfig+0x4e4>)
 8003ad8:	fba2 2303 	umull	r2, r3, r2, r3
 8003adc:	095b      	lsrs	r3, r3, #5
 8003ade:	f003 020f 	and.w	r2, r3, #15
 8003ae2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4422      	add	r2, r4
 8003aea:	609a      	str	r2, [r3, #8]
}
 8003aec:	bf00      	nop
 8003aee:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003af2:	46bd      	mov	sp, r7
 8003af4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003af8:	51eb851f 	.word	0x51eb851f

08003afc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003afc:	b084      	sub	sp, #16
 8003afe:	b580      	push	{r7, lr}
 8003b00:	b084      	sub	sp, #16
 8003b02:	af00      	add	r7, sp, #0
 8003b04:	6078      	str	r0, [r7, #4]
 8003b06:	f107 001c 	add.w	r0, r7, #28
 8003b0a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003b0e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8003b12:	2b01      	cmp	r3, #1
 8003b14:	d123      	bne.n	8003b5e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b1a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	68db      	ldr	r3, [r3, #12]
 8003b26:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8003b2a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003b2e:	687a      	ldr	r2, [r7, #4]
 8003b30:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	68db      	ldr	r3, [r3, #12]
 8003b36:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003b3e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003b42:	2b01      	cmp	r3, #1
 8003b44:	d105      	bne.n	8003b52 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	68db      	ldr	r3, [r3, #12]
 8003b4a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f001 fae8 	bl	8005128 <USB_CoreReset>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	73fb      	strb	r3, [r7, #15]
 8003b5c:	e01b      	b.n	8003b96 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	68db      	ldr	r3, [r3, #12]
 8003b62:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	f001 fadc 	bl	8005128 <USB_CoreReset>
 8003b70:	4603      	mov	r3, r0
 8003b72:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003b74:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d106      	bne.n	8003b8a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b80:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	639a      	str	r2, [r3, #56]	@ 0x38
 8003b88:	e005      	b.n	8003b96 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b8e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003b96:	7fbb      	ldrb	r3, [r7, #30]
 8003b98:	2b01      	cmp	r3, #1
 8003b9a:	d10b      	bne.n	8003bb4 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	f043 0206 	orr.w	r2, r3, #6
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	f043 0220 	orr.w	r2, r3, #32
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003bb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	3710      	adds	r7, #16
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003bc0:	b004      	add	sp, #16
 8003bc2:	4770      	bx	lr

08003bc4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b087      	sub	sp, #28
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	60f8      	str	r0, [r7, #12]
 8003bcc:	60b9      	str	r1, [r7, #8]
 8003bce:	4613      	mov	r3, r2
 8003bd0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003bd2:	79fb      	ldrb	r3, [r7, #7]
 8003bd4:	2b02      	cmp	r3, #2
 8003bd6:	d165      	bne.n	8003ca4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	4a41      	ldr	r2, [pc, #260]	@ (8003ce0 <USB_SetTurnaroundTime+0x11c>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d906      	bls.n	8003bee <USB_SetTurnaroundTime+0x2a>
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	4a40      	ldr	r2, [pc, #256]	@ (8003ce4 <USB_SetTurnaroundTime+0x120>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d202      	bcs.n	8003bee <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003be8:	230f      	movs	r3, #15
 8003bea:	617b      	str	r3, [r7, #20]
 8003bec:	e062      	b.n	8003cb4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	4a3c      	ldr	r2, [pc, #240]	@ (8003ce4 <USB_SetTurnaroundTime+0x120>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d306      	bcc.n	8003c04 <USB_SetTurnaroundTime+0x40>
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	4a3b      	ldr	r2, [pc, #236]	@ (8003ce8 <USB_SetTurnaroundTime+0x124>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d202      	bcs.n	8003c04 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003bfe:	230e      	movs	r3, #14
 8003c00:	617b      	str	r3, [r7, #20]
 8003c02:	e057      	b.n	8003cb4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	4a38      	ldr	r2, [pc, #224]	@ (8003ce8 <USB_SetTurnaroundTime+0x124>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d306      	bcc.n	8003c1a <USB_SetTurnaroundTime+0x56>
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	4a37      	ldr	r2, [pc, #220]	@ (8003cec <USB_SetTurnaroundTime+0x128>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d202      	bcs.n	8003c1a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003c14:	230d      	movs	r3, #13
 8003c16:	617b      	str	r3, [r7, #20]
 8003c18:	e04c      	b.n	8003cb4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	4a33      	ldr	r2, [pc, #204]	@ (8003cec <USB_SetTurnaroundTime+0x128>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d306      	bcc.n	8003c30 <USB_SetTurnaroundTime+0x6c>
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	4a32      	ldr	r2, [pc, #200]	@ (8003cf0 <USB_SetTurnaroundTime+0x12c>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d802      	bhi.n	8003c30 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003c2a:	230c      	movs	r3, #12
 8003c2c:	617b      	str	r3, [r7, #20]
 8003c2e:	e041      	b.n	8003cb4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	4a2f      	ldr	r2, [pc, #188]	@ (8003cf0 <USB_SetTurnaroundTime+0x12c>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d906      	bls.n	8003c46 <USB_SetTurnaroundTime+0x82>
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	4a2e      	ldr	r2, [pc, #184]	@ (8003cf4 <USB_SetTurnaroundTime+0x130>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d802      	bhi.n	8003c46 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003c40:	230b      	movs	r3, #11
 8003c42:	617b      	str	r3, [r7, #20]
 8003c44:	e036      	b.n	8003cb4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	4a2a      	ldr	r2, [pc, #168]	@ (8003cf4 <USB_SetTurnaroundTime+0x130>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d906      	bls.n	8003c5c <USB_SetTurnaroundTime+0x98>
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	4a29      	ldr	r2, [pc, #164]	@ (8003cf8 <USB_SetTurnaroundTime+0x134>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d802      	bhi.n	8003c5c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003c56:	230a      	movs	r3, #10
 8003c58:	617b      	str	r3, [r7, #20]
 8003c5a:	e02b      	b.n	8003cb4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	4a26      	ldr	r2, [pc, #152]	@ (8003cf8 <USB_SetTurnaroundTime+0x134>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d906      	bls.n	8003c72 <USB_SetTurnaroundTime+0xae>
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	4a25      	ldr	r2, [pc, #148]	@ (8003cfc <USB_SetTurnaroundTime+0x138>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d202      	bcs.n	8003c72 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003c6c:	2309      	movs	r3, #9
 8003c6e:	617b      	str	r3, [r7, #20]
 8003c70:	e020      	b.n	8003cb4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	4a21      	ldr	r2, [pc, #132]	@ (8003cfc <USB_SetTurnaroundTime+0x138>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d306      	bcc.n	8003c88 <USB_SetTurnaroundTime+0xc4>
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	4a20      	ldr	r2, [pc, #128]	@ (8003d00 <USB_SetTurnaroundTime+0x13c>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d802      	bhi.n	8003c88 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003c82:	2308      	movs	r3, #8
 8003c84:	617b      	str	r3, [r7, #20]
 8003c86:	e015      	b.n	8003cb4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	4a1d      	ldr	r2, [pc, #116]	@ (8003d00 <USB_SetTurnaroundTime+0x13c>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d906      	bls.n	8003c9e <USB_SetTurnaroundTime+0xda>
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	4a1c      	ldr	r2, [pc, #112]	@ (8003d04 <USB_SetTurnaroundTime+0x140>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d202      	bcs.n	8003c9e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003c98:	2307      	movs	r3, #7
 8003c9a:	617b      	str	r3, [r7, #20]
 8003c9c:	e00a      	b.n	8003cb4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003c9e:	2306      	movs	r3, #6
 8003ca0:	617b      	str	r3, [r7, #20]
 8003ca2:	e007      	b.n	8003cb4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003ca4:	79fb      	ldrb	r3, [r7, #7]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d102      	bne.n	8003cb0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003caa:	2309      	movs	r3, #9
 8003cac:	617b      	str	r3, [r7, #20]
 8003cae:	e001      	b.n	8003cb4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003cb0:	2309      	movs	r3, #9
 8003cb2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	68db      	ldr	r3, [r3, #12]
 8003cb8:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	68da      	ldr	r2, [r3, #12]
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	029b      	lsls	r3, r3, #10
 8003cc8:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8003ccc:	431a      	orrs	r2, r3
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003cd2:	2300      	movs	r3, #0
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	371c      	adds	r7, #28
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cde:	4770      	bx	lr
 8003ce0:	00d8acbf 	.word	0x00d8acbf
 8003ce4:	00e4e1c0 	.word	0x00e4e1c0
 8003ce8:	00f42400 	.word	0x00f42400
 8003cec:	01067380 	.word	0x01067380
 8003cf0:	011a499f 	.word	0x011a499f
 8003cf4:	01312cff 	.word	0x01312cff
 8003cf8:	014ca43f 	.word	0x014ca43f
 8003cfc:	016e3600 	.word	0x016e3600
 8003d00:	01a6ab1f 	.word	0x01a6ab1f
 8003d04:	01e84800 	.word	0x01e84800

08003d08 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b083      	sub	sp, #12
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	f043 0201 	orr.w	r2, r3, #1
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003d1c:	2300      	movs	r3, #0
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	370c      	adds	r7, #12
 8003d22:	46bd      	mov	sp, r7
 8003d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d28:	4770      	bx	lr

08003d2a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003d2a:	b480      	push	{r7}
 8003d2c:	b083      	sub	sp, #12
 8003d2e:	af00      	add	r7, sp, #0
 8003d30:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	f023 0201 	bic.w	r2, r3, #1
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003d3e:	2300      	movs	r3, #0
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	370c      	adds	r7, #12
 8003d44:	46bd      	mov	sp, r7
 8003d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4a:	4770      	bx	lr

08003d4c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b084      	sub	sp, #16
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
 8003d54:	460b      	mov	r3, r1
 8003d56:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003d58:	2300      	movs	r3, #0
 8003d5a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	68db      	ldr	r3, [r3, #12]
 8003d60:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003d68:	78fb      	ldrb	r3, [r7, #3]
 8003d6a:	2b01      	cmp	r3, #1
 8003d6c:	d115      	bne.n	8003d9a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	68db      	ldr	r3, [r3, #12]
 8003d72:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003d7a:	200a      	movs	r0, #10
 8003d7c:	f7fc ff80 	bl	8000c80 <HAL_Delay>
      ms += 10U;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	330a      	adds	r3, #10
 8003d84:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	f001 f93f 	bl	800500a <USB_GetMode>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	2b01      	cmp	r3, #1
 8003d90:	d01e      	beq.n	8003dd0 <USB_SetCurrentMode+0x84>
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2bc7      	cmp	r3, #199	@ 0xc7
 8003d96:	d9f0      	bls.n	8003d7a <USB_SetCurrentMode+0x2e>
 8003d98:	e01a      	b.n	8003dd0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003d9a:	78fb      	ldrb	r3, [r7, #3]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d115      	bne.n	8003dcc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	68db      	ldr	r3, [r3, #12]
 8003da4:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003dac:	200a      	movs	r0, #10
 8003dae:	f7fc ff67 	bl	8000c80 <HAL_Delay>
      ms += 10U;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	330a      	adds	r3, #10
 8003db6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003db8:	6878      	ldr	r0, [r7, #4]
 8003dba:	f001 f926 	bl	800500a <USB_GetMode>
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d005      	beq.n	8003dd0 <USB_SetCurrentMode+0x84>
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	2bc7      	cmp	r3, #199	@ 0xc7
 8003dc8:	d9f0      	bls.n	8003dac <USB_SetCurrentMode+0x60>
 8003dca:	e001      	b.n	8003dd0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	e005      	b.n	8003ddc <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	2bc8      	cmp	r3, #200	@ 0xc8
 8003dd4:	d101      	bne.n	8003dda <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e000      	b.n	8003ddc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003dda:	2300      	movs	r3, #0
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	3710      	adds	r7, #16
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bd80      	pop	{r7, pc}

08003de4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003de4:	b084      	sub	sp, #16
 8003de6:	b580      	push	{r7, lr}
 8003de8:	b086      	sub	sp, #24
 8003dea:	af00      	add	r7, sp, #0
 8003dec:	6078      	str	r0, [r7, #4]
 8003dee:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8003df2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003df6:	2300      	movs	r3, #0
 8003df8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003dfe:	2300      	movs	r3, #0
 8003e00:	613b      	str	r3, [r7, #16]
 8003e02:	e009      	b.n	8003e18 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003e04:	687a      	ldr	r2, [r7, #4]
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	3340      	adds	r3, #64	@ 0x40
 8003e0a:	009b      	lsls	r3, r3, #2
 8003e0c:	4413      	add	r3, r2
 8003e0e:	2200      	movs	r2, #0
 8003e10:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	3301      	adds	r3, #1
 8003e16:	613b      	str	r3, [r7, #16]
 8003e18:	693b      	ldr	r3, [r7, #16]
 8003e1a:	2b0e      	cmp	r3, #14
 8003e1c:	d9f2      	bls.n	8003e04 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003e1e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d11c      	bne.n	8003e60 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	68fa      	ldr	r2, [r7, #12]
 8003e30:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003e34:	f043 0302 	orr.w	r3, r3, #2
 8003e38:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e3e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e4a:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e56:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	639a      	str	r2, [r3, #56]	@ 0x38
 8003e5e:	e00b      	b.n	8003e78 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e64:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e70:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8003e7e:	461a      	mov	r2, r3
 8003e80:	2300      	movs	r3, #0
 8003e82:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003e84:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	d10d      	bne.n	8003ea8 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003e8c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d104      	bne.n	8003e9e <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003e94:	2100      	movs	r1, #0
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	f000 f968 	bl	800416c <USB_SetDevSpeed>
 8003e9c:	e008      	b.n	8003eb0 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003e9e:	2101      	movs	r1, #1
 8003ea0:	6878      	ldr	r0, [r7, #4]
 8003ea2:	f000 f963 	bl	800416c <USB_SetDevSpeed>
 8003ea6:	e003      	b.n	8003eb0 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003ea8:	2103      	movs	r1, #3
 8003eaa:	6878      	ldr	r0, [r7, #4]
 8003eac:	f000 f95e 	bl	800416c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003eb0:	2110      	movs	r1, #16
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f000 f8fa 	bl	80040ac <USB_FlushTxFifo>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d001      	beq.n	8003ec2 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003ec2:	6878      	ldr	r0, [r7, #4]
 8003ec4:	f000 f924 	bl	8004110 <USB_FlushRxFifo>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d001      	beq.n	8003ed2 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ed8:	461a      	mov	r2, r3
 8003eda:	2300      	movs	r3, #0
 8003edc:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ee4:	461a      	mov	r2, r3
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ef0:	461a      	mov	r2, r3
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	613b      	str	r3, [r7, #16]
 8003efa:	e043      	b.n	8003f84 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	015a      	lsls	r2, r3, #5
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	4413      	add	r3, r2
 8003f04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003f0e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003f12:	d118      	bne.n	8003f46 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d10a      	bne.n	8003f30 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	015a      	lsls	r2, r3, #5
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	4413      	add	r3, r2
 8003f22:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f26:	461a      	mov	r2, r3
 8003f28:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003f2c:	6013      	str	r3, [r2, #0]
 8003f2e:	e013      	b.n	8003f58 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003f30:	693b      	ldr	r3, [r7, #16]
 8003f32:	015a      	lsls	r2, r3, #5
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	4413      	add	r3, r2
 8003f38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f3c:	461a      	mov	r2, r3
 8003f3e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003f42:	6013      	str	r3, [r2, #0]
 8003f44:	e008      	b.n	8003f58 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	015a      	lsls	r2, r3, #5
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	4413      	add	r3, r2
 8003f4e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f52:	461a      	mov	r2, r3
 8003f54:	2300      	movs	r3, #0
 8003f56:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	015a      	lsls	r2, r3, #5
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	4413      	add	r3, r2
 8003f60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f64:	461a      	mov	r2, r3
 8003f66:	2300      	movs	r3, #0
 8003f68:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	015a      	lsls	r2, r3, #5
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	4413      	add	r3, r2
 8003f72:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f76:	461a      	mov	r2, r3
 8003f78:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003f7c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	3301      	adds	r3, #1
 8003f82:	613b      	str	r3, [r7, #16]
 8003f84:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003f88:	461a      	mov	r2, r3
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d3b5      	bcc.n	8003efc <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003f90:	2300      	movs	r3, #0
 8003f92:	613b      	str	r3, [r7, #16]
 8003f94:	e043      	b.n	800401e <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	015a      	lsls	r2, r3, #5
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	4413      	add	r3, r2
 8003f9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003fa8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003fac:	d118      	bne.n	8003fe0 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d10a      	bne.n	8003fca <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	015a      	lsls	r2, r3, #5
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	4413      	add	r3, r2
 8003fbc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003fc0:	461a      	mov	r2, r3
 8003fc2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003fc6:	6013      	str	r3, [r2, #0]
 8003fc8:	e013      	b.n	8003ff2 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	015a      	lsls	r2, r3, #5
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	4413      	add	r3, r2
 8003fd2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003fd6:	461a      	mov	r2, r3
 8003fd8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003fdc:	6013      	str	r3, [r2, #0]
 8003fde:	e008      	b.n	8003ff2 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	015a      	lsls	r2, r3, #5
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	4413      	add	r3, r2
 8003fe8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003fec:	461a      	mov	r2, r3
 8003fee:	2300      	movs	r3, #0
 8003ff0:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	015a      	lsls	r2, r3, #5
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	4413      	add	r3, r2
 8003ffa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ffe:	461a      	mov	r2, r3
 8004000:	2300      	movs	r3, #0
 8004002:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004004:	693b      	ldr	r3, [r7, #16]
 8004006:	015a      	lsls	r2, r3, #5
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	4413      	add	r3, r2
 800400c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004010:	461a      	mov	r2, r3
 8004012:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004016:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004018:	693b      	ldr	r3, [r7, #16]
 800401a:	3301      	adds	r3, #1
 800401c:	613b      	str	r3, [r7, #16]
 800401e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004022:	461a      	mov	r2, r3
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	4293      	cmp	r3, r2
 8004028:	d3b5      	bcc.n	8003f96 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004030:	691b      	ldr	r3, [r3, #16]
 8004032:	68fa      	ldr	r2, [r7, #12]
 8004034:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004038:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800403c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2200      	movs	r2, #0
 8004042:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800404a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800404c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004050:	2b00      	cmp	r3, #0
 8004052:	d105      	bne.n	8004060 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	699b      	ldr	r3, [r3, #24]
 8004058:	f043 0210 	orr.w	r2, r3, #16
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	699a      	ldr	r2, [r3, #24]
 8004064:	4b10      	ldr	r3, [pc, #64]	@ (80040a8 <USB_DevInit+0x2c4>)
 8004066:	4313      	orrs	r3, r2
 8004068:	687a      	ldr	r2, [r7, #4]
 800406a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800406c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8004070:	2b00      	cmp	r3, #0
 8004072:	d005      	beq.n	8004080 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	699b      	ldr	r3, [r3, #24]
 8004078:	f043 0208 	orr.w	r2, r3, #8
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004080:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004084:	2b01      	cmp	r3, #1
 8004086:	d107      	bne.n	8004098 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	699b      	ldr	r3, [r3, #24]
 800408c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004090:	f043 0304 	orr.w	r3, r3, #4
 8004094:	687a      	ldr	r2, [r7, #4]
 8004096:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004098:	7dfb      	ldrb	r3, [r7, #23]
}
 800409a:	4618      	mov	r0, r3
 800409c:	3718      	adds	r7, #24
 800409e:	46bd      	mov	sp, r7
 80040a0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80040a4:	b004      	add	sp, #16
 80040a6:	4770      	bx	lr
 80040a8:	803c3800 	.word	0x803c3800

080040ac <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b085      	sub	sp, #20
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
 80040b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80040b6:	2300      	movs	r3, #0
 80040b8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	3301      	adds	r3, #1
 80040be:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80040c6:	d901      	bls.n	80040cc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80040c8:	2303      	movs	r3, #3
 80040ca:	e01b      	b.n	8004104 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	691b      	ldr	r3, [r3, #16]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	daf2      	bge.n	80040ba <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80040d4:	2300      	movs	r3, #0
 80040d6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	019b      	lsls	r3, r3, #6
 80040dc:	f043 0220 	orr.w	r2, r3, #32
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	3301      	adds	r3, #1
 80040e8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80040f0:	d901      	bls.n	80040f6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80040f2:	2303      	movs	r3, #3
 80040f4:	e006      	b.n	8004104 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	691b      	ldr	r3, [r3, #16]
 80040fa:	f003 0320 	and.w	r3, r3, #32
 80040fe:	2b20      	cmp	r3, #32
 8004100:	d0f0      	beq.n	80040e4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004102:	2300      	movs	r3, #0
}
 8004104:	4618      	mov	r0, r3
 8004106:	3714      	adds	r7, #20
 8004108:	46bd      	mov	sp, r7
 800410a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410e:	4770      	bx	lr

08004110 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004110:	b480      	push	{r7}
 8004112:	b085      	sub	sp, #20
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004118:	2300      	movs	r3, #0
 800411a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	3301      	adds	r3, #1
 8004120:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004128:	d901      	bls.n	800412e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800412a:	2303      	movs	r3, #3
 800412c:	e018      	b.n	8004160 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	691b      	ldr	r3, [r3, #16]
 8004132:	2b00      	cmp	r3, #0
 8004134:	daf2      	bge.n	800411c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004136:	2300      	movs	r3, #0
 8004138:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2210      	movs	r2, #16
 800413e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	3301      	adds	r3, #1
 8004144:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800414c:	d901      	bls.n	8004152 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800414e:	2303      	movs	r3, #3
 8004150:	e006      	b.n	8004160 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	691b      	ldr	r3, [r3, #16]
 8004156:	f003 0310 	and.w	r3, r3, #16
 800415a:	2b10      	cmp	r3, #16
 800415c:	d0f0      	beq.n	8004140 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800415e:	2300      	movs	r3, #0
}
 8004160:	4618      	mov	r0, r3
 8004162:	3714      	adds	r7, #20
 8004164:	46bd      	mov	sp, r7
 8004166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416a:	4770      	bx	lr

0800416c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800416c:	b480      	push	{r7}
 800416e:	b085      	sub	sp, #20
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
 8004174:	460b      	mov	r3, r1
 8004176:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	78fb      	ldrb	r3, [r7, #3]
 8004186:	68f9      	ldr	r1, [r7, #12]
 8004188:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800418c:	4313      	orrs	r3, r2
 800418e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004190:	2300      	movs	r3, #0
}
 8004192:	4618      	mov	r0, r3
 8004194:	3714      	adds	r7, #20
 8004196:	46bd      	mov	sp, r7
 8004198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419c:	4770      	bx	lr

0800419e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800419e:	b480      	push	{r7}
 80041a0:	b087      	sub	sp, #28
 80041a2:	af00      	add	r7, sp, #0
 80041a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80041b0:	689b      	ldr	r3, [r3, #8]
 80041b2:	f003 0306 	and.w	r3, r3, #6
 80041b6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d102      	bne.n	80041c4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80041be:	2300      	movs	r3, #0
 80041c0:	75fb      	strb	r3, [r7, #23]
 80041c2:	e00a      	b.n	80041da <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2b02      	cmp	r3, #2
 80041c8:	d002      	beq.n	80041d0 <USB_GetDevSpeed+0x32>
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	2b06      	cmp	r3, #6
 80041ce:	d102      	bne.n	80041d6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80041d0:	2302      	movs	r3, #2
 80041d2:	75fb      	strb	r3, [r7, #23]
 80041d4:	e001      	b.n	80041da <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80041d6:	230f      	movs	r3, #15
 80041d8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80041da:	7dfb      	ldrb	r3, [r7, #23]
}
 80041dc:	4618      	mov	r0, r3
 80041de:	371c      	adds	r7, #28
 80041e0:	46bd      	mov	sp, r7
 80041e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e6:	4770      	bx	lr

080041e8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b085      	sub	sp, #20
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
 80041f0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	781b      	ldrb	r3, [r3, #0]
 80041fa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	785b      	ldrb	r3, [r3, #1]
 8004200:	2b01      	cmp	r3, #1
 8004202:	d13a      	bne.n	800427a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800420a:	69da      	ldr	r2, [r3, #28]
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	781b      	ldrb	r3, [r3, #0]
 8004210:	f003 030f 	and.w	r3, r3, #15
 8004214:	2101      	movs	r1, #1
 8004216:	fa01 f303 	lsl.w	r3, r1, r3
 800421a:	b29b      	uxth	r3, r3
 800421c:	68f9      	ldr	r1, [r7, #12]
 800421e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004222:	4313      	orrs	r3, r2
 8004224:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	015a      	lsls	r2, r3, #5
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	4413      	add	r3, r2
 800422e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004238:	2b00      	cmp	r3, #0
 800423a:	d155      	bne.n	80042e8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	015a      	lsls	r2, r3, #5
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	4413      	add	r3, r2
 8004244:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004248:	681a      	ldr	r2, [r3, #0]
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	689b      	ldr	r3, [r3, #8]
 800424e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	791b      	ldrb	r3, [r3, #4]
 8004256:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004258:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	059b      	lsls	r3, r3, #22
 800425e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004260:	4313      	orrs	r3, r2
 8004262:	68ba      	ldr	r2, [r7, #8]
 8004264:	0151      	lsls	r1, r2, #5
 8004266:	68fa      	ldr	r2, [r7, #12]
 8004268:	440a      	add	r2, r1
 800426a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800426e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004272:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004276:	6013      	str	r3, [r2, #0]
 8004278:	e036      	b.n	80042e8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004280:	69da      	ldr	r2, [r3, #28]
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	781b      	ldrb	r3, [r3, #0]
 8004286:	f003 030f 	and.w	r3, r3, #15
 800428a:	2101      	movs	r1, #1
 800428c:	fa01 f303 	lsl.w	r3, r1, r3
 8004290:	041b      	lsls	r3, r3, #16
 8004292:	68f9      	ldr	r1, [r7, #12]
 8004294:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004298:	4313      	orrs	r3, r2
 800429a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	015a      	lsls	r2, r3, #5
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	4413      	add	r3, r2
 80042a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d11a      	bne.n	80042e8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	015a      	lsls	r2, r3, #5
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	4413      	add	r3, r2
 80042ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042be:	681a      	ldr	r2, [r3, #0]
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	791b      	ldrb	r3, [r3, #4]
 80042cc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80042ce:	430b      	orrs	r3, r1
 80042d0:	4313      	orrs	r3, r2
 80042d2:	68ba      	ldr	r2, [r7, #8]
 80042d4:	0151      	lsls	r1, r2, #5
 80042d6:	68fa      	ldr	r2, [r7, #12]
 80042d8:	440a      	add	r2, r1
 80042da:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80042de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80042e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80042e6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80042e8:	2300      	movs	r3, #0
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	3714      	adds	r7, #20
 80042ee:	46bd      	mov	sp, r7
 80042f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f4:	4770      	bx	lr
	...

080042f8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b085      	sub	sp, #20
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
 8004300:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	781b      	ldrb	r3, [r3, #0]
 800430a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	785b      	ldrb	r3, [r3, #1]
 8004310:	2b01      	cmp	r3, #1
 8004312:	d161      	bne.n	80043d8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	015a      	lsls	r2, r3, #5
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	4413      	add	r3, r2
 800431c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004326:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800432a:	d11f      	bne.n	800436c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	015a      	lsls	r2, r3, #5
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	4413      	add	r3, r2
 8004334:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	68ba      	ldr	r2, [r7, #8]
 800433c:	0151      	lsls	r1, r2, #5
 800433e:	68fa      	ldr	r2, [r7, #12]
 8004340:	440a      	add	r2, r1
 8004342:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004346:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800434a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	015a      	lsls	r2, r3, #5
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	4413      	add	r3, r2
 8004354:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	68ba      	ldr	r2, [r7, #8]
 800435c:	0151      	lsls	r1, r2, #5
 800435e:	68fa      	ldr	r2, [r7, #12]
 8004360:	440a      	add	r2, r1
 8004362:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004366:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800436a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004372:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	781b      	ldrb	r3, [r3, #0]
 8004378:	f003 030f 	and.w	r3, r3, #15
 800437c:	2101      	movs	r1, #1
 800437e:	fa01 f303 	lsl.w	r3, r1, r3
 8004382:	b29b      	uxth	r3, r3
 8004384:	43db      	mvns	r3, r3
 8004386:	68f9      	ldr	r1, [r7, #12]
 8004388:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800438c:	4013      	ands	r3, r2
 800438e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004396:	69da      	ldr	r2, [r3, #28]
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	781b      	ldrb	r3, [r3, #0]
 800439c:	f003 030f 	and.w	r3, r3, #15
 80043a0:	2101      	movs	r1, #1
 80043a2:	fa01 f303 	lsl.w	r3, r1, r3
 80043a6:	b29b      	uxth	r3, r3
 80043a8:	43db      	mvns	r3, r3
 80043aa:	68f9      	ldr	r1, [r7, #12]
 80043ac:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80043b0:	4013      	ands	r3, r2
 80043b2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	015a      	lsls	r2, r3, #5
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	4413      	add	r3, r2
 80043bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80043c0:	681a      	ldr	r2, [r3, #0]
 80043c2:	68bb      	ldr	r3, [r7, #8]
 80043c4:	0159      	lsls	r1, r3, #5
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	440b      	add	r3, r1
 80043ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80043ce:	4619      	mov	r1, r3
 80043d0:	4b35      	ldr	r3, [pc, #212]	@ (80044a8 <USB_DeactivateEndpoint+0x1b0>)
 80043d2:	4013      	ands	r3, r2
 80043d4:	600b      	str	r3, [r1, #0]
 80043d6:	e060      	b.n	800449a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	015a      	lsls	r2, r3, #5
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	4413      	add	r3, r2
 80043e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80043ea:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80043ee:	d11f      	bne.n	8004430 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	015a      	lsls	r2, r3, #5
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	4413      	add	r3, r2
 80043f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	68ba      	ldr	r2, [r7, #8]
 8004400:	0151      	lsls	r1, r2, #5
 8004402:	68fa      	ldr	r2, [r7, #12]
 8004404:	440a      	add	r2, r1
 8004406:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800440a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800440e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	015a      	lsls	r2, r3, #5
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	4413      	add	r3, r2
 8004418:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	68ba      	ldr	r2, [r7, #8]
 8004420:	0151      	lsls	r1, r2, #5
 8004422:	68fa      	ldr	r2, [r7, #12]
 8004424:	440a      	add	r2, r1
 8004426:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800442a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800442e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004436:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	781b      	ldrb	r3, [r3, #0]
 800443c:	f003 030f 	and.w	r3, r3, #15
 8004440:	2101      	movs	r1, #1
 8004442:	fa01 f303 	lsl.w	r3, r1, r3
 8004446:	041b      	lsls	r3, r3, #16
 8004448:	43db      	mvns	r3, r3
 800444a:	68f9      	ldr	r1, [r7, #12]
 800444c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004450:	4013      	ands	r3, r2
 8004452:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800445a:	69da      	ldr	r2, [r3, #28]
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	781b      	ldrb	r3, [r3, #0]
 8004460:	f003 030f 	and.w	r3, r3, #15
 8004464:	2101      	movs	r1, #1
 8004466:	fa01 f303 	lsl.w	r3, r1, r3
 800446a:	041b      	lsls	r3, r3, #16
 800446c:	43db      	mvns	r3, r3
 800446e:	68f9      	ldr	r1, [r7, #12]
 8004470:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004474:	4013      	ands	r3, r2
 8004476:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	015a      	lsls	r2, r3, #5
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	4413      	add	r3, r2
 8004480:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004484:	681a      	ldr	r2, [r3, #0]
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	0159      	lsls	r1, r3, #5
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	440b      	add	r3, r1
 800448e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004492:	4619      	mov	r1, r3
 8004494:	4b05      	ldr	r3, [pc, #20]	@ (80044ac <USB_DeactivateEndpoint+0x1b4>)
 8004496:	4013      	ands	r3, r2
 8004498:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800449a:	2300      	movs	r3, #0
}
 800449c:	4618      	mov	r0, r3
 800449e:	3714      	adds	r7, #20
 80044a0:	46bd      	mov	sp, r7
 80044a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a6:	4770      	bx	lr
 80044a8:	ec337800 	.word	0xec337800
 80044ac:	eff37800 	.word	0xeff37800

080044b0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b08a      	sub	sp, #40	@ 0x28
 80044b4:	af02      	add	r7, sp, #8
 80044b6:	60f8      	str	r0, [r7, #12]
 80044b8:	60b9      	str	r1, [r7, #8]
 80044ba:	4613      	mov	r3, r2
 80044bc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	781b      	ldrb	r3, [r3, #0]
 80044c6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	785b      	ldrb	r3, [r3, #1]
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	f040 817f 	bne.w	80047d0 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	691b      	ldr	r3, [r3, #16]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d132      	bne.n	8004540 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80044da:	69bb      	ldr	r3, [r7, #24]
 80044dc:	015a      	lsls	r2, r3, #5
 80044de:	69fb      	ldr	r3, [r7, #28]
 80044e0:	4413      	add	r3, r2
 80044e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80044e6:	691b      	ldr	r3, [r3, #16]
 80044e8:	69ba      	ldr	r2, [r7, #24]
 80044ea:	0151      	lsls	r1, r2, #5
 80044ec:	69fa      	ldr	r2, [r7, #28]
 80044ee:	440a      	add	r2, r1
 80044f0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80044f4:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80044f8:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80044fc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80044fe:	69bb      	ldr	r3, [r7, #24]
 8004500:	015a      	lsls	r2, r3, #5
 8004502:	69fb      	ldr	r3, [r7, #28]
 8004504:	4413      	add	r3, r2
 8004506:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800450a:	691b      	ldr	r3, [r3, #16]
 800450c:	69ba      	ldr	r2, [r7, #24]
 800450e:	0151      	lsls	r1, r2, #5
 8004510:	69fa      	ldr	r2, [r7, #28]
 8004512:	440a      	add	r2, r1
 8004514:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004518:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800451c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800451e:	69bb      	ldr	r3, [r7, #24]
 8004520:	015a      	lsls	r2, r3, #5
 8004522:	69fb      	ldr	r3, [r7, #28]
 8004524:	4413      	add	r3, r2
 8004526:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800452a:	691b      	ldr	r3, [r3, #16]
 800452c:	69ba      	ldr	r2, [r7, #24]
 800452e:	0151      	lsls	r1, r2, #5
 8004530:	69fa      	ldr	r2, [r7, #28]
 8004532:	440a      	add	r2, r1
 8004534:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004538:	0cdb      	lsrs	r3, r3, #19
 800453a:	04db      	lsls	r3, r3, #19
 800453c:	6113      	str	r3, [r2, #16]
 800453e:	e097      	b.n	8004670 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004540:	69bb      	ldr	r3, [r7, #24]
 8004542:	015a      	lsls	r2, r3, #5
 8004544:	69fb      	ldr	r3, [r7, #28]
 8004546:	4413      	add	r3, r2
 8004548:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800454c:	691b      	ldr	r3, [r3, #16]
 800454e:	69ba      	ldr	r2, [r7, #24]
 8004550:	0151      	lsls	r1, r2, #5
 8004552:	69fa      	ldr	r2, [r7, #28]
 8004554:	440a      	add	r2, r1
 8004556:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800455a:	0cdb      	lsrs	r3, r3, #19
 800455c:	04db      	lsls	r3, r3, #19
 800455e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004560:	69bb      	ldr	r3, [r7, #24]
 8004562:	015a      	lsls	r2, r3, #5
 8004564:	69fb      	ldr	r3, [r7, #28]
 8004566:	4413      	add	r3, r2
 8004568:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800456c:	691b      	ldr	r3, [r3, #16]
 800456e:	69ba      	ldr	r2, [r7, #24]
 8004570:	0151      	lsls	r1, r2, #5
 8004572:	69fa      	ldr	r2, [r7, #28]
 8004574:	440a      	add	r2, r1
 8004576:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800457a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800457e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004582:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8004584:	69bb      	ldr	r3, [r7, #24]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d11a      	bne.n	80045c0 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800458a:	68bb      	ldr	r3, [r7, #8]
 800458c:	691a      	ldr	r2, [r3, #16]
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	689b      	ldr	r3, [r3, #8]
 8004592:	429a      	cmp	r2, r3
 8004594:	d903      	bls.n	800459e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	689a      	ldr	r2, [r3, #8]
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800459e:	69bb      	ldr	r3, [r7, #24]
 80045a0:	015a      	lsls	r2, r3, #5
 80045a2:	69fb      	ldr	r3, [r7, #28]
 80045a4:	4413      	add	r3, r2
 80045a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80045aa:	691b      	ldr	r3, [r3, #16]
 80045ac:	69ba      	ldr	r2, [r7, #24]
 80045ae:	0151      	lsls	r1, r2, #5
 80045b0:	69fa      	ldr	r2, [r7, #28]
 80045b2:	440a      	add	r2, r1
 80045b4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80045b8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80045bc:	6113      	str	r3, [r2, #16]
 80045be:	e044      	b.n	800464a <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	691a      	ldr	r2, [r3, #16]
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	689b      	ldr	r3, [r3, #8]
 80045c8:	4413      	add	r3, r2
 80045ca:	1e5a      	subs	r2, r3, #1
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	689b      	ldr	r3, [r3, #8]
 80045d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80045d4:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 80045d6:	69bb      	ldr	r3, [r7, #24]
 80045d8:	015a      	lsls	r2, r3, #5
 80045da:	69fb      	ldr	r3, [r7, #28]
 80045dc:	4413      	add	r3, r2
 80045de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80045e2:	691a      	ldr	r2, [r3, #16]
 80045e4:	8afb      	ldrh	r3, [r7, #22]
 80045e6:	04d9      	lsls	r1, r3, #19
 80045e8:	4ba4      	ldr	r3, [pc, #656]	@ (800487c <USB_EPStartXfer+0x3cc>)
 80045ea:	400b      	ands	r3, r1
 80045ec:	69b9      	ldr	r1, [r7, #24]
 80045ee:	0148      	lsls	r0, r1, #5
 80045f0:	69f9      	ldr	r1, [r7, #28]
 80045f2:	4401      	add	r1, r0
 80045f4:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80045f8:	4313      	orrs	r3, r2
 80045fa:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	791b      	ldrb	r3, [r3, #4]
 8004600:	2b01      	cmp	r3, #1
 8004602:	d122      	bne.n	800464a <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004604:	69bb      	ldr	r3, [r7, #24]
 8004606:	015a      	lsls	r2, r3, #5
 8004608:	69fb      	ldr	r3, [r7, #28]
 800460a:	4413      	add	r3, r2
 800460c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004610:	691b      	ldr	r3, [r3, #16]
 8004612:	69ba      	ldr	r2, [r7, #24]
 8004614:	0151      	lsls	r1, r2, #5
 8004616:	69fa      	ldr	r2, [r7, #28]
 8004618:	440a      	add	r2, r1
 800461a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800461e:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8004622:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8004624:	69bb      	ldr	r3, [r7, #24]
 8004626:	015a      	lsls	r2, r3, #5
 8004628:	69fb      	ldr	r3, [r7, #28]
 800462a:	4413      	add	r3, r2
 800462c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004630:	691a      	ldr	r2, [r3, #16]
 8004632:	8afb      	ldrh	r3, [r7, #22]
 8004634:	075b      	lsls	r3, r3, #29
 8004636:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800463a:	69b9      	ldr	r1, [r7, #24]
 800463c:	0148      	lsls	r0, r1, #5
 800463e:	69f9      	ldr	r1, [r7, #28]
 8004640:	4401      	add	r1, r0
 8004642:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004646:	4313      	orrs	r3, r2
 8004648:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800464a:	69bb      	ldr	r3, [r7, #24]
 800464c:	015a      	lsls	r2, r3, #5
 800464e:	69fb      	ldr	r3, [r7, #28]
 8004650:	4413      	add	r3, r2
 8004652:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004656:	691a      	ldr	r2, [r3, #16]
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	691b      	ldr	r3, [r3, #16]
 800465c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004660:	69b9      	ldr	r1, [r7, #24]
 8004662:	0148      	lsls	r0, r1, #5
 8004664:	69f9      	ldr	r1, [r7, #28]
 8004666:	4401      	add	r1, r0
 8004668:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800466c:	4313      	orrs	r3, r2
 800466e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004670:	79fb      	ldrb	r3, [r7, #7]
 8004672:	2b01      	cmp	r3, #1
 8004674:	d14b      	bne.n	800470e <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	69db      	ldr	r3, [r3, #28]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d009      	beq.n	8004692 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800467e:	69bb      	ldr	r3, [r7, #24]
 8004680:	015a      	lsls	r2, r3, #5
 8004682:	69fb      	ldr	r3, [r7, #28]
 8004684:	4413      	add	r3, r2
 8004686:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800468a:	461a      	mov	r2, r3
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	69db      	ldr	r3, [r3, #28]
 8004690:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	791b      	ldrb	r3, [r3, #4]
 8004696:	2b01      	cmp	r3, #1
 8004698:	d128      	bne.n	80046ec <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800469a:	69fb      	ldr	r3, [r7, #28]
 800469c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d110      	bne.n	80046cc <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80046aa:	69bb      	ldr	r3, [r7, #24]
 80046ac:	015a      	lsls	r2, r3, #5
 80046ae:	69fb      	ldr	r3, [r7, #28]
 80046b0:	4413      	add	r3, r2
 80046b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	69ba      	ldr	r2, [r7, #24]
 80046ba:	0151      	lsls	r1, r2, #5
 80046bc:	69fa      	ldr	r2, [r7, #28]
 80046be:	440a      	add	r2, r1
 80046c0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80046c4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80046c8:	6013      	str	r3, [r2, #0]
 80046ca:	e00f      	b.n	80046ec <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80046cc:	69bb      	ldr	r3, [r7, #24]
 80046ce:	015a      	lsls	r2, r3, #5
 80046d0:	69fb      	ldr	r3, [r7, #28]
 80046d2:	4413      	add	r3, r2
 80046d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	69ba      	ldr	r2, [r7, #24]
 80046dc:	0151      	lsls	r1, r2, #5
 80046de:	69fa      	ldr	r2, [r7, #28]
 80046e0:	440a      	add	r2, r1
 80046e2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80046e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80046ea:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80046ec:	69bb      	ldr	r3, [r7, #24]
 80046ee:	015a      	lsls	r2, r3, #5
 80046f0:	69fb      	ldr	r3, [r7, #28]
 80046f2:	4413      	add	r3, r2
 80046f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	69ba      	ldr	r2, [r7, #24]
 80046fc:	0151      	lsls	r1, r2, #5
 80046fe:	69fa      	ldr	r2, [r7, #28]
 8004700:	440a      	add	r2, r1
 8004702:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004706:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800470a:	6013      	str	r3, [r2, #0]
 800470c:	e166      	b.n	80049dc <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800470e:	69bb      	ldr	r3, [r7, #24]
 8004710:	015a      	lsls	r2, r3, #5
 8004712:	69fb      	ldr	r3, [r7, #28]
 8004714:	4413      	add	r3, r2
 8004716:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	69ba      	ldr	r2, [r7, #24]
 800471e:	0151      	lsls	r1, r2, #5
 8004720:	69fa      	ldr	r2, [r7, #28]
 8004722:	440a      	add	r2, r1
 8004724:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004728:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800472c:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	791b      	ldrb	r3, [r3, #4]
 8004732:	2b01      	cmp	r3, #1
 8004734:	d015      	beq.n	8004762 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	691b      	ldr	r3, [r3, #16]
 800473a:	2b00      	cmp	r3, #0
 800473c:	f000 814e 	beq.w	80049dc <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004740:	69fb      	ldr	r3, [r7, #28]
 8004742:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004746:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	781b      	ldrb	r3, [r3, #0]
 800474c:	f003 030f 	and.w	r3, r3, #15
 8004750:	2101      	movs	r1, #1
 8004752:	fa01 f303 	lsl.w	r3, r1, r3
 8004756:	69f9      	ldr	r1, [r7, #28]
 8004758:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800475c:	4313      	orrs	r3, r2
 800475e:	634b      	str	r3, [r1, #52]	@ 0x34
 8004760:	e13c      	b.n	80049dc <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004762:	69fb      	ldr	r3, [r7, #28]
 8004764:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004768:	689b      	ldr	r3, [r3, #8]
 800476a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800476e:	2b00      	cmp	r3, #0
 8004770:	d110      	bne.n	8004794 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004772:	69bb      	ldr	r3, [r7, #24]
 8004774:	015a      	lsls	r2, r3, #5
 8004776:	69fb      	ldr	r3, [r7, #28]
 8004778:	4413      	add	r3, r2
 800477a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	69ba      	ldr	r2, [r7, #24]
 8004782:	0151      	lsls	r1, r2, #5
 8004784:	69fa      	ldr	r2, [r7, #28]
 8004786:	440a      	add	r2, r1
 8004788:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800478c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004790:	6013      	str	r3, [r2, #0]
 8004792:	e00f      	b.n	80047b4 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004794:	69bb      	ldr	r3, [r7, #24]
 8004796:	015a      	lsls	r2, r3, #5
 8004798:	69fb      	ldr	r3, [r7, #28]
 800479a:	4413      	add	r3, r2
 800479c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	69ba      	ldr	r2, [r7, #24]
 80047a4:	0151      	lsls	r1, r2, #5
 80047a6:	69fa      	ldr	r2, [r7, #28]
 80047a8:	440a      	add	r2, r1
 80047aa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80047ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80047b2:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	68d9      	ldr	r1, [r3, #12]
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	781a      	ldrb	r2, [r3, #0]
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	691b      	ldr	r3, [r3, #16]
 80047c0:	b298      	uxth	r0, r3
 80047c2:	79fb      	ldrb	r3, [r7, #7]
 80047c4:	9300      	str	r3, [sp, #0]
 80047c6:	4603      	mov	r3, r0
 80047c8:	68f8      	ldr	r0, [r7, #12]
 80047ca:	f000 f9b9 	bl	8004b40 <USB_WritePacket>
 80047ce:	e105      	b.n	80049dc <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80047d0:	69bb      	ldr	r3, [r7, #24]
 80047d2:	015a      	lsls	r2, r3, #5
 80047d4:	69fb      	ldr	r3, [r7, #28]
 80047d6:	4413      	add	r3, r2
 80047d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047dc:	691b      	ldr	r3, [r3, #16]
 80047de:	69ba      	ldr	r2, [r7, #24]
 80047e0:	0151      	lsls	r1, r2, #5
 80047e2:	69fa      	ldr	r2, [r7, #28]
 80047e4:	440a      	add	r2, r1
 80047e6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80047ea:	0cdb      	lsrs	r3, r3, #19
 80047ec:	04db      	lsls	r3, r3, #19
 80047ee:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80047f0:	69bb      	ldr	r3, [r7, #24]
 80047f2:	015a      	lsls	r2, r3, #5
 80047f4:	69fb      	ldr	r3, [r7, #28]
 80047f6:	4413      	add	r3, r2
 80047f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047fc:	691b      	ldr	r3, [r3, #16]
 80047fe:	69ba      	ldr	r2, [r7, #24]
 8004800:	0151      	lsls	r1, r2, #5
 8004802:	69fa      	ldr	r2, [r7, #28]
 8004804:	440a      	add	r2, r1
 8004806:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800480a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800480e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004812:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8004814:	69bb      	ldr	r3, [r7, #24]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d132      	bne.n	8004880 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	691b      	ldr	r3, [r3, #16]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d003      	beq.n	800482a <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	689a      	ldr	r2, [r3, #8]
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	689a      	ldr	r2, [r3, #8]
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004832:	69bb      	ldr	r3, [r7, #24]
 8004834:	015a      	lsls	r2, r3, #5
 8004836:	69fb      	ldr	r3, [r7, #28]
 8004838:	4413      	add	r3, r2
 800483a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800483e:	691a      	ldr	r2, [r3, #16]
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	6a1b      	ldr	r3, [r3, #32]
 8004844:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004848:	69b9      	ldr	r1, [r7, #24]
 800484a:	0148      	lsls	r0, r1, #5
 800484c:	69f9      	ldr	r1, [r7, #28]
 800484e:	4401      	add	r1, r0
 8004850:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004854:	4313      	orrs	r3, r2
 8004856:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004858:	69bb      	ldr	r3, [r7, #24]
 800485a:	015a      	lsls	r2, r3, #5
 800485c:	69fb      	ldr	r3, [r7, #28]
 800485e:	4413      	add	r3, r2
 8004860:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004864:	691b      	ldr	r3, [r3, #16]
 8004866:	69ba      	ldr	r2, [r7, #24]
 8004868:	0151      	lsls	r1, r2, #5
 800486a:	69fa      	ldr	r2, [r7, #28]
 800486c:	440a      	add	r2, r1
 800486e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004872:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004876:	6113      	str	r3, [r2, #16]
 8004878:	e062      	b.n	8004940 <USB_EPStartXfer+0x490>
 800487a:	bf00      	nop
 800487c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	691b      	ldr	r3, [r3, #16]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d123      	bne.n	80048d0 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004888:	69bb      	ldr	r3, [r7, #24]
 800488a:	015a      	lsls	r2, r3, #5
 800488c:	69fb      	ldr	r3, [r7, #28]
 800488e:	4413      	add	r3, r2
 8004890:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004894:	691a      	ldr	r2, [r3, #16]
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	689b      	ldr	r3, [r3, #8]
 800489a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800489e:	69b9      	ldr	r1, [r7, #24]
 80048a0:	0148      	lsls	r0, r1, #5
 80048a2:	69f9      	ldr	r1, [r7, #28]
 80048a4:	4401      	add	r1, r0
 80048a6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80048aa:	4313      	orrs	r3, r2
 80048ac:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80048ae:	69bb      	ldr	r3, [r7, #24]
 80048b0:	015a      	lsls	r2, r3, #5
 80048b2:	69fb      	ldr	r3, [r7, #28]
 80048b4:	4413      	add	r3, r2
 80048b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80048ba:	691b      	ldr	r3, [r3, #16]
 80048bc:	69ba      	ldr	r2, [r7, #24]
 80048be:	0151      	lsls	r1, r2, #5
 80048c0:	69fa      	ldr	r2, [r7, #28]
 80048c2:	440a      	add	r2, r1
 80048c4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80048c8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80048cc:	6113      	str	r3, [r2, #16]
 80048ce:	e037      	b.n	8004940 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	691a      	ldr	r2, [r3, #16]
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	689b      	ldr	r3, [r3, #8]
 80048d8:	4413      	add	r3, r2
 80048da:	1e5a      	subs	r2, r3, #1
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	689b      	ldr	r3, [r3, #8]
 80048e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80048e4:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	689b      	ldr	r3, [r3, #8]
 80048ea:	8afa      	ldrh	r2, [r7, #22]
 80048ec:	fb03 f202 	mul.w	r2, r3, r2
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80048f4:	69bb      	ldr	r3, [r7, #24]
 80048f6:	015a      	lsls	r2, r3, #5
 80048f8:	69fb      	ldr	r3, [r7, #28]
 80048fa:	4413      	add	r3, r2
 80048fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004900:	691a      	ldr	r2, [r3, #16]
 8004902:	8afb      	ldrh	r3, [r7, #22]
 8004904:	04d9      	lsls	r1, r3, #19
 8004906:	4b38      	ldr	r3, [pc, #224]	@ (80049e8 <USB_EPStartXfer+0x538>)
 8004908:	400b      	ands	r3, r1
 800490a:	69b9      	ldr	r1, [r7, #24]
 800490c:	0148      	lsls	r0, r1, #5
 800490e:	69f9      	ldr	r1, [r7, #28]
 8004910:	4401      	add	r1, r0
 8004912:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004916:	4313      	orrs	r3, r2
 8004918:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800491a:	69bb      	ldr	r3, [r7, #24]
 800491c:	015a      	lsls	r2, r3, #5
 800491e:	69fb      	ldr	r3, [r7, #28]
 8004920:	4413      	add	r3, r2
 8004922:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004926:	691a      	ldr	r2, [r3, #16]
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	6a1b      	ldr	r3, [r3, #32]
 800492c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004930:	69b9      	ldr	r1, [r7, #24]
 8004932:	0148      	lsls	r0, r1, #5
 8004934:	69f9      	ldr	r1, [r7, #28]
 8004936:	4401      	add	r1, r0
 8004938:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800493c:	4313      	orrs	r3, r2
 800493e:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8004940:	79fb      	ldrb	r3, [r7, #7]
 8004942:	2b01      	cmp	r3, #1
 8004944:	d10d      	bne.n	8004962 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004946:	68bb      	ldr	r3, [r7, #8]
 8004948:	68db      	ldr	r3, [r3, #12]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d009      	beq.n	8004962 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	68d9      	ldr	r1, [r3, #12]
 8004952:	69bb      	ldr	r3, [r7, #24]
 8004954:	015a      	lsls	r2, r3, #5
 8004956:	69fb      	ldr	r3, [r7, #28]
 8004958:	4413      	add	r3, r2
 800495a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800495e:	460a      	mov	r2, r1
 8004960:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	791b      	ldrb	r3, [r3, #4]
 8004966:	2b01      	cmp	r3, #1
 8004968:	d128      	bne.n	80049bc <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800496a:	69fb      	ldr	r3, [r7, #28]
 800496c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004970:	689b      	ldr	r3, [r3, #8]
 8004972:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004976:	2b00      	cmp	r3, #0
 8004978:	d110      	bne.n	800499c <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800497a:	69bb      	ldr	r3, [r7, #24]
 800497c:	015a      	lsls	r2, r3, #5
 800497e:	69fb      	ldr	r3, [r7, #28]
 8004980:	4413      	add	r3, r2
 8004982:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	69ba      	ldr	r2, [r7, #24]
 800498a:	0151      	lsls	r1, r2, #5
 800498c:	69fa      	ldr	r2, [r7, #28]
 800498e:	440a      	add	r2, r1
 8004990:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004994:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004998:	6013      	str	r3, [r2, #0]
 800499a:	e00f      	b.n	80049bc <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800499c:	69bb      	ldr	r3, [r7, #24]
 800499e:	015a      	lsls	r2, r3, #5
 80049a0:	69fb      	ldr	r3, [r7, #28]
 80049a2:	4413      	add	r3, r2
 80049a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	69ba      	ldr	r2, [r7, #24]
 80049ac:	0151      	lsls	r1, r2, #5
 80049ae:	69fa      	ldr	r2, [r7, #28]
 80049b0:	440a      	add	r2, r1
 80049b2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80049b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80049ba:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80049bc:	69bb      	ldr	r3, [r7, #24]
 80049be:	015a      	lsls	r2, r3, #5
 80049c0:	69fb      	ldr	r3, [r7, #28]
 80049c2:	4413      	add	r3, r2
 80049c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	69ba      	ldr	r2, [r7, #24]
 80049cc:	0151      	lsls	r1, r2, #5
 80049ce:	69fa      	ldr	r2, [r7, #28]
 80049d0:	440a      	add	r2, r1
 80049d2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80049d6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80049da:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80049dc:	2300      	movs	r3, #0
}
 80049de:	4618      	mov	r0, r3
 80049e0:	3720      	adds	r7, #32
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}
 80049e6:	bf00      	nop
 80049e8:	1ff80000 	.word	0x1ff80000

080049ec <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80049ec:	b480      	push	{r7}
 80049ee:	b087      	sub	sp, #28
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
 80049f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80049f6:	2300      	movs	r3, #0
 80049f8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80049fa:	2300      	movs	r3, #0
 80049fc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	785b      	ldrb	r3, [r3, #1]
 8004a06:	2b01      	cmp	r3, #1
 8004a08:	d14a      	bne.n	8004aa0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	781b      	ldrb	r3, [r3, #0]
 8004a0e:	015a      	lsls	r2, r3, #5
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	4413      	add	r3, r2
 8004a14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004a1e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004a22:	f040 8086 	bne.w	8004b32 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	781b      	ldrb	r3, [r3, #0]
 8004a2a:	015a      	lsls	r2, r3, #5
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	4413      	add	r3, r2
 8004a30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	683a      	ldr	r2, [r7, #0]
 8004a38:	7812      	ldrb	r2, [r2, #0]
 8004a3a:	0151      	lsls	r1, r2, #5
 8004a3c:	693a      	ldr	r2, [r7, #16]
 8004a3e:	440a      	add	r2, r1
 8004a40:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004a44:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004a48:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	781b      	ldrb	r3, [r3, #0]
 8004a4e:	015a      	lsls	r2, r3, #5
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	4413      	add	r3, r2
 8004a54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	683a      	ldr	r2, [r7, #0]
 8004a5c:	7812      	ldrb	r2, [r2, #0]
 8004a5e:	0151      	lsls	r1, r2, #5
 8004a60:	693a      	ldr	r2, [r7, #16]
 8004a62:	440a      	add	r2, r1
 8004a64:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004a68:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004a6c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	3301      	adds	r3, #1
 8004a72:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	f242 7210 	movw	r2, #10000	@ 0x2710
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d902      	bls.n	8004a84 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	75fb      	strb	r3, [r7, #23]
          break;
 8004a82:	e056      	b.n	8004b32 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	781b      	ldrb	r3, [r3, #0]
 8004a88:	015a      	lsls	r2, r3, #5
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	4413      	add	r3, r2
 8004a8e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004a98:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004a9c:	d0e7      	beq.n	8004a6e <USB_EPStopXfer+0x82>
 8004a9e:	e048      	b.n	8004b32 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	781b      	ldrb	r3, [r3, #0]
 8004aa4:	015a      	lsls	r2, r3, #5
 8004aa6:	693b      	ldr	r3, [r7, #16]
 8004aa8:	4413      	add	r3, r2
 8004aaa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004ab4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004ab8:	d13b      	bne.n	8004b32 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	781b      	ldrb	r3, [r3, #0]
 8004abe:	015a      	lsls	r2, r3, #5
 8004ac0:	693b      	ldr	r3, [r7, #16]
 8004ac2:	4413      	add	r3, r2
 8004ac4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	683a      	ldr	r2, [r7, #0]
 8004acc:	7812      	ldrb	r2, [r2, #0]
 8004ace:	0151      	lsls	r1, r2, #5
 8004ad0:	693a      	ldr	r2, [r7, #16]
 8004ad2:	440a      	add	r2, r1
 8004ad4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004ad8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004adc:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	781b      	ldrb	r3, [r3, #0]
 8004ae2:	015a      	lsls	r2, r3, #5
 8004ae4:	693b      	ldr	r3, [r7, #16]
 8004ae6:	4413      	add	r3, r2
 8004ae8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	683a      	ldr	r2, [r7, #0]
 8004af0:	7812      	ldrb	r2, [r2, #0]
 8004af2:	0151      	lsls	r1, r2, #5
 8004af4:	693a      	ldr	r2, [r7, #16]
 8004af6:	440a      	add	r2, r1
 8004af8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004afc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004b00:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	3301      	adds	r3, #1
 8004b06:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	f242 7210 	movw	r2, #10000	@ 0x2710
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d902      	bls.n	8004b18 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8004b12:	2301      	movs	r3, #1
 8004b14:	75fb      	strb	r3, [r7, #23]
          break;
 8004b16:	e00c      	b.n	8004b32 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	781b      	ldrb	r3, [r3, #0]
 8004b1c:	015a      	lsls	r2, r3, #5
 8004b1e:	693b      	ldr	r3, [r7, #16]
 8004b20:	4413      	add	r3, r2
 8004b22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004b2c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004b30:	d0e7      	beq.n	8004b02 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8004b32:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	371c      	adds	r7, #28
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3e:	4770      	bx	lr

08004b40 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b089      	sub	sp, #36	@ 0x24
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	60f8      	str	r0, [r7, #12]
 8004b48:	60b9      	str	r1, [r7, #8]
 8004b4a:	4611      	mov	r1, r2
 8004b4c:	461a      	mov	r2, r3
 8004b4e:	460b      	mov	r3, r1
 8004b50:	71fb      	strb	r3, [r7, #7]
 8004b52:	4613      	mov	r3, r2
 8004b54:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004b5e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d123      	bne.n	8004bae <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004b66:	88bb      	ldrh	r3, [r7, #4]
 8004b68:	3303      	adds	r3, #3
 8004b6a:	089b      	lsrs	r3, r3, #2
 8004b6c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004b6e:	2300      	movs	r3, #0
 8004b70:	61bb      	str	r3, [r7, #24]
 8004b72:	e018      	b.n	8004ba6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004b74:	79fb      	ldrb	r3, [r7, #7]
 8004b76:	031a      	lsls	r2, r3, #12
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	4413      	add	r3, r2
 8004b7c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004b80:	461a      	mov	r2, r3
 8004b82:	69fb      	ldr	r3, [r7, #28]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004b88:	69fb      	ldr	r3, [r7, #28]
 8004b8a:	3301      	adds	r3, #1
 8004b8c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004b8e:	69fb      	ldr	r3, [r7, #28]
 8004b90:	3301      	adds	r3, #1
 8004b92:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004b94:	69fb      	ldr	r3, [r7, #28]
 8004b96:	3301      	adds	r3, #1
 8004b98:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004b9a:	69fb      	ldr	r3, [r7, #28]
 8004b9c:	3301      	adds	r3, #1
 8004b9e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004ba0:	69bb      	ldr	r3, [r7, #24]
 8004ba2:	3301      	adds	r3, #1
 8004ba4:	61bb      	str	r3, [r7, #24]
 8004ba6:	69ba      	ldr	r2, [r7, #24]
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	429a      	cmp	r2, r3
 8004bac:	d3e2      	bcc.n	8004b74 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004bae:	2300      	movs	r3, #0
}
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	3724      	adds	r7, #36	@ 0x24
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bba:	4770      	bx	lr

08004bbc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b08b      	sub	sp, #44	@ 0x2c
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	60f8      	str	r0, [r7, #12]
 8004bc4:	60b9      	str	r1, [r7, #8]
 8004bc6:	4613      	mov	r3, r2
 8004bc8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004bd2:	88fb      	ldrh	r3, [r7, #6]
 8004bd4:	089b      	lsrs	r3, r3, #2
 8004bd6:	b29b      	uxth	r3, r3
 8004bd8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004bda:	88fb      	ldrh	r3, [r7, #6]
 8004bdc:	f003 0303 	and.w	r3, r3, #3
 8004be0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004be2:	2300      	movs	r3, #0
 8004be4:	623b      	str	r3, [r7, #32]
 8004be6:	e014      	b.n	8004c12 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004be8:	69bb      	ldr	r3, [r7, #24]
 8004bea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004bee:	681a      	ldr	r2, [r3, #0]
 8004bf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bf2:	601a      	str	r2, [r3, #0]
    pDest++;
 8004bf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bf6:	3301      	adds	r3, #1
 8004bf8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bfc:	3301      	adds	r3, #1
 8004bfe:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004c00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c02:	3301      	adds	r3, #1
 8004c04:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c08:	3301      	adds	r3, #1
 8004c0a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8004c0c:	6a3b      	ldr	r3, [r7, #32]
 8004c0e:	3301      	adds	r3, #1
 8004c10:	623b      	str	r3, [r7, #32]
 8004c12:	6a3a      	ldr	r2, [r7, #32]
 8004c14:	697b      	ldr	r3, [r7, #20]
 8004c16:	429a      	cmp	r2, r3
 8004c18:	d3e6      	bcc.n	8004be8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004c1a:	8bfb      	ldrh	r3, [r7, #30]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d01e      	beq.n	8004c5e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004c20:	2300      	movs	r3, #0
 8004c22:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004c24:	69bb      	ldr	r3, [r7, #24]
 8004c26:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004c2a:	461a      	mov	r2, r3
 8004c2c:	f107 0310 	add.w	r3, r7, #16
 8004c30:	6812      	ldr	r2, [r2, #0]
 8004c32:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004c34:	693a      	ldr	r2, [r7, #16]
 8004c36:	6a3b      	ldr	r3, [r7, #32]
 8004c38:	b2db      	uxtb	r3, r3
 8004c3a:	00db      	lsls	r3, r3, #3
 8004c3c:	fa22 f303 	lsr.w	r3, r2, r3
 8004c40:	b2da      	uxtb	r2, r3
 8004c42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c44:	701a      	strb	r2, [r3, #0]
      i++;
 8004c46:	6a3b      	ldr	r3, [r7, #32]
 8004c48:	3301      	adds	r3, #1
 8004c4a:	623b      	str	r3, [r7, #32]
      pDest++;
 8004c4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c4e:	3301      	adds	r3, #1
 8004c50:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8004c52:	8bfb      	ldrh	r3, [r7, #30]
 8004c54:	3b01      	subs	r3, #1
 8004c56:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004c58:	8bfb      	ldrh	r3, [r7, #30]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d1ea      	bne.n	8004c34 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004c5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004c60:	4618      	mov	r0, r3
 8004c62:	372c      	adds	r7, #44	@ 0x2c
 8004c64:	46bd      	mov	sp, r7
 8004c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6a:	4770      	bx	lr

08004c6c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b085      	sub	sp, #20
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
 8004c74:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	781b      	ldrb	r3, [r3, #0]
 8004c7e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	785b      	ldrb	r3, [r3, #1]
 8004c84:	2b01      	cmp	r3, #1
 8004c86:	d12c      	bne.n	8004ce2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	015a      	lsls	r2, r3, #5
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	4413      	add	r3, r2
 8004c90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	db12      	blt.n	8004cc0 <USB_EPSetStall+0x54>
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d00f      	beq.n	8004cc0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	015a      	lsls	r2, r3, #5
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	4413      	add	r3, r2
 8004ca8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	68ba      	ldr	r2, [r7, #8]
 8004cb0:	0151      	lsls	r1, r2, #5
 8004cb2:	68fa      	ldr	r2, [r7, #12]
 8004cb4:	440a      	add	r2, r1
 8004cb6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004cba:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004cbe:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	015a      	lsls	r2, r3, #5
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	4413      	add	r3, r2
 8004cc8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	68ba      	ldr	r2, [r7, #8]
 8004cd0:	0151      	lsls	r1, r2, #5
 8004cd2:	68fa      	ldr	r2, [r7, #12]
 8004cd4:	440a      	add	r2, r1
 8004cd6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004cda:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004cde:	6013      	str	r3, [r2, #0]
 8004ce0:	e02b      	b.n	8004d3a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	015a      	lsls	r2, r3, #5
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	4413      	add	r3, r2
 8004cea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	db12      	blt.n	8004d1a <USB_EPSetStall+0xae>
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d00f      	beq.n	8004d1a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	015a      	lsls	r2, r3, #5
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	4413      	add	r3, r2
 8004d02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	68ba      	ldr	r2, [r7, #8]
 8004d0a:	0151      	lsls	r1, r2, #5
 8004d0c:	68fa      	ldr	r2, [r7, #12]
 8004d0e:	440a      	add	r2, r1
 8004d10:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004d14:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004d18:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004d1a:	68bb      	ldr	r3, [r7, #8]
 8004d1c:	015a      	lsls	r2, r3, #5
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	4413      	add	r3, r2
 8004d22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	68ba      	ldr	r2, [r7, #8]
 8004d2a:	0151      	lsls	r1, r2, #5
 8004d2c:	68fa      	ldr	r2, [r7, #12]
 8004d2e:	440a      	add	r2, r1
 8004d30:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004d34:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004d38:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004d3a:	2300      	movs	r3, #0
}
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	3714      	adds	r7, #20
 8004d40:	46bd      	mov	sp, r7
 8004d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d46:	4770      	bx	lr

08004d48 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b085      	sub	sp, #20
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
 8004d50:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	781b      	ldrb	r3, [r3, #0]
 8004d5a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	785b      	ldrb	r3, [r3, #1]
 8004d60:	2b01      	cmp	r3, #1
 8004d62:	d128      	bne.n	8004db6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	015a      	lsls	r2, r3, #5
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	4413      	add	r3, r2
 8004d6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	68ba      	ldr	r2, [r7, #8]
 8004d74:	0151      	lsls	r1, r2, #5
 8004d76:	68fa      	ldr	r2, [r7, #12]
 8004d78:	440a      	add	r2, r1
 8004d7a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004d7e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004d82:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	791b      	ldrb	r3, [r3, #4]
 8004d88:	2b03      	cmp	r3, #3
 8004d8a:	d003      	beq.n	8004d94 <USB_EPClearStall+0x4c>
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	791b      	ldrb	r3, [r3, #4]
 8004d90:	2b02      	cmp	r3, #2
 8004d92:	d138      	bne.n	8004e06 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	015a      	lsls	r2, r3, #5
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	4413      	add	r3, r2
 8004d9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	68ba      	ldr	r2, [r7, #8]
 8004da4:	0151      	lsls	r1, r2, #5
 8004da6:	68fa      	ldr	r2, [r7, #12]
 8004da8:	440a      	add	r2, r1
 8004daa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004dae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004db2:	6013      	str	r3, [r2, #0]
 8004db4:	e027      	b.n	8004e06 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	015a      	lsls	r2, r3, #5
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	4413      	add	r3, r2
 8004dbe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	68ba      	ldr	r2, [r7, #8]
 8004dc6:	0151      	lsls	r1, r2, #5
 8004dc8:	68fa      	ldr	r2, [r7, #12]
 8004dca:	440a      	add	r2, r1
 8004dcc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004dd0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004dd4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	791b      	ldrb	r3, [r3, #4]
 8004dda:	2b03      	cmp	r3, #3
 8004ddc:	d003      	beq.n	8004de6 <USB_EPClearStall+0x9e>
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	791b      	ldrb	r3, [r3, #4]
 8004de2:	2b02      	cmp	r3, #2
 8004de4:	d10f      	bne.n	8004e06 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	015a      	lsls	r2, r3, #5
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	4413      	add	r3, r2
 8004dee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	68ba      	ldr	r2, [r7, #8]
 8004df6:	0151      	lsls	r1, r2, #5
 8004df8:	68fa      	ldr	r2, [r7, #12]
 8004dfa:	440a      	add	r2, r1
 8004dfc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004e00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e04:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004e06:	2300      	movs	r3, #0
}
 8004e08:	4618      	mov	r0, r3
 8004e0a:	3714      	adds	r7, #20
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e12:	4770      	bx	lr

08004e14 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004e14:	b480      	push	{r7}
 8004e16:	b085      	sub	sp, #20
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
 8004e1c:	460b      	mov	r3, r1
 8004e1e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	68fa      	ldr	r2, [r7, #12]
 8004e2e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004e32:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8004e36:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e3e:	681a      	ldr	r2, [r3, #0]
 8004e40:	78fb      	ldrb	r3, [r7, #3]
 8004e42:	011b      	lsls	r3, r3, #4
 8004e44:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8004e48:	68f9      	ldr	r1, [r7, #12]
 8004e4a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004e52:	2300      	movs	r3, #0
}
 8004e54:	4618      	mov	r0, r3
 8004e56:	3714      	adds	r7, #20
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5e:	4770      	bx	lr

08004e60 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004e60:	b480      	push	{r7}
 8004e62:	b085      	sub	sp, #20
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	68fa      	ldr	r2, [r7, #12]
 8004e76:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004e7a:	f023 0303 	bic.w	r3, r3, #3
 8004e7e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	68fa      	ldr	r2, [r7, #12]
 8004e8a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004e8e:	f023 0302 	bic.w	r3, r3, #2
 8004e92:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004e94:	2300      	movs	r3, #0
}
 8004e96:	4618      	mov	r0, r3
 8004e98:	3714      	adds	r7, #20
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea0:	4770      	bx	lr

08004ea2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004ea2:	b480      	push	{r7}
 8004ea4:	b085      	sub	sp, #20
 8004ea6:	af00      	add	r7, sp, #0
 8004ea8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	68fa      	ldr	r2, [r7, #12]
 8004eb8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004ebc:	f023 0303 	bic.w	r3, r3, #3
 8004ec0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	68fa      	ldr	r2, [r7, #12]
 8004ecc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004ed0:	f043 0302 	orr.w	r3, r3, #2
 8004ed4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004ed6:	2300      	movs	r3, #0
}
 8004ed8:	4618      	mov	r0, r3
 8004eda:	3714      	adds	r7, #20
 8004edc:	46bd      	mov	sp, r7
 8004ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee2:	4770      	bx	lr

08004ee4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b085      	sub	sp, #20
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	695b      	ldr	r3, [r3, #20]
 8004ef0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	699b      	ldr	r3, [r3, #24]
 8004ef6:	68fa      	ldr	r2, [r7, #12]
 8004ef8:	4013      	ands	r3, r2
 8004efa:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004efc:	68fb      	ldr	r3, [r7, #12]
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	3714      	adds	r7, #20
 8004f02:	46bd      	mov	sp, r7
 8004f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f08:	4770      	bx	lr

08004f0a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8004f0a:	b480      	push	{r7}
 8004f0c:	b085      	sub	sp, #20
 8004f0e:	af00      	add	r7, sp, #0
 8004f10:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f1c:	699b      	ldr	r3, [r3, #24]
 8004f1e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f26:	69db      	ldr	r3, [r3, #28]
 8004f28:	68ba      	ldr	r2, [r7, #8]
 8004f2a:	4013      	ands	r3, r2
 8004f2c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	0c1b      	lsrs	r3, r3, #16
}
 8004f32:	4618      	mov	r0, r3
 8004f34:	3714      	adds	r7, #20
 8004f36:	46bd      	mov	sp, r7
 8004f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3c:	4770      	bx	lr

08004f3e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8004f3e:	b480      	push	{r7}
 8004f40:	b085      	sub	sp, #20
 8004f42:	af00      	add	r7, sp, #0
 8004f44:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f50:	699b      	ldr	r3, [r3, #24]
 8004f52:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f5a:	69db      	ldr	r3, [r3, #28]
 8004f5c:	68ba      	ldr	r2, [r7, #8]
 8004f5e:	4013      	ands	r3, r2
 8004f60:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	b29b      	uxth	r3, r3
}
 8004f66:	4618      	mov	r0, r3
 8004f68:	3714      	adds	r7, #20
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f70:	4770      	bx	lr

08004f72 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004f72:	b480      	push	{r7}
 8004f74:	b085      	sub	sp, #20
 8004f76:	af00      	add	r7, sp, #0
 8004f78:	6078      	str	r0, [r7, #4]
 8004f7a:	460b      	mov	r3, r1
 8004f7c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004f82:	78fb      	ldrb	r3, [r7, #3]
 8004f84:	015a      	lsls	r2, r3, #5
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	4413      	add	r3, r2
 8004f8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f8e:	689b      	ldr	r3, [r3, #8]
 8004f90:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f98:	695b      	ldr	r3, [r3, #20]
 8004f9a:	68ba      	ldr	r2, [r7, #8]
 8004f9c:	4013      	ands	r3, r2
 8004f9e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004fa0:	68bb      	ldr	r3, [r7, #8]
}
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	3714      	adds	r7, #20
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fac:	4770      	bx	lr

08004fae <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004fae:	b480      	push	{r7}
 8004fb0:	b087      	sub	sp, #28
 8004fb2:	af00      	add	r7, sp, #0
 8004fb4:	6078      	str	r0, [r7, #4]
 8004fb6:	460b      	mov	r3, r1
 8004fb8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004fc4:	691b      	ldr	r3, [r3, #16]
 8004fc6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004fc8:	697b      	ldr	r3, [r7, #20]
 8004fca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004fce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004fd0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004fd2:	78fb      	ldrb	r3, [r7, #3]
 8004fd4:	f003 030f 	and.w	r3, r3, #15
 8004fd8:	68fa      	ldr	r2, [r7, #12]
 8004fda:	fa22 f303 	lsr.w	r3, r2, r3
 8004fde:	01db      	lsls	r3, r3, #7
 8004fe0:	b2db      	uxtb	r3, r3
 8004fe2:	693a      	ldr	r2, [r7, #16]
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004fe8:	78fb      	ldrb	r3, [r7, #3]
 8004fea:	015a      	lsls	r2, r3, #5
 8004fec:	697b      	ldr	r3, [r7, #20]
 8004fee:	4413      	add	r3, r2
 8004ff0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ff4:	689b      	ldr	r3, [r3, #8]
 8004ff6:	693a      	ldr	r2, [r7, #16]
 8004ff8:	4013      	ands	r3, r2
 8004ffa:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004ffc:	68bb      	ldr	r3, [r7, #8]
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	371c      	adds	r7, #28
 8005002:	46bd      	mov	sp, r7
 8005004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005008:	4770      	bx	lr

0800500a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800500a:	b480      	push	{r7}
 800500c:	b083      	sub	sp, #12
 800500e:	af00      	add	r7, sp, #0
 8005010:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	695b      	ldr	r3, [r3, #20]
 8005016:	f003 0301 	and.w	r3, r3, #1
}
 800501a:	4618      	mov	r0, r3
 800501c:	370c      	adds	r7, #12
 800501e:	46bd      	mov	sp, r7
 8005020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005024:	4770      	bx	lr

08005026 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8005026:	b480      	push	{r7}
 8005028:	b085      	sub	sp, #20
 800502a:	af00      	add	r7, sp, #0
 800502c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	68fa      	ldr	r2, [r7, #12]
 800503c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005040:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8005044:	f023 0307 	bic.w	r3, r3, #7
 8005048:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	68fa      	ldr	r2, [r7, #12]
 8005054:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005058:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800505c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800505e:	2300      	movs	r3, #0
}
 8005060:	4618      	mov	r0, r3
 8005062:	3714      	adds	r7, #20
 8005064:	46bd      	mov	sp, r7
 8005066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506a:	4770      	bx	lr

0800506c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800506c:	b480      	push	{r7}
 800506e:	b087      	sub	sp, #28
 8005070:	af00      	add	r7, sp, #0
 8005072:	60f8      	str	r0, [r7, #12]
 8005074:	460b      	mov	r3, r1
 8005076:	607a      	str	r2, [r7, #4]
 8005078:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	333c      	adds	r3, #60	@ 0x3c
 8005082:	3304      	adds	r3, #4
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005088:	693b      	ldr	r3, [r7, #16]
 800508a:	4a26      	ldr	r2, [pc, #152]	@ (8005124 <USB_EP0_OutStart+0xb8>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d90a      	bls.n	80050a6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800509c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80050a0:	d101      	bne.n	80050a6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80050a2:	2300      	movs	r3, #0
 80050a4:	e037      	b.n	8005116 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050ac:	461a      	mov	r2, r3
 80050ae:	2300      	movs	r3, #0
 80050b0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050b8:	691b      	ldr	r3, [r3, #16]
 80050ba:	697a      	ldr	r2, [r7, #20]
 80050bc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80050c0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80050c4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050cc:	691b      	ldr	r3, [r3, #16]
 80050ce:	697a      	ldr	r2, [r7, #20]
 80050d0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80050d4:	f043 0318 	orr.w	r3, r3, #24
 80050d8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050e0:	691b      	ldr	r3, [r3, #16]
 80050e2:	697a      	ldr	r2, [r7, #20]
 80050e4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80050e8:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80050ec:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80050ee:	7afb      	ldrb	r3, [r7, #11]
 80050f0:	2b01      	cmp	r3, #1
 80050f2:	d10f      	bne.n	8005114 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050fa:	461a      	mov	r2, r3
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005100:	697b      	ldr	r3, [r7, #20]
 8005102:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	697a      	ldr	r2, [r7, #20]
 800510a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800510e:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8005112:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005114:	2300      	movs	r3, #0
}
 8005116:	4618      	mov	r0, r3
 8005118:	371c      	adds	r7, #28
 800511a:	46bd      	mov	sp, r7
 800511c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005120:	4770      	bx	lr
 8005122:	bf00      	nop
 8005124:	4f54300a 	.word	0x4f54300a

08005128 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005128:	b480      	push	{r7}
 800512a:	b085      	sub	sp, #20
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005130:	2300      	movs	r3, #0
 8005132:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	3301      	adds	r3, #1
 8005138:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005140:	d901      	bls.n	8005146 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005142:	2303      	movs	r3, #3
 8005144:	e01b      	b.n	800517e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	691b      	ldr	r3, [r3, #16]
 800514a:	2b00      	cmp	r3, #0
 800514c:	daf2      	bge.n	8005134 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800514e:	2300      	movs	r3, #0
 8005150:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	691b      	ldr	r3, [r3, #16]
 8005156:	f043 0201 	orr.w	r2, r3, #1
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	3301      	adds	r3, #1
 8005162:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800516a:	d901      	bls.n	8005170 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800516c:	2303      	movs	r3, #3
 800516e:	e006      	b.n	800517e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	691b      	ldr	r3, [r3, #16]
 8005174:	f003 0301 	and.w	r3, r3, #1
 8005178:	2b01      	cmp	r3, #1
 800517a:	d0f0      	beq.n	800515e <USB_CoreReset+0x36>

  return HAL_OK;
 800517c:	2300      	movs	r3, #0
}
 800517e:	4618      	mov	r0, r3
 8005180:	3714      	adds	r7, #20
 8005182:	46bd      	mov	sp, r7
 8005184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005188:	4770      	bx	lr
	...

0800518c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b084      	sub	sp, #16
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
 8005194:	460b      	mov	r3, r1
 8005196:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005198:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800519c:	f004 fea8 	bl	8009ef0 <USBD_static_malloc>
 80051a0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d109      	bne.n	80051bc <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	32b0      	adds	r2, #176	@ 0xb0
 80051b2:	2100      	movs	r1, #0
 80051b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80051b8:	2302      	movs	r3, #2
 80051ba:	e0d4      	b.n	8005366 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80051bc:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 80051c0:	2100      	movs	r1, #0
 80051c2:	68f8      	ldr	r0, [r7, #12]
 80051c4:	f004 fed8 	bl	8009f78 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	32b0      	adds	r2, #176	@ 0xb0
 80051d2:	68f9      	ldr	r1, [r7, #12]
 80051d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	32b0      	adds	r2, #176	@ 0xb0
 80051e2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	7c1b      	ldrb	r3, [r3, #16]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d138      	bne.n	8005266 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80051f4:	4b5e      	ldr	r3, [pc, #376]	@ (8005370 <USBD_CDC_Init+0x1e4>)
 80051f6:	7819      	ldrb	r1, [r3, #0]
 80051f8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80051fc:	2202      	movs	r2, #2
 80051fe:	6878      	ldr	r0, [r7, #4]
 8005200:	f004 fd53 	bl	8009caa <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005204:	4b5a      	ldr	r3, [pc, #360]	@ (8005370 <USBD_CDC_Init+0x1e4>)
 8005206:	781b      	ldrb	r3, [r3, #0]
 8005208:	f003 020f 	and.w	r2, r3, #15
 800520c:	6879      	ldr	r1, [r7, #4]
 800520e:	4613      	mov	r3, r2
 8005210:	009b      	lsls	r3, r3, #2
 8005212:	4413      	add	r3, r2
 8005214:	009b      	lsls	r3, r3, #2
 8005216:	440b      	add	r3, r1
 8005218:	3324      	adds	r3, #36	@ 0x24
 800521a:	2201      	movs	r2, #1
 800521c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800521e:	4b55      	ldr	r3, [pc, #340]	@ (8005374 <USBD_CDC_Init+0x1e8>)
 8005220:	7819      	ldrb	r1, [r3, #0]
 8005222:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005226:	2202      	movs	r2, #2
 8005228:	6878      	ldr	r0, [r7, #4]
 800522a:	f004 fd3e 	bl	8009caa <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800522e:	4b51      	ldr	r3, [pc, #324]	@ (8005374 <USBD_CDC_Init+0x1e8>)
 8005230:	781b      	ldrb	r3, [r3, #0]
 8005232:	f003 020f 	and.w	r2, r3, #15
 8005236:	6879      	ldr	r1, [r7, #4]
 8005238:	4613      	mov	r3, r2
 800523a:	009b      	lsls	r3, r3, #2
 800523c:	4413      	add	r3, r2
 800523e:	009b      	lsls	r3, r3, #2
 8005240:	440b      	add	r3, r1
 8005242:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005246:	2201      	movs	r2, #1
 8005248:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800524a:	4b4b      	ldr	r3, [pc, #300]	@ (8005378 <USBD_CDC_Init+0x1ec>)
 800524c:	781b      	ldrb	r3, [r3, #0]
 800524e:	f003 020f 	and.w	r2, r3, #15
 8005252:	6879      	ldr	r1, [r7, #4]
 8005254:	4613      	mov	r3, r2
 8005256:	009b      	lsls	r3, r3, #2
 8005258:	4413      	add	r3, r2
 800525a:	009b      	lsls	r3, r3, #2
 800525c:	440b      	add	r3, r1
 800525e:	3326      	adds	r3, #38	@ 0x26
 8005260:	2210      	movs	r2, #16
 8005262:	801a      	strh	r2, [r3, #0]
 8005264:	e035      	b.n	80052d2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005266:	4b42      	ldr	r3, [pc, #264]	@ (8005370 <USBD_CDC_Init+0x1e4>)
 8005268:	7819      	ldrb	r1, [r3, #0]
 800526a:	2340      	movs	r3, #64	@ 0x40
 800526c:	2202      	movs	r2, #2
 800526e:	6878      	ldr	r0, [r7, #4]
 8005270:	f004 fd1b 	bl	8009caa <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005274:	4b3e      	ldr	r3, [pc, #248]	@ (8005370 <USBD_CDC_Init+0x1e4>)
 8005276:	781b      	ldrb	r3, [r3, #0]
 8005278:	f003 020f 	and.w	r2, r3, #15
 800527c:	6879      	ldr	r1, [r7, #4]
 800527e:	4613      	mov	r3, r2
 8005280:	009b      	lsls	r3, r3, #2
 8005282:	4413      	add	r3, r2
 8005284:	009b      	lsls	r3, r3, #2
 8005286:	440b      	add	r3, r1
 8005288:	3324      	adds	r3, #36	@ 0x24
 800528a:	2201      	movs	r2, #1
 800528c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800528e:	4b39      	ldr	r3, [pc, #228]	@ (8005374 <USBD_CDC_Init+0x1e8>)
 8005290:	7819      	ldrb	r1, [r3, #0]
 8005292:	2340      	movs	r3, #64	@ 0x40
 8005294:	2202      	movs	r2, #2
 8005296:	6878      	ldr	r0, [r7, #4]
 8005298:	f004 fd07 	bl	8009caa <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800529c:	4b35      	ldr	r3, [pc, #212]	@ (8005374 <USBD_CDC_Init+0x1e8>)
 800529e:	781b      	ldrb	r3, [r3, #0]
 80052a0:	f003 020f 	and.w	r2, r3, #15
 80052a4:	6879      	ldr	r1, [r7, #4]
 80052a6:	4613      	mov	r3, r2
 80052a8:	009b      	lsls	r3, r3, #2
 80052aa:	4413      	add	r3, r2
 80052ac:	009b      	lsls	r3, r3, #2
 80052ae:	440b      	add	r3, r1
 80052b0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80052b4:	2201      	movs	r2, #1
 80052b6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80052b8:	4b2f      	ldr	r3, [pc, #188]	@ (8005378 <USBD_CDC_Init+0x1ec>)
 80052ba:	781b      	ldrb	r3, [r3, #0]
 80052bc:	f003 020f 	and.w	r2, r3, #15
 80052c0:	6879      	ldr	r1, [r7, #4]
 80052c2:	4613      	mov	r3, r2
 80052c4:	009b      	lsls	r3, r3, #2
 80052c6:	4413      	add	r3, r2
 80052c8:	009b      	lsls	r3, r3, #2
 80052ca:	440b      	add	r3, r1
 80052cc:	3326      	adds	r3, #38	@ 0x26
 80052ce:	2210      	movs	r2, #16
 80052d0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80052d2:	4b29      	ldr	r3, [pc, #164]	@ (8005378 <USBD_CDC_Init+0x1ec>)
 80052d4:	7819      	ldrb	r1, [r3, #0]
 80052d6:	2308      	movs	r3, #8
 80052d8:	2203      	movs	r2, #3
 80052da:	6878      	ldr	r0, [r7, #4]
 80052dc:	f004 fce5 	bl	8009caa <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80052e0:	4b25      	ldr	r3, [pc, #148]	@ (8005378 <USBD_CDC_Init+0x1ec>)
 80052e2:	781b      	ldrb	r3, [r3, #0]
 80052e4:	f003 020f 	and.w	r2, r3, #15
 80052e8:	6879      	ldr	r1, [r7, #4]
 80052ea:	4613      	mov	r3, r2
 80052ec:	009b      	lsls	r3, r3, #2
 80052ee:	4413      	add	r3, r2
 80052f0:	009b      	lsls	r3, r3, #2
 80052f2:	440b      	add	r3, r1
 80052f4:	3324      	adds	r3, #36	@ 0x24
 80052f6:	2201      	movs	r2, #1
 80052f8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	2200      	movs	r2, #0
 80052fe:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005308:	687a      	ldr	r2, [r7, #4]
 800530a:	33b0      	adds	r3, #176	@ 0xb0
 800530c:	009b      	lsls	r3, r3, #2
 800530e:	4413      	add	r3, r2
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	2200      	movs	r2, #0
 800531a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	2200      	movs	r2, #0
 8005322:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800532c:	2b00      	cmp	r3, #0
 800532e:	d101      	bne.n	8005334 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8005330:	2302      	movs	r3, #2
 8005332:	e018      	b.n	8005366 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	7c1b      	ldrb	r3, [r3, #16]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d10a      	bne.n	8005352 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800533c:	4b0d      	ldr	r3, [pc, #52]	@ (8005374 <USBD_CDC_Init+0x1e8>)
 800533e:	7819      	ldrb	r1, [r3, #0]
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005346:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800534a:	6878      	ldr	r0, [r7, #4]
 800534c:	f004 fd9c 	bl	8009e88 <USBD_LL_PrepareReceive>
 8005350:	e008      	b.n	8005364 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005352:	4b08      	ldr	r3, [pc, #32]	@ (8005374 <USBD_CDC_Init+0x1e8>)
 8005354:	7819      	ldrb	r1, [r3, #0]
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800535c:	2340      	movs	r3, #64	@ 0x40
 800535e:	6878      	ldr	r0, [r7, #4]
 8005360:	f004 fd92 	bl	8009e88 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005364:	2300      	movs	r3, #0
}
 8005366:	4618      	mov	r0, r3
 8005368:	3710      	adds	r7, #16
 800536a:	46bd      	mov	sp, r7
 800536c:	bd80      	pop	{r7, pc}
 800536e:	bf00      	nop
 8005370:	20000093 	.word	0x20000093
 8005374:	20000094 	.word	0x20000094
 8005378:	20000095 	.word	0x20000095

0800537c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b082      	sub	sp, #8
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
 8005384:	460b      	mov	r3, r1
 8005386:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8005388:	4b3a      	ldr	r3, [pc, #232]	@ (8005474 <USBD_CDC_DeInit+0xf8>)
 800538a:	781b      	ldrb	r3, [r3, #0]
 800538c:	4619      	mov	r1, r3
 800538e:	6878      	ldr	r0, [r7, #4]
 8005390:	f004 fcb1 	bl	8009cf6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8005394:	4b37      	ldr	r3, [pc, #220]	@ (8005474 <USBD_CDC_DeInit+0xf8>)
 8005396:	781b      	ldrb	r3, [r3, #0]
 8005398:	f003 020f 	and.w	r2, r3, #15
 800539c:	6879      	ldr	r1, [r7, #4]
 800539e:	4613      	mov	r3, r2
 80053a0:	009b      	lsls	r3, r3, #2
 80053a2:	4413      	add	r3, r2
 80053a4:	009b      	lsls	r3, r3, #2
 80053a6:	440b      	add	r3, r1
 80053a8:	3324      	adds	r3, #36	@ 0x24
 80053aa:	2200      	movs	r2, #0
 80053ac:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80053ae:	4b32      	ldr	r3, [pc, #200]	@ (8005478 <USBD_CDC_DeInit+0xfc>)
 80053b0:	781b      	ldrb	r3, [r3, #0]
 80053b2:	4619      	mov	r1, r3
 80053b4:	6878      	ldr	r0, [r7, #4]
 80053b6:	f004 fc9e 	bl	8009cf6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80053ba:	4b2f      	ldr	r3, [pc, #188]	@ (8005478 <USBD_CDC_DeInit+0xfc>)
 80053bc:	781b      	ldrb	r3, [r3, #0]
 80053be:	f003 020f 	and.w	r2, r3, #15
 80053c2:	6879      	ldr	r1, [r7, #4]
 80053c4:	4613      	mov	r3, r2
 80053c6:	009b      	lsls	r3, r3, #2
 80053c8:	4413      	add	r3, r2
 80053ca:	009b      	lsls	r3, r3, #2
 80053cc:	440b      	add	r3, r1
 80053ce:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80053d2:	2200      	movs	r2, #0
 80053d4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80053d6:	4b29      	ldr	r3, [pc, #164]	@ (800547c <USBD_CDC_DeInit+0x100>)
 80053d8:	781b      	ldrb	r3, [r3, #0]
 80053da:	4619      	mov	r1, r3
 80053dc:	6878      	ldr	r0, [r7, #4]
 80053de:	f004 fc8a 	bl	8009cf6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80053e2:	4b26      	ldr	r3, [pc, #152]	@ (800547c <USBD_CDC_DeInit+0x100>)
 80053e4:	781b      	ldrb	r3, [r3, #0]
 80053e6:	f003 020f 	and.w	r2, r3, #15
 80053ea:	6879      	ldr	r1, [r7, #4]
 80053ec:	4613      	mov	r3, r2
 80053ee:	009b      	lsls	r3, r3, #2
 80053f0:	4413      	add	r3, r2
 80053f2:	009b      	lsls	r3, r3, #2
 80053f4:	440b      	add	r3, r1
 80053f6:	3324      	adds	r3, #36	@ 0x24
 80053f8:	2200      	movs	r2, #0
 80053fa:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80053fc:	4b1f      	ldr	r3, [pc, #124]	@ (800547c <USBD_CDC_DeInit+0x100>)
 80053fe:	781b      	ldrb	r3, [r3, #0]
 8005400:	f003 020f 	and.w	r2, r3, #15
 8005404:	6879      	ldr	r1, [r7, #4]
 8005406:	4613      	mov	r3, r2
 8005408:	009b      	lsls	r3, r3, #2
 800540a:	4413      	add	r3, r2
 800540c:	009b      	lsls	r3, r3, #2
 800540e:	440b      	add	r3, r1
 8005410:	3326      	adds	r3, #38	@ 0x26
 8005412:	2200      	movs	r2, #0
 8005414:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	32b0      	adds	r2, #176	@ 0xb0
 8005420:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d01f      	beq.n	8005468 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800542e:	687a      	ldr	r2, [r7, #4]
 8005430:	33b0      	adds	r3, #176	@ 0xb0
 8005432:	009b      	lsls	r3, r3, #2
 8005434:	4413      	add	r3, r2
 8005436:	685b      	ldr	r3, [r3, #4]
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	32b0      	adds	r2, #176	@ 0xb0
 8005446:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800544a:	4618      	mov	r0, r3
 800544c:	f004 fd5e 	bl	8009f0c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	32b0      	adds	r2, #176	@ 0xb0
 800545a:	2100      	movs	r1, #0
 800545c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2200      	movs	r2, #0
 8005464:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005468:	2300      	movs	r3, #0
}
 800546a:	4618      	mov	r0, r3
 800546c:	3708      	adds	r7, #8
 800546e:	46bd      	mov	sp, r7
 8005470:	bd80      	pop	{r7, pc}
 8005472:	bf00      	nop
 8005474:	20000093 	.word	0x20000093
 8005478:	20000094 	.word	0x20000094
 800547c:	20000095 	.word	0x20000095

08005480 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b086      	sub	sp, #24
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
 8005488:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	32b0      	adds	r2, #176	@ 0xb0
 8005494:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005498:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800549a:	2300      	movs	r3, #0
 800549c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800549e:	2300      	movs	r3, #0
 80054a0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80054a2:	2300      	movs	r3, #0
 80054a4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80054a6:	693b      	ldr	r3, [r7, #16]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d101      	bne.n	80054b0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80054ac:	2303      	movs	r3, #3
 80054ae:	e0bf      	b.n	8005630 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	781b      	ldrb	r3, [r3, #0]
 80054b4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d050      	beq.n	800555e <USBD_CDC_Setup+0xde>
 80054bc:	2b20      	cmp	r3, #32
 80054be:	f040 80af 	bne.w	8005620 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	88db      	ldrh	r3, [r3, #6]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d03a      	beq.n	8005540 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	781b      	ldrb	r3, [r3, #0]
 80054ce:	b25b      	sxtb	r3, r3
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	da1b      	bge.n	800550c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80054da:	687a      	ldr	r2, [r7, #4]
 80054dc:	33b0      	adds	r3, #176	@ 0xb0
 80054de:	009b      	lsls	r3, r3, #2
 80054e0:	4413      	add	r3, r2
 80054e2:	685b      	ldr	r3, [r3, #4]
 80054e4:	689b      	ldr	r3, [r3, #8]
 80054e6:	683a      	ldr	r2, [r7, #0]
 80054e8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80054ea:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80054ec:	683a      	ldr	r2, [r7, #0]
 80054ee:	88d2      	ldrh	r2, [r2, #6]
 80054f0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	88db      	ldrh	r3, [r3, #6]
 80054f6:	2b07      	cmp	r3, #7
 80054f8:	bf28      	it	cs
 80054fa:	2307      	movcs	r3, #7
 80054fc:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80054fe:	693b      	ldr	r3, [r7, #16]
 8005500:	89fa      	ldrh	r2, [r7, #14]
 8005502:	4619      	mov	r1, r3
 8005504:	6878      	ldr	r0, [r7, #4]
 8005506:	f001 fd93 	bl	8007030 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800550a:	e090      	b.n	800562e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	785a      	ldrb	r2, [r3, #1]
 8005510:	693b      	ldr	r3, [r7, #16]
 8005512:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	88db      	ldrh	r3, [r3, #6]
 800551a:	2b3f      	cmp	r3, #63	@ 0x3f
 800551c:	d803      	bhi.n	8005526 <USBD_CDC_Setup+0xa6>
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	88db      	ldrh	r3, [r3, #6]
 8005522:	b2da      	uxtb	r2, r3
 8005524:	e000      	b.n	8005528 <USBD_CDC_Setup+0xa8>
 8005526:	2240      	movs	r2, #64	@ 0x40
 8005528:	693b      	ldr	r3, [r7, #16]
 800552a:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800552e:	6939      	ldr	r1, [r7, #16]
 8005530:	693b      	ldr	r3, [r7, #16]
 8005532:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8005536:	461a      	mov	r2, r3
 8005538:	6878      	ldr	r0, [r7, #4]
 800553a:	f001 fda5 	bl	8007088 <USBD_CtlPrepareRx>
      break;
 800553e:	e076      	b.n	800562e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005546:	687a      	ldr	r2, [r7, #4]
 8005548:	33b0      	adds	r3, #176	@ 0xb0
 800554a:	009b      	lsls	r3, r3, #2
 800554c:	4413      	add	r3, r2
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	689b      	ldr	r3, [r3, #8]
 8005552:	683a      	ldr	r2, [r7, #0]
 8005554:	7850      	ldrb	r0, [r2, #1]
 8005556:	2200      	movs	r2, #0
 8005558:	6839      	ldr	r1, [r7, #0]
 800555a:	4798      	blx	r3
      break;
 800555c:	e067      	b.n	800562e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	785b      	ldrb	r3, [r3, #1]
 8005562:	2b0b      	cmp	r3, #11
 8005564:	d851      	bhi.n	800560a <USBD_CDC_Setup+0x18a>
 8005566:	a201      	add	r2, pc, #4	@ (adr r2, 800556c <USBD_CDC_Setup+0xec>)
 8005568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800556c:	0800559d 	.word	0x0800559d
 8005570:	08005619 	.word	0x08005619
 8005574:	0800560b 	.word	0x0800560b
 8005578:	0800560b 	.word	0x0800560b
 800557c:	0800560b 	.word	0x0800560b
 8005580:	0800560b 	.word	0x0800560b
 8005584:	0800560b 	.word	0x0800560b
 8005588:	0800560b 	.word	0x0800560b
 800558c:	0800560b 	.word	0x0800560b
 8005590:	0800560b 	.word	0x0800560b
 8005594:	080055c7 	.word	0x080055c7
 8005598:	080055f1 	.word	0x080055f1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80055a2:	b2db      	uxtb	r3, r3
 80055a4:	2b03      	cmp	r3, #3
 80055a6:	d107      	bne.n	80055b8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80055a8:	f107 030a 	add.w	r3, r7, #10
 80055ac:	2202      	movs	r2, #2
 80055ae:	4619      	mov	r1, r3
 80055b0:	6878      	ldr	r0, [r7, #4]
 80055b2:	f001 fd3d 	bl	8007030 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80055b6:	e032      	b.n	800561e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80055b8:	6839      	ldr	r1, [r7, #0]
 80055ba:	6878      	ldr	r0, [r7, #4]
 80055bc:	f001 fcbb 	bl	8006f36 <USBD_CtlError>
            ret = USBD_FAIL;
 80055c0:	2303      	movs	r3, #3
 80055c2:	75fb      	strb	r3, [r7, #23]
          break;
 80055c4:	e02b      	b.n	800561e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80055cc:	b2db      	uxtb	r3, r3
 80055ce:	2b03      	cmp	r3, #3
 80055d0:	d107      	bne.n	80055e2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80055d2:	f107 030d 	add.w	r3, r7, #13
 80055d6:	2201      	movs	r2, #1
 80055d8:	4619      	mov	r1, r3
 80055da:	6878      	ldr	r0, [r7, #4]
 80055dc:	f001 fd28 	bl	8007030 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80055e0:	e01d      	b.n	800561e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80055e2:	6839      	ldr	r1, [r7, #0]
 80055e4:	6878      	ldr	r0, [r7, #4]
 80055e6:	f001 fca6 	bl	8006f36 <USBD_CtlError>
            ret = USBD_FAIL;
 80055ea:	2303      	movs	r3, #3
 80055ec:	75fb      	strb	r3, [r7, #23]
          break;
 80055ee:	e016      	b.n	800561e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80055f6:	b2db      	uxtb	r3, r3
 80055f8:	2b03      	cmp	r3, #3
 80055fa:	d00f      	beq.n	800561c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80055fc:	6839      	ldr	r1, [r7, #0]
 80055fe:	6878      	ldr	r0, [r7, #4]
 8005600:	f001 fc99 	bl	8006f36 <USBD_CtlError>
            ret = USBD_FAIL;
 8005604:	2303      	movs	r3, #3
 8005606:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005608:	e008      	b.n	800561c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800560a:	6839      	ldr	r1, [r7, #0]
 800560c:	6878      	ldr	r0, [r7, #4]
 800560e:	f001 fc92 	bl	8006f36 <USBD_CtlError>
          ret = USBD_FAIL;
 8005612:	2303      	movs	r3, #3
 8005614:	75fb      	strb	r3, [r7, #23]
          break;
 8005616:	e002      	b.n	800561e <USBD_CDC_Setup+0x19e>
          break;
 8005618:	bf00      	nop
 800561a:	e008      	b.n	800562e <USBD_CDC_Setup+0x1ae>
          break;
 800561c:	bf00      	nop
      }
      break;
 800561e:	e006      	b.n	800562e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8005620:	6839      	ldr	r1, [r7, #0]
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f001 fc87 	bl	8006f36 <USBD_CtlError>
      ret = USBD_FAIL;
 8005628:	2303      	movs	r3, #3
 800562a:	75fb      	strb	r3, [r7, #23]
      break;
 800562c:	bf00      	nop
  }

  return (uint8_t)ret;
 800562e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005630:	4618      	mov	r0, r3
 8005632:	3718      	adds	r7, #24
 8005634:	46bd      	mov	sp, r7
 8005636:	bd80      	pop	{r7, pc}

08005638 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b084      	sub	sp, #16
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
 8005640:	460b      	mov	r3, r1
 8005642:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800564a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	32b0      	adds	r2, #176	@ 0xb0
 8005656:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d101      	bne.n	8005662 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800565e:	2303      	movs	r3, #3
 8005660:	e065      	b.n	800572e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	32b0      	adds	r2, #176	@ 0xb0
 800566c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005670:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005672:	78fb      	ldrb	r3, [r7, #3]
 8005674:	f003 020f 	and.w	r2, r3, #15
 8005678:	6879      	ldr	r1, [r7, #4]
 800567a:	4613      	mov	r3, r2
 800567c:	009b      	lsls	r3, r3, #2
 800567e:	4413      	add	r3, r2
 8005680:	009b      	lsls	r3, r3, #2
 8005682:	440b      	add	r3, r1
 8005684:	3318      	adds	r3, #24
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d02f      	beq.n	80056ec <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800568c:	78fb      	ldrb	r3, [r7, #3]
 800568e:	f003 020f 	and.w	r2, r3, #15
 8005692:	6879      	ldr	r1, [r7, #4]
 8005694:	4613      	mov	r3, r2
 8005696:	009b      	lsls	r3, r3, #2
 8005698:	4413      	add	r3, r2
 800569a:	009b      	lsls	r3, r3, #2
 800569c:	440b      	add	r3, r1
 800569e:	3318      	adds	r3, #24
 80056a0:	681a      	ldr	r2, [r3, #0]
 80056a2:	78fb      	ldrb	r3, [r7, #3]
 80056a4:	f003 010f 	and.w	r1, r3, #15
 80056a8:	68f8      	ldr	r0, [r7, #12]
 80056aa:	460b      	mov	r3, r1
 80056ac:	00db      	lsls	r3, r3, #3
 80056ae:	440b      	add	r3, r1
 80056b0:	009b      	lsls	r3, r3, #2
 80056b2:	4403      	add	r3, r0
 80056b4:	331c      	adds	r3, #28
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	fbb2 f1f3 	udiv	r1, r2, r3
 80056bc:	fb01 f303 	mul.w	r3, r1, r3
 80056c0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d112      	bne.n	80056ec <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80056c6:	78fb      	ldrb	r3, [r7, #3]
 80056c8:	f003 020f 	and.w	r2, r3, #15
 80056cc:	6879      	ldr	r1, [r7, #4]
 80056ce:	4613      	mov	r3, r2
 80056d0:	009b      	lsls	r3, r3, #2
 80056d2:	4413      	add	r3, r2
 80056d4:	009b      	lsls	r3, r3, #2
 80056d6:	440b      	add	r3, r1
 80056d8:	3318      	adds	r3, #24
 80056da:	2200      	movs	r2, #0
 80056dc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80056de:	78f9      	ldrb	r1, [r7, #3]
 80056e0:	2300      	movs	r3, #0
 80056e2:	2200      	movs	r2, #0
 80056e4:	6878      	ldr	r0, [r7, #4]
 80056e6:	f004 fbae 	bl	8009e46 <USBD_LL_Transmit>
 80056ea:	e01f      	b.n	800572c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	2200      	movs	r2, #0
 80056f0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80056fa:	687a      	ldr	r2, [r7, #4]
 80056fc:	33b0      	adds	r3, #176	@ 0xb0
 80056fe:	009b      	lsls	r3, r3, #2
 8005700:	4413      	add	r3, r2
 8005702:	685b      	ldr	r3, [r3, #4]
 8005704:	691b      	ldr	r3, [r3, #16]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d010      	beq.n	800572c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005710:	687a      	ldr	r2, [r7, #4]
 8005712:	33b0      	adds	r3, #176	@ 0xb0
 8005714:	009b      	lsls	r3, r3, #2
 8005716:	4413      	add	r3, r2
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	691b      	ldr	r3, [r3, #16]
 800571c:	68ba      	ldr	r2, [r7, #8]
 800571e:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8005722:	68ba      	ldr	r2, [r7, #8]
 8005724:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8005728:	78fa      	ldrb	r2, [r7, #3]
 800572a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800572c:	2300      	movs	r3, #0
}
 800572e:	4618      	mov	r0, r3
 8005730:	3710      	adds	r7, #16
 8005732:	46bd      	mov	sp, r7
 8005734:	bd80      	pop	{r7, pc}

08005736 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005736:	b580      	push	{r7, lr}
 8005738:	b084      	sub	sp, #16
 800573a:	af00      	add	r7, sp, #0
 800573c:	6078      	str	r0, [r7, #4]
 800573e:	460b      	mov	r3, r1
 8005740:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	32b0      	adds	r2, #176	@ 0xb0
 800574c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005750:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	32b0      	adds	r2, #176	@ 0xb0
 800575c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d101      	bne.n	8005768 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005764:	2303      	movs	r3, #3
 8005766:	e01a      	b.n	800579e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005768:	78fb      	ldrb	r3, [r7, #3]
 800576a:	4619      	mov	r1, r3
 800576c:	6878      	ldr	r0, [r7, #4]
 800576e:	f004 fbac 	bl	8009eca <USBD_LL_GetRxDataSize>
 8005772:	4602      	mov	r2, r0
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005780:	687a      	ldr	r2, [r7, #4]
 8005782:	33b0      	adds	r3, #176	@ 0xb0
 8005784:	009b      	lsls	r3, r3, #2
 8005786:	4413      	add	r3, r2
 8005788:	685b      	ldr	r3, [r3, #4]
 800578a:	68db      	ldr	r3, [r3, #12]
 800578c:	68fa      	ldr	r2, [r7, #12]
 800578e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8005792:	68fa      	ldr	r2, [r7, #12]
 8005794:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8005798:	4611      	mov	r1, r2
 800579a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800579c:	2300      	movs	r3, #0
}
 800579e:	4618      	mov	r0, r3
 80057a0:	3710      	adds	r7, #16
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bd80      	pop	{r7, pc}

080057a6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80057a6:	b580      	push	{r7, lr}
 80057a8:	b084      	sub	sp, #16
 80057aa:	af00      	add	r7, sp, #0
 80057ac:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	32b0      	adds	r2, #176	@ 0xb0
 80057b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057bc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d101      	bne.n	80057c8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80057c4:	2303      	movs	r3, #3
 80057c6:	e024      	b.n	8005812 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80057ce:	687a      	ldr	r2, [r7, #4]
 80057d0:	33b0      	adds	r3, #176	@ 0xb0
 80057d2:	009b      	lsls	r3, r3, #2
 80057d4:	4413      	add	r3, r2
 80057d6:	685b      	ldr	r3, [r3, #4]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d019      	beq.n	8005810 <USBD_CDC_EP0_RxReady+0x6a>
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80057e2:	2bff      	cmp	r3, #255	@ 0xff
 80057e4:	d014      	beq.n	8005810 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80057ec:	687a      	ldr	r2, [r7, #4]
 80057ee:	33b0      	adds	r3, #176	@ 0xb0
 80057f0:	009b      	lsls	r3, r3, #2
 80057f2:	4413      	add	r3, r2
 80057f4:	685b      	ldr	r3, [r3, #4]
 80057f6:	689b      	ldr	r3, [r3, #8]
 80057f8:	68fa      	ldr	r2, [r7, #12]
 80057fa:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 80057fe:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8005800:	68fa      	ldr	r2, [r7, #12]
 8005802:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005806:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	22ff      	movs	r2, #255	@ 0xff
 800580c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8005810:	2300      	movs	r3, #0
}
 8005812:	4618      	mov	r0, r3
 8005814:	3710      	adds	r7, #16
 8005816:	46bd      	mov	sp, r7
 8005818:	bd80      	pop	{r7, pc}
	...

0800581c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b086      	sub	sp, #24
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005824:	2182      	movs	r1, #130	@ 0x82
 8005826:	4818      	ldr	r0, [pc, #96]	@ (8005888 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005828:	f000 fd4f 	bl	80062ca <USBD_GetEpDesc>
 800582c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800582e:	2101      	movs	r1, #1
 8005830:	4815      	ldr	r0, [pc, #84]	@ (8005888 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005832:	f000 fd4a 	bl	80062ca <USBD_GetEpDesc>
 8005836:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005838:	2181      	movs	r1, #129	@ 0x81
 800583a:	4813      	ldr	r0, [pc, #76]	@ (8005888 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800583c:	f000 fd45 	bl	80062ca <USBD_GetEpDesc>
 8005840:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d002      	beq.n	800584e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005848:	697b      	ldr	r3, [r7, #20]
 800584a:	2210      	movs	r2, #16
 800584c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800584e:	693b      	ldr	r3, [r7, #16]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d006      	beq.n	8005862 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005854:	693b      	ldr	r3, [r7, #16]
 8005856:	2200      	movs	r2, #0
 8005858:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800585c:	711a      	strb	r2, [r3, #4]
 800585e:	2200      	movs	r2, #0
 8005860:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d006      	beq.n	8005876 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	2200      	movs	r2, #0
 800586c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005870:	711a      	strb	r2, [r3, #4]
 8005872:	2200      	movs	r2, #0
 8005874:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2243      	movs	r2, #67	@ 0x43
 800587a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800587c:	4b02      	ldr	r3, [pc, #8]	@ (8005888 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800587e:	4618      	mov	r0, r3
 8005880:	3718      	adds	r7, #24
 8005882:	46bd      	mov	sp, r7
 8005884:	bd80      	pop	{r7, pc}
 8005886:	bf00      	nop
 8005888:	20000050 	.word	0x20000050

0800588c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b086      	sub	sp, #24
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005894:	2182      	movs	r1, #130	@ 0x82
 8005896:	4818      	ldr	r0, [pc, #96]	@ (80058f8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005898:	f000 fd17 	bl	80062ca <USBD_GetEpDesc>
 800589c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800589e:	2101      	movs	r1, #1
 80058a0:	4815      	ldr	r0, [pc, #84]	@ (80058f8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80058a2:	f000 fd12 	bl	80062ca <USBD_GetEpDesc>
 80058a6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80058a8:	2181      	movs	r1, #129	@ 0x81
 80058aa:	4813      	ldr	r0, [pc, #76]	@ (80058f8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80058ac:	f000 fd0d 	bl	80062ca <USBD_GetEpDesc>
 80058b0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80058b2:	697b      	ldr	r3, [r7, #20]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d002      	beq.n	80058be <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80058b8:	697b      	ldr	r3, [r7, #20]
 80058ba:	2210      	movs	r2, #16
 80058bc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80058be:	693b      	ldr	r3, [r7, #16]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d006      	beq.n	80058d2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80058c4:	693b      	ldr	r3, [r7, #16]
 80058c6:	2200      	movs	r2, #0
 80058c8:	711a      	strb	r2, [r3, #4]
 80058ca:	2200      	movs	r2, #0
 80058cc:	f042 0202 	orr.w	r2, r2, #2
 80058d0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d006      	beq.n	80058e6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	2200      	movs	r2, #0
 80058dc:	711a      	strb	r2, [r3, #4]
 80058de:	2200      	movs	r2, #0
 80058e0:	f042 0202 	orr.w	r2, r2, #2
 80058e4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2243      	movs	r2, #67	@ 0x43
 80058ea:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80058ec:	4b02      	ldr	r3, [pc, #8]	@ (80058f8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80058ee:	4618      	mov	r0, r3
 80058f0:	3718      	adds	r7, #24
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bd80      	pop	{r7, pc}
 80058f6:	bf00      	nop
 80058f8:	20000050 	.word	0x20000050

080058fc <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b086      	sub	sp, #24
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005904:	2182      	movs	r1, #130	@ 0x82
 8005906:	4818      	ldr	r0, [pc, #96]	@ (8005968 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005908:	f000 fcdf 	bl	80062ca <USBD_GetEpDesc>
 800590c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800590e:	2101      	movs	r1, #1
 8005910:	4815      	ldr	r0, [pc, #84]	@ (8005968 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005912:	f000 fcda 	bl	80062ca <USBD_GetEpDesc>
 8005916:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005918:	2181      	movs	r1, #129	@ 0x81
 800591a:	4813      	ldr	r0, [pc, #76]	@ (8005968 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800591c:	f000 fcd5 	bl	80062ca <USBD_GetEpDesc>
 8005920:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005922:	697b      	ldr	r3, [r7, #20]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d002      	beq.n	800592e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	2210      	movs	r2, #16
 800592c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800592e:	693b      	ldr	r3, [r7, #16]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d006      	beq.n	8005942 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005934:	693b      	ldr	r3, [r7, #16]
 8005936:	2200      	movs	r2, #0
 8005938:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800593c:	711a      	strb	r2, [r3, #4]
 800593e:	2200      	movs	r2, #0
 8005940:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d006      	beq.n	8005956 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	2200      	movs	r2, #0
 800594c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005950:	711a      	strb	r2, [r3, #4]
 8005952:	2200      	movs	r2, #0
 8005954:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2243      	movs	r2, #67	@ 0x43
 800595a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800595c:	4b02      	ldr	r3, [pc, #8]	@ (8005968 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800595e:	4618      	mov	r0, r3
 8005960:	3718      	adds	r7, #24
 8005962:	46bd      	mov	sp, r7
 8005964:	bd80      	pop	{r7, pc}
 8005966:	bf00      	nop
 8005968:	20000050 	.word	0x20000050

0800596c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800596c:	b480      	push	{r7}
 800596e:	b083      	sub	sp, #12
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	220a      	movs	r2, #10
 8005978:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800597a:	4b03      	ldr	r3, [pc, #12]	@ (8005988 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800597c:	4618      	mov	r0, r3
 800597e:	370c      	adds	r7, #12
 8005980:	46bd      	mov	sp, r7
 8005982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005986:	4770      	bx	lr
 8005988:	2000000c 	.word	0x2000000c

0800598c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800598c:	b480      	push	{r7}
 800598e:	b083      	sub	sp, #12
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
 8005994:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d101      	bne.n	80059a0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800599c:	2303      	movs	r3, #3
 800599e:	e009      	b.n	80059b4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80059a6:	687a      	ldr	r2, [r7, #4]
 80059a8:	33b0      	adds	r3, #176	@ 0xb0
 80059aa:	009b      	lsls	r3, r3, #2
 80059ac:	4413      	add	r3, r2
 80059ae:	683a      	ldr	r2, [r7, #0]
 80059b0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80059b2:	2300      	movs	r3, #0
}
 80059b4:	4618      	mov	r0, r3
 80059b6:	370c      	adds	r7, #12
 80059b8:	46bd      	mov	sp, r7
 80059ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059be:	4770      	bx	lr

080059c0 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80059c0:	b480      	push	{r7}
 80059c2:	b087      	sub	sp, #28
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	60f8      	str	r0, [r7, #12]
 80059c8:	60b9      	str	r1, [r7, #8]
 80059ca:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	32b0      	adds	r2, #176	@ 0xb0
 80059d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059da:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80059dc:	697b      	ldr	r3, [r7, #20]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d101      	bne.n	80059e6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80059e2:	2303      	movs	r3, #3
 80059e4:	e008      	b.n	80059f8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80059e6:	697b      	ldr	r3, [r7, #20]
 80059e8:	68ba      	ldr	r2, [r7, #8]
 80059ea:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80059ee:	697b      	ldr	r3, [r7, #20]
 80059f0:	687a      	ldr	r2, [r7, #4]
 80059f2:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80059f6:	2300      	movs	r3, #0
}
 80059f8:	4618      	mov	r0, r3
 80059fa:	371c      	adds	r7, #28
 80059fc:	46bd      	mov	sp, r7
 80059fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a02:	4770      	bx	lr

08005a04 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005a04:	b480      	push	{r7}
 8005a06:	b085      	sub	sp, #20
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
 8005a0c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	32b0      	adds	r2, #176	@ 0xb0
 8005a18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a1c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d101      	bne.n	8005a28 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8005a24:	2303      	movs	r3, #3
 8005a26:	e004      	b.n	8005a32 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	683a      	ldr	r2, [r7, #0]
 8005a2c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8005a30:	2300      	movs	r3, #0
}
 8005a32:	4618      	mov	r0, r3
 8005a34:	3714      	adds	r7, #20
 8005a36:	46bd      	mov	sp, r7
 8005a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3c:	4770      	bx	lr
	...

08005a40 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b084      	sub	sp, #16
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	32b0      	adds	r2, #176	@ 0xb0
 8005a52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a56:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8005a58:	2301      	movs	r3, #1
 8005a5a:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d101      	bne.n	8005a66 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8005a62:	2303      	movs	r3, #3
 8005a64:	e025      	b.n	8005ab2 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d11f      	bne.n	8005ab0 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	2201      	movs	r2, #1
 8005a74:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8005a78:	4b10      	ldr	r3, [pc, #64]	@ (8005abc <USBD_CDC_TransmitPacket+0x7c>)
 8005a7a:	781b      	ldrb	r3, [r3, #0]
 8005a7c:	f003 020f 	and.w	r2, r3, #15
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8005a86:	6878      	ldr	r0, [r7, #4]
 8005a88:	4613      	mov	r3, r2
 8005a8a:	009b      	lsls	r3, r3, #2
 8005a8c:	4413      	add	r3, r2
 8005a8e:	009b      	lsls	r3, r3, #2
 8005a90:	4403      	add	r3, r0
 8005a92:	3318      	adds	r3, #24
 8005a94:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8005a96:	4b09      	ldr	r3, [pc, #36]	@ (8005abc <USBD_CDC_TransmitPacket+0x7c>)
 8005a98:	7819      	ldrb	r1, [r3, #0]
 8005a9a:	68bb      	ldr	r3, [r7, #8]
 8005a9c:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8005aa6:	6878      	ldr	r0, [r7, #4]
 8005aa8:	f004 f9cd 	bl	8009e46 <USBD_LL_Transmit>

    ret = USBD_OK;
 8005aac:	2300      	movs	r3, #0
 8005aae:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8005ab0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	3710      	adds	r7, #16
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	bd80      	pop	{r7, pc}
 8005aba:	bf00      	nop
 8005abc:	20000093 	.word	0x20000093

08005ac0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b084      	sub	sp, #16
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	32b0      	adds	r2, #176	@ 0xb0
 8005ad2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ad6:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	32b0      	adds	r2, #176	@ 0xb0
 8005ae2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d101      	bne.n	8005aee <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8005aea:	2303      	movs	r3, #3
 8005aec:	e018      	b.n	8005b20 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	7c1b      	ldrb	r3, [r3, #16]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d10a      	bne.n	8005b0c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005af6:	4b0c      	ldr	r3, [pc, #48]	@ (8005b28 <USBD_CDC_ReceivePacket+0x68>)
 8005af8:	7819      	ldrb	r1, [r3, #0]
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005b00:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005b04:	6878      	ldr	r0, [r7, #4]
 8005b06:	f004 f9bf 	bl	8009e88 <USBD_LL_PrepareReceive>
 8005b0a:	e008      	b.n	8005b1e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005b0c:	4b06      	ldr	r3, [pc, #24]	@ (8005b28 <USBD_CDC_ReceivePacket+0x68>)
 8005b0e:	7819      	ldrb	r1, [r3, #0]
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005b16:	2340      	movs	r3, #64	@ 0x40
 8005b18:	6878      	ldr	r0, [r7, #4]
 8005b1a:	f004 f9b5 	bl	8009e88 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005b1e:	2300      	movs	r3, #0
}
 8005b20:	4618      	mov	r0, r3
 8005b22:	3710      	adds	r7, #16
 8005b24:	46bd      	mov	sp, r7
 8005b26:	bd80      	pop	{r7, pc}
 8005b28:	20000094 	.word	0x20000094

08005b2c <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b086      	sub	sp, #24
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	60f8      	str	r0, [r7, #12]
 8005b34:	60b9      	str	r1, [r7, #8]
 8005b36:	4613      	mov	r3, r2
 8005b38:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d101      	bne.n	8005b44 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005b40:	2303      	movs	r3, #3
 8005b42:	e01f      	b.n	8005b84 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	2200      	movs	r2, #0
 8005b48:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	2200      	movs	r2, #0
 8005b58:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d003      	beq.n	8005b6a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	68ba      	ldr	r2, [r7, #8]
 8005b66:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	2201      	movs	r2, #1
 8005b6e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	79fa      	ldrb	r2, [r7, #7]
 8005b76:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005b78:	68f8      	ldr	r0, [r7, #12]
 8005b7a:	f004 f82f 	bl	8009bdc <USBD_LL_Init>
 8005b7e:	4603      	mov	r3, r0
 8005b80:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005b82:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b84:	4618      	mov	r0, r3
 8005b86:	3718      	adds	r7, #24
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	bd80      	pop	{r7, pc}

08005b8c <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b084      	sub	sp, #16
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
 8005b94:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005b96:	2300      	movs	r3, #0
 8005b98:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d101      	bne.n	8005ba4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005ba0:	2303      	movs	r3, #3
 8005ba2:	e025      	b.n	8005bf0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	683a      	ldr	r2, [r7, #0]
 8005ba8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	32ae      	adds	r2, #174	@ 0xae
 8005bb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d00f      	beq.n	8005be0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	32ae      	adds	r2, #174	@ 0xae
 8005bca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bd0:	f107 020e 	add.w	r2, r7, #14
 8005bd4:	4610      	mov	r0, r2
 8005bd6:	4798      	blx	r3
 8005bd8:	4602      	mov	r2, r0
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8005be6:	1c5a      	adds	r2, r3, #1
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8005bee:	2300      	movs	r3, #0
}
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	3710      	adds	r7, #16
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	bd80      	pop	{r7, pc}

08005bf8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b082      	sub	sp, #8
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005c00:	6878      	ldr	r0, [r7, #4]
 8005c02:	f004 f837 	bl	8009c74 <USBD_LL_Start>
 8005c06:	4603      	mov	r3, r0
}
 8005c08:	4618      	mov	r0, r3
 8005c0a:	3708      	adds	r7, #8
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bd80      	pop	{r7, pc}

08005c10 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b083      	sub	sp, #12
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005c18:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	370c      	adds	r7, #12
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c24:	4770      	bx	lr

08005c26 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005c26:	b580      	push	{r7, lr}
 8005c28:	b084      	sub	sp, #16
 8005c2a:	af00      	add	r7, sp, #0
 8005c2c:	6078      	str	r0, [r7, #4]
 8005c2e:	460b      	mov	r3, r1
 8005c30:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005c32:	2300      	movs	r3, #0
 8005c34:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d009      	beq.n	8005c54 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	78fa      	ldrb	r2, [r7, #3]
 8005c4a:	4611      	mov	r1, r2
 8005c4c:	6878      	ldr	r0, [r7, #4]
 8005c4e:	4798      	blx	r3
 8005c50:	4603      	mov	r3, r0
 8005c52:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005c54:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c56:	4618      	mov	r0, r3
 8005c58:	3710      	adds	r7, #16
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bd80      	pop	{r7, pc}

08005c5e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005c5e:	b580      	push	{r7, lr}
 8005c60:	b084      	sub	sp, #16
 8005c62:	af00      	add	r7, sp, #0
 8005c64:	6078      	str	r0, [r7, #4]
 8005c66:	460b      	mov	r3, r1
 8005c68:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005c74:	685b      	ldr	r3, [r3, #4]
 8005c76:	78fa      	ldrb	r2, [r7, #3]
 8005c78:	4611      	mov	r1, r2
 8005c7a:	6878      	ldr	r0, [r7, #4]
 8005c7c:	4798      	blx	r3
 8005c7e:	4603      	mov	r3, r0
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d001      	beq.n	8005c88 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005c84:	2303      	movs	r3, #3
 8005c86:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005c88:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	3710      	adds	r7, #16
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	bd80      	pop	{r7, pc}

08005c92 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005c92:	b580      	push	{r7, lr}
 8005c94:	b084      	sub	sp, #16
 8005c96:	af00      	add	r7, sp, #0
 8005c98:	6078      	str	r0, [r7, #4]
 8005c9a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005ca2:	6839      	ldr	r1, [r7, #0]
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	f001 f90c 	bl	8006ec2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2201      	movs	r2, #1
 8005cae:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8005cb8:	461a      	mov	r2, r3
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8005cc6:	f003 031f 	and.w	r3, r3, #31
 8005cca:	2b02      	cmp	r3, #2
 8005ccc:	d01a      	beq.n	8005d04 <USBD_LL_SetupStage+0x72>
 8005cce:	2b02      	cmp	r3, #2
 8005cd0:	d822      	bhi.n	8005d18 <USBD_LL_SetupStage+0x86>
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d002      	beq.n	8005cdc <USBD_LL_SetupStage+0x4a>
 8005cd6:	2b01      	cmp	r3, #1
 8005cd8:	d00a      	beq.n	8005cf0 <USBD_LL_SetupStage+0x5e>
 8005cda:	e01d      	b.n	8005d18 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005ce2:	4619      	mov	r1, r3
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	f000 fb63 	bl	80063b0 <USBD_StdDevReq>
 8005cea:	4603      	mov	r3, r0
 8005cec:	73fb      	strb	r3, [r7, #15]
      break;
 8005cee:	e020      	b.n	8005d32 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005cf6:	4619      	mov	r1, r3
 8005cf8:	6878      	ldr	r0, [r7, #4]
 8005cfa:	f000 fbcb 	bl	8006494 <USBD_StdItfReq>
 8005cfe:	4603      	mov	r3, r0
 8005d00:	73fb      	strb	r3, [r7, #15]
      break;
 8005d02:	e016      	b.n	8005d32 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005d0a:	4619      	mov	r1, r3
 8005d0c:	6878      	ldr	r0, [r7, #4]
 8005d0e:	f000 fc2d 	bl	800656c <USBD_StdEPReq>
 8005d12:	4603      	mov	r3, r0
 8005d14:	73fb      	strb	r3, [r7, #15]
      break;
 8005d16:	e00c      	b.n	8005d32 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8005d1e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8005d22:	b2db      	uxtb	r3, r3
 8005d24:	4619      	mov	r1, r3
 8005d26:	6878      	ldr	r0, [r7, #4]
 8005d28:	f004 f804 	bl	8009d34 <USBD_LL_StallEP>
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	73fb      	strb	r3, [r7, #15]
      break;
 8005d30:	bf00      	nop
  }

  return ret;
 8005d32:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d34:	4618      	mov	r0, r3
 8005d36:	3710      	adds	r7, #16
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	bd80      	pop	{r7, pc}

08005d3c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b086      	sub	sp, #24
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	60f8      	str	r0, [r7, #12]
 8005d44:	460b      	mov	r3, r1
 8005d46:	607a      	str	r2, [r7, #4]
 8005d48:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8005d4e:	7afb      	ldrb	r3, [r7, #11]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d16e      	bne.n	8005e32 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8005d5a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8005d62:	2b03      	cmp	r3, #3
 8005d64:	f040 8098 	bne.w	8005e98 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8005d68:	693b      	ldr	r3, [r7, #16]
 8005d6a:	689a      	ldr	r2, [r3, #8]
 8005d6c:	693b      	ldr	r3, [r7, #16]
 8005d6e:	68db      	ldr	r3, [r3, #12]
 8005d70:	429a      	cmp	r2, r3
 8005d72:	d913      	bls.n	8005d9c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8005d74:	693b      	ldr	r3, [r7, #16]
 8005d76:	689a      	ldr	r2, [r3, #8]
 8005d78:	693b      	ldr	r3, [r7, #16]
 8005d7a:	68db      	ldr	r3, [r3, #12]
 8005d7c:	1ad2      	subs	r2, r2, r3
 8005d7e:	693b      	ldr	r3, [r7, #16]
 8005d80:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005d82:	693b      	ldr	r3, [r7, #16]
 8005d84:	68da      	ldr	r2, [r3, #12]
 8005d86:	693b      	ldr	r3, [r7, #16]
 8005d88:	689b      	ldr	r3, [r3, #8]
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	bf28      	it	cs
 8005d8e:	4613      	movcs	r3, r2
 8005d90:	461a      	mov	r2, r3
 8005d92:	6879      	ldr	r1, [r7, #4]
 8005d94:	68f8      	ldr	r0, [r7, #12]
 8005d96:	f001 f994 	bl	80070c2 <USBD_CtlContinueRx>
 8005d9a:	e07d      	b.n	8005e98 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8005da2:	f003 031f 	and.w	r3, r3, #31
 8005da6:	2b02      	cmp	r3, #2
 8005da8:	d014      	beq.n	8005dd4 <USBD_LL_DataOutStage+0x98>
 8005daa:	2b02      	cmp	r3, #2
 8005dac:	d81d      	bhi.n	8005dea <USBD_LL_DataOutStage+0xae>
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d002      	beq.n	8005db8 <USBD_LL_DataOutStage+0x7c>
 8005db2:	2b01      	cmp	r3, #1
 8005db4:	d003      	beq.n	8005dbe <USBD_LL_DataOutStage+0x82>
 8005db6:	e018      	b.n	8005dea <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8005db8:	2300      	movs	r3, #0
 8005dba:	75bb      	strb	r3, [r7, #22]
            break;
 8005dbc:	e018      	b.n	8005df0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8005dc4:	b2db      	uxtb	r3, r3
 8005dc6:	4619      	mov	r1, r3
 8005dc8:	68f8      	ldr	r0, [r7, #12]
 8005dca:	f000 fa64 	bl	8006296 <USBD_CoreFindIF>
 8005dce:	4603      	mov	r3, r0
 8005dd0:	75bb      	strb	r3, [r7, #22]
            break;
 8005dd2:	e00d      	b.n	8005df0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8005dda:	b2db      	uxtb	r3, r3
 8005ddc:	4619      	mov	r1, r3
 8005dde:	68f8      	ldr	r0, [r7, #12]
 8005de0:	f000 fa66 	bl	80062b0 <USBD_CoreFindEP>
 8005de4:	4603      	mov	r3, r0
 8005de6:	75bb      	strb	r3, [r7, #22]
            break;
 8005de8:	e002      	b.n	8005df0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8005dea:	2300      	movs	r3, #0
 8005dec:	75bb      	strb	r3, [r7, #22]
            break;
 8005dee:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8005df0:	7dbb      	ldrb	r3, [r7, #22]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d119      	bne.n	8005e2a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005dfc:	b2db      	uxtb	r3, r3
 8005dfe:	2b03      	cmp	r3, #3
 8005e00:	d113      	bne.n	8005e2a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8005e02:	7dba      	ldrb	r2, [r7, #22]
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	32ae      	adds	r2, #174	@ 0xae
 8005e08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e0c:	691b      	ldr	r3, [r3, #16]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d00b      	beq.n	8005e2a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8005e12:	7dba      	ldrb	r2, [r7, #22]
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8005e1a:	7dba      	ldrb	r2, [r7, #22]
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	32ae      	adds	r2, #174	@ 0xae
 8005e20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e24:	691b      	ldr	r3, [r3, #16]
 8005e26:	68f8      	ldr	r0, [r7, #12]
 8005e28:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005e2a:	68f8      	ldr	r0, [r7, #12]
 8005e2c:	f001 f95a 	bl	80070e4 <USBD_CtlSendStatus>
 8005e30:	e032      	b.n	8005e98 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8005e32:	7afb      	ldrb	r3, [r7, #11]
 8005e34:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005e38:	b2db      	uxtb	r3, r3
 8005e3a:	4619      	mov	r1, r3
 8005e3c:	68f8      	ldr	r0, [r7, #12]
 8005e3e:	f000 fa37 	bl	80062b0 <USBD_CoreFindEP>
 8005e42:	4603      	mov	r3, r0
 8005e44:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005e46:	7dbb      	ldrb	r3, [r7, #22]
 8005e48:	2bff      	cmp	r3, #255	@ 0xff
 8005e4a:	d025      	beq.n	8005e98 <USBD_LL_DataOutStage+0x15c>
 8005e4c:	7dbb      	ldrb	r3, [r7, #22]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d122      	bne.n	8005e98 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005e58:	b2db      	uxtb	r3, r3
 8005e5a:	2b03      	cmp	r3, #3
 8005e5c:	d117      	bne.n	8005e8e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8005e5e:	7dba      	ldrb	r2, [r7, #22]
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	32ae      	adds	r2, #174	@ 0xae
 8005e64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e68:	699b      	ldr	r3, [r3, #24]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d00f      	beq.n	8005e8e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8005e6e:	7dba      	ldrb	r2, [r7, #22]
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8005e76:	7dba      	ldrb	r2, [r7, #22]
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	32ae      	adds	r2, #174	@ 0xae
 8005e7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e80:	699b      	ldr	r3, [r3, #24]
 8005e82:	7afa      	ldrb	r2, [r7, #11]
 8005e84:	4611      	mov	r1, r2
 8005e86:	68f8      	ldr	r0, [r7, #12]
 8005e88:	4798      	blx	r3
 8005e8a:	4603      	mov	r3, r0
 8005e8c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8005e8e:	7dfb      	ldrb	r3, [r7, #23]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d001      	beq.n	8005e98 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8005e94:	7dfb      	ldrb	r3, [r7, #23]
 8005e96:	e000      	b.n	8005e9a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8005e98:	2300      	movs	r3, #0
}
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	3718      	adds	r7, #24
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	bd80      	pop	{r7, pc}

08005ea2 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005ea2:	b580      	push	{r7, lr}
 8005ea4:	b086      	sub	sp, #24
 8005ea6:	af00      	add	r7, sp, #0
 8005ea8:	60f8      	str	r0, [r7, #12]
 8005eaa:	460b      	mov	r3, r1
 8005eac:	607a      	str	r2, [r7, #4]
 8005eae:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8005eb0:	7afb      	ldrb	r3, [r7, #11]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d16f      	bne.n	8005f96 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	3314      	adds	r3, #20
 8005eba:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8005ec2:	2b02      	cmp	r3, #2
 8005ec4:	d15a      	bne.n	8005f7c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8005ec6:	693b      	ldr	r3, [r7, #16]
 8005ec8:	689a      	ldr	r2, [r3, #8]
 8005eca:	693b      	ldr	r3, [r7, #16]
 8005ecc:	68db      	ldr	r3, [r3, #12]
 8005ece:	429a      	cmp	r2, r3
 8005ed0:	d914      	bls.n	8005efc <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005ed2:	693b      	ldr	r3, [r7, #16]
 8005ed4:	689a      	ldr	r2, [r3, #8]
 8005ed6:	693b      	ldr	r3, [r7, #16]
 8005ed8:	68db      	ldr	r3, [r3, #12]
 8005eda:	1ad2      	subs	r2, r2, r3
 8005edc:	693b      	ldr	r3, [r7, #16]
 8005ede:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005ee0:	693b      	ldr	r3, [r7, #16]
 8005ee2:	689b      	ldr	r3, [r3, #8]
 8005ee4:	461a      	mov	r2, r3
 8005ee6:	6879      	ldr	r1, [r7, #4]
 8005ee8:	68f8      	ldr	r0, [r7, #12]
 8005eea:	f001 f8bc 	bl	8007066 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005eee:	2300      	movs	r3, #0
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	2100      	movs	r1, #0
 8005ef4:	68f8      	ldr	r0, [r7, #12]
 8005ef6:	f003 ffc7 	bl	8009e88 <USBD_LL_PrepareReceive>
 8005efa:	e03f      	b.n	8005f7c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005efc:	693b      	ldr	r3, [r7, #16]
 8005efe:	68da      	ldr	r2, [r3, #12]
 8005f00:	693b      	ldr	r3, [r7, #16]
 8005f02:	689b      	ldr	r3, [r3, #8]
 8005f04:	429a      	cmp	r2, r3
 8005f06:	d11c      	bne.n	8005f42 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005f08:	693b      	ldr	r3, [r7, #16]
 8005f0a:	685a      	ldr	r2, [r3, #4]
 8005f0c:	693b      	ldr	r3, [r7, #16]
 8005f0e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005f10:	429a      	cmp	r2, r3
 8005f12:	d316      	bcc.n	8005f42 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005f14:	693b      	ldr	r3, [r7, #16]
 8005f16:	685a      	ldr	r2, [r3, #4]
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005f1e:	429a      	cmp	r2, r3
 8005f20:	d20f      	bcs.n	8005f42 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005f22:	2200      	movs	r2, #0
 8005f24:	2100      	movs	r1, #0
 8005f26:	68f8      	ldr	r0, [r7, #12]
 8005f28:	f001 f89d 	bl	8007066 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	2200      	movs	r2, #0
 8005f30:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005f34:	2300      	movs	r3, #0
 8005f36:	2200      	movs	r2, #0
 8005f38:	2100      	movs	r1, #0
 8005f3a:	68f8      	ldr	r0, [r7, #12]
 8005f3c:	f003 ffa4 	bl	8009e88 <USBD_LL_PrepareReceive>
 8005f40:	e01c      	b.n	8005f7c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005f48:	b2db      	uxtb	r3, r3
 8005f4a:	2b03      	cmp	r3, #3
 8005f4c:	d10f      	bne.n	8005f6e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005f54:	68db      	ldr	r3, [r3, #12]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d009      	beq.n	8005f6e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005f68:	68db      	ldr	r3, [r3, #12]
 8005f6a:	68f8      	ldr	r0, [r7, #12]
 8005f6c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005f6e:	2180      	movs	r1, #128	@ 0x80
 8005f70:	68f8      	ldr	r0, [r7, #12]
 8005f72:	f003 fedf 	bl	8009d34 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005f76:	68f8      	ldr	r0, [r7, #12]
 8005f78:	f001 f8c7 	bl	800710a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d03a      	beq.n	8005ffc <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8005f86:	68f8      	ldr	r0, [r7, #12]
 8005f88:	f7ff fe42 	bl	8005c10 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8005f94:	e032      	b.n	8005ffc <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8005f96:	7afb      	ldrb	r3, [r7, #11]
 8005f98:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005f9c:	b2db      	uxtb	r3, r3
 8005f9e:	4619      	mov	r1, r3
 8005fa0:	68f8      	ldr	r0, [r7, #12]
 8005fa2:	f000 f985 	bl	80062b0 <USBD_CoreFindEP>
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005faa:	7dfb      	ldrb	r3, [r7, #23]
 8005fac:	2bff      	cmp	r3, #255	@ 0xff
 8005fae:	d025      	beq.n	8005ffc <USBD_LL_DataInStage+0x15a>
 8005fb0:	7dfb      	ldrb	r3, [r7, #23]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d122      	bne.n	8005ffc <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005fbc:	b2db      	uxtb	r3, r3
 8005fbe:	2b03      	cmp	r3, #3
 8005fc0:	d11c      	bne.n	8005ffc <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8005fc2:	7dfa      	ldrb	r2, [r7, #23]
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	32ae      	adds	r2, #174	@ 0xae
 8005fc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fcc:	695b      	ldr	r3, [r3, #20]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d014      	beq.n	8005ffc <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8005fd2:	7dfa      	ldrb	r2, [r7, #23]
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8005fda:	7dfa      	ldrb	r2, [r7, #23]
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	32ae      	adds	r2, #174	@ 0xae
 8005fe0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fe4:	695b      	ldr	r3, [r3, #20]
 8005fe6:	7afa      	ldrb	r2, [r7, #11]
 8005fe8:	4611      	mov	r1, r2
 8005fea:	68f8      	ldr	r0, [r7, #12]
 8005fec:	4798      	blx	r3
 8005fee:	4603      	mov	r3, r0
 8005ff0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8005ff2:	7dbb      	ldrb	r3, [r7, #22]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d001      	beq.n	8005ffc <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8005ff8:	7dbb      	ldrb	r3, [r7, #22]
 8005ffa:	e000      	b.n	8005ffe <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8005ffc:	2300      	movs	r3, #0
}
 8005ffe:	4618      	mov	r0, r3
 8006000:	3718      	adds	r7, #24
 8006002:	46bd      	mov	sp, r7
 8006004:	bd80      	pop	{r7, pc}

08006006 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006006:	b580      	push	{r7, lr}
 8006008:	b084      	sub	sp, #16
 800600a:	af00      	add	r7, sp, #0
 800600c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800600e:	2300      	movs	r3, #0
 8006010:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2201      	movs	r2, #1
 8006016:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2200      	movs	r2, #0
 800601e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2200      	movs	r2, #0
 8006026:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2200      	movs	r2, #0
 800602c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2200      	movs	r2, #0
 8006034:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800603e:	2b00      	cmp	r3, #0
 8006040:	d014      	beq.n	800606c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006048:	685b      	ldr	r3, [r3, #4]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d00e      	beq.n	800606c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006054:	685b      	ldr	r3, [r3, #4]
 8006056:	687a      	ldr	r2, [r7, #4]
 8006058:	6852      	ldr	r2, [r2, #4]
 800605a:	b2d2      	uxtb	r2, r2
 800605c:	4611      	mov	r1, r2
 800605e:	6878      	ldr	r0, [r7, #4]
 8006060:	4798      	blx	r3
 8006062:	4603      	mov	r3, r0
 8006064:	2b00      	cmp	r3, #0
 8006066:	d001      	beq.n	800606c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006068:	2303      	movs	r3, #3
 800606a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800606c:	2340      	movs	r3, #64	@ 0x40
 800606e:	2200      	movs	r2, #0
 8006070:	2100      	movs	r1, #0
 8006072:	6878      	ldr	r0, [r7, #4]
 8006074:	f003 fe19 	bl	8009caa <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2201      	movs	r2, #1
 800607c:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2240      	movs	r2, #64	@ 0x40
 8006084:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006088:	2340      	movs	r3, #64	@ 0x40
 800608a:	2200      	movs	r2, #0
 800608c:	2180      	movs	r1, #128	@ 0x80
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	f003 fe0b 	bl	8009caa <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2201      	movs	r2, #1
 8006098:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2240      	movs	r2, #64	@ 0x40
 800609e:	621a      	str	r2, [r3, #32]

  return ret;
 80060a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80060a2:	4618      	mov	r0, r3
 80060a4:	3710      	adds	r7, #16
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bd80      	pop	{r7, pc}

080060aa <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80060aa:	b480      	push	{r7}
 80060ac:	b083      	sub	sp, #12
 80060ae:	af00      	add	r7, sp, #0
 80060b0:	6078      	str	r0, [r7, #4]
 80060b2:	460b      	mov	r3, r1
 80060b4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	78fa      	ldrb	r2, [r7, #3]
 80060ba:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80060bc:	2300      	movs	r3, #0
}
 80060be:	4618      	mov	r0, r3
 80060c0:	370c      	adds	r7, #12
 80060c2:	46bd      	mov	sp, r7
 80060c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c8:	4770      	bx	lr

080060ca <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80060ca:	b480      	push	{r7}
 80060cc:	b083      	sub	sp, #12
 80060ce:	af00      	add	r7, sp, #0
 80060d0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80060d8:	b2db      	uxtb	r3, r3
 80060da:	2b04      	cmp	r3, #4
 80060dc:	d006      	beq.n	80060ec <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80060e4:	b2da      	uxtb	r2, r3
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2204      	movs	r2, #4
 80060f0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80060f4:	2300      	movs	r3, #0
}
 80060f6:	4618      	mov	r0, r3
 80060f8:	370c      	adds	r7, #12
 80060fa:	46bd      	mov	sp, r7
 80060fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006100:	4770      	bx	lr

08006102 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006102:	b480      	push	{r7}
 8006104:	b083      	sub	sp, #12
 8006106:	af00      	add	r7, sp, #0
 8006108:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006110:	b2db      	uxtb	r3, r3
 8006112:	2b04      	cmp	r3, #4
 8006114:	d106      	bne.n	8006124 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800611c:	b2da      	uxtb	r2, r3
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8006124:	2300      	movs	r3, #0
}
 8006126:	4618      	mov	r0, r3
 8006128:	370c      	adds	r7, #12
 800612a:	46bd      	mov	sp, r7
 800612c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006130:	4770      	bx	lr

08006132 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006132:	b580      	push	{r7, lr}
 8006134:	b082      	sub	sp, #8
 8006136:	af00      	add	r7, sp, #0
 8006138:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006140:	b2db      	uxtb	r3, r3
 8006142:	2b03      	cmp	r3, #3
 8006144:	d110      	bne.n	8006168 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800614c:	2b00      	cmp	r3, #0
 800614e:	d00b      	beq.n	8006168 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006156:	69db      	ldr	r3, [r3, #28]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d005      	beq.n	8006168 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006162:	69db      	ldr	r3, [r3, #28]
 8006164:	6878      	ldr	r0, [r7, #4]
 8006166:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006168:	2300      	movs	r3, #0
}
 800616a:	4618      	mov	r0, r3
 800616c:	3708      	adds	r7, #8
 800616e:	46bd      	mov	sp, r7
 8006170:	bd80      	pop	{r7, pc}

08006172 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006172:	b580      	push	{r7, lr}
 8006174:	b082      	sub	sp, #8
 8006176:	af00      	add	r7, sp, #0
 8006178:	6078      	str	r0, [r7, #4]
 800617a:	460b      	mov	r3, r1
 800617c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	32ae      	adds	r2, #174	@ 0xae
 8006188:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d101      	bne.n	8006194 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006190:	2303      	movs	r3, #3
 8006192:	e01c      	b.n	80061ce <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800619a:	b2db      	uxtb	r3, r3
 800619c:	2b03      	cmp	r3, #3
 800619e:	d115      	bne.n	80061cc <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	32ae      	adds	r2, #174	@ 0xae
 80061aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061ae:	6a1b      	ldr	r3, [r3, #32]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d00b      	beq.n	80061cc <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	32ae      	adds	r2, #174	@ 0xae
 80061be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061c2:	6a1b      	ldr	r3, [r3, #32]
 80061c4:	78fa      	ldrb	r2, [r7, #3]
 80061c6:	4611      	mov	r1, r2
 80061c8:	6878      	ldr	r0, [r7, #4]
 80061ca:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80061cc:	2300      	movs	r3, #0
}
 80061ce:	4618      	mov	r0, r3
 80061d0:	3708      	adds	r7, #8
 80061d2:	46bd      	mov	sp, r7
 80061d4:	bd80      	pop	{r7, pc}

080061d6 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80061d6:	b580      	push	{r7, lr}
 80061d8:	b082      	sub	sp, #8
 80061da:	af00      	add	r7, sp, #0
 80061dc:	6078      	str	r0, [r7, #4]
 80061de:	460b      	mov	r3, r1
 80061e0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	32ae      	adds	r2, #174	@ 0xae
 80061ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d101      	bne.n	80061f8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80061f4:	2303      	movs	r3, #3
 80061f6:	e01c      	b.n	8006232 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80061fe:	b2db      	uxtb	r3, r3
 8006200:	2b03      	cmp	r3, #3
 8006202:	d115      	bne.n	8006230 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	32ae      	adds	r2, #174	@ 0xae
 800620e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006212:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006214:	2b00      	cmp	r3, #0
 8006216:	d00b      	beq.n	8006230 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	32ae      	adds	r2, #174	@ 0xae
 8006222:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006226:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006228:	78fa      	ldrb	r2, [r7, #3]
 800622a:	4611      	mov	r1, r2
 800622c:	6878      	ldr	r0, [r7, #4]
 800622e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006230:	2300      	movs	r3, #0
}
 8006232:	4618      	mov	r0, r3
 8006234:	3708      	adds	r7, #8
 8006236:	46bd      	mov	sp, r7
 8006238:	bd80      	pop	{r7, pc}

0800623a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800623a:	b480      	push	{r7}
 800623c:	b083      	sub	sp, #12
 800623e:	af00      	add	r7, sp, #0
 8006240:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006242:	2300      	movs	r3, #0
}
 8006244:	4618      	mov	r0, r3
 8006246:	370c      	adds	r7, #12
 8006248:	46bd      	mov	sp, r7
 800624a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624e:	4770      	bx	lr

08006250 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b084      	sub	sp, #16
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006258:	2300      	movs	r3, #0
 800625a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2201      	movs	r2, #1
 8006260:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800626a:	2b00      	cmp	r3, #0
 800626c:	d00e      	beq.n	800628c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006274:	685b      	ldr	r3, [r3, #4]
 8006276:	687a      	ldr	r2, [r7, #4]
 8006278:	6852      	ldr	r2, [r2, #4]
 800627a:	b2d2      	uxtb	r2, r2
 800627c:	4611      	mov	r1, r2
 800627e:	6878      	ldr	r0, [r7, #4]
 8006280:	4798      	blx	r3
 8006282:	4603      	mov	r3, r0
 8006284:	2b00      	cmp	r3, #0
 8006286:	d001      	beq.n	800628c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006288:	2303      	movs	r3, #3
 800628a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800628c:	7bfb      	ldrb	r3, [r7, #15]
}
 800628e:	4618      	mov	r0, r3
 8006290:	3710      	adds	r7, #16
 8006292:	46bd      	mov	sp, r7
 8006294:	bd80      	pop	{r7, pc}

08006296 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006296:	b480      	push	{r7}
 8006298:	b083      	sub	sp, #12
 800629a:	af00      	add	r7, sp, #0
 800629c:	6078      	str	r0, [r7, #4]
 800629e:	460b      	mov	r3, r1
 80062a0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80062a2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80062a4:	4618      	mov	r0, r3
 80062a6:	370c      	adds	r7, #12
 80062a8:	46bd      	mov	sp, r7
 80062aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ae:	4770      	bx	lr

080062b0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80062b0:	b480      	push	{r7}
 80062b2:	b083      	sub	sp, #12
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
 80062b8:	460b      	mov	r3, r1
 80062ba:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80062bc:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80062be:	4618      	mov	r0, r3
 80062c0:	370c      	adds	r7, #12
 80062c2:	46bd      	mov	sp, r7
 80062c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c8:	4770      	bx	lr

080062ca <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80062ca:	b580      	push	{r7, lr}
 80062cc:	b086      	sub	sp, #24
 80062ce:	af00      	add	r7, sp, #0
 80062d0:	6078      	str	r0, [r7, #4]
 80062d2:	460b      	mov	r3, r1
 80062d4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80062de:	2300      	movs	r3, #0
 80062e0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	885b      	ldrh	r3, [r3, #2]
 80062e6:	b29b      	uxth	r3, r3
 80062e8:	68fa      	ldr	r2, [r7, #12]
 80062ea:	7812      	ldrb	r2, [r2, #0]
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d91f      	bls.n	8006330 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	781b      	ldrb	r3, [r3, #0]
 80062f4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80062f6:	e013      	b.n	8006320 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80062f8:	f107 030a 	add.w	r3, r7, #10
 80062fc:	4619      	mov	r1, r3
 80062fe:	6978      	ldr	r0, [r7, #20]
 8006300:	f000 f81b 	bl	800633a <USBD_GetNextDesc>
 8006304:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006306:	697b      	ldr	r3, [r7, #20]
 8006308:	785b      	ldrb	r3, [r3, #1]
 800630a:	2b05      	cmp	r3, #5
 800630c:	d108      	bne.n	8006320 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800630e:	697b      	ldr	r3, [r7, #20]
 8006310:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006312:	693b      	ldr	r3, [r7, #16]
 8006314:	789b      	ldrb	r3, [r3, #2]
 8006316:	78fa      	ldrb	r2, [r7, #3]
 8006318:	429a      	cmp	r2, r3
 800631a:	d008      	beq.n	800632e <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800631c:	2300      	movs	r3, #0
 800631e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	885b      	ldrh	r3, [r3, #2]
 8006324:	b29a      	uxth	r2, r3
 8006326:	897b      	ldrh	r3, [r7, #10]
 8006328:	429a      	cmp	r2, r3
 800632a:	d8e5      	bhi.n	80062f8 <USBD_GetEpDesc+0x2e>
 800632c:	e000      	b.n	8006330 <USBD_GetEpDesc+0x66>
          break;
 800632e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006330:	693b      	ldr	r3, [r7, #16]
}
 8006332:	4618      	mov	r0, r3
 8006334:	3718      	adds	r7, #24
 8006336:	46bd      	mov	sp, r7
 8006338:	bd80      	pop	{r7, pc}

0800633a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800633a:	b480      	push	{r7}
 800633c:	b085      	sub	sp, #20
 800633e:	af00      	add	r7, sp, #0
 8006340:	6078      	str	r0, [r7, #4]
 8006342:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	881b      	ldrh	r3, [r3, #0]
 800634c:	68fa      	ldr	r2, [r7, #12]
 800634e:	7812      	ldrb	r2, [r2, #0]
 8006350:	4413      	add	r3, r2
 8006352:	b29a      	uxth	r2, r3
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	781b      	ldrb	r3, [r3, #0]
 800635c:	461a      	mov	r2, r3
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	4413      	add	r3, r2
 8006362:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006364:	68fb      	ldr	r3, [r7, #12]
}
 8006366:	4618      	mov	r0, r3
 8006368:	3714      	adds	r7, #20
 800636a:	46bd      	mov	sp, r7
 800636c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006370:	4770      	bx	lr

08006372 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006372:	b480      	push	{r7}
 8006374:	b087      	sub	sp, #28
 8006376:	af00      	add	r7, sp, #0
 8006378:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800637e:	697b      	ldr	r3, [r7, #20]
 8006380:	781b      	ldrb	r3, [r3, #0]
 8006382:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006384:	697b      	ldr	r3, [r7, #20]
 8006386:	3301      	adds	r3, #1
 8006388:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800638a:	697b      	ldr	r3, [r7, #20]
 800638c:	781b      	ldrb	r3, [r3, #0]
 800638e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006390:	8a3b      	ldrh	r3, [r7, #16]
 8006392:	021b      	lsls	r3, r3, #8
 8006394:	b21a      	sxth	r2, r3
 8006396:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800639a:	4313      	orrs	r3, r2
 800639c:	b21b      	sxth	r3, r3
 800639e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80063a0:	89fb      	ldrh	r3, [r7, #14]
}
 80063a2:	4618      	mov	r0, r3
 80063a4:	371c      	adds	r7, #28
 80063a6:	46bd      	mov	sp, r7
 80063a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ac:	4770      	bx	lr
	...

080063b0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b084      	sub	sp, #16
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
 80063b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80063ba:	2300      	movs	r3, #0
 80063bc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	781b      	ldrb	r3, [r3, #0]
 80063c2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80063c6:	2b40      	cmp	r3, #64	@ 0x40
 80063c8:	d005      	beq.n	80063d6 <USBD_StdDevReq+0x26>
 80063ca:	2b40      	cmp	r3, #64	@ 0x40
 80063cc:	d857      	bhi.n	800647e <USBD_StdDevReq+0xce>
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d00f      	beq.n	80063f2 <USBD_StdDevReq+0x42>
 80063d2:	2b20      	cmp	r3, #32
 80063d4:	d153      	bne.n	800647e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	32ae      	adds	r2, #174	@ 0xae
 80063e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063e4:	689b      	ldr	r3, [r3, #8]
 80063e6:	6839      	ldr	r1, [r7, #0]
 80063e8:	6878      	ldr	r0, [r7, #4]
 80063ea:	4798      	blx	r3
 80063ec:	4603      	mov	r3, r0
 80063ee:	73fb      	strb	r3, [r7, #15]
      break;
 80063f0:	e04a      	b.n	8006488 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	785b      	ldrb	r3, [r3, #1]
 80063f6:	2b09      	cmp	r3, #9
 80063f8:	d83b      	bhi.n	8006472 <USBD_StdDevReq+0xc2>
 80063fa:	a201      	add	r2, pc, #4	@ (adr r2, 8006400 <USBD_StdDevReq+0x50>)
 80063fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006400:	08006455 	.word	0x08006455
 8006404:	08006469 	.word	0x08006469
 8006408:	08006473 	.word	0x08006473
 800640c:	0800645f 	.word	0x0800645f
 8006410:	08006473 	.word	0x08006473
 8006414:	08006433 	.word	0x08006433
 8006418:	08006429 	.word	0x08006429
 800641c:	08006473 	.word	0x08006473
 8006420:	0800644b 	.word	0x0800644b
 8006424:	0800643d 	.word	0x0800643d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006428:	6839      	ldr	r1, [r7, #0]
 800642a:	6878      	ldr	r0, [r7, #4]
 800642c:	f000 fa3c 	bl	80068a8 <USBD_GetDescriptor>
          break;
 8006430:	e024      	b.n	800647c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006432:	6839      	ldr	r1, [r7, #0]
 8006434:	6878      	ldr	r0, [r7, #4]
 8006436:	f000 fba1 	bl	8006b7c <USBD_SetAddress>
          break;
 800643a:	e01f      	b.n	800647c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800643c:	6839      	ldr	r1, [r7, #0]
 800643e:	6878      	ldr	r0, [r7, #4]
 8006440:	f000 fbe0 	bl	8006c04 <USBD_SetConfig>
 8006444:	4603      	mov	r3, r0
 8006446:	73fb      	strb	r3, [r7, #15]
          break;
 8006448:	e018      	b.n	800647c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800644a:	6839      	ldr	r1, [r7, #0]
 800644c:	6878      	ldr	r0, [r7, #4]
 800644e:	f000 fc83 	bl	8006d58 <USBD_GetConfig>
          break;
 8006452:	e013      	b.n	800647c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006454:	6839      	ldr	r1, [r7, #0]
 8006456:	6878      	ldr	r0, [r7, #4]
 8006458:	f000 fcb4 	bl	8006dc4 <USBD_GetStatus>
          break;
 800645c:	e00e      	b.n	800647c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800645e:	6839      	ldr	r1, [r7, #0]
 8006460:	6878      	ldr	r0, [r7, #4]
 8006462:	f000 fce3 	bl	8006e2c <USBD_SetFeature>
          break;
 8006466:	e009      	b.n	800647c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006468:	6839      	ldr	r1, [r7, #0]
 800646a:	6878      	ldr	r0, [r7, #4]
 800646c:	f000 fd07 	bl	8006e7e <USBD_ClrFeature>
          break;
 8006470:	e004      	b.n	800647c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8006472:	6839      	ldr	r1, [r7, #0]
 8006474:	6878      	ldr	r0, [r7, #4]
 8006476:	f000 fd5e 	bl	8006f36 <USBD_CtlError>
          break;
 800647a:	bf00      	nop
      }
      break;
 800647c:	e004      	b.n	8006488 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800647e:	6839      	ldr	r1, [r7, #0]
 8006480:	6878      	ldr	r0, [r7, #4]
 8006482:	f000 fd58 	bl	8006f36 <USBD_CtlError>
      break;
 8006486:	bf00      	nop
  }

  return ret;
 8006488:	7bfb      	ldrb	r3, [r7, #15]
}
 800648a:	4618      	mov	r0, r3
 800648c:	3710      	adds	r7, #16
 800648e:	46bd      	mov	sp, r7
 8006490:	bd80      	pop	{r7, pc}
 8006492:	bf00      	nop

08006494 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b084      	sub	sp, #16
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
 800649c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800649e:	2300      	movs	r3, #0
 80064a0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	781b      	ldrb	r3, [r3, #0]
 80064a6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80064aa:	2b40      	cmp	r3, #64	@ 0x40
 80064ac:	d005      	beq.n	80064ba <USBD_StdItfReq+0x26>
 80064ae:	2b40      	cmp	r3, #64	@ 0x40
 80064b0:	d852      	bhi.n	8006558 <USBD_StdItfReq+0xc4>
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d001      	beq.n	80064ba <USBD_StdItfReq+0x26>
 80064b6:	2b20      	cmp	r3, #32
 80064b8:	d14e      	bne.n	8006558 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80064c0:	b2db      	uxtb	r3, r3
 80064c2:	3b01      	subs	r3, #1
 80064c4:	2b02      	cmp	r3, #2
 80064c6:	d840      	bhi.n	800654a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	889b      	ldrh	r3, [r3, #4]
 80064cc:	b2db      	uxtb	r3, r3
 80064ce:	2b01      	cmp	r3, #1
 80064d0:	d836      	bhi.n	8006540 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	889b      	ldrh	r3, [r3, #4]
 80064d6:	b2db      	uxtb	r3, r3
 80064d8:	4619      	mov	r1, r3
 80064da:	6878      	ldr	r0, [r7, #4]
 80064dc:	f7ff fedb 	bl	8006296 <USBD_CoreFindIF>
 80064e0:	4603      	mov	r3, r0
 80064e2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80064e4:	7bbb      	ldrb	r3, [r7, #14]
 80064e6:	2bff      	cmp	r3, #255	@ 0xff
 80064e8:	d01d      	beq.n	8006526 <USBD_StdItfReq+0x92>
 80064ea:	7bbb      	ldrb	r3, [r7, #14]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d11a      	bne.n	8006526 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80064f0:	7bba      	ldrb	r2, [r7, #14]
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	32ae      	adds	r2, #174	@ 0xae
 80064f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064fa:	689b      	ldr	r3, [r3, #8]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d00f      	beq.n	8006520 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006500:	7bba      	ldrb	r2, [r7, #14]
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006508:	7bba      	ldrb	r2, [r7, #14]
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	32ae      	adds	r2, #174	@ 0xae
 800650e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006512:	689b      	ldr	r3, [r3, #8]
 8006514:	6839      	ldr	r1, [r7, #0]
 8006516:	6878      	ldr	r0, [r7, #4]
 8006518:	4798      	blx	r3
 800651a:	4603      	mov	r3, r0
 800651c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800651e:	e004      	b.n	800652a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006520:	2303      	movs	r3, #3
 8006522:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006524:	e001      	b.n	800652a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8006526:	2303      	movs	r3, #3
 8006528:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	88db      	ldrh	r3, [r3, #6]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d110      	bne.n	8006554 <USBD_StdItfReq+0xc0>
 8006532:	7bfb      	ldrb	r3, [r7, #15]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d10d      	bne.n	8006554 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006538:	6878      	ldr	r0, [r7, #4]
 800653a:	f000 fdd3 	bl	80070e4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800653e:	e009      	b.n	8006554 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006540:	6839      	ldr	r1, [r7, #0]
 8006542:	6878      	ldr	r0, [r7, #4]
 8006544:	f000 fcf7 	bl	8006f36 <USBD_CtlError>
          break;
 8006548:	e004      	b.n	8006554 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800654a:	6839      	ldr	r1, [r7, #0]
 800654c:	6878      	ldr	r0, [r7, #4]
 800654e:	f000 fcf2 	bl	8006f36 <USBD_CtlError>
          break;
 8006552:	e000      	b.n	8006556 <USBD_StdItfReq+0xc2>
          break;
 8006554:	bf00      	nop
      }
      break;
 8006556:	e004      	b.n	8006562 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006558:	6839      	ldr	r1, [r7, #0]
 800655a:	6878      	ldr	r0, [r7, #4]
 800655c:	f000 fceb 	bl	8006f36 <USBD_CtlError>
      break;
 8006560:	bf00      	nop
  }

  return ret;
 8006562:	7bfb      	ldrb	r3, [r7, #15]
}
 8006564:	4618      	mov	r0, r3
 8006566:	3710      	adds	r7, #16
 8006568:	46bd      	mov	sp, r7
 800656a:	bd80      	pop	{r7, pc}

0800656c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b084      	sub	sp, #16
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
 8006574:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8006576:	2300      	movs	r3, #0
 8006578:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	889b      	ldrh	r3, [r3, #4]
 800657e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	781b      	ldrb	r3, [r3, #0]
 8006584:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006588:	2b40      	cmp	r3, #64	@ 0x40
 800658a:	d007      	beq.n	800659c <USBD_StdEPReq+0x30>
 800658c:	2b40      	cmp	r3, #64	@ 0x40
 800658e:	f200 817f 	bhi.w	8006890 <USBD_StdEPReq+0x324>
 8006592:	2b00      	cmp	r3, #0
 8006594:	d02a      	beq.n	80065ec <USBD_StdEPReq+0x80>
 8006596:	2b20      	cmp	r3, #32
 8006598:	f040 817a 	bne.w	8006890 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800659c:	7bbb      	ldrb	r3, [r7, #14]
 800659e:	4619      	mov	r1, r3
 80065a0:	6878      	ldr	r0, [r7, #4]
 80065a2:	f7ff fe85 	bl	80062b0 <USBD_CoreFindEP>
 80065a6:	4603      	mov	r3, r0
 80065a8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80065aa:	7b7b      	ldrb	r3, [r7, #13]
 80065ac:	2bff      	cmp	r3, #255	@ 0xff
 80065ae:	f000 8174 	beq.w	800689a <USBD_StdEPReq+0x32e>
 80065b2:	7b7b      	ldrb	r3, [r7, #13]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	f040 8170 	bne.w	800689a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80065ba:	7b7a      	ldrb	r2, [r7, #13]
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80065c2:	7b7a      	ldrb	r2, [r7, #13]
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	32ae      	adds	r2, #174	@ 0xae
 80065c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065cc:	689b      	ldr	r3, [r3, #8]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	f000 8163 	beq.w	800689a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80065d4:	7b7a      	ldrb	r2, [r7, #13]
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	32ae      	adds	r2, #174	@ 0xae
 80065da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065de:	689b      	ldr	r3, [r3, #8]
 80065e0:	6839      	ldr	r1, [r7, #0]
 80065e2:	6878      	ldr	r0, [r7, #4]
 80065e4:	4798      	blx	r3
 80065e6:	4603      	mov	r3, r0
 80065e8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80065ea:	e156      	b.n	800689a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	785b      	ldrb	r3, [r3, #1]
 80065f0:	2b03      	cmp	r3, #3
 80065f2:	d008      	beq.n	8006606 <USBD_StdEPReq+0x9a>
 80065f4:	2b03      	cmp	r3, #3
 80065f6:	f300 8145 	bgt.w	8006884 <USBD_StdEPReq+0x318>
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	f000 809b 	beq.w	8006736 <USBD_StdEPReq+0x1ca>
 8006600:	2b01      	cmp	r3, #1
 8006602:	d03c      	beq.n	800667e <USBD_StdEPReq+0x112>
 8006604:	e13e      	b.n	8006884 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800660c:	b2db      	uxtb	r3, r3
 800660e:	2b02      	cmp	r3, #2
 8006610:	d002      	beq.n	8006618 <USBD_StdEPReq+0xac>
 8006612:	2b03      	cmp	r3, #3
 8006614:	d016      	beq.n	8006644 <USBD_StdEPReq+0xd8>
 8006616:	e02c      	b.n	8006672 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006618:	7bbb      	ldrb	r3, [r7, #14]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d00d      	beq.n	800663a <USBD_StdEPReq+0xce>
 800661e:	7bbb      	ldrb	r3, [r7, #14]
 8006620:	2b80      	cmp	r3, #128	@ 0x80
 8006622:	d00a      	beq.n	800663a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006624:	7bbb      	ldrb	r3, [r7, #14]
 8006626:	4619      	mov	r1, r3
 8006628:	6878      	ldr	r0, [r7, #4]
 800662a:	f003 fb83 	bl	8009d34 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800662e:	2180      	movs	r1, #128	@ 0x80
 8006630:	6878      	ldr	r0, [r7, #4]
 8006632:	f003 fb7f 	bl	8009d34 <USBD_LL_StallEP>
 8006636:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006638:	e020      	b.n	800667c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800663a:	6839      	ldr	r1, [r7, #0]
 800663c:	6878      	ldr	r0, [r7, #4]
 800663e:	f000 fc7a 	bl	8006f36 <USBD_CtlError>
              break;
 8006642:	e01b      	b.n	800667c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	885b      	ldrh	r3, [r3, #2]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d10e      	bne.n	800666a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800664c:	7bbb      	ldrb	r3, [r7, #14]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d00b      	beq.n	800666a <USBD_StdEPReq+0xfe>
 8006652:	7bbb      	ldrb	r3, [r7, #14]
 8006654:	2b80      	cmp	r3, #128	@ 0x80
 8006656:	d008      	beq.n	800666a <USBD_StdEPReq+0xfe>
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	88db      	ldrh	r3, [r3, #6]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d104      	bne.n	800666a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006660:	7bbb      	ldrb	r3, [r7, #14]
 8006662:	4619      	mov	r1, r3
 8006664:	6878      	ldr	r0, [r7, #4]
 8006666:	f003 fb65 	bl	8009d34 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800666a:	6878      	ldr	r0, [r7, #4]
 800666c:	f000 fd3a 	bl	80070e4 <USBD_CtlSendStatus>

              break;
 8006670:	e004      	b.n	800667c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8006672:	6839      	ldr	r1, [r7, #0]
 8006674:	6878      	ldr	r0, [r7, #4]
 8006676:	f000 fc5e 	bl	8006f36 <USBD_CtlError>
              break;
 800667a:	bf00      	nop
          }
          break;
 800667c:	e107      	b.n	800688e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006684:	b2db      	uxtb	r3, r3
 8006686:	2b02      	cmp	r3, #2
 8006688:	d002      	beq.n	8006690 <USBD_StdEPReq+0x124>
 800668a:	2b03      	cmp	r3, #3
 800668c:	d016      	beq.n	80066bc <USBD_StdEPReq+0x150>
 800668e:	e04b      	b.n	8006728 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006690:	7bbb      	ldrb	r3, [r7, #14]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d00d      	beq.n	80066b2 <USBD_StdEPReq+0x146>
 8006696:	7bbb      	ldrb	r3, [r7, #14]
 8006698:	2b80      	cmp	r3, #128	@ 0x80
 800669a:	d00a      	beq.n	80066b2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800669c:	7bbb      	ldrb	r3, [r7, #14]
 800669e:	4619      	mov	r1, r3
 80066a0:	6878      	ldr	r0, [r7, #4]
 80066a2:	f003 fb47 	bl	8009d34 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80066a6:	2180      	movs	r1, #128	@ 0x80
 80066a8:	6878      	ldr	r0, [r7, #4]
 80066aa:	f003 fb43 	bl	8009d34 <USBD_LL_StallEP>
 80066ae:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80066b0:	e040      	b.n	8006734 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80066b2:	6839      	ldr	r1, [r7, #0]
 80066b4:	6878      	ldr	r0, [r7, #4]
 80066b6:	f000 fc3e 	bl	8006f36 <USBD_CtlError>
              break;
 80066ba:	e03b      	b.n	8006734 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	885b      	ldrh	r3, [r3, #2]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d136      	bne.n	8006732 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80066c4:	7bbb      	ldrb	r3, [r7, #14]
 80066c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d004      	beq.n	80066d8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80066ce:	7bbb      	ldrb	r3, [r7, #14]
 80066d0:	4619      	mov	r1, r3
 80066d2:	6878      	ldr	r0, [r7, #4]
 80066d4:	f003 fb4d 	bl	8009d72 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80066d8:	6878      	ldr	r0, [r7, #4]
 80066da:	f000 fd03 	bl	80070e4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80066de:	7bbb      	ldrb	r3, [r7, #14]
 80066e0:	4619      	mov	r1, r3
 80066e2:	6878      	ldr	r0, [r7, #4]
 80066e4:	f7ff fde4 	bl	80062b0 <USBD_CoreFindEP>
 80066e8:	4603      	mov	r3, r0
 80066ea:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80066ec:	7b7b      	ldrb	r3, [r7, #13]
 80066ee:	2bff      	cmp	r3, #255	@ 0xff
 80066f0:	d01f      	beq.n	8006732 <USBD_StdEPReq+0x1c6>
 80066f2:	7b7b      	ldrb	r3, [r7, #13]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d11c      	bne.n	8006732 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80066f8:	7b7a      	ldrb	r2, [r7, #13]
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006700:	7b7a      	ldrb	r2, [r7, #13]
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	32ae      	adds	r2, #174	@ 0xae
 8006706:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800670a:	689b      	ldr	r3, [r3, #8]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d010      	beq.n	8006732 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006710:	7b7a      	ldrb	r2, [r7, #13]
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	32ae      	adds	r2, #174	@ 0xae
 8006716:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800671a:	689b      	ldr	r3, [r3, #8]
 800671c:	6839      	ldr	r1, [r7, #0]
 800671e:	6878      	ldr	r0, [r7, #4]
 8006720:	4798      	blx	r3
 8006722:	4603      	mov	r3, r0
 8006724:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006726:	e004      	b.n	8006732 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006728:	6839      	ldr	r1, [r7, #0]
 800672a:	6878      	ldr	r0, [r7, #4]
 800672c:	f000 fc03 	bl	8006f36 <USBD_CtlError>
              break;
 8006730:	e000      	b.n	8006734 <USBD_StdEPReq+0x1c8>
              break;
 8006732:	bf00      	nop
          }
          break;
 8006734:	e0ab      	b.n	800688e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800673c:	b2db      	uxtb	r3, r3
 800673e:	2b02      	cmp	r3, #2
 8006740:	d002      	beq.n	8006748 <USBD_StdEPReq+0x1dc>
 8006742:	2b03      	cmp	r3, #3
 8006744:	d032      	beq.n	80067ac <USBD_StdEPReq+0x240>
 8006746:	e097      	b.n	8006878 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006748:	7bbb      	ldrb	r3, [r7, #14]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d007      	beq.n	800675e <USBD_StdEPReq+0x1f2>
 800674e:	7bbb      	ldrb	r3, [r7, #14]
 8006750:	2b80      	cmp	r3, #128	@ 0x80
 8006752:	d004      	beq.n	800675e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006754:	6839      	ldr	r1, [r7, #0]
 8006756:	6878      	ldr	r0, [r7, #4]
 8006758:	f000 fbed 	bl	8006f36 <USBD_CtlError>
                break;
 800675c:	e091      	b.n	8006882 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800675e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006762:	2b00      	cmp	r3, #0
 8006764:	da0b      	bge.n	800677e <USBD_StdEPReq+0x212>
 8006766:	7bbb      	ldrb	r3, [r7, #14]
 8006768:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800676c:	4613      	mov	r3, r2
 800676e:	009b      	lsls	r3, r3, #2
 8006770:	4413      	add	r3, r2
 8006772:	009b      	lsls	r3, r3, #2
 8006774:	3310      	adds	r3, #16
 8006776:	687a      	ldr	r2, [r7, #4]
 8006778:	4413      	add	r3, r2
 800677a:	3304      	adds	r3, #4
 800677c:	e00b      	b.n	8006796 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800677e:	7bbb      	ldrb	r3, [r7, #14]
 8006780:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006784:	4613      	mov	r3, r2
 8006786:	009b      	lsls	r3, r3, #2
 8006788:	4413      	add	r3, r2
 800678a:	009b      	lsls	r3, r3, #2
 800678c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006790:	687a      	ldr	r2, [r7, #4]
 8006792:	4413      	add	r3, r2
 8006794:	3304      	adds	r3, #4
 8006796:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006798:	68bb      	ldr	r3, [r7, #8]
 800679a:	2200      	movs	r2, #0
 800679c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800679e:	68bb      	ldr	r3, [r7, #8]
 80067a0:	2202      	movs	r2, #2
 80067a2:	4619      	mov	r1, r3
 80067a4:	6878      	ldr	r0, [r7, #4]
 80067a6:	f000 fc43 	bl	8007030 <USBD_CtlSendData>
              break;
 80067aa:	e06a      	b.n	8006882 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80067ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	da11      	bge.n	80067d8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80067b4:	7bbb      	ldrb	r3, [r7, #14]
 80067b6:	f003 020f 	and.w	r2, r3, #15
 80067ba:	6879      	ldr	r1, [r7, #4]
 80067bc:	4613      	mov	r3, r2
 80067be:	009b      	lsls	r3, r3, #2
 80067c0:	4413      	add	r3, r2
 80067c2:	009b      	lsls	r3, r3, #2
 80067c4:	440b      	add	r3, r1
 80067c6:	3324      	adds	r3, #36	@ 0x24
 80067c8:	881b      	ldrh	r3, [r3, #0]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d117      	bne.n	80067fe <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80067ce:	6839      	ldr	r1, [r7, #0]
 80067d0:	6878      	ldr	r0, [r7, #4]
 80067d2:	f000 fbb0 	bl	8006f36 <USBD_CtlError>
                  break;
 80067d6:	e054      	b.n	8006882 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80067d8:	7bbb      	ldrb	r3, [r7, #14]
 80067da:	f003 020f 	and.w	r2, r3, #15
 80067de:	6879      	ldr	r1, [r7, #4]
 80067e0:	4613      	mov	r3, r2
 80067e2:	009b      	lsls	r3, r3, #2
 80067e4:	4413      	add	r3, r2
 80067e6:	009b      	lsls	r3, r3, #2
 80067e8:	440b      	add	r3, r1
 80067ea:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80067ee:	881b      	ldrh	r3, [r3, #0]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d104      	bne.n	80067fe <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80067f4:	6839      	ldr	r1, [r7, #0]
 80067f6:	6878      	ldr	r0, [r7, #4]
 80067f8:	f000 fb9d 	bl	8006f36 <USBD_CtlError>
                  break;
 80067fc:	e041      	b.n	8006882 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80067fe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006802:	2b00      	cmp	r3, #0
 8006804:	da0b      	bge.n	800681e <USBD_StdEPReq+0x2b2>
 8006806:	7bbb      	ldrb	r3, [r7, #14]
 8006808:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800680c:	4613      	mov	r3, r2
 800680e:	009b      	lsls	r3, r3, #2
 8006810:	4413      	add	r3, r2
 8006812:	009b      	lsls	r3, r3, #2
 8006814:	3310      	adds	r3, #16
 8006816:	687a      	ldr	r2, [r7, #4]
 8006818:	4413      	add	r3, r2
 800681a:	3304      	adds	r3, #4
 800681c:	e00b      	b.n	8006836 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800681e:	7bbb      	ldrb	r3, [r7, #14]
 8006820:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006824:	4613      	mov	r3, r2
 8006826:	009b      	lsls	r3, r3, #2
 8006828:	4413      	add	r3, r2
 800682a:	009b      	lsls	r3, r3, #2
 800682c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006830:	687a      	ldr	r2, [r7, #4]
 8006832:	4413      	add	r3, r2
 8006834:	3304      	adds	r3, #4
 8006836:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006838:	7bbb      	ldrb	r3, [r7, #14]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d002      	beq.n	8006844 <USBD_StdEPReq+0x2d8>
 800683e:	7bbb      	ldrb	r3, [r7, #14]
 8006840:	2b80      	cmp	r3, #128	@ 0x80
 8006842:	d103      	bne.n	800684c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006844:	68bb      	ldr	r3, [r7, #8]
 8006846:	2200      	movs	r2, #0
 8006848:	601a      	str	r2, [r3, #0]
 800684a:	e00e      	b.n	800686a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800684c:	7bbb      	ldrb	r3, [r7, #14]
 800684e:	4619      	mov	r1, r3
 8006850:	6878      	ldr	r0, [r7, #4]
 8006852:	f003 faad 	bl	8009db0 <USBD_LL_IsStallEP>
 8006856:	4603      	mov	r3, r0
 8006858:	2b00      	cmp	r3, #0
 800685a:	d003      	beq.n	8006864 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800685c:	68bb      	ldr	r3, [r7, #8]
 800685e:	2201      	movs	r2, #1
 8006860:	601a      	str	r2, [r3, #0]
 8006862:	e002      	b.n	800686a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006864:	68bb      	ldr	r3, [r7, #8]
 8006866:	2200      	movs	r2, #0
 8006868:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800686a:	68bb      	ldr	r3, [r7, #8]
 800686c:	2202      	movs	r2, #2
 800686e:	4619      	mov	r1, r3
 8006870:	6878      	ldr	r0, [r7, #4]
 8006872:	f000 fbdd 	bl	8007030 <USBD_CtlSendData>
              break;
 8006876:	e004      	b.n	8006882 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006878:	6839      	ldr	r1, [r7, #0]
 800687a:	6878      	ldr	r0, [r7, #4]
 800687c:	f000 fb5b 	bl	8006f36 <USBD_CtlError>
              break;
 8006880:	bf00      	nop
          }
          break;
 8006882:	e004      	b.n	800688e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006884:	6839      	ldr	r1, [r7, #0]
 8006886:	6878      	ldr	r0, [r7, #4]
 8006888:	f000 fb55 	bl	8006f36 <USBD_CtlError>
          break;
 800688c:	bf00      	nop
      }
      break;
 800688e:	e005      	b.n	800689c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006890:	6839      	ldr	r1, [r7, #0]
 8006892:	6878      	ldr	r0, [r7, #4]
 8006894:	f000 fb4f 	bl	8006f36 <USBD_CtlError>
      break;
 8006898:	e000      	b.n	800689c <USBD_StdEPReq+0x330>
      break;
 800689a:	bf00      	nop
  }

  return ret;
 800689c:	7bfb      	ldrb	r3, [r7, #15]
}
 800689e:	4618      	mov	r0, r3
 80068a0:	3710      	adds	r7, #16
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bd80      	pop	{r7, pc}
	...

080068a8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b084      	sub	sp, #16
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
 80068b0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80068b2:	2300      	movs	r3, #0
 80068b4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80068b6:	2300      	movs	r3, #0
 80068b8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80068ba:	2300      	movs	r3, #0
 80068bc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	885b      	ldrh	r3, [r3, #2]
 80068c2:	0a1b      	lsrs	r3, r3, #8
 80068c4:	b29b      	uxth	r3, r3
 80068c6:	3b01      	subs	r3, #1
 80068c8:	2b06      	cmp	r3, #6
 80068ca:	f200 8128 	bhi.w	8006b1e <USBD_GetDescriptor+0x276>
 80068ce:	a201      	add	r2, pc, #4	@ (adr r2, 80068d4 <USBD_GetDescriptor+0x2c>)
 80068d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068d4:	080068f1 	.word	0x080068f1
 80068d8:	08006909 	.word	0x08006909
 80068dc:	08006949 	.word	0x08006949
 80068e0:	08006b1f 	.word	0x08006b1f
 80068e4:	08006b1f 	.word	0x08006b1f
 80068e8:	08006abf 	.word	0x08006abf
 80068ec:	08006aeb 	.word	0x08006aeb
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	687a      	ldr	r2, [r7, #4]
 80068fa:	7c12      	ldrb	r2, [r2, #16]
 80068fc:	f107 0108 	add.w	r1, r7, #8
 8006900:	4610      	mov	r0, r2
 8006902:	4798      	blx	r3
 8006904:	60f8      	str	r0, [r7, #12]
      break;
 8006906:	e112      	b.n	8006b2e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	7c1b      	ldrb	r3, [r3, #16]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d10d      	bne.n	800692c <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006916:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006918:	f107 0208 	add.w	r2, r7, #8
 800691c:	4610      	mov	r0, r2
 800691e:	4798      	blx	r3
 8006920:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	3301      	adds	r3, #1
 8006926:	2202      	movs	r2, #2
 8006928:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800692a:	e100      	b.n	8006b2e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006932:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006934:	f107 0208 	add.w	r2, r7, #8
 8006938:	4610      	mov	r0, r2
 800693a:	4798      	blx	r3
 800693c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	3301      	adds	r3, #1
 8006942:	2202      	movs	r2, #2
 8006944:	701a      	strb	r2, [r3, #0]
      break;
 8006946:	e0f2      	b.n	8006b2e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	885b      	ldrh	r3, [r3, #2]
 800694c:	b2db      	uxtb	r3, r3
 800694e:	2b05      	cmp	r3, #5
 8006950:	f200 80ac 	bhi.w	8006aac <USBD_GetDescriptor+0x204>
 8006954:	a201      	add	r2, pc, #4	@ (adr r2, 800695c <USBD_GetDescriptor+0xb4>)
 8006956:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800695a:	bf00      	nop
 800695c:	08006975 	.word	0x08006975
 8006960:	080069a9 	.word	0x080069a9
 8006964:	080069dd 	.word	0x080069dd
 8006968:	08006a11 	.word	0x08006a11
 800696c:	08006a45 	.word	0x08006a45
 8006970:	08006a79 	.word	0x08006a79
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800697a:	685b      	ldr	r3, [r3, #4]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d00b      	beq.n	8006998 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006986:	685b      	ldr	r3, [r3, #4]
 8006988:	687a      	ldr	r2, [r7, #4]
 800698a:	7c12      	ldrb	r2, [r2, #16]
 800698c:	f107 0108 	add.w	r1, r7, #8
 8006990:	4610      	mov	r0, r2
 8006992:	4798      	blx	r3
 8006994:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006996:	e091      	b.n	8006abc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006998:	6839      	ldr	r1, [r7, #0]
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	f000 facb 	bl	8006f36 <USBD_CtlError>
            err++;
 80069a0:	7afb      	ldrb	r3, [r7, #11]
 80069a2:	3301      	adds	r3, #1
 80069a4:	72fb      	strb	r3, [r7, #11]
          break;
 80069a6:	e089      	b.n	8006abc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80069ae:	689b      	ldr	r3, [r3, #8]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d00b      	beq.n	80069cc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80069ba:	689b      	ldr	r3, [r3, #8]
 80069bc:	687a      	ldr	r2, [r7, #4]
 80069be:	7c12      	ldrb	r2, [r2, #16]
 80069c0:	f107 0108 	add.w	r1, r7, #8
 80069c4:	4610      	mov	r0, r2
 80069c6:	4798      	blx	r3
 80069c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80069ca:	e077      	b.n	8006abc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80069cc:	6839      	ldr	r1, [r7, #0]
 80069ce:	6878      	ldr	r0, [r7, #4]
 80069d0:	f000 fab1 	bl	8006f36 <USBD_CtlError>
            err++;
 80069d4:	7afb      	ldrb	r3, [r7, #11]
 80069d6:	3301      	adds	r3, #1
 80069d8:	72fb      	strb	r3, [r7, #11]
          break;
 80069da:	e06f      	b.n	8006abc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80069e2:	68db      	ldr	r3, [r3, #12]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d00b      	beq.n	8006a00 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80069ee:	68db      	ldr	r3, [r3, #12]
 80069f0:	687a      	ldr	r2, [r7, #4]
 80069f2:	7c12      	ldrb	r2, [r2, #16]
 80069f4:	f107 0108 	add.w	r1, r7, #8
 80069f8:	4610      	mov	r0, r2
 80069fa:	4798      	blx	r3
 80069fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80069fe:	e05d      	b.n	8006abc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006a00:	6839      	ldr	r1, [r7, #0]
 8006a02:	6878      	ldr	r0, [r7, #4]
 8006a04:	f000 fa97 	bl	8006f36 <USBD_CtlError>
            err++;
 8006a08:	7afb      	ldrb	r3, [r7, #11]
 8006a0a:	3301      	adds	r3, #1
 8006a0c:	72fb      	strb	r3, [r7, #11]
          break;
 8006a0e:	e055      	b.n	8006abc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006a16:	691b      	ldr	r3, [r3, #16]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d00b      	beq.n	8006a34 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006a22:	691b      	ldr	r3, [r3, #16]
 8006a24:	687a      	ldr	r2, [r7, #4]
 8006a26:	7c12      	ldrb	r2, [r2, #16]
 8006a28:	f107 0108 	add.w	r1, r7, #8
 8006a2c:	4610      	mov	r0, r2
 8006a2e:	4798      	blx	r3
 8006a30:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006a32:	e043      	b.n	8006abc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006a34:	6839      	ldr	r1, [r7, #0]
 8006a36:	6878      	ldr	r0, [r7, #4]
 8006a38:	f000 fa7d 	bl	8006f36 <USBD_CtlError>
            err++;
 8006a3c:	7afb      	ldrb	r3, [r7, #11]
 8006a3e:	3301      	adds	r3, #1
 8006a40:	72fb      	strb	r3, [r7, #11]
          break;
 8006a42:	e03b      	b.n	8006abc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006a4a:	695b      	ldr	r3, [r3, #20]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d00b      	beq.n	8006a68 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006a56:	695b      	ldr	r3, [r3, #20]
 8006a58:	687a      	ldr	r2, [r7, #4]
 8006a5a:	7c12      	ldrb	r2, [r2, #16]
 8006a5c:	f107 0108 	add.w	r1, r7, #8
 8006a60:	4610      	mov	r0, r2
 8006a62:	4798      	blx	r3
 8006a64:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006a66:	e029      	b.n	8006abc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006a68:	6839      	ldr	r1, [r7, #0]
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	f000 fa63 	bl	8006f36 <USBD_CtlError>
            err++;
 8006a70:	7afb      	ldrb	r3, [r7, #11]
 8006a72:	3301      	adds	r3, #1
 8006a74:	72fb      	strb	r3, [r7, #11]
          break;
 8006a76:	e021      	b.n	8006abc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006a7e:	699b      	ldr	r3, [r3, #24]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d00b      	beq.n	8006a9c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006a8a:	699b      	ldr	r3, [r3, #24]
 8006a8c:	687a      	ldr	r2, [r7, #4]
 8006a8e:	7c12      	ldrb	r2, [r2, #16]
 8006a90:	f107 0108 	add.w	r1, r7, #8
 8006a94:	4610      	mov	r0, r2
 8006a96:	4798      	blx	r3
 8006a98:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006a9a:	e00f      	b.n	8006abc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006a9c:	6839      	ldr	r1, [r7, #0]
 8006a9e:	6878      	ldr	r0, [r7, #4]
 8006aa0:	f000 fa49 	bl	8006f36 <USBD_CtlError>
            err++;
 8006aa4:	7afb      	ldrb	r3, [r7, #11]
 8006aa6:	3301      	adds	r3, #1
 8006aa8:	72fb      	strb	r3, [r7, #11]
          break;
 8006aaa:	e007      	b.n	8006abc <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006aac:	6839      	ldr	r1, [r7, #0]
 8006aae:	6878      	ldr	r0, [r7, #4]
 8006ab0:	f000 fa41 	bl	8006f36 <USBD_CtlError>
          err++;
 8006ab4:	7afb      	ldrb	r3, [r7, #11]
 8006ab6:	3301      	adds	r3, #1
 8006ab8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8006aba:	bf00      	nop
      }
      break;
 8006abc:	e037      	b.n	8006b2e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	7c1b      	ldrb	r3, [r3, #16]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d109      	bne.n	8006ada <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006acc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ace:	f107 0208 	add.w	r2, r7, #8
 8006ad2:	4610      	mov	r0, r2
 8006ad4:	4798      	blx	r3
 8006ad6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006ad8:	e029      	b.n	8006b2e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006ada:	6839      	ldr	r1, [r7, #0]
 8006adc:	6878      	ldr	r0, [r7, #4]
 8006ade:	f000 fa2a 	bl	8006f36 <USBD_CtlError>
        err++;
 8006ae2:	7afb      	ldrb	r3, [r7, #11]
 8006ae4:	3301      	adds	r3, #1
 8006ae6:	72fb      	strb	r3, [r7, #11]
      break;
 8006ae8:	e021      	b.n	8006b2e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	7c1b      	ldrb	r3, [r3, #16]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d10d      	bne.n	8006b0e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006afa:	f107 0208 	add.w	r2, r7, #8
 8006afe:	4610      	mov	r0, r2
 8006b00:	4798      	blx	r3
 8006b02:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	3301      	adds	r3, #1
 8006b08:	2207      	movs	r2, #7
 8006b0a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006b0c:	e00f      	b.n	8006b2e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006b0e:	6839      	ldr	r1, [r7, #0]
 8006b10:	6878      	ldr	r0, [r7, #4]
 8006b12:	f000 fa10 	bl	8006f36 <USBD_CtlError>
        err++;
 8006b16:	7afb      	ldrb	r3, [r7, #11]
 8006b18:	3301      	adds	r3, #1
 8006b1a:	72fb      	strb	r3, [r7, #11]
      break;
 8006b1c:	e007      	b.n	8006b2e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006b1e:	6839      	ldr	r1, [r7, #0]
 8006b20:	6878      	ldr	r0, [r7, #4]
 8006b22:	f000 fa08 	bl	8006f36 <USBD_CtlError>
      err++;
 8006b26:	7afb      	ldrb	r3, [r7, #11]
 8006b28:	3301      	adds	r3, #1
 8006b2a:	72fb      	strb	r3, [r7, #11]
      break;
 8006b2c:	bf00      	nop
  }

  if (err != 0U)
 8006b2e:	7afb      	ldrb	r3, [r7, #11]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d11e      	bne.n	8006b72 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	88db      	ldrh	r3, [r3, #6]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d016      	beq.n	8006b6a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006b3c:	893b      	ldrh	r3, [r7, #8]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d00e      	beq.n	8006b60 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	88da      	ldrh	r2, [r3, #6]
 8006b46:	893b      	ldrh	r3, [r7, #8]
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	bf28      	it	cs
 8006b4c:	4613      	movcs	r3, r2
 8006b4e:	b29b      	uxth	r3, r3
 8006b50:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006b52:	893b      	ldrh	r3, [r7, #8]
 8006b54:	461a      	mov	r2, r3
 8006b56:	68f9      	ldr	r1, [r7, #12]
 8006b58:	6878      	ldr	r0, [r7, #4]
 8006b5a:	f000 fa69 	bl	8007030 <USBD_CtlSendData>
 8006b5e:	e009      	b.n	8006b74 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006b60:	6839      	ldr	r1, [r7, #0]
 8006b62:	6878      	ldr	r0, [r7, #4]
 8006b64:	f000 f9e7 	bl	8006f36 <USBD_CtlError>
 8006b68:	e004      	b.n	8006b74 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006b6a:	6878      	ldr	r0, [r7, #4]
 8006b6c:	f000 faba 	bl	80070e4 <USBD_CtlSendStatus>
 8006b70:	e000      	b.n	8006b74 <USBD_GetDescriptor+0x2cc>
    return;
 8006b72:	bf00      	nop
  }
}
 8006b74:	3710      	adds	r7, #16
 8006b76:	46bd      	mov	sp, r7
 8006b78:	bd80      	pop	{r7, pc}
 8006b7a:	bf00      	nop

08006b7c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b084      	sub	sp, #16
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
 8006b84:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	889b      	ldrh	r3, [r3, #4]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d131      	bne.n	8006bf2 <USBD_SetAddress+0x76>
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	88db      	ldrh	r3, [r3, #6]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d12d      	bne.n	8006bf2 <USBD_SetAddress+0x76>
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	885b      	ldrh	r3, [r3, #2]
 8006b9a:	2b7f      	cmp	r3, #127	@ 0x7f
 8006b9c:	d829      	bhi.n	8006bf2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	885b      	ldrh	r3, [r3, #2]
 8006ba2:	b2db      	uxtb	r3, r3
 8006ba4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006ba8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006bb0:	b2db      	uxtb	r3, r3
 8006bb2:	2b03      	cmp	r3, #3
 8006bb4:	d104      	bne.n	8006bc0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006bb6:	6839      	ldr	r1, [r7, #0]
 8006bb8:	6878      	ldr	r0, [r7, #4]
 8006bba:	f000 f9bc 	bl	8006f36 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006bbe:	e01d      	b.n	8006bfc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	7bfa      	ldrb	r2, [r7, #15]
 8006bc4:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006bc8:	7bfb      	ldrb	r3, [r7, #15]
 8006bca:	4619      	mov	r1, r3
 8006bcc:	6878      	ldr	r0, [r7, #4]
 8006bce:	f003 f91b 	bl	8009e08 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	f000 fa86 	bl	80070e4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006bd8:	7bfb      	ldrb	r3, [r7, #15]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d004      	beq.n	8006be8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2202      	movs	r2, #2
 8006be2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006be6:	e009      	b.n	8006bfc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2201      	movs	r2, #1
 8006bec:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006bf0:	e004      	b.n	8006bfc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006bf2:	6839      	ldr	r1, [r7, #0]
 8006bf4:	6878      	ldr	r0, [r7, #4]
 8006bf6:	f000 f99e 	bl	8006f36 <USBD_CtlError>
  }
}
 8006bfa:	bf00      	nop
 8006bfc:	bf00      	nop
 8006bfe:	3710      	adds	r7, #16
 8006c00:	46bd      	mov	sp, r7
 8006c02:	bd80      	pop	{r7, pc}

08006c04 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b084      	sub	sp, #16
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
 8006c0c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006c0e:	2300      	movs	r3, #0
 8006c10:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	885b      	ldrh	r3, [r3, #2]
 8006c16:	b2da      	uxtb	r2, r3
 8006c18:	4b4e      	ldr	r3, [pc, #312]	@ (8006d54 <USBD_SetConfig+0x150>)
 8006c1a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006c1c:	4b4d      	ldr	r3, [pc, #308]	@ (8006d54 <USBD_SetConfig+0x150>)
 8006c1e:	781b      	ldrb	r3, [r3, #0]
 8006c20:	2b01      	cmp	r3, #1
 8006c22:	d905      	bls.n	8006c30 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006c24:	6839      	ldr	r1, [r7, #0]
 8006c26:	6878      	ldr	r0, [r7, #4]
 8006c28:	f000 f985 	bl	8006f36 <USBD_CtlError>
    return USBD_FAIL;
 8006c2c:	2303      	movs	r3, #3
 8006c2e:	e08c      	b.n	8006d4a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006c36:	b2db      	uxtb	r3, r3
 8006c38:	2b02      	cmp	r3, #2
 8006c3a:	d002      	beq.n	8006c42 <USBD_SetConfig+0x3e>
 8006c3c:	2b03      	cmp	r3, #3
 8006c3e:	d029      	beq.n	8006c94 <USBD_SetConfig+0x90>
 8006c40:	e075      	b.n	8006d2e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006c42:	4b44      	ldr	r3, [pc, #272]	@ (8006d54 <USBD_SetConfig+0x150>)
 8006c44:	781b      	ldrb	r3, [r3, #0]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d020      	beq.n	8006c8c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8006c4a:	4b42      	ldr	r3, [pc, #264]	@ (8006d54 <USBD_SetConfig+0x150>)
 8006c4c:	781b      	ldrb	r3, [r3, #0]
 8006c4e:	461a      	mov	r2, r3
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006c54:	4b3f      	ldr	r3, [pc, #252]	@ (8006d54 <USBD_SetConfig+0x150>)
 8006c56:	781b      	ldrb	r3, [r3, #0]
 8006c58:	4619      	mov	r1, r3
 8006c5a:	6878      	ldr	r0, [r7, #4]
 8006c5c:	f7fe ffe3 	bl	8005c26 <USBD_SetClassConfig>
 8006c60:	4603      	mov	r3, r0
 8006c62:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006c64:	7bfb      	ldrb	r3, [r7, #15]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d008      	beq.n	8006c7c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8006c6a:	6839      	ldr	r1, [r7, #0]
 8006c6c:	6878      	ldr	r0, [r7, #4]
 8006c6e:	f000 f962 	bl	8006f36 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2202      	movs	r2, #2
 8006c76:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006c7a:	e065      	b.n	8006d48 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006c7c:	6878      	ldr	r0, [r7, #4]
 8006c7e:	f000 fa31 	bl	80070e4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2203      	movs	r2, #3
 8006c86:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8006c8a:	e05d      	b.n	8006d48 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006c8c:	6878      	ldr	r0, [r7, #4]
 8006c8e:	f000 fa29 	bl	80070e4 <USBD_CtlSendStatus>
      break;
 8006c92:	e059      	b.n	8006d48 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006c94:	4b2f      	ldr	r3, [pc, #188]	@ (8006d54 <USBD_SetConfig+0x150>)
 8006c96:	781b      	ldrb	r3, [r3, #0]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d112      	bne.n	8006cc2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2202      	movs	r2, #2
 8006ca0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8006ca4:	4b2b      	ldr	r3, [pc, #172]	@ (8006d54 <USBD_SetConfig+0x150>)
 8006ca6:	781b      	ldrb	r3, [r3, #0]
 8006ca8:	461a      	mov	r2, r3
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006cae:	4b29      	ldr	r3, [pc, #164]	@ (8006d54 <USBD_SetConfig+0x150>)
 8006cb0:	781b      	ldrb	r3, [r3, #0]
 8006cb2:	4619      	mov	r1, r3
 8006cb4:	6878      	ldr	r0, [r7, #4]
 8006cb6:	f7fe ffd2 	bl	8005c5e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006cba:	6878      	ldr	r0, [r7, #4]
 8006cbc:	f000 fa12 	bl	80070e4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006cc0:	e042      	b.n	8006d48 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8006cc2:	4b24      	ldr	r3, [pc, #144]	@ (8006d54 <USBD_SetConfig+0x150>)
 8006cc4:	781b      	ldrb	r3, [r3, #0]
 8006cc6:	461a      	mov	r2, r3
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	685b      	ldr	r3, [r3, #4]
 8006ccc:	429a      	cmp	r2, r3
 8006cce:	d02a      	beq.n	8006d26 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	685b      	ldr	r3, [r3, #4]
 8006cd4:	b2db      	uxtb	r3, r3
 8006cd6:	4619      	mov	r1, r3
 8006cd8:	6878      	ldr	r0, [r7, #4]
 8006cda:	f7fe ffc0 	bl	8005c5e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006cde:	4b1d      	ldr	r3, [pc, #116]	@ (8006d54 <USBD_SetConfig+0x150>)
 8006ce0:	781b      	ldrb	r3, [r3, #0]
 8006ce2:	461a      	mov	r2, r3
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006ce8:	4b1a      	ldr	r3, [pc, #104]	@ (8006d54 <USBD_SetConfig+0x150>)
 8006cea:	781b      	ldrb	r3, [r3, #0]
 8006cec:	4619      	mov	r1, r3
 8006cee:	6878      	ldr	r0, [r7, #4]
 8006cf0:	f7fe ff99 	bl	8005c26 <USBD_SetClassConfig>
 8006cf4:	4603      	mov	r3, r0
 8006cf6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006cf8:	7bfb      	ldrb	r3, [r7, #15]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d00f      	beq.n	8006d1e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8006cfe:	6839      	ldr	r1, [r7, #0]
 8006d00:	6878      	ldr	r0, [r7, #4]
 8006d02:	f000 f918 	bl	8006f36 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	685b      	ldr	r3, [r3, #4]
 8006d0a:	b2db      	uxtb	r3, r3
 8006d0c:	4619      	mov	r1, r3
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	f7fe ffa5 	bl	8005c5e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2202      	movs	r2, #2
 8006d18:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8006d1c:	e014      	b.n	8006d48 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006d1e:	6878      	ldr	r0, [r7, #4]
 8006d20:	f000 f9e0 	bl	80070e4 <USBD_CtlSendStatus>
      break;
 8006d24:	e010      	b.n	8006d48 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006d26:	6878      	ldr	r0, [r7, #4]
 8006d28:	f000 f9dc 	bl	80070e4 <USBD_CtlSendStatus>
      break;
 8006d2c:	e00c      	b.n	8006d48 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8006d2e:	6839      	ldr	r1, [r7, #0]
 8006d30:	6878      	ldr	r0, [r7, #4]
 8006d32:	f000 f900 	bl	8006f36 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006d36:	4b07      	ldr	r3, [pc, #28]	@ (8006d54 <USBD_SetConfig+0x150>)
 8006d38:	781b      	ldrb	r3, [r3, #0]
 8006d3a:	4619      	mov	r1, r3
 8006d3c:	6878      	ldr	r0, [r7, #4]
 8006d3e:	f7fe ff8e 	bl	8005c5e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006d42:	2303      	movs	r3, #3
 8006d44:	73fb      	strb	r3, [r7, #15]
      break;
 8006d46:	bf00      	nop
  }

  return ret;
 8006d48:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	3710      	adds	r7, #16
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	bd80      	pop	{r7, pc}
 8006d52:	bf00      	nop
 8006d54:	200004b4 	.word	0x200004b4

08006d58 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b082      	sub	sp, #8
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
 8006d60:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	88db      	ldrh	r3, [r3, #6]
 8006d66:	2b01      	cmp	r3, #1
 8006d68:	d004      	beq.n	8006d74 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006d6a:	6839      	ldr	r1, [r7, #0]
 8006d6c:	6878      	ldr	r0, [r7, #4]
 8006d6e:	f000 f8e2 	bl	8006f36 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006d72:	e023      	b.n	8006dbc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006d7a:	b2db      	uxtb	r3, r3
 8006d7c:	2b02      	cmp	r3, #2
 8006d7e:	dc02      	bgt.n	8006d86 <USBD_GetConfig+0x2e>
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	dc03      	bgt.n	8006d8c <USBD_GetConfig+0x34>
 8006d84:	e015      	b.n	8006db2 <USBD_GetConfig+0x5a>
 8006d86:	2b03      	cmp	r3, #3
 8006d88:	d00b      	beq.n	8006da2 <USBD_GetConfig+0x4a>
 8006d8a:	e012      	b.n	8006db2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2200      	movs	r2, #0
 8006d90:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	3308      	adds	r3, #8
 8006d96:	2201      	movs	r2, #1
 8006d98:	4619      	mov	r1, r3
 8006d9a:	6878      	ldr	r0, [r7, #4]
 8006d9c:	f000 f948 	bl	8007030 <USBD_CtlSendData>
        break;
 8006da0:	e00c      	b.n	8006dbc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	3304      	adds	r3, #4
 8006da6:	2201      	movs	r2, #1
 8006da8:	4619      	mov	r1, r3
 8006daa:	6878      	ldr	r0, [r7, #4]
 8006dac:	f000 f940 	bl	8007030 <USBD_CtlSendData>
        break;
 8006db0:	e004      	b.n	8006dbc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006db2:	6839      	ldr	r1, [r7, #0]
 8006db4:	6878      	ldr	r0, [r7, #4]
 8006db6:	f000 f8be 	bl	8006f36 <USBD_CtlError>
        break;
 8006dba:	bf00      	nop
}
 8006dbc:	bf00      	nop
 8006dbe:	3708      	adds	r7, #8
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	bd80      	pop	{r7, pc}

08006dc4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b082      	sub	sp, #8
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
 8006dcc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006dd4:	b2db      	uxtb	r3, r3
 8006dd6:	3b01      	subs	r3, #1
 8006dd8:	2b02      	cmp	r3, #2
 8006dda:	d81e      	bhi.n	8006e1a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	88db      	ldrh	r3, [r3, #6]
 8006de0:	2b02      	cmp	r3, #2
 8006de2:	d004      	beq.n	8006dee <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006de4:	6839      	ldr	r1, [r7, #0]
 8006de6:	6878      	ldr	r0, [r7, #4]
 8006de8:	f000 f8a5 	bl	8006f36 <USBD_CtlError>
        break;
 8006dec:	e01a      	b.n	8006e24 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2201      	movs	r2, #1
 8006df2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d005      	beq.n	8006e0a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	68db      	ldr	r3, [r3, #12]
 8006e02:	f043 0202 	orr.w	r2, r3, #2
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	330c      	adds	r3, #12
 8006e0e:	2202      	movs	r2, #2
 8006e10:	4619      	mov	r1, r3
 8006e12:	6878      	ldr	r0, [r7, #4]
 8006e14:	f000 f90c 	bl	8007030 <USBD_CtlSendData>
      break;
 8006e18:	e004      	b.n	8006e24 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006e1a:	6839      	ldr	r1, [r7, #0]
 8006e1c:	6878      	ldr	r0, [r7, #4]
 8006e1e:	f000 f88a 	bl	8006f36 <USBD_CtlError>
      break;
 8006e22:	bf00      	nop
  }
}
 8006e24:	bf00      	nop
 8006e26:	3708      	adds	r7, #8
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	bd80      	pop	{r7, pc}

08006e2c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b082      	sub	sp, #8
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
 8006e34:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	885b      	ldrh	r3, [r3, #2]
 8006e3a:	2b01      	cmp	r3, #1
 8006e3c:	d107      	bne.n	8006e4e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2201      	movs	r2, #1
 8006e42:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006e46:	6878      	ldr	r0, [r7, #4]
 8006e48:	f000 f94c 	bl	80070e4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8006e4c:	e013      	b.n	8006e76 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	885b      	ldrh	r3, [r3, #2]
 8006e52:	2b02      	cmp	r3, #2
 8006e54:	d10b      	bne.n	8006e6e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	889b      	ldrh	r3, [r3, #4]
 8006e5a:	0a1b      	lsrs	r3, r3, #8
 8006e5c:	b29b      	uxth	r3, r3
 8006e5e:	b2da      	uxtb	r2, r3
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8006e66:	6878      	ldr	r0, [r7, #4]
 8006e68:	f000 f93c 	bl	80070e4 <USBD_CtlSendStatus>
}
 8006e6c:	e003      	b.n	8006e76 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8006e6e:	6839      	ldr	r1, [r7, #0]
 8006e70:	6878      	ldr	r0, [r7, #4]
 8006e72:	f000 f860 	bl	8006f36 <USBD_CtlError>
}
 8006e76:	bf00      	nop
 8006e78:	3708      	adds	r7, #8
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	bd80      	pop	{r7, pc}

08006e7e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e7e:	b580      	push	{r7, lr}
 8006e80:	b082      	sub	sp, #8
 8006e82:	af00      	add	r7, sp, #0
 8006e84:	6078      	str	r0, [r7, #4]
 8006e86:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006e8e:	b2db      	uxtb	r3, r3
 8006e90:	3b01      	subs	r3, #1
 8006e92:	2b02      	cmp	r3, #2
 8006e94:	d80b      	bhi.n	8006eae <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	885b      	ldrh	r3, [r3, #2]
 8006e9a:	2b01      	cmp	r3, #1
 8006e9c:	d10c      	bne.n	8006eb8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006ea6:	6878      	ldr	r0, [r7, #4]
 8006ea8:	f000 f91c 	bl	80070e4 <USBD_CtlSendStatus>
      }
      break;
 8006eac:	e004      	b.n	8006eb8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006eae:	6839      	ldr	r1, [r7, #0]
 8006eb0:	6878      	ldr	r0, [r7, #4]
 8006eb2:	f000 f840 	bl	8006f36 <USBD_CtlError>
      break;
 8006eb6:	e000      	b.n	8006eba <USBD_ClrFeature+0x3c>
      break;
 8006eb8:	bf00      	nop
  }
}
 8006eba:	bf00      	nop
 8006ebc:	3708      	adds	r7, #8
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	bd80      	pop	{r7, pc}

08006ec2 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006ec2:	b580      	push	{r7, lr}
 8006ec4:	b084      	sub	sp, #16
 8006ec6:	af00      	add	r7, sp, #0
 8006ec8:	6078      	str	r0, [r7, #4]
 8006eca:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	781a      	ldrb	r2, [r3, #0]
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	3301      	adds	r3, #1
 8006edc:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	781a      	ldrb	r2, [r3, #0]
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	3301      	adds	r3, #1
 8006eea:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006eec:	68f8      	ldr	r0, [r7, #12]
 8006eee:	f7ff fa40 	bl	8006372 <SWAPBYTE>
 8006ef2:	4603      	mov	r3, r0
 8006ef4:	461a      	mov	r2, r3
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	3301      	adds	r3, #1
 8006efe:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	3301      	adds	r3, #1
 8006f04:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006f06:	68f8      	ldr	r0, [r7, #12]
 8006f08:	f7ff fa33 	bl	8006372 <SWAPBYTE>
 8006f0c:	4603      	mov	r3, r0
 8006f0e:	461a      	mov	r2, r3
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	3301      	adds	r3, #1
 8006f18:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	3301      	adds	r3, #1
 8006f1e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006f20:	68f8      	ldr	r0, [r7, #12]
 8006f22:	f7ff fa26 	bl	8006372 <SWAPBYTE>
 8006f26:	4603      	mov	r3, r0
 8006f28:	461a      	mov	r2, r3
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	80da      	strh	r2, [r3, #6]
}
 8006f2e:	bf00      	nop
 8006f30:	3710      	adds	r7, #16
 8006f32:	46bd      	mov	sp, r7
 8006f34:	bd80      	pop	{r7, pc}

08006f36 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f36:	b580      	push	{r7, lr}
 8006f38:	b082      	sub	sp, #8
 8006f3a:	af00      	add	r7, sp, #0
 8006f3c:	6078      	str	r0, [r7, #4]
 8006f3e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006f40:	2180      	movs	r1, #128	@ 0x80
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	f002 fef6 	bl	8009d34 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006f48:	2100      	movs	r1, #0
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	f002 fef2 	bl	8009d34 <USBD_LL_StallEP>
}
 8006f50:	bf00      	nop
 8006f52:	3708      	adds	r7, #8
 8006f54:	46bd      	mov	sp, r7
 8006f56:	bd80      	pop	{r7, pc}

08006f58 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b086      	sub	sp, #24
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	60f8      	str	r0, [r7, #12]
 8006f60:	60b9      	str	r1, [r7, #8]
 8006f62:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006f64:	2300      	movs	r3, #0
 8006f66:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d042      	beq.n	8006ff4 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8006f72:	6938      	ldr	r0, [r7, #16]
 8006f74:	f000 f842 	bl	8006ffc <USBD_GetLen>
 8006f78:	4603      	mov	r3, r0
 8006f7a:	3301      	adds	r3, #1
 8006f7c:	005b      	lsls	r3, r3, #1
 8006f7e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006f82:	d808      	bhi.n	8006f96 <USBD_GetString+0x3e>
 8006f84:	6938      	ldr	r0, [r7, #16]
 8006f86:	f000 f839 	bl	8006ffc <USBD_GetLen>
 8006f8a:	4603      	mov	r3, r0
 8006f8c:	3301      	adds	r3, #1
 8006f8e:	b29b      	uxth	r3, r3
 8006f90:	005b      	lsls	r3, r3, #1
 8006f92:	b29a      	uxth	r2, r3
 8006f94:	e001      	b.n	8006f9a <USBD_GetString+0x42>
 8006f96:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006f9e:	7dfb      	ldrb	r3, [r7, #23]
 8006fa0:	68ba      	ldr	r2, [r7, #8]
 8006fa2:	4413      	add	r3, r2
 8006fa4:	687a      	ldr	r2, [r7, #4]
 8006fa6:	7812      	ldrb	r2, [r2, #0]
 8006fa8:	701a      	strb	r2, [r3, #0]
  idx++;
 8006faa:	7dfb      	ldrb	r3, [r7, #23]
 8006fac:	3301      	adds	r3, #1
 8006fae:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006fb0:	7dfb      	ldrb	r3, [r7, #23]
 8006fb2:	68ba      	ldr	r2, [r7, #8]
 8006fb4:	4413      	add	r3, r2
 8006fb6:	2203      	movs	r2, #3
 8006fb8:	701a      	strb	r2, [r3, #0]
  idx++;
 8006fba:	7dfb      	ldrb	r3, [r7, #23]
 8006fbc:	3301      	adds	r3, #1
 8006fbe:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006fc0:	e013      	b.n	8006fea <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8006fc2:	7dfb      	ldrb	r3, [r7, #23]
 8006fc4:	68ba      	ldr	r2, [r7, #8]
 8006fc6:	4413      	add	r3, r2
 8006fc8:	693a      	ldr	r2, [r7, #16]
 8006fca:	7812      	ldrb	r2, [r2, #0]
 8006fcc:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006fce:	693b      	ldr	r3, [r7, #16]
 8006fd0:	3301      	adds	r3, #1
 8006fd2:	613b      	str	r3, [r7, #16]
    idx++;
 8006fd4:	7dfb      	ldrb	r3, [r7, #23]
 8006fd6:	3301      	adds	r3, #1
 8006fd8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006fda:	7dfb      	ldrb	r3, [r7, #23]
 8006fdc:	68ba      	ldr	r2, [r7, #8]
 8006fde:	4413      	add	r3, r2
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	701a      	strb	r2, [r3, #0]
    idx++;
 8006fe4:	7dfb      	ldrb	r3, [r7, #23]
 8006fe6:	3301      	adds	r3, #1
 8006fe8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006fea:	693b      	ldr	r3, [r7, #16]
 8006fec:	781b      	ldrb	r3, [r3, #0]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d1e7      	bne.n	8006fc2 <USBD_GetString+0x6a>
 8006ff2:	e000      	b.n	8006ff6 <USBD_GetString+0x9e>
    return;
 8006ff4:	bf00      	nop
  }
}
 8006ff6:	3718      	adds	r7, #24
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	bd80      	pop	{r7, pc}

08006ffc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006ffc:	b480      	push	{r7}
 8006ffe:	b085      	sub	sp, #20
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007004:	2300      	movs	r3, #0
 8007006:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800700c:	e005      	b.n	800701a <USBD_GetLen+0x1e>
  {
    len++;
 800700e:	7bfb      	ldrb	r3, [r7, #15]
 8007010:	3301      	adds	r3, #1
 8007012:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007014:	68bb      	ldr	r3, [r7, #8]
 8007016:	3301      	adds	r3, #1
 8007018:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800701a:	68bb      	ldr	r3, [r7, #8]
 800701c:	781b      	ldrb	r3, [r3, #0]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d1f5      	bne.n	800700e <USBD_GetLen+0x12>
  }

  return len;
 8007022:	7bfb      	ldrb	r3, [r7, #15]
}
 8007024:	4618      	mov	r0, r3
 8007026:	3714      	adds	r7, #20
 8007028:	46bd      	mov	sp, r7
 800702a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702e:	4770      	bx	lr

08007030 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007030:	b580      	push	{r7, lr}
 8007032:	b084      	sub	sp, #16
 8007034:	af00      	add	r7, sp, #0
 8007036:	60f8      	str	r0, [r7, #12]
 8007038:	60b9      	str	r1, [r7, #8]
 800703a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	2202      	movs	r2, #2
 8007040:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	687a      	ldr	r2, [r7, #4]
 8007048:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	687a      	ldr	r2, [r7, #4]
 800704e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	68ba      	ldr	r2, [r7, #8]
 8007054:	2100      	movs	r1, #0
 8007056:	68f8      	ldr	r0, [r7, #12]
 8007058:	f002 fef5 	bl	8009e46 <USBD_LL_Transmit>

  return USBD_OK;
 800705c:	2300      	movs	r3, #0
}
 800705e:	4618      	mov	r0, r3
 8007060:	3710      	adds	r7, #16
 8007062:	46bd      	mov	sp, r7
 8007064:	bd80      	pop	{r7, pc}

08007066 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007066:	b580      	push	{r7, lr}
 8007068:	b084      	sub	sp, #16
 800706a:	af00      	add	r7, sp, #0
 800706c:	60f8      	str	r0, [r7, #12]
 800706e:	60b9      	str	r1, [r7, #8]
 8007070:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	68ba      	ldr	r2, [r7, #8]
 8007076:	2100      	movs	r1, #0
 8007078:	68f8      	ldr	r0, [r7, #12]
 800707a:	f002 fee4 	bl	8009e46 <USBD_LL_Transmit>

  return USBD_OK;
 800707e:	2300      	movs	r3, #0
}
 8007080:	4618      	mov	r0, r3
 8007082:	3710      	adds	r7, #16
 8007084:	46bd      	mov	sp, r7
 8007086:	bd80      	pop	{r7, pc}

08007088 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b084      	sub	sp, #16
 800708c:	af00      	add	r7, sp, #0
 800708e:	60f8      	str	r0, [r7, #12]
 8007090:	60b9      	str	r1, [r7, #8]
 8007092:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	2203      	movs	r2, #3
 8007098:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	687a      	ldr	r2, [r7, #4]
 80070a0:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	687a      	ldr	r2, [r7, #4]
 80070a8:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	68ba      	ldr	r2, [r7, #8]
 80070b0:	2100      	movs	r1, #0
 80070b2:	68f8      	ldr	r0, [r7, #12]
 80070b4:	f002 fee8 	bl	8009e88 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80070b8:	2300      	movs	r3, #0
}
 80070ba:	4618      	mov	r0, r3
 80070bc:	3710      	adds	r7, #16
 80070be:	46bd      	mov	sp, r7
 80070c0:	bd80      	pop	{r7, pc}

080070c2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80070c2:	b580      	push	{r7, lr}
 80070c4:	b084      	sub	sp, #16
 80070c6:	af00      	add	r7, sp, #0
 80070c8:	60f8      	str	r0, [r7, #12]
 80070ca:	60b9      	str	r1, [r7, #8]
 80070cc:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	68ba      	ldr	r2, [r7, #8]
 80070d2:	2100      	movs	r1, #0
 80070d4:	68f8      	ldr	r0, [r7, #12]
 80070d6:	f002 fed7 	bl	8009e88 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80070da:	2300      	movs	r3, #0
}
 80070dc:	4618      	mov	r0, r3
 80070de:	3710      	adds	r7, #16
 80070e0:	46bd      	mov	sp, r7
 80070e2:	bd80      	pop	{r7, pc}

080070e4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b082      	sub	sp, #8
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2204      	movs	r2, #4
 80070f0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80070f4:	2300      	movs	r3, #0
 80070f6:	2200      	movs	r2, #0
 80070f8:	2100      	movs	r1, #0
 80070fa:	6878      	ldr	r0, [r7, #4]
 80070fc:	f002 fea3 	bl	8009e46 <USBD_LL_Transmit>

  return USBD_OK;
 8007100:	2300      	movs	r3, #0
}
 8007102:	4618      	mov	r0, r3
 8007104:	3708      	adds	r7, #8
 8007106:	46bd      	mov	sp, r7
 8007108:	bd80      	pop	{r7, pc}

0800710a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800710a:	b580      	push	{r7, lr}
 800710c:	b082      	sub	sp, #8
 800710e:	af00      	add	r7, sp, #0
 8007110:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2205      	movs	r2, #5
 8007116:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800711a:	2300      	movs	r3, #0
 800711c:	2200      	movs	r2, #0
 800711e:	2100      	movs	r1, #0
 8007120:	6878      	ldr	r0, [r7, #4]
 8007122:	f002 feb1 	bl	8009e88 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007126:	2300      	movs	r3, #0
}
 8007128:	4618      	mov	r0, r3
 800712a:	3708      	adds	r7, #8
 800712c:	46bd      	mov	sp, r7
 800712e:	bd80      	pop	{r7, pc}

08007130 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007130:	b480      	push	{r7}
 8007132:	b083      	sub	sp, #12
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	f103 0208 	add.w	r2, r3, #8
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	f04f 32ff 	mov.w	r2, #4294967295
 8007148:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	f103 0208 	add.w	r2, r3, #8
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	f103 0208 	add.w	r2, r3, #8
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2200      	movs	r2, #0
 8007162:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007164:	bf00      	nop
 8007166:	370c      	adds	r7, #12
 8007168:	46bd      	mov	sp, r7
 800716a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716e:	4770      	bx	lr

08007170 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007170:	b480      	push	{r7}
 8007172:	b083      	sub	sp, #12
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2200      	movs	r2, #0
 800717c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800717e:	bf00      	nop
 8007180:	370c      	adds	r7, #12
 8007182:	46bd      	mov	sp, r7
 8007184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007188:	4770      	bx	lr

0800718a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800718a:	b480      	push	{r7}
 800718c:	b085      	sub	sp, #20
 800718e:	af00      	add	r7, sp, #0
 8007190:	6078      	str	r0, [r7, #4]
 8007192:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	685b      	ldr	r3, [r3, #4]
 8007198:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	68fa      	ldr	r2, [r7, #12]
 800719e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	689a      	ldr	r2, [r3, #8]
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	689b      	ldr	r3, [r3, #8]
 80071ac:	683a      	ldr	r2, [r7, #0]
 80071ae:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	683a      	ldr	r2, [r7, #0]
 80071b4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	687a      	ldr	r2, [r7, #4]
 80071ba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	1c5a      	adds	r2, r3, #1
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	601a      	str	r2, [r3, #0]
}
 80071c6:	bf00      	nop
 80071c8:	3714      	adds	r7, #20
 80071ca:	46bd      	mov	sp, r7
 80071cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d0:	4770      	bx	lr

080071d2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80071d2:	b480      	push	{r7}
 80071d4:	b085      	sub	sp, #20
 80071d6:	af00      	add	r7, sp, #0
 80071d8:	6078      	str	r0, [r7, #4]
 80071da:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80071e2:	68bb      	ldr	r3, [r7, #8]
 80071e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071e8:	d103      	bne.n	80071f2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	691b      	ldr	r3, [r3, #16]
 80071ee:	60fb      	str	r3, [r7, #12]
 80071f0:	e00c      	b.n	800720c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	3308      	adds	r3, #8
 80071f6:	60fb      	str	r3, [r7, #12]
 80071f8:	e002      	b.n	8007200 <vListInsert+0x2e>
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	685b      	ldr	r3, [r3, #4]
 80071fe:	60fb      	str	r3, [r7, #12]
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	685b      	ldr	r3, [r3, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	68ba      	ldr	r2, [r7, #8]
 8007208:	429a      	cmp	r2, r3
 800720a:	d2f6      	bcs.n	80071fa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	685a      	ldr	r2, [r3, #4]
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	685b      	ldr	r3, [r3, #4]
 8007218:	683a      	ldr	r2, [r7, #0]
 800721a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	68fa      	ldr	r2, [r7, #12]
 8007220:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	683a      	ldr	r2, [r7, #0]
 8007226:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	687a      	ldr	r2, [r7, #4]
 800722c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	1c5a      	adds	r2, r3, #1
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	601a      	str	r2, [r3, #0]
}
 8007238:	bf00      	nop
 800723a:	3714      	adds	r7, #20
 800723c:	46bd      	mov	sp, r7
 800723e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007242:	4770      	bx	lr

08007244 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007244:	b480      	push	{r7}
 8007246:	b085      	sub	sp, #20
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	691b      	ldr	r3, [r3, #16]
 8007250:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	685b      	ldr	r3, [r3, #4]
 8007256:	687a      	ldr	r2, [r7, #4]
 8007258:	6892      	ldr	r2, [r2, #8]
 800725a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	689b      	ldr	r3, [r3, #8]
 8007260:	687a      	ldr	r2, [r7, #4]
 8007262:	6852      	ldr	r2, [r2, #4]
 8007264:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	685b      	ldr	r3, [r3, #4]
 800726a:	687a      	ldr	r2, [r7, #4]
 800726c:	429a      	cmp	r2, r3
 800726e:	d103      	bne.n	8007278 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	689a      	ldr	r2, [r3, #8]
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2200      	movs	r2, #0
 800727c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	1e5a      	subs	r2, r3, #1
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	681b      	ldr	r3, [r3, #0]
}
 800728c:	4618      	mov	r0, r3
 800728e:	3714      	adds	r7, #20
 8007290:	46bd      	mov	sp, r7
 8007292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007296:	4770      	bx	lr

08007298 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b084      	sub	sp, #16
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
 80072a0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d10b      	bne.n	80072c4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80072ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072b0:	f383 8811 	msr	BASEPRI, r3
 80072b4:	f3bf 8f6f 	isb	sy
 80072b8:	f3bf 8f4f 	dsb	sy
 80072bc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80072be:	bf00      	nop
 80072c0:	bf00      	nop
 80072c2:	e7fd      	b.n	80072c0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80072c4:	f001 fe70 	bl	8008fa8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	681a      	ldr	r2, [r3, #0]
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072d0:	68f9      	ldr	r1, [r7, #12]
 80072d2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80072d4:	fb01 f303 	mul.w	r3, r1, r3
 80072d8:	441a      	add	r2, r3
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	2200      	movs	r2, #0
 80072e2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	681a      	ldr	r2, [r3, #0]
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	681a      	ldr	r2, [r3, #0]
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072f4:	3b01      	subs	r3, #1
 80072f6:	68f9      	ldr	r1, [r7, #12]
 80072f8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80072fa:	fb01 f303 	mul.w	r3, r1, r3
 80072fe:	441a      	add	r2, r3
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	22ff      	movs	r2, #255	@ 0xff
 8007308:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	22ff      	movs	r2, #255	@ 0xff
 8007310:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d114      	bne.n	8007344 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	691b      	ldr	r3, [r3, #16]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d01a      	beq.n	8007358 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	3310      	adds	r3, #16
 8007326:	4618      	mov	r0, r3
 8007328:	f001 f922 	bl	8008570 <xTaskRemoveFromEventList>
 800732c:	4603      	mov	r3, r0
 800732e:	2b00      	cmp	r3, #0
 8007330:	d012      	beq.n	8007358 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007332:	4b0d      	ldr	r3, [pc, #52]	@ (8007368 <xQueueGenericReset+0xd0>)
 8007334:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007338:	601a      	str	r2, [r3, #0]
 800733a:	f3bf 8f4f 	dsb	sy
 800733e:	f3bf 8f6f 	isb	sy
 8007342:	e009      	b.n	8007358 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	3310      	adds	r3, #16
 8007348:	4618      	mov	r0, r3
 800734a:	f7ff fef1 	bl	8007130 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	3324      	adds	r3, #36	@ 0x24
 8007352:	4618      	mov	r0, r3
 8007354:	f7ff feec 	bl	8007130 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007358:	f001 fe58 	bl	800900c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800735c:	2301      	movs	r3, #1
}
 800735e:	4618      	mov	r0, r3
 8007360:	3710      	adds	r7, #16
 8007362:	46bd      	mov	sp, r7
 8007364:	bd80      	pop	{r7, pc}
 8007366:	bf00      	nop
 8007368:	e000ed04 	.word	0xe000ed04

0800736c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800736c:	b580      	push	{r7, lr}
 800736e:	b08a      	sub	sp, #40	@ 0x28
 8007370:	af02      	add	r7, sp, #8
 8007372:	60f8      	str	r0, [r7, #12]
 8007374:	60b9      	str	r1, [r7, #8]
 8007376:	4613      	mov	r3, r2
 8007378:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d10b      	bne.n	8007398 <xQueueGenericCreate+0x2c>
	__asm volatile
 8007380:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007384:	f383 8811 	msr	BASEPRI, r3
 8007388:	f3bf 8f6f 	isb	sy
 800738c:	f3bf 8f4f 	dsb	sy
 8007390:	613b      	str	r3, [r7, #16]
}
 8007392:	bf00      	nop
 8007394:	bf00      	nop
 8007396:	e7fd      	b.n	8007394 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	68ba      	ldr	r2, [r7, #8]
 800739c:	fb02 f303 	mul.w	r3, r2, r3
 80073a0:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80073a2:	69fb      	ldr	r3, [r7, #28]
 80073a4:	3348      	adds	r3, #72	@ 0x48
 80073a6:	4618      	mov	r0, r3
 80073a8:	f001 fede 	bl	8009168 <pvPortMalloc>
 80073ac:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80073ae:	69bb      	ldr	r3, [r7, #24]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d011      	beq.n	80073d8 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80073b4:	69bb      	ldr	r3, [r7, #24]
 80073b6:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80073b8:	697b      	ldr	r3, [r7, #20]
 80073ba:	3348      	adds	r3, #72	@ 0x48
 80073bc:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80073be:	69bb      	ldr	r3, [r7, #24]
 80073c0:	2200      	movs	r2, #0
 80073c2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80073c6:	79fa      	ldrb	r2, [r7, #7]
 80073c8:	69bb      	ldr	r3, [r7, #24]
 80073ca:	9300      	str	r3, [sp, #0]
 80073cc:	4613      	mov	r3, r2
 80073ce:	697a      	ldr	r2, [r7, #20]
 80073d0:	68b9      	ldr	r1, [r7, #8]
 80073d2:	68f8      	ldr	r0, [r7, #12]
 80073d4:	f000 f805 	bl	80073e2 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80073d8:	69bb      	ldr	r3, [r7, #24]
	}
 80073da:	4618      	mov	r0, r3
 80073dc:	3720      	adds	r7, #32
 80073de:	46bd      	mov	sp, r7
 80073e0:	bd80      	pop	{r7, pc}

080073e2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80073e2:	b580      	push	{r7, lr}
 80073e4:	b084      	sub	sp, #16
 80073e6:	af00      	add	r7, sp, #0
 80073e8:	60f8      	str	r0, [r7, #12]
 80073ea:	60b9      	str	r1, [r7, #8]
 80073ec:	607a      	str	r2, [r7, #4]
 80073ee:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80073f0:	68bb      	ldr	r3, [r7, #8]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d103      	bne.n	80073fe <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80073f6:	69bb      	ldr	r3, [r7, #24]
 80073f8:	69ba      	ldr	r2, [r7, #24]
 80073fa:	601a      	str	r2, [r3, #0]
 80073fc:	e002      	b.n	8007404 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80073fe:	69bb      	ldr	r3, [r7, #24]
 8007400:	687a      	ldr	r2, [r7, #4]
 8007402:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007404:	69bb      	ldr	r3, [r7, #24]
 8007406:	68fa      	ldr	r2, [r7, #12]
 8007408:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800740a:	69bb      	ldr	r3, [r7, #24]
 800740c:	68ba      	ldr	r2, [r7, #8]
 800740e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007410:	2101      	movs	r1, #1
 8007412:	69b8      	ldr	r0, [r7, #24]
 8007414:	f7ff ff40 	bl	8007298 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007418:	bf00      	nop
 800741a:	3710      	adds	r7, #16
 800741c:	46bd      	mov	sp, r7
 800741e:	bd80      	pop	{r7, pc}

08007420 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b08e      	sub	sp, #56	@ 0x38
 8007424:	af00      	add	r7, sp, #0
 8007426:	60f8      	str	r0, [r7, #12]
 8007428:	60b9      	str	r1, [r7, #8]
 800742a:	607a      	str	r2, [r7, #4]
 800742c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800742e:	2300      	movs	r3, #0
 8007430:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007436:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007438:	2b00      	cmp	r3, #0
 800743a:	d10b      	bne.n	8007454 <xQueueGenericSend+0x34>
	__asm volatile
 800743c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007440:	f383 8811 	msr	BASEPRI, r3
 8007444:	f3bf 8f6f 	isb	sy
 8007448:	f3bf 8f4f 	dsb	sy
 800744c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800744e:	bf00      	nop
 8007450:	bf00      	nop
 8007452:	e7fd      	b.n	8007450 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007454:	68bb      	ldr	r3, [r7, #8]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d103      	bne.n	8007462 <xQueueGenericSend+0x42>
 800745a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800745c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800745e:	2b00      	cmp	r3, #0
 8007460:	d101      	bne.n	8007466 <xQueueGenericSend+0x46>
 8007462:	2301      	movs	r3, #1
 8007464:	e000      	b.n	8007468 <xQueueGenericSend+0x48>
 8007466:	2300      	movs	r3, #0
 8007468:	2b00      	cmp	r3, #0
 800746a:	d10b      	bne.n	8007484 <xQueueGenericSend+0x64>
	__asm volatile
 800746c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007470:	f383 8811 	msr	BASEPRI, r3
 8007474:	f3bf 8f6f 	isb	sy
 8007478:	f3bf 8f4f 	dsb	sy
 800747c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800747e:	bf00      	nop
 8007480:	bf00      	nop
 8007482:	e7fd      	b.n	8007480 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	2b02      	cmp	r3, #2
 8007488:	d103      	bne.n	8007492 <xQueueGenericSend+0x72>
 800748a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800748c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800748e:	2b01      	cmp	r3, #1
 8007490:	d101      	bne.n	8007496 <xQueueGenericSend+0x76>
 8007492:	2301      	movs	r3, #1
 8007494:	e000      	b.n	8007498 <xQueueGenericSend+0x78>
 8007496:	2300      	movs	r3, #0
 8007498:	2b00      	cmp	r3, #0
 800749a:	d10b      	bne.n	80074b4 <xQueueGenericSend+0x94>
	__asm volatile
 800749c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074a0:	f383 8811 	msr	BASEPRI, r3
 80074a4:	f3bf 8f6f 	isb	sy
 80074a8:	f3bf 8f4f 	dsb	sy
 80074ac:	623b      	str	r3, [r7, #32]
}
 80074ae:	bf00      	nop
 80074b0:	bf00      	nop
 80074b2:	e7fd      	b.n	80074b0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80074b4:	f001 fa22 	bl	80088fc <xTaskGetSchedulerState>
 80074b8:	4603      	mov	r3, r0
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d102      	bne.n	80074c4 <xQueueGenericSend+0xa4>
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d101      	bne.n	80074c8 <xQueueGenericSend+0xa8>
 80074c4:	2301      	movs	r3, #1
 80074c6:	e000      	b.n	80074ca <xQueueGenericSend+0xaa>
 80074c8:	2300      	movs	r3, #0
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d10b      	bne.n	80074e6 <xQueueGenericSend+0xc6>
	__asm volatile
 80074ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074d2:	f383 8811 	msr	BASEPRI, r3
 80074d6:	f3bf 8f6f 	isb	sy
 80074da:	f3bf 8f4f 	dsb	sy
 80074de:	61fb      	str	r3, [r7, #28]
}
 80074e0:	bf00      	nop
 80074e2:	bf00      	nop
 80074e4:	e7fd      	b.n	80074e2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80074e6:	f001 fd5f 	bl	8008fa8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80074ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074ec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80074ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074f2:	429a      	cmp	r2, r3
 80074f4:	d302      	bcc.n	80074fc <xQueueGenericSend+0xdc>
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	2b02      	cmp	r3, #2
 80074fa:	d129      	bne.n	8007550 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80074fc:	683a      	ldr	r2, [r7, #0]
 80074fe:	68b9      	ldr	r1, [r7, #8]
 8007500:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007502:	f000 f9b7 	bl	8007874 <prvCopyDataToQueue>
 8007506:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007508:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800750a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800750c:	2b00      	cmp	r3, #0
 800750e:	d010      	beq.n	8007532 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007510:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007512:	3324      	adds	r3, #36	@ 0x24
 8007514:	4618      	mov	r0, r3
 8007516:	f001 f82b 	bl	8008570 <xTaskRemoveFromEventList>
 800751a:	4603      	mov	r3, r0
 800751c:	2b00      	cmp	r3, #0
 800751e:	d013      	beq.n	8007548 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007520:	4b3f      	ldr	r3, [pc, #252]	@ (8007620 <xQueueGenericSend+0x200>)
 8007522:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007526:	601a      	str	r2, [r3, #0]
 8007528:	f3bf 8f4f 	dsb	sy
 800752c:	f3bf 8f6f 	isb	sy
 8007530:	e00a      	b.n	8007548 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007532:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007534:	2b00      	cmp	r3, #0
 8007536:	d007      	beq.n	8007548 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007538:	4b39      	ldr	r3, [pc, #228]	@ (8007620 <xQueueGenericSend+0x200>)
 800753a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800753e:	601a      	str	r2, [r3, #0]
 8007540:	f3bf 8f4f 	dsb	sy
 8007544:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007548:	f001 fd60 	bl	800900c <vPortExitCritical>
				return pdPASS;
 800754c:	2301      	movs	r3, #1
 800754e:	e063      	b.n	8007618 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d103      	bne.n	800755e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007556:	f001 fd59 	bl	800900c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800755a:	2300      	movs	r3, #0
 800755c:	e05c      	b.n	8007618 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800755e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007560:	2b00      	cmp	r3, #0
 8007562:	d106      	bne.n	8007572 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007564:	f107 0314 	add.w	r3, r7, #20
 8007568:	4618      	mov	r0, r3
 800756a:	f001 f865 	bl	8008638 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800756e:	2301      	movs	r3, #1
 8007570:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007572:	f001 fd4b 	bl	800900c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007576:	f000 fe0b 	bl	8008190 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800757a:	f001 fd15 	bl	8008fa8 <vPortEnterCritical>
 800757e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007580:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007584:	b25b      	sxtb	r3, r3
 8007586:	f1b3 3fff 	cmp.w	r3, #4294967295
 800758a:	d103      	bne.n	8007594 <xQueueGenericSend+0x174>
 800758c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800758e:	2200      	movs	r2, #0
 8007590:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007594:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007596:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800759a:	b25b      	sxtb	r3, r3
 800759c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075a0:	d103      	bne.n	80075aa <xQueueGenericSend+0x18a>
 80075a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075a4:	2200      	movs	r2, #0
 80075a6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80075aa:	f001 fd2f 	bl	800900c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80075ae:	1d3a      	adds	r2, r7, #4
 80075b0:	f107 0314 	add.w	r3, r7, #20
 80075b4:	4611      	mov	r1, r2
 80075b6:	4618      	mov	r0, r3
 80075b8:	f001 f854 	bl	8008664 <xTaskCheckForTimeOut>
 80075bc:	4603      	mov	r3, r0
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d124      	bne.n	800760c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80075c2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80075c4:	f000 fa28 	bl	8007a18 <prvIsQueueFull>
 80075c8:	4603      	mov	r3, r0
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d018      	beq.n	8007600 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80075ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075d0:	3310      	adds	r3, #16
 80075d2:	687a      	ldr	r2, [r7, #4]
 80075d4:	4611      	mov	r1, r2
 80075d6:	4618      	mov	r0, r3
 80075d8:	f000 ffa4 	bl	8008524 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80075dc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80075de:	f000 f9b3 	bl	8007948 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80075e2:	f000 fde3 	bl	80081ac <xTaskResumeAll>
 80075e6:	4603      	mov	r3, r0
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	f47f af7c 	bne.w	80074e6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80075ee:	4b0c      	ldr	r3, [pc, #48]	@ (8007620 <xQueueGenericSend+0x200>)
 80075f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80075f4:	601a      	str	r2, [r3, #0]
 80075f6:	f3bf 8f4f 	dsb	sy
 80075fa:	f3bf 8f6f 	isb	sy
 80075fe:	e772      	b.n	80074e6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007600:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007602:	f000 f9a1 	bl	8007948 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007606:	f000 fdd1 	bl	80081ac <xTaskResumeAll>
 800760a:	e76c      	b.n	80074e6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800760c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800760e:	f000 f99b 	bl	8007948 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007612:	f000 fdcb 	bl	80081ac <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007616:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007618:	4618      	mov	r0, r3
 800761a:	3738      	adds	r7, #56	@ 0x38
 800761c:	46bd      	mov	sp, r7
 800761e:	bd80      	pop	{r7, pc}
 8007620:	e000ed04 	.word	0xe000ed04

08007624 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007624:	b580      	push	{r7, lr}
 8007626:	b08e      	sub	sp, #56	@ 0x38
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
 800762c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800762e:	2300      	movs	r3, #0
 8007630:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8007636:	2300      	movs	r3, #0
 8007638:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800763a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800763c:	2b00      	cmp	r3, #0
 800763e:	d10b      	bne.n	8007658 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8007640:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007644:	f383 8811 	msr	BASEPRI, r3
 8007648:	f3bf 8f6f 	isb	sy
 800764c:	f3bf 8f4f 	dsb	sy
 8007650:	623b      	str	r3, [r7, #32]
}
 8007652:	bf00      	nop
 8007654:	bf00      	nop
 8007656:	e7fd      	b.n	8007654 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007658:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800765a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800765c:	2b00      	cmp	r3, #0
 800765e:	d00b      	beq.n	8007678 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8007660:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007664:	f383 8811 	msr	BASEPRI, r3
 8007668:	f3bf 8f6f 	isb	sy
 800766c:	f3bf 8f4f 	dsb	sy
 8007670:	61fb      	str	r3, [r7, #28]
}
 8007672:	bf00      	nop
 8007674:	bf00      	nop
 8007676:	e7fd      	b.n	8007674 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007678:	f001 f940 	bl	80088fc <xTaskGetSchedulerState>
 800767c:	4603      	mov	r3, r0
 800767e:	2b00      	cmp	r3, #0
 8007680:	d102      	bne.n	8007688 <xQueueSemaphoreTake+0x64>
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d101      	bne.n	800768c <xQueueSemaphoreTake+0x68>
 8007688:	2301      	movs	r3, #1
 800768a:	e000      	b.n	800768e <xQueueSemaphoreTake+0x6a>
 800768c:	2300      	movs	r3, #0
 800768e:	2b00      	cmp	r3, #0
 8007690:	d10b      	bne.n	80076aa <xQueueSemaphoreTake+0x86>
	__asm volatile
 8007692:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007696:	f383 8811 	msr	BASEPRI, r3
 800769a:	f3bf 8f6f 	isb	sy
 800769e:	f3bf 8f4f 	dsb	sy
 80076a2:	61bb      	str	r3, [r7, #24]
}
 80076a4:	bf00      	nop
 80076a6:	bf00      	nop
 80076a8:	e7fd      	b.n	80076a6 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80076aa:	f001 fc7d 	bl	8008fa8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80076ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076b2:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80076b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d024      	beq.n	8007704 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80076ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076bc:	1e5a      	subs	r2, r3, #1
 80076be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076c0:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80076c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d104      	bne.n	80076d4 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80076ca:	f001 fac3 	bl	8008c54 <pvTaskIncrementMutexHeldCount>
 80076ce:	4602      	mov	r2, r0
 80076d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076d2:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80076d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076d6:	691b      	ldr	r3, [r3, #16]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d00f      	beq.n	80076fc <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80076dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076de:	3310      	adds	r3, #16
 80076e0:	4618      	mov	r0, r3
 80076e2:	f000 ff45 	bl	8008570 <xTaskRemoveFromEventList>
 80076e6:	4603      	mov	r3, r0
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d007      	beq.n	80076fc <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80076ec:	4b54      	ldr	r3, [pc, #336]	@ (8007840 <xQueueSemaphoreTake+0x21c>)
 80076ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80076f2:	601a      	str	r2, [r3, #0]
 80076f4:	f3bf 8f4f 	dsb	sy
 80076f8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80076fc:	f001 fc86 	bl	800900c <vPortExitCritical>
				return pdPASS;
 8007700:	2301      	movs	r3, #1
 8007702:	e098      	b.n	8007836 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d112      	bne.n	8007730 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800770a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800770c:	2b00      	cmp	r3, #0
 800770e:	d00b      	beq.n	8007728 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8007710:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007714:	f383 8811 	msr	BASEPRI, r3
 8007718:	f3bf 8f6f 	isb	sy
 800771c:	f3bf 8f4f 	dsb	sy
 8007720:	617b      	str	r3, [r7, #20]
}
 8007722:	bf00      	nop
 8007724:	bf00      	nop
 8007726:	e7fd      	b.n	8007724 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007728:	f001 fc70 	bl	800900c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800772c:	2300      	movs	r3, #0
 800772e:	e082      	b.n	8007836 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007730:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007732:	2b00      	cmp	r3, #0
 8007734:	d106      	bne.n	8007744 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007736:	f107 030c 	add.w	r3, r7, #12
 800773a:	4618      	mov	r0, r3
 800773c:	f000 ff7c 	bl	8008638 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007740:	2301      	movs	r3, #1
 8007742:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007744:	f001 fc62 	bl	800900c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007748:	f000 fd22 	bl	8008190 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800774c:	f001 fc2c 	bl	8008fa8 <vPortEnterCritical>
 8007750:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007752:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007756:	b25b      	sxtb	r3, r3
 8007758:	f1b3 3fff 	cmp.w	r3, #4294967295
 800775c:	d103      	bne.n	8007766 <xQueueSemaphoreTake+0x142>
 800775e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007760:	2200      	movs	r2, #0
 8007762:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007766:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007768:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800776c:	b25b      	sxtb	r3, r3
 800776e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007772:	d103      	bne.n	800777c <xQueueSemaphoreTake+0x158>
 8007774:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007776:	2200      	movs	r2, #0
 8007778:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800777c:	f001 fc46 	bl	800900c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007780:	463a      	mov	r2, r7
 8007782:	f107 030c 	add.w	r3, r7, #12
 8007786:	4611      	mov	r1, r2
 8007788:	4618      	mov	r0, r3
 800778a:	f000 ff6b 	bl	8008664 <xTaskCheckForTimeOut>
 800778e:	4603      	mov	r3, r0
 8007790:	2b00      	cmp	r3, #0
 8007792:	d132      	bne.n	80077fa <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007794:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007796:	f000 f929 	bl	80079ec <prvIsQueueEmpty>
 800779a:	4603      	mov	r3, r0
 800779c:	2b00      	cmp	r3, #0
 800779e:	d026      	beq.n	80077ee <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80077a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d109      	bne.n	80077bc <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 80077a8:	f001 fbfe 	bl	8008fa8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80077ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077ae:	689b      	ldr	r3, [r3, #8]
 80077b0:	4618      	mov	r0, r3
 80077b2:	f001 f8c1 	bl	8008938 <xTaskPriorityInherit>
 80077b6:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 80077b8:	f001 fc28 	bl	800900c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80077bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077be:	3324      	adds	r3, #36	@ 0x24
 80077c0:	683a      	ldr	r2, [r7, #0]
 80077c2:	4611      	mov	r1, r2
 80077c4:	4618      	mov	r0, r3
 80077c6:	f000 fead 	bl	8008524 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80077ca:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80077cc:	f000 f8bc 	bl	8007948 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80077d0:	f000 fcec 	bl	80081ac <xTaskResumeAll>
 80077d4:	4603      	mov	r3, r0
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	f47f af67 	bne.w	80076aa <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 80077dc:	4b18      	ldr	r3, [pc, #96]	@ (8007840 <xQueueSemaphoreTake+0x21c>)
 80077de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80077e2:	601a      	str	r2, [r3, #0]
 80077e4:	f3bf 8f4f 	dsb	sy
 80077e8:	f3bf 8f6f 	isb	sy
 80077ec:	e75d      	b.n	80076aa <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80077ee:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80077f0:	f000 f8aa 	bl	8007948 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80077f4:	f000 fcda 	bl	80081ac <xTaskResumeAll>
 80077f8:	e757      	b.n	80076aa <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80077fa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80077fc:	f000 f8a4 	bl	8007948 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007800:	f000 fcd4 	bl	80081ac <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007804:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007806:	f000 f8f1 	bl	80079ec <prvIsQueueEmpty>
 800780a:	4603      	mov	r3, r0
 800780c:	2b00      	cmp	r3, #0
 800780e:	f43f af4c 	beq.w	80076aa <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8007812:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007814:	2b00      	cmp	r3, #0
 8007816:	d00d      	beq.n	8007834 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8007818:	f001 fbc6 	bl	8008fa8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800781c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800781e:	f000 f811 	bl	8007844 <prvGetDisinheritPriorityAfterTimeout>
 8007822:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007824:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007826:	689b      	ldr	r3, [r3, #8]
 8007828:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800782a:	4618      	mov	r0, r3
 800782c:	f001 f982 	bl	8008b34 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007830:	f001 fbec 	bl	800900c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007834:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007836:	4618      	mov	r0, r3
 8007838:	3738      	adds	r7, #56	@ 0x38
 800783a:	46bd      	mov	sp, r7
 800783c:	bd80      	pop	{r7, pc}
 800783e:	bf00      	nop
 8007840:	e000ed04 	.word	0xe000ed04

08007844 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007844:	b480      	push	{r7}
 8007846:	b085      	sub	sp, #20
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007850:	2b00      	cmp	r3, #0
 8007852:	d006      	beq.n	8007862 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	f1c3 0307 	rsb	r3, r3, #7
 800785e:	60fb      	str	r3, [r7, #12]
 8007860:	e001      	b.n	8007866 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007862:	2300      	movs	r3, #0
 8007864:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007866:	68fb      	ldr	r3, [r7, #12]
	}
 8007868:	4618      	mov	r0, r3
 800786a:	3714      	adds	r7, #20
 800786c:	46bd      	mov	sp, r7
 800786e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007872:	4770      	bx	lr

08007874 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b086      	sub	sp, #24
 8007878:	af00      	add	r7, sp, #0
 800787a:	60f8      	str	r0, [r7, #12]
 800787c:	60b9      	str	r1, [r7, #8]
 800787e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007880:	2300      	movs	r3, #0
 8007882:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007888:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800788e:	2b00      	cmp	r3, #0
 8007890:	d10d      	bne.n	80078ae <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d14d      	bne.n	8007936 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	689b      	ldr	r3, [r3, #8]
 800789e:	4618      	mov	r0, r3
 80078a0:	f001 f8c0 	bl	8008a24 <xTaskPriorityDisinherit>
 80078a4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	2200      	movs	r2, #0
 80078aa:	609a      	str	r2, [r3, #8]
 80078ac:	e043      	b.n	8007936 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d119      	bne.n	80078e8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	6858      	ldr	r0, [r3, #4]
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078bc:	461a      	mov	r2, r3
 80078be:	68b9      	ldr	r1, [r7, #8]
 80078c0:	f002 fbde 	bl	800a080 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	685a      	ldr	r2, [r3, #4]
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078cc:	441a      	add	r2, r3
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	685a      	ldr	r2, [r3, #4]
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	689b      	ldr	r3, [r3, #8]
 80078da:	429a      	cmp	r2, r3
 80078dc:	d32b      	bcc.n	8007936 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	681a      	ldr	r2, [r3, #0]
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	605a      	str	r2, [r3, #4]
 80078e6:	e026      	b.n	8007936 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	68d8      	ldr	r0, [r3, #12]
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078f0:	461a      	mov	r2, r3
 80078f2:	68b9      	ldr	r1, [r7, #8]
 80078f4:	f002 fbc4 	bl	800a080 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	68da      	ldr	r2, [r3, #12]
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007900:	425b      	negs	r3, r3
 8007902:	441a      	add	r2, r3
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	68da      	ldr	r2, [r3, #12]
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	429a      	cmp	r2, r3
 8007912:	d207      	bcs.n	8007924 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	689a      	ldr	r2, [r3, #8]
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800791c:	425b      	negs	r3, r3
 800791e:	441a      	add	r2, r3
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2b02      	cmp	r3, #2
 8007928:	d105      	bne.n	8007936 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800792a:	693b      	ldr	r3, [r7, #16]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d002      	beq.n	8007936 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007930:	693b      	ldr	r3, [r7, #16]
 8007932:	3b01      	subs	r3, #1
 8007934:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007936:	693b      	ldr	r3, [r7, #16]
 8007938:	1c5a      	adds	r2, r3, #1
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800793e:	697b      	ldr	r3, [r7, #20]
}
 8007940:	4618      	mov	r0, r3
 8007942:	3718      	adds	r7, #24
 8007944:	46bd      	mov	sp, r7
 8007946:	bd80      	pop	{r7, pc}

08007948 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b084      	sub	sp, #16
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007950:	f001 fb2a 	bl	8008fa8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800795a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800795c:	e011      	b.n	8007982 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007962:	2b00      	cmp	r3, #0
 8007964:	d012      	beq.n	800798c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	3324      	adds	r3, #36	@ 0x24
 800796a:	4618      	mov	r0, r3
 800796c:	f000 fe00 	bl	8008570 <xTaskRemoveFromEventList>
 8007970:	4603      	mov	r3, r0
 8007972:	2b00      	cmp	r3, #0
 8007974:	d001      	beq.n	800797a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007976:	f000 fed9 	bl	800872c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800797a:	7bfb      	ldrb	r3, [r7, #15]
 800797c:	3b01      	subs	r3, #1
 800797e:	b2db      	uxtb	r3, r3
 8007980:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007982:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007986:	2b00      	cmp	r3, #0
 8007988:	dce9      	bgt.n	800795e <prvUnlockQueue+0x16>
 800798a:	e000      	b.n	800798e <prvUnlockQueue+0x46>
					break;
 800798c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	22ff      	movs	r2, #255	@ 0xff
 8007992:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8007996:	f001 fb39 	bl	800900c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800799a:	f001 fb05 	bl	8008fa8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80079a4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80079a6:	e011      	b.n	80079cc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	691b      	ldr	r3, [r3, #16]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d012      	beq.n	80079d6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	3310      	adds	r3, #16
 80079b4:	4618      	mov	r0, r3
 80079b6:	f000 fddb 	bl	8008570 <xTaskRemoveFromEventList>
 80079ba:	4603      	mov	r3, r0
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d001      	beq.n	80079c4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80079c0:	f000 feb4 	bl	800872c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80079c4:	7bbb      	ldrb	r3, [r7, #14]
 80079c6:	3b01      	subs	r3, #1
 80079c8:	b2db      	uxtb	r3, r3
 80079ca:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80079cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	dce9      	bgt.n	80079a8 <prvUnlockQueue+0x60>
 80079d4:	e000      	b.n	80079d8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80079d6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	22ff      	movs	r2, #255	@ 0xff
 80079dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80079e0:	f001 fb14 	bl	800900c <vPortExitCritical>
}
 80079e4:	bf00      	nop
 80079e6:	3710      	adds	r7, #16
 80079e8:	46bd      	mov	sp, r7
 80079ea:	bd80      	pop	{r7, pc}

080079ec <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b084      	sub	sp, #16
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80079f4:	f001 fad8 	bl	8008fa8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d102      	bne.n	8007a06 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007a00:	2301      	movs	r3, #1
 8007a02:	60fb      	str	r3, [r7, #12]
 8007a04:	e001      	b.n	8007a0a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007a06:	2300      	movs	r3, #0
 8007a08:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007a0a:	f001 faff 	bl	800900c <vPortExitCritical>

	return xReturn;
 8007a0e:	68fb      	ldr	r3, [r7, #12]
}
 8007a10:	4618      	mov	r0, r3
 8007a12:	3710      	adds	r7, #16
 8007a14:	46bd      	mov	sp, r7
 8007a16:	bd80      	pop	{r7, pc}

08007a18 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b084      	sub	sp, #16
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007a20:	f001 fac2 	bl	8008fa8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a2c:	429a      	cmp	r2, r3
 8007a2e:	d102      	bne.n	8007a36 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007a30:	2301      	movs	r3, #1
 8007a32:	60fb      	str	r3, [r7, #12]
 8007a34:	e001      	b.n	8007a3a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007a36:	2300      	movs	r3, #0
 8007a38:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007a3a:	f001 fae7 	bl	800900c <vPortExitCritical>

	return xReturn;
 8007a3e:	68fb      	ldr	r3, [r7, #12]
}
 8007a40:	4618      	mov	r0, r3
 8007a42:	3710      	adds	r7, #16
 8007a44:	46bd      	mov	sp, r7
 8007a46:	bd80      	pop	{r7, pc}

08007a48 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b08e      	sub	sp, #56	@ 0x38
 8007a4c:	af04      	add	r7, sp, #16
 8007a4e:	60f8      	str	r0, [r7, #12]
 8007a50:	60b9      	str	r1, [r7, #8]
 8007a52:	607a      	str	r2, [r7, #4]
 8007a54:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007a56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d10b      	bne.n	8007a74 <xTaskCreateStatic+0x2c>
	__asm volatile
 8007a5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a60:	f383 8811 	msr	BASEPRI, r3
 8007a64:	f3bf 8f6f 	isb	sy
 8007a68:	f3bf 8f4f 	dsb	sy
 8007a6c:	623b      	str	r3, [r7, #32]
}
 8007a6e:	bf00      	nop
 8007a70:	bf00      	nop
 8007a72:	e7fd      	b.n	8007a70 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007a74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d10b      	bne.n	8007a92 <xTaskCreateStatic+0x4a>
	__asm volatile
 8007a7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a7e:	f383 8811 	msr	BASEPRI, r3
 8007a82:	f3bf 8f6f 	isb	sy
 8007a86:	f3bf 8f4f 	dsb	sy
 8007a8a:	61fb      	str	r3, [r7, #28]
}
 8007a8c:	bf00      	nop
 8007a8e:	bf00      	nop
 8007a90:	e7fd      	b.n	8007a8e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007a92:	23a0      	movs	r3, #160	@ 0xa0
 8007a94:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007a96:	693b      	ldr	r3, [r7, #16]
 8007a98:	2ba0      	cmp	r3, #160	@ 0xa0
 8007a9a:	d00b      	beq.n	8007ab4 <xTaskCreateStatic+0x6c>
	__asm volatile
 8007a9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007aa0:	f383 8811 	msr	BASEPRI, r3
 8007aa4:	f3bf 8f6f 	isb	sy
 8007aa8:	f3bf 8f4f 	dsb	sy
 8007aac:	61bb      	str	r3, [r7, #24]
}
 8007aae:	bf00      	nop
 8007ab0:	bf00      	nop
 8007ab2:	e7fd      	b.n	8007ab0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007ab4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007ab6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d01e      	beq.n	8007afa <xTaskCreateStatic+0xb2>
 8007abc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d01b      	beq.n	8007afa <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007ac2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ac4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ac8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007aca:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007acc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ace:	2202      	movs	r2, #2
 8007ad0:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	9303      	str	r3, [sp, #12]
 8007ad8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ada:	9302      	str	r3, [sp, #8]
 8007adc:	f107 0314 	add.w	r3, r7, #20
 8007ae0:	9301      	str	r3, [sp, #4]
 8007ae2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ae4:	9300      	str	r3, [sp, #0]
 8007ae6:	683b      	ldr	r3, [r7, #0]
 8007ae8:	687a      	ldr	r2, [r7, #4]
 8007aea:	68b9      	ldr	r1, [r7, #8]
 8007aec:	68f8      	ldr	r0, [r7, #12]
 8007aee:	f000 f851 	bl	8007b94 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007af2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007af4:	f000 f8ee 	bl	8007cd4 <prvAddNewTaskToReadyList>
 8007af8:	e001      	b.n	8007afe <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8007afa:	2300      	movs	r3, #0
 8007afc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007afe:	697b      	ldr	r3, [r7, #20]
	}
 8007b00:	4618      	mov	r0, r3
 8007b02:	3728      	adds	r7, #40	@ 0x28
 8007b04:	46bd      	mov	sp, r7
 8007b06:	bd80      	pop	{r7, pc}

08007b08 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b08c      	sub	sp, #48	@ 0x30
 8007b0c:	af04      	add	r7, sp, #16
 8007b0e:	60f8      	str	r0, [r7, #12]
 8007b10:	60b9      	str	r1, [r7, #8]
 8007b12:	603b      	str	r3, [r7, #0]
 8007b14:	4613      	mov	r3, r2
 8007b16:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007b18:	88fb      	ldrh	r3, [r7, #6]
 8007b1a:	009b      	lsls	r3, r3, #2
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	f001 fb23 	bl	8009168 <pvPortMalloc>
 8007b22:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007b24:	697b      	ldr	r3, [r7, #20]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d00e      	beq.n	8007b48 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007b2a:	20a0      	movs	r0, #160	@ 0xa0
 8007b2c:	f001 fb1c 	bl	8009168 <pvPortMalloc>
 8007b30:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007b32:	69fb      	ldr	r3, [r7, #28]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d003      	beq.n	8007b40 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007b38:	69fb      	ldr	r3, [r7, #28]
 8007b3a:	697a      	ldr	r2, [r7, #20]
 8007b3c:	631a      	str	r2, [r3, #48]	@ 0x30
 8007b3e:	e005      	b.n	8007b4c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007b40:	6978      	ldr	r0, [r7, #20]
 8007b42:	f001 fbdf 	bl	8009304 <vPortFree>
 8007b46:	e001      	b.n	8007b4c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007b48:	2300      	movs	r3, #0
 8007b4a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007b4c:	69fb      	ldr	r3, [r7, #28]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d017      	beq.n	8007b82 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007b52:	69fb      	ldr	r3, [r7, #28]
 8007b54:	2200      	movs	r2, #0
 8007b56:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007b5a:	88fa      	ldrh	r2, [r7, #6]
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	9303      	str	r3, [sp, #12]
 8007b60:	69fb      	ldr	r3, [r7, #28]
 8007b62:	9302      	str	r3, [sp, #8]
 8007b64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b66:	9301      	str	r3, [sp, #4]
 8007b68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b6a:	9300      	str	r3, [sp, #0]
 8007b6c:	683b      	ldr	r3, [r7, #0]
 8007b6e:	68b9      	ldr	r1, [r7, #8]
 8007b70:	68f8      	ldr	r0, [r7, #12]
 8007b72:	f000 f80f 	bl	8007b94 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007b76:	69f8      	ldr	r0, [r7, #28]
 8007b78:	f000 f8ac 	bl	8007cd4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007b7c:	2301      	movs	r3, #1
 8007b7e:	61bb      	str	r3, [r7, #24]
 8007b80:	e002      	b.n	8007b88 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007b82:	f04f 33ff 	mov.w	r3, #4294967295
 8007b86:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007b88:	69bb      	ldr	r3, [r7, #24]
	}
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	3720      	adds	r7, #32
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	bd80      	pop	{r7, pc}
	...

08007b94 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b088      	sub	sp, #32
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	60f8      	str	r0, [r7, #12]
 8007b9c:	60b9      	str	r1, [r7, #8]
 8007b9e:	607a      	str	r2, [r7, #4]
 8007ba0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007ba2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ba4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007bac:	3b01      	subs	r3, #1
 8007bae:	009b      	lsls	r3, r3, #2
 8007bb0:	4413      	add	r3, r2
 8007bb2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007bb4:	69bb      	ldr	r3, [r7, #24]
 8007bb6:	f023 0307 	bic.w	r3, r3, #7
 8007bba:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007bbc:	69bb      	ldr	r3, [r7, #24]
 8007bbe:	f003 0307 	and.w	r3, r3, #7
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d00b      	beq.n	8007bde <prvInitialiseNewTask+0x4a>
	__asm volatile
 8007bc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bca:	f383 8811 	msr	BASEPRI, r3
 8007bce:	f3bf 8f6f 	isb	sy
 8007bd2:	f3bf 8f4f 	dsb	sy
 8007bd6:	617b      	str	r3, [r7, #20]
}
 8007bd8:	bf00      	nop
 8007bda:	bf00      	nop
 8007bdc:	e7fd      	b.n	8007bda <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007bde:	68bb      	ldr	r3, [r7, #8]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d01f      	beq.n	8007c24 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007be4:	2300      	movs	r3, #0
 8007be6:	61fb      	str	r3, [r7, #28]
 8007be8:	e012      	b.n	8007c10 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007bea:	68ba      	ldr	r2, [r7, #8]
 8007bec:	69fb      	ldr	r3, [r7, #28]
 8007bee:	4413      	add	r3, r2
 8007bf0:	7819      	ldrb	r1, [r3, #0]
 8007bf2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007bf4:	69fb      	ldr	r3, [r7, #28]
 8007bf6:	4413      	add	r3, r2
 8007bf8:	3334      	adds	r3, #52	@ 0x34
 8007bfa:	460a      	mov	r2, r1
 8007bfc:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007bfe:	68ba      	ldr	r2, [r7, #8]
 8007c00:	69fb      	ldr	r3, [r7, #28]
 8007c02:	4413      	add	r3, r2
 8007c04:	781b      	ldrb	r3, [r3, #0]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d006      	beq.n	8007c18 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007c0a:	69fb      	ldr	r3, [r7, #28]
 8007c0c:	3301      	adds	r3, #1
 8007c0e:	61fb      	str	r3, [r7, #28]
 8007c10:	69fb      	ldr	r3, [r7, #28]
 8007c12:	2b0f      	cmp	r3, #15
 8007c14:	d9e9      	bls.n	8007bea <prvInitialiseNewTask+0x56>
 8007c16:	e000      	b.n	8007c1a <prvInitialiseNewTask+0x86>
			{
				break;
 8007c18:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007c1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007c22:	e003      	b.n	8007c2c <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007c24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c26:	2200      	movs	r2, #0
 8007c28:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007c2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c2e:	2b06      	cmp	r3, #6
 8007c30:	d901      	bls.n	8007c36 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007c32:	2306      	movs	r3, #6
 8007c34:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007c36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c38:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007c3a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007c3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c3e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007c40:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007c42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c44:	2200      	movs	r2, #0
 8007c46:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007c48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c4a:	3304      	adds	r3, #4
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	f7ff fa8f 	bl	8007170 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007c52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c54:	3318      	adds	r3, #24
 8007c56:	4618      	mov	r0, r3
 8007c58:	f7ff fa8a 	bl	8007170 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007c5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c5e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007c60:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c64:	f1c3 0207 	rsb	r2, r3, #7
 8007c68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c6a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007c6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c6e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007c70:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007c72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c74:	2200      	movs	r2, #0
 8007c76:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007c7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007c82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c84:	334c      	adds	r3, #76	@ 0x4c
 8007c86:	224c      	movs	r2, #76	@ 0x4c
 8007c88:	2100      	movs	r1, #0
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	f002 f974 	bl	8009f78 <memset>
 8007c90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c92:	4a0d      	ldr	r2, [pc, #52]	@ (8007cc8 <prvInitialiseNewTask+0x134>)
 8007c94:	651a      	str	r2, [r3, #80]	@ 0x50
 8007c96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c98:	4a0c      	ldr	r2, [pc, #48]	@ (8007ccc <prvInitialiseNewTask+0x138>)
 8007c9a:	655a      	str	r2, [r3, #84]	@ 0x54
 8007c9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c9e:	4a0c      	ldr	r2, [pc, #48]	@ (8007cd0 <prvInitialiseNewTask+0x13c>)
 8007ca0:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007ca2:	683a      	ldr	r2, [r7, #0]
 8007ca4:	68f9      	ldr	r1, [r7, #12]
 8007ca6:	69b8      	ldr	r0, [r7, #24]
 8007ca8:	f001 f84e 	bl	8008d48 <pxPortInitialiseStack>
 8007cac:	4602      	mov	r2, r0
 8007cae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cb0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007cb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d002      	beq.n	8007cbe <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007cb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007cba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007cbc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007cbe:	bf00      	nop
 8007cc0:	3720      	adds	r7, #32
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	bd80      	pop	{r7, pc}
 8007cc6:	bf00      	nop
 8007cc8:	20005dec 	.word	0x20005dec
 8007ccc:	20005e54 	.word	0x20005e54
 8007cd0:	20005ebc 	.word	0x20005ebc

08007cd4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	b082      	sub	sp, #8
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007cdc:	f001 f964 	bl	8008fa8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007ce0:	4b2a      	ldr	r3, [pc, #168]	@ (8007d8c <prvAddNewTaskToReadyList+0xb8>)
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	3301      	adds	r3, #1
 8007ce6:	4a29      	ldr	r2, [pc, #164]	@ (8007d8c <prvAddNewTaskToReadyList+0xb8>)
 8007ce8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007cea:	4b29      	ldr	r3, [pc, #164]	@ (8007d90 <prvAddNewTaskToReadyList+0xbc>)
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d109      	bne.n	8007d06 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007cf2:	4a27      	ldr	r2, [pc, #156]	@ (8007d90 <prvAddNewTaskToReadyList+0xbc>)
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007cf8:	4b24      	ldr	r3, [pc, #144]	@ (8007d8c <prvAddNewTaskToReadyList+0xb8>)
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	2b01      	cmp	r3, #1
 8007cfe:	d110      	bne.n	8007d22 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007d00:	f000 fd38 	bl	8008774 <prvInitialiseTaskLists>
 8007d04:	e00d      	b.n	8007d22 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007d06:	4b23      	ldr	r3, [pc, #140]	@ (8007d94 <prvAddNewTaskToReadyList+0xc0>)
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d109      	bne.n	8007d22 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007d0e:	4b20      	ldr	r3, [pc, #128]	@ (8007d90 <prvAddNewTaskToReadyList+0xbc>)
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d18:	429a      	cmp	r2, r3
 8007d1a:	d802      	bhi.n	8007d22 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007d1c:	4a1c      	ldr	r2, [pc, #112]	@ (8007d90 <prvAddNewTaskToReadyList+0xbc>)
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007d22:	4b1d      	ldr	r3, [pc, #116]	@ (8007d98 <prvAddNewTaskToReadyList+0xc4>)
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	3301      	adds	r3, #1
 8007d28:	4a1b      	ldr	r2, [pc, #108]	@ (8007d98 <prvAddNewTaskToReadyList+0xc4>)
 8007d2a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d30:	2201      	movs	r2, #1
 8007d32:	409a      	lsls	r2, r3
 8007d34:	4b19      	ldr	r3, [pc, #100]	@ (8007d9c <prvAddNewTaskToReadyList+0xc8>)
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	4313      	orrs	r3, r2
 8007d3a:	4a18      	ldr	r2, [pc, #96]	@ (8007d9c <prvAddNewTaskToReadyList+0xc8>)
 8007d3c:	6013      	str	r3, [r2, #0]
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d42:	4613      	mov	r3, r2
 8007d44:	009b      	lsls	r3, r3, #2
 8007d46:	4413      	add	r3, r2
 8007d48:	009b      	lsls	r3, r3, #2
 8007d4a:	4a15      	ldr	r2, [pc, #84]	@ (8007da0 <prvAddNewTaskToReadyList+0xcc>)
 8007d4c:	441a      	add	r2, r3
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	3304      	adds	r3, #4
 8007d52:	4619      	mov	r1, r3
 8007d54:	4610      	mov	r0, r2
 8007d56:	f7ff fa18 	bl	800718a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007d5a:	f001 f957 	bl	800900c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007d5e:	4b0d      	ldr	r3, [pc, #52]	@ (8007d94 <prvAddNewTaskToReadyList+0xc0>)
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d00e      	beq.n	8007d84 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007d66:	4b0a      	ldr	r3, [pc, #40]	@ (8007d90 <prvAddNewTaskToReadyList+0xbc>)
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d70:	429a      	cmp	r2, r3
 8007d72:	d207      	bcs.n	8007d84 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007d74:	4b0b      	ldr	r3, [pc, #44]	@ (8007da4 <prvAddNewTaskToReadyList+0xd0>)
 8007d76:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007d7a:	601a      	str	r2, [r3, #0]
 8007d7c:	f3bf 8f4f 	dsb	sy
 8007d80:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007d84:	bf00      	nop
 8007d86:	3708      	adds	r7, #8
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	bd80      	pop	{r7, pc}
 8007d8c:	200005b8 	.word	0x200005b8
 8007d90:	200004b8 	.word	0x200004b8
 8007d94:	200005c4 	.word	0x200005c4
 8007d98:	200005d4 	.word	0x200005d4
 8007d9c:	200005c0 	.word	0x200005c0
 8007da0:	200004bc 	.word	0x200004bc
 8007da4:	e000ed04 	.word	0xe000ed04

08007da8 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b084      	sub	sp, #16
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8007db0:	f001 f8fa 	bl	8008fa8 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d102      	bne.n	8007dc0 <vTaskDelete+0x18>
 8007dba:	4b39      	ldr	r3, [pc, #228]	@ (8007ea0 <vTaskDelete+0xf8>)
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	e000      	b.n	8007dc2 <vTaskDelete+0x1a>
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	3304      	adds	r3, #4
 8007dc8:	4618      	mov	r0, r3
 8007dca:	f7ff fa3b 	bl	8007244 <uxListRemove>
 8007dce:	4603      	mov	r3, r0
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d115      	bne.n	8007e00 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007dd8:	4932      	ldr	r1, [pc, #200]	@ (8007ea4 <vTaskDelete+0xfc>)
 8007dda:	4613      	mov	r3, r2
 8007ddc:	009b      	lsls	r3, r3, #2
 8007dde:	4413      	add	r3, r2
 8007de0:	009b      	lsls	r3, r3, #2
 8007de2:	440b      	add	r3, r1
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d10a      	bne.n	8007e00 <vTaskDelete+0x58>
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dee:	2201      	movs	r2, #1
 8007df0:	fa02 f303 	lsl.w	r3, r2, r3
 8007df4:	43da      	mvns	r2, r3
 8007df6:	4b2c      	ldr	r3, [pc, #176]	@ (8007ea8 <vTaskDelete+0x100>)
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	4013      	ands	r3, r2
 8007dfc:	4a2a      	ldr	r2, [pc, #168]	@ (8007ea8 <vTaskDelete+0x100>)
 8007dfe:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d004      	beq.n	8007e12 <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	3318      	adds	r3, #24
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	f7ff fa19 	bl	8007244 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8007e12:	4b26      	ldr	r3, [pc, #152]	@ (8007eac <vTaskDelete+0x104>)
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	3301      	adds	r3, #1
 8007e18:	4a24      	ldr	r2, [pc, #144]	@ (8007eac <vTaskDelete+0x104>)
 8007e1a:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8007e1c:	4b20      	ldr	r3, [pc, #128]	@ (8007ea0 <vTaskDelete+0xf8>)
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	68fa      	ldr	r2, [r7, #12]
 8007e22:	429a      	cmp	r2, r3
 8007e24:	d10b      	bne.n	8007e3e <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	3304      	adds	r3, #4
 8007e2a:	4619      	mov	r1, r3
 8007e2c:	4820      	ldr	r0, [pc, #128]	@ (8007eb0 <vTaskDelete+0x108>)
 8007e2e:	f7ff f9ac 	bl	800718a <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8007e32:	4b20      	ldr	r3, [pc, #128]	@ (8007eb4 <vTaskDelete+0x10c>)
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	3301      	adds	r3, #1
 8007e38:	4a1e      	ldr	r2, [pc, #120]	@ (8007eb4 <vTaskDelete+0x10c>)
 8007e3a:	6013      	str	r3, [r2, #0]
 8007e3c:	e009      	b.n	8007e52 <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8007e3e:	4b1e      	ldr	r3, [pc, #120]	@ (8007eb8 <vTaskDelete+0x110>)
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	3b01      	subs	r3, #1
 8007e44:	4a1c      	ldr	r2, [pc, #112]	@ (8007eb8 <vTaskDelete+0x110>)
 8007e46:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 8007e48:	68f8      	ldr	r0, [r7, #12]
 8007e4a:	f000 fd01 	bl	8008850 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8007e4e:	f000 fd35 	bl	80088bc <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8007e52:	f001 f8db 	bl	800900c <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8007e56:	4b19      	ldr	r3, [pc, #100]	@ (8007ebc <vTaskDelete+0x114>)
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d01c      	beq.n	8007e98 <vTaskDelete+0xf0>
		{
			if( pxTCB == pxCurrentTCB )
 8007e5e:	4b10      	ldr	r3, [pc, #64]	@ (8007ea0 <vTaskDelete+0xf8>)
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	68fa      	ldr	r2, [r7, #12]
 8007e64:	429a      	cmp	r2, r3
 8007e66:	d117      	bne.n	8007e98 <vTaskDelete+0xf0>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8007e68:	4b15      	ldr	r3, [pc, #84]	@ (8007ec0 <vTaskDelete+0x118>)
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d00b      	beq.n	8007e88 <vTaskDelete+0xe0>
	__asm volatile
 8007e70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e74:	f383 8811 	msr	BASEPRI, r3
 8007e78:	f3bf 8f6f 	isb	sy
 8007e7c:	f3bf 8f4f 	dsb	sy
 8007e80:	60bb      	str	r3, [r7, #8]
}
 8007e82:	bf00      	nop
 8007e84:	bf00      	nop
 8007e86:	e7fd      	b.n	8007e84 <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 8007e88:	4b0e      	ldr	r3, [pc, #56]	@ (8007ec4 <vTaskDelete+0x11c>)
 8007e8a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007e8e:	601a      	str	r2, [r3, #0]
 8007e90:	f3bf 8f4f 	dsb	sy
 8007e94:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007e98:	bf00      	nop
 8007e9a:	3710      	adds	r7, #16
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	bd80      	pop	{r7, pc}
 8007ea0:	200004b8 	.word	0x200004b8
 8007ea4:	200004bc 	.word	0x200004bc
 8007ea8:	200005c0 	.word	0x200005c0
 8007eac:	200005d4 	.word	0x200005d4
 8007eb0:	2000058c 	.word	0x2000058c
 8007eb4:	200005a0 	.word	0x200005a0
 8007eb8:	200005b8 	.word	0x200005b8
 8007ebc:	200005c4 	.word	0x200005c4
 8007ec0:	200005e0 	.word	0x200005e0
 8007ec4:	e000ed04 	.word	0xe000ed04

08007ec8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b084      	sub	sp, #16
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d018      	beq.n	8007f0c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007eda:	4b14      	ldr	r3, [pc, #80]	@ (8007f2c <vTaskDelay+0x64>)
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d00b      	beq.n	8007efa <vTaskDelay+0x32>
	__asm volatile
 8007ee2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ee6:	f383 8811 	msr	BASEPRI, r3
 8007eea:	f3bf 8f6f 	isb	sy
 8007eee:	f3bf 8f4f 	dsb	sy
 8007ef2:	60bb      	str	r3, [r7, #8]
}
 8007ef4:	bf00      	nop
 8007ef6:	bf00      	nop
 8007ef8:	e7fd      	b.n	8007ef6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007efa:	f000 f949 	bl	8008190 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007efe:	2100      	movs	r1, #0
 8007f00:	6878      	ldr	r0, [r7, #4]
 8007f02:	f000 febb 	bl	8008c7c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007f06:	f000 f951 	bl	80081ac <xTaskResumeAll>
 8007f0a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d107      	bne.n	8007f22 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8007f12:	4b07      	ldr	r3, [pc, #28]	@ (8007f30 <vTaskDelay+0x68>)
 8007f14:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007f18:	601a      	str	r2, [r3, #0]
 8007f1a:	f3bf 8f4f 	dsb	sy
 8007f1e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007f22:	bf00      	nop
 8007f24:	3710      	adds	r7, #16
 8007f26:	46bd      	mov	sp, r7
 8007f28:	bd80      	pop	{r7, pc}
 8007f2a:	bf00      	nop
 8007f2c:	200005e0 	.word	0x200005e0
 8007f30:	e000ed04 	.word	0xe000ed04

08007f34 <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	UBaseType_t uxTaskPriorityGet( const TaskHandle_t xTask )
	{
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b084      	sub	sp, #16
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
	TCB_t const *pxTCB;
	UBaseType_t uxReturn;

		taskENTER_CRITICAL();
 8007f3c:	f001 f834 	bl	8008fa8 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the task
			that called uxTaskPriorityGet() that is being queried. */
			pxTCB = prvGetTCBFromHandle( xTask );
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d102      	bne.n	8007f4c <uxTaskPriorityGet+0x18>
 8007f46:	4b07      	ldr	r3, [pc, #28]	@ (8007f64 <uxTaskPriorityGet+0x30>)
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	e000      	b.n	8007f4e <uxTaskPriorityGet+0x1a>
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	60fb      	str	r3, [r7, #12]
			uxReturn = pxTCB->uxPriority;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f54:	60bb      	str	r3, [r7, #8]
		}
		taskEXIT_CRITICAL();
 8007f56:	f001 f859 	bl	800900c <vPortExitCritical>

		return uxReturn;
 8007f5a:	68bb      	ldr	r3, [r7, #8]
	}
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	3710      	adds	r7, #16
 8007f60:	46bd      	mov	sp, r7
 8007f62:	bd80      	pop	{r7, pc}
 8007f64:	200004b8 	.word	0x200004b8

08007f68 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b088      	sub	sp, #32
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
 8007f70:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
 8007f72:	2300      	movs	r3, #0
 8007f74:	61fb      	str	r3, [r7, #28]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	2b06      	cmp	r3, #6
 8007f7a:	d90b      	bls.n	8007f94 <vTaskPrioritySet+0x2c>
	__asm volatile
 8007f7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f80:	f383 8811 	msr	BASEPRI, r3
 8007f84:	f3bf 8f6f 	isb	sy
 8007f88:	f3bf 8f4f 	dsb	sy
 8007f8c:	60fb      	str	r3, [r7, #12]
}
 8007f8e:	bf00      	nop
 8007f90:	bf00      	nop
 8007f92:	e7fd      	b.n	8007f90 <vTaskPrioritySet+0x28>

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007f94:	683b      	ldr	r3, [r7, #0]
 8007f96:	2b06      	cmp	r3, #6
 8007f98:	d901      	bls.n	8007f9e <vTaskPrioritySet+0x36>
		{
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007f9a:	2306      	movs	r3, #6
 8007f9c:	603b      	str	r3, [r7, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
 8007f9e:	f001 f803 	bl	8008fa8 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d102      	bne.n	8007fae <vTaskPrioritySet+0x46>
 8007fa8:	4b40      	ldr	r3, [pc, #256]	@ (80080ac <vTaskPrioritySet+0x144>)
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	e000      	b.n	8007fb0 <vTaskPrioritySet+0x48>
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	61bb      	str	r3, [r7, #24]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 8007fb2:	69bb      	ldr	r3, [r7, #24]
 8007fb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007fb6:	617b      	str	r3, [r7, #20]
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
 8007fb8:	697a      	ldr	r2, [r7, #20]
 8007fba:	683b      	ldr	r3, [r7, #0]
 8007fbc:	429a      	cmp	r2, r3
 8007fbe:	d06f      	beq.n	80080a0 <vTaskPrioritySet+0x138>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
 8007fc0:	683a      	ldr	r2, [r7, #0]
 8007fc2:	697b      	ldr	r3, [r7, #20]
 8007fc4:	429a      	cmp	r2, r3
 8007fc6:	d90d      	bls.n	8007fe4 <vTaskPrioritySet+0x7c>
				{
					if( pxTCB != pxCurrentTCB )
 8007fc8:	4b38      	ldr	r3, [pc, #224]	@ (80080ac <vTaskPrioritySet+0x144>)
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	69ba      	ldr	r2, [r7, #24]
 8007fce:	429a      	cmp	r2, r3
 8007fd0:	d00f      	beq.n	8007ff2 <vTaskPrioritySet+0x8a>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 8007fd2:	4b36      	ldr	r3, [pc, #216]	@ (80080ac <vTaskPrioritySet+0x144>)
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fd8:	683a      	ldr	r2, [r7, #0]
 8007fda:	429a      	cmp	r2, r3
 8007fdc:	d309      	bcc.n	8007ff2 <vTaskPrioritySet+0x8a>
						{
							xYieldRequired = pdTRUE;
 8007fde:	2301      	movs	r3, #1
 8007fe0:	61fb      	str	r3, [r7, #28]
 8007fe2:	e006      	b.n	8007ff2 <vTaskPrioritySet+0x8a>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
 8007fe4:	4b31      	ldr	r3, [pc, #196]	@ (80080ac <vTaskPrioritySet+0x144>)
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	69ba      	ldr	r2, [r7, #24]
 8007fea:	429a      	cmp	r2, r3
 8007fec:	d101      	bne.n	8007ff2 <vTaskPrioritySet+0x8a>
				{
					/* Setting the priority of the running task down means
					there may now be another task of higher priority that
					is ready to execute. */
					xYieldRequired = pdTRUE;
 8007fee:	2301      	movs	r3, #1
 8007ff0:	61fb      	str	r3, [r7, #28]
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007ff2:	69bb      	ldr	r3, [r7, #24]
 8007ff4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ff6:	613b      	str	r3, [r7, #16]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 8007ff8:	69bb      	ldr	r3, [r7, #24]
 8007ffa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007ffc:	69bb      	ldr	r3, [r7, #24]
 8007ffe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008000:	429a      	cmp	r2, r3
 8008002:	d102      	bne.n	800800a <vTaskPrioritySet+0xa2>
					{
						pxTCB->uxPriority = uxNewPriority;
 8008004:	69bb      	ldr	r3, [r7, #24]
 8008006:	683a      	ldr	r2, [r7, #0]
 8008008:	62da      	str	r2, [r3, #44]	@ 0x2c
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
 800800a:	69bb      	ldr	r3, [r7, #24]
 800800c:	683a      	ldr	r2, [r7, #0]
 800800e:	645a      	str	r2, [r3, #68]	@ 0x44
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008010:	69bb      	ldr	r3, [r7, #24]
 8008012:	699b      	ldr	r3, [r3, #24]
 8008014:	2b00      	cmp	r3, #0
 8008016:	db04      	blt.n	8008022 <vTaskPrioritySet+0xba>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008018:	683b      	ldr	r3, [r7, #0]
 800801a:	f1c3 0207 	rsb	r2, r3, #7
 800801e:	69bb      	ldr	r3, [r7, #24]
 8008020:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change its priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008022:	69bb      	ldr	r3, [r7, #24]
 8008024:	6959      	ldr	r1, [r3, #20]
 8008026:	693a      	ldr	r2, [r7, #16]
 8008028:	4613      	mov	r3, r2
 800802a:	009b      	lsls	r3, r3, #2
 800802c:	4413      	add	r3, r2
 800802e:	009b      	lsls	r3, r3, #2
 8008030:	4a1f      	ldr	r2, [pc, #124]	@ (80080b0 <vTaskPrioritySet+0x148>)
 8008032:	4413      	add	r3, r2
 8008034:	4299      	cmp	r1, r3
 8008036:	d128      	bne.n	800808a <vTaskPrioritySet+0x122>
				{
					/* The task is currently in its ready list - remove before
					adding it to it's new ready list.  As we are in a critical
					section we can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008038:	69bb      	ldr	r3, [r7, #24]
 800803a:	3304      	adds	r3, #4
 800803c:	4618      	mov	r0, r3
 800803e:	f7ff f901 	bl	8007244 <uxListRemove>
 8008042:	4603      	mov	r3, r0
 8008044:	2b00      	cmp	r3, #0
 8008046:	d109      	bne.n	800805c <vTaskPrioritySet+0xf4>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
 8008048:	2201      	movs	r2, #1
 800804a:	693b      	ldr	r3, [r7, #16]
 800804c:	fa02 f303 	lsl.w	r3, r2, r3
 8008050:	43da      	mvns	r2, r3
 8008052:	4b18      	ldr	r3, [pc, #96]	@ (80080b4 <vTaskPrioritySet+0x14c>)
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	4013      	ands	r3, r2
 8008058:	4a16      	ldr	r2, [pc, #88]	@ (80080b4 <vTaskPrioritySet+0x14c>)
 800805a:	6013      	str	r3, [r2, #0]
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
 800805c:	69bb      	ldr	r3, [r7, #24]
 800805e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008060:	2201      	movs	r2, #1
 8008062:	409a      	lsls	r2, r3
 8008064:	4b13      	ldr	r3, [pc, #76]	@ (80080b4 <vTaskPrioritySet+0x14c>)
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	4313      	orrs	r3, r2
 800806a:	4a12      	ldr	r2, [pc, #72]	@ (80080b4 <vTaskPrioritySet+0x14c>)
 800806c:	6013      	str	r3, [r2, #0]
 800806e:	69bb      	ldr	r3, [r7, #24]
 8008070:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008072:	4613      	mov	r3, r2
 8008074:	009b      	lsls	r3, r3, #2
 8008076:	4413      	add	r3, r2
 8008078:	009b      	lsls	r3, r3, #2
 800807a:	4a0d      	ldr	r2, [pc, #52]	@ (80080b0 <vTaskPrioritySet+0x148>)
 800807c:	441a      	add	r2, r3
 800807e:	69bb      	ldr	r3, [r7, #24]
 8008080:	3304      	adds	r3, #4
 8008082:	4619      	mov	r1, r3
 8008084:	4610      	mov	r0, r2
 8008086:	f7ff f880 	bl	800718a <vListInsertEnd>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired != pdFALSE )
 800808a:	69fb      	ldr	r3, [r7, #28]
 800808c:	2b00      	cmp	r3, #0
 800808e:	d007      	beq.n	80080a0 <vTaskPrioritySet+0x138>
				{
					taskYIELD_IF_USING_PREEMPTION();
 8008090:	4b09      	ldr	r3, [pc, #36]	@ (80080b8 <vTaskPrioritySet+0x150>)
 8008092:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008096:	601a      	str	r2, [r3, #0]
 8008098:	f3bf 8f4f 	dsb	sy
 800809c:	f3bf 8f6f 	isb	sy
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
 80080a0:	f000 ffb4 	bl	800900c <vPortExitCritical>
	}
 80080a4:	bf00      	nop
 80080a6:	3720      	adds	r7, #32
 80080a8:	46bd      	mov	sp, r7
 80080aa:	bd80      	pop	{r7, pc}
 80080ac:	200004b8 	.word	0x200004b8
 80080b0:	200004bc 	.word	0x200004bc
 80080b4:	200005c0 	.word	0x200005c0
 80080b8:	e000ed04 	.word	0xe000ed04

080080bc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80080bc:	b580      	push	{r7, lr}
 80080be:	b08a      	sub	sp, #40	@ 0x28
 80080c0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80080c2:	2300      	movs	r3, #0
 80080c4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80080c6:	2300      	movs	r3, #0
 80080c8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80080ca:	463a      	mov	r2, r7
 80080cc:	1d39      	adds	r1, r7, #4
 80080ce:	f107 0308 	add.w	r3, r7, #8
 80080d2:	4618      	mov	r0, r3
 80080d4:	f7f8 f9fc 	bl	80004d0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80080d8:	6839      	ldr	r1, [r7, #0]
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	68ba      	ldr	r2, [r7, #8]
 80080de:	9202      	str	r2, [sp, #8]
 80080e0:	9301      	str	r3, [sp, #4]
 80080e2:	2300      	movs	r3, #0
 80080e4:	9300      	str	r3, [sp, #0]
 80080e6:	2300      	movs	r3, #0
 80080e8:	460a      	mov	r2, r1
 80080ea:	4921      	ldr	r1, [pc, #132]	@ (8008170 <vTaskStartScheduler+0xb4>)
 80080ec:	4821      	ldr	r0, [pc, #132]	@ (8008174 <vTaskStartScheduler+0xb8>)
 80080ee:	f7ff fcab 	bl	8007a48 <xTaskCreateStatic>
 80080f2:	4603      	mov	r3, r0
 80080f4:	4a20      	ldr	r2, [pc, #128]	@ (8008178 <vTaskStartScheduler+0xbc>)
 80080f6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80080f8:	4b1f      	ldr	r3, [pc, #124]	@ (8008178 <vTaskStartScheduler+0xbc>)
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d002      	beq.n	8008106 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008100:	2301      	movs	r3, #1
 8008102:	617b      	str	r3, [r7, #20]
 8008104:	e001      	b.n	800810a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008106:	2300      	movs	r3, #0
 8008108:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800810a:	697b      	ldr	r3, [r7, #20]
 800810c:	2b01      	cmp	r3, #1
 800810e:	d11b      	bne.n	8008148 <vTaskStartScheduler+0x8c>
	__asm volatile
 8008110:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008114:	f383 8811 	msr	BASEPRI, r3
 8008118:	f3bf 8f6f 	isb	sy
 800811c:	f3bf 8f4f 	dsb	sy
 8008120:	613b      	str	r3, [r7, #16]
}
 8008122:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008124:	4b15      	ldr	r3, [pc, #84]	@ (800817c <vTaskStartScheduler+0xc0>)
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	334c      	adds	r3, #76	@ 0x4c
 800812a:	4a15      	ldr	r2, [pc, #84]	@ (8008180 <vTaskStartScheduler+0xc4>)
 800812c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800812e:	4b15      	ldr	r3, [pc, #84]	@ (8008184 <vTaskStartScheduler+0xc8>)
 8008130:	f04f 32ff 	mov.w	r2, #4294967295
 8008134:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008136:	4b14      	ldr	r3, [pc, #80]	@ (8008188 <vTaskStartScheduler+0xcc>)
 8008138:	2201      	movs	r2, #1
 800813a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800813c:	4b13      	ldr	r3, [pc, #76]	@ (800818c <vTaskStartScheduler+0xd0>)
 800813e:	2200      	movs	r2, #0
 8008140:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008142:	f000 fe8d 	bl	8008e60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008146:	e00f      	b.n	8008168 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008148:	697b      	ldr	r3, [r7, #20]
 800814a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800814e:	d10b      	bne.n	8008168 <vTaskStartScheduler+0xac>
	__asm volatile
 8008150:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008154:	f383 8811 	msr	BASEPRI, r3
 8008158:	f3bf 8f6f 	isb	sy
 800815c:	f3bf 8f4f 	dsb	sy
 8008160:	60fb      	str	r3, [r7, #12]
}
 8008162:	bf00      	nop
 8008164:	bf00      	nop
 8008166:	e7fd      	b.n	8008164 <vTaskStartScheduler+0xa8>
}
 8008168:	bf00      	nop
 800816a:	3718      	adds	r7, #24
 800816c:	46bd      	mov	sp, r7
 800816e:	bd80      	pop	{r7, pc}
 8008170:	0800a1d4 	.word	0x0800a1d4
 8008174:	08008745 	.word	0x08008745
 8008178:	200005dc 	.word	0x200005dc
 800817c:	200004b8 	.word	0x200004b8
 8008180:	20000100 	.word	0x20000100
 8008184:	200005d8 	.word	0x200005d8
 8008188:	200005c4 	.word	0x200005c4
 800818c:	200005bc 	.word	0x200005bc

08008190 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008190:	b480      	push	{r7}
 8008192:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008194:	4b04      	ldr	r3, [pc, #16]	@ (80081a8 <vTaskSuspendAll+0x18>)
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	3301      	adds	r3, #1
 800819a:	4a03      	ldr	r2, [pc, #12]	@ (80081a8 <vTaskSuspendAll+0x18>)
 800819c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800819e:	bf00      	nop
 80081a0:	46bd      	mov	sp, r7
 80081a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a6:	4770      	bx	lr
 80081a8:	200005e0 	.word	0x200005e0

080081ac <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b084      	sub	sp, #16
 80081b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80081b2:	2300      	movs	r3, #0
 80081b4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80081b6:	2300      	movs	r3, #0
 80081b8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80081ba:	4b42      	ldr	r3, [pc, #264]	@ (80082c4 <xTaskResumeAll+0x118>)
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d10b      	bne.n	80081da <xTaskResumeAll+0x2e>
	__asm volatile
 80081c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081c6:	f383 8811 	msr	BASEPRI, r3
 80081ca:	f3bf 8f6f 	isb	sy
 80081ce:	f3bf 8f4f 	dsb	sy
 80081d2:	603b      	str	r3, [r7, #0]
}
 80081d4:	bf00      	nop
 80081d6:	bf00      	nop
 80081d8:	e7fd      	b.n	80081d6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80081da:	f000 fee5 	bl	8008fa8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80081de:	4b39      	ldr	r3, [pc, #228]	@ (80082c4 <xTaskResumeAll+0x118>)
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	3b01      	subs	r3, #1
 80081e4:	4a37      	ldr	r2, [pc, #220]	@ (80082c4 <xTaskResumeAll+0x118>)
 80081e6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80081e8:	4b36      	ldr	r3, [pc, #216]	@ (80082c4 <xTaskResumeAll+0x118>)
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d161      	bne.n	80082b4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80081f0:	4b35      	ldr	r3, [pc, #212]	@ (80082c8 <xTaskResumeAll+0x11c>)
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d05d      	beq.n	80082b4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80081f8:	e02e      	b.n	8008258 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80081fa:	4b34      	ldr	r3, [pc, #208]	@ (80082cc <xTaskResumeAll+0x120>)
 80081fc:	68db      	ldr	r3, [r3, #12]
 80081fe:	68db      	ldr	r3, [r3, #12]
 8008200:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	3318      	adds	r3, #24
 8008206:	4618      	mov	r0, r3
 8008208:	f7ff f81c 	bl	8007244 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	3304      	adds	r3, #4
 8008210:	4618      	mov	r0, r3
 8008212:	f7ff f817 	bl	8007244 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800821a:	2201      	movs	r2, #1
 800821c:	409a      	lsls	r2, r3
 800821e:	4b2c      	ldr	r3, [pc, #176]	@ (80082d0 <xTaskResumeAll+0x124>)
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	4313      	orrs	r3, r2
 8008224:	4a2a      	ldr	r2, [pc, #168]	@ (80082d0 <xTaskResumeAll+0x124>)
 8008226:	6013      	str	r3, [r2, #0]
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800822c:	4613      	mov	r3, r2
 800822e:	009b      	lsls	r3, r3, #2
 8008230:	4413      	add	r3, r2
 8008232:	009b      	lsls	r3, r3, #2
 8008234:	4a27      	ldr	r2, [pc, #156]	@ (80082d4 <xTaskResumeAll+0x128>)
 8008236:	441a      	add	r2, r3
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	3304      	adds	r3, #4
 800823c:	4619      	mov	r1, r3
 800823e:	4610      	mov	r0, r2
 8008240:	f7fe ffa3 	bl	800718a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008248:	4b23      	ldr	r3, [pc, #140]	@ (80082d8 <xTaskResumeAll+0x12c>)
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800824e:	429a      	cmp	r2, r3
 8008250:	d302      	bcc.n	8008258 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8008252:	4b22      	ldr	r3, [pc, #136]	@ (80082dc <xTaskResumeAll+0x130>)
 8008254:	2201      	movs	r2, #1
 8008256:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008258:	4b1c      	ldr	r3, [pc, #112]	@ (80082cc <xTaskResumeAll+0x120>)
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	2b00      	cmp	r3, #0
 800825e:	d1cc      	bne.n	80081fa <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d001      	beq.n	800826a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008266:	f000 fb29 	bl	80088bc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800826a:	4b1d      	ldr	r3, [pc, #116]	@ (80082e0 <xTaskResumeAll+0x134>)
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d010      	beq.n	8008298 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008276:	f000 f837 	bl	80082e8 <xTaskIncrementTick>
 800827a:	4603      	mov	r3, r0
 800827c:	2b00      	cmp	r3, #0
 800827e:	d002      	beq.n	8008286 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008280:	4b16      	ldr	r3, [pc, #88]	@ (80082dc <xTaskResumeAll+0x130>)
 8008282:	2201      	movs	r2, #1
 8008284:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	3b01      	subs	r3, #1
 800828a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d1f1      	bne.n	8008276 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8008292:	4b13      	ldr	r3, [pc, #76]	@ (80082e0 <xTaskResumeAll+0x134>)
 8008294:	2200      	movs	r2, #0
 8008296:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008298:	4b10      	ldr	r3, [pc, #64]	@ (80082dc <xTaskResumeAll+0x130>)
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	2b00      	cmp	r3, #0
 800829e:	d009      	beq.n	80082b4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80082a0:	2301      	movs	r3, #1
 80082a2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80082a4:	4b0f      	ldr	r3, [pc, #60]	@ (80082e4 <xTaskResumeAll+0x138>)
 80082a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80082aa:	601a      	str	r2, [r3, #0]
 80082ac:	f3bf 8f4f 	dsb	sy
 80082b0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80082b4:	f000 feaa 	bl	800900c <vPortExitCritical>

	return xAlreadyYielded;
 80082b8:	68bb      	ldr	r3, [r7, #8]
}
 80082ba:	4618      	mov	r0, r3
 80082bc:	3710      	adds	r7, #16
 80082be:	46bd      	mov	sp, r7
 80082c0:	bd80      	pop	{r7, pc}
 80082c2:	bf00      	nop
 80082c4:	200005e0 	.word	0x200005e0
 80082c8:	200005b8 	.word	0x200005b8
 80082cc:	20000578 	.word	0x20000578
 80082d0:	200005c0 	.word	0x200005c0
 80082d4:	200004bc 	.word	0x200004bc
 80082d8:	200004b8 	.word	0x200004b8
 80082dc:	200005cc 	.word	0x200005cc
 80082e0:	200005c8 	.word	0x200005c8
 80082e4:	e000ed04 	.word	0xe000ed04

080082e8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b086      	sub	sp, #24
 80082ec:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80082ee:	2300      	movs	r3, #0
 80082f0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80082f2:	4b4f      	ldr	r3, [pc, #316]	@ (8008430 <xTaskIncrementTick+0x148>)
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	f040 808f 	bne.w	800841a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80082fc:	4b4d      	ldr	r3, [pc, #308]	@ (8008434 <xTaskIncrementTick+0x14c>)
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	3301      	adds	r3, #1
 8008302:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008304:	4a4b      	ldr	r2, [pc, #300]	@ (8008434 <xTaskIncrementTick+0x14c>)
 8008306:	693b      	ldr	r3, [r7, #16]
 8008308:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800830a:	693b      	ldr	r3, [r7, #16]
 800830c:	2b00      	cmp	r3, #0
 800830e:	d121      	bne.n	8008354 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8008310:	4b49      	ldr	r3, [pc, #292]	@ (8008438 <xTaskIncrementTick+0x150>)
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	2b00      	cmp	r3, #0
 8008318:	d00b      	beq.n	8008332 <xTaskIncrementTick+0x4a>
	__asm volatile
 800831a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800831e:	f383 8811 	msr	BASEPRI, r3
 8008322:	f3bf 8f6f 	isb	sy
 8008326:	f3bf 8f4f 	dsb	sy
 800832a:	603b      	str	r3, [r7, #0]
}
 800832c:	bf00      	nop
 800832e:	bf00      	nop
 8008330:	e7fd      	b.n	800832e <xTaskIncrementTick+0x46>
 8008332:	4b41      	ldr	r3, [pc, #260]	@ (8008438 <xTaskIncrementTick+0x150>)
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	60fb      	str	r3, [r7, #12]
 8008338:	4b40      	ldr	r3, [pc, #256]	@ (800843c <xTaskIncrementTick+0x154>)
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	4a3e      	ldr	r2, [pc, #248]	@ (8008438 <xTaskIncrementTick+0x150>)
 800833e:	6013      	str	r3, [r2, #0]
 8008340:	4a3e      	ldr	r2, [pc, #248]	@ (800843c <xTaskIncrementTick+0x154>)
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	6013      	str	r3, [r2, #0]
 8008346:	4b3e      	ldr	r3, [pc, #248]	@ (8008440 <xTaskIncrementTick+0x158>)
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	3301      	adds	r3, #1
 800834c:	4a3c      	ldr	r2, [pc, #240]	@ (8008440 <xTaskIncrementTick+0x158>)
 800834e:	6013      	str	r3, [r2, #0]
 8008350:	f000 fab4 	bl	80088bc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008354:	4b3b      	ldr	r3, [pc, #236]	@ (8008444 <xTaskIncrementTick+0x15c>)
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	693a      	ldr	r2, [r7, #16]
 800835a:	429a      	cmp	r2, r3
 800835c:	d348      	bcc.n	80083f0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800835e:	4b36      	ldr	r3, [pc, #216]	@ (8008438 <xTaskIncrementTick+0x150>)
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d104      	bne.n	8008372 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008368:	4b36      	ldr	r3, [pc, #216]	@ (8008444 <xTaskIncrementTick+0x15c>)
 800836a:	f04f 32ff 	mov.w	r2, #4294967295
 800836e:	601a      	str	r2, [r3, #0]
					break;
 8008370:	e03e      	b.n	80083f0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008372:	4b31      	ldr	r3, [pc, #196]	@ (8008438 <xTaskIncrementTick+0x150>)
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	68db      	ldr	r3, [r3, #12]
 8008378:	68db      	ldr	r3, [r3, #12]
 800837a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800837c:	68bb      	ldr	r3, [r7, #8]
 800837e:	685b      	ldr	r3, [r3, #4]
 8008380:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008382:	693a      	ldr	r2, [r7, #16]
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	429a      	cmp	r2, r3
 8008388:	d203      	bcs.n	8008392 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800838a:	4a2e      	ldr	r2, [pc, #184]	@ (8008444 <xTaskIncrementTick+0x15c>)
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008390:	e02e      	b.n	80083f0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008392:	68bb      	ldr	r3, [r7, #8]
 8008394:	3304      	adds	r3, #4
 8008396:	4618      	mov	r0, r3
 8008398:	f7fe ff54 	bl	8007244 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800839c:	68bb      	ldr	r3, [r7, #8]
 800839e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d004      	beq.n	80083ae <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80083a4:	68bb      	ldr	r3, [r7, #8]
 80083a6:	3318      	adds	r3, #24
 80083a8:	4618      	mov	r0, r3
 80083aa:	f7fe ff4b 	bl	8007244 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80083ae:	68bb      	ldr	r3, [r7, #8]
 80083b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083b2:	2201      	movs	r2, #1
 80083b4:	409a      	lsls	r2, r3
 80083b6:	4b24      	ldr	r3, [pc, #144]	@ (8008448 <xTaskIncrementTick+0x160>)
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	4313      	orrs	r3, r2
 80083bc:	4a22      	ldr	r2, [pc, #136]	@ (8008448 <xTaskIncrementTick+0x160>)
 80083be:	6013      	str	r3, [r2, #0]
 80083c0:	68bb      	ldr	r3, [r7, #8]
 80083c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80083c4:	4613      	mov	r3, r2
 80083c6:	009b      	lsls	r3, r3, #2
 80083c8:	4413      	add	r3, r2
 80083ca:	009b      	lsls	r3, r3, #2
 80083cc:	4a1f      	ldr	r2, [pc, #124]	@ (800844c <xTaskIncrementTick+0x164>)
 80083ce:	441a      	add	r2, r3
 80083d0:	68bb      	ldr	r3, [r7, #8]
 80083d2:	3304      	adds	r3, #4
 80083d4:	4619      	mov	r1, r3
 80083d6:	4610      	mov	r0, r2
 80083d8:	f7fe fed7 	bl	800718a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80083dc:	68bb      	ldr	r3, [r7, #8]
 80083de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80083e0:	4b1b      	ldr	r3, [pc, #108]	@ (8008450 <xTaskIncrementTick+0x168>)
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083e6:	429a      	cmp	r2, r3
 80083e8:	d3b9      	bcc.n	800835e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80083ea:	2301      	movs	r3, #1
 80083ec:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80083ee:	e7b6      	b.n	800835e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80083f0:	4b17      	ldr	r3, [pc, #92]	@ (8008450 <xTaskIncrementTick+0x168>)
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80083f6:	4915      	ldr	r1, [pc, #84]	@ (800844c <xTaskIncrementTick+0x164>)
 80083f8:	4613      	mov	r3, r2
 80083fa:	009b      	lsls	r3, r3, #2
 80083fc:	4413      	add	r3, r2
 80083fe:	009b      	lsls	r3, r3, #2
 8008400:	440b      	add	r3, r1
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	2b01      	cmp	r3, #1
 8008406:	d901      	bls.n	800840c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8008408:	2301      	movs	r3, #1
 800840a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800840c:	4b11      	ldr	r3, [pc, #68]	@ (8008454 <xTaskIncrementTick+0x16c>)
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	2b00      	cmp	r3, #0
 8008412:	d007      	beq.n	8008424 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8008414:	2301      	movs	r3, #1
 8008416:	617b      	str	r3, [r7, #20]
 8008418:	e004      	b.n	8008424 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800841a:	4b0f      	ldr	r3, [pc, #60]	@ (8008458 <xTaskIncrementTick+0x170>)
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	3301      	adds	r3, #1
 8008420:	4a0d      	ldr	r2, [pc, #52]	@ (8008458 <xTaskIncrementTick+0x170>)
 8008422:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008424:	697b      	ldr	r3, [r7, #20]
}
 8008426:	4618      	mov	r0, r3
 8008428:	3718      	adds	r7, #24
 800842a:	46bd      	mov	sp, r7
 800842c:	bd80      	pop	{r7, pc}
 800842e:	bf00      	nop
 8008430:	200005e0 	.word	0x200005e0
 8008434:	200005bc 	.word	0x200005bc
 8008438:	20000570 	.word	0x20000570
 800843c:	20000574 	.word	0x20000574
 8008440:	200005d0 	.word	0x200005d0
 8008444:	200005d8 	.word	0x200005d8
 8008448:	200005c0 	.word	0x200005c0
 800844c:	200004bc 	.word	0x200004bc
 8008450:	200004b8 	.word	0x200004b8
 8008454:	200005cc 	.word	0x200005cc
 8008458:	200005c8 	.word	0x200005c8

0800845c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800845c:	b480      	push	{r7}
 800845e:	b087      	sub	sp, #28
 8008460:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008462:	4b2a      	ldr	r3, [pc, #168]	@ (800850c <vTaskSwitchContext+0xb0>)
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d003      	beq.n	8008472 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800846a:	4b29      	ldr	r3, [pc, #164]	@ (8008510 <vTaskSwitchContext+0xb4>)
 800846c:	2201      	movs	r2, #1
 800846e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008470:	e045      	b.n	80084fe <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8008472:	4b27      	ldr	r3, [pc, #156]	@ (8008510 <vTaskSwitchContext+0xb4>)
 8008474:	2200      	movs	r2, #0
 8008476:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008478:	4b26      	ldr	r3, [pc, #152]	@ (8008514 <vTaskSwitchContext+0xb8>)
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	fab3 f383 	clz	r3, r3
 8008484:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8008486:	7afb      	ldrb	r3, [r7, #11]
 8008488:	f1c3 031f 	rsb	r3, r3, #31
 800848c:	617b      	str	r3, [r7, #20]
 800848e:	4922      	ldr	r1, [pc, #136]	@ (8008518 <vTaskSwitchContext+0xbc>)
 8008490:	697a      	ldr	r2, [r7, #20]
 8008492:	4613      	mov	r3, r2
 8008494:	009b      	lsls	r3, r3, #2
 8008496:	4413      	add	r3, r2
 8008498:	009b      	lsls	r3, r3, #2
 800849a:	440b      	add	r3, r1
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d10b      	bne.n	80084ba <vTaskSwitchContext+0x5e>
	__asm volatile
 80084a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084a6:	f383 8811 	msr	BASEPRI, r3
 80084aa:	f3bf 8f6f 	isb	sy
 80084ae:	f3bf 8f4f 	dsb	sy
 80084b2:	607b      	str	r3, [r7, #4]
}
 80084b4:	bf00      	nop
 80084b6:	bf00      	nop
 80084b8:	e7fd      	b.n	80084b6 <vTaskSwitchContext+0x5a>
 80084ba:	697a      	ldr	r2, [r7, #20]
 80084bc:	4613      	mov	r3, r2
 80084be:	009b      	lsls	r3, r3, #2
 80084c0:	4413      	add	r3, r2
 80084c2:	009b      	lsls	r3, r3, #2
 80084c4:	4a14      	ldr	r2, [pc, #80]	@ (8008518 <vTaskSwitchContext+0xbc>)
 80084c6:	4413      	add	r3, r2
 80084c8:	613b      	str	r3, [r7, #16]
 80084ca:	693b      	ldr	r3, [r7, #16]
 80084cc:	685b      	ldr	r3, [r3, #4]
 80084ce:	685a      	ldr	r2, [r3, #4]
 80084d0:	693b      	ldr	r3, [r7, #16]
 80084d2:	605a      	str	r2, [r3, #4]
 80084d4:	693b      	ldr	r3, [r7, #16]
 80084d6:	685a      	ldr	r2, [r3, #4]
 80084d8:	693b      	ldr	r3, [r7, #16]
 80084da:	3308      	adds	r3, #8
 80084dc:	429a      	cmp	r2, r3
 80084de:	d104      	bne.n	80084ea <vTaskSwitchContext+0x8e>
 80084e0:	693b      	ldr	r3, [r7, #16]
 80084e2:	685b      	ldr	r3, [r3, #4]
 80084e4:	685a      	ldr	r2, [r3, #4]
 80084e6:	693b      	ldr	r3, [r7, #16]
 80084e8:	605a      	str	r2, [r3, #4]
 80084ea:	693b      	ldr	r3, [r7, #16]
 80084ec:	685b      	ldr	r3, [r3, #4]
 80084ee:	68db      	ldr	r3, [r3, #12]
 80084f0:	4a0a      	ldr	r2, [pc, #40]	@ (800851c <vTaskSwitchContext+0xc0>)
 80084f2:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80084f4:	4b09      	ldr	r3, [pc, #36]	@ (800851c <vTaskSwitchContext+0xc0>)
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	334c      	adds	r3, #76	@ 0x4c
 80084fa:	4a09      	ldr	r2, [pc, #36]	@ (8008520 <vTaskSwitchContext+0xc4>)
 80084fc:	6013      	str	r3, [r2, #0]
}
 80084fe:	bf00      	nop
 8008500:	371c      	adds	r7, #28
 8008502:	46bd      	mov	sp, r7
 8008504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008508:	4770      	bx	lr
 800850a:	bf00      	nop
 800850c:	200005e0 	.word	0x200005e0
 8008510:	200005cc 	.word	0x200005cc
 8008514:	200005c0 	.word	0x200005c0
 8008518:	200004bc 	.word	0x200004bc
 800851c:	200004b8 	.word	0x200004b8
 8008520:	20000100 	.word	0x20000100

08008524 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008524:	b580      	push	{r7, lr}
 8008526:	b084      	sub	sp, #16
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
 800852c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d10b      	bne.n	800854c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8008534:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008538:	f383 8811 	msr	BASEPRI, r3
 800853c:	f3bf 8f6f 	isb	sy
 8008540:	f3bf 8f4f 	dsb	sy
 8008544:	60fb      	str	r3, [r7, #12]
}
 8008546:	bf00      	nop
 8008548:	bf00      	nop
 800854a:	e7fd      	b.n	8008548 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800854c:	4b07      	ldr	r3, [pc, #28]	@ (800856c <vTaskPlaceOnEventList+0x48>)
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	3318      	adds	r3, #24
 8008552:	4619      	mov	r1, r3
 8008554:	6878      	ldr	r0, [r7, #4]
 8008556:	f7fe fe3c 	bl	80071d2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800855a:	2101      	movs	r1, #1
 800855c:	6838      	ldr	r0, [r7, #0]
 800855e:	f000 fb8d 	bl	8008c7c <prvAddCurrentTaskToDelayedList>
}
 8008562:	bf00      	nop
 8008564:	3710      	adds	r7, #16
 8008566:	46bd      	mov	sp, r7
 8008568:	bd80      	pop	{r7, pc}
 800856a:	bf00      	nop
 800856c:	200004b8 	.word	0x200004b8

08008570 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008570:	b580      	push	{r7, lr}
 8008572:	b086      	sub	sp, #24
 8008574:	af00      	add	r7, sp, #0
 8008576:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	68db      	ldr	r3, [r3, #12]
 800857c:	68db      	ldr	r3, [r3, #12]
 800857e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008580:	693b      	ldr	r3, [r7, #16]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d10b      	bne.n	800859e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8008586:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800858a:	f383 8811 	msr	BASEPRI, r3
 800858e:	f3bf 8f6f 	isb	sy
 8008592:	f3bf 8f4f 	dsb	sy
 8008596:	60fb      	str	r3, [r7, #12]
}
 8008598:	bf00      	nop
 800859a:	bf00      	nop
 800859c:	e7fd      	b.n	800859a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800859e:	693b      	ldr	r3, [r7, #16]
 80085a0:	3318      	adds	r3, #24
 80085a2:	4618      	mov	r0, r3
 80085a4:	f7fe fe4e 	bl	8007244 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80085a8:	4b1d      	ldr	r3, [pc, #116]	@ (8008620 <xTaskRemoveFromEventList+0xb0>)
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d11c      	bne.n	80085ea <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80085b0:	693b      	ldr	r3, [r7, #16]
 80085b2:	3304      	adds	r3, #4
 80085b4:	4618      	mov	r0, r3
 80085b6:	f7fe fe45 	bl	8007244 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80085ba:	693b      	ldr	r3, [r7, #16]
 80085bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085be:	2201      	movs	r2, #1
 80085c0:	409a      	lsls	r2, r3
 80085c2:	4b18      	ldr	r3, [pc, #96]	@ (8008624 <xTaskRemoveFromEventList+0xb4>)
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	4313      	orrs	r3, r2
 80085c8:	4a16      	ldr	r2, [pc, #88]	@ (8008624 <xTaskRemoveFromEventList+0xb4>)
 80085ca:	6013      	str	r3, [r2, #0]
 80085cc:	693b      	ldr	r3, [r7, #16]
 80085ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80085d0:	4613      	mov	r3, r2
 80085d2:	009b      	lsls	r3, r3, #2
 80085d4:	4413      	add	r3, r2
 80085d6:	009b      	lsls	r3, r3, #2
 80085d8:	4a13      	ldr	r2, [pc, #76]	@ (8008628 <xTaskRemoveFromEventList+0xb8>)
 80085da:	441a      	add	r2, r3
 80085dc:	693b      	ldr	r3, [r7, #16]
 80085de:	3304      	adds	r3, #4
 80085e0:	4619      	mov	r1, r3
 80085e2:	4610      	mov	r0, r2
 80085e4:	f7fe fdd1 	bl	800718a <vListInsertEnd>
 80085e8:	e005      	b.n	80085f6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80085ea:	693b      	ldr	r3, [r7, #16]
 80085ec:	3318      	adds	r3, #24
 80085ee:	4619      	mov	r1, r3
 80085f0:	480e      	ldr	r0, [pc, #56]	@ (800862c <xTaskRemoveFromEventList+0xbc>)
 80085f2:	f7fe fdca 	bl	800718a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80085f6:	693b      	ldr	r3, [r7, #16]
 80085f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80085fa:	4b0d      	ldr	r3, [pc, #52]	@ (8008630 <xTaskRemoveFromEventList+0xc0>)
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008600:	429a      	cmp	r2, r3
 8008602:	d905      	bls.n	8008610 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008604:	2301      	movs	r3, #1
 8008606:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008608:	4b0a      	ldr	r3, [pc, #40]	@ (8008634 <xTaskRemoveFromEventList+0xc4>)
 800860a:	2201      	movs	r2, #1
 800860c:	601a      	str	r2, [r3, #0]
 800860e:	e001      	b.n	8008614 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008610:	2300      	movs	r3, #0
 8008612:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008614:	697b      	ldr	r3, [r7, #20]
}
 8008616:	4618      	mov	r0, r3
 8008618:	3718      	adds	r7, #24
 800861a:	46bd      	mov	sp, r7
 800861c:	bd80      	pop	{r7, pc}
 800861e:	bf00      	nop
 8008620:	200005e0 	.word	0x200005e0
 8008624:	200005c0 	.word	0x200005c0
 8008628:	200004bc 	.word	0x200004bc
 800862c:	20000578 	.word	0x20000578
 8008630:	200004b8 	.word	0x200004b8
 8008634:	200005cc 	.word	0x200005cc

08008638 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008638:	b480      	push	{r7}
 800863a:	b083      	sub	sp, #12
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008640:	4b06      	ldr	r3, [pc, #24]	@ (800865c <vTaskInternalSetTimeOutState+0x24>)
 8008642:	681a      	ldr	r2, [r3, #0]
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008648:	4b05      	ldr	r3, [pc, #20]	@ (8008660 <vTaskInternalSetTimeOutState+0x28>)
 800864a:	681a      	ldr	r2, [r3, #0]
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	605a      	str	r2, [r3, #4]
}
 8008650:	bf00      	nop
 8008652:	370c      	adds	r7, #12
 8008654:	46bd      	mov	sp, r7
 8008656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865a:	4770      	bx	lr
 800865c:	200005d0 	.word	0x200005d0
 8008660:	200005bc 	.word	0x200005bc

08008664 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008664:	b580      	push	{r7, lr}
 8008666:	b088      	sub	sp, #32
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
 800866c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	2b00      	cmp	r3, #0
 8008672:	d10b      	bne.n	800868c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8008674:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008678:	f383 8811 	msr	BASEPRI, r3
 800867c:	f3bf 8f6f 	isb	sy
 8008680:	f3bf 8f4f 	dsb	sy
 8008684:	613b      	str	r3, [r7, #16]
}
 8008686:	bf00      	nop
 8008688:	bf00      	nop
 800868a:	e7fd      	b.n	8008688 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d10b      	bne.n	80086aa <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8008692:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008696:	f383 8811 	msr	BASEPRI, r3
 800869a:	f3bf 8f6f 	isb	sy
 800869e:	f3bf 8f4f 	dsb	sy
 80086a2:	60fb      	str	r3, [r7, #12]
}
 80086a4:	bf00      	nop
 80086a6:	bf00      	nop
 80086a8:	e7fd      	b.n	80086a6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80086aa:	f000 fc7d 	bl	8008fa8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80086ae:	4b1d      	ldr	r3, [pc, #116]	@ (8008724 <xTaskCheckForTimeOut+0xc0>)
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	685b      	ldr	r3, [r3, #4]
 80086b8:	69ba      	ldr	r2, [r7, #24]
 80086ba:	1ad3      	subs	r3, r2, r3
 80086bc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80086be:	683b      	ldr	r3, [r7, #0]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086c6:	d102      	bne.n	80086ce <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80086c8:	2300      	movs	r3, #0
 80086ca:	61fb      	str	r3, [r7, #28]
 80086cc:	e023      	b.n	8008716 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681a      	ldr	r2, [r3, #0]
 80086d2:	4b15      	ldr	r3, [pc, #84]	@ (8008728 <xTaskCheckForTimeOut+0xc4>)
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	429a      	cmp	r2, r3
 80086d8:	d007      	beq.n	80086ea <xTaskCheckForTimeOut+0x86>
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	685b      	ldr	r3, [r3, #4]
 80086de:	69ba      	ldr	r2, [r7, #24]
 80086e0:	429a      	cmp	r2, r3
 80086e2:	d302      	bcc.n	80086ea <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80086e4:	2301      	movs	r3, #1
 80086e6:	61fb      	str	r3, [r7, #28]
 80086e8:	e015      	b.n	8008716 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	697a      	ldr	r2, [r7, #20]
 80086f0:	429a      	cmp	r2, r3
 80086f2:	d20b      	bcs.n	800870c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80086f4:	683b      	ldr	r3, [r7, #0]
 80086f6:	681a      	ldr	r2, [r3, #0]
 80086f8:	697b      	ldr	r3, [r7, #20]
 80086fa:	1ad2      	subs	r2, r2, r3
 80086fc:	683b      	ldr	r3, [r7, #0]
 80086fe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008700:	6878      	ldr	r0, [r7, #4]
 8008702:	f7ff ff99 	bl	8008638 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008706:	2300      	movs	r3, #0
 8008708:	61fb      	str	r3, [r7, #28]
 800870a:	e004      	b.n	8008716 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800870c:	683b      	ldr	r3, [r7, #0]
 800870e:	2200      	movs	r2, #0
 8008710:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008712:	2301      	movs	r3, #1
 8008714:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008716:	f000 fc79 	bl	800900c <vPortExitCritical>

	return xReturn;
 800871a:	69fb      	ldr	r3, [r7, #28]
}
 800871c:	4618      	mov	r0, r3
 800871e:	3720      	adds	r7, #32
 8008720:	46bd      	mov	sp, r7
 8008722:	bd80      	pop	{r7, pc}
 8008724:	200005bc 	.word	0x200005bc
 8008728:	200005d0 	.word	0x200005d0

0800872c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800872c:	b480      	push	{r7}
 800872e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008730:	4b03      	ldr	r3, [pc, #12]	@ (8008740 <vTaskMissedYield+0x14>)
 8008732:	2201      	movs	r2, #1
 8008734:	601a      	str	r2, [r3, #0]
}
 8008736:	bf00      	nop
 8008738:	46bd      	mov	sp, r7
 800873a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873e:	4770      	bx	lr
 8008740:	200005cc 	.word	0x200005cc

08008744 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008744:	b580      	push	{r7, lr}
 8008746:	b082      	sub	sp, #8
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800874c:	f000 f852 	bl	80087f4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008750:	4b06      	ldr	r3, [pc, #24]	@ (800876c <prvIdleTask+0x28>)
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	2b01      	cmp	r3, #1
 8008756:	d9f9      	bls.n	800874c <prvIdleTask+0x8>
			{
				taskYIELD();
 8008758:	4b05      	ldr	r3, [pc, #20]	@ (8008770 <prvIdleTask+0x2c>)
 800875a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800875e:	601a      	str	r2, [r3, #0]
 8008760:	f3bf 8f4f 	dsb	sy
 8008764:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008768:	e7f0      	b.n	800874c <prvIdleTask+0x8>
 800876a:	bf00      	nop
 800876c:	200004bc 	.word	0x200004bc
 8008770:	e000ed04 	.word	0xe000ed04

08008774 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008774:	b580      	push	{r7, lr}
 8008776:	b082      	sub	sp, #8
 8008778:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800877a:	2300      	movs	r3, #0
 800877c:	607b      	str	r3, [r7, #4]
 800877e:	e00c      	b.n	800879a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008780:	687a      	ldr	r2, [r7, #4]
 8008782:	4613      	mov	r3, r2
 8008784:	009b      	lsls	r3, r3, #2
 8008786:	4413      	add	r3, r2
 8008788:	009b      	lsls	r3, r3, #2
 800878a:	4a12      	ldr	r2, [pc, #72]	@ (80087d4 <prvInitialiseTaskLists+0x60>)
 800878c:	4413      	add	r3, r2
 800878e:	4618      	mov	r0, r3
 8008790:	f7fe fcce 	bl	8007130 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	3301      	adds	r3, #1
 8008798:	607b      	str	r3, [r7, #4]
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	2b06      	cmp	r3, #6
 800879e:	d9ef      	bls.n	8008780 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80087a0:	480d      	ldr	r0, [pc, #52]	@ (80087d8 <prvInitialiseTaskLists+0x64>)
 80087a2:	f7fe fcc5 	bl	8007130 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80087a6:	480d      	ldr	r0, [pc, #52]	@ (80087dc <prvInitialiseTaskLists+0x68>)
 80087a8:	f7fe fcc2 	bl	8007130 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80087ac:	480c      	ldr	r0, [pc, #48]	@ (80087e0 <prvInitialiseTaskLists+0x6c>)
 80087ae:	f7fe fcbf 	bl	8007130 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80087b2:	480c      	ldr	r0, [pc, #48]	@ (80087e4 <prvInitialiseTaskLists+0x70>)
 80087b4:	f7fe fcbc 	bl	8007130 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80087b8:	480b      	ldr	r0, [pc, #44]	@ (80087e8 <prvInitialiseTaskLists+0x74>)
 80087ba:	f7fe fcb9 	bl	8007130 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80087be:	4b0b      	ldr	r3, [pc, #44]	@ (80087ec <prvInitialiseTaskLists+0x78>)
 80087c0:	4a05      	ldr	r2, [pc, #20]	@ (80087d8 <prvInitialiseTaskLists+0x64>)
 80087c2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80087c4:	4b0a      	ldr	r3, [pc, #40]	@ (80087f0 <prvInitialiseTaskLists+0x7c>)
 80087c6:	4a05      	ldr	r2, [pc, #20]	@ (80087dc <prvInitialiseTaskLists+0x68>)
 80087c8:	601a      	str	r2, [r3, #0]
}
 80087ca:	bf00      	nop
 80087cc:	3708      	adds	r7, #8
 80087ce:	46bd      	mov	sp, r7
 80087d0:	bd80      	pop	{r7, pc}
 80087d2:	bf00      	nop
 80087d4:	200004bc 	.word	0x200004bc
 80087d8:	20000548 	.word	0x20000548
 80087dc:	2000055c 	.word	0x2000055c
 80087e0:	20000578 	.word	0x20000578
 80087e4:	2000058c 	.word	0x2000058c
 80087e8:	200005a4 	.word	0x200005a4
 80087ec:	20000570 	.word	0x20000570
 80087f0:	20000574 	.word	0x20000574

080087f4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b082      	sub	sp, #8
 80087f8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80087fa:	e019      	b.n	8008830 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80087fc:	f000 fbd4 	bl	8008fa8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008800:	4b10      	ldr	r3, [pc, #64]	@ (8008844 <prvCheckTasksWaitingTermination+0x50>)
 8008802:	68db      	ldr	r3, [r3, #12]
 8008804:	68db      	ldr	r3, [r3, #12]
 8008806:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	3304      	adds	r3, #4
 800880c:	4618      	mov	r0, r3
 800880e:	f7fe fd19 	bl	8007244 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008812:	4b0d      	ldr	r3, [pc, #52]	@ (8008848 <prvCheckTasksWaitingTermination+0x54>)
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	3b01      	subs	r3, #1
 8008818:	4a0b      	ldr	r2, [pc, #44]	@ (8008848 <prvCheckTasksWaitingTermination+0x54>)
 800881a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800881c:	4b0b      	ldr	r3, [pc, #44]	@ (800884c <prvCheckTasksWaitingTermination+0x58>)
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	3b01      	subs	r3, #1
 8008822:	4a0a      	ldr	r2, [pc, #40]	@ (800884c <prvCheckTasksWaitingTermination+0x58>)
 8008824:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008826:	f000 fbf1 	bl	800900c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800882a:	6878      	ldr	r0, [r7, #4]
 800882c:	f000 f810 	bl	8008850 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008830:	4b06      	ldr	r3, [pc, #24]	@ (800884c <prvCheckTasksWaitingTermination+0x58>)
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	2b00      	cmp	r3, #0
 8008836:	d1e1      	bne.n	80087fc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008838:	bf00      	nop
 800883a:	bf00      	nop
 800883c:	3708      	adds	r7, #8
 800883e:	46bd      	mov	sp, r7
 8008840:	bd80      	pop	{r7, pc}
 8008842:	bf00      	nop
 8008844:	2000058c 	.word	0x2000058c
 8008848:	200005b8 	.word	0x200005b8
 800884c:	200005a0 	.word	0x200005a0

08008850 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008850:	b580      	push	{r7, lr}
 8008852:	b084      	sub	sp, #16
 8008854:	af00      	add	r7, sp, #0
 8008856:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	334c      	adds	r3, #76	@ 0x4c
 800885c:	4618      	mov	r0, r3
 800885e:	f001 fb93 	bl	8009f88 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8008868:	2b00      	cmp	r3, #0
 800886a:	d108      	bne.n	800887e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008870:	4618      	mov	r0, r3
 8008872:	f000 fd47 	bl	8009304 <vPortFree>
				vPortFree( pxTCB );
 8008876:	6878      	ldr	r0, [r7, #4]
 8008878:	f000 fd44 	bl	8009304 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800887c:	e019      	b.n	80088b2 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8008884:	2b01      	cmp	r3, #1
 8008886:	d103      	bne.n	8008890 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008888:	6878      	ldr	r0, [r7, #4]
 800888a:	f000 fd3b 	bl	8009304 <vPortFree>
	}
 800888e:	e010      	b.n	80088b2 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8008896:	2b02      	cmp	r3, #2
 8008898:	d00b      	beq.n	80088b2 <prvDeleteTCB+0x62>
	__asm volatile
 800889a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800889e:	f383 8811 	msr	BASEPRI, r3
 80088a2:	f3bf 8f6f 	isb	sy
 80088a6:	f3bf 8f4f 	dsb	sy
 80088aa:	60fb      	str	r3, [r7, #12]
}
 80088ac:	bf00      	nop
 80088ae:	bf00      	nop
 80088b0:	e7fd      	b.n	80088ae <prvDeleteTCB+0x5e>
	}
 80088b2:	bf00      	nop
 80088b4:	3710      	adds	r7, #16
 80088b6:	46bd      	mov	sp, r7
 80088b8:	bd80      	pop	{r7, pc}
	...

080088bc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80088bc:	b480      	push	{r7}
 80088be:	b083      	sub	sp, #12
 80088c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80088c2:	4b0c      	ldr	r3, [pc, #48]	@ (80088f4 <prvResetNextTaskUnblockTime+0x38>)
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d104      	bne.n	80088d6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80088cc:	4b0a      	ldr	r3, [pc, #40]	@ (80088f8 <prvResetNextTaskUnblockTime+0x3c>)
 80088ce:	f04f 32ff 	mov.w	r2, #4294967295
 80088d2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80088d4:	e008      	b.n	80088e8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80088d6:	4b07      	ldr	r3, [pc, #28]	@ (80088f4 <prvResetNextTaskUnblockTime+0x38>)
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	68db      	ldr	r3, [r3, #12]
 80088dc:	68db      	ldr	r3, [r3, #12]
 80088de:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	685b      	ldr	r3, [r3, #4]
 80088e4:	4a04      	ldr	r2, [pc, #16]	@ (80088f8 <prvResetNextTaskUnblockTime+0x3c>)
 80088e6:	6013      	str	r3, [r2, #0]
}
 80088e8:	bf00      	nop
 80088ea:	370c      	adds	r7, #12
 80088ec:	46bd      	mov	sp, r7
 80088ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f2:	4770      	bx	lr
 80088f4:	20000570 	.word	0x20000570
 80088f8:	200005d8 	.word	0x200005d8

080088fc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80088fc:	b480      	push	{r7}
 80088fe:	b083      	sub	sp, #12
 8008900:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008902:	4b0b      	ldr	r3, [pc, #44]	@ (8008930 <xTaskGetSchedulerState+0x34>)
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	2b00      	cmp	r3, #0
 8008908:	d102      	bne.n	8008910 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800890a:	2301      	movs	r3, #1
 800890c:	607b      	str	r3, [r7, #4]
 800890e:	e008      	b.n	8008922 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008910:	4b08      	ldr	r3, [pc, #32]	@ (8008934 <xTaskGetSchedulerState+0x38>)
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	2b00      	cmp	r3, #0
 8008916:	d102      	bne.n	800891e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008918:	2302      	movs	r3, #2
 800891a:	607b      	str	r3, [r7, #4]
 800891c:	e001      	b.n	8008922 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800891e:	2300      	movs	r3, #0
 8008920:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008922:	687b      	ldr	r3, [r7, #4]
	}
 8008924:	4618      	mov	r0, r3
 8008926:	370c      	adds	r7, #12
 8008928:	46bd      	mov	sp, r7
 800892a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892e:	4770      	bx	lr
 8008930:	200005c4 	.word	0x200005c4
 8008934:	200005e0 	.word	0x200005e0

08008938 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008938:	b580      	push	{r7, lr}
 800893a:	b084      	sub	sp, #16
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008944:	2300      	movs	r3, #0
 8008946:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	2b00      	cmp	r3, #0
 800894c:	d05e      	beq.n	8008a0c <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800894e:	68bb      	ldr	r3, [r7, #8]
 8008950:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008952:	4b31      	ldr	r3, [pc, #196]	@ (8008a18 <xTaskPriorityInherit+0xe0>)
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008958:	429a      	cmp	r2, r3
 800895a:	d24e      	bcs.n	80089fa <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800895c:	68bb      	ldr	r3, [r7, #8]
 800895e:	699b      	ldr	r3, [r3, #24]
 8008960:	2b00      	cmp	r3, #0
 8008962:	db06      	blt.n	8008972 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008964:	4b2c      	ldr	r3, [pc, #176]	@ (8008a18 <xTaskPriorityInherit+0xe0>)
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800896a:	f1c3 0207 	rsb	r2, r3, #7
 800896e:	68bb      	ldr	r3, [r7, #8]
 8008970:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008972:	68bb      	ldr	r3, [r7, #8]
 8008974:	6959      	ldr	r1, [r3, #20]
 8008976:	68bb      	ldr	r3, [r7, #8]
 8008978:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800897a:	4613      	mov	r3, r2
 800897c:	009b      	lsls	r3, r3, #2
 800897e:	4413      	add	r3, r2
 8008980:	009b      	lsls	r3, r3, #2
 8008982:	4a26      	ldr	r2, [pc, #152]	@ (8008a1c <xTaskPriorityInherit+0xe4>)
 8008984:	4413      	add	r3, r2
 8008986:	4299      	cmp	r1, r3
 8008988:	d12f      	bne.n	80089ea <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800898a:	68bb      	ldr	r3, [r7, #8]
 800898c:	3304      	adds	r3, #4
 800898e:	4618      	mov	r0, r3
 8008990:	f7fe fc58 	bl	8007244 <uxListRemove>
 8008994:	4603      	mov	r3, r0
 8008996:	2b00      	cmp	r3, #0
 8008998:	d10a      	bne.n	80089b0 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800899a:	68bb      	ldr	r3, [r7, #8]
 800899c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800899e:	2201      	movs	r2, #1
 80089a0:	fa02 f303 	lsl.w	r3, r2, r3
 80089a4:	43da      	mvns	r2, r3
 80089a6:	4b1e      	ldr	r3, [pc, #120]	@ (8008a20 <xTaskPriorityInherit+0xe8>)
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	4013      	ands	r3, r2
 80089ac:	4a1c      	ldr	r2, [pc, #112]	@ (8008a20 <xTaskPriorityInherit+0xe8>)
 80089ae:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80089b0:	4b19      	ldr	r3, [pc, #100]	@ (8008a18 <xTaskPriorityInherit+0xe0>)
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80089b6:	68bb      	ldr	r3, [r7, #8]
 80089b8:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80089ba:	68bb      	ldr	r3, [r7, #8]
 80089bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089be:	2201      	movs	r2, #1
 80089c0:	409a      	lsls	r2, r3
 80089c2:	4b17      	ldr	r3, [pc, #92]	@ (8008a20 <xTaskPriorityInherit+0xe8>)
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	4313      	orrs	r3, r2
 80089c8:	4a15      	ldr	r2, [pc, #84]	@ (8008a20 <xTaskPriorityInherit+0xe8>)
 80089ca:	6013      	str	r3, [r2, #0]
 80089cc:	68bb      	ldr	r3, [r7, #8]
 80089ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80089d0:	4613      	mov	r3, r2
 80089d2:	009b      	lsls	r3, r3, #2
 80089d4:	4413      	add	r3, r2
 80089d6:	009b      	lsls	r3, r3, #2
 80089d8:	4a10      	ldr	r2, [pc, #64]	@ (8008a1c <xTaskPriorityInherit+0xe4>)
 80089da:	441a      	add	r2, r3
 80089dc:	68bb      	ldr	r3, [r7, #8]
 80089de:	3304      	adds	r3, #4
 80089e0:	4619      	mov	r1, r3
 80089e2:	4610      	mov	r0, r2
 80089e4:	f7fe fbd1 	bl	800718a <vListInsertEnd>
 80089e8:	e004      	b.n	80089f4 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80089ea:	4b0b      	ldr	r3, [pc, #44]	@ (8008a18 <xTaskPriorityInherit+0xe0>)
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80089f0:	68bb      	ldr	r3, [r7, #8]
 80089f2:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80089f4:	2301      	movs	r3, #1
 80089f6:	60fb      	str	r3, [r7, #12]
 80089f8:	e008      	b.n	8008a0c <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80089fa:	68bb      	ldr	r3, [r7, #8]
 80089fc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80089fe:	4b06      	ldr	r3, [pc, #24]	@ (8008a18 <xTaskPriorityInherit+0xe0>)
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a04:	429a      	cmp	r2, r3
 8008a06:	d201      	bcs.n	8008a0c <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008a08:	2301      	movs	r3, #1
 8008a0a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008a0c:	68fb      	ldr	r3, [r7, #12]
	}
 8008a0e:	4618      	mov	r0, r3
 8008a10:	3710      	adds	r7, #16
 8008a12:	46bd      	mov	sp, r7
 8008a14:	bd80      	pop	{r7, pc}
 8008a16:	bf00      	nop
 8008a18:	200004b8 	.word	0x200004b8
 8008a1c:	200004bc 	.word	0x200004bc
 8008a20:	200005c0 	.word	0x200005c0

08008a24 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008a24:	b580      	push	{r7, lr}
 8008a26:	b086      	sub	sp, #24
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008a30:	2300      	movs	r3, #0
 8008a32:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d070      	beq.n	8008b1c <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008a3a:	4b3b      	ldr	r3, [pc, #236]	@ (8008b28 <xTaskPriorityDisinherit+0x104>)
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	693a      	ldr	r2, [r7, #16]
 8008a40:	429a      	cmp	r2, r3
 8008a42:	d00b      	beq.n	8008a5c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8008a44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a48:	f383 8811 	msr	BASEPRI, r3
 8008a4c:	f3bf 8f6f 	isb	sy
 8008a50:	f3bf 8f4f 	dsb	sy
 8008a54:	60fb      	str	r3, [r7, #12]
}
 8008a56:	bf00      	nop
 8008a58:	bf00      	nop
 8008a5a:	e7fd      	b.n	8008a58 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008a5c:	693b      	ldr	r3, [r7, #16]
 8008a5e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d10b      	bne.n	8008a7c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8008a64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a68:	f383 8811 	msr	BASEPRI, r3
 8008a6c:	f3bf 8f6f 	isb	sy
 8008a70:	f3bf 8f4f 	dsb	sy
 8008a74:	60bb      	str	r3, [r7, #8]
}
 8008a76:	bf00      	nop
 8008a78:	bf00      	nop
 8008a7a:	e7fd      	b.n	8008a78 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8008a7c:	693b      	ldr	r3, [r7, #16]
 8008a7e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008a80:	1e5a      	subs	r2, r3, #1
 8008a82:	693b      	ldr	r3, [r7, #16]
 8008a84:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008a86:	693b      	ldr	r3, [r7, #16]
 8008a88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a8a:	693b      	ldr	r3, [r7, #16]
 8008a8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008a8e:	429a      	cmp	r2, r3
 8008a90:	d044      	beq.n	8008b1c <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008a92:	693b      	ldr	r3, [r7, #16]
 8008a94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d140      	bne.n	8008b1c <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008a9a:	693b      	ldr	r3, [r7, #16]
 8008a9c:	3304      	adds	r3, #4
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	f7fe fbd0 	bl	8007244 <uxListRemove>
 8008aa4:	4603      	mov	r3, r0
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d115      	bne.n	8008ad6 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008aaa:	693b      	ldr	r3, [r7, #16]
 8008aac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008aae:	491f      	ldr	r1, [pc, #124]	@ (8008b2c <xTaskPriorityDisinherit+0x108>)
 8008ab0:	4613      	mov	r3, r2
 8008ab2:	009b      	lsls	r3, r3, #2
 8008ab4:	4413      	add	r3, r2
 8008ab6:	009b      	lsls	r3, r3, #2
 8008ab8:	440b      	add	r3, r1
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d10a      	bne.n	8008ad6 <xTaskPriorityDisinherit+0xb2>
 8008ac0:	693b      	ldr	r3, [r7, #16]
 8008ac2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ac4:	2201      	movs	r2, #1
 8008ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8008aca:	43da      	mvns	r2, r3
 8008acc:	4b18      	ldr	r3, [pc, #96]	@ (8008b30 <xTaskPriorityDisinherit+0x10c>)
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	4013      	ands	r3, r2
 8008ad2:	4a17      	ldr	r2, [pc, #92]	@ (8008b30 <xTaskPriorityDisinherit+0x10c>)
 8008ad4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008ad6:	693b      	ldr	r3, [r7, #16]
 8008ad8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008ada:	693b      	ldr	r3, [r7, #16]
 8008adc:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008ade:	693b      	ldr	r3, [r7, #16]
 8008ae0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ae2:	f1c3 0207 	rsb	r2, r3, #7
 8008ae6:	693b      	ldr	r3, [r7, #16]
 8008ae8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008aea:	693b      	ldr	r3, [r7, #16]
 8008aec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008aee:	2201      	movs	r2, #1
 8008af0:	409a      	lsls	r2, r3
 8008af2:	4b0f      	ldr	r3, [pc, #60]	@ (8008b30 <xTaskPriorityDisinherit+0x10c>)
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	4313      	orrs	r3, r2
 8008af8:	4a0d      	ldr	r2, [pc, #52]	@ (8008b30 <xTaskPriorityDisinherit+0x10c>)
 8008afa:	6013      	str	r3, [r2, #0]
 8008afc:	693b      	ldr	r3, [r7, #16]
 8008afe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b00:	4613      	mov	r3, r2
 8008b02:	009b      	lsls	r3, r3, #2
 8008b04:	4413      	add	r3, r2
 8008b06:	009b      	lsls	r3, r3, #2
 8008b08:	4a08      	ldr	r2, [pc, #32]	@ (8008b2c <xTaskPriorityDisinherit+0x108>)
 8008b0a:	441a      	add	r2, r3
 8008b0c:	693b      	ldr	r3, [r7, #16]
 8008b0e:	3304      	adds	r3, #4
 8008b10:	4619      	mov	r1, r3
 8008b12:	4610      	mov	r0, r2
 8008b14:	f7fe fb39 	bl	800718a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008b18:	2301      	movs	r3, #1
 8008b1a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008b1c:	697b      	ldr	r3, [r7, #20]
	}
 8008b1e:	4618      	mov	r0, r3
 8008b20:	3718      	adds	r7, #24
 8008b22:	46bd      	mov	sp, r7
 8008b24:	bd80      	pop	{r7, pc}
 8008b26:	bf00      	nop
 8008b28:	200004b8 	.word	0x200004b8
 8008b2c:	200004bc 	.word	0x200004bc
 8008b30:	200005c0 	.word	0x200005c0

08008b34 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b088      	sub	sp, #32
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
 8008b3c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008b42:	2301      	movs	r3, #1
 8008b44:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d079      	beq.n	8008c40 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008b4c:	69bb      	ldr	r3, [r7, #24]
 8008b4e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d10b      	bne.n	8008b6c <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8008b54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b58:	f383 8811 	msr	BASEPRI, r3
 8008b5c:	f3bf 8f6f 	isb	sy
 8008b60:	f3bf 8f4f 	dsb	sy
 8008b64:	60fb      	str	r3, [r7, #12]
}
 8008b66:	bf00      	nop
 8008b68:	bf00      	nop
 8008b6a:	e7fd      	b.n	8008b68 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008b6c:	69bb      	ldr	r3, [r7, #24]
 8008b6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b70:	683a      	ldr	r2, [r7, #0]
 8008b72:	429a      	cmp	r2, r3
 8008b74:	d902      	bls.n	8008b7c <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008b76:	683b      	ldr	r3, [r7, #0]
 8008b78:	61fb      	str	r3, [r7, #28]
 8008b7a:	e002      	b.n	8008b82 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008b7c:	69bb      	ldr	r3, [r7, #24]
 8008b7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b80:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008b82:	69bb      	ldr	r3, [r7, #24]
 8008b84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b86:	69fa      	ldr	r2, [r7, #28]
 8008b88:	429a      	cmp	r2, r3
 8008b8a:	d059      	beq.n	8008c40 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008b8c:	69bb      	ldr	r3, [r7, #24]
 8008b8e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008b90:	697a      	ldr	r2, [r7, #20]
 8008b92:	429a      	cmp	r2, r3
 8008b94:	d154      	bne.n	8008c40 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008b96:	4b2c      	ldr	r3, [pc, #176]	@ (8008c48 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	69ba      	ldr	r2, [r7, #24]
 8008b9c:	429a      	cmp	r2, r3
 8008b9e:	d10b      	bne.n	8008bb8 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8008ba0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ba4:	f383 8811 	msr	BASEPRI, r3
 8008ba8:	f3bf 8f6f 	isb	sy
 8008bac:	f3bf 8f4f 	dsb	sy
 8008bb0:	60bb      	str	r3, [r7, #8]
}
 8008bb2:	bf00      	nop
 8008bb4:	bf00      	nop
 8008bb6:	e7fd      	b.n	8008bb4 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008bb8:	69bb      	ldr	r3, [r7, #24]
 8008bba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bbc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008bbe:	69bb      	ldr	r3, [r7, #24]
 8008bc0:	69fa      	ldr	r2, [r7, #28]
 8008bc2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008bc4:	69bb      	ldr	r3, [r7, #24]
 8008bc6:	699b      	ldr	r3, [r3, #24]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	db04      	blt.n	8008bd6 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008bcc:	69fb      	ldr	r3, [r7, #28]
 8008bce:	f1c3 0207 	rsb	r2, r3, #7
 8008bd2:	69bb      	ldr	r3, [r7, #24]
 8008bd4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008bd6:	69bb      	ldr	r3, [r7, #24]
 8008bd8:	6959      	ldr	r1, [r3, #20]
 8008bda:	693a      	ldr	r2, [r7, #16]
 8008bdc:	4613      	mov	r3, r2
 8008bde:	009b      	lsls	r3, r3, #2
 8008be0:	4413      	add	r3, r2
 8008be2:	009b      	lsls	r3, r3, #2
 8008be4:	4a19      	ldr	r2, [pc, #100]	@ (8008c4c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8008be6:	4413      	add	r3, r2
 8008be8:	4299      	cmp	r1, r3
 8008bea:	d129      	bne.n	8008c40 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008bec:	69bb      	ldr	r3, [r7, #24]
 8008bee:	3304      	adds	r3, #4
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	f7fe fb27 	bl	8007244 <uxListRemove>
 8008bf6:	4603      	mov	r3, r0
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d10a      	bne.n	8008c12 <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8008bfc:	69bb      	ldr	r3, [r7, #24]
 8008bfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c00:	2201      	movs	r2, #1
 8008c02:	fa02 f303 	lsl.w	r3, r2, r3
 8008c06:	43da      	mvns	r2, r3
 8008c08:	4b11      	ldr	r3, [pc, #68]	@ (8008c50 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	4013      	ands	r3, r2
 8008c0e:	4a10      	ldr	r2, [pc, #64]	@ (8008c50 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8008c10:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008c12:	69bb      	ldr	r3, [r7, #24]
 8008c14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c16:	2201      	movs	r2, #1
 8008c18:	409a      	lsls	r2, r3
 8008c1a:	4b0d      	ldr	r3, [pc, #52]	@ (8008c50 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	4313      	orrs	r3, r2
 8008c20:	4a0b      	ldr	r2, [pc, #44]	@ (8008c50 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8008c22:	6013      	str	r3, [r2, #0]
 8008c24:	69bb      	ldr	r3, [r7, #24]
 8008c26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c28:	4613      	mov	r3, r2
 8008c2a:	009b      	lsls	r3, r3, #2
 8008c2c:	4413      	add	r3, r2
 8008c2e:	009b      	lsls	r3, r3, #2
 8008c30:	4a06      	ldr	r2, [pc, #24]	@ (8008c4c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8008c32:	441a      	add	r2, r3
 8008c34:	69bb      	ldr	r3, [r7, #24]
 8008c36:	3304      	adds	r3, #4
 8008c38:	4619      	mov	r1, r3
 8008c3a:	4610      	mov	r0, r2
 8008c3c:	f7fe faa5 	bl	800718a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008c40:	bf00      	nop
 8008c42:	3720      	adds	r7, #32
 8008c44:	46bd      	mov	sp, r7
 8008c46:	bd80      	pop	{r7, pc}
 8008c48:	200004b8 	.word	0x200004b8
 8008c4c:	200004bc 	.word	0x200004bc
 8008c50:	200005c0 	.word	0x200005c0

08008c54 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008c54:	b480      	push	{r7}
 8008c56:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008c58:	4b07      	ldr	r3, [pc, #28]	@ (8008c78 <pvTaskIncrementMutexHeldCount+0x24>)
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d004      	beq.n	8008c6a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008c60:	4b05      	ldr	r3, [pc, #20]	@ (8008c78 <pvTaskIncrementMutexHeldCount+0x24>)
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008c66:	3201      	adds	r2, #1
 8008c68:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 8008c6a:	4b03      	ldr	r3, [pc, #12]	@ (8008c78 <pvTaskIncrementMutexHeldCount+0x24>)
 8008c6c:	681b      	ldr	r3, [r3, #0]
	}
 8008c6e:	4618      	mov	r0, r3
 8008c70:	46bd      	mov	sp, r7
 8008c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c76:	4770      	bx	lr
 8008c78:	200004b8 	.word	0x200004b8

08008c7c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008c7c:	b580      	push	{r7, lr}
 8008c7e:	b084      	sub	sp, #16
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	6078      	str	r0, [r7, #4]
 8008c84:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008c86:	4b29      	ldr	r3, [pc, #164]	@ (8008d2c <prvAddCurrentTaskToDelayedList+0xb0>)
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008c8c:	4b28      	ldr	r3, [pc, #160]	@ (8008d30 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	3304      	adds	r3, #4
 8008c92:	4618      	mov	r0, r3
 8008c94:	f7fe fad6 	bl	8007244 <uxListRemove>
 8008c98:	4603      	mov	r3, r0
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d10b      	bne.n	8008cb6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8008c9e:	4b24      	ldr	r3, [pc, #144]	@ (8008d30 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ca4:	2201      	movs	r2, #1
 8008ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8008caa:	43da      	mvns	r2, r3
 8008cac:	4b21      	ldr	r3, [pc, #132]	@ (8008d34 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	4013      	ands	r3, r2
 8008cb2:	4a20      	ldr	r2, [pc, #128]	@ (8008d34 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008cb4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cbc:	d10a      	bne.n	8008cd4 <prvAddCurrentTaskToDelayedList+0x58>
 8008cbe:	683b      	ldr	r3, [r7, #0]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d007      	beq.n	8008cd4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008cc4:	4b1a      	ldr	r3, [pc, #104]	@ (8008d30 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	3304      	adds	r3, #4
 8008cca:	4619      	mov	r1, r3
 8008ccc:	481a      	ldr	r0, [pc, #104]	@ (8008d38 <prvAddCurrentTaskToDelayedList+0xbc>)
 8008cce:	f7fe fa5c 	bl	800718a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008cd2:	e026      	b.n	8008d22 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008cd4:	68fa      	ldr	r2, [r7, #12]
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	4413      	add	r3, r2
 8008cda:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008cdc:	4b14      	ldr	r3, [pc, #80]	@ (8008d30 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	68ba      	ldr	r2, [r7, #8]
 8008ce2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008ce4:	68ba      	ldr	r2, [r7, #8]
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	429a      	cmp	r2, r3
 8008cea:	d209      	bcs.n	8008d00 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008cec:	4b13      	ldr	r3, [pc, #76]	@ (8008d3c <prvAddCurrentTaskToDelayedList+0xc0>)
 8008cee:	681a      	ldr	r2, [r3, #0]
 8008cf0:	4b0f      	ldr	r3, [pc, #60]	@ (8008d30 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	3304      	adds	r3, #4
 8008cf6:	4619      	mov	r1, r3
 8008cf8:	4610      	mov	r0, r2
 8008cfa:	f7fe fa6a 	bl	80071d2 <vListInsert>
}
 8008cfe:	e010      	b.n	8008d22 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008d00:	4b0f      	ldr	r3, [pc, #60]	@ (8008d40 <prvAddCurrentTaskToDelayedList+0xc4>)
 8008d02:	681a      	ldr	r2, [r3, #0]
 8008d04:	4b0a      	ldr	r3, [pc, #40]	@ (8008d30 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	3304      	adds	r3, #4
 8008d0a:	4619      	mov	r1, r3
 8008d0c:	4610      	mov	r0, r2
 8008d0e:	f7fe fa60 	bl	80071d2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008d12:	4b0c      	ldr	r3, [pc, #48]	@ (8008d44 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	68ba      	ldr	r2, [r7, #8]
 8008d18:	429a      	cmp	r2, r3
 8008d1a:	d202      	bcs.n	8008d22 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008d1c:	4a09      	ldr	r2, [pc, #36]	@ (8008d44 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008d1e:	68bb      	ldr	r3, [r7, #8]
 8008d20:	6013      	str	r3, [r2, #0]
}
 8008d22:	bf00      	nop
 8008d24:	3710      	adds	r7, #16
 8008d26:	46bd      	mov	sp, r7
 8008d28:	bd80      	pop	{r7, pc}
 8008d2a:	bf00      	nop
 8008d2c:	200005bc 	.word	0x200005bc
 8008d30:	200004b8 	.word	0x200004b8
 8008d34:	200005c0 	.word	0x200005c0
 8008d38:	200005a4 	.word	0x200005a4
 8008d3c:	20000574 	.word	0x20000574
 8008d40:	20000570 	.word	0x20000570
 8008d44:	200005d8 	.word	0x200005d8

08008d48 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008d48:	b480      	push	{r7}
 8008d4a:	b085      	sub	sp, #20
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	60f8      	str	r0, [r7, #12]
 8008d50:	60b9      	str	r1, [r7, #8]
 8008d52:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	3b04      	subs	r3, #4
 8008d58:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008d60:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	3b04      	subs	r3, #4
 8008d66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008d68:	68bb      	ldr	r3, [r7, #8]
 8008d6a:	f023 0201 	bic.w	r2, r3, #1
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	3b04      	subs	r3, #4
 8008d76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008d78:	4a0c      	ldr	r2, [pc, #48]	@ (8008dac <pxPortInitialiseStack+0x64>)
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	3b14      	subs	r3, #20
 8008d82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008d84:	687a      	ldr	r2, [r7, #4]
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	3b04      	subs	r3, #4
 8008d8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	f06f 0202 	mvn.w	r2, #2
 8008d96:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	3b20      	subs	r3, #32
 8008d9c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008d9e:	68fb      	ldr	r3, [r7, #12]
}
 8008da0:	4618      	mov	r0, r3
 8008da2:	3714      	adds	r7, #20
 8008da4:	46bd      	mov	sp, r7
 8008da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008daa:	4770      	bx	lr
 8008dac:	08008db1 	.word	0x08008db1

08008db0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008db0:	b480      	push	{r7}
 8008db2:	b085      	sub	sp, #20
 8008db4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008db6:	2300      	movs	r3, #0
 8008db8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008dba:	4b13      	ldr	r3, [pc, #76]	@ (8008e08 <prvTaskExitError+0x58>)
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dc2:	d00b      	beq.n	8008ddc <prvTaskExitError+0x2c>
	__asm volatile
 8008dc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dc8:	f383 8811 	msr	BASEPRI, r3
 8008dcc:	f3bf 8f6f 	isb	sy
 8008dd0:	f3bf 8f4f 	dsb	sy
 8008dd4:	60fb      	str	r3, [r7, #12]
}
 8008dd6:	bf00      	nop
 8008dd8:	bf00      	nop
 8008dda:	e7fd      	b.n	8008dd8 <prvTaskExitError+0x28>
	__asm volatile
 8008ddc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008de0:	f383 8811 	msr	BASEPRI, r3
 8008de4:	f3bf 8f6f 	isb	sy
 8008de8:	f3bf 8f4f 	dsb	sy
 8008dec:	60bb      	str	r3, [r7, #8]
}
 8008dee:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008df0:	bf00      	nop
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d0fc      	beq.n	8008df2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008df8:	bf00      	nop
 8008dfa:	bf00      	nop
 8008dfc:	3714      	adds	r7, #20
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e04:	4770      	bx	lr
 8008e06:	bf00      	nop
 8008e08:	20000098 	.word	0x20000098
 8008e0c:	00000000 	.word	0x00000000

08008e10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008e10:	4b07      	ldr	r3, [pc, #28]	@ (8008e30 <pxCurrentTCBConst2>)
 8008e12:	6819      	ldr	r1, [r3, #0]
 8008e14:	6808      	ldr	r0, [r1, #0]
 8008e16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e1a:	f380 8809 	msr	PSP, r0
 8008e1e:	f3bf 8f6f 	isb	sy
 8008e22:	f04f 0000 	mov.w	r0, #0
 8008e26:	f380 8811 	msr	BASEPRI, r0
 8008e2a:	4770      	bx	lr
 8008e2c:	f3af 8000 	nop.w

08008e30 <pxCurrentTCBConst2>:
 8008e30:	200004b8 	.word	0x200004b8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008e34:	bf00      	nop
 8008e36:	bf00      	nop

08008e38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008e38:	4808      	ldr	r0, [pc, #32]	@ (8008e5c <prvPortStartFirstTask+0x24>)
 8008e3a:	6800      	ldr	r0, [r0, #0]
 8008e3c:	6800      	ldr	r0, [r0, #0]
 8008e3e:	f380 8808 	msr	MSP, r0
 8008e42:	f04f 0000 	mov.w	r0, #0
 8008e46:	f380 8814 	msr	CONTROL, r0
 8008e4a:	b662      	cpsie	i
 8008e4c:	b661      	cpsie	f
 8008e4e:	f3bf 8f4f 	dsb	sy
 8008e52:	f3bf 8f6f 	isb	sy
 8008e56:	df00      	svc	0
 8008e58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008e5a:	bf00      	nop
 8008e5c:	e000ed08 	.word	0xe000ed08

08008e60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008e60:	b580      	push	{r7, lr}
 8008e62:	b086      	sub	sp, #24
 8008e64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008e66:	4b47      	ldr	r3, [pc, #284]	@ (8008f84 <xPortStartScheduler+0x124>)
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	4a47      	ldr	r2, [pc, #284]	@ (8008f88 <xPortStartScheduler+0x128>)
 8008e6c:	4293      	cmp	r3, r2
 8008e6e:	d10b      	bne.n	8008e88 <xPortStartScheduler+0x28>
	__asm volatile
 8008e70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e74:	f383 8811 	msr	BASEPRI, r3
 8008e78:	f3bf 8f6f 	isb	sy
 8008e7c:	f3bf 8f4f 	dsb	sy
 8008e80:	613b      	str	r3, [r7, #16]
}
 8008e82:	bf00      	nop
 8008e84:	bf00      	nop
 8008e86:	e7fd      	b.n	8008e84 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008e88:	4b3e      	ldr	r3, [pc, #248]	@ (8008f84 <xPortStartScheduler+0x124>)
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	4a3f      	ldr	r2, [pc, #252]	@ (8008f8c <xPortStartScheduler+0x12c>)
 8008e8e:	4293      	cmp	r3, r2
 8008e90:	d10b      	bne.n	8008eaa <xPortStartScheduler+0x4a>
	__asm volatile
 8008e92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e96:	f383 8811 	msr	BASEPRI, r3
 8008e9a:	f3bf 8f6f 	isb	sy
 8008e9e:	f3bf 8f4f 	dsb	sy
 8008ea2:	60fb      	str	r3, [r7, #12]
}
 8008ea4:	bf00      	nop
 8008ea6:	bf00      	nop
 8008ea8:	e7fd      	b.n	8008ea6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008eaa:	4b39      	ldr	r3, [pc, #228]	@ (8008f90 <xPortStartScheduler+0x130>)
 8008eac:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008eae:	697b      	ldr	r3, [r7, #20]
 8008eb0:	781b      	ldrb	r3, [r3, #0]
 8008eb2:	b2db      	uxtb	r3, r3
 8008eb4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008eb6:	697b      	ldr	r3, [r7, #20]
 8008eb8:	22ff      	movs	r2, #255	@ 0xff
 8008eba:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008ebc:	697b      	ldr	r3, [r7, #20]
 8008ebe:	781b      	ldrb	r3, [r3, #0]
 8008ec0:	b2db      	uxtb	r3, r3
 8008ec2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008ec4:	78fb      	ldrb	r3, [r7, #3]
 8008ec6:	b2db      	uxtb	r3, r3
 8008ec8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8008ecc:	b2da      	uxtb	r2, r3
 8008ece:	4b31      	ldr	r3, [pc, #196]	@ (8008f94 <xPortStartScheduler+0x134>)
 8008ed0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008ed2:	4b31      	ldr	r3, [pc, #196]	@ (8008f98 <xPortStartScheduler+0x138>)
 8008ed4:	2207      	movs	r2, #7
 8008ed6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008ed8:	e009      	b.n	8008eee <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8008eda:	4b2f      	ldr	r3, [pc, #188]	@ (8008f98 <xPortStartScheduler+0x138>)
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	3b01      	subs	r3, #1
 8008ee0:	4a2d      	ldr	r2, [pc, #180]	@ (8008f98 <xPortStartScheduler+0x138>)
 8008ee2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008ee4:	78fb      	ldrb	r3, [r7, #3]
 8008ee6:	b2db      	uxtb	r3, r3
 8008ee8:	005b      	lsls	r3, r3, #1
 8008eea:	b2db      	uxtb	r3, r3
 8008eec:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008eee:	78fb      	ldrb	r3, [r7, #3]
 8008ef0:	b2db      	uxtb	r3, r3
 8008ef2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008ef6:	2b80      	cmp	r3, #128	@ 0x80
 8008ef8:	d0ef      	beq.n	8008eda <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008efa:	4b27      	ldr	r3, [pc, #156]	@ (8008f98 <xPortStartScheduler+0x138>)
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	f1c3 0307 	rsb	r3, r3, #7
 8008f02:	2b04      	cmp	r3, #4
 8008f04:	d00b      	beq.n	8008f1e <xPortStartScheduler+0xbe>
	__asm volatile
 8008f06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f0a:	f383 8811 	msr	BASEPRI, r3
 8008f0e:	f3bf 8f6f 	isb	sy
 8008f12:	f3bf 8f4f 	dsb	sy
 8008f16:	60bb      	str	r3, [r7, #8]
}
 8008f18:	bf00      	nop
 8008f1a:	bf00      	nop
 8008f1c:	e7fd      	b.n	8008f1a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008f1e:	4b1e      	ldr	r3, [pc, #120]	@ (8008f98 <xPortStartScheduler+0x138>)
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	021b      	lsls	r3, r3, #8
 8008f24:	4a1c      	ldr	r2, [pc, #112]	@ (8008f98 <xPortStartScheduler+0x138>)
 8008f26:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008f28:	4b1b      	ldr	r3, [pc, #108]	@ (8008f98 <xPortStartScheduler+0x138>)
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008f30:	4a19      	ldr	r2, [pc, #100]	@ (8008f98 <xPortStartScheduler+0x138>)
 8008f32:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	b2da      	uxtb	r2, r3
 8008f38:	697b      	ldr	r3, [r7, #20]
 8008f3a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008f3c:	4b17      	ldr	r3, [pc, #92]	@ (8008f9c <xPortStartScheduler+0x13c>)
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	4a16      	ldr	r2, [pc, #88]	@ (8008f9c <xPortStartScheduler+0x13c>)
 8008f42:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008f46:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008f48:	4b14      	ldr	r3, [pc, #80]	@ (8008f9c <xPortStartScheduler+0x13c>)
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	4a13      	ldr	r2, [pc, #76]	@ (8008f9c <xPortStartScheduler+0x13c>)
 8008f4e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008f52:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008f54:	f000 f8da 	bl	800910c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008f58:	4b11      	ldr	r3, [pc, #68]	@ (8008fa0 <xPortStartScheduler+0x140>)
 8008f5a:	2200      	movs	r2, #0
 8008f5c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008f5e:	f000 f8f9 	bl	8009154 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008f62:	4b10      	ldr	r3, [pc, #64]	@ (8008fa4 <xPortStartScheduler+0x144>)
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	4a0f      	ldr	r2, [pc, #60]	@ (8008fa4 <xPortStartScheduler+0x144>)
 8008f68:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8008f6c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008f6e:	f7ff ff63 	bl	8008e38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008f72:	f7ff fa73 	bl	800845c <vTaskSwitchContext>
	prvTaskExitError();
 8008f76:	f7ff ff1b 	bl	8008db0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008f7a:	2300      	movs	r3, #0
}
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	3718      	adds	r7, #24
 8008f80:	46bd      	mov	sp, r7
 8008f82:	bd80      	pop	{r7, pc}
 8008f84:	e000ed00 	.word	0xe000ed00
 8008f88:	410fc271 	.word	0x410fc271
 8008f8c:	410fc270 	.word	0x410fc270
 8008f90:	e000e400 	.word	0xe000e400
 8008f94:	200005e4 	.word	0x200005e4
 8008f98:	200005e8 	.word	0x200005e8
 8008f9c:	e000ed20 	.word	0xe000ed20
 8008fa0:	20000098 	.word	0x20000098
 8008fa4:	e000ef34 	.word	0xe000ef34

08008fa8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008fa8:	b480      	push	{r7}
 8008faa:	b083      	sub	sp, #12
 8008fac:	af00      	add	r7, sp, #0
	__asm volatile
 8008fae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fb2:	f383 8811 	msr	BASEPRI, r3
 8008fb6:	f3bf 8f6f 	isb	sy
 8008fba:	f3bf 8f4f 	dsb	sy
 8008fbe:	607b      	str	r3, [r7, #4]
}
 8008fc0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008fc2:	4b10      	ldr	r3, [pc, #64]	@ (8009004 <vPortEnterCritical+0x5c>)
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	3301      	adds	r3, #1
 8008fc8:	4a0e      	ldr	r2, [pc, #56]	@ (8009004 <vPortEnterCritical+0x5c>)
 8008fca:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008fcc:	4b0d      	ldr	r3, [pc, #52]	@ (8009004 <vPortEnterCritical+0x5c>)
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	2b01      	cmp	r3, #1
 8008fd2:	d110      	bne.n	8008ff6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008fd4:	4b0c      	ldr	r3, [pc, #48]	@ (8009008 <vPortEnterCritical+0x60>)
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	b2db      	uxtb	r3, r3
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d00b      	beq.n	8008ff6 <vPortEnterCritical+0x4e>
	__asm volatile
 8008fde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fe2:	f383 8811 	msr	BASEPRI, r3
 8008fe6:	f3bf 8f6f 	isb	sy
 8008fea:	f3bf 8f4f 	dsb	sy
 8008fee:	603b      	str	r3, [r7, #0]
}
 8008ff0:	bf00      	nop
 8008ff2:	bf00      	nop
 8008ff4:	e7fd      	b.n	8008ff2 <vPortEnterCritical+0x4a>
	}
}
 8008ff6:	bf00      	nop
 8008ff8:	370c      	adds	r7, #12
 8008ffa:	46bd      	mov	sp, r7
 8008ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009000:	4770      	bx	lr
 8009002:	bf00      	nop
 8009004:	20000098 	.word	0x20000098
 8009008:	e000ed04 	.word	0xe000ed04

0800900c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800900c:	b480      	push	{r7}
 800900e:	b083      	sub	sp, #12
 8009010:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009012:	4b12      	ldr	r3, [pc, #72]	@ (800905c <vPortExitCritical+0x50>)
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	2b00      	cmp	r3, #0
 8009018:	d10b      	bne.n	8009032 <vPortExitCritical+0x26>
	__asm volatile
 800901a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800901e:	f383 8811 	msr	BASEPRI, r3
 8009022:	f3bf 8f6f 	isb	sy
 8009026:	f3bf 8f4f 	dsb	sy
 800902a:	607b      	str	r3, [r7, #4]
}
 800902c:	bf00      	nop
 800902e:	bf00      	nop
 8009030:	e7fd      	b.n	800902e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009032:	4b0a      	ldr	r3, [pc, #40]	@ (800905c <vPortExitCritical+0x50>)
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	3b01      	subs	r3, #1
 8009038:	4a08      	ldr	r2, [pc, #32]	@ (800905c <vPortExitCritical+0x50>)
 800903a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800903c:	4b07      	ldr	r3, [pc, #28]	@ (800905c <vPortExitCritical+0x50>)
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	2b00      	cmp	r3, #0
 8009042:	d105      	bne.n	8009050 <vPortExitCritical+0x44>
 8009044:	2300      	movs	r3, #0
 8009046:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009048:	683b      	ldr	r3, [r7, #0]
 800904a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800904e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009050:	bf00      	nop
 8009052:	370c      	adds	r7, #12
 8009054:	46bd      	mov	sp, r7
 8009056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905a:	4770      	bx	lr
 800905c:	20000098 	.word	0x20000098

08009060 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009060:	f3ef 8009 	mrs	r0, PSP
 8009064:	f3bf 8f6f 	isb	sy
 8009068:	4b15      	ldr	r3, [pc, #84]	@ (80090c0 <pxCurrentTCBConst>)
 800906a:	681a      	ldr	r2, [r3, #0]
 800906c:	f01e 0f10 	tst.w	lr, #16
 8009070:	bf08      	it	eq
 8009072:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009076:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800907a:	6010      	str	r0, [r2, #0]
 800907c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009080:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009084:	f380 8811 	msr	BASEPRI, r0
 8009088:	f3bf 8f4f 	dsb	sy
 800908c:	f3bf 8f6f 	isb	sy
 8009090:	f7ff f9e4 	bl	800845c <vTaskSwitchContext>
 8009094:	f04f 0000 	mov.w	r0, #0
 8009098:	f380 8811 	msr	BASEPRI, r0
 800909c:	bc09      	pop	{r0, r3}
 800909e:	6819      	ldr	r1, [r3, #0]
 80090a0:	6808      	ldr	r0, [r1, #0]
 80090a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090a6:	f01e 0f10 	tst.w	lr, #16
 80090aa:	bf08      	it	eq
 80090ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80090b0:	f380 8809 	msr	PSP, r0
 80090b4:	f3bf 8f6f 	isb	sy
 80090b8:	4770      	bx	lr
 80090ba:	bf00      	nop
 80090bc:	f3af 8000 	nop.w

080090c0 <pxCurrentTCBConst>:
 80090c0:	200004b8 	.word	0x200004b8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80090c4:	bf00      	nop
 80090c6:	bf00      	nop

080090c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80090c8:	b580      	push	{r7, lr}
 80090ca:	b082      	sub	sp, #8
 80090cc:	af00      	add	r7, sp, #0
	__asm volatile
 80090ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090d2:	f383 8811 	msr	BASEPRI, r3
 80090d6:	f3bf 8f6f 	isb	sy
 80090da:	f3bf 8f4f 	dsb	sy
 80090de:	607b      	str	r3, [r7, #4]
}
 80090e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80090e2:	f7ff f901 	bl	80082e8 <xTaskIncrementTick>
 80090e6:	4603      	mov	r3, r0
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d003      	beq.n	80090f4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80090ec:	4b06      	ldr	r3, [pc, #24]	@ (8009108 <SysTick_Handler+0x40>)
 80090ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80090f2:	601a      	str	r2, [r3, #0]
 80090f4:	2300      	movs	r3, #0
 80090f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80090f8:	683b      	ldr	r3, [r7, #0]
 80090fa:	f383 8811 	msr	BASEPRI, r3
}
 80090fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009100:	bf00      	nop
 8009102:	3708      	adds	r7, #8
 8009104:	46bd      	mov	sp, r7
 8009106:	bd80      	pop	{r7, pc}
 8009108:	e000ed04 	.word	0xe000ed04

0800910c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800910c:	b480      	push	{r7}
 800910e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009110:	4b0b      	ldr	r3, [pc, #44]	@ (8009140 <vPortSetupTimerInterrupt+0x34>)
 8009112:	2200      	movs	r2, #0
 8009114:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009116:	4b0b      	ldr	r3, [pc, #44]	@ (8009144 <vPortSetupTimerInterrupt+0x38>)
 8009118:	2200      	movs	r2, #0
 800911a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800911c:	4b0a      	ldr	r3, [pc, #40]	@ (8009148 <vPortSetupTimerInterrupt+0x3c>)
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	4a0a      	ldr	r2, [pc, #40]	@ (800914c <vPortSetupTimerInterrupt+0x40>)
 8009122:	fba2 2303 	umull	r2, r3, r2, r3
 8009126:	099b      	lsrs	r3, r3, #6
 8009128:	4a09      	ldr	r2, [pc, #36]	@ (8009150 <vPortSetupTimerInterrupt+0x44>)
 800912a:	3b01      	subs	r3, #1
 800912c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800912e:	4b04      	ldr	r3, [pc, #16]	@ (8009140 <vPortSetupTimerInterrupt+0x34>)
 8009130:	2207      	movs	r2, #7
 8009132:	601a      	str	r2, [r3, #0]
}
 8009134:	bf00      	nop
 8009136:	46bd      	mov	sp, r7
 8009138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913c:	4770      	bx	lr
 800913e:	bf00      	nop
 8009140:	e000e010 	.word	0xe000e010
 8009144:	e000e018 	.word	0xe000e018
 8009148:	20000000 	.word	0x20000000
 800914c:	10624dd3 	.word	0x10624dd3
 8009150:	e000e014 	.word	0xe000e014

08009154 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009154:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8009164 <vPortEnableVFP+0x10>
 8009158:	6801      	ldr	r1, [r0, #0]
 800915a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800915e:	6001      	str	r1, [r0, #0]
 8009160:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009162:	bf00      	nop
 8009164:	e000ed88 	.word	0xe000ed88

08009168 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009168:	b580      	push	{r7, lr}
 800916a:	b08a      	sub	sp, #40	@ 0x28
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009170:	2300      	movs	r3, #0
 8009172:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009174:	f7ff f80c 	bl	8008190 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009178:	4b5c      	ldr	r3, [pc, #368]	@ (80092ec <pvPortMalloc+0x184>)
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	2b00      	cmp	r3, #0
 800917e:	d101      	bne.n	8009184 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009180:	f000 f924 	bl	80093cc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009184:	4b5a      	ldr	r3, [pc, #360]	@ (80092f0 <pvPortMalloc+0x188>)
 8009186:	681a      	ldr	r2, [r3, #0]
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	4013      	ands	r3, r2
 800918c:	2b00      	cmp	r3, #0
 800918e:	f040 8095 	bne.w	80092bc <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	2b00      	cmp	r3, #0
 8009196:	d01e      	beq.n	80091d6 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8009198:	2208      	movs	r2, #8
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	4413      	add	r3, r2
 800919e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	f003 0307 	and.w	r3, r3, #7
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d015      	beq.n	80091d6 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	f023 0307 	bic.w	r3, r3, #7
 80091b0:	3308      	adds	r3, #8
 80091b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	f003 0307 	and.w	r3, r3, #7
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d00b      	beq.n	80091d6 <pvPortMalloc+0x6e>
	__asm volatile
 80091be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091c2:	f383 8811 	msr	BASEPRI, r3
 80091c6:	f3bf 8f6f 	isb	sy
 80091ca:	f3bf 8f4f 	dsb	sy
 80091ce:	617b      	str	r3, [r7, #20]
}
 80091d0:	bf00      	nop
 80091d2:	bf00      	nop
 80091d4:	e7fd      	b.n	80091d2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d06f      	beq.n	80092bc <pvPortMalloc+0x154>
 80091dc:	4b45      	ldr	r3, [pc, #276]	@ (80092f4 <pvPortMalloc+0x18c>)
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	687a      	ldr	r2, [r7, #4]
 80091e2:	429a      	cmp	r2, r3
 80091e4:	d86a      	bhi.n	80092bc <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80091e6:	4b44      	ldr	r3, [pc, #272]	@ (80092f8 <pvPortMalloc+0x190>)
 80091e8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80091ea:	4b43      	ldr	r3, [pc, #268]	@ (80092f8 <pvPortMalloc+0x190>)
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80091f0:	e004      	b.n	80091fc <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80091f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091f4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80091f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80091fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091fe:	685b      	ldr	r3, [r3, #4]
 8009200:	687a      	ldr	r2, [r7, #4]
 8009202:	429a      	cmp	r2, r3
 8009204:	d903      	bls.n	800920e <pvPortMalloc+0xa6>
 8009206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	2b00      	cmp	r3, #0
 800920c:	d1f1      	bne.n	80091f2 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800920e:	4b37      	ldr	r3, [pc, #220]	@ (80092ec <pvPortMalloc+0x184>)
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009214:	429a      	cmp	r2, r3
 8009216:	d051      	beq.n	80092bc <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009218:	6a3b      	ldr	r3, [r7, #32]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	2208      	movs	r2, #8
 800921e:	4413      	add	r3, r2
 8009220:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009224:	681a      	ldr	r2, [r3, #0]
 8009226:	6a3b      	ldr	r3, [r7, #32]
 8009228:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800922a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800922c:	685a      	ldr	r2, [r3, #4]
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	1ad2      	subs	r2, r2, r3
 8009232:	2308      	movs	r3, #8
 8009234:	005b      	lsls	r3, r3, #1
 8009236:	429a      	cmp	r2, r3
 8009238:	d920      	bls.n	800927c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800923a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	4413      	add	r3, r2
 8009240:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009242:	69bb      	ldr	r3, [r7, #24]
 8009244:	f003 0307 	and.w	r3, r3, #7
 8009248:	2b00      	cmp	r3, #0
 800924a:	d00b      	beq.n	8009264 <pvPortMalloc+0xfc>
	__asm volatile
 800924c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009250:	f383 8811 	msr	BASEPRI, r3
 8009254:	f3bf 8f6f 	isb	sy
 8009258:	f3bf 8f4f 	dsb	sy
 800925c:	613b      	str	r3, [r7, #16]
}
 800925e:	bf00      	nop
 8009260:	bf00      	nop
 8009262:	e7fd      	b.n	8009260 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009266:	685a      	ldr	r2, [r3, #4]
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	1ad2      	subs	r2, r2, r3
 800926c:	69bb      	ldr	r3, [r7, #24]
 800926e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009272:	687a      	ldr	r2, [r7, #4]
 8009274:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009276:	69b8      	ldr	r0, [r7, #24]
 8009278:	f000 f90a 	bl	8009490 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800927c:	4b1d      	ldr	r3, [pc, #116]	@ (80092f4 <pvPortMalloc+0x18c>)
 800927e:	681a      	ldr	r2, [r3, #0]
 8009280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009282:	685b      	ldr	r3, [r3, #4]
 8009284:	1ad3      	subs	r3, r2, r3
 8009286:	4a1b      	ldr	r2, [pc, #108]	@ (80092f4 <pvPortMalloc+0x18c>)
 8009288:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800928a:	4b1a      	ldr	r3, [pc, #104]	@ (80092f4 <pvPortMalloc+0x18c>)
 800928c:	681a      	ldr	r2, [r3, #0]
 800928e:	4b1b      	ldr	r3, [pc, #108]	@ (80092fc <pvPortMalloc+0x194>)
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	429a      	cmp	r2, r3
 8009294:	d203      	bcs.n	800929e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009296:	4b17      	ldr	r3, [pc, #92]	@ (80092f4 <pvPortMalloc+0x18c>)
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	4a18      	ldr	r2, [pc, #96]	@ (80092fc <pvPortMalloc+0x194>)
 800929c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800929e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092a0:	685a      	ldr	r2, [r3, #4]
 80092a2:	4b13      	ldr	r3, [pc, #76]	@ (80092f0 <pvPortMalloc+0x188>)
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	431a      	orrs	r2, r3
 80092a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092aa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80092ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092ae:	2200      	movs	r2, #0
 80092b0:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80092b2:	4b13      	ldr	r3, [pc, #76]	@ (8009300 <pvPortMalloc+0x198>)
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	3301      	adds	r3, #1
 80092b8:	4a11      	ldr	r2, [pc, #68]	@ (8009300 <pvPortMalloc+0x198>)
 80092ba:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80092bc:	f7fe ff76 	bl	80081ac <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80092c0:	69fb      	ldr	r3, [r7, #28]
 80092c2:	f003 0307 	and.w	r3, r3, #7
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d00b      	beq.n	80092e2 <pvPortMalloc+0x17a>
	__asm volatile
 80092ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092ce:	f383 8811 	msr	BASEPRI, r3
 80092d2:	f3bf 8f6f 	isb	sy
 80092d6:	f3bf 8f4f 	dsb	sy
 80092da:	60fb      	str	r3, [r7, #12]
}
 80092dc:	bf00      	nop
 80092de:	bf00      	nop
 80092e0:	e7fd      	b.n	80092de <pvPortMalloc+0x176>
	return pvReturn;
 80092e2:	69fb      	ldr	r3, [r7, #28]
}
 80092e4:	4618      	mov	r0, r3
 80092e6:	3728      	adds	r7, #40	@ 0x28
 80092e8:	46bd      	mov	sp, r7
 80092ea:	bd80      	pop	{r7, pc}
 80092ec:	200041f4 	.word	0x200041f4
 80092f0:	20004208 	.word	0x20004208
 80092f4:	200041f8 	.word	0x200041f8
 80092f8:	200041ec 	.word	0x200041ec
 80092fc:	200041fc 	.word	0x200041fc
 8009300:	20004200 	.word	0x20004200

08009304 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009304:	b580      	push	{r7, lr}
 8009306:	b086      	sub	sp, #24
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	2b00      	cmp	r3, #0
 8009314:	d04f      	beq.n	80093b6 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009316:	2308      	movs	r3, #8
 8009318:	425b      	negs	r3, r3
 800931a:	697a      	ldr	r2, [r7, #20]
 800931c:	4413      	add	r3, r2
 800931e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009320:	697b      	ldr	r3, [r7, #20]
 8009322:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009324:	693b      	ldr	r3, [r7, #16]
 8009326:	685a      	ldr	r2, [r3, #4]
 8009328:	4b25      	ldr	r3, [pc, #148]	@ (80093c0 <vPortFree+0xbc>)
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	4013      	ands	r3, r2
 800932e:	2b00      	cmp	r3, #0
 8009330:	d10b      	bne.n	800934a <vPortFree+0x46>
	__asm volatile
 8009332:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009336:	f383 8811 	msr	BASEPRI, r3
 800933a:	f3bf 8f6f 	isb	sy
 800933e:	f3bf 8f4f 	dsb	sy
 8009342:	60fb      	str	r3, [r7, #12]
}
 8009344:	bf00      	nop
 8009346:	bf00      	nop
 8009348:	e7fd      	b.n	8009346 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800934a:	693b      	ldr	r3, [r7, #16]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d00b      	beq.n	800936a <vPortFree+0x66>
	__asm volatile
 8009352:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009356:	f383 8811 	msr	BASEPRI, r3
 800935a:	f3bf 8f6f 	isb	sy
 800935e:	f3bf 8f4f 	dsb	sy
 8009362:	60bb      	str	r3, [r7, #8]
}
 8009364:	bf00      	nop
 8009366:	bf00      	nop
 8009368:	e7fd      	b.n	8009366 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800936a:	693b      	ldr	r3, [r7, #16]
 800936c:	685a      	ldr	r2, [r3, #4]
 800936e:	4b14      	ldr	r3, [pc, #80]	@ (80093c0 <vPortFree+0xbc>)
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	4013      	ands	r3, r2
 8009374:	2b00      	cmp	r3, #0
 8009376:	d01e      	beq.n	80093b6 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009378:	693b      	ldr	r3, [r7, #16]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	2b00      	cmp	r3, #0
 800937e:	d11a      	bne.n	80093b6 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009380:	693b      	ldr	r3, [r7, #16]
 8009382:	685a      	ldr	r2, [r3, #4]
 8009384:	4b0e      	ldr	r3, [pc, #56]	@ (80093c0 <vPortFree+0xbc>)
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	43db      	mvns	r3, r3
 800938a:	401a      	ands	r2, r3
 800938c:	693b      	ldr	r3, [r7, #16]
 800938e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009390:	f7fe fefe 	bl	8008190 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009394:	693b      	ldr	r3, [r7, #16]
 8009396:	685a      	ldr	r2, [r3, #4]
 8009398:	4b0a      	ldr	r3, [pc, #40]	@ (80093c4 <vPortFree+0xc0>)
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	4413      	add	r3, r2
 800939e:	4a09      	ldr	r2, [pc, #36]	@ (80093c4 <vPortFree+0xc0>)
 80093a0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80093a2:	6938      	ldr	r0, [r7, #16]
 80093a4:	f000 f874 	bl	8009490 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80093a8:	4b07      	ldr	r3, [pc, #28]	@ (80093c8 <vPortFree+0xc4>)
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	3301      	adds	r3, #1
 80093ae:	4a06      	ldr	r2, [pc, #24]	@ (80093c8 <vPortFree+0xc4>)
 80093b0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80093b2:	f7fe fefb 	bl	80081ac <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80093b6:	bf00      	nop
 80093b8:	3718      	adds	r7, #24
 80093ba:	46bd      	mov	sp, r7
 80093bc:	bd80      	pop	{r7, pc}
 80093be:	bf00      	nop
 80093c0:	20004208 	.word	0x20004208
 80093c4:	200041f8 	.word	0x200041f8
 80093c8:	20004204 	.word	0x20004204

080093cc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80093cc:	b480      	push	{r7}
 80093ce:	b085      	sub	sp, #20
 80093d0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80093d2:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80093d6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80093d8:	4b27      	ldr	r3, [pc, #156]	@ (8009478 <prvHeapInit+0xac>)
 80093da:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	f003 0307 	and.w	r3, r3, #7
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d00c      	beq.n	8009400 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	3307      	adds	r3, #7
 80093ea:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	f023 0307 	bic.w	r3, r3, #7
 80093f2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80093f4:	68ba      	ldr	r2, [r7, #8]
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	1ad3      	subs	r3, r2, r3
 80093fa:	4a1f      	ldr	r2, [pc, #124]	@ (8009478 <prvHeapInit+0xac>)
 80093fc:	4413      	add	r3, r2
 80093fe:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009404:	4a1d      	ldr	r2, [pc, #116]	@ (800947c <prvHeapInit+0xb0>)
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800940a:	4b1c      	ldr	r3, [pc, #112]	@ (800947c <prvHeapInit+0xb0>)
 800940c:	2200      	movs	r2, #0
 800940e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	68ba      	ldr	r2, [r7, #8]
 8009414:	4413      	add	r3, r2
 8009416:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009418:	2208      	movs	r2, #8
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	1a9b      	subs	r3, r3, r2
 800941e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	f023 0307 	bic.w	r3, r3, #7
 8009426:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	4a15      	ldr	r2, [pc, #84]	@ (8009480 <prvHeapInit+0xb4>)
 800942c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800942e:	4b14      	ldr	r3, [pc, #80]	@ (8009480 <prvHeapInit+0xb4>)
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	2200      	movs	r2, #0
 8009434:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009436:	4b12      	ldr	r3, [pc, #72]	@ (8009480 <prvHeapInit+0xb4>)
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	2200      	movs	r2, #0
 800943c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009442:	683b      	ldr	r3, [r7, #0]
 8009444:	68fa      	ldr	r2, [r7, #12]
 8009446:	1ad2      	subs	r2, r2, r3
 8009448:	683b      	ldr	r3, [r7, #0]
 800944a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800944c:	4b0c      	ldr	r3, [pc, #48]	@ (8009480 <prvHeapInit+0xb4>)
 800944e:	681a      	ldr	r2, [r3, #0]
 8009450:	683b      	ldr	r3, [r7, #0]
 8009452:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009454:	683b      	ldr	r3, [r7, #0]
 8009456:	685b      	ldr	r3, [r3, #4]
 8009458:	4a0a      	ldr	r2, [pc, #40]	@ (8009484 <prvHeapInit+0xb8>)
 800945a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800945c:	683b      	ldr	r3, [r7, #0]
 800945e:	685b      	ldr	r3, [r3, #4]
 8009460:	4a09      	ldr	r2, [pc, #36]	@ (8009488 <prvHeapInit+0xbc>)
 8009462:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009464:	4b09      	ldr	r3, [pc, #36]	@ (800948c <prvHeapInit+0xc0>)
 8009466:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800946a:	601a      	str	r2, [r3, #0]
}
 800946c:	bf00      	nop
 800946e:	3714      	adds	r7, #20
 8009470:	46bd      	mov	sp, r7
 8009472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009476:	4770      	bx	lr
 8009478:	200005ec 	.word	0x200005ec
 800947c:	200041ec 	.word	0x200041ec
 8009480:	200041f4 	.word	0x200041f4
 8009484:	200041fc 	.word	0x200041fc
 8009488:	200041f8 	.word	0x200041f8
 800948c:	20004208 	.word	0x20004208

08009490 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009490:	b480      	push	{r7}
 8009492:	b085      	sub	sp, #20
 8009494:	af00      	add	r7, sp, #0
 8009496:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009498:	4b28      	ldr	r3, [pc, #160]	@ (800953c <prvInsertBlockIntoFreeList+0xac>)
 800949a:	60fb      	str	r3, [r7, #12]
 800949c:	e002      	b.n	80094a4 <prvInsertBlockIntoFreeList+0x14>
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	60fb      	str	r3, [r7, #12]
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	687a      	ldr	r2, [r7, #4]
 80094aa:	429a      	cmp	r2, r3
 80094ac:	d8f7      	bhi.n	800949e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	685b      	ldr	r3, [r3, #4]
 80094b6:	68ba      	ldr	r2, [r7, #8]
 80094b8:	4413      	add	r3, r2
 80094ba:	687a      	ldr	r2, [r7, #4]
 80094bc:	429a      	cmp	r2, r3
 80094be:	d108      	bne.n	80094d2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	685a      	ldr	r2, [r3, #4]
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	685b      	ldr	r3, [r3, #4]
 80094c8:	441a      	add	r2, r3
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	685b      	ldr	r3, [r3, #4]
 80094da:	68ba      	ldr	r2, [r7, #8]
 80094dc:	441a      	add	r2, r3
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	429a      	cmp	r2, r3
 80094e4:	d118      	bne.n	8009518 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	681a      	ldr	r2, [r3, #0]
 80094ea:	4b15      	ldr	r3, [pc, #84]	@ (8009540 <prvInsertBlockIntoFreeList+0xb0>)
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	429a      	cmp	r2, r3
 80094f0:	d00d      	beq.n	800950e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	685a      	ldr	r2, [r3, #4]
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	685b      	ldr	r3, [r3, #4]
 80094fc:	441a      	add	r2, r3
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	681a      	ldr	r2, [r3, #0]
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	601a      	str	r2, [r3, #0]
 800950c:	e008      	b.n	8009520 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800950e:	4b0c      	ldr	r3, [pc, #48]	@ (8009540 <prvInsertBlockIntoFreeList+0xb0>)
 8009510:	681a      	ldr	r2, [r3, #0]
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	601a      	str	r2, [r3, #0]
 8009516:	e003      	b.n	8009520 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	681a      	ldr	r2, [r3, #0]
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009520:	68fa      	ldr	r2, [r7, #12]
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	429a      	cmp	r2, r3
 8009526:	d002      	beq.n	800952e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	687a      	ldr	r2, [r7, #4]
 800952c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800952e:	bf00      	nop
 8009530:	3714      	adds	r7, #20
 8009532:	46bd      	mov	sp, r7
 8009534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009538:	4770      	bx	lr
 800953a:	bf00      	nop
 800953c:	200041ec 	.word	0x200041ec
 8009540:	200041f4 	.word	0x200041f4

08009544 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009544:	b580      	push	{r7, lr}
 8009546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009548:	2200      	movs	r2, #0
 800954a:	4912      	ldr	r1, [pc, #72]	@ (8009594 <MX_USB_DEVICE_Init+0x50>)
 800954c:	4812      	ldr	r0, [pc, #72]	@ (8009598 <MX_USB_DEVICE_Init+0x54>)
 800954e:	f7fc faed 	bl	8005b2c <USBD_Init>
 8009552:	4603      	mov	r3, r0
 8009554:	2b00      	cmp	r3, #0
 8009556:	d001      	beq.n	800955c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009558:	f7f7 f9ed 	bl	8000936 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800955c:	490f      	ldr	r1, [pc, #60]	@ (800959c <MX_USB_DEVICE_Init+0x58>)
 800955e:	480e      	ldr	r0, [pc, #56]	@ (8009598 <MX_USB_DEVICE_Init+0x54>)
 8009560:	f7fc fb14 	bl	8005b8c <USBD_RegisterClass>
 8009564:	4603      	mov	r3, r0
 8009566:	2b00      	cmp	r3, #0
 8009568:	d001      	beq.n	800956e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800956a:	f7f7 f9e4 	bl	8000936 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800956e:	490c      	ldr	r1, [pc, #48]	@ (80095a0 <MX_USB_DEVICE_Init+0x5c>)
 8009570:	4809      	ldr	r0, [pc, #36]	@ (8009598 <MX_USB_DEVICE_Init+0x54>)
 8009572:	f7fc fa0b 	bl	800598c <USBD_CDC_RegisterInterface>
 8009576:	4603      	mov	r3, r0
 8009578:	2b00      	cmp	r3, #0
 800957a:	d001      	beq.n	8009580 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800957c:	f7f7 f9db 	bl	8000936 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009580:	4805      	ldr	r0, [pc, #20]	@ (8009598 <MX_USB_DEVICE_Init+0x54>)
 8009582:	f7fc fb39 	bl	8005bf8 <USBD_Start>
 8009586:	4603      	mov	r3, r0
 8009588:	2b00      	cmp	r3, #0
 800958a:	d001      	beq.n	8009590 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800958c:	f7f7 f9d3 	bl	8000936 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009590:	bf00      	nop
 8009592:	bd80      	pop	{r7, pc}
 8009594:	200000b0 	.word	0x200000b0
 8009598:	2000420c 	.word	0x2000420c
 800959c:	20000018 	.word	0x20000018
 80095a0:	2000009c 	.word	0x2000009c

080095a4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80095a4:	b580      	push	{r7, lr}
 80095a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80095a8:	2200      	movs	r2, #0
 80095aa:	4905      	ldr	r1, [pc, #20]	@ (80095c0 <CDC_Init_FS+0x1c>)
 80095ac:	4805      	ldr	r0, [pc, #20]	@ (80095c4 <CDC_Init_FS+0x20>)
 80095ae:	f7fc fa07 	bl	80059c0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80095b2:	4905      	ldr	r1, [pc, #20]	@ (80095c8 <CDC_Init_FS+0x24>)
 80095b4:	4803      	ldr	r0, [pc, #12]	@ (80095c4 <CDC_Init_FS+0x20>)
 80095b6:	f7fc fa25 	bl	8005a04 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80095ba:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80095bc:	4618      	mov	r0, r3
 80095be:	bd80      	pop	{r7, pc}
 80095c0:	20004ce8 	.word	0x20004ce8
 80095c4:	2000420c 	.word	0x2000420c
 80095c8:	200044e8 	.word	0x200044e8

080095cc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80095cc:	b480      	push	{r7}
 80095ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80095d0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80095d2:	4618      	mov	r0, r3
 80095d4:	46bd      	mov	sp, r7
 80095d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095da:	4770      	bx	lr

080095dc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80095dc:	b480      	push	{r7}
 80095de:	b083      	sub	sp, #12
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	4603      	mov	r3, r0
 80095e4:	6039      	str	r1, [r7, #0]
 80095e6:	71fb      	strb	r3, [r7, #7]
 80095e8:	4613      	mov	r3, r2
 80095ea:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80095ec:	79fb      	ldrb	r3, [r7, #7]
 80095ee:	2b23      	cmp	r3, #35	@ 0x23
 80095f0:	d84a      	bhi.n	8009688 <CDC_Control_FS+0xac>
 80095f2:	a201      	add	r2, pc, #4	@ (adr r2, 80095f8 <CDC_Control_FS+0x1c>)
 80095f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095f8:	08009689 	.word	0x08009689
 80095fc:	08009689 	.word	0x08009689
 8009600:	08009689 	.word	0x08009689
 8009604:	08009689 	.word	0x08009689
 8009608:	08009689 	.word	0x08009689
 800960c:	08009689 	.word	0x08009689
 8009610:	08009689 	.word	0x08009689
 8009614:	08009689 	.word	0x08009689
 8009618:	08009689 	.word	0x08009689
 800961c:	08009689 	.word	0x08009689
 8009620:	08009689 	.word	0x08009689
 8009624:	08009689 	.word	0x08009689
 8009628:	08009689 	.word	0x08009689
 800962c:	08009689 	.word	0x08009689
 8009630:	08009689 	.word	0x08009689
 8009634:	08009689 	.word	0x08009689
 8009638:	08009689 	.word	0x08009689
 800963c:	08009689 	.word	0x08009689
 8009640:	08009689 	.word	0x08009689
 8009644:	08009689 	.word	0x08009689
 8009648:	08009689 	.word	0x08009689
 800964c:	08009689 	.word	0x08009689
 8009650:	08009689 	.word	0x08009689
 8009654:	08009689 	.word	0x08009689
 8009658:	08009689 	.word	0x08009689
 800965c:	08009689 	.word	0x08009689
 8009660:	08009689 	.word	0x08009689
 8009664:	08009689 	.word	0x08009689
 8009668:	08009689 	.word	0x08009689
 800966c:	08009689 	.word	0x08009689
 8009670:	08009689 	.word	0x08009689
 8009674:	08009689 	.word	0x08009689
 8009678:	08009689 	.word	0x08009689
 800967c:	08009689 	.word	0x08009689
 8009680:	08009689 	.word	0x08009689
 8009684:	08009689 	.word	0x08009689
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009688:	bf00      	nop
  }

  return (USBD_OK);
 800968a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800968c:	4618      	mov	r0, r3
 800968e:	370c      	adds	r7, #12
 8009690:	46bd      	mov	sp, r7
 8009692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009696:	4770      	bx	lr

08009698 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009698:	b580      	push	{r7, lr}
 800969a:	b082      	sub	sp, #8
 800969c:	af00      	add	r7, sp, #0
 800969e:	6078      	str	r0, [r7, #4]
 80096a0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80096a2:	6879      	ldr	r1, [r7, #4]
 80096a4:	4805      	ldr	r0, [pc, #20]	@ (80096bc <CDC_Receive_FS+0x24>)
 80096a6:	f7fc f9ad 	bl	8005a04 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80096aa:	4804      	ldr	r0, [pc, #16]	@ (80096bc <CDC_Receive_FS+0x24>)
 80096ac:	f7fc fa08 	bl	8005ac0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80096b0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80096b2:	4618      	mov	r0, r3
 80096b4:	3708      	adds	r7, #8
 80096b6:	46bd      	mov	sp, r7
 80096b8:	bd80      	pop	{r7, pc}
 80096ba:	bf00      	nop
 80096bc:	2000420c 	.word	0x2000420c

080096c0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	b084      	sub	sp, #16
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	6078      	str	r0, [r7, #4]
 80096c8:	460b      	mov	r3, r1
 80096ca:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80096cc:	2300      	movs	r3, #0
 80096ce:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80096d0:	4b0d      	ldr	r3, [pc, #52]	@ (8009708 <CDC_Transmit_FS+0x48>)
 80096d2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80096d6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80096d8:	68bb      	ldr	r3, [r7, #8]
 80096da:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d001      	beq.n	80096e6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80096e2:	2301      	movs	r3, #1
 80096e4:	e00b      	b.n	80096fe <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80096e6:	887b      	ldrh	r3, [r7, #2]
 80096e8:	461a      	mov	r2, r3
 80096ea:	6879      	ldr	r1, [r7, #4]
 80096ec:	4806      	ldr	r0, [pc, #24]	@ (8009708 <CDC_Transmit_FS+0x48>)
 80096ee:	f7fc f967 	bl	80059c0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80096f2:	4805      	ldr	r0, [pc, #20]	@ (8009708 <CDC_Transmit_FS+0x48>)
 80096f4:	f7fc f9a4 	bl	8005a40 <USBD_CDC_TransmitPacket>
 80096f8:	4603      	mov	r3, r0
 80096fa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80096fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80096fe:	4618      	mov	r0, r3
 8009700:	3710      	adds	r7, #16
 8009702:	46bd      	mov	sp, r7
 8009704:	bd80      	pop	{r7, pc}
 8009706:	bf00      	nop
 8009708:	2000420c 	.word	0x2000420c

0800970c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800970c:	b480      	push	{r7}
 800970e:	b087      	sub	sp, #28
 8009710:	af00      	add	r7, sp, #0
 8009712:	60f8      	str	r0, [r7, #12]
 8009714:	60b9      	str	r1, [r7, #8]
 8009716:	4613      	mov	r3, r2
 8009718:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800971a:	2300      	movs	r3, #0
 800971c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800971e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009722:	4618      	mov	r0, r3
 8009724:	371c      	adds	r7, #28
 8009726:	46bd      	mov	sp, r7
 8009728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800972c:	4770      	bx	lr
	...

08009730 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009730:	b480      	push	{r7}
 8009732:	b083      	sub	sp, #12
 8009734:	af00      	add	r7, sp, #0
 8009736:	4603      	mov	r3, r0
 8009738:	6039      	str	r1, [r7, #0]
 800973a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800973c:	683b      	ldr	r3, [r7, #0]
 800973e:	2212      	movs	r2, #18
 8009740:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009742:	4b03      	ldr	r3, [pc, #12]	@ (8009750 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009744:	4618      	mov	r0, r3
 8009746:	370c      	adds	r7, #12
 8009748:	46bd      	mov	sp, r7
 800974a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974e:	4770      	bx	lr
 8009750:	200000cc 	.word	0x200000cc

08009754 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009754:	b480      	push	{r7}
 8009756:	b083      	sub	sp, #12
 8009758:	af00      	add	r7, sp, #0
 800975a:	4603      	mov	r3, r0
 800975c:	6039      	str	r1, [r7, #0]
 800975e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009760:	683b      	ldr	r3, [r7, #0]
 8009762:	2204      	movs	r2, #4
 8009764:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009766:	4b03      	ldr	r3, [pc, #12]	@ (8009774 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009768:	4618      	mov	r0, r3
 800976a:	370c      	adds	r7, #12
 800976c:	46bd      	mov	sp, r7
 800976e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009772:	4770      	bx	lr
 8009774:	200000e0 	.word	0x200000e0

08009778 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009778:	b580      	push	{r7, lr}
 800977a:	b082      	sub	sp, #8
 800977c:	af00      	add	r7, sp, #0
 800977e:	4603      	mov	r3, r0
 8009780:	6039      	str	r1, [r7, #0]
 8009782:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009784:	79fb      	ldrb	r3, [r7, #7]
 8009786:	2b00      	cmp	r3, #0
 8009788:	d105      	bne.n	8009796 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800978a:	683a      	ldr	r2, [r7, #0]
 800978c:	4907      	ldr	r1, [pc, #28]	@ (80097ac <USBD_FS_ProductStrDescriptor+0x34>)
 800978e:	4808      	ldr	r0, [pc, #32]	@ (80097b0 <USBD_FS_ProductStrDescriptor+0x38>)
 8009790:	f7fd fbe2 	bl	8006f58 <USBD_GetString>
 8009794:	e004      	b.n	80097a0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009796:	683a      	ldr	r2, [r7, #0]
 8009798:	4904      	ldr	r1, [pc, #16]	@ (80097ac <USBD_FS_ProductStrDescriptor+0x34>)
 800979a:	4805      	ldr	r0, [pc, #20]	@ (80097b0 <USBD_FS_ProductStrDescriptor+0x38>)
 800979c:	f7fd fbdc 	bl	8006f58 <USBD_GetString>
  }
  return USBD_StrDesc;
 80097a0:	4b02      	ldr	r3, [pc, #8]	@ (80097ac <USBD_FS_ProductStrDescriptor+0x34>)
}
 80097a2:	4618      	mov	r0, r3
 80097a4:	3708      	adds	r7, #8
 80097a6:	46bd      	mov	sp, r7
 80097a8:	bd80      	pop	{r7, pc}
 80097aa:	bf00      	nop
 80097ac:	200054e8 	.word	0x200054e8
 80097b0:	0800a1dc 	.word	0x0800a1dc

080097b4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80097b4:	b580      	push	{r7, lr}
 80097b6:	b082      	sub	sp, #8
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	4603      	mov	r3, r0
 80097bc:	6039      	str	r1, [r7, #0]
 80097be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80097c0:	683a      	ldr	r2, [r7, #0]
 80097c2:	4904      	ldr	r1, [pc, #16]	@ (80097d4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80097c4:	4804      	ldr	r0, [pc, #16]	@ (80097d8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80097c6:	f7fd fbc7 	bl	8006f58 <USBD_GetString>
  return USBD_StrDesc;
 80097ca:	4b02      	ldr	r3, [pc, #8]	@ (80097d4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80097cc:	4618      	mov	r0, r3
 80097ce:	3708      	adds	r7, #8
 80097d0:	46bd      	mov	sp, r7
 80097d2:	bd80      	pop	{r7, pc}
 80097d4:	200054e8 	.word	0x200054e8
 80097d8:	0800a1f0 	.word	0x0800a1f0

080097dc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80097dc:	b580      	push	{r7, lr}
 80097de:	b082      	sub	sp, #8
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	4603      	mov	r3, r0
 80097e4:	6039      	str	r1, [r7, #0]
 80097e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80097e8:	683b      	ldr	r3, [r7, #0]
 80097ea:	221a      	movs	r2, #26
 80097ec:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80097ee:	f000 f843 	bl	8009878 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80097f2:	4b02      	ldr	r3, [pc, #8]	@ (80097fc <USBD_FS_SerialStrDescriptor+0x20>)
}
 80097f4:	4618      	mov	r0, r3
 80097f6:	3708      	adds	r7, #8
 80097f8:	46bd      	mov	sp, r7
 80097fa:	bd80      	pop	{r7, pc}
 80097fc:	200000e4 	.word	0x200000e4

08009800 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009800:	b580      	push	{r7, lr}
 8009802:	b082      	sub	sp, #8
 8009804:	af00      	add	r7, sp, #0
 8009806:	4603      	mov	r3, r0
 8009808:	6039      	str	r1, [r7, #0]
 800980a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800980c:	79fb      	ldrb	r3, [r7, #7]
 800980e:	2b00      	cmp	r3, #0
 8009810:	d105      	bne.n	800981e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009812:	683a      	ldr	r2, [r7, #0]
 8009814:	4907      	ldr	r1, [pc, #28]	@ (8009834 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009816:	4808      	ldr	r0, [pc, #32]	@ (8009838 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009818:	f7fd fb9e 	bl	8006f58 <USBD_GetString>
 800981c:	e004      	b.n	8009828 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800981e:	683a      	ldr	r2, [r7, #0]
 8009820:	4904      	ldr	r1, [pc, #16]	@ (8009834 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009822:	4805      	ldr	r0, [pc, #20]	@ (8009838 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009824:	f7fd fb98 	bl	8006f58 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009828:	4b02      	ldr	r3, [pc, #8]	@ (8009834 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800982a:	4618      	mov	r0, r3
 800982c:	3708      	adds	r7, #8
 800982e:	46bd      	mov	sp, r7
 8009830:	bd80      	pop	{r7, pc}
 8009832:	bf00      	nop
 8009834:	200054e8 	.word	0x200054e8
 8009838:	0800a204 	.word	0x0800a204

0800983c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800983c:	b580      	push	{r7, lr}
 800983e:	b082      	sub	sp, #8
 8009840:	af00      	add	r7, sp, #0
 8009842:	4603      	mov	r3, r0
 8009844:	6039      	str	r1, [r7, #0]
 8009846:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009848:	79fb      	ldrb	r3, [r7, #7]
 800984a:	2b00      	cmp	r3, #0
 800984c:	d105      	bne.n	800985a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800984e:	683a      	ldr	r2, [r7, #0]
 8009850:	4907      	ldr	r1, [pc, #28]	@ (8009870 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009852:	4808      	ldr	r0, [pc, #32]	@ (8009874 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009854:	f7fd fb80 	bl	8006f58 <USBD_GetString>
 8009858:	e004      	b.n	8009864 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800985a:	683a      	ldr	r2, [r7, #0]
 800985c:	4904      	ldr	r1, [pc, #16]	@ (8009870 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800985e:	4805      	ldr	r0, [pc, #20]	@ (8009874 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009860:	f7fd fb7a 	bl	8006f58 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009864:	4b02      	ldr	r3, [pc, #8]	@ (8009870 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009866:	4618      	mov	r0, r3
 8009868:	3708      	adds	r7, #8
 800986a:	46bd      	mov	sp, r7
 800986c:	bd80      	pop	{r7, pc}
 800986e:	bf00      	nop
 8009870:	200054e8 	.word	0x200054e8
 8009874:	0800a210 	.word	0x0800a210

08009878 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009878:	b580      	push	{r7, lr}
 800987a:	b084      	sub	sp, #16
 800987c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800987e:	4b0f      	ldr	r3, [pc, #60]	@ (80098bc <Get_SerialNum+0x44>)
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009884:	4b0e      	ldr	r3, [pc, #56]	@ (80098c0 <Get_SerialNum+0x48>)
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800988a:	4b0e      	ldr	r3, [pc, #56]	@ (80098c4 <Get_SerialNum+0x4c>)
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009890:	68fa      	ldr	r2, [r7, #12]
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	4413      	add	r3, r2
 8009896:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	2b00      	cmp	r3, #0
 800989c:	d009      	beq.n	80098b2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800989e:	2208      	movs	r2, #8
 80098a0:	4909      	ldr	r1, [pc, #36]	@ (80098c8 <Get_SerialNum+0x50>)
 80098a2:	68f8      	ldr	r0, [r7, #12]
 80098a4:	f000 f814 	bl	80098d0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80098a8:	2204      	movs	r2, #4
 80098aa:	4908      	ldr	r1, [pc, #32]	@ (80098cc <Get_SerialNum+0x54>)
 80098ac:	68b8      	ldr	r0, [r7, #8]
 80098ae:	f000 f80f 	bl	80098d0 <IntToUnicode>
  }
}
 80098b2:	bf00      	nop
 80098b4:	3710      	adds	r7, #16
 80098b6:	46bd      	mov	sp, r7
 80098b8:	bd80      	pop	{r7, pc}
 80098ba:	bf00      	nop
 80098bc:	1fff7a10 	.word	0x1fff7a10
 80098c0:	1fff7a14 	.word	0x1fff7a14
 80098c4:	1fff7a18 	.word	0x1fff7a18
 80098c8:	200000e6 	.word	0x200000e6
 80098cc:	200000f6 	.word	0x200000f6

080098d0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80098d0:	b480      	push	{r7}
 80098d2:	b087      	sub	sp, #28
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	60f8      	str	r0, [r7, #12]
 80098d8:	60b9      	str	r1, [r7, #8]
 80098da:	4613      	mov	r3, r2
 80098dc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80098de:	2300      	movs	r3, #0
 80098e0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80098e2:	2300      	movs	r3, #0
 80098e4:	75fb      	strb	r3, [r7, #23]
 80098e6:	e027      	b.n	8009938 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	0f1b      	lsrs	r3, r3, #28
 80098ec:	2b09      	cmp	r3, #9
 80098ee:	d80b      	bhi.n	8009908 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	0f1b      	lsrs	r3, r3, #28
 80098f4:	b2da      	uxtb	r2, r3
 80098f6:	7dfb      	ldrb	r3, [r7, #23]
 80098f8:	005b      	lsls	r3, r3, #1
 80098fa:	4619      	mov	r1, r3
 80098fc:	68bb      	ldr	r3, [r7, #8]
 80098fe:	440b      	add	r3, r1
 8009900:	3230      	adds	r2, #48	@ 0x30
 8009902:	b2d2      	uxtb	r2, r2
 8009904:	701a      	strb	r2, [r3, #0]
 8009906:	e00a      	b.n	800991e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	0f1b      	lsrs	r3, r3, #28
 800990c:	b2da      	uxtb	r2, r3
 800990e:	7dfb      	ldrb	r3, [r7, #23]
 8009910:	005b      	lsls	r3, r3, #1
 8009912:	4619      	mov	r1, r3
 8009914:	68bb      	ldr	r3, [r7, #8]
 8009916:	440b      	add	r3, r1
 8009918:	3237      	adds	r2, #55	@ 0x37
 800991a:	b2d2      	uxtb	r2, r2
 800991c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	011b      	lsls	r3, r3, #4
 8009922:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009924:	7dfb      	ldrb	r3, [r7, #23]
 8009926:	005b      	lsls	r3, r3, #1
 8009928:	3301      	adds	r3, #1
 800992a:	68ba      	ldr	r2, [r7, #8]
 800992c:	4413      	add	r3, r2
 800992e:	2200      	movs	r2, #0
 8009930:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009932:	7dfb      	ldrb	r3, [r7, #23]
 8009934:	3301      	adds	r3, #1
 8009936:	75fb      	strb	r3, [r7, #23]
 8009938:	7dfa      	ldrb	r2, [r7, #23]
 800993a:	79fb      	ldrb	r3, [r7, #7]
 800993c:	429a      	cmp	r2, r3
 800993e:	d3d3      	bcc.n	80098e8 <IntToUnicode+0x18>
  }
}
 8009940:	bf00      	nop
 8009942:	bf00      	nop
 8009944:	371c      	adds	r7, #28
 8009946:	46bd      	mov	sp, r7
 8009948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800994c:	4770      	bx	lr
	...

08009950 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009950:	b580      	push	{r7, lr}
 8009952:	b08a      	sub	sp, #40	@ 0x28
 8009954:	af00      	add	r7, sp, #0
 8009956:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009958:	f107 0314 	add.w	r3, r7, #20
 800995c:	2200      	movs	r2, #0
 800995e:	601a      	str	r2, [r3, #0]
 8009960:	605a      	str	r2, [r3, #4]
 8009962:	609a      	str	r2, [r3, #8]
 8009964:	60da      	str	r2, [r3, #12]
 8009966:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009970:	d13a      	bne.n	80099e8 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009972:	2300      	movs	r3, #0
 8009974:	613b      	str	r3, [r7, #16]
 8009976:	4b1e      	ldr	r3, [pc, #120]	@ (80099f0 <HAL_PCD_MspInit+0xa0>)
 8009978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800997a:	4a1d      	ldr	r2, [pc, #116]	@ (80099f0 <HAL_PCD_MspInit+0xa0>)
 800997c:	f043 0301 	orr.w	r3, r3, #1
 8009980:	6313      	str	r3, [r2, #48]	@ 0x30
 8009982:	4b1b      	ldr	r3, [pc, #108]	@ (80099f0 <HAL_PCD_MspInit+0xa0>)
 8009984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009986:	f003 0301 	and.w	r3, r3, #1
 800998a:	613b      	str	r3, [r7, #16]
 800998c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800998e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8009992:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009994:	2302      	movs	r3, #2
 8009996:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009998:	2300      	movs	r3, #0
 800999a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800999c:	2303      	movs	r3, #3
 800999e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80099a0:	230a      	movs	r3, #10
 80099a2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80099a4:	f107 0314 	add.w	r3, r7, #20
 80099a8:	4619      	mov	r1, r3
 80099aa:	4812      	ldr	r0, [pc, #72]	@ (80099f4 <HAL_PCD_MspInit+0xa4>)
 80099ac:	f7f7 fa6e 	bl	8000e8c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80099b0:	4b0f      	ldr	r3, [pc, #60]	@ (80099f0 <HAL_PCD_MspInit+0xa0>)
 80099b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80099b4:	4a0e      	ldr	r2, [pc, #56]	@ (80099f0 <HAL_PCD_MspInit+0xa0>)
 80099b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80099ba:	6353      	str	r3, [r2, #52]	@ 0x34
 80099bc:	2300      	movs	r3, #0
 80099be:	60fb      	str	r3, [r7, #12]
 80099c0:	4b0b      	ldr	r3, [pc, #44]	@ (80099f0 <HAL_PCD_MspInit+0xa0>)
 80099c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80099c4:	4a0a      	ldr	r2, [pc, #40]	@ (80099f0 <HAL_PCD_MspInit+0xa0>)
 80099c6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80099ca:	6453      	str	r3, [r2, #68]	@ 0x44
 80099cc:	4b08      	ldr	r3, [pc, #32]	@ (80099f0 <HAL_PCD_MspInit+0xa0>)
 80099ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80099d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80099d4:	60fb      	str	r3, [r7, #12]
 80099d6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 80099d8:	2200      	movs	r2, #0
 80099da:	2105      	movs	r1, #5
 80099dc:	2043      	movs	r0, #67	@ 0x43
 80099de:	f7f7 fa2b 	bl	8000e38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80099e2:	2043      	movs	r0, #67	@ 0x43
 80099e4:	f7f7 fa44 	bl	8000e70 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80099e8:	bf00      	nop
 80099ea:	3728      	adds	r7, #40	@ 0x28
 80099ec:	46bd      	mov	sp, r7
 80099ee:	bd80      	pop	{r7, pc}
 80099f0:	40023800 	.word	0x40023800
 80099f4:	40020000 	.word	0x40020000

080099f8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80099f8:	b580      	push	{r7, lr}
 80099fa:	b082      	sub	sp, #8
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8009a0c:	4619      	mov	r1, r3
 8009a0e:	4610      	mov	r0, r2
 8009a10:	f7fc f93f 	bl	8005c92 <USBD_LL_SetupStage>
}
 8009a14:	bf00      	nop
 8009a16:	3708      	adds	r7, #8
 8009a18:	46bd      	mov	sp, r7
 8009a1a:	bd80      	pop	{r7, pc}

08009a1c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a1c:	b580      	push	{r7, lr}
 8009a1e:	b082      	sub	sp, #8
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	6078      	str	r0, [r7, #4]
 8009a24:	460b      	mov	r3, r1
 8009a26:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8009a2e:	78fa      	ldrb	r2, [r7, #3]
 8009a30:	6879      	ldr	r1, [r7, #4]
 8009a32:	4613      	mov	r3, r2
 8009a34:	00db      	lsls	r3, r3, #3
 8009a36:	4413      	add	r3, r2
 8009a38:	009b      	lsls	r3, r3, #2
 8009a3a:	440b      	add	r3, r1
 8009a3c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8009a40:	681a      	ldr	r2, [r3, #0]
 8009a42:	78fb      	ldrb	r3, [r7, #3]
 8009a44:	4619      	mov	r1, r3
 8009a46:	f7fc f979 	bl	8005d3c <USBD_LL_DataOutStage>
}
 8009a4a:	bf00      	nop
 8009a4c:	3708      	adds	r7, #8
 8009a4e:	46bd      	mov	sp, r7
 8009a50:	bd80      	pop	{r7, pc}

08009a52 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a52:	b580      	push	{r7, lr}
 8009a54:	b082      	sub	sp, #8
 8009a56:	af00      	add	r7, sp, #0
 8009a58:	6078      	str	r0, [r7, #4]
 8009a5a:	460b      	mov	r3, r1
 8009a5c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8009a64:	78fa      	ldrb	r2, [r7, #3]
 8009a66:	6879      	ldr	r1, [r7, #4]
 8009a68:	4613      	mov	r3, r2
 8009a6a:	00db      	lsls	r3, r3, #3
 8009a6c:	4413      	add	r3, r2
 8009a6e:	009b      	lsls	r3, r3, #2
 8009a70:	440b      	add	r3, r1
 8009a72:	3320      	adds	r3, #32
 8009a74:	681a      	ldr	r2, [r3, #0]
 8009a76:	78fb      	ldrb	r3, [r7, #3]
 8009a78:	4619      	mov	r1, r3
 8009a7a:	f7fc fa12 	bl	8005ea2 <USBD_LL_DataInStage>
}
 8009a7e:	bf00      	nop
 8009a80:	3708      	adds	r7, #8
 8009a82:	46bd      	mov	sp, r7
 8009a84:	bd80      	pop	{r7, pc}

08009a86 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a86:	b580      	push	{r7, lr}
 8009a88:	b082      	sub	sp, #8
 8009a8a:	af00      	add	r7, sp, #0
 8009a8c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009a94:	4618      	mov	r0, r3
 8009a96:	f7fc fb4c 	bl	8006132 <USBD_LL_SOF>
}
 8009a9a:	bf00      	nop
 8009a9c:	3708      	adds	r7, #8
 8009a9e:	46bd      	mov	sp, r7
 8009aa0:	bd80      	pop	{r7, pc}

08009aa2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009aa2:	b580      	push	{r7, lr}
 8009aa4:	b084      	sub	sp, #16
 8009aa6:	af00      	add	r7, sp, #0
 8009aa8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009aaa:	2301      	movs	r3, #1
 8009aac:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	79db      	ldrb	r3, [r3, #7]
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d102      	bne.n	8009abc <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8009ab6:	2300      	movs	r3, #0
 8009ab8:	73fb      	strb	r3, [r7, #15]
 8009aba:	e008      	b.n	8009ace <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	79db      	ldrb	r3, [r3, #7]
 8009ac0:	2b02      	cmp	r3, #2
 8009ac2:	d102      	bne.n	8009aca <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8009ac4:	2301      	movs	r3, #1
 8009ac6:	73fb      	strb	r3, [r7, #15]
 8009ac8:	e001      	b.n	8009ace <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8009aca:	f7f6 ff34 	bl	8000936 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009ad4:	7bfa      	ldrb	r2, [r7, #15]
 8009ad6:	4611      	mov	r1, r2
 8009ad8:	4618      	mov	r0, r3
 8009ada:	f7fc fae6 	bl	80060aa <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	f7fc fa8e 	bl	8006006 <USBD_LL_Reset>
}
 8009aea:	bf00      	nop
 8009aec:	3710      	adds	r7, #16
 8009aee:	46bd      	mov	sp, r7
 8009af0:	bd80      	pop	{r7, pc}
	...

08009af4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009af4:	b580      	push	{r7, lr}
 8009af6:	b082      	sub	sp, #8
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009b02:	4618      	mov	r0, r3
 8009b04:	f7fc fae1 	bl	80060ca <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	687a      	ldr	r2, [r7, #4]
 8009b14:	6812      	ldr	r2, [r2, #0]
 8009b16:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009b1a:	f043 0301 	orr.w	r3, r3, #1
 8009b1e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	7adb      	ldrb	r3, [r3, #11]
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d005      	beq.n	8009b34 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009b28:	4b04      	ldr	r3, [pc, #16]	@ (8009b3c <HAL_PCD_SuspendCallback+0x48>)
 8009b2a:	691b      	ldr	r3, [r3, #16]
 8009b2c:	4a03      	ldr	r2, [pc, #12]	@ (8009b3c <HAL_PCD_SuspendCallback+0x48>)
 8009b2e:	f043 0306 	orr.w	r3, r3, #6
 8009b32:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009b34:	bf00      	nop
 8009b36:	3708      	adds	r7, #8
 8009b38:	46bd      	mov	sp, r7
 8009b3a:	bd80      	pop	{r7, pc}
 8009b3c:	e000ed00 	.word	0xe000ed00

08009b40 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b40:	b580      	push	{r7, lr}
 8009b42:	b082      	sub	sp, #8
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009b4e:	4618      	mov	r0, r3
 8009b50:	f7fc fad7 	bl	8006102 <USBD_LL_Resume>
}
 8009b54:	bf00      	nop
 8009b56:	3708      	adds	r7, #8
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	bd80      	pop	{r7, pc}

08009b5c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b5c:	b580      	push	{r7, lr}
 8009b5e:	b082      	sub	sp, #8
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	6078      	str	r0, [r7, #4]
 8009b64:	460b      	mov	r3, r1
 8009b66:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009b6e:	78fa      	ldrb	r2, [r7, #3]
 8009b70:	4611      	mov	r1, r2
 8009b72:	4618      	mov	r0, r3
 8009b74:	f7fc fb2f 	bl	80061d6 <USBD_LL_IsoOUTIncomplete>
}
 8009b78:	bf00      	nop
 8009b7a:	3708      	adds	r7, #8
 8009b7c:	46bd      	mov	sp, r7
 8009b7e:	bd80      	pop	{r7, pc}

08009b80 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b80:	b580      	push	{r7, lr}
 8009b82:	b082      	sub	sp, #8
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	6078      	str	r0, [r7, #4]
 8009b88:	460b      	mov	r3, r1
 8009b8a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009b92:	78fa      	ldrb	r2, [r7, #3]
 8009b94:	4611      	mov	r1, r2
 8009b96:	4618      	mov	r0, r3
 8009b98:	f7fc faeb 	bl	8006172 <USBD_LL_IsoINIncomplete>
}
 8009b9c:	bf00      	nop
 8009b9e:	3708      	adds	r7, #8
 8009ba0:	46bd      	mov	sp, r7
 8009ba2:	bd80      	pop	{r7, pc}

08009ba4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ba4:	b580      	push	{r7, lr}
 8009ba6:	b082      	sub	sp, #8
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	f7fc fb41 	bl	800623a <USBD_LL_DevConnected>
}
 8009bb8:	bf00      	nop
 8009bba:	3708      	adds	r7, #8
 8009bbc:	46bd      	mov	sp, r7
 8009bbe:	bd80      	pop	{r7, pc}

08009bc0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009bc0:	b580      	push	{r7, lr}
 8009bc2:	b082      	sub	sp, #8
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009bce:	4618      	mov	r0, r3
 8009bd0:	f7fc fb3e 	bl	8006250 <USBD_LL_DevDisconnected>
}
 8009bd4:	bf00      	nop
 8009bd6:	3708      	adds	r7, #8
 8009bd8:	46bd      	mov	sp, r7
 8009bda:	bd80      	pop	{r7, pc}

08009bdc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009bdc:	b580      	push	{r7, lr}
 8009bde:	b082      	sub	sp, #8
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	781b      	ldrb	r3, [r3, #0]
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d13c      	bne.n	8009c66 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009bec:	4a20      	ldr	r2, [pc, #128]	@ (8009c70 <USBD_LL_Init+0x94>)
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	4a1e      	ldr	r2, [pc, #120]	@ (8009c70 <USBD_LL_Init+0x94>)
 8009bf8:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009bfc:	4b1c      	ldr	r3, [pc, #112]	@ (8009c70 <USBD_LL_Init+0x94>)
 8009bfe:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8009c02:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009c04:	4b1a      	ldr	r3, [pc, #104]	@ (8009c70 <USBD_LL_Init+0x94>)
 8009c06:	2204      	movs	r2, #4
 8009c08:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009c0a:	4b19      	ldr	r3, [pc, #100]	@ (8009c70 <USBD_LL_Init+0x94>)
 8009c0c:	2202      	movs	r2, #2
 8009c0e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009c10:	4b17      	ldr	r3, [pc, #92]	@ (8009c70 <USBD_LL_Init+0x94>)
 8009c12:	2200      	movs	r2, #0
 8009c14:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009c16:	4b16      	ldr	r3, [pc, #88]	@ (8009c70 <USBD_LL_Init+0x94>)
 8009c18:	2202      	movs	r2, #2
 8009c1a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009c1c:	4b14      	ldr	r3, [pc, #80]	@ (8009c70 <USBD_LL_Init+0x94>)
 8009c1e:	2200      	movs	r2, #0
 8009c20:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009c22:	4b13      	ldr	r3, [pc, #76]	@ (8009c70 <USBD_LL_Init+0x94>)
 8009c24:	2200      	movs	r2, #0
 8009c26:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009c28:	4b11      	ldr	r3, [pc, #68]	@ (8009c70 <USBD_LL_Init+0x94>)
 8009c2a:	2200      	movs	r2, #0
 8009c2c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009c2e:	4b10      	ldr	r3, [pc, #64]	@ (8009c70 <USBD_LL_Init+0x94>)
 8009c30:	2200      	movs	r2, #0
 8009c32:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009c34:	4b0e      	ldr	r3, [pc, #56]	@ (8009c70 <USBD_LL_Init+0x94>)
 8009c36:	2200      	movs	r2, #0
 8009c38:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009c3a:	480d      	ldr	r0, [pc, #52]	@ (8009c70 <USBD_LL_Init+0x94>)
 8009c3c:	f7f7 fadb 	bl	80011f6 <HAL_PCD_Init>
 8009c40:	4603      	mov	r3, r0
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d001      	beq.n	8009c4a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8009c46:	f7f6 fe76 	bl	8000936 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009c4a:	2180      	movs	r1, #128	@ 0x80
 8009c4c:	4808      	ldr	r0, [pc, #32]	@ (8009c70 <USBD_LL_Init+0x94>)
 8009c4e:	f7f8 fd08 	bl	8002662 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009c52:	2240      	movs	r2, #64	@ 0x40
 8009c54:	2100      	movs	r1, #0
 8009c56:	4806      	ldr	r0, [pc, #24]	@ (8009c70 <USBD_LL_Init+0x94>)
 8009c58:	f7f8 fcbc 	bl	80025d4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009c5c:	2280      	movs	r2, #128	@ 0x80
 8009c5e:	2101      	movs	r1, #1
 8009c60:	4803      	ldr	r0, [pc, #12]	@ (8009c70 <USBD_LL_Init+0x94>)
 8009c62:	f7f8 fcb7 	bl	80025d4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009c66:	2300      	movs	r3, #0
}
 8009c68:	4618      	mov	r0, r3
 8009c6a:	3708      	adds	r7, #8
 8009c6c:	46bd      	mov	sp, r7
 8009c6e:	bd80      	pop	{r7, pc}
 8009c70:	200056e8 	.word	0x200056e8

08009c74 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009c74:	b580      	push	{r7, lr}
 8009c76:	b084      	sub	sp, #16
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c80:	2300      	movs	r3, #0
 8009c82:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009c8a:	4618      	mov	r0, r3
 8009c8c:	f7f7 fbc2 	bl	8001414 <HAL_PCD_Start>
 8009c90:	4603      	mov	r3, r0
 8009c92:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c94:	7bfb      	ldrb	r3, [r7, #15]
 8009c96:	4618      	mov	r0, r3
 8009c98:	f000 f942 	bl	8009f20 <USBD_Get_USB_Status>
 8009c9c:	4603      	mov	r3, r0
 8009c9e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009ca0:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ca2:	4618      	mov	r0, r3
 8009ca4:	3710      	adds	r7, #16
 8009ca6:	46bd      	mov	sp, r7
 8009ca8:	bd80      	pop	{r7, pc}

08009caa <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009caa:	b580      	push	{r7, lr}
 8009cac:	b084      	sub	sp, #16
 8009cae:	af00      	add	r7, sp, #0
 8009cb0:	6078      	str	r0, [r7, #4]
 8009cb2:	4608      	mov	r0, r1
 8009cb4:	4611      	mov	r1, r2
 8009cb6:	461a      	mov	r2, r3
 8009cb8:	4603      	mov	r3, r0
 8009cba:	70fb      	strb	r3, [r7, #3]
 8009cbc:	460b      	mov	r3, r1
 8009cbe:	70bb      	strb	r3, [r7, #2]
 8009cc0:	4613      	mov	r3, r2
 8009cc2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009cc4:	2300      	movs	r3, #0
 8009cc6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009cc8:	2300      	movs	r3, #0
 8009cca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009cd2:	78bb      	ldrb	r3, [r7, #2]
 8009cd4:	883a      	ldrh	r2, [r7, #0]
 8009cd6:	78f9      	ldrb	r1, [r7, #3]
 8009cd8:	f7f8 f896 	bl	8001e08 <HAL_PCD_EP_Open>
 8009cdc:	4603      	mov	r3, r0
 8009cde:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009ce0:	7bfb      	ldrb	r3, [r7, #15]
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	f000 f91c 	bl	8009f20 <USBD_Get_USB_Status>
 8009ce8:	4603      	mov	r3, r0
 8009cea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009cec:	7bbb      	ldrb	r3, [r7, #14]
}
 8009cee:	4618      	mov	r0, r3
 8009cf0:	3710      	adds	r7, #16
 8009cf2:	46bd      	mov	sp, r7
 8009cf4:	bd80      	pop	{r7, pc}

08009cf6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009cf6:	b580      	push	{r7, lr}
 8009cf8:	b084      	sub	sp, #16
 8009cfa:	af00      	add	r7, sp, #0
 8009cfc:	6078      	str	r0, [r7, #4]
 8009cfe:	460b      	mov	r3, r1
 8009d00:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d02:	2300      	movs	r3, #0
 8009d04:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d06:	2300      	movs	r3, #0
 8009d08:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009d10:	78fa      	ldrb	r2, [r7, #3]
 8009d12:	4611      	mov	r1, r2
 8009d14:	4618      	mov	r0, r3
 8009d16:	f7f8 f8e1 	bl	8001edc <HAL_PCD_EP_Close>
 8009d1a:	4603      	mov	r3, r0
 8009d1c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d1e:	7bfb      	ldrb	r3, [r7, #15]
 8009d20:	4618      	mov	r0, r3
 8009d22:	f000 f8fd 	bl	8009f20 <USBD_Get_USB_Status>
 8009d26:	4603      	mov	r3, r0
 8009d28:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009d2a:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d2c:	4618      	mov	r0, r3
 8009d2e:	3710      	adds	r7, #16
 8009d30:	46bd      	mov	sp, r7
 8009d32:	bd80      	pop	{r7, pc}

08009d34 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009d34:	b580      	push	{r7, lr}
 8009d36:	b084      	sub	sp, #16
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	6078      	str	r0, [r7, #4]
 8009d3c:	460b      	mov	r3, r1
 8009d3e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d40:	2300      	movs	r3, #0
 8009d42:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d44:	2300      	movs	r3, #0
 8009d46:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009d4e:	78fa      	ldrb	r2, [r7, #3]
 8009d50:	4611      	mov	r1, r2
 8009d52:	4618      	mov	r0, r3
 8009d54:	f7f8 f999 	bl	800208a <HAL_PCD_EP_SetStall>
 8009d58:	4603      	mov	r3, r0
 8009d5a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d5c:	7bfb      	ldrb	r3, [r7, #15]
 8009d5e:	4618      	mov	r0, r3
 8009d60:	f000 f8de 	bl	8009f20 <USBD_Get_USB_Status>
 8009d64:	4603      	mov	r3, r0
 8009d66:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009d68:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	3710      	adds	r7, #16
 8009d6e:	46bd      	mov	sp, r7
 8009d70:	bd80      	pop	{r7, pc}

08009d72 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009d72:	b580      	push	{r7, lr}
 8009d74:	b084      	sub	sp, #16
 8009d76:	af00      	add	r7, sp, #0
 8009d78:	6078      	str	r0, [r7, #4]
 8009d7a:	460b      	mov	r3, r1
 8009d7c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d7e:	2300      	movs	r3, #0
 8009d80:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d82:	2300      	movs	r3, #0
 8009d84:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009d8c:	78fa      	ldrb	r2, [r7, #3]
 8009d8e:	4611      	mov	r1, r2
 8009d90:	4618      	mov	r0, r3
 8009d92:	f7f8 f9dd 	bl	8002150 <HAL_PCD_EP_ClrStall>
 8009d96:	4603      	mov	r3, r0
 8009d98:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d9a:	7bfb      	ldrb	r3, [r7, #15]
 8009d9c:	4618      	mov	r0, r3
 8009d9e:	f000 f8bf 	bl	8009f20 <USBD_Get_USB_Status>
 8009da2:	4603      	mov	r3, r0
 8009da4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009da6:	7bbb      	ldrb	r3, [r7, #14]
}
 8009da8:	4618      	mov	r0, r3
 8009daa:	3710      	adds	r7, #16
 8009dac:	46bd      	mov	sp, r7
 8009dae:	bd80      	pop	{r7, pc}

08009db0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009db0:	b480      	push	{r7}
 8009db2:	b085      	sub	sp, #20
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	6078      	str	r0, [r7, #4]
 8009db8:	460b      	mov	r3, r1
 8009dba:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009dc2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009dc4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	da0b      	bge.n	8009de4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009dcc:	78fb      	ldrb	r3, [r7, #3]
 8009dce:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009dd2:	68f9      	ldr	r1, [r7, #12]
 8009dd4:	4613      	mov	r3, r2
 8009dd6:	00db      	lsls	r3, r3, #3
 8009dd8:	4413      	add	r3, r2
 8009dda:	009b      	lsls	r3, r3, #2
 8009ddc:	440b      	add	r3, r1
 8009dde:	3316      	adds	r3, #22
 8009de0:	781b      	ldrb	r3, [r3, #0]
 8009de2:	e00b      	b.n	8009dfc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009de4:	78fb      	ldrb	r3, [r7, #3]
 8009de6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009dea:	68f9      	ldr	r1, [r7, #12]
 8009dec:	4613      	mov	r3, r2
 8009dee:	00db      	lsls	r3, r3, #3
 8009df0:	4413      	add	r3, r2
 8009df2:	009b      	lsls	r3, r3, #2
 8009df4:	440b      	add	r3, r1
 8009df6:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8009dfa:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009dfc:	4618      	mov	r0, r3
 8009dfe:	3714      	adds	r7, #20
 8009e00:	46bd      	mov	sp, r7
 8009e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e06:	4770      	bx	lr

08009e08 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009e08:	b580      	push	{r7, lr}
 8009e0a:	b084      	sub	sp, #16
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	6078      	str	r0, [r7, #4]
 8009e10:	460b      	mov	r3, r1
 8009e12:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e14:	2300      	movs	r3, #0
 8009e16:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e18:	2300      	movs	r3, #0
 8009e1a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009e22:	78fa      	ldrb	r2, [r7, #3]
 8009e24:	4611      	mov	r1, r2
 8009e26:	4618      	mov	r0, r3
 8009e28:	f7f7 ffca 	bl	8001dc0 <HAL_PCD_SetAddress>
 8009e2c:	4603      	mov	r3, r0
 8009e2e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e30:	7bfb      	ldrb	r3, [r7, #15]
 8009e32:	4618      	mov	r0, r3
 8009e34:	f000 f874 	bl	8009f20 <USBD_Get_USB_Status>
 8009e38:	4603      	mov	r3, r0
 8009e3a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009e3c:	7bbb      	ldrb	r3, [r7, #14]
}
 8009e3e:	4618      	mov	r0, r3
 8009e40:	3710      	adds	r7, #16
 8009e42:	46bd      	mov	sp, r7
 8009e44:	bd80      	pop	{r7, pc}

08009e46 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009e46:	b580      	push	{r7, lr}
 8009e48:	b086      	sub	sp, #24
 8009e4a:	af00      	add	r7, sp, #0
 8009e4c:	60f8      	str	r0, [r7, #12]
 8009e4e:	607a      	str	r2, [r7, #4]
 8009e50:	603b      	str	r3, [r7, #0]
 8009e52:	460b      	mov	r3, r1
 8009e54:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e56:	2300      	movs	r3, #0
 8009e58:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e5a:	2300      	movs	r3, #0
 8009e5c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009e64:	7af9      	ldrb	r1, [r7, #11]
 8009e66:	683b      	ldr	r3, [r7, #0]
 8009e68:	687a      	ldr	r2, [r7, #4]
 8009e6a:	f7f8 f8d4 	bl	8002016 <HAL_PCD_EP_Transmit>
 8009e6e:	4603      	mov	r3, r0
 8009e70:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e72:	7dfb      	ldrb	r3, [r7, #23]
 8009e74:	4618      	mov	r0, r3
 8009e76:	f000 f853 	bl	8009f20 <USBD_Get_USB_Status>
 8009e7a:	4603      	mov	r3, r0
 8009e7c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009e7e:	7dbb      	ldrb	r3, [r7, #22]
}
 8009e80:	4618      	mov	r0, r3
 8009e82:	3718      	adds	r7, #24
 8009e84:	46bd      	mov	sp, r7
 8009e86:	bd80      	pop	{r7, pc}

08009e88 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009e88:	b580      	push	{r7, lr}
 8009e8a:	b086      	sub	sp, #24
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	60f8      	str	r0, [r7, #12]
 8009e90:	607a      	str	r2, [r7, #4]
 8009e92:	603b      	str	r3, [r7, #0]
 8009e94:	460b      	mov	r3, r1
 8009e96:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e98:	2300      	movs	r3, #0
 8009e9a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e9c:	2300      	movs	r3, #0
 8009e9e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009ea6:	7af9      	ldrb	r1, [r7, #11]
 8009ea8:	683b      	ldr	r3, [r7, #0]
 8009eaa:	687a      	ldr	r2, [r7, #4]
 8009eac:	f7f8 f860 	bl	8001f70 <HAL_PCD_EP_Receive>
 8009eb0:	4603      	mov	r3, r0
 8009eb2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009eb4:	7dfb      	ldrb	r3, [r7, #23]
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	f000 f832 	bl	8009f20 <USBD_Get_USB_Status>
 8009ebc:	4603      	mov	r3, r0
 8009ebe:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009ec0:	7dbb      	ldrb	r3, [r7, #22]
}
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	3718      	adds	r7, #24
 8009ec6:	46bd      	mov	sp, r7
 8009ec8:	bd80      	pop	{r7, pc}

08009eca <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009eca:	b580      	push	{r7, lr}
 8009ecc:	b082      	sub	sp, #8
 8009ece:	af00      	add	r7, sp, #0
 8009ed0:	6078      	str	r0, [r7, #4]
 8009ed2:	460b      	mov	r3, r1
 8009ed4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009edc:	78fa      	ldrb	r2, [r7, #3]
 8009ede:	4611      	mov	r1, r2
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	f7f8 f880 	bl	8001fe6 <HAL_PCD_EP_GetRxCount>
 8009ee6:	4603      	mov	r3, r0
}
 8009ee8:	4618      	mov	r0, r3
 8009eea:	3708      	adds	r7, #8
 8009eec:	46bd      	mov	sp, r7
 8009eee:	bd80      	pop	{r7, pc}

08009ef0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009ef0:	b480      	push	{r7}
 8009ef2:	b083      	sub	sp, #12
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009ef8:	4b03      	ldr	r3, [pc, #12]	@ (8009f08 <USBD_static_malloc+0x18>)
}
 8009efa:	4618      	mov	r0, r3
 8009efc:	370c      	adds	r7, #12
 8009efe:	46bd      	mov	sp, r7
 8009f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f04:	4770      	bx	lr
 8009f06:	bf00      	nop
 8009f08:	20005bcc 	.word	0x20005bcc

08009f0c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009f0c:	b480      	push	{r7}
 8009f0e:	b083      	sub	sp, #12
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	6078      	str	r0, [r7, #4]

}
 8009f14:	bf00      	nop
 8009f16:	370c      	adds	r7, #12
 8009f18:	46bd      	mov	sp, r7
 8009f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f1e:	4770      	bx	lr

08009f20 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009f20:	b480      	push	{r7}
 8009f22:	b085      	sub	sp, #20
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	4603      	mov	r3, r0
 8009f28:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f2a:	2300      	movs	r3, #0
 8009f2c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009f2e:	79fb      	ldrb	r3, [r7, #7]
 8009f30:	2b03      	cmp	r3, #3
 8009f32:	d817      	bhi.n	8009f64 <USBD_Get_USB_Status+0x44>
 8009f34:	a201      	add	r2, pc, #4	@ (adr r2, 8009f3c <USBD_Get_USB_Status+0x1c>)
 8009f36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f3a:	bf00      	nop
 8009f3c:	08009f4d 	.word	0x08009f4d
 8009f40:	08009f53 	.word	0x08009f53
 8009f44:	08009f59 	.word	0x08009f59
 8009f48:	08009f5f 	.word	0x08009f5f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009f4c:	2300      	movs	r3, #0
 8009f4e:	73fb      	strb	r3, [r7, #15]
    break;
 8009f50:	e00b      	b.n	8009f6a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009f52:	2303      	movs	r3, #3
 8009f54:	73fb      	strb	r3, [r7, #15]
    break;
 8009f56:	e008      	b.n	8009f6a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009f58:	2301      	movs	r3, #1
 8009f5a:	73fb      	strb	r3, [r7, #15]
    break;
 8009f5c:	e005      	b.n	8009f6a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009f5e:	2303      	movs	r3, #3
 8009f60:	73fb      	strb	r3, [r7, #15]
    break;
 8009f62:	e002      	b.n	8009f6a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009f64:	2303      	movs	r3, #3
 8009f66:	73fb      	strb	r3, [r7, #15]
    break;
 8009f68:	bf00      	nop
  }
  return usb_status;
 8009f6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f6c:	4618      	mov	r0, r3
 8009f6e:	3714      	adds	r7, #20
 8009f70:	46bd      	mov	sp, r7
 8009f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f76:	4770      	bx	lr

08009f78 <memset>:
 8009f78:	4402      	add	r2, r0
 8009f7a:	4603      	mov	r3, r0
 8009f7c:	4293      	cmp	r3, r2
 8009f7e:	d100      	bne.n	8009f82 <memset+0xa>
 8009f80:	4770      	bx	lr
 8009f82:	f803 1b01 	strb.w	r1, [r3], #1
 8009f86:	e7f9      	b.n	8009f7c <memset+0x4>

08009f88 <_reclaim_reent>:
 8009f88:	4b29      	ldr	r3, [pc, #164]	@ (800a030 <_reclaim_reent+0xa8>)
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	4283      	cmp	r3, r0
 8009f8e:	b570      	push	{r4, r5, r6, lr}
 8009f90:	4604      	mov	r4, r0
 8009f92:	d04b      	beq.n	800a02c <_reclaim_reent+0xa4>
 8009f94:	69c3      	ldr	r3, [r0, #28]
 8009f96:	b1ab      	cbz	r3, 8009fc4 <_reclaim_reent+0x3c>
 8009f98:	68db      	ldr	r3, [r3, #12]
 8009f9a:	b16b      	cbz	r3, 8009fb8 <_reclaim_reent+0x30>
 8009f9c:	2500      	movs	r5, #0
 8009f9e:	69e3      	ldr	r3, [r4, #28]
 8009fa0:	68db      	ldr	r3, [r3, #12]
 8009fa2:	5959      	ldr	r1, [r3, r5]
 8009fa4:	2900      	cmp	r1, #0
 8009fa6:	d13b      	bne.n	800a020 <_reclaim_reent+0x98>
 8009fa8:	3504      	adds	r5, #4
 8009faa:	2d80      	cmp	r5, #128	@ 0x80
 8009fac:	d1f7      	bne.n	8009f9e <_reclaim_reent+0x16>
 8009fae:	69e3      	ldr	r3, [r4, #28]
 8009fb0:	4620      	mov	r0, r4
 8009fb2:	68d9      	ldr	r1, [r3, #12]
 8009fb4:	f000 f872 	bl	800a09c <_free_r>
 8009fb8:	69e3      	ldr	r3, [r4, #28]
 8009fba:	6819      	ldr	r1, [r3, #0]
 8009fbc:	b111      	cbz	r1, 8009fc4 <_reclaim_reent+0x3c>
 8009fbe:	4620      	mov	r0, r4
 8009fc0:	f000 f86c 	bl	800a09c <_free_r>
 8009fc4:	6961      	ldr	r1, [r4, #20]
 8009fc6:	b111      	cbz	r1, 8009fce <_reclaim_reent+0x46>
 8009fc8:	4620      	mov	r0, r4
 8009fca:	f000 f867 	bl	800a09c <_free_r>
 8009fce:	69e1      	ldr	r1, [r4, #28]
 8009fd0:	b111      	cbz	r1, 8009fd8 <_reclaim_reent+0x50>
 8009fd2:	4620      	mov	r0, r4
 8009fd4:	f000 f862 	bl	800a09c <_free_r>
 8009fd8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8009fda:	b111      	cbz	r1, 8009fe2 <_reclaim_reent+0x5a>
 8009fdc:	4620      	mov	r0, r4
 8009fde:	f000 f85d 	bl	800a09c <_free_r>
 8009fe2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009fe4:	b111      	cbz	r1, 8009fec <_reclaim_reent+0x64>
 8009fe6:	4620      	mov	r0, r4
 8009fe8:	f000 f858 	bl	800a09c <_free_r>
 8009fec:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8009fee:	b111      	cbz	r1, 8009ff6 <_reclaim_reent+0x6e>
 8009ff0:	4620      	mov	r0, r4
 8009ff2:	f000 f853 	bl	800a09c <_free_r>
 8009ff6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8009ff8:	b111      	cbz	r1, 800a000 <_reclaim_reent+0x78>
 8009ffa:	4620      	mov	r0, r4
 8009ffc:	f000 f84e 	bl	800a09c <_free_r>
 800a000:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800a002:	b111      	cbz	r1, 800a00a <_reclaim_reent+0x82>
 800a004:	4620      	mov	r0, r4
 800a006:	f000 f849 	bl	800a09c <_free_r>
 800a00a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800a00c:	b111      	cbz	r1, 800a014 <_reclaim_reent+0x8c>
 800a00e:	4620      	mov	r0, r4
 800a010:	f000 f844 	bl	800a09c <_free_r>
 800a014:	6a23      	ldr	r3, [r4, #32]
 800a016:	b14b      	cbz	r3, 800a02c <_reclaim_reent+0xa4>
 800a018:	4620      	mov	r0, r4
 800a01a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a01e:	4718      	bx	r3
 800a020:	680e      	ldr	r6, [r1, #0]
 800a022:	4620      	mov	r0, r4
 800a024:	f000 f83a 	bl	800a09c <_free_r>
 800a028:	4631      	mov	r1, r6
 800a02a:	e7bb      	b.n	8009fa4 <_reclaim_reent+0x1c>
 800a02c:	bd70      	pop	{r4, r5, r6, pc}
 800a02e:	bf00      	nop
 800a030:	20000100 	.word	0x20000100

0800a034 <__libc_init_array>:
 800a034:	b570      	push	{r4, r5, r6, lr}
 800a036:	4d0d      	ldr	r5, [pc, #52]	@ (800a06c <__libc_init_array+0x38>)
 800a038:	4c0d      	ldr	r4, [pc, #52]	@ (800a070 <__libc_init_array+0x3c>)
 800a03a:	1b64      	subs	r4, r4, r5
 800a03c:	10a4      	asrs	r4, r4, #2
 800a03e:	2600      	movs	r6, #0
 800a040:	42a6      	cmp	r6, r4
 800a042:	d109      	bne.n	800a058 <__libc_init_array+0x24>
 800a044:	4d0b      	ldr	r5, [pc, #44]	@ (800a074 <__libc_init_array+0x40>)
 800a046:	4c0c      	ldr	r4, [pc, #48]	@ (800a078 <__libc_init_array+0x44>)
 800a048:	f000 f87e 	bl	800a148 <_init>
 800a04c:	1b64      	subs	r4, r4, r5
 800a04e:	10a4      	asrs	r4, r4, #2
 800a050:	2600      	movs	r6, #0
 800a052:	42a6      	cmp	r6, r4
 800a054:	d105      	bne.n	800a062 <__libc_init_array+0x2e>
 800a056:	bd70      	pop	{r4, r5, r6, pc}
 800a058:	f855 3b04 	ldr.w	r3, [r5], #4
 800a05c:	4798      	blx	r3
 800a05e:	3601      	adds	r6, #1
 800a060:	e7ee      	b.n	800a040 <__libc_init_array+0xc>
 800a062:	f855 3b04 	ldr.w	r3, [r5], #4
 800a066:	4798      	blx	r3
 800a068:	3601      	adds	r6, #1
 800a06a:	e7f2      	b.n	800a052 <__libc_init_array+0x1e>
 800a06c:	0800a240 	.word	0x0800a240
 800a070:	0800a240 	.word	0x0800a240
 800a074:	0800a240 	.word	0x0800a240
 800a078:	0800a244 	.word	0x0800a244

0800a07c <__retarget_lock_acquire_recursive>:
 800a07c:	4770      	bx	lr

0800a07e <__retarget_lock_release_recursive>:
 800a07e:	4770      	bx	lr

0800a080 <memcpy>:
 800a080:	440a      	add	r2, r1
 800a082:	4291      	cmp	r1, r2
 800a084:	f100 33ff 	add.w	r3, r0, #4294967295
 800a088:	d100      	bne.n	800a08c <memcpy+0xc>
 800a08a:	4770      	bx	lr
 800a08c:	b510      	push	{r4, lr}
 800a08e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a092:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a096:	4291      	cmp	r1, r2
 800a098:	d1f9      	bne.n	800a08e <memcpy+0xe>
 800a09a:	bd10      	pop	{r4, pc}

0800a09c <_free_r>:
 800a09c:	b538      	push	{r3, r4, r5, lr}
 800a09e:	4605      	mov	r5, r0
 800a0a0:	2900      	cmp	r1, #0
 800a0a2:	d041      	beq.n	800a128 <_free_r+0x8c>
 800a0a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a0a8:	1f0c      	subs	r4, r1, #4
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	bfb8      	it	lt
 800a0ae:	18e4      	addlt	r4, r4, r3
 800a0b0:	f000 f83e 	bl	800a130 <__malloc_lock>
 800a0b4:	4a1d      	ldr	r2, [pc, #116]	@ (800a12c <_free_r+0x90>)
 800a0b6:	6813      	ldr	r3, [r2, #0]
 800a0b8:	b933      	cbnz	r3, 800a0c8 <_free_r+0x2c>
 800a0ba:	6063      	str	r3, [r4, #4]
 800a0bc:	6014      	str	r4, [r2, #0]
 800a0be:	4628      	mov	r0, r5
 800a0c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a0c4:	f000 b83a 	b.w	800a13c <__malloc_unlock>
 800a0c8:	42a3      	cmp	r3, r4
 800a0ca:	d908      	bls.n	800a0de <_free_r+0x42>
 800a0cc:	6820      	ldr	r0, [r4, #0]
 800a0ce:	1821      	adds	r1, r4, r0
 800a0d0:	428b      	cmp	r3, r1
 800a0d2:	bf01      	itttt	eq
 800a0d4:	6819      	ldreq	r1, [r3, #0]
 800a0d6:	685b      	ldreq	r3, [r3, #4]
 800a0d8:	1809      	addeq	r1, r1, r0
 800a0da:	6021      	streq	r1, [r4, #0]
 800a0dc:	e7ed      	b.n	800a0ba <_free_r+0x1e>
 800a0de:	461a      	mov	r2, r3
 800a0e0:	685b      	ldr	r3, [r3, #4]
 800a0e2:	b10b      	cbz	r3, 800a0e8 <_free_r+0x4c>
 800a0e4:	42a3      	cmp	r3, r4
 800a0e6:	d9fa      	bls.n	800a0de <_free_r+0x42>
 800a0e8:	6811      	ldr	r1, [r2, #0]
 800a0ea:	1850      	adds	r0, r2, r1
 800a0ec:	42a0      	cmp	r0, r4
 800a0ee:	d10b      	bne.n	800a108 <_free_r+0x6c>
 800a0f0:	6820      	ldr	r0, [r4, #0]
 800a0f2:	4401      	add	r1, r0
 800a0f4:	1850      	adds	r0, r2, r1
 800a0f6:	4283      	cmp	r3, r0
 800a0f8:	6011      	str	r1, [r2, #0]
 800a0fa:	d1e0      	bne.n	800a0be <_free_r+0x22>
 800a0fc:	6818      	ldr	r0, [r3, #0]
 800a0fe:	685b      	ldr	r3, [r3, #4]
 800a100:	6053      	str	r3, [r2, #4]
 800a102:	4408      	add	r0, r1
 800a104:	6010      	str	r0, [r2, #0]
 800a106:	e7da      	b.n	800a0be <_free_r+0x22>
 800a108:	d902      	bls.n	800a110 <_free_r+0x74>
 800a10a:	230c      	movs	r3, #12
 800a10c:	602b      	str	r3, [r5, #0]
 800a10e:	e7d6      	b.n	800a0be <_free_r+0x22>
 800a110:	6820      	ldr	r0, [r4, #0]
 800a112:	1821      	adds	r1, r4, r0
 800a114:	428b      	cmp	r3, r1
 800a116:	bf04      	itt	eq
 800a118:	6819      	ldreq	r1, [r3, #0]
 800a11a:	685b      	ldreq	r3, [r3, #4]
 800a11c:	6063      	str	r3, [r4, #4]
 800a11e:	bf04      	itt	eq
 800a120:	1809      	addeq	r1, r1, r0
 800a122:	6021      	streq	r1, [r4, #0]
 800a124:	6054      	str	r4, [r2, #4]
 800a126:	e7ca      	b.n	800a0be <_free_r+0x22>
 800a128:	bd38      	pop	{r3, r4, r5, pc}
 800a12a:	bf00      	nop
 800a12c:	20005f28 	.word	0x20005f28

0800a130 <__malloc_lock>:
 800a130:	4801      	ldr	r0, [pc, #4]	@ (800a138 <__malloc_lock+0x8>)
 800a132:	f7ff bfa3 	b.w	800a07c <__retarget_lock_acquire_recursive>
 800a136:	bf00      	nop
 800a138:	20005f24 	.word	0x20005f24

0800a13c <__malloc_unlock>:
 800a13c:	4801      	ldr	r0, [pc, #4]	@ (800a144 <__malloc_unlock+0x8>)
 800a13e:	f7ff bf9e 	b.w	800a07e <__retarget_lock_release_recursive>
 800a142:	bf00      	nop
 800a144:	20005f24 	.word	0x20005f24

0800a148 <_init>:
 800a148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a14a:	bf00      	nop
 800a14c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a14e:	bc08      	pop	{r3}
 800a150:	469e      	mov	lr, r3
 800a152:	4770      	bx	lr

0800a154 <_fini>:
 800a154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a156:	bf00      	nop
 800a158:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a15a:	bc08      	pop	{r3}
 800a15c:	469e      	mov	lr, r3
 800a15e:	4770      	bx	lr
