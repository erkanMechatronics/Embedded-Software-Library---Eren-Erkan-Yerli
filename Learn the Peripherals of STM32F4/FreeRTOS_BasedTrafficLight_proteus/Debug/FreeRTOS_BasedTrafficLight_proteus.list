
FreeRTOS_BasedTrafficLight_proteus.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003fac  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  080040bc  080040bc  000050bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004168  08004168  00006060  2**0
                  CONTENTS
  4 .ARM          00000000  08004168  08004168  00006060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004168  08004168  00006060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004168  08004168  00005168  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800416c  0800416c  0000516c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08004170  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011b0  20000060  080041d0  00006060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001210  080041d0  00006210  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fe8e  00000000  00000000  00006089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a0a  00000000  00000000  00015f17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f20  00000000  00000000  00018928  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ba1  00000000  00000000  00019848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018b0c  00000000  00000000  0001a3e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010856  00000000  00000000  00032ef5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e4d1  00000000  00000000  0004374b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d1c1c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000040e8  00000000  00000000  000d1c60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007e  00000000  00000000  000d5d48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000060 	.word	0x20000060
 800012c:	00000000 	.word	0x00000000
 8000130:	080040a4 	.word	0x080040a4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000064 	.word	0x20000064
 800014c:	080040a4 	.word	0x080040a4

08000150 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000150:	b480      	push	{r7}
 8000152:	b085      	sub	sp, #20
 8000154:	af00      	add	r7, sp, #0
 8000156:	60f8      	str	r0, [r7, #12]
 8000158:	60b9      	str	r1, [r7, #8]
 800015a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800015c:	68fb      	ldr	r3, [r7, #12]
 800015e:	4a06      	ldr	r2, [pc, #24]	@ (8000178 <vApplicationGetIdleTaskMemory+0x28>)
 8000160:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000162:	68bb      	ldr	r3, [r7, #8]
 8000164:	4a05      	ldr	r2, [pc, #20]	@ (800017c <vApplicationGetIdleTaskMemory+0x2c>)
 8000166:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	2280      	movs	r2, #128	@ 0x80
 800016c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800016e:	bf00      	nop
 8000170:	3714      	adds	r7, #20
 8000172:	46bd      	mov	sp, r7
 8000174:	bc80      	pop	{r7}
 8000176:	4770      	bx	lr
 8000178:	2000007c 	.word	0x2000007c
 800017c:	2000011c 	.word	0x2000011c

08000180 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000180:	b5b0      	push	{r4, r5, r7, lr}
 8000182:	b09a      	sub	sp, #104	@ 0x68
 8000184:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000186:	f000 fb35 	bl	80007f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800018a:	f000 f867 	bl	800025c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800018e:	f000 f8a5 	bl	80002dc <MX_GPIO_Init>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of myBinarySem01 */
  osSemaphoreDef(myBinarySem01);
 8000192:	2300      	movs	r3, #0
 8000194:	663b      	str	r3, [r7, #96]	@ 0x60
 8000196:	2300      	movs	r3, #0
 8000198:	667b      	str	r3, [r7, #100]	@ 0x64
  myBinarySem01Handle = osSemaphoreCreate(osSemaphore(myBinarySem01), 1);
 800019a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800019e:	2101      	movs	r1, #1
 80001a0:	4618      	mov	r0, r3
 80001a2:	f001 fccd 	bl	8001b40 <osSemaphoreCreate>
 80001a6:	4603      	mov	r3, r0
 80001a8:	4a24      	ldr	r2, [pc, #144]	@ (800023c <main+0xbc>)
 80001aa:	6013      	str	r3, [r2, #0]

  /* definition and creation of myBinarySem02 */
  osSemaphoreDef(myBinarySem02);
 80001ac:	2300      	movs	r3, #0
 80001ae:	65bb      	str	r3, [r7, #88]	@ 0x58
 80001b0:	2300      	movs	r3, #0
 80001b2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  myBinarySem02Handle = osSemaphoreCreate(osSemaphore(myBinarySem02), 1);
 80001b4:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80001b8:	2101      	movs	r1, #1
 80001ba:	4618      	mov	r0, r3
 80001bc:	f001 fcc0 	bl	8001b40 <osSemaphoreCreate>
 80001c0:	4603      	mov	r3, r0
 80001c2:	4a1f      	ldr	r2, [pc, #124]	@ (8000240 <main+0xc0>)
 80001c4:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Traffic1 */
  osThreadDef(Traffic1, StartTraffic1, osPriorityNormal, 0, 128);
 80001c6:	4b1f      	ldr	r3, [pc, #124]	@ (8000244 <main+0xc4>)
 80001c8:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 80001cc:	461d      	mov	r5, r3
 80001ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001d2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001d6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Traffic1Handle = osThreadCreate(osThread(Traffic1), NULL);
 80001da:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80001de:	2100      	movs	r1, #0
 80001e0:	4618      	mov	r0, r3
 80001e2:	f001 fc61 	bl	8001aa8 <osThreadCreate>
 80001e6:	4603      	mov	r3, r0
 80001e8:	4a17      	ldr	r2, [pc, #92]	@ (8000248 <main+0xc8>)
 80001ea:	6013      	str	r3, [r2, #0]

  /* definition and creation of Traffic2 */
  osThreadDef(Traffic2, StartTraffic2, osPriorityNormal, 0, 128);
 80001ec:	4b17      	ldr	r3, [pc, #92]	@ (800024c <main+0xcc>)
 80001ee:	f107 0420 	add.w	r4, r7, #32
 80001f2:	461d      	mov	r5, r3
 80001f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001f8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001fc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Traffic2Handle = osThreadCreate(osThread(Traffic2), NULL);
 8000200:	f107 0320 	add.w	r3, r7, #32
 8000204:	2100      	movs	r1, #0
 8000206:	4618      	mov	r0, r3
 8000208:	f001 fc4e 	bl	8001aa8 <osThreadCreate>
 800020c:	4603      	mov	r3, r0
 800020e:	4a10      	ldr	r2, [pc, #64]	@ (8000250 <main+0xd0>)
 8000210:	6013      	str	r3, [r2, #0]

  /* definition and creation of Pedestrian */
  osThreadDef(Pedestrian, StartPedestrian, osPriorityHigh, 0, 128);
 8000212:	4b10      	ldr	r3, [pc, #64]	@ (8000254 <main+0xd4>)
 8000214:	1d3c      	adds	r4, r7, #4
 8000216:	461d      	mov	r5, r3
 8000218:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800021a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800021c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000220:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  PedestrianHandle = osThreadCreate(osThread(Pedestrian), NULL);
 8000224:	1d3b      	adds	r3, r7, #4
 8000226:	2100      	movs	r1, #0
 8000228:	4618      	mov	r0, r3
 800022a:	f001 fc3d 	bl	8001aa8 <osThreadCreate>
 800022e:	4603      	mov	r3, r0
 8000230:	4a09      	ldr	r2, [pc, #36]	@ (8000258 <main+0xd8>)
 8000232:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000234:	f001 fc31 	bl	8001a9a <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000238:	bf00      	nop
 800023a:	e7fd      	b.n	8000238 <main+0xb8>
 800023c:	20000328 	.word	0x20000328
 8000240:	2000032c 	.word	0x2000032c
 8000244:	080040c8 	.word	0x080040c8
 8000248:	2000031c 	.word	0x2000031c
 800024c:	080040f0 	.word	0x080040f0
 8000250:	20000320 	.word	0x20000320
 8000254:	08004118 	.word	0x08004118
 8000258:	20000324 	.word	0x20000324

0800025c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800025c:	b580      	push	{r7, lr}
 800025e:	b090      	sub	sp, #64	@ 0x40
 8000260:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000262:	f107 0318 	add.w	r3, r7, #24
 8000266:	2228      	movs	r2, #40	@ 0x28
 8000268:	2100      	movs	r1, #0
 800026a:	4618      	mov	r0, r3
 800026c:	f003 fe34 	bl	8003ed8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000270:	1d3b      	adds	r3, r7, #4
 8000272:	2200      	movs	r2, #0
 8000274:	601a      	str	r2, [r3, #0]
 8000276:	605a      	str	r2, [r3, #4]
 8000278:	609a      	str	r2, [r3, #8]
 800027a:	60da      	str	r2, [r3, #12]
 800027c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800027e:	2302      	movs	r3, #2
 8000280:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000282:	2301      	movs	r3, #1
 8000284:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000286:	2310      	movs	r3, #16
 8000288:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800028a:	2302      	movs	r3, #2
 800028c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800028e:	2300      	movs	r3, #0
 8000290:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8000292:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8000296:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000298:	f107 0318 	add.w	r3, r7, #24
 800029c:	4618      	mov	r0, r3
 800029e:	f000 fd8b 	bl	8000db8 <HAL_RCC_OscConfig>
 80002a2:	4603      	mov	r3, r0
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d001      	beq.n	80002ac <SystemClock_Config+0x50>
  {
    Error_Handler();
 80002a8:	f000 f991 	bl	80005ce <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002ac:	230f      	movs	r3, #15
 80002ae:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002b0:	2302      	movs	r3, #2
 80002b2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002b4:	2300      	movs	r3, #0
 80002b6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002b8:	2300      	movs	r3, #0
 80002ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002bc:	2300      	movs	r3, #0
 80002be:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002c0:	1d3b      	adds	r3, r7, #4
 80002c2:	2100      	movs	r1, #0
 80002c4:	4618      	mov	r0, r3
 80002c6:	f000 fff9 	bl	80012bc <HAL_RCC_ClockConfig>
 80002ca:	4603      	mov	r3, r0
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d001      	beq.n	80002d4 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80002d0:	f000 f97d 	bl	80005ce <Error_Handler>
  }
}
 80002d4:	bf00      	nop
 80002d6:	3740      	adds	r7, #64	@ 0x40
 80002d8:	46bd      	mov	sp, r7
 80002da:	bd80      	pop	{r7, pc}

080002dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	b086      	sub	sp, #24
 80002e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002e2:	f107 0308 	add.w	r3, r7, #8
 80002e6:	2200      	movs	r2, #0
 80002e8:	601a      	str	r2, [r3, #0]
 80002ea:	605a      	str	r2, [r3, #4]
 80002ec:	609a      	str	r2, [r3, #8]
 80002ee:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002f0:	4b22      	ldr	r3, [pc, #136]	@ (800037c <MX_GPIO_Init+0xa0>)
 80002f2:	699b      	ldr	r3, [r3, #24]
 80002f4:	4a21      	ldr	r2, [pc, #132]	@ (800037c <MX_GPIO_Init+0xa0>)
 80002f6:	f043 0320 	orr.w	r3, r3, #32
 80002fa:	6193      	str	r3, [r2, #24]
 80002fc:	4b1f      	ldr	r3, [pc, #124]	@ (800037c <MX_GPIO_Init+0xa0>)
 80002fe:	699b      	ldr	r3, [r3, #24]
 8000300:	f003 0320 	and.w	r3, r3, #32
 8000304:	607b      	str	r3, [r7, #4]
 8000306:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000308:	4b1c      	ldr	r3, [pc, #112]	@ (800037c <MX_GPIO_Init+0xa0>)
 800030a:	699b      	ldr	r3, [r3, #24]
 800030c:	4a1b      	ldr	r2, [pc, #108]	@ (800037c <MX_GPIO_Init+0xa0>)
 800030e:	f043 0304 	orr.w	r3, r3, #4
 8000312:	6193      	str	r3, [r2, #24]
 8000314:	4b19      	ldr	r3, [pc, #100]	@ (800037c <MX_GPIO_Init+0xa0>)
 8000316:	699b      	ldr	r3, [r3, #24]
 8000318:	f003 0304 	and.w	r3, r3, #4
 800031c:	603b      	str	r3, [r7, #0]
 800031e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PEDESTRIAN_Pin|TRAFFIC_1_RED_Pin|TRAFFIC_1_GREEN_Pin|TRAFFIC_2_RED_Pin
 8000320:	2200      	movs	r2, #0
 8000322:	f44f 51f8 	mov.w	r1, #7936	@ 0x1f00
 8000326:	4816      	ldr	r0, [pc, #88]	@ (8000380 <MX_GPIO_Init+0xa4>)
 8000328:	f000 fd16 	bl	8000d58 <HAL_GPIO_WritePin>
                          |TRAFFIC_2_GREEN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800032c:	2301      	movs	r3, #1
 800032e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000330:	4b14      	ldr	r3, [pc, #80]	@ (8000384 <MX_GPIO_Init+0xa8>)
 8000332:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000334:	2300      	movs	r3, #0
 8000336:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000338:	f107 0308 	add.w	r3, r7, #8
 800033c:	4619      	mov	r1, r3
 800033e:	4810      	ldr	r0, [pc, #64]	@ (8000380 <MX_GPIO_Init+0xa4>)
 8000340:	f000 fb8e 	bl	8000a60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEDESTRIAN_Pin TRAFFIC_1_RED_Pin TRAFFIC_1_GREEN_Pin TRAFFIC_2_RED_Pin
                           TRAFFIC_2_GREEN_Pin */
  GPIO_InitStruct.Pin = PEDESTRIAN_Pin|TRAFFIC_1_RED_Pin|TRAFFIC_1_GREEN_Pin|TRAFFIC_2_RED_Pin
 8000344:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8000348:	60bb      	str	r3, [r7, #8]
                          |TRAFFIC_2_GREEN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800034a:	2301      	movs	r3, #1
 800034c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800034e:	2300      	movs	r3, #0
 8000350:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000352:	2302      	movs	r3, #2
 8000354:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000356:	f107 0308 	add.w	r3, r7, #8
 800035a:	4619      	mov	r1, r3
 800035c:	4808      	ldr	r0, [pc, #32]	@ (8000380 <MX_GPIO_Init+0xa4>)
 800035e:	f000 fb7f 	bl	8000a60 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000362:	2200      	movs	r2, #0
 8000364:	2100      	movs	r1, #0
 8000366:	2006      	movs	r0, #6
 8000368:	f000 fb4f 	bl	8000a0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800036c:	2006      	movs	r0, #6
 800036e:	f000 fb68 	bl	8000a42 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000372:	bf00      	nop
 8000374:	3718      	adds	r7, #24
 8000376:	46bd      	mov	sp, r7
 8000378:	bd80      	pop	{r7, pc}
 800037a:	bf00      	nop
 800037c:	40021000 	.word	0x40021000
 8000380:	40010800 	.word	0x40010800
 8000384:	10110000 	.word	0x10110000

08000388 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	b084      	sub	sp, #16
 800038c:	af00      	add	r7, sp, #0
 800038e:	4603      	mov	r3, r0
 8000390:	80fb      	strh	r3, [r7, #6]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8000392:	2300      	movs	r3, #0
 8000394:	60fb      	str	r3, [r7, #12]

	if (GPIO_Pin == GPIO_PIN_0)
 8000396:	88fb      	ldrh	r3, [r7, #6]
 8000398:	2b01      	cmp	r3, #1
 800039a:	d111      	bne.n	80003c0 <HAL_GPIO_EXTI_Callback+0x38>
	{
		xSemaphoreGiveFromISR(myBinarySem02Handle,portMAX_DELAY);
 800039c:	4b0a      	ldr	r3, [pc, #40]	@ (80003c8 <HAL_GPIO_EXTI_Callback+0x40>)
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	f04f 31ff 	mov.w	r1, #4294967295
 80003a4:	4618      	mov	r0, r3
 80003a6:	f001 fef1 	bl	800218c <xQueueGiveFromISR>

		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 80003aa:	68fb      	ldr	r3, [r7, #12]
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d007      	beq.n	80003c0 <HAL_GPIO_EXTI_Callback+0x38>
 80003b0:	4b06      	ldr	r3, [pc, #24]	@ (80003cc <HAL_GPIO_EXTI_Callback+0x44>)
 80003b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80003b6:	601a      	str	r2, [r3, #0]
 80003b8:	f3bf 8f4f 	dsb	sy
 80003bc:	f3bf 8f6f 	isb	sy
	}

}
 80003c0:	bf00      	nop
 80003c2:	3710      	adds	r7, #16
 80003c4:	46bd      	mov	sp, r7
 80003c6:	bd80      	pop	{r7, pc}
 80003c8:	2000032c 	.word	0x2000032c
 80003cc:	e000ed04 	.word	0xe000ed04

080003d0 <StartTraffic1>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTraffic1 */
void StartTraffic1(void const * argument)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b082      	sub	sp, #8
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_SET); // Kirmizi 1
 80003d8:	2201      	movs	r2, #1
 80003da:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80003de:	481c      	ldr	r0, [pc, #112]	@ (8000450 <StartTraffic1+0x80>)
 80003e0:	f000 fcba 	bl	8000d58 <HAL_GPIO_WritePin>

	  /* Infinite loop */
	for(;;)
	{
		if(xSemaphoreTake(myBinarySem01Handle,portMAX_DELAY) == pdTRUE)
 80003e4:	4b1b      	ldr	r3, [pc, #108]	@ (8000454 <StartTraffic1+0x84>)
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	f04f 31ff 	mov.w	r1, #4294967295
 80003ec:	4618      	mov	r0, r3
 80003ee:	f001 ff5d 	bl	80022ac <xQueueSemaphoreTake>
 80003f2:	4603      	mov	r3, r0
 80003f4:	2b01      	cmp	r3, #1
 80003f6:	d126      	bne.n	8000446 <StartTraffic1+0x76>
		{
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_RESET); // Kirmizi 1
 80003f8:	2200      	movs	r2, #0
 80003fa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80003fe:	4814      	ldr	r0, [pc, #80]	@ (8000450 <StartTraffic1+0x80>)
 8000400:	f000 fcaa 	bl	8000d58 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_10,GPIO_PIN_SET);  //  Yesil 1
 8000404:	2201      	movs	r2, #1
 8000406:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800040a:	4811      	ldr	r0, [pc, #68]	@ (8000450 <StartTraffic1+0x80>)
 800040c:	f000 fca4 	bl	8000d58 <HAL_GPIO_WritePin>

			HAL_Delay(5000);
 8000410:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000414:	f000 fa20 	bl	8000858 <HAL_Delay>

			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_10,GPIO_PIN_RESET); // Yesil 1
 8000418:	2200      	movs	r2, #0
 800041a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800041e:	480c      	ldr	r0, [pc, #48]	@ (8000450 <StartTraffic1+0x80>)
 8000420:	f000 fc9a 	bl	8000d58 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_SET);   // Kirmizi 1
 8000424:	2201      	movs	r2, #1
 8000426:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800042a:	4809      	ldr	r0, [pc, #36]	@ (8000450 <StartTraffic1+0x80>)
 800042c:	f000 fc94 	bl	8000d58 <HAL_GPIO_WritePin>

			HAL_Delay(1000);
 8000430:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000434:	f000 fa10 	bl	8000858 <HAL_Delay>

			xSemaphoreGive(myBinarySem01Handle);
 8000438:	4b06      	ldr	r3, [pc, #24]	@ (8000454 <StartTraffic1+0x84>)
 800043a:	6818      	ldr	r0, [r3, #0]
 800043c:	2300      	movs	r3, #0
 800043e:	2200      	movs	r2, #0
 8000440:	2100      	movs	r1, #0
 8000442:	f001 fda1 	bl	8001f88 <xQueueGenericSend>
		}

		vTaskDelay(pdMS_TO_TICKS(5000));
 8000446:	f241 3088 	movw	r0, #5000	@ 0x1388
 800044a:	f002 faef 	bl	8002a2c <vTaskDelay>
		if(xSemaphoreTake(myBinarySem01Handle,portMAX_DELAY) == pdTRUE)
 800044e:	e7c9      	b.n	80003e4 <StartTraffic1+0x14>
 8000450:	40010800 	.word	0x40010800
 8000454:	20000328 	.word	0x20000328

08000458 <StartTraffic2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTraffic2 */
void StartTraffic2(void const * argument)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	b082      	sub	sp, #8
 800045c:	af00      	add	r7, sp, #0
 800045e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTraffic2 */
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_11,GPIO_PIN_SET); // Kirmizi 2
 8000460:	2201      	movs	r2, #1
 8000462:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000466:	481c      	ldr	r0, [pc, #112]	@ (80004d8 <StartTraffic2+0x80>)
 8000468:	f000 fc76 	bl	8000d58 <HAL_GPIO_WritePin>
	  /* Infinite loop */
	for(;;)
	{
		if(xSemaphoreTake(myBinarySem01Handle,portMAX_DELAY) == pdTRUE)
 800046c:	4b1b      	ldr	r3, [pc, #108]	@ (80004dc <StartTraffic2+0x84>)
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	f04f 31ff 	mov.w	r1, #4294967295
 8000474:	4618      	mov	r0, r3
 8000476:	f001 ff19 	bl	80022ac <xQueueSemaphoreTake>
 800047a:	4603      	mov	r3, r0
 800047c:	2b01      	cmp	r3, #1
 800047e:	d126      	bne.n	80004ce <StartTraffic2+0x76>
		{
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_11,GPIO_PIN_RESET); // Kirmizi 2
 8000480:	2200      	movs	r2, #0
 8000482:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000486:	4814      	ldr	r0, [pc, #80]	@ (80004d8 <StartTraffic2+0x80>)
 8000488:	f000 fc66 	bl	8000d58 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_12,GPIO_PIN_SET);   // Yesil 2
 800048c:	2201      	movs	r2, #1
 800048e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000492:	4811      	ldr	r0, [pc, #68]	@ (80004d8 <StartTraffic2+0x80>)
 8000494:	f000 fc60 	bl	8000d58 <HAL_GPIO_WritePin>

			HAL_Delay(5000);
 8000498:	f241 3088 	movw	r0, #5000	@ 0x1388
 800049c:	f000 f9dc 	bl	8000858 <HAL_Delay>

			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_12,GPIO_PIN_RESET); // Yesil 2
 80004a0:	2200      	movs	r2, #0
 80004a2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80004a6:	480c      	ldr	r0, [pc, #48]	@ (80004d8 <StartTraffic2+0x80>)
 80004a8:	f000 fc56 	bl	8000d58 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_11,GPIO_PIN_SET);   // Kirmizi 2
 80004ac:	2201      	movs	r2, #1
 80004ae:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80004b2:	4809      	ldr	r0, [pc, #36]	@ (80004d8 <StartTraffic2+0x80>)
 80004b4:	f000 fc50 	bl	8000d58 <HAL_GPIO_WritePin>

			HAL_Delay(1000);
 80004b8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80004bc:	f000 f9cc 	bl	8000858 <HAL_Delay>

			xSemaphoreGive(myBinarySem01Handle);
 80004c0:	4b06      	ldr	r3, [pc, #24]	@ (80004dc <StartTraffic2+0x84>)
 80004c2:	6818      	ldr	r0, [r3, #0]
 80004c4:	2300      	movs	r3, #0
 80004c6:	2200      	movs	r2, #0
 80004c8:	2100      	movs	r1, #0
 80004ca:	f001 fd5d 	bl	8001f88 <xQueueGenericSend>
		}

		vTaskDelay(pdMS_TO_TICKS(5000));
 80004ce:	f241 3088 	movw	r0, #5000	@ 0x1388
 80004d2:	f002 faab 	bl	8002a2c <vTaskDelay>
		if(xSemaphoreTake(myBinarySem01Handle,portMAX_DELAY) == pdTRUE)
 80004d6:	e7c9      	b.n	800046c <StartTraffic2+0x14>
 80004d8:	40010800 	.word	0x40010800
 80004dc:	20000328 	.word	0x20000328

080004e0 <StartPedestrian>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPedestrian */
void StartPedestrian(void const * argument)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b082      	sub	sp, #8
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartPedestrian */
  /* Infinite loop */
	for(;;)
	{
		if(xSemaphoreTake(myBinarySem02Handle,portMAX_DELAY) == pdTRUE)
 80004e8:	4b2e      	ldr	r3, [pc, #184]	@ (80005a4 <StartPedestrian+0xc4>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	f04f 31ff 	mov.w	r1, #4294967295
 80004f0:	4618      	mov	r0, r3
 80004f2:	f001 fedb 	bl	80022ac <xQueueSemaphoreTake>
 80004f6:	4603      	mov	r3, r0
 80004f8:	2b01      	cmp	r3, #1
 80004fa:	d14e      	bne.n	800059a <StartPedestrian+0xba>
		{
			HAL_Delay(3000);
 80004fc:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000500:	f000 f9aa 	bl	8000858 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_10,GPIO_PIN_RESET);
 8000504:	2200      	movs	r2, #0
 8000506:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800050a:	4827      	ldr	r0, [pc, #156]	@ (80005a8 <StartPedestrian+0xc8>)
 800050c:	f000 fc24 	bl	8000d58 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_SET);
 8000510:	2201      	movs	r2, #1
 8000512:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000516:	4824      	ldr	r0, [pc, #144]	@ (80005a8 <StartPedestrian+0xc8>)
 8000518:	f000 fc1e 	bl	8000d58 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_12,GPIO_PIN_RESET);
 800051c:	2200      	movs	r2, #0
 800051e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000522:	4821      	ldr	r0, [pc, #132]	@ (80005a8 <StartPedestrian+0xc8>)
 8000524:	f000 fc18 	bl	8000d58 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_11,GPIO_PIN_SET);
 8000528:	2201      	movs	r2, #1
 800052a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800052e:	481e      	ldr	r0, [pc, #120]	@ (80005a8 <StartPedestrian+0xc8>)
 8000530:	f000 fc12 	bl	8000d58 <HAL_GPIO_WritePin>

			HAL_Delay(2000);
 8000534:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000538:	f000 f98e 	bl	8000858 <HAL_Delay>


			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_SET);
 800053c:	2201      	movs	r2, #1
 800053e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000542:	4819      	ldr	r0, [pc, #100]	@ (80005a8 <StartPedestrian+0xc8>)
 8000544:	f000 fc08 	bl	8000d58 <HAL_GPIO_WritePin>
			HAL_Delay(4000);
 8000548:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 800054c:	f000 f984 	bl	8000858 <HAL_Delay>

			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_RESET);
 8000550:	2200      	movs	r2, #0
 8000552:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000556:	4814      	ldr	r0, [pc, #80]	@ (80005a8 <StartPedestrian+0xc8>)
 8000558:	f000 fbfe 	bl	8000d58 <HAL_GPIO_WritePin>
			HAL_Delay(500);
 800055c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000560:	f000 f97a 	bl	8000858 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_SET);
 8000564:	2201      	movs	r2, #1
 8000566:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800056a:	480f      	ldr	r0, [pc, #60]	@ (80005a8 <StartPedestrian+0xc8>)
 800056c:	f000 fbf4 	bl	8000d58 <HAL_GPIO_WritePin>
			HAL_Delay(500);
 8000570:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000574:	f000 f970 	bl	8000858 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_RESET);
 8000578:	2200      	movs	r2, #0
 800057a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800057e:	480a      	ldr	r0, [pc, #40]	@ (80005a8 <StartPedestrian+0xc8>)
 8000580:	f000 fbea 	bl	8000d58 <HAL_GPIO_WritePin>

			HAL_Delay(1000);
 8000584:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000588:	f000 f966 	bl	8000858 <HAL_Delay>

			xSemaphoreGive(myBinarySem01Handle);
 800058c:	4b07      	ldr	r3, [pc, #28]	@ (80005ac <StartPedestrian+0xcc>)
 800058e:	6818      	ldr	r0, [r3, #0]
 8000590:	2300      	movs	r3, #0
 8000592:	2200      	movs	r2, #0
 8000594:	2100      	movs	r1, #0
 8000596:	f001 fcf7 	bl	8001f88 <xQueueGenericSend>
		}
		vTaskDelay(pdMS_TO_TICKS(1));
 800059a:	2001      	movs	r0, #1
 800059c:	f002 fa46 	bl	8002a2c <vTaskDelay>
		if(xSemaphoreTake(myBinarySem02Handle,portMAX_DELAY) == pdTRUE)
 80005a0:	e7a2      	b.n	80004e8 <StartPedestrian+0x8>
 80005a2:	bf00      	nop
 80005a4:	2000032c 	.word	0x2000032c
 80005a8:	40010800 	.word	0x40010800
 80005ac:	20000328 	.word	0x20000328

080005b0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80005c0:	d101      	bne.n	80005c6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80005c2:	f000 f92d 	bl	8000820 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80005c6:	bf00      	nop
 80005c8:	3708      	adds	r7, #8
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}

080005ce <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005ce:	b480      	push	{r7}
 80005d0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005d2:	b672      	cpsid	i
}
 80005d4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005d6:	bf00      	nop
 80005d8:	e7fd      	b.n	80005d6 <Error_Handler+0x8>
	...

080005dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b084      	sub	sp, #16
 80005e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80005e2:	4b18      	ldr	r3, [pc, #96]	@ (8000644 <HAL_MspInit+0x68>)
 80005e4:	699b      	ldr	r3, [r3, #24]
 80005e6:	4a17      	ldr	r2, [pc, #92]	@ (8000644 <HAL_MspInit+0x68>)
 80005e8:	f043 0301 	orr.w	r3, r3, #1
 80005ec:	6193      	str	r3, [r2, #24]
 80005ee:	4b15      	ldr	r3, [pc, #84]	@ (8000644 <HAL_MspInit+0x68>)
 80005f0:	699b      	ldr	r3, [r3, #24]
 80005f2:	f003 0301 	and.w	r3, r3, #1
 80005f6:	60bb      	str	r3, [r7, #8]
 80005f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005fa:	4b12      	ldr	r3, [pc, #72]	@ (8000644 <HAL_MspInit+0x68>)
 80005fc:	69db      	ldr	r3, [r3, #28]
 80005fe:	4a11      	ldr	r2, [pc, #68]	@ (8000644 <HAL_MspInit+0x68>)
 8000600:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000604:	61d3      	str	r3, [r2, #28]
 8000606:	4b0f      	ldr	r3, [pc, #60]	@ (8000644 <HAL_MspInit+0x68>)
 8000608:	69db      	ldr	r3, [r3, #28]
 800060a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800060e:	607b      	str	r3, [r7, #4]
 8000610:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000612:	2200      	movs	r2, #0
 8000614:	210f      	movs	r1, #15
 8000616:	f06f 0001 	mvn.w	r0, #1
 800061a:	f000 f9f6 	bl	8000a0a <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800061e:	4b0a      	ldr	r3, [pc, #40]	@ (8000648 <HAL_MspInit+0x6c>)
 8000620:	685b      	ldr	r3, [r3, #4]
 8000622:	60fb      	str	r3, [r7, #12]
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800062a:	60fb      	str	r3, [r7, #12]
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000632:	60fb      	str	r3, [r7, #12]
 8000634:	4a04      	ldr	r2, [pc, #16]	@ (8000648 <HAL_MspInit+0x6c>)
 8000636:	68fb      	ldr	r3, [r7, #12]
 8000638:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800063a:	bf00      	nop
 800063c:	3710      	adds	r7, #16
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	40021000 	.word	0x40021000
 8000648:	40010000 	.word	0x40010000

0800064c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b08e      	sub	sp, #56	@ 0x38
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000654:	2300      	movs	r3, #0
 8000656:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000658:	2300      	movs	r3, #0
 800065a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 800065c:	2300      	movs	r3, #0
 800065e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8000662:	4b34      	ldr	r3, [pc, #208]	@ (8000734 <HAL_InitTick+0xe8>)
 8000664:	69db      	ldr	r3, [r3, #28]
 8000666:	4a33      	ldr	r2, [pc, #204]	@ (8000734 <HAL_InitTick+0xe8>)
 8000668:	f043 0301 	orr.w	r3, r3, #1
 800066c:	61d3      	str	r3, [r2, #28]
 800066e:	4b31      	ldr	r3, [pc, #196]	@ (8000734 <HAL_InitTick+0xe8>)
 8000670:	69db      	ldr	r3, [r3, #28]
 8000672:	f003 0301 	and.w	r3, r3, #1
 8000676:	60fb      	str	r3, [r7, #12]
 8000678:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800067a:	f107 0210 	add.w	r2, r7, #16
 800067e:	f107 0314 	add.w	r3, r7, #20
 8000682:	4611      	mov	r1, r2
 8000684:	4618      	mov	r0, r3
 8000686:	f000 ff75 	bl	8001574 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800068a:	6a3b      	ldr	r3, [r7, #32]
 800068c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800068e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000690:	2b00      	cmp	r3, #0
 8000692:	d103      	bne.n	800069c <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000694:	f000 ff5a 	bl	800154c <HAL_RCC_GetPCLK1Freq>
 8000698:	6378      	str	r0, [r7, #52]	@ 0x34
 800069a:	e004      	b.n	80006a6 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800069c:	f000 ff56 	bl	800154c <HAL_RCC_GetPCLK1Freq>
 80006a0:	4603      	mov	r3, r0
 80006a2:	005b      	lsls	r3, r3, #1
 80006a4:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80006a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80006a8:	4a23      	ldr	r2, [pc, #140]	@ (8000738 <HAL_InitTick+0xec>)
 80006aa:	fba2 2303 	umull	r2, r3, r2, r3
 80006ae:	0c9b      	lsrs	r3, r3, #18
 80006b0:	3b01      	subs	r3, #1
 80006b2:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 80006b4:	4b21      	ldr	r3, [pc, #132]	@ (800073c <HAL_InitTick+0xf0>)
 80006b6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80006ba:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 80006bc:	4b1f      	ldr	r3, [pc, #124]	@ (800073c <HAL_InitTick+0xf0>)
 80006be:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80006c2:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 80006c4:	4a1d      	ldr	r2, [pc, #116]	@ (800073c <HAL_InitTick+0xf0>)
 80006c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80006c8:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 80006ca:	4b1c      	ldr	r3, [pc, #112]	@ (800073c <HAL_InitTick+0xf0>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006d0:	4b1a      	ldr	r3, [pc, #104]	@ (800073c <HAL_InitTick+0xf0>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006d6:	4b19      	ldr	r3, [pc, #100]	@ (800073c <HAL_InitTick+0xf0>)
 80006d8:	2200      	movs	r2, #0
 80006da:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 80006dc:	4817      	ldr	r0, [pc, #92]	@ (800073c <HAL_InitTick+0xf0>)
 80006de:	f000 ff97 	bl	8001610 <HAL_TIM_Base_Init>
 80006e2:	4603      	mov	r3, r0
 80006e4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80006e8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d11b      	bne.n	8000728 <HAL_InitTick+0xdc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 80006f0:	4812      	ldr	r0, [pc, #72]	@ (800073c <HAL_InitTick+0xf0>)
 80006f2:	f000 ffe5 	bl	80016c0 <HAL_TIM_Base_Start_IT>
 80006f6:	4603      	mov	r3, r0
 80006f8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80006fc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000700:	2b00      	cmp	r3, #0
 8000702:	d111      	bne.n	8000728 <HAL_InitTick+0xdc>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000704:	201c      	movs	r0, #28
 8000706:	f000 f99c 	bl	8000a42 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	2b0f      	cmp	r3, #15
 800070e:	d808      	bhi.n	8000722 <HAL_InitTick+0xd6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8000710:	2200      	movs	r2, #0
 8000712:	6879      	ldr	r1, [r7, #4]
 8000714:	201c      	movs	r0, #28
 8000716:	f000 f978 	bl	8000a0a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800071a:	4a09      	ldr	r2, [pc, #36]	@ (8000740 <HAL_InitTick+0xf4>)
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	6013      	str	r3, [r2, #0]
 8000720:	e002      	b.n	8000728 <HAL_InitTick+0xdc>
      }
      else
      {
        status = HAL_ERROR;
 8000722:	2301      	movs	r3, #1
 8000724:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000728:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800072c:	4618      	mov	r0, r3
 800072e:	3738      	adds	r7, #56	@ 0x38
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	40021000 	.word	0x40021000
 8000738:	431bde83 	.word	0x431bde83
 800073c:	20000330 	.word	0x20000330
 8000740:	20000004 	.word	0x20000004

08000744 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000748:	bf00      	nop
 800074a:	e7fd      	b.n	8000748 <NMI_Handler+0x4>

0800074c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800074c:	b480      	push	{r7}
 800074e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000750:	bf00      	nop
 8000752:	e7fd      	b.n	8000750 <HardFault_Handler+0x4>

08000754 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000758:	bf00      	nop
 800075a:	e7fd      	b.n	8000758 <MemManage_Handler+0x4>

0800075c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000760:	bf00      	nop
 8000762:	e7fd      	b.n	8000760 <BusFault_Handler+0x4>

08000764 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000764:	b480      	push	{r7}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000768:	bf00      	nop
 800076a:	e7fd      	b.n	8000768 <UsageFault_Handler+0x4>

0800076c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000770:	bf00      	nop
 8000772:	46bd      	mov	sp, r7
 8000774:	bc80      	pop	{r7}
 8000776:	4770      	bx	lr

08000778 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800077c:	2001      	movs	r0, #1
 800077e:	f000 fb03 	bl	8000d88 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000782:	bf00      	nop
 8000784:	bd80      	pop	{r7, pc}
	...

08000788 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800078c:	4802      	ldr	r0, [pc, #8]	@ (8000798 <TIM2_IRQHandler+0x10>)
 800078e:	f000 ffe3 	bl	8001758 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000792:	bf00      	nop
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	20000330 	.word	0x20000330

0800079c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007a0:	bf00      	nop
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bc80      	pop	{r7}
 80007a6:	4770      	bx	lr

080007a8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80007a8:	f7ff fff8 	bl	800079c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007ac:	480b      	ldr	r0, [pc, #44]	@ (80007dc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80007ae:	490c      	ldr	r1, [pc, #48]	@ (80007e0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80007b0:	4a0c      	ldr	r2, [pc, #48]	@ (80007e4 <LoopFillZerobss+0x16>)
  movs r3, #0
 80007b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007b4:	e002      	b.n	80007bc <LoopCopyDataInit>

080007b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007ba:	3304      	adds	r3, #4

080007bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007c0:	d3f9      	bcc.n	80007b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007c2:	4a09      	ldr	r2, [pc, #36]	@ (80007e8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80007c4:	4c09      	ldr	r4, [pc, #36]	@ (80007ec <LoopFillZerobss+0x1e>)
  movs r3, #0
 80007c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007c8:	e001      	b.n	80007ce <LoopFillZerobss>

080007ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007cc:	3204      	adds	r2, #4

080007ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007d0:	d3fb      	bcc.n	80007ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007d2:	f003 fbdf 	bl	8003f94 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007d6:	f7ff fcd3 	bl	8000180 <main>
  bx lr
 80007da:	4770      	bx	lr
  ldr r0, =_sdata
 80007dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007e0:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80007e4:	08004170 	.word	0x08004170
  ldr r2, =_sbss
 80007e8:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80007ec:	20001210 	.word	0x20001210

080007f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007f0:	e7fe      	b.n	80007f0 <ADC1_2_IRQHandler>
	...

080007f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007f8:	4b08      	ldr	r3, [pc, #32]	@ (800081c <HAL_Init+0x28>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	4a07      	ldr	r2, [pc, #28]	@ (800081c <HAL_Init+0x28>)
 80007fe:	f043 0310 	orr.w	r3, r3, #16
 8000802:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000804:	2003      	movs	r0, #3
 8000806:	f000 f8f5 	bl	80009f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800080a:	200f      	movs	r0, #15
 800080c:	f7ff ff1e 	bl	800064c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000810:	f7ff fee4 	bl	80005dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000814:	2300      	movs	r3, #0
}
 8000816:	4618      	mov	r0, r3
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	40022000 	.word	0x40022000

08000820 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000824:	4b05      	ldr	r3, [pc, #20]	@ (800083c <HAL_IncTick+0x1c>)
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	461a      	mov	r2, r3
 800082a:	4b05      	ldr	r3, [pc, #20]	@ (8000840 <HAL_IncTick+0x20>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	4413      	add	r3, r2
 8000830:	4a03      	ldr	r2, [pc, #12]	@ (8000840 <HAL_IncTick+0x20>)
 8000832:	6013      	str	r3, [r2, #0]
}
 8000834:	bf00      	nop
 8000836:	46bd      	mov	sp, r7
 8000838:	bc80      	pop	{r7}
 800083a:	4770      	bx	lr
 800083c:	20000008 	.word	0x20000008
 8000840:	20000378 	.word	0x20000378

08000844 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  return uwTick;
 8000848:	4b02      	ldr	r3, [pc, #8]	@ (8000854 <HAL_GetTick+0x10>)
 800084a:	681b      	ldr	r3, [r3, #0]
}
 800084c:	4618      	mov	r0, r3
 800084e:	46bd      	mov	sp, r7
 8000850:	bc80      	pop	{r7}
 8000852:	4770      	bx	lr
 8000854:	20000378 	.word	0x20000378

08000858 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b084      	sub	sp, #16
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000860:	f7ff fff0 	bl	8000844 <HAL_GetTick>
 8000864:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800086a:	68fb      	ldr	r3, [r7, #12]
 800086c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000870:	d005      	beq.n	800087e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000872:	4b0a      	ldr	r3, [pc, #40]	@ (800089c <HAL_Delay+0x44>)
 8000874:	781b      	ldrb	r3, [r3, #0]
 8000876:	461a      	mov	r2, r3
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	4413      	add	r3, r2
 800087c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800087e:	bf00      	nop
 8000880:	f7ff ffe0 	bl	8000844 <HAL_GetTick>
 8000884:	4602      	mov	r2, r0
 8000886:	68bb      	ldr	r3, [r7, #8]
 8000888:	1ad3      	subs	r3, r2, r3
 800088a:	68fa      	ldr	r2, [r7, #12]
 800088c:	429a      	cmp	r2, r3
 800088e:	d8f7      	bhi.n	8000880 <HAL_Delay+0x28>
  {
  }
}
 8000890:	bf00      	nop
 8000892:	bf00      	nop
 8000894:	3710      	adds	r7, #16
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	20000008 	.word	0x20000008

080008a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008a0:	b480      	push	{r7}
 80008a2:	b085      	sub	sp, #20
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	f003 0307 	and.w	r3, r3, #7
 80008ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008b0:	4b0c      	ldr	r3, [pc, #48]	@ (80008e4 <__NVIC_SetPriorityGrouping+0x44>)
 80008b2:	68db      	ldr	r3, [r3, #12]
 80008b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008b6:	68ba      	ldr	r2, [r7, #8]
 80008b8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80008bc:	4013      	ands	r3, r2
 80008be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008c4:	68bb      	ldr	r3, [r7, #8]
 80008c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008c8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80008cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008d2:	4a04      	ldr	r2, [pc, #16]	@ (80008e4 <__NVIC_SetPriorityGrouping+0x44>)
 80008d4:	68bb      	ldr	r3, [r7, #8]
 80008d6:	60d3      	str	r3, [r2, #12]
}
 80008d8:	bf00      	nop
 80008da:	3714      	adds	r7, #20
 80008dc:	46bd      	mov	sp, r7
 80008de:	bc80      	pop	{r7}
 80008e0:	4770      	bx	lr
 80008e2:	bf00      	nop
 80008e4:	e000ed00 	.word	0xe000ed00

080008e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008ec:	4b04      	ldr	r3, [pc, #16]	@ (8000900 <__NVIC_GetPriorityGrouping+0x18>)
 80008ee:	68db      	ldr	r3, [r3, #12]
 80008f0:	0a1b      	lsrs	r3, r3, #8
 80008f2:	f003 0307 	and.w	r3, r3, #7
}
 80008f6:	4618      	mov	r0, r3
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bc80      	pop	{r7}
 80008fc:	4770      	bx	lr
 80008fe:	bf00      	nop
 8000900:	e000ed00 	.word	0xe000ed00

08000904 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000904:	b480      	push	{r7}
 8000906:	b083      	sub	sp, #12
 8000908:	af00      	add	r7, sp, #0
 800090a:	4603      	mov	r3, r0
 800090c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800090e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000912:	2b00      	cmp	r3, #0
 8000914:	db0b      	blt.n	800092e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000916:	79fb      	ldrb	r3, [r7, #7]
 8000918:	f003 021f 	and.w	r2, r3, #31
 800091c:	4906      	ldr	r1, [pc, #24]	@ (8000938 <__NVIC_EnableIRQ+0x34>)
 800091e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000922:	095b      	lsrs	r3, r3, #5
 8000924:	2001      	movs	r0, #1
 8000926:	fa00 f202 	lsl.w	r2, r0, r2
 800092a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800092e:	bf00      	nop
 8000930:	370c      	adds	r7, #12
 8000932:	46bd      	mov	sp, r7
 8000934:	bc80      	pop	{r7}
 8000936:	4770      	bx	lr
 8000938:	e000e100 	.word	0xe000e100

0800093c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800093c:	b480      	push	{r7}
 800093e:	b083      	sub	sp, #12
 8000940:	af00      	add	r7, sp, #0
 8000942:	4603      	mov	r3, r0
 8000944:	6039      	str	r1, [r7, #0]
 8000946:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000948:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800094c:	2b00      	cmp	r3, #0
 800094e:	db0a      	blt.n	8000966 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000950:	683b      	ldr	r3, [r7, #0]
 8000952:	b2da      	uxtb	r2, r3
 8000954:	490c      	ldr	r1, [pc, #48]	@ (8000988 <__NVIC_SetPriority+0x4c>)
 8000956:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800095a:	0112      	lsls	r2, r2, #4
 800095c:	b2d2      	uxtb	r2, r2
 800095e:	440b      	add	r3, r1
 8000960:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000964:	e00a      	b.n	800097c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000966:	683b      	ldr	r3, [r7, #0]
 8000968:	b2da      	uxtb	r2, r3
 800096a:	4908      	ldr	r1, [pc, #32]	@ (800098c <__NVIC_SetPriority+0x50>)
 800096c:	79fb      	ldrb	r3, [r7, #7]
 800096e:	f003 030f 	and.w	r3, r3, #15
 8000972:	3b04      	subs	r3, #4
 8000974:	0112      	lsls	r2, r2, #4
 8000976:	b2d2      	uxtb	r2, r2
 8000978:	440b      	add	r3, r1
 800097a:	761a      	strb	r2, [r3, #24]
}
 800097c:	bf00      	nop
 800097e:	370c      	adds	r7, #12
 8000980:	46bd      	mov	sp, r7
 8000982:	bc80      	pop	{r7}
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop
 8000988:	e000e100 	.word	0xe000e100
 800098c:	e000ed00 	.word	0xe000ed00

08000990 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000990:	b480      	push	{r7}
 8000992:	b089      	sub	sp, #36	@ 0x24
 8000994:	af00      	add	r7, sp, #0
 8000996:	60f8      	str	r0, [r7, #12]
 8000998:	60b9      	str	r1, [r7, #8]
 800099a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	f003 0307 	and.w	r3, r3, #7
 80009a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009a4:	69fb      	ldr	r3, [r7, #28]
 80009a6:	f1c3 0307 	rsb	r3, r3, #7
 80009aa:	2b04      	cmp	r3, #4
 80009ac:	bf28      	it	cs
 80009ae:	2304      	movcs	r3, #4
 80009b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009b2:	69fb      	ldr	r3, [r7, #28]
 80009b4:	3304      	adds	r3, #4
 80009b6:	2b06      	cmp	r3, #6
 80009b8:	d902      	bls.n	80009c0 <NVIC_EncodePriority+0x30>
 80009ba:	69fb      	ldr	r3, [r7, #28]
 80009bc:	3b03      	subs	r3, #3
 80009be:	e000      	b.n	80009c2 <NVIC_EncodePriority+0x32>
 80009c0:	2300      	movs	r3, #0
 80009c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009c4:	f04f 32ff 	mov.w	r2, #4294967295
 80009c8:	69bb      	ldr	r3, [r7, #24]
 80009ca:	fa02 f303 	lsl.w	r3, r2, r3
 80009ce:	43da      	mvns	r2, r3
 80009d0:	68bb      	ldr	r3, [r7, #8]
 80009d2:	401a      	ands	r2, r3
 80009d4:	697b      	ldr	r3, [r7, #20]
 80009d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009d8:	f04f 31ff 	mov.w	r1, #4294967295
 80009dc:	697b      	ldr	r3, [r7, #20]
 80009de:	fa01 f303 	lsl.w	r3, r1, r3
 80009e2:	43d9      	mvns	r1, r3
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009e8:	4313      	orrs	r3, r2
         );
}
 80009ea:	4618      	mov	r0, r3
 80009ec:	3724      	adds	r7, #36	@ 0x24
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bc80      	pop	{r7}
 80009f2:	4770      	bx	lr

080009f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009fc:	6878      	ldr	r0, [r7, #4]
 80009fe:	f7ff ff4f 	bl	80008a0 <__NVIC_SetPriorityGrouping>
}
 8000a02:	bf00      	nop
 8000a04:	3708      	adds	r7, #8
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}

08000a0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a0a:	b580      	push	{r7, lr}
 8000a0c:	b086      	sub	sp, #24
 8000a0e:	af00      	add	r7, sp, #0
 8000a10:	4603      	mov	r3, r0
 8000a12:	60b9      	str	r1, [r7, #8]
 8000a14:	607a      	str	r2, [r7, #4]
 8000a16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a1c:	f7ff ff64 	bl	80008e8 <__NVIC_GetPriorityGrouping>
 8000a20:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a22:	687a      	ldr	r2, [r7, #4]
 8000a24:	68b9      	ldr	r1, [r7, #8]
 8000a26:	6978      	ldr	r0, [r7, #20]
 8000a28:	f7ff ffb2 	bl	8000990 <NVIC_EncodePriority>
 8000a2c:	4602      	mov	r2, r0
 8000a2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a32:	4611      	mov	r1, r2
 8000a34:	4618      	mov	r0, r3
 8000a36:	f7ff ff81 	bl	800093c <__NVIC_SetPriority>
}
 8000a3a:	bf00      	nop
 8000a3c:	3718      	adds	r7, #24
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}

08000a42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a42:	b580      	push	{r7, lr}
 8000a44:	b082      	sub	sp, #8
 8000a46:	af00      	add	r7, sp, #0
 8000a48:	4603      	mov	r3, r0
 8000a4a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a50:	4618      	mov	r0, r3
 8000a52:	f7ff ff57 	bl	8000904 <__NVIC_EnableIRQ>
}
 8000a56:	bf00      	nop
 8000a58:	3708      	adds	r7, #8
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
	...

08000a60 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a60:	b480      	push	{r7}
 8000a62:	b08b      	sub	sp, #44	@ 0x2c
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
 8000a68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a72:	e161      	b.n	8000d38 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000a74:	2201      	movs	r2, #1
 8000a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a78:	fa02 f303 	lsl.w	r3, r2, r3
 8000a7c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a7e:	683b      	ldr	r3, [r7, #0]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	69fa      	ldr	r2, [r7, #28]
 8000a84:	4013      	ands	r3, r2
 8000a86:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000a88:	69ba      	ldr	r2, [r7, #24]
 8000a8a:	69fb      	ldr	r3, [r7, #28]
 8000a8c:	429a      	cmp	r2, r3
 8000a8e:	f040 8150 	bne.w	8000d32 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000a92:	683b      	ldr	r3, [r7, #0]
 8000a94:	685b      	ldr	r3, [r3, #4]
 8000a96:	4a97      	ldr	r2, [pc, #604]	@ (8000cf4 <HAL_GPIO_Init+0x294>)
 8000a98:	4293      	cmp	r3, r2
 8000a9a:	d05e      	beq.n	8000b5a <HAL_GPIO_Init+0xfa>
 8000a9c:	4a95      	ldr	r2, [pc, #596]	@ (8000cf4 <HAL_GPIO_Init+0x294>)
 8000a9e:	4293      	cmp	r3, r2
 8000aa0:	d875      	bhi.n	8000b8e <HAL_GPIO_Init+0x12e>
 8000aa2:	4a95      	ldr	r2, [pc, #596]	@ (8000cf8 <HAL_GPIO_Init+0x298>)
 8000aa4:	4293      	cmp	r3, r2
 8000aa6:	d058      	beq.n	8000b5a <HAL_GPIO_Init+0xfa>
 8000aa8:	4a93      	ldr	r2, [pc, #588]	@ (8000cf8 <HAL_GPIO_Init+0x298>)
 8000aaa:	4293      	cmp	r3, r2
 8000aac:	d86f      	bhi.n	8000b8e <HAL_GPIO_Init+0x12e>
 8000aae:	4a93      	ldr	r2, [pc, #588]	@ (8000cfc <HAL_GPIO_Init+0x29c>)
 8000ab0:	4293      	cmp	r3, r2
 8000ab2:	d052      	beq.n	8000b5a <HAL_GPIO_Init+0xfa>
 8000ab4:	4a91      	ldr	r2, [pc, #580]	@ (8000cfc <HAL_GPIO_Init+0x29c>)
 8000ab6:	4293      	cmp	r3, r2
 8000ab8:	d869      	bhi.n	8000b8e <HAL_GPIO_Init+0x12e>
 8000aba:	4a91      	ldr	r2, [pc, #580]	@ (8000d00 <HAL_GPIO_Init+0x2a0>)
 8000abc:	4293      	cmp	r3, r2
 8000abe:	d04c      	beq.n	8000b5a <HAL_GPIO_Init+0xfa>
 8000ac0:	4a8f      	ldr	r2, [pc, #572]	@ (8000d00 <HAL_GPIO_Init+0x2a0>)
 8000ac2:	4293      	cmp	r3, r2
 8000ac4:	d863      	bhi.n	8000b8e <HAL_GPIO_Init+0x12e>
 8000ac6:	4a8f      	ldr	r2, [pc, #572]	@ (8000d04 <HAL_GPIO_Init+0x2a4>)
 8000ac8:	4293      	cmp	r3, r2
 8000aca:	d046      	beq.n	8000b5a <HAL_GPIO_Init+0xfa>
 8000acc:	4a8d      	ldr	r2, [pc, #564]	@ (8000d04 <HAL_GPIO_Init+0x2a4>)
 8000ace:	4293      	cmp	r3, r2
 8000ad0:	d85d      	bhi.n	8000b8e <HAL_GPIO_Init+0x12e>
 8000ad2:	2b12      	cmp	r3, #18
 8000ad4:	d82a      	bhi.n	8000b2c <HAL_GPIO_Init+0xcc>
 8000ad6:	2b12      	cmp	r3, #18
 8000ad8:	d859      	bhi.n	8000b8e <HAL_GPIO_Init+0x12e>
 8000ada:	a201      	add	r2, pc, #4	@ (adr r2, 8000ae0 <HAL_GPIO_Init+0x80>)
 8000adc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ae0:	08000b5b 	.word	0x08000b5b
 8000ae4:	08000b35 	.word	0x08000b35
 8000ae8:	08000b47 	.word	0x08000b47
 8000aec:	08000b89 	.word	0x08000b89
 8000af0:	08000b8f 	.word	0x08000b8f
 8000af4:	08000b8f 	.word	0x08000b8f
 8000af8:	08000b8f 	.word	0x08000b8f
 8000afc:	08000b8f 	.word	0x08000b8f
 8000b00:	08000b8f 	.word	0x08000b8f
 8000b04:	08000b8f 	.word	0x08000b8f
 8000b08:	08000b8f 	.word	0x08000b8f
 8000b0c:	08000b8f 	.word	0x08000b8f
 8000b10:	08000b8f 	.word	0x08000b8f
 8000b14:	08000b8f 	.word	0x08000b8f
 8000b18:	08000b8f 	.word	0x08000b8f
 8000b1c:	08000b8f 	.word	0x08000b8f
 8000b20:	08000b8f 	.word	0x08000b8f
 8000b24:	08000b3d 	.word	0x08000b3d
 8000b28:	08000b51 	.word	0x08000b51
 8000b2c:	4a76      	ldr	r2, [pc, #472]	@ (8000d08 <HAL_GPIO_Init+0x2a8>)
 8000b2e:	4293      	cmp	r3, r2
 8000b30:	d013      	beq.n	8000b5a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000b32:	e02c      	b.n	8000b8e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000b34:	683b      	ldr	r3, [r7, #0]
 8000b36:	68db      	ldr	r3, [r3, #12]
 8000b38:	623b      	str	r3, [r7, #32]
          break;
 8000b3a:	e029      	b.n	8000b90 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	68db      	ldr	r3, [r3, #12]
 8000b40:	3304      	adds	r3, #4
 8000b42:	623b      	str	r3, [r7, #32]
          break;
 8000b44:	e024      	b.n	8000b90 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	68db      	ldr	r3, [r3, #12]
 8000b4a:	3308      	adds	r3, #8
 8000b4c:	623b      	str	r3, [r7, #32]
          break;
 8000b4e:	e01f      	b.n	8000b90 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	68db      	ldr	r3, [r3, #12]
 8000b54:	330c      	adds	r3, #12
 8000b56:	623b      	str	r3, [r7, #32]
          break;
 8000b58:	e01a      	b.n	8000b90 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	689b      	ldr	r3, [r3, #8]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d102      	bne.n	8000b68 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000b62:	2304      	movs	r3, #4
 8000b64:	623b      	str	r3, [r7, #32]
          break;
 8000b66:	e013      	b.n	8000b90 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	689b      	ldr	r3, [r3, #8]
 8000b6c:	2b01      	cmp	r3, #1
 8000b6e:	d105      	bne.n	8000b7c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b70:	2308      	movs	r3, #8
 8000b72:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	69fa      	ldr	r2, [r7, #28]
 8000b78:	611a      	str	r2, [r3, #16]
          break;
 8000b7a:	e009      	b.n	8000b90 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b7c:	2308      	movs	r3, #8
 8000b7e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	69fa      	ldr	r2, [r7, #28]
 8000b84:	615a      	str	r2, [r3, #20]
          break;
 8000b86:	e003      	b.n	8000b90 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	623b      	str	r3, [r7, #32]
          break;
 8000b8c:	e000      	b.n	8000b90 <HAL_GPIO_Init+0x130>
          break;
 8000b8e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000b90:	69bb      	ldr	r3, [r7, #24]
 8000b92:	2bff      	cmp	r3, #255	@ 0xff
 8000b94:	d801      	bhi.n	8000b9a <HAL_GPIO_Init+0x13a>
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	e001      	b.n	8000b9e <HAL_GPIO_Init+0x13e>
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	3304      	adds	r3, #4
 8000b9e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000ba0:	69bb      	ldr	r3, [r7, #24]
 8000ba2:	2bff      	cmp	r3, #255	@ 0xff
 8000ba4:	d802      	bhi.n	8000bac <HAL_GPIO_Init+0x14c>
 8000ba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ba8:	009b      	lsls	r3, r3, #2
 8000baa:	e002      	b.n	8000bb2 <HAL_GPIO_Init+0x152>
 8000bac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bae:	3b08      	subs	r3, #8
 8000bb0:	009b      	lsls	r3, r3, #2
 8000bb2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000bb4:	697b      	ldr	r3, [r7, #20]
 8000bb6:	681a      	ldr	r2, [r3, #0]
 8000bb8:	210f      	movs	r1, #15
 8000bba:	693b      	ldr	r3, [r7, #16]
 8000bbc:	fa01 f303 	lsl.w	r3, r1, r3
 8000bc0:	43db      	mvns	r3, r3
 8000bc2:	401a      	ands	r2, r3
 8000bc4:	6a39      	ldr	r1, [r7, #32]
 8000bc6:	693b      	ldr	r3, [r7, #16]
 8000bc8:	fa01 f303 	lsl.w	r3, r1, r3
 8000bcc:	431a      	orrs	r2, r3
 8000bce:	697b      	ldr	r3, [r7, #20]
 8000bd0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	685b      	ldr	r3, [r3, #4]
 8000bd6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	f000 80a9 	beq.w	8000d32 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000be0:	4b4a      	ldr	r3, [pc, #296]	@ (8000d0c <HAL_GPIO_Init+0x2ac>)
 8000be2:	699b      	ldr	r3, [r3, #24]
 8000be4:	4a49      	ldr	r2, [pc, #292]	@ (8000d0c <HAL_GPIO_Init+0x2ac>)
 8000be6:	f043 0301 	orr.w	r3, r3, #1
 8000bea:	6193      	str	r3, [r2, #24]
 8000bec:	4b47      	ldr	r3, [pc, #284]	@ (8000d0c <HAL_GPIO_Init+0x2ac>)
 8000bee:	699b      	ldr	r3, [r3, #24]
 8000bf0:	f003 0301 	and.w	r3, r3, #1
 8000bf4:	60bb      	str	r3, [r7, #8]
 8000bf6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000bf8:	4a45      	ldr	r2, [pc, #276]	@ (8000d10 <HAL_GPIO_Init+0x2b0>)
 8000bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bfc:	089b      	lsrs	r3, r3, #2
 8000bfe:	3302      	adds	r3, #2
 8000c00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c04:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c08:	f003 0303 	and.w	r3, r3, #3
 8000c0c:	009b      	lsls	r3, r3, #2
 8000c0e:	220f      	movs	r2, #15
 8000c10:	fa02 f303 	lsl.w	r3, r2, r3
 8000c14:	43db      	mvns	r3, r3
 8000c16:	68fa      	ldr	r2, [r7, #12]
 8000c18:	4013      	ands	r3, r2
 8000c1a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	4a3d      	ldr	r2, [pc, #244]	@ (8000d14 <HAL_GPIO_Init+0x2b4>)
 8000c20:	4293      	cmp	r3, r2
 8000c22:	d00d      	beq.n	8000c40 <HAL_GPIO_Init+0x1e0>
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	4a3c      	ldr	r2, [pc, #240]	@ (8000d18 <HAL_GPIO_Init+0x2b8>)
 8000c28:	4293      	cmp	r3, r2
 8000c2a:	d007      	beq.n	8000c3c <HAL_GPIO_Init+0x1dc>
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	4a3b      	ldr	r2, [pc, #236]	@ (8000d1c <HAL_GPIO_Init+0x2bc>)
 8000c30:	4293      	cmp	r3, r2
 8000c32:	d101      	bne.n	8000c38 <HAL_GPIO_Init+0x1d8>
 8000c34:	2302      	movs	r3, #2
 8000c36:	e004      	b.n	8000c42 <HAL_GPIO_Init+0x1e2>
 8000c38:	2303      	movs	r3, #3
 8000c3a:	e002      	b.n	8000c42 <HAL_GPIO_Init+0x1e2>
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	e000      	b.n	8000c42 <HAL_GPIO_Init+0x1e2>
 8000c40:	2300      	movs	r3, #0
 8000c42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000c44:	f002 0203 	and.w	r2, r2, #3
 8000c48:	0092      	lsls	r2, r2, #2
 8000c4a:	4093      	lsls	r3, r2
 8000c4c:	68fa      	ldr	r2, [r7, #12]
 8000c4e:	4313      	orrs	r3, r2
 8000c50:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000c52:	492f      	ldr	r1, [pc, #188]	@ (8000d10 <HAL_GPIO_Init+0x2b0>)
 8000c54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c56:	089b      	lsrs	r3, r3, #2
 8000c58:	3302      	adds	r3, #2
 8000c5a:	68fa      	ldr	r2, [r7, #12]
 8000c5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	685b      	ldr	r3, [r3, #4]
 8000c64:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d006      	beq.n	8000c7a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000c6c:	4b2c      	ldr	r3, [pc, #176]	@ (8000d20 <HAL_GPIO_Init+0x2c0>)
 8000c6e:	689a      	ldr	r2, [r3, #8]
 8000c70:	492b      	ldr	r1, [pc, #172]	@ (8000d20 <HAL_GPIO_Init+0x2c0>)
 8000c72:	69bb      	ldr	r3, [r7, #24]
 8000c74:	4313      	orrs	r3, r2
 8000c76:	608b      	str	r3, [r1, #8]
 8000c78:	e006      	b.n	8000c88 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000c7a:	4b29      	ldr	r3, [pc, #164]	@ (8000d20 <HAL_GPIO_Init+0x2c0>)
 8000c7c:	689a      	ldr	r2, [r3, #8]
 8000c7e:	69bb      	ldr	r3, [r7, #24]
 8000c80:	43db      	mvns	r3, r3
 8000c82:	4927      	ldr	r1, [pc, #156]	@ (8000d20 <HAL_GPIO_Init+0x2c0>)
 8000c84:	4013      	ands	r3, r2
 8000c86:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	685b      	ldr	r3, [r3, #4]
 8000c8c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d006      	beq.n	8000ca2 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000c94:	4b22      	ldr	r3, [pc, #136]	@ (8000d20 <HAL_GPIO_Init+0x2c0>)
 8000c96:	68da      	ldr	r2, [r3, #12]
 8000c98:	4921      	ldr	r1, [pc, #132]	@ (8000d20 <HAL_GPIO_Init+0x2c0>)
 8000c9a:	69bb      	ldr	r3, [r7, #24]
 8000c9c:	4313      	orrs	r3, r2
 8000c9e:	60cb      	str	r3, [r1, #12]
 8000ca0:	e006      	b.n	8000cb0 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000ca2:	4b1f      	ldr	r3, [pc, #124]	@ (8000d20 <HAL_GPIO_Init+0x2c0>)
 8000ca4:	68da      	ldr	r2, [r3, #12]
 8000ca6:	69bb      	ldr	r3, [r7, #24]
 8000ca8:	43db      	mvns	r3, r3
 8000caa:	491d      	ldr	r1, [pc, #116]	@ (8000d20 <HAL_GPIO_Init+0x2c0>)
 8000cac:	4013      	ands	r3, r2
 8000cae:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d006      	beq.n	8000cca <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000cbc:	4b18      	ldr	r3, [pc, #96]	@ (8000d20 <HAL_GPIO_Init+0x2c0>)
 8000cbe:	685a      	ldr	r2, [r3, #4]
 8000cc0:	4917      	ldr	r1, [pc, #92]	@ (8000d20 <HAL_GPIO_Init+0x2c0>)
 8000cc2:	69bb      	ldr	r3, [r7, #24]
 8000cc4:	4313      	orrs	r3, r2
 8000cc6:	604b      	str	r3, [r1, #4]
 8000cc8:	e006      	b.n	8000cd8 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000cca:	4b15      	ldr	r3, [pc, #84]	@ (8000d20 <HAL_GPIO_Init+0x2c0>)
 8000ccc:	685a      	ldr	r2, [r3, #4]
 8000cce:	69bb      	ldr	r3, [r7, #24]
 8000cd0:	43db      	mvns	r3, r3
 8000cd2:	4913      	ldr	r1, [pc, #76]	@ (8000d20 <HAL_GPIO_Init+0x2c0>)
 8000cd4:	4013      	ands	r3, r2
 8000cd6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	685b      	ldr	r3, [r3, #4]
 8000cdc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d01f      	beq.n	8000d24 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000ce4:	4b0e      	ldr	r3, [pc, #56]	@ (8000d20 <HAL_GPIO_Init+0x2c0>)
 8000ce6:	681a      	ldr	r2, [r3, #0]
 8000ce8:	490d      	ldr	r1, [pc, #52]	@ (8000d20 <HAL_GPIO_Init+0x2c0>)
 8000cea:	69bb      	ldr	r3, [r7, #24]
 8000cec:	4313      	orrs	r3, r2
 8000cee:	600b      	str	r3, [r1, #0]
 8000cf0:	e01f      	b.n	8000d32 <HAL_GPIO_Init+0x2d2>
 8000cf2:	bf00      	nop
 8000cf4:	10320000 	.word	0x10320000
 8000cf8:	10310000 	.word	0x10310000
 8000cfc:	10220000 	.word	0x10220000
 8000d00:	10210000 	.word	0x10210000
 8000d04:	10120000 	.word	0x10120000
 8000d08:	10110000 	.word	0x10110000
 8000d0c:	40021000 	.word	0x40021000
 8000d10:	40010000 	.word	0x40010000
 8000d14:	40010800 	.word	0x40010800
 8000d18:	40010c00 	.word	0x40010c00
 8000d1c:	40011000 	.word	0x40011000
 8000d20:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000d24:	4b0b      	ldr	r3, [pc, #44]	@ (8000d54 <HAL_GPIO_Init+0x2f4>)
 8000d26:	681a      	ldr	r2, [r3, #0]
 8000d28:	69bb      	ldr	r3, [r7, #24]
 8000d2a:	43db      	mvns	r3, r3
 8000d2c:	4909      	ldr	r1, [pc, #36]	@ (8000d54 <HAL_GPIO_Init+0x2f4>)
 8000d2e:	4013      	ands	r3, r2
 8000d30:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d34:	3301      	adds	r3, #1
 8000d36:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	681a      	ldr	r2, [r3, #0]
 8000d3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d3e:	fa22 f303 	lsr.w	r3, r2, r3
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	f47f ae96 	bne.w	8000a74 <HAL_GPIO_Init+0x14>
  }
}
 8000d48:	bf00      	nop
 8000d4a:	bf00      	nop
 8000d4c:	372c      	adds	r7, #44	@ 0x2c
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bc80      	pop	{r7}
 8000d52:	4770      	bx	lr
 8000d54:	40010400 	.word	0x40010400

08000d58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b083      	sub	sp, #12
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
 8000d60:	460b      	mov	r3, r1
 8000d62:	807b      	strh	r3, [r7, #2]
 8000d64:	4613      	mov	r3, r2
 8000d66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d68:	787b      	ldrb	r3, [r7, #1]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d003      	beq.n	8000d76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000d6e:	887a      	ldrh	r2, [r7, #2]
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000d74:	e003      	b.n	8000d7e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d76:	887b      	ldrh	r3, [r7, #2]
 8000d78:	041a      	lsls	r2, r3, #16
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	611a      	str	r2, [r3, #16]
}
 8000d7e:	bf00      	nop
 8000d80:	370c      	adds	r7, #12
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bc80      	pop	{r7}
 8000d86:	4770      	bx	lr

08000d88 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	4603      	mov	r3, r0
 8000d90:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000d92:	4b08      	ldr	r3, [pc, #32]	@ (8000db4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000d94:	695a      	ldr	r2, [r3, #20]
 8000d96:	88fb      	ldrh	r3, [r7, #6]
 8000d98:	4013      	ands	r3, r2
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d006      	beq.n	8000dac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000d9e:	4a05      	ldr	r2, [pc, #20]	@ (8000db4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000da0:	88fb      	ldrh	r3, [r7, #6]
 8000da2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000da4:	88fb      	ldrh	r3, [r7, #6]
 8000da6:	4618      	mov	r0, r3
 8000da8:	f7ff faee 	bl	8000388 <HAL_GPIO_EXTI_Callback>
  }
}
 8000dac:	bf00      	nop
 8000dae:	3708      	adds	r7, #8
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	40010400 	.word	0x40010400

08000db8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b086      	sub	sp, #24
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d101      	bne.n	8000dca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	e272      	b.n	80012b0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	f003 0301 	and.w	r3, r3, #1
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	f000 8087 	beq.w	8000ee6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000dd8:	4b92      	ldr	r3, [pc, #584]	@ (8001024 <HAL_RCC_OscConfig+0x26c>)
 8000dda:	685b      	ldr	r3, [r3, #4]
 8000ddc:	f003 030c 	and.w	r3, r3, #12
 8000de0:	2b04      	cmp	r3, #4
 8000de2:	d00c      	beq.n	8000dfe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000de4:	4b8f      	ldr	r3, [pc, #572]	@ (8001024 <HAL_RCC_OscConfig+0x26c>)
 8000de6:	685b      	ldr	r3, [r3, #4]
 8000de8:	f003 030c 	and.w	r3, r3, #12
 8000dec:	2b08      	cmp	r3, #8
 8000dee:	d112      	bne.n	8000e16 <HAL_RCC_OscConfig+0x5e>
 8000df0:	4b8c      	ldr	r3, [pc, #560]	@ (8001024 <HAL_RCC_OscConfig+0x26c>)
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000df8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000dfc:	d10b      	bne.n	8000e16 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000dfe:	4b89      	ldr	r3, [pc, #548]	@ (8001024 <HAL_RCC_OscConfig+0x26c>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d06c      	beq.n	8000ee4 <HAL_RCC_OscConfig+0x12c>
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d168      	bne.n	8000ee4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000e12:	2301      	movs	r3, #1
 8000e14:	e24c      	b.n	80012b0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	685b      	ldr	r3, [r3, #4]
 8000e1a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000e1e:	d106      	bne.n	8000e2e <HAL_RCC_OscConfig+0x76>
 8000e20:	4b80      	ldr	r3, [pc, #512]	@ (8001024 <HAL_RCC_OscConfig+0x26c>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a7f      	ldr	r2, [pc, #508]	@ (8001024 <HAL_RCC_OscConfig+0x26c>)
 8000e26:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e2a:	6013      	str	r3, [r2, #0]
 8000e2c:	e02e      	b.n	8000e8c <HAL_RCC_OscConfig+0xd4>
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d10c      	bne.n	8000e50 <HAL_RCC_OscConfig+0x98>
 8000e36:	4b7b      	ldr	r3, [pc, #492]	@ (8001024 <HAL_RCC_OscConfig+0x26c>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4a7a      	ldr	r2, [pc, #488]	@ (8001024 <HAL_RCC_OscConfig+0x26c>)
 8000e3c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000e40:	6013      	str	r3, [r2, #0]
 8000e42:	4b78      	ldr	r3, [pc, #480]	@ (8001024 <HAL_RCC_OscConfig+0x26c>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	4a77      	ldr	r2, [pc, #476]	@ (8001024 <HAL_RCC_OscConfig+0x26c>)
 8000e48:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000e4c:	6013      	str	r3, [r2, #0]
 8000e4e:	e01d      	b.n	8000e8c <HAL_RCC_OscConfig+0xd4>
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000e58:	d10c      	bne.n	8000e74 <HAL_RCC_OscConfig+0xbc>
 8000e5a:	4b72      	ldr	r3, [pc, #456]	@ (8001024 <HAL_RCC_OscConfig+0x26c>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	4a71      	ldr	r2, [pc, #452]	@ (8001024 <HAL_RCC_OscConfig+0x26c>)
 8000e60:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000e64:	6013      	str	r3, [r2, #0]
 8000e66:	4b6f      	ldr	r3, [pc, #444]	@ (8001024 <HAL_RCC_OscConfig+0x26c>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4a6e      	ldr	r2, [pc, #440]	@ (8001024 <HAL_RCC_OscConfig+0x26c>)
 8000e6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e70:	6013      	str	r3, [r2, #0]
 8000e72:	e00b      	b.n	8000e8c <HAL_RCC_OscConfig+0xd4>
 8000e74:	4b6b      	ldr	r3, [pc, #428]	@ (8001024 <HAL_RCC_OscConfig+0x26c>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a6a      	ldr	r2, [pc, #424]	@ (8001024 <HAL_RCC_OscConfig+0x26c>)
 8000e7a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000e7e:	6013      	str	r3, [r2, #0]
 8000e80:	4b68      	ldr	r3, [pc, #416]	@ (8001024 <HAL_RCC_OscConfig+0x26c>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a67      	ldr	r2, [pc, #412]	@ (8001024 <HAL_RCC_OscConfig+0x26c>)
 8000e86:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000e8a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d013      	beq.n	8000ebc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e94:	f7ff fcd6 	bl	8000844 <HAL_GetTick>
 8000e98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e9a:	e008      	b.n	8000eae <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e9c:	f7ff fcd2 	bl	8000844 <HAL_GetTick>
 8000ea0:	4602      	mov	r2, r0
 8000ea2:	693b      	ldr	r3, [r7, #16]
 8000ea4:	1ad3      	subs	r3, r2, r3
 8000ea6:	2b64      	cmp	r3, #100	@ 0x64
 8000ea8:	d901      	bls.n	8000eae <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000eaa:	2303      	movs	r3, #3
 8000eac:	e200      	b.n	80012b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000eae:	4b5d      	ldr	r3, [pc, #372]	@ (8001024 <HAL_RCC_OscConfig+0x26c>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d0f0      	beq.n	8000e9c <HAL_RCC_OscConfig+0xe4>
 8000eba:	e014      	b.n	8000ee6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ebc:	f7ff fcc2 	bl	8000844 <HAL_GetTick>
 8000ec0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ec2:	e008      	b.n	8000ed6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ec4:	f7ff fcbe 	bl	8000844 <HAL_GetTick>
 8000ec8:	4602      	mov	r2, r0
 8000eca:	693b      	ldr	r3, [r7, #16]
 8000ecc:	1ad3      	subs	r3, r2, r3
 8000ece:	2b64      	cmp	r3, #100	@ 0x64
 8000ed0:	d901      	bls.n	8000ed6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000ed2:	2303      	movs	r3, #3
 8000ed4:	e1ec      	b.n	80012b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ed6:	4b53      	ldr	r3, [pc, #332]	@ (8001024 <HAL_RCC_OscConfig+0x26c>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d1f0      	bne.n	8000ec4 <HAL_RCC_OscConfig+0x10c>
 8000ee2:	e000      	b.n	8000ee6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ee4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f003 0302 	and.w	r3, r3, #2
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d063      	beq.n	8000fba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000ef2:	4b4c      	ldr	r3, [pc, #304]	@ (8001024 <HAL_RCC_OscConfig+0x26c>)
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	f003 030c 	and.w	r3, r3, #12
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d00b      	beq.n	8000f16 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000efe:	4b49      	ldr	r3, [pc, #292]	@ (8001024 <HAL_RCC_OscConfig+0x26c>)
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	f003 030c 	and.w	r3, r3, #12
 8000f06:	2b08      	cmp	r3, #8
 8000f08:	d11c      	bne.n	8000f44 <HAL_RCC_OscConfig+0x18c>
 8000f0a:	4b46      	ldr	r3, [pc, #280]	@ (8001024 <HAL_RCC_OscConfig+0x26c>)
 8000f0c:	685b      	ldr	r3, [r3, #4]
 8000f0e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d116      	bne.n	8000f44 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f16:	4b43      	ldr	r3, [pc, #268]	@ (8001024 <HAL_RCC_OscConfig+0x26c>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	f003 0302 	and.w	r3, r3, #2
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d005      	beq.n	8000f2e <HAL_RCC_OscConfig+0x176>
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	691b      	ldr	r3, [r3, #16]
 8000f26:	2b01      	cmp	r3, #1
 8000f28:	d001      	beq.n	8000f2e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	e1c0      	b.n	80012b0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f2e:	4b3d      	ldr	r3, [pc, #244]	@ (8001024 <HAL_RCC_OscConfig+0x26c>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	695b      	ldr	r3, [r3, #20]
 8000f3a:	00db      	lsls	r3, r3, #3
 8000f3c:	4939      	ldr	r1, [pc, #228]	@ (8001024 <HAL_RCC_OscConfig+0x26c>)
 8000f3e:	4313      	orrs	r3, r2
 8000f40:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f42:	e03a      	b.n	8000fba <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	691b      	ldr	r3, [r3, #16]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d020      	beq.n	8000f8e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f4c:	4b36      	ldr	r3, [pc, #216]	@ (8001028 <HAL_RCC_OscConfig+0x270>)
 8000f4e:	2201      	movs	r2, #1
 8000f50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f52:	f7ff fc77 	bl	8000844 <HAL_GetTick>
 8000f56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f58:	e008      	b.n	8000f6c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f5a:	f7ff fc73 	bl	8000844 <HAL_GetTick>
 8000f5e:	4602      	mov	r2, r0
 8000f60:	693b      	ldr	r3, [r7, #16]
 8000f62:	1ad3      	subs	r3, r2, r3
 8000f64:	2b02      	cmp	r3, #2
 8000f66:	d901      	bls.n	8000f6c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000f68:	2303      	movs	r3, #3
 8000f6a:	e1a1      	b.n	80012b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f6c:	4b2d      	ldr	r3, [pc, #180]	@ (8001024 <HAL_RCC_OscConfig+0x26c>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f003 0302 	and.w	r3, r3, #2
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d0f0      	beq.n	8000f5a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f78:	4b2a      	ldr	r3, [pc, #168]	@ (8001024 <HAL_RCC_OscConfig+0x26c>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	695b      	ldr	r3, [r3, #20]
 8000f84:	00db      	lsls	r3, r3, #3
 8000f86:	4927      	ldr	r1, [pc, #156]	@ (8001024 <HAL_RCC_OscConfig+0x26c>)
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	600b      	str	r3, [r1, #0]
 8000f8c:	e015      	b.n	8000fba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f8e:	4b26      	ldr	r3, [pc, #152]	@ (8001028 <HAL_RCC_OscConfig+0x270>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f94:	f7ff fc56 	bl	8000844 <HAL_GetTick>
 8000f98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f9a:	e008      	b.n	8000fae <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f9c:	f7ff fc52 	bl	8000844 <HAL_GetTick>
 8000fa0:	4602      	mov	r2, r0
 8000fa2:	693b      	ldr	r3, [r7, #16]
 8000fa4:	1ad3      	subs	r3, r2, r3
 8000fa6:	2b02      	cmp	r3, #2
 8000fa8:	d901      	bls.n	8000fae <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000faa:	2303      	movs	r3, #3
 8000fac:	e180      	b.n	80012b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000fae:	4b1d      	ldr	r3, [pc, #116]	@ (8001024 <HAL_RCC_OscConfig+0x26c>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	f003 0302 	and.w	r3, r3, #2
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d1f0      	bne.n	8000f9c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f003 0308 	and.w	r3, r3, #8
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d03a      	beq.n	800103c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	699b      	ldr	r3, [r3, #24]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d019      	beq.n	8001002 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000fce:	4b17      	ldr	r3, [pc, #92]	@ (800102c <HAL_RCC_OscConfig+0x274>)
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fd4:	f7ff fc36 	bl	8000844 <HAL_GetTick>
 8000fd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000fda:	e008      	b.n	8000fee <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000fdc:	f7ff fc32 	bl	8000844 <HAL_GetTick>
 8000fe0:	4602      	mov	r2, r0
 8000fe2:	693b      	ldr	r3, [r7, #16]
 8000fe4:	1ad3      	subs	r3, r2, r3
 8000fe6:	2b02      	cmp	r3, #2
 8000fe8:	d901      	bls.n	8000fee <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000fea:	2303      	movs	r3, #3
 8000fec:	e160      	b.n	80012b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000fee:	4b0d      	ldr	r3, [pc, #52]	@ (8001024 <HAL_RCC_OscConfig+0x26c>)
 8000ff0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ff2:	f003 0302 	and.w	r3, r3, #2
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d0f0      	beq.n	8000fdc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000ffa:	2001      	movs	r0, #1
 8000ffc:	f000 faea 	bl	80015d4 <RCC_Delay>
 8001000:	e01c      	b.n	800103c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001002:	4b0a      	ldr	r3, [pc, #40]	@ (800102c <HAL_RCC_OscConfig+0x274>)
 8001004:	2200      	movs	r2, #0
 8001006:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001008:	f7ff fc1c 	bl	8000844 <HAL_GetTick>
 800100c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800100e:	e00f      	b.n	8001030 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001010:	f7ff fc18 	bl	8000844 <HAL_GetTick>
 8001014:	4602      	mov	r2, r0
 8001016:	693b      	ldr	r3, [r7, #16]
 8001018:	1ad3      	subs	r3, r2, r3
 800101a:	2b02      	cmp	r3, #2
 800101c:	d908      	bls.n	8001030 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800101e:	2303      	movs	r3, #3
 8001020:	e146      	b.n	80012b0 <HAL_RCC_OscConfig+0x4f8>
 8001022:	bf00      	nop
 8001024:	40021000 	.word	0x40021000
 8001028:	42420000 	.word	0x42420000
 800102c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001030:	4b92      	ldr	r3, [pc, #584]	@ (800127c <HAL_RCC_OscConfig+0x4c4>)
 8001032:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001034:	f003 0302 	and.w	r3, r3, #2
 8001038:	2b00      	cmp	r3, #0
 800103a:	d1e9      	bne.n	8001010 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f003 0304 	and.w	r3, r3, #4
 8001044:	2b00      	cmp	r3, #0
 8001046:	f000 80a6 	beq.w	8001196 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800104a:	2300      	movs	r3, #0
 800104c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800104e:	4b8b      	ldr	r3, [pc, #556]	@ (800127c <HAL_RCC_OscConfig+0x4c4>)
 8001050:	69db      	ldr	r3, [r3, #28]
 8001052:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001056:	2b00      	cmp	r3, #0
 8001058:	d10d      	bne.n	8001076 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800105a:	4b88      	ldr	r3, [pc, #544]	@ (800127c <HAL_RCC_OscConfig+0x4c4>)
 800105c:	69db      	ldr	r3, [r3, #28]
 800105e:	4a87      	ldr	r2, [pc, #540]	@ (800127c <HAL_RCC_OscConfig+0x4c4>)
 8001060:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001064:	61d3      	str	r3, [r2, #28]
 8001066:	4b85      	ldr	r3, [pc, #532]	@ (800127c <HAL_RCC_OscConfig+0x4c4>)
 8001068:	69db      	ldr	r3, [r3, #28]
 800106a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800106e:	60bb      	str	r3, [r7, #8]
 8001070:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001072:	2301      	movs	r3, #1
 8001074:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001076:	4b82      	ldr	r3, [pc, #520]	@ (8001280 <HAL_RCC_OscConfig+0x4c8>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800107e:	2b00      	cmp	r3, #0
 8001080:	d118      	bne.n	80010b4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001082:	4b7f      	ldr	r3, [pc, #508]	@ (8001280 <HAL_RCC_OscConfig+0x4c8>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4a7e      	ldr	r2, [pc, #504]	@ (8001280 <HAL_RCC_OscConfig+0x4c8>)
 8001088:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800108c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800108e:	f7ff fbd9 	bl	8000844 <HAL_GetTick>
 8001092:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001094:	e008      	b.n	80010a8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001096:	f7ff fbd5 	bl	8000844 <HAL_GetTick>
 800109a:	4602      	mov	r2, r0
 800109c:	693b      	ldr	r3, [r7, #16]
 800109e:	1ad3      	subs	r3, r2, r3
 80010a0:	2b64      	cmp	r3, #100	@ 0x64
 80010a2:	d901      	bls.n	80010a8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80010a4:	2303      	movs	r3, #3
 80010a6:	e103      	b.n	80012b0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010a8:	4b75      	ldr	r3, [pc, #468]	@ (8001280 <HAL_RCC_OscConfig+0x4c8>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d0f0      	beq.n	8001096 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	68db      	ldr	r3, [r3, #12]
 80010b8:	2b01      	cmp	r3, #1
 80010ba:	d106      	bne.n	80010ca <HAL_RCC_OscConfig+0x312>
 80010bc:	4b6f      	ldr	r3, [pc, #444]	@ (800127c <HAL_RCC_OscConfig+0x4c4>)
 80010be:	6a1b      	ldr	r3, [r3, #32]
 80010c0:	4a6e      	ldr	r2, [pc, #440]	@ (800127c <HAL_RCC_OscConfig+0x4c4>)
 80010c2:	f043 0301 	orr.w	r3, r3, #1
 80010c6:	6213      	str	r3, [r2, #32]
 80010c8:	e02d      	b.n	8001126 <HAL_RCC_OscConfig+0x36e>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	68db      	ldr	r3, [r3, #12]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d10c      	bne.n	80010ec <HAL_RCC_OscConfig+0x334>
 80010d2:	4b6a      	ldr	r3, [pc, #424]	@ (800127c <HAL_RCC_OscConfig+0x4c4>)
 80010d4:	6a1b      	ldr	r3, [r3, #32]
 80010d6:	4a69      	ldr	r2, [pc, #420]	@ (800127c <HAL_RCC_OscConfig+0x4c4>)
 80010d8:	f023 0301 	bic.w	r3, r3, #1
 80010dc:	6213      	str	r3, [r2, #32]
 80010de:	4b67      	ldr	r3, [pc, #412]	@ (800127c <HAL_RCC_OscConfig+0x4c4>)
 80010e0:	6a1b      	ldr	r3, [r3, #32]
 80010e2:	4a66      	ldr	r2, [pc, #408]	@ (800127c <HAL_RCC_OscConfig+0x4c4>)
 80010e4:	f023 0304 	bic.w	r3, r3, #4
 80010e8:	6213      	str	r3, [r2, #32]
 80010ea:	e01c      	b.n	8001126 <HAL_RCC_OscConfig+0x36e>
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	68db      	ldr	r3, [r3, #12]
 80010f0:	2b05      	cmp	r3, #5
 80010f2:	d10c      	bne.n	800110e <HAL_RCC_OscConfig+0x356>
 80010f4:	4b61      	ldr	r3, [pc, #388]	@ (800127c <HAL_RCC_OscConfig+0x4c4>)
 80010f6:	6a1b      	ldr	r3, [r3, #32]
 80010f8:	4a60      	ldr	r2, [pc, #384]	@ (800127c <HAL_RCC_OscConfig+0x4c4>)
 80010fa:	f043 0304 	orr.w	r3, r3, #4
 80010fe:	6213      	str	r3, [r2, #32]
 8001100:	4b5e      	ldr	r3, [pc, #376]	@ (800127c <HAL_RCC_OscConfig+0x4c4>)
 8001102:	6a1b      	ldr	r3, [r3, #32]
 8001104:	4a5d      	ldr	r2, [pc, #372]	@ (800127c <HAL_RCC_OscConfig+0x4c4>)
 8001106:	f043 0301 	orr.w	r3, r3, #1
 800110a:	6213      	str	r3, [r2, #32]
 800110c:	e00b      	b.n	8001126 <HAL_RCC_OscConfig+0x36e>
 800110e:	4b5b      	ldr	r3, [pc, #364]	@ (800127c <HAL_RCC_OscConfig+0x4c4>)
 8001110:	6a1b      	ldr	r3, [r3, #32]
 8001112:	4a5a      	ldr	r2, [pc, #360]	@ (800127c <HAL_RCC_OscConfig+0x4c4>)
 8001114:	f023 0301 	bic.w	r3, r3, #1
 8001118:	6213      	str	r3, [r2, #32]
 800111a:	4b58      	ldr	r3, [pc, #352]	@ (800127c <HAL_RCC_OscConfig+0x4c4>)
 800111c:	6a1b      	ldr	r3, [r3, #32]
 800111e:	4a57      	ldr	r2, [pc, #348]	@ (800127c <HAL_RCC_OscConfig+0x4c4>)
 8001120:	f023 0304 	bic.w	r3, r3, #4
 8001124:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	68db      	ldr	r3, [r3, #12]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d015      	beq.n	800115a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800112e:	f7ff fb89 	bl	8000844 <HAL_GetTick>
 8001132:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001134:	e00a      	b.n	800114c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001136:	f7ff fb85 	bl	8000844 <HAL_GetTick>
 800113a:	4602      	mov	r2, r0
 800113c:	693b      	ldr	r3, [r7, #16]
 800113e:	1ad3      	subs	r3, r2, r3
 8001140:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001144:	4293      	cmp	r3, r2
 8001146:	d901      	bls.n	800114c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001148:	2303      	movs	r3, #3
 800114a:	e0b1      	b.n	80012b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800114c:	4b4b      	ldr	r3, [pc, #300]	@ (800127c <HAL_RCC_OscConfig+0x4c4>)
 800114e:	6a1b      	ldr	r3, [r3, #32]
 8001150:	f003 0302 	and.w	r3, r3, #2
 8001154:	2b00      	cmp	r3, #0
 8001156:	d0ee      	beq.n	8001136 <HAL_RCC_OscConfig+0x37e>
 8001158:	e014      	b.n	8001184 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800115a:	f7ff fb73 	bl	8000844 <HAL_GetTick>
 800115e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001160:	e00a      	b.n	8001178 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001162:	f7ff fb6f 	bl	8000844 <HAL_GetTick>
 8001166:	4602      	mov	r2, r0
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	1ad3      	subs	r3, r2, r3
 800116c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001170:	4293      	cmp	r3, r2
 8001172:	d901      	bls.n	8001178 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001174:	2303      	movs	r3, #3
 8001176:	e09b      	b.n	80012b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001178:	4b40      	ldr	r3, [pc, #256]	@ (800127c <HAL_RCC_OscConfig+0x4c4>)
 800117a:	6a1b      	ldr	r3, [r3, #32]
 800117c:	f003 0302 	and.w	r3, r3, #2
 8001180:	2b00      	cmp	r3, #0
 8001182:	d1ee      	bne.n	8001162 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001184:	7dfb      	ldrb	r3, [r7, #23]
 8001186:	2b01      	cmp	r3, #1
 8001188:	d105      	bne.n	8001196 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800118a:	4b3c      	ldr	r3, [pc, #240]	@ (800127c <HAL_RCC_OscConfig+0x4c4>)
 800118c:	69db      	ldr	r3, [r3, #28]
 800118e:	4a3b      	ldr	r2, [pc, #236]	@ (800127c <HAL_RCC_OscConfig+0x4c4>)
 8001190:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001194:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	69db      	ldr	r3, [r3, #28]
 800119a:	2b00      	cmp	r3, #0
 800119c:	f000 8087 	beq.w	80012ae <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80011a0:	4b36      	ldr	r3, [pc, #216]	@ (800127c <HAL_RCC_OscConfig+0x4c4>)
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	f003 030c 	and.w	r3, r3, #12
 80011a8:	2b08      	cmp	r3, #8
 80011aa:	d061      	beq.n	8001270 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	69db      	ldr	r3, [r3, #28]
 80011b0:	2b02      	cmp	r3, #2
 80011b2:	d146      	bne.n	8001242 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011b4:	4b33      	ldr	r3, [pc, #204]	@ (8001284 <HAL_RCC_OscConfig+0x4cc>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011ba:	f7ff fb43 	bl	8000844 <HAL_GetTick>
 80011be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011c0:	e008      	b.n	80011d4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011c2:	f7ff fb3f 	bl	8000844 <HAL_GetTick>
 80011c6:	4602      	mov	r2, r0
 80011c8:	693b      	ldr	r3, [r7, #16]
 80011ca:	1ad3      	subs	r3, r2, r3
 80011cc:	2b02      	cmp	r3, #2
 80011ce:	d901      	bls.n	80011d4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80011d0:	2303      	movs	r3, #3
 80011d2:	e06d      	b.n	80012b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011d4:	4b29      	ldr	r3, [pc, #164]	@ (800127c <HAL_RCC_OscConfig+0x4c4>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d1f0      	bne.n	80011c2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	6a1b      	ldr	r3, [r3, #32]
 80011e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80011e8:	d108      	bne.n	80011fc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80011ea:	4b24      	ldr	r3, [pc, #144]	@ (800127c <HAL_RCC_OscConfig+0x4c4>)
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	689b      	ldr	r3, [r3, #8]
 80011f6:	4921      	ldr	r1, [pc, #132]	@ (800127c <HAL_RCC_OscConfig+0x4c4>)
 80011f8:	4313      	orrs	r3, r2
 80011fa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80011fc:	4b1f      	ldr	r3, [pc, #124]	@ (800127c <HAL_RCC_OscConfig+0x4c4>)
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6a19      	ldr	r1, [r3, #32]
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800120c:	430b      	orrs	r3, r1
 800120e:	491b      	ldr	r1, [pc, #108]	@ (800127c <HAL_RCC_OscConfig+0x4c4>)
 8001210:	4313      	orrs	r3, r2
 8001212:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001214:	4b1b      	ldr	r3, [pc, #108]	@ (8001284 <HAL_RCC_OscConfig+0x4cc>)
 8001216:	2201      	movs	r2, #1
 8001218:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800121a:	f7ff fb13 	bl	8000844 <HAL_GetTick>
 800121e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001220:	e008      	b.n	8001234 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001222:	f7ff fb0f 	bl	8000844 <HAL_GetTick>
 8001226:	4602      	mov	r2, r0
 8001228:	693b      	ldr	r3, [r7, #16]
 800122a:	1ad3      	subs	r3, r2, r3
 800122c:	2b02      	cmp	r3, #2
 800122e:	d901      	bls.n	8001234 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001230:	2303      	movs	r3, #3
 8001232:	e03d      	b.n	80012b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001234:	4b11      	ldr	r3, [pc, #68]	@ (800127c <HAL_RCC_OscConfig+0x4c4>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800123c:	2b00      	cmp	r3, #0
 800123e:	d0f0      	beq.n	8001222 <HAL_RCC_OscConfig+0x46a>
 8001240:	e035      	b.n	80012ae <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001242:	4b10      	ldr	r3, [pc, #64]	@ (8001284 <HAL_RCC_OscConfig+0x4cc>)
 8001244:	2200      	movs	r2, #0
 8001246:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001248:	f7ff fafc 	bl	8000844 <HAL_GetTick>
 800124c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800124e:	e008      	b.n	8001262 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001250:	f7ff faf8 	bl	8000844 <HAL_GetTick>
 8001254:	4602      	mov	r2, r0
 8001256:	693b      	ldr	r3, [r7, #16]
 8001258:	1ad3      	subs	r3, r2, r3
 800125a:	2b02      	cmp	r3, #2
 800125c:	d901      	bls.n	8001262 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800125e:	2303      	movs	r3, #3
 8001260:	e026      	b.n	80012b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001262:	4b06      	ldr	r3, [pc, #24]	@ (800127c <HAL_RCC_OscConfig+0x4c4>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800126a:	2b00      	cmp	r3, #0
 800126c:	d1f0      	bne.n	8001250 <HAL_RCC_OscConfig+0x498>
 800126e:	e01e      	b.n	80012ae <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	69db      	ldr	r3, [r3, #28]
 8001274:	2b01      	cmp	r3, #1
 8001276:	d107      	bne.n	8001288 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001278:	2301      	movs	r3, #1
 800127a:	e019      	b.n	80012b0 <HAL_RCC_OscConfig+0x4f8>
 800127c:	40021000 	.word	0x40021000
 8001280:	40007000 	.word	0x40007000
 8001284:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001288:	4b0b      	ldr	r3, [pc, #44]	@ (80012b8 <HAL_RCC_OscConfig+0x500>)
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6a1b      	ldr	r3, [r3, #32]
 8001298:	429a      	cmp	r2, r3
 800129a:	d106      	bne.n	80012aa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012a6:	429a      	cmp	r2, r3
 80012a8:	d001      	beq.n	80012ae <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80012aa:	2301      	movs	r3, #1
 80012ac:	e000      	b.n	80012b0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80012ae:	2300      	movs	r3, #0
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	3718      	adds	r7, #24
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	40021000 	.word	0x40021000

080012bc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b084      	sub	sp, #16
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
 80012c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d101      	bne.n	80012d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80012cc:	2301      	movs	r3, #1
 80012ce:	e0d0      	b.n	8001472 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80012d0:	4b6a      	ldr	r3, [pc, #424]	@ (800147c <HAL_RCC_ClockConfig+0x1c0>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f003 0307 	and.w	r3, r3, #7
 80012d8:	683a      	ldr	r2, [r7, #0]
 80012da:	429a      	cmp	r2, r3
 80012dc:	d910      	bls.n	8001300 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012de:	4b67      	ldr	r3, [pc, #412]	@ (800147c <HAL_RCC_ClockConfig+0x1c0>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f023 0207 	bic.w	r2, r3, #7
 80012e6:	4965      	ldr	r1, [pc, #404]	@ (800147c <HAL_RCC_ClockConfig+0x1c0>)
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	4313      	orrs	r3, r2
 80012ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80012ee:	4b63      	ldr	r3, [pc, #396]	@ (800147c <HAL_RCC_ClockConfig+0x1c0>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f003 0307 	and.w	r3, r3, #7
 80012f6:	683a      	ldr	r2, [r7, #0]
 80012f8:	429a      	cmp	r2, r3
 80012fa:	d001      	beq.n	8001300 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80012fc:	2301      	movs	r3, #1
 80012fe:	e0b8      	b.n	8001472 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f003 0302 	and.w	r3, r3, #2
 8001308:	2b00      	cmp	r3, #0
 800130a:	d020      	beq.n	800134e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f003 0304 	and.w	r3, r3, #4
 8001314:	2b00      	cmp	r3, #0
 8001316:	d005      	beq.n	8001324 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001318:	4b59      	ldr	r3, [pc, #356]	@ (8001480 <HAL_RCC_ClockConfig+0x1c4>)
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	4a58      	ldr	r2, [pc, #352]	@ (8001480 <HAL_RCC_ClockConfig+0x1c4>)
 800131e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001322:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f003 0308 	and.w	r3, r3, #8
 800132c:	2b00      	cmp	r3, #0
 800132e:	d005      	beq.n	800133c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001330:	4b53      	ldr	r3, [pc, #332]	@ (8001480 <HAL_RCC_ClockConfig+0x1c4>)
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	4a52      	ldr	r2, [pc, #328]	@ (8001480 <HAL_RCC_ClockConfig+0x1c4>)
 8001336:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800133a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800133c:	4b50      	ldr	r3, [pc, #320]	@ (8001480 <HAL_RCC_ClockConfig+0x1c4>)
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	689b      	ldr	r3, [r3, #8]
 8001348:	494d      	ldr	r1, [pc, #308]	@ (8001480 <HAL_RCC_ClockConfig+0x1c4>)
 800134a:	4313      	orrs	r3, r2
 800134c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f003 0301 	and.w	r3, r3, #1
 8001356:	2b00      	cmp	r3, #0
 8001358:	d040      	beq.n	80013dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	2b01      	cmp	r3, #1
 8001360:	d107      	bne.n	8001372 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001362:	4b47      	ldr	r3, [pc, #284]	@ (8001480 <HAL_RCC_ClockConfig+0x1c4>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800136a:	2b00      	cmp	r3, #0
 800136c:	d115      	bne.n	800139a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800136e:	2301      	movs	r3, #1
 8001370:	e07f      	b.n	8001472 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	2b02      	cmp	r3, #2
 8001378:	d107      	bne.n	800138a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800137a:	4b41      	ldr	r3, [pc, #260]	@ (8001480 <HAL_RCC_ClockConfig+0x1c4>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001382:	2b00      	cmp	r3, #0
 8001384:	d109      	bne.n	800139a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001386:	2301      	movs	r3, #1
 8001388:	e073      	b.n	8001472 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800138a:	4b3d      	ldr	r3, [pc, #244]	@ (8001480 <HAL_RCC_ClockConfig+0x1c4>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f003 0302 	and.w	r3, r3, #2
 8001392:	2b00      	cmp	r3, #0
 8001394:	d101      	bne.n	800139a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001396:	2301      	movs	r3, #1
 8001398:	e06b      	b.n	8001472 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800139a:	4b39      	ldr	r3, [pc, #228]	@ (8001480 <HAL_RCC_ClockConfig+0x1c4>)
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	f023 0203 	bic.w	r2, r3, #3
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	4936      	ldr	r1, [pc, #216]	@ (8001480 <HAL_RCC_ClockConfig+0x1c4>)
 80013a8:	4313      	orrs	r3, r2
 80013aa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80013ac:	f7ff fa4a 	bl	8000844 <HAL_GetTick>
 80013b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013b2:	e00a      	b.n	80013ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013b4:	f7ff fa46 	bl	8000844 <HAL_GetTick>
 80013b8:	4602      	mov	r2, r0
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	1ad3      	subs	r3, r2, r3
 80013be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d901      	bls.n	80013ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80013c6:	2303      	movs	r3, #3
 80013c8:	e053      	b.n	8001472 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013ca:	4b2d      	ldr	r3, [pc, #180]	@ (8001480 <HAL_RCC_ClockConfig+0x1c4>)
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	f003 020c 	and.w	r2, r3, #12
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	009b      	lsls	r3, r3, #2
 80013d8:	429a      	cmp	r2, r3
 80013da:	d1eb      	bne.n	80013b4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80013dc:	4b27      	ldr	r3, [pc, #156]	@ (800147c <HAL_RCC_ClockConfig+0x1c0>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f003 0307 	and.w	r3, r3, #7
 80013e4:	683a      	ldr	r2, [r7, #0]
 80013e6:	429a      	cmp	r2, r3
 80013e8:	d210      	bcs.n	800140c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013ea:	4b24      	ldr	r3, [pc, #144]	@ (800147c <HAL_RCC_ClockConfig+0x1c0>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f023 0207 	bic.w	r2, r3, #7
 80013f2:	4922      	ldr	r1, [pc, #136]	@ (800147c <HAL_RCC_ClockConfig+0x1c0>)
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	4313      	orrs	r3, r2
 80013f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013fa:	4b20      	ldr	r3, [pc, #128]	@ (800147c <HAL_RCC_ClockConfig+0x1c0>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f003 0307 	and.w	r3, r3, #7
 8001402:	683a      	ldr	r2, [r7, #0]
 8001404:	429a      	cmp	r2, r3
 8001406:	d001      	beq.n	800140c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001408:	2301      	movs	r3, #1
 800140a:	e032      	b.n	8001472 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f003 0304 	and.w	r3, r3, #4
 8001414:	2b00      	cmp	r3, #0
 8001416:	d008      	beq.n	800142a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001418:	4b19      	ldr	r3, [pc, #100]	@ (8001480 <HAL_RCC_ClockConfig+0x1c4>)
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	68db      	ldr	r3, [r3, #12]
 8001424:	4916      	ldr	r1, [pc, #88]	@ (8001480 <HAL_RCC_ClockConfig+0x1c4>)
 8001426:	4313      	orrs	r3, r2
 8001428:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f003 0308 	and.w	r3, r3, #8
 8001432:	2b00      	cmp	r3, #0
 8001434:	d009      	beq.n	800144a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001436:	4b12      	ldr	r3, [pc, #72]	@ (8001480 <HAL_RCC_ClockConfig+0x1c4>)
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	691b      	ldr	r3, [r3, #16]
 8001442:	00db      	lsls	r3, r3, #3
 8001444:	490e      	ldr	r1, [pc, #56]	@ (8001480 <HAL_RCC_ClockConfig+0x1c4>)
 8001446:	4313      	orrs	r3, r2
 8001448:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800144a:	f000 f821 	bl	8001490 <HAL_RCC_GetSysClockFreq>
 800144e:	4602      	mov	r2, r0
 8001450:	4b0b      	ldr	r3, [pc, #44]	@ (8001480 <HAL_RCC_ClockConfig+0x1c4>)
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	091b      	lsrs	r3, r3, #4
 8001456:	f003 030f 	and.w	r3, r3, #15
 800145a:	490a      	ldr	r1, [pc, #40]	@ (8001484 <HAL_RCC_ClockConfig+0x1c8>)
 800145c:	5ccb      	ldrb	r3, [r1, r3]
 800145e:	fa22 f303 	lsr.w	r3, r2, r3
 8001462:	4a09      	ldr	r2, [pc, #36]	@ (8001488 <HAL_RCC_ClockConfig+0x1cc>)
 8001464:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001466:	4b09      	ldr	r3, [pc, #36]	@ (800148c <HAL_RCC_ClockConfig+0x1d0>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4618      	mov	r0, r3
 800146c:	f7ff f8ee 	bl	800064c <HAL_InitTick>

  return HAL_OK;
 8001470:	2300      	movs	r3, #0
}
 8001472:	4618      	mov	r0, r3
 8001474:	3710      	adds	r7, #16
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	40022000 	.word	0x40022000
 8001480:	40021000 	.word	0x40021000
 8001484:	0800413c 	.word	0x0800413c
 8001488:	20000000 	.word	0x20000000
 800148c:	20000004 	.word	0x20000004

08001490 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001490:	b480      	push	{r7}
 8001492:	b087      	sub	sp, #28
 8001494:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001496:	2300      	movs	r3, #0
 8001498:	60fb      	str	r3, [r7, #12]
 800149a:	2300      	movs	r3, #0
 800149c:	60bb      	str	r3, [r7, #8]
 800149e:	2300      	movs	r3, #0
 80014a0:	617b      	str	r3, [r7, #20]
 80014a2:	2300      	movs	r3, #0
 80014a4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80014a6:	2300      	movs	r3, #0
 80014a8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80014aa:	4b1e      	ldr	r3, [pc, #120]	@ (8001524 <HAL_RCC_GetSysClockFreq+0x94>)
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	f003 030c 	and.w	r3, r3, #12
 80014b6:	2b04      	cmp	r3, #4
 80014b8:	d002      	beq.n	80014c0 <HAL_RCC_GetSysClockFreq+0x30>
 80014ba:	2b08      	cmp	r3, #8
 80014bc:	d003      	beq.n	80014c6 <HAL_RCC_GetSysClockFreq+0x36>
 80014be:	e027      	b.n	8001510 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80014c0:	4b19      	ldr	r3, [pc, #100]	@ (8001528 <HAL_RCC_GetSysClockFreq+0x98>)
 80014c2:	613b      	str	r3, [r7, #16]
      break;
 80014c4:	e027      	b.n	8001516 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	0c9b      	lsrs	r3, r3, #18
 80014ca:	f003 030f 	and.w	r3, r3, #15
 80014ce:	4a17      	ldr	r2, [pc, #92]	@ (800152c <HAL_RCC_GetSysClockFreq+0x9c>)
 80014d0:	5cd3      	ldrb	r3, [r2, r3]
 80014d2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d010      	beq.n	8001500 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80014de:	4b11      	ldr	r3, [pc, #68]	@ (8001524 <HAL_RCC_GetSysClockFreq+0x94>)
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	0c5b      	lsrs	r3, r3, #17
 80014e4:	f003 0301 	and.w	r3, r3, #1
 80014e8:	4a11      	ldr	r2, [pc, #68]	@ (8001530 <HAL_RCC_GetSysClockFreq+0xa0>)
 80014ea:	5cd3      	ldrb	r3, [r2, r3]
 80014ec:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	4a0d      	ldr	r2, [pc, #52]	@ (8001528 <HAL_RCC_GetSysClockFreq+0x98>)
 80014f2:	fb03 f202 	mul.w	r2, r3, r2
 80014f6:	68bb      	ldr	r3, [r7, #8]
 80014f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80014fc:	617b      	str	r3, [r7, #20]
 80014fe:	e004      	b.n	800150a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	4a0c      	ldr	r2, [pc, #48]	@ (8001534 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001504:	fb02 f303 	mul.w	r3, r2, r3
 8001508:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	613b      	str	r3, [r7, #16]
      break;
 800150e:	e002      	b.n	8001516 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001510:	4b05      	ldr	r3, [pc, #20]	@ (8001528 <HAL_RCC_GetSysClockFreq+0x98>)
 8001512:	613b      	str	r3, [r7, #16]
      break;
 8001514:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001516:	693b      	ldr	r3, [r7, #16]
}
 8001518:	4618      	mov	r0, r3
 800151a:	371c      	adds	r7, #28
 800151c:	46bd      	mov	sp, r7
 800151e:	bc80      	pop	{r7}
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop
 8001524:	40021000 	.word	0x40021000
 8001528:	007a1200 	.word	0x007a1200
 800152c:	08004154 	.word	0x08004154
 8001530:	08004164 	.word	0x08004164
 8001534:	003d0900 	.word	0x003d0900

08001538 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800153c:	4b02      	ldr	r3, [pc, #8]	@ (8001548 <HAL_RCC_GetHCLKFreq+0x10>)
 800153e:	681b      	ldr	r3, [r3, #0]
}
 8001540:	4618      	mov	r0, r3
 8001542:	46bd      	mov	sp, r7
 8001544:	bc80      	pop	{r7}
 8001546:	4770      	bx	lr
 8001548:	20000000 	.word	0x20000000

0800154c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001550:	f7ff fff2 	bl	8001538 <HAL_RCC_GetHCLKFreq>
 8001554:	4602      	mov	r2, r0
 8001556:	4b05      	ldr	r3, [pc, #20]	@ (800156c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	0a1b      	lsrs	r3, r3, #8
 800155c:	f003 0307 	and.w	r3, r3, #7
 8001560:	4903      	ldr	r1, [pc, #12]	@ (8001570 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001562:	5ccb      	ldrb	r3, [r1, r3]
 8001564:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001568:	4618      	mov	r0, r3
 800156a:	bd80      	pop	{r7, pc}
 800156c:	40021000 	.word	0x40021000
 8001570:	0800414c 	.word	0x0800414c

08001574 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001574:	b480      	push	{r7}
 8001576:	b083      	sub	sp, #12
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
 800157c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	220f      	movs	r2, #15
 8001582:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001584:	4b11      	ldr	r3, [pc, #68]	@ (80015cc <HAL_RCC_GetClockConfig+0x58>)
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	f003 0203 	and.w	r2, r3, #3
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001590:	4b0e      	ldr	r3, [pc, #56]	@ (80015cc <HAL_RCC_GetClockConfig+0x58>)
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800159c:	4b0b      	ldr	r3, [pc, #44]	@ (80015cc <HAL_RCC_GetClockConfig+0x58>)
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80015a8:	4b08      	ldr	r3, [pc, #32]	@ (80015cc <HAL_RCC_GetClockConfig+0x58>)
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	08db      	lsrs	r3, r3, #3
 80015ae:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80015b6:	4b06      	ldr	r3, [pc, #24]	@ (80015d0 <HAL_RCC_GetClockConfig+0x5c>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f003 0207 	and.w	r2, r3, #7
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80015c2:	bf00      	nop
 80015c4:	370c      	adds	r7, #12
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bc80      	pop	{r7}
 80015ca:	4770      	bx	lr
 80015cc:	40021000 	.word	0x40021000
 80015d0:	40022000 	.word	0x40022000

080015d4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b085      	sub	sp, #20
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80015dc:	4b0a      	ldr	r3, [pc, #40]	@ (8001608 <RCC_Delay+0x34>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a0a      	ldr	r2, [pc, #40]	@ (800160c <RCC_Delay+0x38>)
 80015e2:	fba2 2303 	umull	r2, r3, r2, r3
 80015e6:	0a5b      	lsrs	r3, r3, #9
 80015e8:	687a      	ldr	r2, [r7, #4]
 80015ea:	fb02 f303 	mul.w	r3, r2, r3
 80015ee:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80015f0:	bf00      	nop
  }
  while (Delay --);
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	1e5a      	subs	r2, r3, #1
 80015f6:	60fa      	str	r2, [r7, #12]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d1f9      	bne.n	80015f0 <RCC_Delay+0x1c>
}
 80015fc:	bf00      	nop
 80015fe:	bf00      	nop
 8001600:	3714      	adds	r7, #20
 8001602:	46bd      	mov	sp, r7
 8001604:	bc80      	pop	{r7}
 8001606:	4770      	bx	lr
 8001608:	20000000 	.word	0x20000000
 800160c:	10624dd3 	.word	0x10624dd3

08001610 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d101      	bne.n	8001622 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800161e:	2301      	movs	r3, #1
 8001620:	e041      	b.n	80016a6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001628:	b2db      	uxtb	r3, r3
 800162a:	2b00      	cmp	r3, #0
 800162c:	d106      	bne.n	800163c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2200      	movs	r2, #0
 8001632:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001636:	6878      	ldr	r0, [r7, #4]
 8001638:	f000 f839 	bl	80016ae <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2202      	movs	r2, #2
 8001640:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	3304      	adds	r3, #4
 800164c:	4619      	mov	r1, r3
 800164e:	4610      	mov	r0, r2
 8001650:	f000 f996 	bl	8001980 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2201      	movs	r2, #1
 8001658:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2201      	movs	r2, #1
 8001660:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2201      	movs	r2, #1
 8001668:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2201      	movs	r2, #1
 8001670:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2201      	movs	r2, #1
 8001678:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2201      	movs	r2, #1
 8001680:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2201      	movs	r2, #1
 8001688:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2201      	movs	r2, #1
 8001690:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2201      	movs	r2, #1
 8001698:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2201      	movs	r2, #1
 80016a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80016a4:	2300      	movs	r3, #0
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	3708      	adds	r7, #8
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}

080016ae <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80016ae:	b480      	push	{r7}
 80016b0:	b083      	sub	sp, #12
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80016b6:	bf00      	nop
 80016b8:	370c      	adds	r7, #12
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bc80      	pop	{r7}
 80016be:	4770      	bx	lr

080016c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b085      	sub	sp, #20
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80016ce:	b2db      	uxtb	r3, r3
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	d001      	beq.n	80016d8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80016d4:	2301      	movs	r3, #1
 80016d6:	e035      	b.n	8001744 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2202      	movs	r2, #2
 80016dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	68da      	ldr	r2, [r3, #12]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f042 0201 	orr.w	r2, r2, #1
 80016ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a16      	ldr	r2, [pc, #88]	@ (8001750 <HAL_TIM_Base_Start_IT+0x90>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d009      	beq.n	800170e <HAL_TIM_Base_Start_IT+0x4e>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001702:	d004      	beq.n	800170e <HAL_TIM_Base_Start_IT+0x4e>
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a12      	ldr	r2, [pc, #72]	@ (8001754 <HAL_TIM_Base_Start_IT+0x94>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d111      	bne.n	8001732 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	f003 0307 	and.w	r3, r3, #7
 8001718:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	2b06      	cmp	r3, #6
 800171e:	d010      	beq.n	8001742 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	681a      	ldr	r2, [r3, #0]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f042 0201 	orr.w	r2, r2, #1
 800172e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001730:	e007      	b.n	8001742 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f042 0201 	orr.w	r2, r2, #1
 8001740:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001742:	2300      	movs	r3, #0
}
 8001744:	4618      	mov	r0, r3
 8001746:	3714      	adds	r7, #20
 8001748:	46bd      	mov	sp, r7
 800174a:	bc80      	pop	{r7}
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop
 8001750:	40012c00 	.word	0x40012c00
 8001754:	40000400 	.word	0x40000400

08001758 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b084      	sub	sp, #16
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	68db      	ldr	r3, [r3, #12]
 8001766:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	691b      	ldr	r3, [r3, #16]
 800176e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001770:	68bb      	ldr	r3, [r7, #8]
 8001772:	f003 0302 	and.w	r3, r3, #2
 8001776:	2b00      	cmp	r3, #0
 8001778:	d020      	beq.n	80017bc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	f003 0302 	and.w	r3, r3, #2
 8001780:	2b00      	cmp	r3, #0
 8001782:	d01b      	beq.n	80017bc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f06f 0202 	mvn.w	r2, #2
 800178c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2201      	movs	r2, #1
 8001792:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	699b      	ldr	r3, [r3, #24]
 800179a:	f003 0303 	and.w	r3, r3, #3
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d003      	beq.n	80017aa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80017a2:	6878      	ldr	r0, [r7, #4]
 80017a4:	f000 f8d1 	bl	800194a <HAL_TIM_IC_CaptureCallback>
 80017a8:	e005      	b.n	80017b6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80017aa:	6878      	ldr	r0, [r7, #4]
 80017ac:	f000 f8c4 	bl	8001938 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80017b0:	6878      	ldr	r0, [r7, #4]
 80017b2:	f000 f8d3 	bl	800195c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2200      	movs	r2, #0
 80017ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	f003 0304 	and.w	r3, r3, #4
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d020      	beq.n	8001808 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	f003 0304 	and.w	r3, r3, #4
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d01b      	beq.n	8001808 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f06f 0204 	mvn.w	r2, #4
 80017d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2202      	movs	r2, #2
 80017de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	699b      	ldr	r3, [r3, #24]
 80017e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d003      	beq.n	80017f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80017ee:	6878      	ldr	r0, [r7, #4]
 80017f0:	f000 f8ab 	bl	800194a <HAL_TIM_IC_CaptureCallback>
 80017f4:	e005      	b.n	8001802 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80017f6:	6878      	ldr	r0, [r7, #4]
 80017f8:	f000 f89e 	bl	8001938 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80017fc:	6878      	ldr	r0, [r7, #4]
 80017fe:	f000 f8ad 	bl	800195c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2200      	movs	r2, #0
 8001806:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	f003 0308 	and.w	r3, r3, #8
 800180e:	2b00      	cmp	r3, #0
 8001810:	d020      	beq.n	8001854 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	f003 0308 	and.w	r3, r3, #8
 8001818:	2b00      	cmp	r3, #0
 800181a:	d01b      	beq.n	8001854 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f06f 0208 	mvn.w	r2, #8
 8001824:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2204      	movs	r2, #4
 800182a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	69db      	ldr	r3, [r3, #28]
 8001832:	f003 0303 	and.w	r3, r3, #3
 8001836:	2b00      	cmp	r3, #0
 8001838:	d003      	beq.n	8001842 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800183a:	6878      	ldr	r0, [r7, #4]
 800183c:	f000 f885 	bl	800194a <HAL_TIM_IC_CaptureCallback>
 8001840:	e005      	b.n	800184e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001842:	6878      	ldr	r0, [r7, #4]
 8001844:	f000 f878 	bl	8001938 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001848:	6878      	ldr	r0, [r7, #4]
 800184a:	f000 f887 	bl	800195c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2200      	movs	r2, #0
 8001852:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	f003 0310 	and.w	r3, r3, #16
 800185a:	2b00      	cmp	r3, #0
 800185c:	d020      	beq.n	80018a0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	f003 0310 	and.w	r3, r3, #16
 8001864:	2b00      	cmp	r3, #0
 8001866:	d01b      	beq.n	80018a0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f06f 0210 	mvn.w	r2, #16
 8001870:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2208      	movs	r2, #8
 8001876:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	69db      	ldr	r3, [r3, #28]
 800187e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001882:	2b00      	cmp	r3, #0
 8001884:	d003      	beq.n	800188e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001886:	6878      	ldr	r0, [r7, #4]
 8001888:	f000 f85f 	bl	800194a <HAL_TIM_IC_CaptureCallback>
 800188c:	e005      	b.n	800189a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800188e:	6878      	ldr	r0, [r7, #4]
 8001890:	f000 f852 	bl	8001938 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001894:	6878      	ldr	r0, [r7, #4]
 8001896:	f000 f861 	bl	800195c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2200      	movs	r2, #0
 800189e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	f003 0301 	and.w	r3, r3, #1
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d00c      	beq.n	80018c4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	f003 0301 	and.w	r3, r3, #1
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d007      	beq.n	80018c4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f06f 0201 	mvn.w	r2, #1
 80018bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80018be:	6878      	ldr	r0, [r7, #4]
 80018c0:	f7fe fe76 	bl	80005b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d00c      	beq.n	80018e8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d007      	beq.n	80018e8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80018e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80018e2:	6878      	ldr	r0, [r7, #4]
 80018e4:	f000 f8b9 	bl	8001a5a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d00c      	beq.n	800190c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d007      	beq.n	800190c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001904:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001906:	6878      	ldr	r0, [r7, #4]
 8001908:	f000 f831 	bl	800196e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	f003 0320 	and.w	r3, r3, #32
 8001912:	2b00      	cmp	r3, #0
 8001914:	d00c      	beq.n	8001930 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	f003 0320 	and.w	r3, r3, #32
 800191c:	2b00      	cmp	r3, #0
 800191e:	d007      	beq.n	8001930 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f06f 0220 	mvn.w	r2, #32
 8001928:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800192a:	6878      	ldr	r0, [r7, #4]
 800192c:	f000 f88c 	bl	8001a48 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001930:	bf00      	nop
 8001932:	3710      	adds	r7, #16
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}

08001938 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001938:	b480      	push	{r7}
 800193a:	b083      	sub	sp, #12
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001940:	bf00      	nop
 8001942:	370c      	adds	r7, #12
 8001944:	46bd      	mov	sp, r7
 8001946:	bc80      	pop	{r7}
 8001948:	4770      	bx	lr

0800194a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800194a:	b480      	push	{r7}
 800194c:	b083      	sub	sp, #12
 800194e:	af00      	add	r7, sp, #0
 8001950:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001952:	bf00      	nop
 8001954:	370c      	adds	r7, #12
 8001956:	46bd      	mov	sp, r7
 8001958:	bc80      	pop	{r7}
 800195a:	4770      	bx	lr

0800195c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001964:	bf00      	nop
 8001966:	370c      	adds	r7, #12
 8001968:	46bd      	mov	sp, r7
 800196a:	bc80      	pop	{r7}
 800196c:	4770      	bx	lr

0800196e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800196e:	b480      	push	{r7}
 8001970:	b083      	sub	sp, #12
 8001972:	af00      	add	r7, sp, #0
 8001974:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001976:	bf00      	nop
 8001978:	370c      	adds	r7, #12
 800197a:	46bd      	mov	sp, r7
 800197c:	bc80      	pop	{r7}
 800197e:	4770      	bx	lr

08001980 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001980:	b480      	push	{r7}
 8001982:	b085      	sub	sp, #20
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
 8001988:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	4a2b      	ldr	r2, [pc, #172]	@ (8001a40 <TIM_Base_SetConfig+0xc0>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d007      	beq.n	80019a8 <TIM_Base_SetConfig+0x28>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800199e:	d003      	beq.n	80019a8 <TIM_Base_SetConfig+0x28>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	4a28      	ldr	r2, [pc, #160]	@ (8001a44 <TIM_Base_SetConfig+0xc4>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d108      	bne.n	80019ba <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80019ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	68fa      	ldr	r2, [r7, #12]
 80019b6:	4313      	orrs	r3, r2
 80019b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	4a20      	ldr	r2, [pc, #128]	@ (8001a40 <TIM_Base_SetConfig+0xc0>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d007      	beq.n	80019d2 <TIM_Base_SetConfig+0x52>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80019c8:	d003      	beq.n	80019d2 <TIM_Base_SetConfig+0x52>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	4a1d      	ldr	r2, [pc, #116]	@ (8001a44 <TIM_Base_SetConfig+0xc4>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d108      	bne.n	80019e4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80019d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	68db      	ldr	r3, [r3, #12]
 80019de:	68fa      	ldr	r2, [r7, #12]
 80019e0:	4313      	orrs	r3, r2
 80019e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	695b      	ldr	r3, [r3, #20]
 80019ee:	4313      	orrs	r3, r2
 80019f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	68fa      	ldr	r2, [r7, #12]
 80019f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	689a      	ldr	r2, [r3, #8]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	4a0d      	ldr	r2, [pc, #52]	@ (8001a40 <TIM_Base_SetConfig+0xc0>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d103      	bne.n	8001a18 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	691a      	ldr	r2, [r3, #16]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	691b      	ldr	r3, [r3, #16]
 8001a22:	f003 0301 	and.w	r3, r3, #1
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d005      	beq.n	8001a36 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	691b      	ldr	r3, [r3, #16]
 8001a2e:	f023 0201 	bic.w	r2, r3, #1
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	611a      	str	r2, [r3, #16]
  }
}
 8001a36:	bf00      	nop
 8001a38:	3714      	adds	r7, #20
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bc80      	pop	{r7}
 8001a3e:	4770      	bx	lr
 8001a40:	40012c00 	.word	0x40012c00
 8001a44:	40000400 	.word	0x40000400

08001a48 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b083      	sub	sp, #12
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001a50:	bf00      	nop
 8001a52:	370c      	adds	r7, #12
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bc80      	pop	{r7}
 8001a58:	4770      	bx	lr

08001a5a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001a5a:	b480      	push	{r7}
 8001a5c:	b083      	sub	sp, #12
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001a62:	bf00      	nop
 8001a64:	370c      	adds	r7, #12
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bc80      	pop	{r7}
 8001a6a:	4770      	bx	lr

08001a6c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b085      	sub	sp, #20
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	4603      	mov	r3, r0
 8001a74:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001a76:	2300      	movs	r3, #0
 8001a78:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8001a7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a7e:	2b84      	cmp	r3, #132	@ 0x84
 8001a80:	d005      	beq.n	8001a8e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8001a82:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	4413      	add	r3, r2
 8001a8a:	3303      	adds	r3, #3
 8001a8c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8001a8e:	68fb      	ldr	r3, [r7, #12]
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	3714      	adds	r7, #20
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bc80      	pop	{r7}
 8001a98:	4770      	bx	lr

08001a9a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8001a9a:	b580      	push	{r7, lr}
 8001a9c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8001a9e:	f000 fffb 	bl	8002a98 <vTaskStartScheduler>
  
  return osOK;
 8001aa2:	2300      	movs	r3, #0
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	bd80      	pop	{r7, pc}

08001aa8 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8001aa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001aaa:	b089      	sub	sp, #36	@ 0x24
 8001aac:	af04      	add	r7, sp, #16
 8001aae:	6078      	str	r0, [r7, #4]
 8001ab0:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	695b      	ldr	r3, [r3, #20]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d020      	beq.n	8001afc <osThreadCreate+0x54>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	699b      	ldr	r3, [r3, #24]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d01c      	beq.n	8001afc <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	685c      	ldr	r4, [r3, #4]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	691e      	ldr	r6, [r3, #16]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f7ff ffc9 	bl	8001a6c <makeFreeRtosPriority>
 8001ada:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	695b      	ldr	r3, [r3, #20]
 8001ae0:	687a      	ldr	r2, [r7, #4]
 8001ae2:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001ae4:	9202      	str	r2, [sp, #8]
 8001ae6:	9301      	str	r3, [sp, #4]
 8001ae8:	9100      	str	r1, [sp, #0]
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	4632      	mov	r2, r6
 8001aee:	4629      	mov	r1, r5
 8001af0:	4620      	mov	r0, r4
 8001af2:	f000 fdec 	bl	80026ce <xTaskCreateStatic>
 8001af6:	4603      	mov	r3, r0
 8001af8:	60fb      	str	r3, [r7, #12]
 8001afa:	e01c      	b.n	8001b36 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	685c      	ldr	r4, [r3, #4]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001b08:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001b10:	4618      	mov	r0, r3
 8001b12:	f7ff ffab 	bl	8001a6c <makeFreeRtosPriority>
 8001b16:	4602      	mov	r2, r0
 8001b18:	f107 030c 	add.w	r3, r7, #12
 8001b1c:	9301      	str	r3, [sp, #4]
 8001b1e:	9200      	str	r2, [sp, #0]
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	4632      	mov	r2, r6
 8001b24:	4629      	mov	r1, r5
 8001b26:	4620      	mov	r0, r4
 8001b28:	f000 fe31 	bl	800278e <xTaskCreate>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b01      	cmp	r3, #1
 8001b30:	d001      	beq.n	8001b36 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8001b32:	2300      	movs	r3, #0
 8001b34:	e000      	b.n	8001b38 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8001b36:	68fb      	ldr	r3, [r7, #12]
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	3714      	adds	r7, #20
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001b40 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b086      	sub	sp, #24
 8001b44:	af02      	add	r7, sp, #8
 8001b46:	6078      	str	r0, [r7, #4]
 8001b48:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d00f      	beq.n	8001b72 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d10a      	bne.n	8001b6e <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	2203      	movs	r2, #3
 8001b5e:	9200      	str	r2, [sp, #0]
 8001b60:	2200      	movs	r2, #0
 8001b62:	2100      	movs	r1, #0
 8001b64:	2001      	movs	r0, #1
 8001b66:	f000 f937 	bl	8001dd8 <xQueueGenericCreateStatic>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	e016      	b.n	8001b9c <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	e014      	b.n	8001b9c <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	d110      	bne.n	8001b9a <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8001b78:	2203      	movs	r2, #3
 8001b7a:	2100      	movs	r1, #0
 8001b7c:	2001      	movs	r0, #1
 8001b7e:	f000 f9a8 	bl	8001ed2 <xQueueGenericCreate>
 8001b82:	60f8      	str	r0, [r7, #12]
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d005      	beq.n	8001b96 <osSemaphoreCreate+0x56>
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	2100      	movs	r1, #0
 8001b90:	68f8      	ldr	r0, [r7, #12]
 8001b92:	f000 f9f9 	bl	8001f88 <xQueueGenericSend>
      return sema;
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	e000      	b.n	8001b9c <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8001b9a:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	3710      	adds	r7, #16
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}

08001ba4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	f103 0208 	add.w	r2, r3, #8
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	f04f 32ff 	mov.w	r2, #4294967295
 8001bbc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	f103 0208 	add.w	r2, r3, #8
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	f103 0208 	add.w	r2, r3, #8
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001bd8:	bf00      	nop
 8001bda:	370c      	adds	r7, #12
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bc80      	pop	{r7}
 8001be0:	4770      	bx	lr

08001be2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001be2:	b480      	push	{r7}
 8001be4:	b083      	sub	sp, #12
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2200      	movs	r2, #0
 8001bee:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001bf0:	bf00      	nop
 8001bf2:	370c      	adds	r7, #12
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bc80      	pop	{r7}
 8001bf8:	4770      	bx	lr

08001bfa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001bfa:	b480      	push	{r7}
 8001bfc:	b085      	sub	sp, #20
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	6078      	str	r0, [r7, #4]
 8001c02:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	68fa      	ldr	r2, [r7, #12]
 8001c0e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	689a      	ldr	r2, [r3, #8]
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	683a      	ldr	r2, [r7, #0]
 8001c1e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	683a      	ldr	r2, [r7, #0]
 8001c24:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	687a      	ldr	r2, [r7, #4]
 8001c2a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	1c5a      	adds	r2, r3, #1
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	601a      	str	r2, [r3, #0]
}
 8001c36:	bf00      	nop
 8001c38:	3714      	adds	r7, #20
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bc80      	pop	{r7}
 8001c3e:	4770      	bx	lr

08001c40 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001c40:	b480      	push	{r7}
 8001c42:	b085      	sub	sp, #20
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
 8001c48:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c56:	d103      	bne.n	8001c60 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	691b      	ldr	r3, [r3, #16]
 8001c5c:	60fb      	str	r3, [r7, #12]
 8001c5e:	e00c      	b.n	8001c7a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	3308      	adds	r3, #8
 8001c64:	60fb      	str	r3, [r7, #12]
 8001c66:	e002      	b.n	8001c6e <vListInsert+0x2e>
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	60fb      	str	r3, [r7, #12]
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	68ba      	ldr	r2, [r7, #8]
 8001c76:	429a      	cmp	r2, r3
 8001c78:	d2f6      	bcs.n	8001c68 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	685a      	ldr	r2, [r3, #4]
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	683a      	ldr	r2, [r7, #0]
 8001c88:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	68fa      	ldr	r2, [r7, #12]
 8001c8e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	683a      	ldr	r2, [r7, #0]
 8001c94:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	687a      	ldr	r2, [r7, #4]
 8001c9a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	1c5a      	adds	r2, r3, #1
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	601a      	str	r2, [r3, #0]
}
 8001ca6:	bf00      	nop
 8001ca8:	3714      	adds	r7, #20
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bc80      	pop	{r7}
 8001cae:	4770      	bx	lr

08001cb0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b085      	sub	sp, #20
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	691b      	ldr	r3, [r3, #16]
 8001cbc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	687a      	ldr	r2, [r7, #4]
 8001cc4:	6892      	ldr	r2, [r2, #8]
 8001cc6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	687a      	ldr	r2, [r7, #4]
 8001cce:	6852      	ldr	r2, [r2, #4]
 8001cd0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	687a      	ldr	r2, [r7, #4]
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	d103      	bne.n	8001ce4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	689a      	ldr	r2, [r3, #8]
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	1e5a      	subs	r2, r3, #1
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	681b      	ldr	r3, [r3, #0]
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	3714      	adds	r7, #20
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bc80      	pop	{r7}
 8001d00:	4770      	bx	lr
	...

08001d04 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b084      	sub	sp, #16
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
 8001d0c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d10b      	bne.n	8001d30 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001d18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001d1c:	f383 8811 	msr	BASEPRI, r3
 8001d20:	f3bf 8f6f 	isb	sy
 8001d24:	f3bf 8f4f 	dsb	sy
 8001d28:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001d2a:	bf00      	nop
 8001d2c:	bf00      	nop
 8001d2e:	e7fd      	b.n	8001d2c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8001d30:	f001 fde4 	bl	80038fc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d3c:	68f9      	ldr	r1, [r7, #12]
 8001d3e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8001d40:	fb01 f303 	mul.w	r3, r1, r3
 8001d44:	441a      	add	r2, r3
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d60:	3b01      	subs	r3, #1
 8001d62:	68f9      	ldr	r1, [r7, #12]
 8001d64:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8001d66:	fb01 f303 	mul.w	r3, r1, r3
 8001d6a:	441a      	add	r2, r3
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	22ff      	movs	r2, #255	@ 0xff
 8001d74:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	22ff      	movs	r2, #255	@ 0xff
 8001d7c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d114      	bne.n	8001db0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	691b      	ldr	r3, [r3, #16]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d01a      	beq.n	8001dc4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	3310      	adds	r3, #16
 8001d92:	4618      	mov	r0, r3
 8001d94:	f001 f8d8 	bl	8002f48 <xTaskRemoveFromEventList>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d012      	beq.n	8001dc4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8001d9e:	4b0d      	ldr	r3, [pc, #52]	@ (8001dd4 <xQueueGenericReset+0xd0>)
 8001da0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001da4:	601a      	str	r2, [r3, #0]
 8001da6:	f3bf 8f4f 	dsb	sy
 8001daa:	f3bf 8f6f 	isb	sy
 8001dae:	e009      	b.n	8001dc4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	3310      	adds	r3, #16
 8001db4:	4618      	mov	r0, r3
 8001db6:	f7ff fef5 	bl	8001ba4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	3324      	adds	r3, #36	@ 0x24
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f7ff fef0 	bl	8001ba4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8001dc4:	f001 fdca 	bl	800395c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8001dc8:	2301      	movs	r3, #1
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3710      	adds	r7, #16
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	e000ed04 	.word	0xe000ed04

08001dd8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b08e      	sub	sp, #56	@ 0x38
 8001ddc:	af02      	add	r7, sp, #8
 8001dde:	60f8      	str	r0, [r7, #12]
 8001de0:	60b9      	str	r1, [r7, #8]
 8001de2:	607a      	str	r2, [r7, #4]
 8001de4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d10b      	bne.n	8001e04 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8001dec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001df0:	f383 8811 	msr	BASEPRI, r3
 8001df4:	f3bf 8f6f 	isb	sy
 8001df8:	f3bf 8f4f 	dsb	sy
 8001dfc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8001dfe:	bf00      	nop
 8001e00:	bf00      	nop
 8001e02:	e7fd      	b.n	8001e00 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d10b      	bne.n	8001e22 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8001e0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001e0e:	f383 8811 	msr	BASEPRI, r3
 8001e12:	f3bf 8f6f 	isb	sy
 8001e16:	f3bf 8f4f 	dsb	sy
 8001e1a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8001e1c:	bf00      	nop
 8001e1e:	bf00      	nop
 8001e20:	e7fd      	b.n	8001e1e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d002      	beq.n	8001e2e <xQueueGenericCreateStatic+0x56>
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d001      	beq.n	8001e32 <xQueueGenericCreateStatic+0x5a>
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e000      	b.n	8001e34 <xQueueGenericCreateStatic+0x5c>
 8001e32:	2300      	movs	r3, #0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d10b      	bne.n	8001e50 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8001e38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001e3c:	f383 8811 	msr	BASEPRI, r3
 8001e40:	f3bf 8f6f 	isb	sy
 8001e44:	f3bf 8f4f 	dsb	sy
 8001e48:	623b      	str	r3, [r7, #32]
}
 8001e4a:	bf00      	nop
 8001e4c:	bf00      	nop
 8001e4e:	e7fd      	b.n	8001e4c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d102      	bne.n	8001e5c <xQueueGenericCreateStatic+0x84>
 8001e56:	68bb      	ldr	r3, [r7, #8]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d101      	bne.n	8001e60 <xQueueGenericCreateStatic+0x88>
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	e000      	b.n	8001e62 <xQueueGenericCreateStatic+0x8a>
 8001e60:	2300      	movs	r3, #0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d10b      	bne.n	8001e7e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8001e66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001e6a:	f383 8811 	msr	BASEPRI, r3
 8001e6e:	f3bf 8f6f 	isb	sy
 8001e72:	f3bf 8f4f 	dsb	sy
 8001e76:	61fb      	str	r3, [r7, #28]
}
 8001e78:	bf00      	nop
 8001e7a:	bf00      	nop
 8001e7c:	e7fd      	b.n	8001e7a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8001e7e:	2348      	movs	r3, #72	@ 0x48
 8001e80:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	2b48      	cmp	r3, #72	@ 0x48
 8001e86:	d00b      	beq.n	8001ea0 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8001e88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001e8c:	f383 8811 	msr	BASEPRI, r3
 8001e90:	f3bf 8f6f 	isb	sy
 8001e94:	f3bf 8f4f 	dsb	sy
 8001e98:	61bb      	str	r3, [r7, #24]
}
 8001e9a:	bf00      	nop
 8001e9c:	bf00      	nop
 8001e9e:	e7fd      	b.n	8001e9c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8001ea0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8001ea6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d00d      	beq.n	8001ec8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8001eac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001eae:	2201      	movs	r2, #1
 8001eb0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001eb4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8001eb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001eba:	9300      	str	r3, [sp, #0]
 8001ebc:	4613      	mov	r3, r2
 8001ebe:	687a      	ldr	r2, [r7, #4]
 8001ec0:	68b9      	ldr	r1, [r7, #8]
 8001ec2:	68f8      	ldr	r0, [r7, #12]
 8001ec4:	f000 f840 	bl	8001f48 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8001ec8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3730      	adds	r7, #48	@ 0x30
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}

08001ed2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8001ed2:	b580      	push	{r7, lr}
 8001ed4:	b08a      	sub	sp, #40	@ 0x28
 8001ed6:	af02      	add	r7, sp, #8
 8001ed8:	60f8      	str	r0, [r7, #12]
 8001eda:	60b9      	str	r1, [r7, #8]
 8001edc:	4613      	mov	r3, r2
 8001ede:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d10b      	bne.n	8001efe <xQueueGenericCreate+0x2c>
	__asm volatile
 8001ee6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001eea:	f383 8811 	msr	BASEPRI, r3
 8001eee:	f3bf 8f6f 	isb	sy
 8001ef2:	f3bf 8f4f 	dsb	sy
 8001ef6:	613b      	str	r3, [r7, #16]
}
 8001ef8:	bf00      	nop
 8001efa:	bf00      	nop
 8001efc:	e7fd      	b.n	8001efa <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	68ba      	ldr	r2, [r7, #8]
 8001f02:	fb02 f303 	mul.w	r3, r2, r3
 8001f06:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8001f08:	69fb      	ldr	r3, [r7, #28]
 8001f0a:	3348      	adds	r3, #72	@ 0x48
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f001 fdf7 	bl	8003b00 <pvPortMalloc>
 8001f12:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8001f14:	69bb      	ldr	r3, [r7, #24]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d011      	beq.n	8001f3e <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8001f1a:	69bb      	ldr	r3, [r7, #24]
 8001f1c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	3348      	adds	r3, #72	@ 0x48
 8001f22:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8001f24:	69bb      	ldr	r3, [r7, #24]
 8001f26:	2200      	movs	r2, #0
 8001f28:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001f2c:	79fa      	ldrb	r2, [r7, #7]
 8001f2e:	69bb      	ldr	r3, [r7, #24]
 8001f30:	9300      	str	r3, [sp, #0]
 8001f32:	4613      	mov	r3, r2
 8001f34:	697a      	ldr	r2, [r7, #20]
 8001f36:	68b9      	ldr	r1, [r7, #8]
 8001f38:	68f8      	ldr	r0, [r7, #12]
 8001f3a:	f000 f805 	bl	8001f48 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8001f3e:	69bb      	ldr	r3, [r7, #24]
	}
 8001f40:	4618      	mov	r0, r3
 8001f42:	3720      	adds	r7, #32
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}

08001f48 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b084      	sub	sp, #16
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	60f8      	str	r0, [r7, #12]
 8001f50:	60b9      	str	r1, [r7, #8]
 8001f52:	607a      	str	r2, [r7, #4]
 8001f54:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d103      	bne.n	8001f64 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001f5c:	69bb      	ldr	r3, [r7, #24]
 8001f5e:	69ba      	ldr	r2, [r7, #24]
 8001f60:	601a      	str	r2, [r3, #0]
 8001f62:	e002      	b.n	8001f6a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001f64:	69bb      	ldr	r3, [r7, #24]
 8001f66:	687a      	ldr	r2, [r7, #4]
 8001f68:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8001f6a:	69bb      	ldr	r3, [r7, #24]
 8001f6c:	68fa      	ldr	r2, [r7, #12]
 8001f6e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8001f70:	69bb      	ldr	r3, [r7, #24]
 8001f72:	68ba      	ldr	r2, [r7, #8]
 8001f74:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001f76:	2101      	movs	r1, #1
 8001f78:	69b8      	ldr	r0, [r7, #24]
 8001f7a:	f7ff fec3 	bl	8001d04 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8001f7e:	bf00      	nop
 8001f80:	3710      	adds	r7, #16
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
	...

08001f88 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b08e      	sub	sp, #56	@ 0x38
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	60f8      	str	r0, [r7, #12]
 8001f90:	60b9      	str	r1, [r7, #8]
 8001f92:	607a      	str	r2, [r7, #4]
 8001f94:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8001f96:	2300      	movs	r3, #0
 8001f98:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8001f9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d10b      	bne.n	8001fbc <xQueueGenericSend+0x34>
	__asm volatile
 8001fa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001fa8:	f383 8811 	msr	BASEPRI, r3
 8001fac:	f3bf 8f6f 	isb	sy
 8001fb0:	f3bf 8f4f 	dsb	sy
 8001fb4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8001fb6:	bf00      	nop
 8001fb8:	bf00      	nop
 8001fba:	e7fd      	b.n	8001fb8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d103      	bne.n	8001fca <xQueueGenericSend+0x42>
 8001fc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001fc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d101      	bne.n	8001fce <xQueueGenericSend+0x46>
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e000      	b.n	8001fd0 <xQueueGenericSend+0x48>
 8001fce:	2300      	movs	r3, #0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d10b      	bne.n	8001fec <xQueueGenericSend+0x64>
	__asm volatile
 8001fd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001fd8:	f383 8811 	msr	BASEPRI, r3
 8001fdc:	f3bf 8f6f 	isb	sy
 8001fe0:	f3bf 8f4f 	dsb	sy
 8001fe4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8001fe6:	bf00      	nop
 8001fe8:	bf00      	nop
 8001fea:	e7fd      	b.n	8001fe8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	2b02      	cmp	r3, #2
 8001ff0:	d103      	bne.n	8001ffa <xQueueGenericSend+0x72>
 8001ff2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ff4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d101      	bne.n	8001ffe <xQueueGenericSend+0x76>
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e000      	b.n	8002000 <xQueueGenericSend+0x78>
 8001ffe:	2300      	movs	r3, #0
 8002000:	2b00      	cmp	r3, #0
 8002002:	d10b      	bne.n	800201c <xQueueGenericSend+0x94>
	__asm volatile
 8002004:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002008:	f383 8811 	msr	BASEPRI, r3
 800200c:	f3bf 8f6f 	isb	sy
 8002010:	f3bf 8f4f 	dsb	sy
 8002014:	623b      	str	r3, [r7, #32]
}
 8002016:	bf00      	nop
 8002018:	bf00      	nop
 800201a:	e7fd      	b.n	8002018 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800201c:	f001 f95a 	bl	80032d4 <xTaskGetSchedulerState>
 8002020:	4603      	mov	r3, r0
 8002022:	2b00      	cmp	r3, #0
 8002024:	d102      	bne.n	800202c <xQueueGenericSend+0xa4>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d101      	bne.n	8002030 <xQueueGenericSend+0xa8>
 800202c:	2301      	movs	r3, #1
 800202e:	e000      	b.n	8002032 <xQueueGenericSend+0xaa>
 8002030:	2300      	movs	r3, #0
 8002032:	2b00      	cmp	r3, #0
 8002034:	d10b      	bne.n	800204e <xQueueGenericSend+0xc6>
	__asm volatile
 8002036:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800203a:	f383 8811 	msr	BASEPRI, r3
 800203e:	f3bf 8f6f 	isb	sy
 8002042:	f3bf 8f4f 	dsb	sy
 8002046:	61fb      	str	r3, [r7, #28]
}
 8002048:	bf00      	nop
 800204a:	bf00      	nop
 800204c:	e7fd      	b.n	800204a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800204e:	f001 fc55 	bl	80038fc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002052:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002054:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002056:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002058:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800205a:	429a      	cmp	r2, r3
 800205c:	d302      	bcc.n	8002064 <xQueueGenericSend+0xdc>
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	2b02      	cmp	r3, #2
 8002062:	d129      	bne.n	80020b8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002064:	683a      	ldr	r2, [r7, #0]
 8002066:	68b9      	ldr	r1, [r7, #8]
 8002068:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800206a:	f000 fa46 	bl	80024fa <prvCopyDataToQueue>
 800206e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002070:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002072:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002074:	2b00      	cmp	r3, #0
 8002076:	d010      	beq.n	800209a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002078:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800207a:	3324      	adds	r3, #36	@ 0x24
 800207c:	4618      	mov	r0, r3
 800207e:	f000 ff63 	bl	8002f48 <xTaskRemoveFromEventList>
 8002082:	4603      	mov	r3, r0
 8002084:	2b00      	cmp	r3, #0
 8002086:	d013      	beq.n	80020b0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002088:	4b3f      	ldr	r3, [pc, #252]	@ (8002188 <xQueueGenericSend+0x200>)
 800208a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800208e:	601a      	str	r2, [r3, #0]
 8002090:	f3bf 8f4f 	dsb	sy
 8002094:	f3bf 8f6f 	isb	sy
 8002098:	e00a      	b.n	80020b0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800209a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800209c:	2b00      	cmp	r3, #0
 800209e:	d007      	beq.n	80020b0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80020a0:	4b39      	ldr	r3, [pc, #228]	@ (8002188 <xQueueGenericSend+0x200>)
 80020a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80020a6:	601a      	str	r2, [r3, #0]
 80020a8:	f3bf 8f4f 	dsb	sy
 80020ac:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80020b0:	f001 fc54 	bl	800395c <vPortExitCritical>
				return pdPASS;
 80020b4:	2301      	movs	r3, #1
 80020b6:	e063      	b.n	8002180 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d103      	bne.n	80020c6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80020be:	f001 fc4d 	bl	800395c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80020c2:	2300      	movs	r3, #0
 80020c4:	e05c      	b.n	8002180 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80020c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d106      	bne.n	80020da <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80020cc:	f107 0314 	add.w	r3, r7, #20
 80020d0:	4618      	mov	r0, r3
 80020d2:	f000 ff9d 	bl	8003010 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80020d6:	2301      	movs	r3, #1
 80020d8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80020da:	f001 fc3f 	bl	800395c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80020de:	f000 fd45 	bl	8002b6c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80020e2:	f001 fc0b 	bl	80038fc <vPortEnterCritical>
 80020e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020e8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80020ec:	b25b      	sxtb	r3, r3
 80020ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020f2:	d103      	bne.n	80020fc <xQueueGenericSend+0x174>
 80020f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020f6:	2200      	movs	r2, #0
 80020f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80020fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020fe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002102:	b25b      	sxtb	r3, r3
 8002104:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002108:	d103      	bne.n	8002112 <xQueueGenericSend+0x18a>
 800210a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800210c:	2200      	movs	r2, #0
 800210e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002112:	f001 fc23 	bl	800395c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002116:	1d3a      	adds	r2, r7, #4
 8002118:	f107 0314 	add.w	r3, r7, #20
 800211c:	4611      	mov	r1, r2
 800211e:	4618      	mov	r0, r3
 8002120:	f000 ff8c 	bl	800303c <xTaskCheckForTimeOut>
 8002124:	4603      	mov	r3, r0
 8002126:	2b00      	cmp	r3, #0
 8002128:	d124      	bne.n	8002174 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800212a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800212c:	f000 fab7 	bl	800269e <prvIsQueueFull>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d018      	beq.n	8002168 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002136:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002138:	3310      	adds	r3, #16
 800213a:	687a      	ldr	r2, [r7, #4]
 800213c:	4611      	mov	r1, r2
 800213e:	4618      	mov	r0, r3
 8002140:	f000 fedc 	bl	8002efc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002144:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002146:	f000 fa42 	bl	80025ce <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800214a:	f000 fd1d 	bl	8002b88 <xTaskResumeAll>
 800214e:	4603      	mov	r3, r0
 8002150:	2b00      	cmp	r3, #0
 8002152:	f47f af7c 	bne.w	800204e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8002156:	4b0c      	ldr	r3, [pc, #48]	@ (8002188 <xQueueGenericSend+0x200>)
 8002158:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800215c:	601a      	str	r2, [r3, #0]
 800215e:	f3bf 8f4f 	dsb	sy
 8002162:	f3bf 8f6f 	isb	sy
 8002166:	e772      	b.n	800204e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002168:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800216a:	f000 fa30 	bl	80025ce <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800216e:	f000 fd0b 	bl	8002b88 <xTaskResumeAll>
 8002172:	e76c      	b.n	800204e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002174:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002176:	f000 fa2a 	bl	80025ce <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800217a:	f000 fd05 	bl	8002b88 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800217e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002180:	4618      	mov	r0, r3
 8002182:	3738      	adds	r7, #56	@ 0x38
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}
 8002188:	e000ed04 	.word	0xe000ed04

0800218c <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b08e      	sub	sp, #56	@ 0x38
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800219a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800219c:	2b00      	cmp	r3, #0
 800219e:	d10b      	bne.n	80021b8 <xQueueGiveFromISR+0x2c>
	__asm volatile
 80021a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80021a4:	f383 8811 	msr	BASEPRI, r3
 80021a8:	f3bf 8f6f 	isb	sy
 80021ac:	f3bf 8f4f 	dsb	sy
 80021b0:	623b      	str	r3, [r7, #32]
}
 80021b2:	bf00      	nop
 80021b4:	bf00      	nop
 80021b6:	e7fd      	b.n	80021b4 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80021b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d00b      	beq.n	80021d8 <xQueueGiveFromISR+0x4c>
	__asm volatile
 80021c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80021c4:	f383 8811 	msr	BASEPRI, r3
 80021c8:	f3bf 8f6f 	isb	sy
 80021cc:	f3bf 8f4f 	dsb	sy
 80021d0:	61fb      	str	r3, [r7, #28]
}
 80021d2:	bf00      	nop
 80021d4:	bf00      	nop
 80021d6:	e7fd      	b.n	80021d4 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80021d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d103      	bne.n	80021e8 <xQueueGiveFromISR+0x5c>
 80021e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d101      	bne.n	80021ec <xQueueGiveFromISR+0x60>
 80021e8:	2301      	movs	r3, #1
 80021ea:	e000      	b.n	80021ee <xQueueGiveFromISR+0x62>
 80021ec:	2300      	movs	r3, #0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d10b      	bne.n	800220a <xQueueGiveFromISR+0x7e>
	__asm volatile
 80021f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80021f6:	f383 8811 	msr	BASEPRI, r3
 80021fa:	f3bf 8f6f 	isb	sy
 80021fe:	f3bf 8f4f 	dsb	sy
 8002202:	61bb      	str	r3, [r7, #24]
}
 8002204:	bf00      	nop
 8002206:	bf00      	nop
 8002208:	e7fd      	b.n	8002206 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800220a:	f001 fc39 	bl	8003a80 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800220e:	f3ef 8211 	mrs	r2, BASEPRI
 8002212:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002216:	f383 8811 	msr	BASEPRI, r3
 800221a:	f3bf 8f6f 	isb	sy
 800221e:	f3bf 8f4f 	dsb	sy
 8002222:	617a      	str	r2, [r7, #20]
 8002224:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002226:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002228:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800222a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800222c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800222e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8002230:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002232:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002234:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002236:	429a      	cmp	r2, r3
 8002238:	d22b      	bcs.n	8002292 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800223a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800223c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002240:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002244:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002246:	1c5a      	adds	r2, r3, #1
 8002248:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800224a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800224c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8002250:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002254:	d112      	bne.n	800227c <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002256:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002258:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800225a:	2b00      	cmp	r3, #0
 800225c:	d016      	beq.n	800228c <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800225e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002260:	3324      	adds	r3, #36	@ 0x24
 8002262:	4618      	mov	r0, r3
 8002264:	f000 fe70 	bl	8002f48 <xTaskRemoveFromEventList>
 8002268:	4603      	mov	r3, r0
 800226a:	2b00      	cmp	r3, #0
 800226c:	d00e      	beq.n	800228c <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d00b      	beq.n	800228c <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	2201      	movs	r2, #1
 8002278:	601a      	str	r2, [r3, #0]
 800227a:	e007      	b.n	800228c <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800227c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002280:	3301      	adds	r3, #1
 8002282:	b2db      	uxtb	r3, r3
 8002284:	b25a      	sxtb	r2, r3
 8002286:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002288:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800228c:	2301      	movs	r3, #1
 800228e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002290:	e001      	b.n	8002296 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002292:	2300      	movs	r3, #0
 8002294:	637b      	str	r3, [r7, #52]	@ 0x34
 8002296:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002298:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80022a0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80022a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	3738      	adds	r7, #56	@ 0x38
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}

080022ac <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b08e      	sub	sp, #56	@ 0x38
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
 80022b4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80022b6:	2300      	movs	r3, #0
 80022b8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80022be:	2300      	movs	r3, #0
 80022c0:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80022c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d10b      	bne.n	80022e0 <xQueueSemaphoreTake+0x34>
	__asm volatile
 80022c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80022cc:	f383 8811 	msr	BASEPRI, r3
 80022d0:	f3bf 8f6f 	isb	sy
 80022d4:	f3bf 8f4f 	dsb	sy
 80022d8:	623b      	str	r3, [r7, #32]
}
 80022da:	bf00      	nop
 80022dc:	bf00      	nop
 80022de:	e7fd      	b.n	80022dc <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80022e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d00b      	beq.n	8002300 <xQueueSemaphoreTake+0x54>
	__asm volatile
 80022e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80022ec:	f383 8811 	msr	BASEPRI, r3
 80022f0:	f3bf 8f6f 	isb	sy
 80022f4:	f3bf 8f4f 	dsb	sy
 80022f8:	61fb      	str	r3, [r7, #28]
}
 80022fa:	bf00      	nop
 80022fc:	bf00      	nop
 80022fe:	e7fd      	b.n	80022fc <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002300:	f000 ffe8 	bl	80032d4 <xTaskGetSchedulerState>
 8002304:	4603      	mov	r3, r0
 8002306:	2b00      	cmp	r3, #0
 8002308:	d102      	bne.n	8002310 <xQueueSemaphoreTake+0x64>
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d101      	bne.n	8002314 <xQueueSemaphoreTake+0x68>
 8002310:	2301      	movs	r3, #1
 8002312:	e000      	b.n	8002316 <xQueueSemaphoreTake+0x6a>
 8002314:	2300      	movs	r3, #0
 8002316:	2b00      	cmp	r3, #0
 8002318:	d10b      	bne.n	8002332 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800231a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800231e:	f383 8811 	msr	BASEPRI, r3
 8002322:	f3bf 8f6f 	isb	sy
 8002326:	f3bf 8f4f 	dsb	sy
 800232a:	61bb      	str	r3, [r7, #24]
}
 800232c:	bf00      	nop
 800232e:	bf00      	nop
 8002330:	e7fd      	b.n	800232e <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002332:	f001 fae3 	bl	80038fc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8002336:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002338:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800233a:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800233c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800233e:	2b00      	cmp	r3, #0
 8002340:	d024      	beq.n	800238c <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8002342:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002344:	1e5a      	subs	r2, r3, #1
 8002346:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002348:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800234a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d104      	bne.n	800235c <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8002352:	f001 f96b 	bl	800362c <pvTaskIncrementMutexHeldCount>
 8002356:	4602      	mov	r2, r0
 8002358:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800235a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800235c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800235e:	691b      	ldr	r3, [r3, #16]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d00f      	beq.n	8002384 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002364:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002366:	3310      	adds	r3, #16
 8002368:	4618      	mov	r0, r3
 800236a:	f000 fded 	bl	8002f48 <xTaskRemoveFromEventList>
 800236e:	4603      	mov	r3, r0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d007      	beq.n	8002384 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002374:	4b54      	ldr	r3, [pc, #336]	@ (80024c8 <xQueueSemaphoreTake+0x21c>)
 8002376:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800237a:	601a      	str	r2, [r3, #0]
 800237c:	f3bf 8f4f 	dsb	sy
 8002380:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002384:	f001 faea 	bl	800395c <vPortExitCritical>
				return pdPASS;
 8002388:	2301      	movs	r3, #1
 800238a:	e098      	b.n	80024be <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d112      	bne.n	80023b8 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8002392:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002394:	2b00      	cmp	r3, #0
 8002396:	d00b      	beq.n	80023b0 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8002398:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800239c:	f383 8811 	msr	BASEPRI, r3
 80023a0:	f3bf 8f6f 	isb	sy
 80023a4:	f3bf 8f4f 	dsb	sy
 80023a8:	617b      	str	r3, [r7, #20]
}
 80023aa:	bf00      	nop
 80023ac:	bf00      	nop
 80023ae:	e7fd      	b.n	80023ac <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80023b0:	f001 fad4 	bl	800395c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80023b4:	2300      	movs	r3, #0
 80023b6:	e082      	b.n	80024be <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 80023b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d106      	bne.n	80023cc <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80023be:	f107 030c 	add.w	r3, r7, #12
 80023c2:	4618      	mov	r0, r3
 80023c4:	f000 fe24 	bl	8003010 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80023c8:	2301      	movs	r3, #1
 80023ca:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80023cc:	f001 fac6 	bl	800395c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80023d0:	f000 fbcc 	bl	8002b6c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80023d4:	f001 fa92 	bl	80038fc <vPortEnterCritical>
 80023d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023da:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80023de:	b25b      	sxtb	r3, r3
 80023e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023e4:	d103      	bne.n	80023ee <xQueueSemaphoreTake+0x142>
 80023e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023e8:	2200      	movs	r2, #0
 80023ea:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80023ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023f0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80023f4:	b25b      	sxtb	r3, r3
 80023f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023fa:	d103      	bne.n	8002404 <xQueueSemaphoreTake+0x158>
 80023fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023fe:	2200      	movs	r2, #0
 8002400:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002404:	f001 faaa 	bl	800395c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002408:	463a      	mov	r2, r7
 800240a:	f107 030c 	add.w	r3, r7, #12
 800240e:	4611      	mov	r1, r2
 8002410:	4618      	mov	r0, r3
 8002412:	f000 fe13 	bl	800303c <xTaskCheckForTimeOut>
 8002416:	4603      	mov	r3, r0
 8002418:	2b00      	cmp	r3, #0
 800241a:	d132      	bne.n	8002482 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800241c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800241e:	f000 f928 	bl	8002672 <prvIsQueueEmpty>
 8002422:	4603      	mov	r3, r0
 8002424:	2b00      	cmp	r3, #0
 8002426:	d026      	beq.n	8002476 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002428:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d109      	bne.n	8002444 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8002430:	f001 fa64 	bl	80038fc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002434:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	4618      	mov	r0, r3
 800243a:	f000 ff69 	bl	8003310 <xTaskPriorityInherit>
 800243e:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8002440:	f001 fa8c 	bl	800395c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002444:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002446:	3324      	adds	r3, #36	@ 0x24
 8002448:	683a      	ldr	r2, [r7, #0]
 800244a:	4611      	mov	r1, r2
 800244c:	4618      	mov	r0, r3
 800244e:	f000 fd55 	bl	8002efc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002452:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002454:	f000 f8bb 	bl	80025ce <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002458:	f000 fb96 	bl	8002b88 <xTaskResumeAll>
 800245c:	4603      	mov	r3, r0
 800245e:	2b00      	cmp	r3, #0
 8002460:	f47f af67 	bne.w	8002332 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8002464:	4b18      	ldr	r3, [pc, #96]	@ (80024c8 <xQueueSemaphoreTake+0x21c>)
 8002466:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800246a:	601a      	str	r2, [r3, #0]
 800246c:	f3bf 8f4f 	dsb	sy
 8002470:	f3bf 8f6f 	isb	sy
 8002474:	e75d      	b.n	8002332 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8002476:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002478:	f000 f8a9 	bl	80025ce <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800247c:	f000 fb84 	bl	8002b88 <xTaskResumeAll>
 8002480:	e757      	b.n	8002332 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8002482:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002484:	f000 f8a3 	bl	80025ce <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002488:	f000 fb7e 	bl	8002b88 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800248c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800248e:	f000 f8f0 	bl	8002672 <prvIsQueueEmpty>
 8002492:	4603      	mov	r3, r0
 8002494:	2b00      	cmp	r3, #0
 8002496:	f43f af4c 	beq.w	8002332 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800249a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800249c:	2b00      	cmp	r3, #0
 800249e:	d00d      	beq.n	80024bc <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 80024a0:	f001 fa2c 	bl	80038fc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80024a4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80024a6:	f000 f811 	bl	80024cc <prvGetDisinheritPriorityAfterTimeout>
 80024aa:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80024ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80024b2:	4618      	mov	r0, r3
 80024b4:	f001 f82a 	bl	800350c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80024b8:	f001 fa50 	bl	800395c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80024bc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3738      	adds	r7, #56	@ 0x38
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	e000ed04 	.word	0xe000ed04

080024cc <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80024cc:	b480      	push	{r7}
 80024ce:	b085      	sub	sp, #20
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d006      	beq.n	80024ea <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f1c3 0307 	rsb	r3, r3, #7
 80024e6:	60fb      	str	r3, [r7, #12]
 80024e8:	e001      	b.n	80024ee <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80024ea:	2300      	movs	r3, #0
 80024ec:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80024ee:	68fb      	ldr	r3, [r7, #12]
	}
 80024f0:	4618      	mov	r0, r3
 80024f2:	3714      	adds	r7, #20
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bc80      	pop	{r7}
 80024f8:	4770      	bx	lr

080024fa <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80024fa:	b580      	push	{r7, lr}
 80024fc:	b086      	sub	sp, #24
 80024fe:	af00      	add	r7, sp, #0
 8002500:	60f8      	str	r0, [r7, #12]
 8002502:	60b9      	str	r1, [r7, #8]
 8002504:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002506:	2300      	movs	r3, #0
 8002508:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800250e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002514:	2b00      	cmp	r3, #0
 8002516:	d10d      	bne.n	8002534 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d14d      	bne.n	80025bc <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	4618      	mov	r0, r3
 8002526:	f000 ff69 	bl	80033fc <xTaskPriorityDisinherit>
 800252a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	2200      	movs	r2, #0
 8002530:	609a      	str	r2, [r3, #8]
 8002532:	e043      	b.n	80025bc <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d119      	bne.n	800256e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	6858      	ldr	r0, [r3, #4]
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002542:	461a      	mov	r2, r3
 8002544:	68b9      	ldr	r1, [r7, #8]
 8002546:	f001 fd4b 	bl	8003fe0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	685a      	ldr	r2, [r3, #4]
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002552:	441a      	add	r2, r3
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	685a      	ldr	r2, [r3, #4]
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	429a      	cmp	r2, r3
 8002562:	d32b      	bcc.n	80025bc <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	605a      	str	r2, [r3, #4]
 800256c:	e026      	b.n	80025bc <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	68d8      	ldr	r0, [r3, #12]
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002576:	461a      	mov	r2, r3
 8002578:	68b9      	ldr	r1, [r7, #8]
 800257a:	f001 fd31 	bl	8003fe0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	68da      	ldr	r2, [r3, #12]
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002586:	425b      	negs	r3, r3
 8002588:	441a      	add	r2, r3
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	68da      	ldr	r2, [r3, #12]
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	429a      	cmp	r2, r3
 8002598:	d207      	bcs.n	80025aa <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	689a      	ldr	r2, [r3, #8]
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025a2:	425b      	negs	r3, r3
 80025a4:	441a      	add	r2, r3
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2b02      	cmp	r3, #2
 80025ae:	d105      	bne.n	80025bc <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d002      	beq.n	80025bc <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	3b01      	subs	r3, #1
 80025ba:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	1c5a      	adds	r2, r3, #1
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80025c4:	697b      	ldr	r3, [r7, #20]
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	3718      	adds	r7, #24
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}

080025ce <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80025ce:	b580      	push	{r7, lr}
 80025d0:	b084      	sub	sp, #16
 80025d2:	af00      	add	r7, sp, #0
 80025d4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80025d6:	f001 f991 	bl	80038fc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80025e0:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80025e2:	e011      	b.n	8002608 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d012      	beq.n	8002612 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	3324      	adds	r3, #36	@ 0x24
 80025f0:	4618      	mov	r0, r3
 80025f2:	f000 fca9 	bl	8002f48 <xTaskRemoveFromEventList>
 80025f6:	4603      	mov	r3, r0
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d001      	beq.n	8002600 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80025fc:	f000 fd82 	bl	8003104 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002600:	7bfb      	ldrb	r3, [r7, #15]
 8002602:	3b01      	subs	r3, #1
 8002604:	b2db      	uxtb	r3, r3
 8002606:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002608:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800260c:	2b00      	cmp	r3, #0
 800260e:	dce9      	bgt.n	80025e4 <prvUnlockQueue+0x16>
 8002610:	e000      	b.n	8002614 <prvUnlockQueue+0x46>
					break;
 8002612:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	22ff      	movs	r2, #255	@ 0xff
 8002618:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800261c:	f001 f99e 	bl	800395c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002620:	f001 f96c 	bl	80038fc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800262a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800262c:	e011      	b.n	8002652 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	691b      	ldr	r3, [r3, #16]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d012      	beq.n	800265c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	3310      	adds	r3, #16
 800263a:	4618      	mov	r0, r3
 800263c:	f000 fc84 	bl	8002f48 <xTaskRemoveFromEventList>
 8002640:	4603      	mov	r3, r0
 8002642:	2b00      	cmp	r3, #0
 8002644:	d001      	beq.n	800264a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002646:	f000 fd5d 	bl	8003104 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800264a:	7bbb      	ldrb	r3, [r7, #14]
 800264c:	3b01      	subs	r3, #1
 800264e:	b2db      	uxtb	r3, r3
 8002650:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002652:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002656:	2b00      	cmp	r3, #0
 8002658:	dce9      	bgt.n	800262e <prvUnlockQueue+0x60>
 800265a:	e000      	b.n	800265e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800265c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	22ff      	movs	r2, #255	@ 0xff
 8002662:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8002666:	f001 f979 	bl	800395c <vPortExitCritical>
}
 800266a:	bf00      	nop
 800266c:	3710      	adds	r7, #16
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}

08002672 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002672:	b580      	push	{r7, lr}
 8002674:	b084      	sub	sp, #16
 8002676:	af00      	add	r7, sp, #0
 8002678:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800267a:	f001 f93f 	bl	80038fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002682:	2b00      	cmp	r3, #0
 8002684:	d102      	bne.n	800268c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002686:	2301      	movs	r3, #1
 8002688:	60fb      	str	r3, [r7, #12]
 800268a:	e001      	b.n	8002690 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800268c:	2300      	movs	r3, #0
 800268e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002690:	f001 f964 	bl	800395c <vPortExitCritical>

	return xReturn;
 8002694:	68fb      	ldr	r3, [r7, #12]
}
 8002696:	4618      	mov	r0, r3
 8002698:	3710      	adds	r7, #16
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}

0800269e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800269e:	b580      	push	{r7, lr}
 80026a0:	b084      	sub	sp, #16
 80026a2:	af00      	add	r7, sp, #0
 80026a4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80026a6:	f001 f929 	bl	80038fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026b2:	429a      	cmp	r2, r3
 80026b4:	d102      	bne.n	80026bc <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80026b6:	2301      	movs	r3, #1
 80026b8:	60fb      	str	r3, [r7, #12]
 80026ba:	e001      	b.n	80026c0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80026bc:	2300      	movs	r3, #0
 80026be:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80026c0:	f001 f94c 	bl	800395c <vPortExitCritical>

	return xReturn;
 80026c4:	68fb      	ldr	r3, [r7, #12]
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3710      	adds	r7, #16
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}

080026ce <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80026ce:	b580      	push	{r7, lr}
 80026d0:	b08e      	sub	sp, #56	@ 0x38
 80026d2:	af04      	add	r7, sp, #16
 80026d4:	60f8      	str	r0, [r7, #12]
 80026d6:	60b9      	str	r1, [r7, #8]
 80026d8:	607a      	str	r2, [r7, #4]
 80026da:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80026dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d10b      	bne.n	80026fa <xTaskCreateStatic+0x2c>
	__asm volatile
 80026e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80026e6:	f383 8811 	msr	BASEPRI, r3
 80026ea:	f3bf 8f6f 	isb	sy
 80026ee:	f3bf 8f4f 	dsb	sy
 80026f2:	623b      	str	r3, [r7, #32]
}
 80026f4:	bf00      	nop
 80026f6:	bf00      	nop
 80026f8:	e7fd      	b.n	80026f6 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80026fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d10b      	bne.n	8002718 <xTaskCreateStatic+0x4a>
	__asm volatile
 8002700:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002704:	f383 8811 	msr	BASEPRI, r3
 8002708:	f3bf 8f6f 	isb	sy
 800270c:	f3bf 8f4f 	dsb	sy
 8002710:	61fb      	str	r3, [r7, #28]
}
 8002712:	bf00      	nop
 8002714:	bf00      	nop
 8002716:	e7fd      	b.n	8002714 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002718:	23a0      	movs	r3, #160	@ 0xa0
 800271a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	2ba0      	cmp	r3, #160	@ 0xa0
 8002720:	d00b      	beq.n	800273a <xTaskCreateStatic+0x6c>
	__asm volatile
 8002722:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002726:	f383 8811 	msr	BASEPRI, r3
 800272a:	f3bf 8f6f 	isb	sy
 800272e:	f3bf 8f4f 	dsb	sy
 8002732:	61bb      	str	r3, [r7, #24]
}
 8002734:	bf00      	nop
 8002736:	bf00      	nop
 8002738:	e7fd      	b.n	8002736 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800273a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800273c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800273e:	2b00      	cmp	r3, #0
 8002740:	d01e      	beq.n	8002780 <xTaskCreateStatic+0xb2>
 8002742:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002744:	2b00      	cmp	r3, #0
 8002746:	d01b      	beq.n	8002780 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002748:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800274a:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800274c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800274e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002750:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002754:	2202      	movs	r2, #2
 8002756:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800275a:	2300      	movs	r3, #0
 800275c:	9303      	str	r3, [sp, #12]
 800275e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002760:	9302      	str	r3, [sp, #8]
 8002762:	f107 0314 	add.w	r3, r7, #20
 8002766:	9301      	str	r3, [sp, #4]
 8002768:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800276a:	9300      	str	r3, [sp, #0]
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	687a      	ldr	r2, [r7, #4]
 8002770:	68b9      	ldr	r1, [r7, #8]
 8002772:	68f8      	ldr	r0, [r7, #12]
 8002774:	f000 f850 	bl	8002818 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002778:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800277a:	f000 f8ed 	bl	8002958 <prvAddNewTaskToReadyList>
 800277e:	e001      	b.n	8002784 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8002780:	2300      	movs	r3, #0
 8002782:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002784:	697b      	ldr	r3, [r7, #20]
	}
 8002786:	4618      	mov	r0, r3
 8002788:	3728      	adds	r7, #40	@ 0x28
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}

0800278e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800278e:	b580      	push	{r7, lr}
 8002790:	b08c      	sub	sp, #48	@ 0x30
 8002792:	af04      	add	r7, sp, #16
 8002794:	60f8      	str	r0, [r7, #12]
 8002796:	60b9      	str	r1, [r7, #8]
 8002798:	603b      	str	r3, [r7, #0]
 800279a:	4613      	mov	r3, r2
 800279c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800279e:	88fb      	ldrh	r3, [r7, #6]
 80027a0:	009b      	lsls	r3, r3, #2
 80027a2:	4618      	mov	r0, r3
 80027a4:	f001 f9ac 	bl	8003b00 <pvPortMalloc>
 80027a8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d00e      	beq.n	80027ce <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80027b0:	20a0      	movs	r0, #160	@ 0xa0
 80027b2:	f001 f9a5 	bl	8003b00 <pvPortMalloc>
 80027b6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80027b8:	69fb      	ldr	r3, [r7, #28]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d003      	beq.n	80027c6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80027be:	69fb      	ldr	r3, [r7, #28]
 80027c0:	697a      	ldr	r2, [r7, #20]
 80027c2:	631a      	str	r2, [r3, #48]	@ 0x30
 80027c4:	e005      	b.n	80027d2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80027c6:	6978      	ldr	r0, [r7, #20]
 80027c8:	f001 fa68 	bl	8003c9c <vPortFree>
 80027cc:	e001      	b.n	80027d2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80027ce:	2300      	movs	r3, #0
 80027d0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80027d2:	69fb      	ldr	r3, [r7, #28]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d017      	beq.n	8002808 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80027d8:	69fb      	ldr	r3, [r7, #28]
 80027da:	2200      	movs	r2, #0
 80027dc:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80027e0:	88fa      	ldrh	r2, [r7, #6]
 80027e2:	2300      	movs	r3, #0
 80027e4:	9303      	str	r3, [sp, #12]
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	9302      	str	r3, [sp, #8]
 80027ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027ec:	9301      	str	r3, [sp, #4]
 80027ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027f0:	9300      	str	r3, [sp, #0]
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	68b9      	ldr	r1, [r7, #8]
 80027f6:	68f8      	ldr	r0, [r7, #12]
 80027f8:	f000 f80e 	bl	8002818 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80027fc:	69f8      	ldr	r0, [r7, #28]
 80027fe:	f000 f8ab 	bl	8002958 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002802:	2301      	movs	r3, #1
 8002804:	61bb      	str	r3, [r7, #24]
 8002806:	e002      	b.n	800280e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002808:	f04f 33ff 	mov.w	r3, #4294967295
 800280c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800280e:	69bb      	ldr	r3, [r7, #24]
	}
 8002810:	4618      	mov	r0, r3
 8002812:	3720      	adds	r7, #32
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}

08002818 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b088      	sub	sp, #32
 800281c:	af00      	add	r7, sp, #0
 800281e:	60f8      	str	r0, [r7, #12]
 8002820:	60b9      	str	r1, [r7, #8]
 8002822:	607a      	str	r2, [r7, #4]
 8002824:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002826:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002828:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002830:	3b01      	subs	r3, #1
 8002832:	009b      	lsls	r3, r3, #2
 8002834:	4413      	add	r3, r2
 8002836:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002838:	69bb      	ldr	r3, [r7, #24]
 800283a:	f023 0307 	bic.w	r3, r3, #7
 800283e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002840:	69bb      	ldr	r3, [r7, #24]
 8002842:	f003 0307 	and.w	r3, r3, #7
 8002846:	2b00      	cmp	r3, #0
 8002848:	d00b      	beq.n	8002862 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800284a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800284e:	f383 8811 	msr	BASEPRI, r3
 8002852:	f3bf 8f6f 	isb	sy
 8002856:	f3bf 8f4f 	dsb	sy
 800285a:	617b      	str	r3, [r7, #20]
}
 800285c:	bf00      	nop
 800285e:	bf00      	nop
 8002860:	e7fd      	b.n	800285e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d01f      	beq.n	80028a8 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002868:	2300      	movs	r3, #0
 800286a:	61fb      	str	r3, [r7, #28]
 800286c:	e012      	b.n	8002894 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800286e:	68ba      	ldr	r2, [r7, #8]
 8002870:	69fb      	ldr	r3, [r7, #28]
 8002872:	4413      	add	r3, r2
 8002874:	7819      	ldrb	r1, [r3, #0]
 8002876:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002878:	69fb      	ldr	r3, [r7, #28]
 800287a:	4413      	add	r3, r2
 800287c:	3334      	adds	r3, #52	@ 0x34
 800287e:	460a      	mov	r2, r1
 8002880:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002882:	68ba      	ldr	r2, [r7, #8]
 8002884:	69fb      	ldr	r3, [r7, #28]
 8002886:	4413      	add	r3, r2
 8002888:	781b      	ldrb	r3, [r3, #0]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d006      	beq.n	800289c <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800288e:	69fb      	ldr	r3, [r7, #28]
 8002890:	3301      	adds	r3, #1
 8002892:	61fb      	str	r3, [r7, #28]
 8002894:	69fb      	ldr	r3, [r7, #28]
 8002896:	2b0f      	cmp	r3, #15
 8002898:	d9e9      	bls.n	800286e <prvInitialiseNewTask+0x56>
 800289a:	e000      	b.n	800289e <prvInitialiseNewTask+0x86>
			{
				break;
 800289c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800289e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028a0:	2200      	movs	r2, #0
 80028a2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80028a6:	e003      	b.n	80028b0 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80028a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028aa:	2200      	movs	r2, #0
 80028ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80028b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028b2:	2b06      	cmp	r3, #6
 80028b4:	d901      	bls.n	80028ba <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80028b6:	2306      	movs	r3, #6
 80028b8:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80028ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028bc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80028be:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80028c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028c2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80028c4:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80028c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028c8:	2200      	movs	r2, #0
 80028ca:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80028cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028ce:	3304      	adds	r3, #4
 80028d0:	4618      	mov	r0, r3
 80028d2:	f7ff f986 	bl	8001be2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80028d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028d8:	3318      	adds	r3, #24
 80028da:	4618      	mov	r0, r3
 80028dc:	f7ff f981 	bl	8001be2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80028e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80028e4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80028e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028e8:	f1c3 0207 	rsb	r2, r3, #7
 80028ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028ee:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80028f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80028f4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80028f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028f8:	2200      	movs	r2, #0
 80028fa:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80028fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002900:	2200      	movs	r2, #0
 8002902:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8002906:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002908:	334c      	adds	r3, #76	@ 0x4c
 800290a:	224c      	movs	r2, #76	@ 0x4c
 800290c:	2100      	movs	r1, #0
 800290e:	4618      	mov	r0, r3
 8002910:	f001 fae2 	bl	8003ed8 <memset>
 8002914:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002916:	4a0d      	ldr	r2, [pc, #52]	@ (800294c <prvInitialiseNewTask+0x134>)
 8002918:	651a      	str	r2, [r3, #80]	@ 0x50
 800291a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800291c:	4a0c      	ldr	r2, [pc, #48]	@ (8002950 <prvInitialiseNewTask+0x138>)
 800291e:	655a      	str	r2, [r3, #84]	@ 0x54
 8002920:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002922:	4a0c      	ldr	r2, [pc, #48]	@ (8002954 <prvInitialiseNewTask+0x13c>)
 8002924:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002926:	683a      	ldr	r2, [r7, #0]
 8002928:	68f9      	ldr	r1, [r7, #12]
 800292a:	69b8      	ldr	r0, [r7, #24]
 800292c:	f000 fef8 	bl	8003720 <pxPortInitialiseStack>
 8002930:	4602      	mov	r2, r0
 8002932:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002934:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002936:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002938:	2b00      	cmp	r3, #0
 800293a:	d002      	beq.n	8002942 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800293c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800293e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002940:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002942:	bf00      	nop
 8002944:	3720      	adds	r7, #32
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	200010d0 	.word	0x200010d0
 8002950:	20001138 	.word	0x20001138
 8002954:	200011a0 	.word	0x200011a0

08002958 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b082      	sub	sp, #8
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002960:	f000 ffcc 	bl	80038fc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002964:	4b2a      	ldr	r3, [pc, #168]	@ (8002a10 <prvAddNewTaskToReadyList+0xb8>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	3301      	adds	r3, #1
 800296a:	4a29      	ldr	r2, [pc, #164]	@ (8002a10 <prvAddNewTaskToReadyList+0xb8>)
 800296c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800296e:	4b29      	ldr	r3, [pc, #164]	@ (8002a14 <prvAddNewTaskToReadyList+0xbc>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d109      	bne.n	800298a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002976:	4a27      	ldr	r2, [pc, #156]	@ (8002a14 <prvAddNewTaskToReadyList+0xbc>)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800297c:	4b24      	ldr	r3, [pc, #144]	@ (8002a10 <prvAddNewTaskToReadyList+0xb8>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	2b01      	cmp	r3, #1
 8002982:	d110      	bne.n	80029a6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002984:	f000 fbe2 	bl	800314c <prvInitialiseTaskLists>
 8002988:	e00d      	b.n	80029a6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800298a:	4b23      	ldr	r3, [pc, #140]	@ (8002a18 <prvAddNewTaskToReadyList+0xc0>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d109      	bne.n	80029a6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002992:	4b20      	ldr	r3, [pc, #128]	@ (8002a14 <prvAddNewTaskToReadyList+0xbc>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800299c:	429a      	cmp	r2, r3
 800299e:	d802      	bhi.n	80029a6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80029a0:	4a1c      	ldr	r2, [pc, #112]	@ (8002a14 <prvAddNewTaskToReadyList+0xbc>)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80029a6:	4b1d      	ldr	r3, [pc, #116]	@ (8002a1c <prvAddNewTaskToReadyList+0xc4>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	3301      	adds	r3, #1
 80029ac:	4a1b      	ldr	r2, [pc, #108]	@ (8002a1c <prvAddNewTaskToReadyList+0xc4>)
 80029ae:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029b4:	2201      	movs	r2, #1
 80029b6:	409a      	lsls	r2, r3
 80029b8:	4b19      	ldr	r3, [pc, #100]	@ (8002a20 <prvAddNewTaskToReadyList+0xc8>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4313      	orrs	r3, r2
 80029be:	4a18      	ldr	r2, [pc, #96]	@ (8002a20 <prvAddNewTaskToReadyList+0xc8>)
 80029c0:	6013      	str	r3, [r2, #0]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80029c6:	4613      	mov	r3, r2
 80029c8:	009b      	lsls	r3, r3, #2
 80029ca:	4413      	add	r3, r2
 80029cc:	009b      	lsls	r3, r3, #2
 80029ce:	4a15      	ldr	r2, [pc, #84]	@ (8002a24 <prvAddNewTaskToReadyList+0xcc>)
 80029d0:	441a      	add	r2, r3
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	3304      	adds	r3, #4
 80029d6:	4619      	mov	r1, r3
 80029d8:	4610      	mov	r0, r2
 80029da:	f7ff f90e 	bl	8001bfa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80029de:	f000 ffbd 	bl	800395c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80029e2:	4b0d      	ldr	r3, [pc, #52]	@ (8002a18 <prvAddNewTaskToReadyList+0xc0>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d00e      	beq.n	8002a08 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80029ea:	4b0a      	ldr	r3, [pc, #40]	@ (8002a14 <prvAddNewTaskToReadyList+0xbc>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029f4:	429a      	cmp	r2, r3
 80029f6:	d207      	bcs.n	8002a08 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80029f8:	4b0b      	ldr	r3, [pc, #44]	@ (8002a28 <prvAddNewTaskToReadyList+0xd0>)
 80029fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80029fe:	601a      	str	r2, [r3, #0]
 8002a00:	f3bf 8f4f 	dsb	sy
 8002a04:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002a08:	bf00      	nop
 8002a0a:	3708      	adds	r7, #8
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}
 8002a10:	2000047c 	.word	0x2000047c
 8002a14:	2000037c 	.word	0x2000037c
 8002a18:	20000488 	.word	0x20000488
 8002a1c:	20000498 	.word	0x20000498
 8002a20:	20000484 	.word	0x20000484
 8002a24:	20000380 	.word	0x20000380
 8002a28:	e000ed04 	.word	0xe000ed04

08002a2c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b084      	sub	sp, #16
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002a34:	2300      	movs	r3, #0
 8002a36:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d018      	beq.n	8002a70 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002a3e:	4b14      	ldr	r3, [pc, #80]	@ (8002a90 <vTaskDelay+0x64>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d00b      	beq.n	8002a5e <vTaskDelay+0x32>
	__asm volatile
 8002a46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a4a:	f383 8811 	msr	BASEPRI, r3
 8002a4e:	f3bf 8f6f 	isb	sy
 8002a52:	f3bf 8f4f 	dsb	sy
 8002a56:	60bb      	str	r3, [r7, #8]
}
 8002a58:	bf00      	nop
 8002a5a:	bf00      	nop
 8002a5c:	e7fd      	b.n	8002a5a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002a5e:	f000 f885 	bl	8002b6c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002a62:	2100      	movs	r1, #0
 8002a64:	6878      	ldr	r0, [r7, #4]
 8002a66:	f000 fdf5 	bl	8003654 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002a6a:	f000 f88d 	bl	8002b88 <xTaskResumeAll>
 8002a6e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d107      	bne.n	8002a86 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8002a76:	4b07      	ldr	r3, [pc, #28]	@ (8002a94 <vTaskDelay+0x68>)
 8002a78:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002a7c:	601a      	str	r2, [r3, #0]
 8002a7e:	f3bf 8f4f 	dsb	sy
 8002a82:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002a86:	bf00      	nop
 8002a88:	3710      	adds	r7, #16
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	200004a4 	.word	0x200004a4
 8002a94:	e000ed04 	.word	0xe000ed04

08002a98 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b08a      	sub	sp, #40	@ 0x28
 8002a9c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002aa6:	463a      	mov	r2, r7
 8002aa8:	1d39      	adds	r1, r7, #4
 8002aaa:	f107 0308 	add.w	r3, r7, #8
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f7fd fb4e 	bl	8000150 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002ab4:	6839      	ldr	r1, [r7, #0]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	68ba      	ldr	r2, [r7, #8]
 8002aba:	9202      	str	r2, [sp, #8]
 8002abc:	9301      	str	r3, [sp, #4]
 8002abe:	2300      	movs	r3, #0
 8002ac0:	9300      	str	r3, [sp, #0]
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	460a      	mov	r2, r1
 8002ac6:	4921      	ldr	r1, [pc, #132]	@ (8002b4c <vTaskStartScheduler+0xb4>)
 8002ac8:	4821      	ldr	r0, [pc, #132]	@ (8002b50 <vTaskStartScheduler+0xb8>)
 8002aca:	f7ff fe00 	bl	80026ce <xTaskCreateStatic>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	4a20      	ldr	r2, [pc, #128]	@ (8002b54 <vTaskStartScheduler+0xbc>)
 8002ad2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002ad4:	4b1f      	ldr	r3, [pc, #124]	@ (8002b54 <vTaskStartScheduler+0xbc>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d002      	beq.n	8002ae2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002adc:	2301      	movs	r3, #1
 8002ade:	617b      	str	r3, [r7, #20]
 8002ae0:	e001      	b.n	8002ae6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	2b01      	cmp	r3, #1
 8002aea:	d11b      	bne.n	8002b24 <vTaskStartScheduler+0x8c>
	__asm volatile
 8002aec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002af0:	f383 8811 	msr	BASEPRI, r3
 8002af4:	f3bf 8f6f 	isb	sy
 8002af8:	f3bf 8f4f 	dsb	sy
 8002afc:	613b      	str	r3, [r7, #16]
}
 8002afe:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8002b00:	4b15      	ldr	r3, [pc, #84]	@ (8002b58 <vTaskStartScheduler+0xc0>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	334c      	adds	r3, #76	@ 0x4c
 8002b06:	4a15      	ldr	r2, [pc, #84]	@ (8002b5c <vTaskStartScheduler+0xc4>)
 8002b08:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002b0a:	4b15      	ldr	r3, [pc, #84]	@ (8002b60 <vTaskStartScheduler+0xc8>)
 8002b0c:	f04f 32ff 	mov.w	r2, #4294967295
 8002b10:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002b12:	4b14      	ldr	r3, [pc, #80]	@ (8002b64 <vTaskStartScheduler+0xcc>)
 8002b14:	2201      	movs	r2, #1
 8002b16:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002b18:	4b13      	ldr	r3, [pc, #76]	@ (8002b68 <vTaskStartScheduler+0xd0>)
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002b1e:	f000 fe7b 	bl	8003818 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002b22:	e00f      	b.n	8002b44 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b2a:	d10b      	bne.n	8002b44 <vTaskStartScheduler+0xac>
	__asm volatile
 8002b2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b30:	f383 8811 	msr	BASEPRI, r3
 8002b34:	f3bf 8f6f 	isb	sy
 8002b38:	f3bf 8f4f 	dsb	sy
 8002b3c:	60fb      	str	r3, [r7, #12]
}
 8002b3e:	bf00      	nop
 8002b40:	bf00      	nop
 8002b42:	e7fd      	b.n	8002b40 <vTaskStartScheduler+0xa8>
}
 8002b44:	bf00      	nop
 8002b46:	3718      	adds	r7, #24
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}
 8002b4c:	08004134 	.word	0x08004134
 8002b50:	0800311d 	.word	0x0800311d
 8002b54:	200004a0 	.word	0x200004a0
 8002b58:	2000037c 	.word	0x2000037c
 8002b5c:	20000010 	.word	0x20000010
 8002b60:	2000049c 	.word	0x2000049c
 8002b64:	20000488 	.word	0x20000488
 8002b68:	20000480 	.word	0x20000480

08002b6c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8002b70:	4b04      	ldr	r3, [pc, #16]	@ (8002b84 <vTaskSuspendAll+0x18>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	3301      	adds	r3, #1
 8002b76:	4a03      	ldr	r2, [pc, #12]	@ (8002b84 <vTaskSuspendAll+0x18>)
 8002b78:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8002b7a:	bf00      	nop
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bc80      	pop	{r7}
 8002b80:	4770      	bx	lr
 8002b82:	bf00      	nop
 8002b84:	200004a4 	.word	0x200004a4

08002b88 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b084      	sub	sp, #16
 8002b8c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002b92:	2300      	movs	r3, #0
 8002b94:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002b96:	4b42      	ldr	r3, [pc, #264]	@ (8002ca0 <xTaskResumeAll+0x118>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d10b      	bne.n	8002bb6 <xTaskResumeAll+0x2e>
	__asm volatile
 8002b9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ba2:	f383 8811 	msr	BASEPRI, r3
 8002ba6:	f3bf 8f6f 	isb	sy
 8002baa:	f3bf 8f4f 	dsb	sy
 8002bae:	603b      	str	r3, [r7, #0]
}
 8002bb0:	bf00      	nop
 8002bb2:	bf00      	nop
 8002bb4:	e7fd      	b.n	8002bb2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002bb6:	f000 fea1 	bl	80038fc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002bba:	4b39      	ldr	r3, [pc, #228]	@ (8002ca0 <xTaskResumeAll+0x118>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	3b01      	subs	r3, #1
 8002bc0:	4a37      	ldr	r2, [pc, #220]	@ (8002ca0 <xTaskResumeAll+0x118>)
 8002bc2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002bc4:	4b36      	ldr	r3, [pc, #216]	@ (8002ca0 <xTaskResumeAll+0x118>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d161      	bne.n	8002c90 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002bcc:	4b35      	ldr	r3, [pc, #212]	@ (8002ca4 <xTaskResumeAll+0x11c>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d05d      	beq.n	8002c90 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002bd4:	e02e      	b.n	8002c34 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002bd6:	4b34      	ldr	r3, [pc, #208]	@ (8002ca8 <xTaskResumeAll+0x120>)
 8002bd8:	68db      	ldr	r3, [r3, #12]
 8002bda:	68db      	ldr	r3, [r3, #12]
 8002bdc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	3318      	adds	r3, #24
 8002be2:	4618      	mov	r0, r3
 8002be4:	f7ff f864 	bl	8001cb0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	3304      	adds	r3, #4
 8002bec:	4618      	mov	r0, r3
 8002bee:	f7ff f85f 	bl	8001cb0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	409a      	lsls	r2, r3
 8002bfa:	4b2c      	ldr	r3, [pc, #176]	@ (8002cac <xTaskResumeAll+0x124>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	4a2a      	ldr	r2, [pc, #168]	@ (8002cac <xTaskResumeAll+0x124>)
 8002c02:	6013      	str	r3, [r2, #0]
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c08:	4613      	mov	r3, r2
 8002c0a:	009b      	lsls	r3, r3, #2
 8002c0c:	4413      	add	r3, r2
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	4a27      	ldr	r2, [pc, #156]	@ (8002cb0 <xTaskResumeAll+0x128>)
 8002c12:	441a      	add	r2, r3
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	3304      	adds	r3, #4
 8002c18:	4619      	mov	r1, r3
 8002c1a:	4610      	mov	r0, r2
 8002c1c:	f7fe ffed 	bl	8001bfa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c24:	4b23      	ldr	r3, [pc, #140]	@ (8002cb4 <xTaskResumeAll+0x12c>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c2a:	429a      	cmp	r2, r3
 8002c2c:	d302      	bcc.n	8002c34 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8002c2e:	4b22      	ldr	r3, [pc, #136]	@ (8002cb8 <xTaskResumeAll+0x130>)
 8002c30:	2201      	movs	r2, #1
 8002c32:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002c34:	4b1c      	ldr	r3, [pc, #112]	@ (8002ca8 <xTaskResumeAll+0x120>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d1cc      	bne.n	8002bd6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d001      	beq.n	8002c46 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002c42:	f000 fb27 	bl	8003294 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002c46:	4b1d      	ldr	r3, [pc, #116]	@ (8002cbc <xTaskResumeAll+0x134>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d010      	beq.n	8002c74 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002c52:	f000 f837 	bl	8002cc4 <xTaskIncrementTick>
 8002c56:	4603      	mov	r3, r0
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d002      	beq.n	8002c62 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8002c5c:	4b16      	ldr	r3, [pc, #88]	@ (8002cb8 <xTaskResumeAll+0x130>)
 8002c5e:	2201      	movs	r2, #1
 8002c60:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	3b01      	subs	r3, #1
 8002c66:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d1f1      	bne.n	8002c52 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8002c6e:	4b13      	ldr	r3, [pc, #76]	@ (8002cbc <xTaskResumeAll+0x134>)
 8002c70:	2200      	movs	r2, #0
 8002c72:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002c74:	4b10      	ldr	r3, [pc, #64]	@ (8002cb8 <xTaskResumeAll+0x130>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d009      	beq.n	8002c90 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002c80:	4b0f      	ldr	r3, [pc, #60]	@ (8002cc0 <xTaskResumeAll+0x138>)
 8002c82:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002c86:	601a      	str	r2, [r3, #0]
 8002c88:	f3bf 8f4f 	dsb	sy
 8002c8c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002c90:	f000 fe64 	bl	800395c <vPortExitCritical>

	return xAlreadyYielded;
 8002c94:	68bb      	ldr	r3, [r7, #8]
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3710      	adds	r7, #16
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	200004a4 	.word	0x200004a4
 8002ca4:	2000047c 	.word	0x2000047c
 8002ca8:	2000043c 	.word	0x2000043c
 8002cac:	20000484 	.word	0x20000484
 8002cb0:	20000380 	.word	0x20000380
 8002cb4:	2000037c 	.word	0x2000037c
 8002cb8:	20000490 	.word	0x20000490
 8002cbc:	2000048c 	.word	0x2000048c
 8002cc0:	e000ed04 	.word	0xe000ed04

08002cc4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b086      	sub	sp, #24
 8002cc8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002cce:	4b4f      	ldr	r3, [pc, #316]	@ (8002e0c <xTaskIncrementTick+0x148>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	f040 808f 	bne.w	8002df6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002cd8:	4b4d      	ldr	r3, [pc, #308]	@ (8002e10 <xTaskIncrementTick+0x14c>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	3301      	adds	r3, #1
 8002cde:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002ce0:	4a4b      	ldr	r2, [pc, #300]	@ (8002e10 <xTaskIncrementTick+0x14c>)
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d121      	bne.n	8002d30 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8002cec:	4b49      	ldr	r3, [pc, #292]	@ (8002e14 <xTaskIncrementTick+0x150>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d00b      	beq.n	8002d0e <xTaskIncrementTick+0x4a>
	__asm volatile
 8002cf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cfa:	f383 8811 	msr	BASEPRI, r3
 8002cfe:	f3bf 8f6f 	isb	sy
 8002d02:	f3bf 8f4f 	dsb	sy
 8002d06:	603b      	str	r3, [r7, #0]
}
 8002d08:	bf00      	nop
 8002d0a:	bf00      	nop
 8002d0c:	e7fd      	b.n	8002d0a <xTaskIncrementTick+0x46>
 8002d0e:	4b41      	ldr	r3, [pc, #260]	@ (8002e14 <xTaskIncrementTick+0x150>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	60fb      	str	r3, [r7, #12]
 8002d14:	4b40      	ldr	r3, [pc, #256]	@ (8002e18 <xTaskIncrementTick+0x154>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a3e      	ldr	r2, [pc, #248]	@ (8002e14 <xTaskIncrementTick+0x150>)
 8002d1a:	6013      	str	r3, [r2, #0]
 8002d1c:	4a3e      	ldr	r2, [pc, #248]	@ (8002e18 <xTaskIncrementTick+0x154>)
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	6013      	str	r3, [r2, #0]
 8002d22:	4b3e      	ldr	r3, [pc, #248]	@ (8002e1c <xTaskIncrementTick+0x158>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	3301      	adds	r3, #1
 8002d28:	4a3c      	ldr	r2, [pc, #240]	@ (8002e1c <xTaskIncrementTick+0x158>)
 8002d2a:	6013      	str	r3, [r2, #0]
 8002d2c:	f000 fab2 	bl	8003294 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002d30:	4b3b      	ldr	r3, [pc, #236]	@ (8002e20 <xTaskIncrementTick+0x15c>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	693a      	ldr	r2, [r7, #16]
 8002d36:	429a      	cmp	r2, r3
 8002d38:	d348      	bcc.n	8002dcc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002d3a:	4b36      	ldr	r3, [pc, #216]	@ (8002e14 <xTaskIncrementTick+0x150>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d104      	bne.n	8002d4e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002d44:	4b36      	ldr	r3, [pc, #216]	@ (8002e20 <xTaskIncrementTick+0x15c>)
 8002d46:	f04f 32ff 	mov.w	r2, #4294967295
 8002d4a:	601a      	str	r2, [r3, #0]
					break;
 8002d4c:	e03e      	b.n	8002dcc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002d4e:	4b31      	ldr	r3, [pc, #196]	@ (8002e14 <xTaskIncrementTick+0x150>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	68db      	ldr	r3, [r3, #12]
 8002d54:	68db      	ldr	r3, [r3, #12]
 8002d56:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002d5e:	693a      	ldr	r2, [r7, #16]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	429a      	cmp	r2, r3
 8002d64:	d203      	bcs.n	8002d6e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002d66:	4a2e      	ldr	r2, [pc, #184]	@ (8002e20 <xTaskIncrementTick+0x15c>)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002d6c:	e02e      	b.n	8002dcc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	3304      	adds	r3, #4
 8002d72:	4618      	mov	r0, r3
 8002d74:	f7fe ff9c 	bl	8001cb0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d004      	beq.n	8002d8a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	3318      	adds	r3, #24
 8002d84:	4618      	mov	r0, r3
 8002d86:	f7fe ff93 	bl	8001cb0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d8e:	2201      	movs	r2, #1
 8002d90:	409a      	lsls	r2, r3
 8002d92:	4b24      	ldr	r3, [pc, #144]	@ (8002e24 <xTaskIncrementTick+0x160>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4313      	orrs	r3, r2
 8002d98:	4a22      	ldr	r2, [pc, #136]	@ (8002e24 <xTaskIncrementTick+0x160>)
 8002d9a:	6013      	str	r3, [r2, #0]
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002da0:	4613      	mov	r3, r2
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	4413      	add	r3, r2
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	4a1f      	ldr	r2, [pc, #124]	@ (8002e28 <xTaskIncrementTick+0x164>)
 8002daa:	441a      	add	r2, r3
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	3304      	adds	r3, #4
 8002db0:	4619      	mov	r1, r3
 8002db2:	4610      	mov	r0, r2
 8002db4:	f7fe ff21 	bl	8001bfa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002dbc:	4b1b      	ldr	r3, [pc, #108]	@ (8002e2c <xTaskIncrementTick+0x168>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dc2:	429a      	cmp	r2, r3
 8002dc4:	d3b9      	bcc.n	8002d3a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002dca:	e7b6      	b.n	8002d3a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002dcc:	4b17      	ldr	r3, [pc, #92]	@ (8002e2c <xTaskIncrementTick+0x168>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002dd2:	4915      	ldr	r1, [pc, #84]	@ (8002e28 <xTaskIncrementTick+0x164>)
 8002dd4:	4613      	mov	r3, r2
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	4413      	add	r3, r2
 8002dda:	009b      	lsls	r3, r3, #2
 8002ddc:	440b      	add	r3, r1
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d901      	bls.n	8002de8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8002de4:	2301      	movs	r3, #1
 8002de6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8002de8:	4b11      	ldr	r3, [pc, #68]	@ (8002e30 <xTaskIncrementTick+0x16c>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d007      	beq.n	8002e00 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8002df0:	2301      	movs	r3, #1
 8002df2:	617b      	str	r3, [r7, #20]
 8002df4:	e004      	b.n	8002e00 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8002df6:	4b0f      	ldr	r3, [pc, #60]	@ (8002e34 <xTaskIncrementTick+0x170>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	3301      	adds	r3, #1
 8002dfc:	4a0d      	ldr	r2, [pc, #52]	@ (8002e34 <xTaskIncrementTick+0x170>)
 8002dfe:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8002e00:	697b      	ldr	r3, [r7, #20]
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	3718      	adds	r7, #24
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}
 8002e0a:	bf00      	nop
 8002e0c:	200004a4 	.word	0x200004a4
 8002e10:	20000480 	.word	0x20000480
 8002e14:	20000434 	.word	0x20000434
 8002e18:	20000438 	.word	0x20000438
 8002e1c:	20000494 	.word	0x20000494
 8002e20:	2000049c 	.word	0x2000049c
 8002e24:	20000484 	.word	0x20000484
 8002e28:	20000380 	.word	0x20000380
 8002e2c:	2000037c 	.word	0x2000037c
 8002e30:	20000490 	.word	0x20000490
 8002e34:	2000048c 	.word	0x2000048c

08002e38 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b087      	sub	sp, #28
 8002e3c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002e3e:	4b29      	ldr	r3, [pc, #164]	@ (8002ee4 <vTaskSwitchContext+0xac>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d003      	beq.n	8002e4e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002e46:	4b28      	ldr	r3, [pc, #160]	@ (8002ee8 <vTaskSwitchContext+0xb0>)
 8002e48:	2201      	movs	r2, #1
 8002e4a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002e4c:	e045      	b.n	8002eda <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8002e4e:	4b26      	ldr	r3, [pc, #152]	@ (8002ee8 <vTaskSwitchContext+0xb0>)
 8002e50:	2200      	movs	r2, #0
 8002e52:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002e54:	4b25      	ldr	r3, [pc, #148]	@ (8002eec <vTaskSwitchContext+0xb4>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	fab3 f383 	clz	r3, r3
 8002e60:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8002e62:	7afb      	ldrb	r3, [r7, #11]
 8002e64:	f1c3 031f 	rsb	r3, r3, #31
 8002e68:	617b      	str	r3, [r7, #20]
 8002e6a:	4921      	ldr	r1, [pc, #132]	@ (8002ef0 <vTaskSwitchContext+0xb8>)
 8002e6c:	697a      	ldr	r2, [r7, #20]
 8002e6e:	4613      	mov	r3, r2
 8002e70:	009b      	lsls	r3, r3, #2
 8002e72:	4413      	add	r3, r2
 8002e74:	009b      	lsls	r3, r3, #2
 8002e76:	440b      	add	r3, r1
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d10b      	bne.n	8002e96 <vTaskSwitchContext+0x5e>
	__asm volatile
 8002e7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e82:	f383 8811 	msr	BASEPRI, r3
 8002e86:	f3bf 8f6f 	isb	sy
 8002e8a:	f3bf 8f4f 	dsb	sy
 8002e8e:	607b      	str	r3, [r7, #4]
}
 8002e90:	bf00      	nop
 8002e92:	bf00      	nop
 8002e94:	e7fd      	b.n	8002e92 <vTaskSwitchContext+0x5a>
 8002e96:	697a      	ldr	r2, [r7, #20]
 8002e98:	4613      	mov	r3, r2
 8002e9a:	009b      	lsls	r3, r3, #2
 8002e9c:	4413      	add	r3, r2
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	4a13      	ldr	r2, [pc, #76]	@ (8002ef0 <vTaskSwitchContext+0xb8>)
 8002ea2:	4413      	add	r3, r2
 8002ea4:	613b      	str	r3, [r7, #16]
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	685a      	ldr	r2, [r3, #4]
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	605a      	str	r2, [r3, #4]
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	685a      	ldr	r2, [r3, #4]
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	3308      	adds	r3, #8
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	d104      	bne.n	8002ec6 <vTaskSwitchContext+0x8e>
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	685a      	ldr	r2, [r3, #4]
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	605a      	str	r2, [r3, #4]
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	68db      	ldr	r3, [r3, #12]
 8002ecc:	4a09      	ldr	r2, [pc, #36]	@ (8002ef4 <vTaskSwitchContext+0xbc>)
 8002ece:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8002ed0:	4b08      	ldr	r3, [pc, #32]	@ (8002ef4 <vTaskSwitchContext+0xbc>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	334c      	adds	r3, #76	@ 0x4c
 8002ed6:	4a08      	ldr	r2, [pc, #32]	@ (8002ef8 <vTaskSwitchContext+0xc0>)
 8002ed8:	6013      	str	r3, [r2, #0]
}
 8002eda:	bf00      	nop
 8002edc:	371c      	adds	r7, #28
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bc80      	pop	{r7}
 8002ee2:	4770      	bx	lr
 8002ee4:	200004a4 	.word	0x200004a4
 8002ee8:	20000490 	.word	0x20000490
 8002eec:	20000484 	.word	0x20000484
 8002ef0:	20000380 	.word	0x20000380
 8002ef4:	2000037c 	.word	0x2000037c
 8002ef8:	20000010 	.word	0x20000010

08002efc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b084      	sub	sp, #16
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
 8002f04:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d10b      	bne.n	8002f24 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8002f0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f10:	f383 8811 	msr	BASEPRI, r3
 8002f14:	f3bf 8f6f 	isb	sy
 8002f18:	f3bf 8f4f 	dsb	sy
 8002f1c:	60fb      	str	r3, [r7, #12]
}
 8002f1e:	bf00      	nop
 8002f20:	bf00      	nop
 8002f22:	e7fd      	b.n	8002f20 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002f24:	4b07      	ldr	r3, [pc, #28]	@ (8002f44 <vTaskPlaceOnEventList+0x48>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	3318      	adds	r3, #24
 8002f2a:	4619      	mov	r1, r3
 8002f2c:	6878      	ldr	r0, [r7, #4]
 8002f2e:	f7fe fe87 	bl	8001c40 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002f32:	2101      	movs	r1, #1
 8002f34:	6838      	ldr	r0, [r7, #0]
 8002f36:	f000 fb8d 	bl	8003654 <prvAddCurrentTaskToDelayedList>
}
 8002f3a:	bf00      	nop
 8002f3c:	3710      	adds	r7, #16
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}
 8002f42:	bf00      	nop
 8002f44:	2000037c 	.word	0x2000037c

08002f48 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b086      	sub	sp, #24
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	68db      	ldr	r3, [r3, #12]
 8002f54:	68db      	ldr	r3, [r3, #12]
 8002f56:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d10b      	bne.n	8002f76 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8002f5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f62:	f383 8811 	msr	BASEPRI, r3
 8002f66:	f3bf 8f6f 	isb	sy
 8002f6a:	f3bf 8f4f 	dsb	sy
 8002f6e:	60fb      	str	r3, [r7, #12]
}
 8002f70:	bf00      	nop
 8002f72:	bf00      	nop
 8002f74:	e7fd      	b.n	8002f72 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	3318      	adds	r3, #24
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f7fe fe98 	bl	8001cb0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002f80:	4b1d      	ldr	r3, [pc, #116]	@ (8002ff8 <xTaskRemoveFromEventList+0xb0>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d11c      	bne.n	8002fc2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	3304      	adds	r3, #4
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f7fe fe8f 	bl	8001cb0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f96:	2201      	movs	r2, #1
 8002f98:	409a      	lsls	r2, r3
 8002f9a:	4b18      	ldr	r3, [pc, #96]	@ (8002ffc <xTaskRemoveFromEventList+0xb4>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	4a16      	ldr	r2, [pc, #88]	@ (8002ffc <xTaskRemoveFromEventList+0xb4>)
 8002fa2:	6013      	str	r3, [r2, #0]
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002fa8:	4613      	mov	r3, r2
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	4413      	add	r3, r2
 8002fae:	009b      	lsls	r3, r3, #2
 8002fb0:	4a13      	ldr	r2, [pc, #76]	@ (8003000 <xTaskRemoveFromEventList+0xb8>)
 8002fb2:	441a      	add	r2, r3
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	3304      	adds	r3, #4
 8002fb8:	4619      	mov	r1, r3
 8002fba:	4610      	mov	r0, r2
 8002fbc:	f7fe fe1d 	bl	8001bfa <vListInsertEnd>
 8002fc0:	e005      	b.n	8002fce <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	3318      	adds	r3, #24
 8002fc6:	4619      	mov	r1, r3
 8002fc8:	480e      	ldr	r0, [pc, #56]	@ (8003004 <xTaskRemoveFromEventList+0xbc>)
 8002fca:	f7fe fe16 	bl	8001bfa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002fd2:	4b0d      	ldr	r3, [pc, #52]	@ (8003008 <xTaskRemoveFromEventList+0xc0>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	d905      	bls.n	8002fe8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8002fe0:	4b0a      	ldr	r3, [pc, #40]	@ (800300c <xTaskRemoveFromEventList+0xc4>)
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	601a      	str	r2, [r3, #0]
 8002fe6:	e001      	b.n	8002fec <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8002fec:	697b      	ldr	r3, [r7, #20]
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	3718      	adds	r7, #24
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}
 8002ff6:	bf00      	nop
 8002ff8:	200004a4 	.word	0x200004a4
 8002ffc:	20000484 	.word	0x20000484
 8003000:	20000380 	.word	0x20000380
 8003004:	2000043c 	.word	0x2000043c
 8003008:	2000037c 	.word	0x2000037c
 800300c:	20000490 	.word	0x20000490

08003010 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003010:	b480      	push	{r7}
 8003012:	b083      	sub	sp, #12
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003018:	4b06      	ldr	r3, [pc, #24]	@ (8003034 <vTaskInternalSetTimeOutState+0x24>)
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003020:	4b05      	ldr	r3, [pc, #20]	@ (8003038 <vTaskInternalSetTimeOutState+0x28>)
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	605a      	str	r2, [r3, #4]
}
 8003028:	bf00      	nop
 800302a:	370c      	adds	r7, #12
 800302c:	46bd      	mov	sp, r7
 800302e:	bc80      	pop	{r7}
 8003030:	4770      	bx	lr
 8003032:	bf00      	nop
 8003034:	20000494 	.word	0x20000494
 8003038:	20000480 	.word	0x20000480

0800303c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b088      	sub	sp, #32
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
 8003044:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d10b      	bne.n	8003064 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800304c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003050:	f383 8811 	msr	BASEPRI, r3
 8003054:	f3bf 8f6f 	isb	sy
 8003058:	f3bf 8f4f 	dsb	sy
 800305c:	613b      	str	r3, [r7, #16]
}
 800305e:	bf00      	nop
 8003060:	bf00      	nop
 8003062:	e7fd      	b.n	8003060 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d10b      	bne.n	8003082 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800306a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800306e:	f383 8811 	msr	BASEPRI, r3
 8003072:	f3bf 8f6f 	isb	sy
 8003076:	f3bf 8f4f 	dsb	sy
 800307a:	60fb      	str	r3, [r7, #12]
}
 800307c:	bf00      	nop
 800307e:	bf00      	nop
 8003080:	e7fd      	b.n	800307e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8003082:	f000 fc3b 	bl	80038fc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003086:	4b1d      	ldr	r3, [pc, #116]	@ (80030fc <xTaskCheckForTimeOut+0xc0>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	69ba      	ldr	r2, [r7, #24]
 8003092:	1ad3      	subs	r3, r2, r3
 8003094:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800309e:	d102      	bne.n	80030a6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80030a0:	2300      	movs	r3, #0
 80030a2:	61fb      	str	r3, [r7, #28]
 80030a4:	e023      	b.n	80030ee <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	4b15      	ldr	r3, [pc, #84]	@ (8003100 <xTaskCheckForTimeOut+0xc4>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	429a      	cmp	r2, r3
 80030b0:	d007      	beq.n	80030c2 <xTaskCheckForTimeOut+0x86>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	69ba      	ldr	r2, [r7, #24]
 80030b8:	429a      	cmp	r2, r3
 80030ba:	d302      	bcc.n	80030c2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80030bc:	2301      	movs	r3, #1
 80030be:	61fb      	str	r3, [r7, #28]
 80030c0:	e015      	b.n	80030ee <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	697a      	ldr	r2, [r7, #20]
 80030c8:	429a      	cmp	r2, r3
 80030ca:	d20b      	bcs.n	80030e4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	1ad2      	subs	r2, r2, r3
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80030d8:	6878      	ldr	r0, [r7, #4]
 80030da:	f7ff ff99 	bl	8003010 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80030de:	2300      	movs	r3, #0
 80030e0:	61fb      	str	r3, [r7, #28]
 80030e2:	e004      	b.n	80030ee <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	2200      	movs	r2, #0
 80030e8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80030ea:	2301      	movs	r3, #1
 80030ec:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80030ee:	f000 fc35 	bl	800395c <vPortExitCritical>

	return xReturn;
 80030f2:	69fb      	ldr	r3, [r7, #28]
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	3720      	adds	r7, #32
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}
 80030fc:	20000480 	.word	0x20000480
 8003100:	20000494 	.word	0x20000494

08003104 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003104:	b480      	push	{r7}
 8003106:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003108:	4b03      	ldr	r3, [pc, #12]	@ (8003118 <vTaskMissedYield+0x14>)
 800310a:	2201      	movs	r2, #1
 800310c:	601a      	str	r2, [r3, #0]
}
 800310e:	bf00      	nop
 8003110:	46bd      	mov	sp, r7
 8003112:	bc80      	pop	{r7}
 8003114:	4770      	bx	lr
 8003116:	bf00      	nop
 8003118:	20000490 	.word	0x20000490

0800311c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b082      	sub	sp, #8
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003124:	f000 f852 	bl	80031cc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003128:	4b06      	ldr	r3, [pc, #24]	@ (8003144 <prvIdleTask+0x28>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	2b01      	cmp	r3, #1
 800312e:	d9f9      	bls.n	8003124 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003130:	4b05      	ldr	r3, [pc, #20]	@ (8003148 <prvIdleTask+0x2c>)
 8003132:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003136:	601a      	str	r2, [r3, #0]
 8003138:	f3bf 8f4f 	dsb	sy
 800313c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003140:	e7f0      	b.n	8003124 <prvIdleTask+0x8>
 8003142:	bf00      	nop
 8003144:	20000380 	.word	0x20000380
 8003148:	e000ed04 	.word	0xe000ed04

0800314c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b082      	sub	sp, #8
 8003150:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003152:	2300      	movs	r3, #0
 8003154:	607b      	str	r3, [r7, #4]
 8003156:	e00c      	b.n	8003172 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003158:	687a      	ldr	r2, [r7, #4]
 800315a:	4613      	mov	r3, r2
 800315c:	009b      	lsls	r3, r3, #2
 800315e:	4413      	add	r3, r2
 8003160:	009b      	lsls	r3, r3, #2
 8003162:	4a12      	ldr	r2, [pc, #72]	@ (80031ac <prvInitialiseTaskLists+0x60>)
 8003164:	4413      	add	r3, r2
 8003166:	4618      	mov	r0, r3
 8003168:	f7fe fd1c 	bl	8001ba4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	3301      	adds	r3, #1
 8003170:	607b      	str	r3, [r7, #4]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2b06      	cmp	r3, #6
 8003176:	d9ef      	bls.n	8003158 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003178:	480d      	ldr	r0, [pc, #52]	@ (80031b0 <prvInitialiseTaskLists+0x64>)
 800317a:	f7fe fd13 	bl	8001ba4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800317e:	480d      	ldr	r0, [pc, #52]	@ (80031b4 <prvInitialiseTaskLists+0x68>)
 8003180:	f7fe fd10 	bl	8001ba4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003184:	480c      	ldr	r0, [pc, #48]	@ (80031b8 <prvInitialiseTaskLists+0x6c>)
 8003186:	f7fe fd0d 	bl	8001ba4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800318a:	480c      	ldr	r0, [pc, #48]	@ (80031bc <prvInitialiseTaskLists+0x70>)
 800318c:	f7fe fd0a 	bl	8001ba4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003190:	480b      	ldr	r0, [pc, #44]	@ (80031c0 <prvInitialiseTaskLists+0x74>)
 8003192:	f7fe fd07 	bl	8001ba4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003196:	4b0b      	ldr	r3, [pc, #44]	@ (80031c4 <prvInitialiseTaskLists+0x78>)
 8003198:	4a05      	ldr	r2, [pc, #20]	@ (80031b0 <prvInitialiseTaskLists+0x64>)
 800319a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800319c:	4b0a      	ldr	r3, [pc, #40]	@ (80031c8 <prvInitialiseTaskLists+0x7c>)
 800319e:	4a05      	ldr	r2, [pc, #20]	@ (80031b4 <prvInitialiseTaskLists+0x68>)
 80031a0:	601a      	str	r2, [r3, #0]
}
 80031a2:	bf00      	nop
 80031a4:	3708      	adds	r7, #8
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}
 80031aa:	bf00      	nop
 80031ac:	20000380 	.word	0x20000380
 80031b0:	2000040c 	.word	0x2000040c
 80031b4:	20000420 	.word	0x20000420
 80031b8:	2000043c 	.word	0x2000043c
 80031bc:	20000450 	.word	0x20000450
 80031c0:	20000468 	.word	0x20000468
 80031c4:	20000434 	.word	0x20000434
 80031c8:	20000438 	.word	0x20000438

080031cc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b082      	sub	sp, #8
 80031d0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80031d2:	e019      	b.n	8003208 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80031d4:	f000 fb92 	bl	80038fc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80031d8:	4b10      	ldr	r3, [pc, #64]	@ (800321c <prvCheckTasksWaitingTermination+0x50>)
 80031da:	68db      	ldr	r3, [r3, #12]
 80031dc:	68db      	ldr	r3, [r3, #12]
 80031de:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	3304      	adds	r3, #4
 80031e4:	4618      	mov	r0, r3
 80031e6:	f7fe fd63 	bl	8001cb0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80031ea:	4b0d      	ldr	r3, [pc, #52]	@ (8003220 <prvCheckTasksWaitingTermination+0x54>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	3b01      	subs	r3, #1
 80031f0:	4a0b      	ldr	r2, [pc, #44]	@ (8003220 <prvCheckTasksWaitingTermination+0x54>)
 80031f2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80031f4:	4b0b      	ldr	r3, [pc, #44]	@ (8003224 <prvCheckTasksWaitingTermination+0x58>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	3b01      	subs	r3, #1
 80031fa:	4a0a      	ldr	r2, [pc, #40]	@ (8003224 <prvCheckTasksWaitingTermination+0x58>)
 80031fc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80031fe:	f000 fbad 	bl	800395c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f000 f810 	bl	8003228 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003208:	4b06      	ldr	r3, [pc, #24]	@ (8003224 <prvCheckTasksWaitingTermination+0x58>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d1e1      	bne.n	80031d4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003210:	bf00      	nop
 8003212:	bf00      	nop
 8003214:	3708      	adds	r7, #8
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}
 800321a:	bf00      	nop
 800321c:	20000450 	.word	0x20000450
 8003220:	2000047c 	.word	0x2000047c
 8003224:	20000464 	.word	0x20000464

08003228 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003228:	b580      	push	{r7, lr}
 800322a:	b084      	sub	sp, #16
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	334c      	adds	r3, #76	@ 0x4c
 8003234:	4618      	mov	r0, r3
 8003236:	f000 fe57 	bl	8003ee8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8003240:	2b00      	cmp	r3, #0
 8003242:	d108      	bne.n	8003256 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003248:	4618      	mov	r0, r3
 800324a:	f000 fd27 	bl	8003c9c <vPortFree>
				vPortFree( pxTCB );
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	f000 fd24 	bl	8003c9c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003254:	e019      	b.n	800328a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800325c:	2b01      	cmp	r3, #1
 800325e:	d103      	bne.n	8003268 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8003260:	6878      	ldr	r0, [r7, #4]
 8003262:	f000 fd1b 	bl	8003c9c <vPortFree>
	}
 8003266:	e010      	b.n	800328a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800326e:	2b02      	cmp	r3, #2
 8003270:	d00b      	beq.n	800328a <prvDeleteTCB+0x62>
	__asm volatile
 8003272:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003276:	f383 8811 	msr	BASEPRI, r3
 800327a:	f3bf 8f6f 	isb	sy
 800327e:	f3bf 8f4f 	dsb	sy
 8003282:	60fb      	str	r3, [r7, #12]
}
 8003284:	bf00      	nop
 8003286:	bf00      	nop
 8003288:	e7fd      	b.n	8003286 <prvDeleteTCB+0x5e>
	}
 800328a:	bf00      	nop
 800328c:	3710      	adds	r7, #16
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}
	...

08003294 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003294:	b480      	push	{r7}
 8003296:	b083      	sub	sp, #12
 8003298:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800329a:	4b0c      	ldr	r3, [pc, #48]	@ (80032cc <prvResetNextTaskUnblockTime+0x38>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d104      	bne.n	80032ae <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80032a4:	4b0a      	ldr	r3, [pc, #40]	@ (80032d0 <prvResetNextTaskUnblockTime+0x3c>)
 80032a6:	f04f 32ff 	mov.w	r2, #4294967295
 80032aa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80032ac:	e008      	b.n	80032c0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80032ae:	4b07      	ldr	r3, [pc, #28]	@ (80032cc <prvResetNextTaskUnblockTime+0x38>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	68db      	ldr	r3, [r3, #12]
 80032b4:	68db      	ldr	r3, [r3, #12]
 80032b6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	4a04      	ldr	r2, [pc, #16]	@ (80032d0 <prvResetNextTaskUnblockTime+0x3c>)
 80032be:	6013      	str	r3, [r2, #0]
}
 80032c0:	bf00      	nop
 80032c2:	370c      	adds	r7, #12
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bc80      	pop	{r7}
 80032c8:	4770      	bx	lr
 80032ca:	bf00      	nop
 80032cc:	20000434 	.word	0x20000434
 80032d0:	2000049c 	.word	0x2000049c

080032d4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80032d4:	b480      	push	{r7}
 80032d6:	b083      	sub	sp, #12
 80032d8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80032da:	4b0b      	ldr	r3, [pc, #44]	@ (8003308 <xTaskGetSchedulerState+0x34>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d102      	bne.n	80032e8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80032e2:	2301      	movs	r3, #1
 80032e4:	607b      	str	r3, [r7, #4]
 80032e6:	e008      	b.n	80032fa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80032e8:	4b08      	ldr	r3, [pc, #32]	@ (800330c <xTaskGetSchedulerState+0x38>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d102      	bne.n	80032f6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80032f0:	2302      	movs	r3, #2
 80032f2:	607b      	str	r3, [r7, #4]
 80032f4:	e001      	b.n	80032fa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80032f6:	2300      	movs	r3, #0
 80032f8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80032fa:	687b      	ldr	r3, [r7, #4]
	}
 80032fc:	4618      	mov	r0, r3
 80032fe:	370c      	adds	r7, #12
 8003300:	46bd      	mov	sp, r7
 8003302:	bc80      	pop	{r7}
 8003304:	4770      	bx	lr
 8003306:	bf00      	nop
 8003308:	20000488 	.word	0x20000488
 800330c:	200004a4 	.word	0x200004a4

08003310 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8003310:	b580      	push	{r7, lr}
 8003312:	b084      	sub	sp, #16
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800331c:	2300      	movs	r3, #0
 800331e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d05e      	beq.n	80033e4 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800332a:	4b31      	ldr	r3, [pc, #196]	@ (80033f0 <xTaskPriorityInherit+0xe0>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003330:	429a      	cmp	r2, r3
 8003332:	d24e      	bcs.n	80033d2 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	699b      	ldr	r3, [r3, #24]
 8003338:	2b00      	cmp	r3, #0
 800333a:	db06      	blt.n	800334a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800333c:	4b2c      	ldr	r3, [pc, #176]	@ (80033f0 <xTaskPriorityInherit+0xe0>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003342:	f1c3 0207 	rsb	r2, r3, #7
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	6959      	ldr	r1, [r3, #20]
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003352:	4613      	mov	r3, r2
 8003354:	009b      	lsls	r3, r3, #2
 8003356:	4413      	add	r3, r2
 8003358:	009b      	lsls	r3, r3, #2
 800335a:	4a26      	ldr	r2, [pc, #152]	@ (80033f4 <xTaskPriorityInherit+0xe4>)
 800335c:	4413      	add	r3, r2
 800335e:	4299      	cmp	r1, r3
 8003360:	d12f      	bne.n	80033c2 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	3304      	adds	r3, #4
 8003366:	4618      	mov	r0, r3
 8003368:	f7fe fca2 	bl	8001cb0 <uxListRemove>
 800336c:	4603      	mov	r3, r0
 800336e:	2b00      	cmp	r3, #0
 8003370:	d10a      	bne.n	8003388 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003376:	2201      	movs	r2, #1
 8003378:	fa02 f303 	lsl.w	r3, r2, r3
 800337c:	43da      	mvns	r2, r3
 800337e:	4b1e      	ldr	r3, [pc, #120]	@ (80033f8 <xTaskPriorityInherit+0xe8>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4013      	ands	r3, r2
 8003384:	4a1c      	ldr	r2, [pc, #112]	@ (80033f8 <xTaskPriorityInherit+0xe8>)
 8003386:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003388:	4b19      	ldr	r3, [pc, #100]	@ (80033f0 <xTaskPriorityInherit+0xe0>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003396:	2201      	movs	r2, #1
 8003398:	409a      	lsls	r2, r3
 800339a:	4b17      	ldr	r3, [pc, #92]	@ (80033f8 <xTaskPriorityInherit+0xe8>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4313      	orrs	r3, r2
 80033a0:	4a15      	ldr	r2, [pc, #84]	@ (80033f8 <xTaskPriorityInherit+0xe8>)
 80033a2:	6013      	str	r3, [r2, #0]
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033a8:	4613      	mov	r3, r2
 80033aa:	009b      	lsls	r3, r3, #2
 80033ac:	4413      	add	r3, r2
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	4a10      	ldr	r2, [pc, #64]	@ (80033f4 <xTaskPriorityInherit+0xe4>)
 80033b2:	441a      	add	r2, r3
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	3304      	adds	r3, #4
 80033b8:	4619      	mov	r1, r3
 80033ba:	4610      	mov	r0, r2
 80033bc:	f7fe fc1d 	bl	8001bfa <vListInsertEnd>
 80033c0:	e004      	b.n	80033cc <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80033c2:	4b0b      	ldr	r3, [pc, #44]	@ (80033f0 <xTaskPriorityInherit+0xe0>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80033cc:	2301      	movs	r3, #1
 80033ce:	60fb      	str	r3, [r7, #12]
 80033d0:	e008      	b.n	80033e4 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80033d6:	4b06      	ldr	r3, [pc, #24]	@ (80033f0 <xTaskPriorityInherit+0xe0>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033dc:	429a      	cmp	r2, r3
 80033de:	d201      	bcs.n	80033e4 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80033e0:	2301      	movs	r3, #1
 80033e2:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80033e4:	68fb      	ldr	r3, [r7, #12]
	}
 80033e6:	4618      	mov	r0, r3
 80033e8:	3710      	adds	r7, #16
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}
 80033ee:	bf00      	nop
 80033f0:	2000037c 	.word	0x2000037c
 80033f4:	20000380 	.word	0x20000380
 80033f8:	20000484 	.word	0x20000484

080033fc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b086      	sub	sp, #24
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003408:	2300      	movs	r3, #0
 800340a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d070      	beq.n	80034f4 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003412:	4b3b      	ldr	r3, [pc, #236]	@ (8003500 <xTaskPriorityDisinherit+0x104>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	693a      	ldr	r2, [r7, #16]
 8003418:	429a      	cmp	r2, r3
 800341a:	d00b      	beq.n	8003434 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800341c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003420:	f383 8811 	msr	BASEPRI, r3
 8003424:	f3bf 8f6f 	isb	sy
 8003428:	f3bf 8f4f 	dsb	sy
 800342c:	60fb      	str	r3, [r7, #12]
}
 800342e:	bf00      	nop
 8003430:	bf00      	nop
 8003432:	e7fd      	b.n	8003430 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003438:	2b00      	cmp	r3, #0
 800343a:	d10b      	bne.n	8003454 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800343c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003440:	f383 8811 	msr	BASEPRI, r3
 8003444:	f3bf 8f6f 	isb	sy
 8003448:	f3bf 8f4f 	dsb	sy
 800344c:	60bb      	str	r3, [r7, #8]
}
 800344e:	bf00      	nop
 8003450:	bf00      	nop
 8003452:	e7fd      	b.n	8003450 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003458:	1e5a      	subs	r2, r3, #1
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003466:	429a      	cmp	r2, r3
 8003468:	d044      	beq.n	80034f4 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800346e:	2b00      	cmp	r3, #0
 8003470:	d140      	bne.n	80034f4 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	3304      	adds	r3, #4
 8003476:	4618      	mov	r0, r3
 8003478:	f7fe fc1a 	bl	8001cb0 <uxListRemove>
 800347c:	4603      	mov	r3, r0
 800347e:	2b00      	cmp	r3, #0
 8003480:	d115      	bne.n	80034ae <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003486:	491f      	ldr	r1, [pc, #124]	@ (8003504 <xTaskPriorityDisinherit+0x108>)
 8003488:	4613      	mov	r3, r2
 800348a:	009b      	lsls	r3, r3, #2
 800348c:	4413      	add	r3, r2
 800348e:	009b      	lsls	r3, r3, #2
 8003490:	440b      	add	r3, r1
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d10a      	bne.n	80034ae <xTaskPriorityDisinherit+0xb2>
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800349c:	2201      	movs	r2, #1
 800349e:	fa02 f303 	lsl.w	r3, r2, r3
 80034a2:	43da      	mvns	r2, r3
 80034a4:	4b18      	ldr	r3, [pc, #96]	@ (8003508 <xTaskPriorityDisinherit+0x10c>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4013      	ands	r3, r2
 80034aa:	4a17      	ldr	r2, [pc, #92]	@ (8003508 <xTaskPriorityDisinherit+0x10c>)
 80034ac:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034ba:	f1c3 0207 	rsb	r2, r3, #7
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034c6:	2201      	movs	r2, #1
 80034c8:	409a      	lsls	r2, r3
 80034ca:	4b0f      	ldr	r3, [pc, #60]	@ (8003508 <xTaskPriorityDisinherit+0x10c>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4313      	orrs	r3, r2
 80034d0:	4a0d      	ldr	r2, [pc, #52]	@ (8003508 <xTaskPriorityDisinherit+0x10c>)
 80034d2:	6013      	str	r3, [r2, #0]
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034d8:	4613      	mov	r3, r2
 80034da:	009b      	lsls	r3, r3, #2
 80034dc:	4413      	add	r3, r2
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	4a08      	ldr	r2, [pc, #32]	@ (8003504 <xTaskPriorityDisinherit+0x108>)
 80034e2:	441a      	add	r2, r3
 80034e4:	693b      	ldr	r3, [r7, #16]
 80034e6:	3304      	adds	r3, #4
 80034e8:	4619      	mov	r1, r3
 80034ea:	4610      	mov	r0, r2
 80034ec:	f7fe fb85 	bl	8001bfa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80034f0:	2301      	movs	r3, #1
 80034f2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80034f4:	697b      	ldr	r3, [r7, #20]
	}
 80034f6:	4618      	mov	r0, r3
 80034f8:	3718      	adds	r7, #24
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}
 80034fe:	bf00      	nop
 8003500:	2000037c 	.word	0x2000037c
 8003504:	20000380 	.word	0x20000380
 8003508:	20000484 	.word	0x20000484

0800350c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800350c:	b580      	push	{r7, lr}
 800350e:	b088      	sub	sp, #32
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
 8003514:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800351a:	2301      	movs	r3, #1
 800351c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d079      	beq.n	8003618 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8003524:	69bb      	ldr	r3, [r7, #24]
 8003526:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003528:	2b00      	cmp	r3, #0
 800352a:	d10b      	bne.n	8003544 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800352c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003530:	f383 8811 	msr	BASEPRI, r3
 8003534:	f3bf 8f6f 	isb	sy
 8003538:	f3bf 8f4f 	dsb	sy
 800353c:	60fb      	str	r3, [r7, #12]
}
 800353e:	bf00      	nop
 8003540:	bf00      	nop
 8003542:	e7fd      	b.n	8003540 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8003544:	69bb      	ldr	r3, [r7, #24]
 8003546:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003548:	683a      	ldr	r2, [r7, #0]
 800354a:	429a      	cmp	r2, r3
 800354c:	d902      	bls.n	8003554 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	61fb      	str	r3, [r7, #28]
 8003552:	e002      	b.n	800355a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8003554:	69bb      	ldr	r3, [r7, #24]
 8003556:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003558:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800355a:	69bb      	ldr	r3, [r7, #24]
 800355c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800355e:	69fa      	ldr	r2, [r7, #28]
 8003560:	429a      	cmp	r2, r3
 8003562:	d059      	beq.n	8003618 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8003564:	69bb      	ldr	r3, [r7, #24]
 8003566:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003568:	697a      	ldr	r2, [r7, #20]
 800356a:	429a      	cmp	r2, r3
 800356c:	d154      	bne.n	8003618 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800356e:	4b2c      	ldr	r3, [pc, #176]	@ (8003620 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	69ba      	ldr	r2, [r7, #24]
 8003574:	429a      	cmp	r2, r3
 8003576:	d10b      	bne.n	8003590 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8003578:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800357c:	f383 8811 	msr	BASEPRI, r3
 8003580:	f3bf 8f6f 	isb	sy
 8003584:	f3bf 8f4f 	dsb	sy
 8003588:	60bb      	str	r3, [r7, #8]
}
 800358a:	bf00      	nop
 800358c:	bf00      	nop
 800358e:	e7fd      	b.n	800358c <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8003590:	69bb      	ldr	r3, [r7, #24]
 8003592:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003594:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8003596:	69bb      	ldr	r3, [r7, #24]
 8003598:	69fa      	ldr	r2, [r7, #28]
 800359a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800359c:	69bb      	ldr	r3, [r7, #24]
 800359e:	699b      	ldr	r3, [r3, #24]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	db04      	blt.n	80035ae <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80035a4:	69fb      	ldr	r3, [r7, #28]
 80035a6:	f1c3 0207 	rsb	r2, r3, #7
 80035aa:	69bb      	ldr	r3, [r7, #24]
 80035ac:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80035ae:	69bb      	ldr	r3, [r7, #24]
 80035b0:	6959      	ldr	r1, [r3, #20]
 80035b2:	693a      	ldr	r2, [r7, #16]
 80035b4:	4613      	mov	r3, r2
 80035b6:	009b      	lsls	r3, r3, #2
 80035b8:	4413      	add	r3, r2
 80035ba:	009b      	lsls	r3, r3, #2
 80035bc:	4a19      	ldr	r2, [pc, #100]	@ (8003624 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80035be:	4413      	add	r3, r2
 80035c0:	4299      	cmp	r1, r3
 80035c2:	d129      	bne.n	8003618 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80035c4:	69bb      	ldr	r3, [r7, #24]
 80035c6:	3304      	adds	r3, #4
 80035c8:	4618      	mov	r0, r3
 80035ca:	f7fe fb71 	bl	8001cb0 <uxListRemove>
 80035ce:	4603      	mov	r3, r0
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d10a      	bne.n	80035ea <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80035d4:	69bb      	ldr	r3, [r7, #24]
 80035d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035d8:	2201      	movs	r2, #1
 80035da:	fa02 f303 	lsl.w	r3, r2, r3
 80035de:	43da      	mvns	r2, r3
 80035e0:	4b11      	ldr	r3, [pc, #68]	@ (8003628 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4013      	ands	r3, r2
 80035e6:	4a10      	ldr	r2, [pc, #64]	@ (8003628 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80035e8:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80035ea:	69bb      	ldr	r3, [r7, #24]
 80035ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035ee:	2201      	movs	r2, #1
 80035f0:	409a      	lsls	r2, r3
 80035f2:	4b0d      	ldr	r3, [pc, #52]	@ (8003628 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4313      	orrs	r3, r2
 80035f8:	4a0b      	ldr	r2, [pc, #44]	@ (8003628 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80035fa:	6013      	str	r3, [r2, #0]
 80035fc:	69bb      	ldr	r3, [r7, #24]
 80035fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003600:	4613      	mov	r3, r2
 8003602:	009b      	lsls	r3, r3, #2
 8003604:	4413      	add	r3, r2
 8003606:	009b      	lsls	r3, r3, #2
 8003608:	4a06      	ldr	r2, [pc, #24]	@ (8003624 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800360a:	441a      	add	r2, r3
 800360c:	69bb      	ldr	r3, [r7, #24]
 800360e:	3304      	adds	r3, #4
 8003610:	4619      	mov	r1, r3
 8003612:	4610      	mov	r0, r2
 8003614:	f7fe faf1 	bl	8001bfa <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003618:	bf00      	nop
 800361a:	3720      	adds	r7, #32
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}
 8003620:	2000037c 	.word	0x2000037c
 8003624:	20000380 	.word	0x20000380
 8003628:	20000484 	.word	0x20000484

0800362c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800362c:	b480      	push	{r7}
 800362e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8003630:	4b07      	ldr	r3, [pc, #28]	@ (8003650 <pvTaskIncrementMutexHeldCount+0x24>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d004      	beq.n	8003642 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8003638:	4b05      	ldr	r3, [pc, #20]	@ (8003650 <pvTaskIncrementMutexHeldCount+0x24>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800363e:	3201      	adds	r2, #1
 8003640:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 8003642:	4b03      	ldr	r3, [pc, #12]	@ (8003650 <pvTaskIncrementMutexHeldCount+0x24>)
 8003644:	681b      	ldr	r3, [r3, #0]
	}
 8003646:	4618      	mov	r0, r3
 8003648:	46bd      	mov	sp, r7
 800364a:	bc80      	pop	{r7}
 800364c:	4770      	bx	lr
 800364e:	bf00      	nop
 8003650:	2000037c 	.word	0x2000037c

08003654 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b084      	sub	sp, #16
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
 800365c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800365e:	4b29      	ldr	r3, [pc, #164]	@ (8003704 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003664:	4b28      	ldr	r3, [pc, #160]	@ (8003708 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	3304      	adds	r3, #4
 800366a:	4618      	mov	r0, r3
 800366c:	f7fe fb20 	bl	8001cb0 <uxListRemove>
 8003670:	4603      	mov	r3, r0
 8003672:	2b00      	cmp	r3, #0
 8003674:	d10b      	bne.n	800368e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003676:	4b24      	ldr	r3, [pc, #144]	@ (8003708 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800367c:	2201      	movs	r2, #1
 800367e:	fa02 f303 	lsl.w	r3, r2, r3
 8003682:	43da      	mvns	r2, r3
 8003684:	4b21      	ldr	r3, [pc, #132]	@ (800370c <prvAddCurrentTaskToDelayedList+0xb8>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4013      	ands	r3, r2
 800368a:	4a20      	ldr	r2, [pc, #128]	@ (800370c <prvAddCurrentTaskToDelayedList+0xb8>)
 800368c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003694:	d10a      	bne.n	80036ac <prvAddCurrentTaskToDelayedList+0x58>
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d007      	beq.n	80036ac <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800369c:	4b1a      	ldr	r3, [pc, #104]	@ (8003708 <prvAddCurrentTaskToDelayedList+0xb4>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	3304      	adds	r3, #4
 80036a2:	4619      	mov	r1, r3
 80036a4:	481a      	ldr	r0, [pc, #104]	@ (8003710 <prvAddCurrentTaskToDelayedList+0xbc>)
 80036a6:	f7fe faa8 	bl	8001bfa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80036aa:	e026      	b.n	80036fa <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80036ac:	68fa      	ldr	r2, [r7, #12]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	4413      	add	r3, r2
 80036b2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80036b4:	4b14      	ldr	r3, [pc, #80]	@ (8003708 <prvAddCurrentTaskToDelayedList+0xb4>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	68ba      	ldr	r2, [r7, #8]
 80036ba:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80036bc:	68ba      	ldr	r2, [r7, #8]
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d209      	bcs.n	80036d8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80036c4:	4b13      	ldr	r3, [pc, #76]	@ (8003714 <prvAddCurrentTaskToDelayedList+0xc0>)
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	4b0f      	ldr	r3, [pc, #60]	@ (8003708 <prvAddCurrentTaskToDelayedList+0xb4>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	3304      	adds	r3, #4
 80036ce:	4619      	mov	r1, r3
 80036d0:	4610      	mov	r0, r2
 80036d2:	f7fe fab5 	bl	8001c40 <vListInsert>
}
 80036d6:	e010      	b.n	80036fa <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80036d8:	4b0f      	ldr	r3, [pc, #60]	@ (8003718 <prvAddCurrentTaskToDelayedList+0xc4>)
 80036da:	681a      	ldr	r2, [r3, #0]
 80036dc:	4b0a      	ldr	r3, [pc, #40]	@ (8003708 <prvAddCurrentTaskToDelayedList+0xb4>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	3304      	adds	r3, #4
 80036e2:	4619      	mov	r1, r3
 80036e4:	4610      	mov	r0, r2
 80036e6:	f7fe faab 	bl	8001c40 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80036ea:	4b0c      	ldr	r3, [pc, #48]	@ (800371c <prvAddCurrentTaskToDelayedList+0xc8>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	68ba      	ldr	r2, [r7, #8]
 80036f0:	429a      	cmp	r2, r3
 80036f2:	d202      	bcs.n	80036fa <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80036f4:	4a09      	ldr	r2, [pc, #36]	@ (800371c <prvAddCurrentTaskToDelayedList+0xc8>)
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	6013      	str	r3, [r2, #0]
}
 80036fa:	bf00      	nop
 80036fc:	3710      	adds	r7, #16
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}
 8003702:	bf00      	nop
 8003704:	20000480 	.word	0x20000480
 8003708:	2000037c 	.word	0x2000037c
 800370c:	20000484 	.word	0x20000484
 8003710:	20000468 	.word	0x20000468
 8003714:	20000438 	.word	0x20000438
 8003718:	20000434 	.word	0x20000434
 800371c:	2000049c 	.word	0x2000049c

08003720 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003720:	b480      	push	{r7}
 8003722:	b085      	sub	sp, #20
 8003724:	af00      	add	r7, sp, #0
 8003726:	60f8      	str	r0, [r7, #12]
 8003728:	60b9      	str	r1, [r7, #8]
 800372a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	3b04      	subs	r3, #4
 8003730:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003738:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	3b04      	subs	r3, #4
 800373e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	f023 0201 	bic.w	r2, r3, #1
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	3b04      	subs	r3, #4
 800374e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003750:	4a08      	ldr	r2, [pc, #32]	@ (8003774 <pxPortInitialiseStack+0x54>)
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	3b14      	subs	r3, #20
 800375a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800375c:	687a      	ldr	r2, [r7, #4]
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	3b20      	subs	r3, #32
 8003766:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003768:	68fb      	ldr	r3, [r7, #12]
}
 800376a:	4618      	mov	r0, r3
 800376c:	3714      	adds	r7, #20
 800376e:	46bd      	mov	sp, r7
 8003770:	bc80      	pop	{r7}
 8003772:	4770      	bx	lr
 8003774:	08003779 	.word	0x08003779

08003778 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003778:	b480      	push	{r7}
 800377a:	b085      	sub	sp, #20
 800377c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800377e:	2300      	movs	r3, #0
 8003780:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003782:	4b12      	ldr	r3, [pc, #72]	@ (80037cc <prvTaskExitError+0x54>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f1b3 3fff 	cmp.w	r3, #4294967295
 800378a:	d00b      	beq.n	80037a4 <prvTaskExitError+0x2c>
	__asm volatile
 800378c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003790:	f383 8811 	msr	BASEPRI, r3
 8003794:	f3bf 8f6f 	isb	sy
 8003798:	f3bf 8f4f 	dsb	sy
 800379c:	60fb      	str	r3, [r7, #12]
}
 800379e:	bf00      	nop
 80037a0:	bf00      	nop
 80037a2:	e7fd      	b.n	80037a0 <prvTaskExitError+0x28>
	__asm volatile
 80037a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037a8:	f383 8811 	msr	BASEPRI, r3
 80037ac:	f3bf 8f6f 	isb	sy
 80037b0:	f3bf 8f4f 	dsb	sy
 80037b4:	60bb      	str	r3, [r7, #8]
}
 80037b6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80037b8:	bf00      	nop
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d0fc      	beq.n	80037ba <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80037c0:	bf00      	nop
 80037c2:	bf00      	nop
 80037c4:	3714      	adds	r7, #20
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bc80      	pop	{r7}
 80037ca:	4770      	bx	lr
 80037cc:	2000000c 	.word	0x2000000c

080037d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80037d0:	4b07      	ldr	r3, [pc, #28]	@ (80037f0 <pxCurrentTCBConst2>)
 80037d2:	6819      	ldr	r1, [r3, #0]
 80037d4:	6808      	ldr	r0, [r1, #0]
 80037d6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80037da:	f380 8809 	msr	PSP, r0
 80037de:	f3bf 8f6f 	isb	sy
 80037e2:	f04f 0000 	mov.w	r0, #0
 80037e6:	f380 8811 	msr	BASEPRI, r0
 80037ea:	f04e 0e0d 	orr.w	lr, lr, #13
 80037ee:	4770      	bx	lr

080037f0 <pxCurrentTCBConst2>:
 80037f0:	2000037c 	.word	0x2000037c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80037f4:	bf00      	nop
 80037f6:	bf00      	nop

080037f8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80037f8:	4806      	ldr	r0, [pc, #24]	@ (8003814 <prvPortStartFirstTask+0x1c>)
 80037fa:	6800      	ldr	r0, [r0, #0]
 80037fc:	6800      	ldr	r0, [r0, #0]
 80037fe:	f380 8808 	msr	MSP, r0
 8003802:	b662      	cpsie	i
 8003804:	b661      	cpsie	f
 8003806:	f3bf 8f4f 	dsb	sy
 800380a:	f3bf 8f6f 	isb	sy
 800380e:	df00      	svc	0
 8003810:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003812:	bf00      	nop
 8003814:	e000ed08 	.word	0xe000ed08

08003818 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b084      	sub	sp, #16
 800381c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800381e:	4b32      	ldr	r3, [pc, #200]	@ (80038e8 <xPortStartScheduler+0xd0>)
 8003820:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	781b      	ldrb	r3, [r3, #0]
 8003826:	b2db      	uxtb	r3, r3
 8003828:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	22ff      	movs	r2, #255	@ 0xff
 800382e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	781b      	ldrb	r3, [r3, #0]
 8003834:	b2db      	uxtb	r3, r3
 8003836:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003838:	78fb      	ldrb	r3, [r7, #3]
 800383a:	b2db      	uxtb	r3, r3
 800383c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003840:	b2da      	uxtb	r2, r3
 8003842:	4b2a      	ldr	r3, [pc, #168]	@ (80038ec <xPortStartScheduler+0xd4>)
 8003844:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003846:	4b2a      	ldr	r3, [pc, #168]	@ (80038f0 <xPortStartScheduler+0xd8>)
 8003848:	2207      	movs	r2, #7
 800384a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800384c:	e009      	b.n	8003862 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800384e:	4b28      	ldr	r3, [pc, #160]	@ (80038f0 <xPortStartScheduler+0xd8>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	3b01      	subs	r3, #1
 8003854:	4a26      	ldr	r2, [pc, #152]	@ (80038f0 <xPortStartScheduler+0xd8>)
 8003856:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003858:	78fb      	ldrb	r3, [r7, #3]
 800385a:	b2db      	uxtb	r3, r3
 800385c:	005b      	lsls	r3, r3, #1
 800385e:	b2db      	uxtb	r3, r3
 8003860:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003862:	78fb      	ldrb	r3, [r7, #3]
 8003864:	b2db      	uxtb	r3, r3
 8003866:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800386a:	2b80      	cmp	r3, #128	@ 0x80
 800386c:	d0ef      	beq.n	800384e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800386e:	4b20      	ldr	r3, [pc, #128]	@ (80038f0 <xPortStartScheduler+0xd8>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f1c3 0307 	rsb	r3, r3, #7
 8003876:	2b04      	cmp	r3, #4
 8003878:	d00b      	beq.n	8003892 <xPortStartScheduler+0x7a>
	__asm volatile
 800387a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800387e:	f383 8811 	msr	BASEPRI, r3
 8003882:	f3bf 8f6f 	isb	sy
 8003886:	f3bf 8f4f 	dsb	sy
 800388a:	60bb      	str	r3, [r7, #8]
}
 800388c:	bf00      	nop
 800388e:	bf00      	nop
 8003890:	e7fd      	b.n	800388e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003892:	4b17      	ldr	r3, [pc, #92]	@ (80038f0 <xPortStartScheduler+0xd8>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	021b      	lsls	r3, r3, #8
 8003898:	4a15      	ldr	r2, [pc, #84]	@ (80038f0 <xPortStartScheduler+0xd8>)
 800389a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800389c:	4b14      	ldr	r3, [pc, #80]	@ (80038f0 <xPortStartScheduler+0xd8>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80038a4:	4a12      	ldr	r2, [pc, #72]	@ (80038f0 <xPortStartScheduler+0xd8>)
 80038a6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	b2da      	uxtb	r2, r3
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80038b0:	4b10      	ldr	r3, [pc, #64]	@ (80038f4 <xPortStartScheduler+0xdc>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a0f      	ldr	r2, [pc, #60]	@ (80038f4 <xPortStartScheduler+0xdc>)
 80038b6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80038ba:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80038bc:	4b0d      	ldr	r3, [pc, #52]	@ (80038f4 <xPortStartScheduler+0xdc>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a0c      	ldr	r2, [pc, #48]	@ (80038f4 <xPortStartScheduler+0xdc>)
 80038c2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80038c6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80038c8:	f000 f8b8 	bl	8003a3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80038cc:	4b0a      	ldr	r3, [pc, #40]	@ (80038f8 <xPortStartScheduler+0xe0>)
 80038ce:	2200      	movs	r2, #0
 80038d0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80038d2:	f7ff ff91 	bl	80037f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80038d6:	f7ff faaf 	bl	8002e38 <vTaskSwitchContext>
	prvTaskExitError();
 80038da:	f7ff ff4d 	bl	8003778 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80038de:	2300      	movs	r3, #0
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	3710      	adds	r7, #16
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd80      	pop	{r7, pc}
 80038e8:	e000e400 	.word	0xe000e400
 80038ec:	200004a8 	.word	0x200004a8
 80038f0:	200004ac 	.word	0x200004ac
 80038f4:	e000ed20 	.word	0xe000ed20
 80038f8:	2000000c 	.word	0x2000000c

080038fc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80038fc:	b480      	push	{r7}
 80038fe:	b083      	sub	sp, #12
 8003900:	af00      	add	r7, sp, #0
	__asm volatile
 8003902:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003906:	f383 8811 	msr	BASEPRI, r3
 800390a:	f3bf 8f6f 	isb	sy
 800390e:	f3bf 8f4f 	dsb	sy
 8003912:	607b      	str	r3, [r7, #4]
}
 8003914:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003916:	4b0f      	ldr	r3, [pc, #60]	@ (8003954 <vPortEnterCritical+0x58>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	3301      	adds	r3, #1
 800391c:	4a0d      	ldr	r2, [pc, #52]	@ (8003954 <vPortEnterCritical+0x58>)
 800391e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003920:	4b0c      	ldr	r3, [pc, #48]	@ (8003954 <vPortEnterCritical+0x58>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	2b01      	cmp	r3, #1
 8003926:	d110      	bne.n	800394a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003928:	4b0b      	ldr	r3, [pc, #44]	@ (8003958 <vPortEnterCritical+0x5c>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	b2db      	uxtb	r3, r3
 800392e:	2b00      	cmp	r3, #0
 8003930:	d00b      	beq.n	800394a <vPortEnterCritical+0x4e>
	__asm volatile
 8003932:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003936:	f383 8811 	msr	BASEPRI, r3
 800393a:	f3bf 8f6f 	isb	sy
 800393e:	f3bf 8f4f 	dsb	sy
 8003942:	603b      	str	r3, [r7, #0]
}
 8003944:	bf00      	nop
 8003946:	bf00      	nop
 8003948:	e7fd      	b.n	8003946 <vPortEnterCritical+0x4a>
	}
}
 800394a:	bf00      	nop
 800394c:	370c      	adds	r7, #12
 800394e:	46bd      	mov	sp, r7
 8003950:	bc80      	pop	{r7}
 8003952:	4770      	bx	lr
 8003954:	2000000c 	.word	0x2000000c
 8003958:	e000ed04 	.word	0xe000ed04

0800395c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800395c:	b480      	push	{r7}
 800395e:	b083      	sub	sp, #12
 8003960:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003962:	4b12      	ldr	r3, [pc, #72]	@ (80039ac <vPortExitCritical+0x50>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d10b      	bne.n	8003982 <vPortExitCritical+0x26>
	__asm volatile
 800396a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800396e:	f383 8811 	msr	BASEPRI, r3
 8003972:	f3bf 8f6f 	isb	sy
 8003976:	f3bf 8f4f 	dsb	sy
 800397a:	607b      	str	r3, [r7, #4]
}
 800397c:	bf00      	nop
 800397e:	bf00      	nop
 8003980:	e7fd      	b.n	800397e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003982:	4b0a      	ldr	r3, [pc, #40]	@ (80039ac <vPortExitCritical+0x50>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	3b01      	subs	r3, #1
 8003988:	4a08      	ldr	r2, [pc, #32]	@ (80039ac <vPortExitCritical+0x50>)
 800398a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800398c:	4b07      	ldr	r3, [pc, #28]	@ (80039ac <vPortExitCritical+0x50>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d105      	bne.n	80039a0 <vPortExitCritical+0x44>
 8003994:	2300      	movs	r3, #0
 8003996:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	f383 8811 	msr	BASEPRI, r3
}
 800399e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80039a0:	bf00      	nop
 80039a2:	370c      	adds	r7, #12
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bc80      	pop	{r7}
 80039a8:	4770      	bx	lr
 80039aa:	bf00      	nop
 80039ac:	2000000c 	.word	0x2000000c

080039b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80039b0:	f3ef 8009 	mrs	r0, PSP
 80039b4:	f3bf 8f6f 	isb	sy
 80039b8:	4b0d      	ldr	r3, [pc, #52]	@ (80039f0 <pxCurrentTCBConst>)
 80039ba:	681a      	ldr	r2, [r3, #0]
 80039bc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80039c0:	6010      	str	r0, [r2, #0]
 80039c2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80039c6:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80039ca:	f380 8811 	msr	BASEPRI, r0
 80039ce:	f7ff fa33 	bl	8002e38 <vTaskSwitchContext>
 80039d2:	f04f 0000 	mov.w	r0, #0
 80039d6:	f380 8811 	msr	BASEPRI, r0
 80039da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80039de:	6819      	ldr	r1, [r3, #0]
 80039e0:	6808      	ldr	r0, [r1, #0]
 80039e2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80039e6:	f380 8809 	msr	PSP, r0
 80039ea:	f3bf 8f6f 	isb	sy
 80039ee:	4770      	bx	lr

080039f0 <pxCurrentTCBConst>:
 80039f0:	2000037c 	.word	0x2000037c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80039f4:	bf00      	nop
 80039f6:	bf00      	nop

080039f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b082      	sub	sp, #8
 80039fc:	af00      	add	r7, sp, #0
	__asm volatile
 80039fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a02:	f383 8811 	msr	BASEPRI, r3
 8003a06:	f3bf 8f6f 	isb	sy
 8003a0a:	f3bf 8f4f 	dsb	sy
 8003a0e:	607b      	str	r3, [r7, #4]
}
 8003a10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003a12:	f7ff f957 	bl	8002cc4 <xTaskIncrementTick>
 8003a16:	4603      	mov	r3, r0
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d003      	beq.n	8003a24 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003a1c:	4b06      	ldr	r3, [pc, #24]	@ (8003a38 <SysTick_Handler+0x40>)
 8003a1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003a22:	601a      	str	r2, [r3, #0]
 8003a24:	2300      	movs	r3, #0
 8003a26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	f383 8811 	msr	BASEPRI, r3
}
 8003a2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003a30:	bf00      	nop
 8003a32:	3708      	adds	r7, #8
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd80      	pop	{r7, pc}
 8003a38:	e000ed04 	.word	0xe000ed04

08003a3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003a40:	4b0a      	ldr	r3, [pc, #40]	@ (8003a6c <vPortSetupTimerInterrupt+0x30>)
 8003a42:	2200      	movs	r2, #0
 8003a44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003a46:	4b0a      	ldr	r3, [pc, #40]	@ (8003a70 <vPortSetupTimerInterrupt+0x34>)
 8003a48:	2200      	movs	r2, #0
 8003a4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003a4c:	4b09      	ldr	r3, [pc, #36]	@ (8003a74 <vPortSetupTimerInterrupt+0x38>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a09      	ldr	r2, [pc, #36]	@ (8003a78 <vPortSetupTimerInterrupt+0x3c>)
 8003a52:	fba2 2303 	umull	r2, r3, r2, r3
 8003a56:	099b      	lsrs	r3, r3, #6
 8003a58:	4a08      	ldr	r2, [pc, #32]	@ (8003a7c <vPortSetupTimerInterrupt+0x40>)
 8003a5a:	3b01      	subs	r3, #1
 8003a5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003a5e:	4b03      	ldr	r3, [pc, #12]	@ (8003a6c <vPortSetupTimerInterrupt+0x30>)
 8003a60:	2207      	movs	r2, #7
 8003a62:	601a      	str	r2, [r3, #0]
}
 8003a64:	bf00      	nop
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bc80      	pop	{r7}
 8003a6a:	4770      	bx	lr
 8003a6c:	e000e010 	.word	0xe000e010
 8003a70:	e000e018 	.word	0xe000e018
 8003a74:	20000000 	.word	0x20000000
 8003a78:	10624dd3 	.word	0x10624dd3
 8003a7c:	e000e014 	.word	0xe000e014

08003a80 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8003a80:	b480      	push	{r7}
 8003a82:	b085      	sub	sp, #20
 8003a84:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8003a86:	f3ef 8305 	mrs	r3, IPSR
 8003a8a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	2b0f      	cmp	r3, #15
 8003a90:	d915      	bls.n	8003abe <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003a92:	4a17      	ldr	r2, [pc, #92]	@ (8003af0 <vPortValidateInterruptPriority+0x70>)
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	4413      	add	r3, r2
 8003a98:	781b      	ldrb	r3, [r3, #0]
 8003a9a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003a9c:	4b15      	ldr	r3, [pc, #84]	@ (8003af4 <vPortValidateInterruptPriority+0x74>)
 8003a9e:	781b      	ldrb	r3, [r3, #0]
 8003aa0:	7afa      	ldrb	r2, [r7, #11]
 8003aa2:	429a      	cmp	r2, r3
 8003aa4:	d20b      	bcs.n	8003abe <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8003aa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003aaa:	f383 8811 	msr	BASEPRI, r3
 8003aae:	f3bf 8f6f 	isb	sy
 8003ab2:	f3bf 8f4f 	dsb	sy
 8003ab6:	607b      	str	r3, [r7, #4]
}
 8003ab8:	bf00      	nop
 8003aba:	bf00      	nop
 8003abc:	e7fd      	b.n	8003aba <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003abe:	4b0e      	ldr	r3, [pc, #56]	@ (8003af8 <vPortValidateInterruptPriority+0x78>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003ac6:	4b0d      	ldr	r3, [pc, #52]	@ (8003afc <vPortValidateInterruptPriority+0x7c>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	429a      	cmp	r2, r3
 8003acc:	d90b      	bls.n	8003ae6 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8003ace:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ad2:	f383 8811 	msr	BASEPRI, r3
 8003ad6:	f3bf 8f6f 	isb	sy
 8003ada:	f3bf 8f4f 	dsb	sy
 8003ade:	603b      	str	r3, [r7, #0]
}
 8003ae0:	bf00      	nop
 8003ae2:	bf00      	nop
 8003ae4:	e7fd      	b.n	8003ae2 <vPortValidateInterruptPriority+0x62>
	}
 8003ae6:	bf00      	nop
 8003ae8:	3714      	adds	r7, #20
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bc80      	pop	{r7}
 8003aee:	4770      	bx	lr
 8003af0:	e000e3f0 	.word	0xe000e3f0
 8003af4:	200004a8 	.word	0x200004a8
 8003af8:	e000ed0c 	.word	0xe000ed0c
 8003afc:	200004ac 	.word	0x200004ac

08003b00 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b08a      	sub	sp, #40	@ 0x28
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003b0c:	f7ff f82e 	bl	8002b6c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003b10:	4b5c      	ldr	r3, [pc, #368]	@ (8003c84 <pvPortMalloc+0x184>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d101      	bne.n	8003b1c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003b18:	f000 f924 	bl	8003d64 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003b1c:	4b5a      	ldr	r3, [pc, #360]	@ (8003c88 <pvPortMalloc+0x188>)
 8003b1e:	681a      	ldr	r2, [r3, #0]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	4013      	ands	r3, r2
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	f040 8095 	bne.w	8003c54 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d01e      	beq.n	8003b6e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8003b30:	2208      	movs	r2, #8
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	4413      	add	r3, r2
 8003b36:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	f003 0307 	and.w	r3, r3, #7
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d015      	beq.n	8003b6e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	f023 0307 	bic.w	r3, r3, #7
 8003b48:	3308      	adds	r3, #8
 8003b4a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	f003 0307 	and.w	r3, r3, #7
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d00b      	beq.n	8003b6e <pvPortMalloc+0x6e>
	__asm volatile
 8003b56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b5a:	f383 8811 	msr	BASEPRI, r3
 8003b5e:	f3bf 8f6f 	isb	sy
 8003b62:	f3bf 8f4f 	dsb	sy
 8003b66:	617b      	str	r3, [r7, #20]
}
 8003b68:	bf00      	nop
 8003b6a:	bf00      	nop
 8003b6c:	e7fd      	b.n	8003b6a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d06f      	beq.n	8003c54 <pvPortMalloc+0x154>
 8003b74:	4b45      	ldr	r3, [pc, #276]	@ (8003c8c <pvPortMalloc+0x18c>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	687a      	ldr	r2, [r7, #4]
 8003b7a:	429a      	cmp	r2, r3
 8003b7c:	d86a      	bhi.n	8003c54 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003b7e:	4b44      	ldr	r3, [pc, #272]	@ (8003c90 <pvPortMalloc+0x190>)
 8003b80:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003b82:	4b43      	ldr	r3, [pc, #268]	@ (8003c90 <pvPortMalloc+0x190>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003b88:	e004      	b.n	8003b94 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8003b8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b8c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003b94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	687a      	ldr	r2, [r7, #4]
 8003b9a:	429a      	cmp	r2, r3
 8003b9c:	d903      	bls.n	8003ba6 <pvPortMalloc+0xa6>
 8003b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d1f1      	bne.n	8003b8a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003ba6:	4b37      	ldr	r3, [pc, #220]	@ (8003c84 <pvPortMalloc+0x184>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003bac:	429a      	cmp	r2, r3
 8003bae:	d051      	beq.n	8003c54 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003bb0:	6a3b      	ldr	r3, [r7, #32]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	2208      	movs	r2, #8
 8003bb6:	4413      	add	r3, r2
 8003bb8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bbc:	681a      	ldr	r2, [r3, #0]
 8003bbe:	6a3b      	ldr	r3, [r7, #32]
 8003bc0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003bc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bc4:	685a      	ldr	r2, [r3, #4]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	1ad2      	subs	r2, r2, r3
 8003bca:	2308      	movs	r3, #8
 8003bcc:	005b      	lsls	r3, r3, #1
 8003bce:	429a      	cmp	r2, r3
 8003bd0:	d920      	bls.n	8003c14 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003bd2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	4413      	add	r3, r2
 8003bd8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003bda:	69bb      	ldr	r3, [r7, #24]
 8003bdc:	f003 0307 	and.w	r3, r3, #7
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d00b      	beq.n	8003bfc <pvPortMalloc+0xfc>
	__asm volatile
 8003be4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003be8:	f383 8811 	msr	BASEPRI, r3
 8003bec:	f3bf 8f6f 	isb	sy
 8003bf0:	f3bf 8f4f 	dsb	sy
 8003bf4:	613b      	str	r3, [r7, #16]
}
 8003bf6:	bf00      	nop
 8003bf8:	bf00      	nop
 8003bfa:	e7fd      	b.n	8003bf8 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003bfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bfe:	685a      	ldr	r2, [r3, #4]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	1ad2      	subs	r2, r2, r3
 8003c04:	69bb      	ldr	r3, [r7, #24]
 8003c06:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003c08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c0a:	687a      	ldr	r2, [r7, #4]
 8003c0c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003c0e:	69b8      	ldr	r0, [r7, #24]
 8003c10:	f000 f90a 	bl	8003e28 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003c14:	4b1d      	ldr	r3, [pc, #116]	@ (8003c8c <pvPortMalloc+0x18c>)
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	1ad3      	subs	r3, r2, r3
 8003c1e:	4a1b      	ldr	r2, [pc, #108]	@ (8003c8c <pvPortMalloc+0x18c>)
 8003c20:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003c22:	4b1a      	ldr	r3, [pc, #104]	@ (8003c8c <pvPortMalloc+0x18c>)
 8003c24:	681a      	ldr	r2, [r3, #0]
 8003c26:	4b1b      	ldr	r3, [pc, #108]	@ (8003c94 <pvPortMalloc+0x194>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	429a      	cmp	r2, r3
 8003c2c:	d203      	bcs.n	8003c36 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003c2e:	4b17      	ldr	r3, [pc, #92]	@ (8003c8c <pvPortMalloc+0x18c>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a18      	ldr	r2, [pc, #96]	@ (8003c94 <pvPortMalloc+0x194>)
 8003c34:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c38:	685a      	ldr	r2, [r3, #4]
 8003c3a:	4b13      	ldr	r3, [pc, #76]	@ (8003c88 <pvPortMalloc+0x188>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	431a      	orrs	r2, r3
 8003c40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c42:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c46:	2200      	movs	r2, #0
 8003c48:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8003c4a:	4b13      	ldr	r3, [pc, #76]	@ (8003c98 <pvPortMalloc+0x198>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	3301      	adds	r3, #1
 8003c50:	4a11      	ldr	r2, [pc, #68]	@ (8003c98 <pvPortMalloc+0x198>)
 8003c52:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003c54:	f7fe ff98 	bl	8002b88 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003c58:	69fb      	ldr	r3, [r7, #28]
 8003c5a:	f003 0307 	and.w	r3, r3, #7
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d00b      	beq.n	8003c7a <pvPortMalloc+0x17a>
	__asm volatile
 8003c62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c66:	f383 8811 	msr	BASEPRI, r3
 8003c6a:	f3bf 8f6f 	isb	sy
 8003c6e:	f3bf 8f4f 	dsb	sy
 8003c72:	60fb      	str	r3, [r7, #12]
}
 8003c74:	bf00      	nop
 8003c76:	bf00      	nop
 8003c78:	e7fd      	b.n	8003c76 <pvPortMalloc+0x176>
	return pvReturn;
 8003c7a:	69fb      	ldr	r3, [r7, #28]
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	3728      	adds	r7, #40	@ 0x28
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}
 8003c84:	200010b8 	.word	0x200010b8
 8003c88:	200010cc 	.word	0x200010cc
 8003c8c:	200010bc 	.word	0x200010bc
 8003c90:	200010b0 	.word	0x200010b0
 8003c94:	200010c0 	.word	0x200010c0
 8003c98:	200010c4 	.word	0x200010c4

08003c9c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b086      	sub	sp, #24
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d04f      	beq.n	8003d4e <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003cae:	2308      	movs	r3, #8
 8003cb0:	425b      	negs	r3, r3
 8003cb2:	697a      	ldr	r2, [r7, #20]
 8003cb4:	4413      	add	r3, r2
 8003cb6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	685a      	ldr	r2, [r3, #4]
 8003cc0:	4b25      	ldr	r3, [pc, #148]	@ (8003d58 <vPortFree+0xbc>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4013      	ands	r3, r2
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d10b      	bne.n	8003ce2 <vPortFree+0x46>
	__asm volatile
 8003cca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cce:	f383 8811 	msr	BASEPRI, r3
 8003cd2:	f3bf 8f6f 	isb	sy
 8003cd6:	f3bf 8f4f 	dsb	sy
 8003cda:	60fb      	str	r3, [r7, #12]
}
 8003cdc:	bf00      	nop
 8003cde:	bf00      	nop
 8003ce0:	e7fd      	b.n	8003cde <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d00b      	beq.n	8003d02 <vPortFree+0x66>
	__asm volatile
 8003cea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cee:	f383 8811 	msr	BASEPRI, r3
 8003cf2:	f3bf 8f6f 	isb	sy
 8003cf6:	f3bf 8f4f 	dsb	sy
 8003cfa:	60bb      	str	r3, [r7, #8]
}
 8003cfc:	bf00      	nop
 8003cfe:	bf00      	nop
 8003d00:	e7fd      	b.n	8003cfe <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	685a      	ldr	r2, [r3, #4]
 8003d06:	4b14      	ldr	r3, [pc, #80]	@ (8003d58 <vPortFree+0xbc>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4013      	ands	r3, r2
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d01e      	beq.n	8003d4e <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d11a      	bne.n	8003d4e <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	685a      	ldr	r2, [r3, #4]
 8003d1c:	4b0e      	ldr	r3, [pc, #56]	@ (8003d58 <vPortFree+0xbc>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	43db      	mvns	r3, r3
 8003d22:	401a      	ands	r2, r3
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003d28:	f7fe ff20 	bl	8002b6c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	685a      	ldr	r2, [r3, #4]
 8003d30:	4b0a      	ldr	r3, [pc, #40]	@ (8003d5c <vPortFree+0xc0>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4413      	add	r3, r2
 8003d36:	4a09      	ldr	r2, [pc, #36]	@ (8003d5c <vPortFree+0xc0>)
 8003d38:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003d3a:	6938      	ldr	r0, [r7, #16]
 8003d3c:	f000 f874 	bl	8003e28 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8003d40:	4b07      	ldr	r3, [pc, #28]	@ (8003d60 <vPortFree+0xc4>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	3301      	adds	r3, #1
 8003d46:	4a06      	ldr	r2, [pc, #24]	@ (8003d60 <vPortFree+0xc4>)
 8003d48:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8003d4a:	f7fe ff1d 	bl	8002b88 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003d4e:	bf00      	nop
 8003d50:	3718      	adds	r7, #24
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}
 8003d56:	bf00      	nop
 8003d58:	200010cc 	.word	0x200010cc
 8003d5c:	200010bc 	.word	0x200010bc
 8003d60:	200010c8 	.word	0x200010c8

08003d64 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003d64:	b480      	push	{r7}
 8003d66:	b085      	sub	sp, #20
 8003d68:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003d6a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003d6e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003d70:	4b27      	ldr	r3, [pc, #156]	@ (8003e10 <prvHeapInit+0xac>)
 8003d72:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	f003 0307 	and.w	r3, r3, #7
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d00c      	beq.n	8003d98 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	3307      	adds	r3, #7
 8003d82:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	f023 0307 	bic.w	r3, r3, #7
 8003d8a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003d8c:	68ba      	ldr	r2, [r7, #8]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	1ad3      	subs	r3, r2, r3
 8003d92:	4a1f      	ldr	r2, [pc, #124]	@ (8003e10 <prvHeapInit+0xac>)
 8003d94:	4413      	add	r3, r2
 8003d96:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003d9c:	4a1d      	ldr	r2, [pc, #116]	@ (8003e14 <prvHeapInit+0xb0>)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003da2:	4b1c      	ldr	r3, [pc, #112]	@ (8003e14 <prvHeapInit+0xb0>)
 8003da4:	2200      	movs	r2, #0
 8003da6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	68ba      	ldr	r2, [r7, #8]
 8003dac:	4413      	add	r3, r2
 8003dae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003db0:	2208      	movs	r2, #8
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	1a9b      	subs	r3, r3, r2
 8003db6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	f023 0307 	bic.w	r3, r3, #7
 8003dbe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	4a15      	ldr	r2, [pc, #84]	@ (8003e18 <prvHeapInit+0xb4>)
 8003dc4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003dc6:	4b14      	ldr	r3, [pc, #80]	@ (8003e18 <prvHeapInit+0xb4>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003dce:	4b12      	ldr	r3, [pc, #72]	@ (8003e18 <prvHeapInit+0xb4>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	68fa      	ldr	r2, [r7, #12]
 8003dde:	1ad2      	subs	r2, r2, r3
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003de4:	4b0c      	ldr	r3, [pc, #48]	@ (8003e18 <prvHeapInit+0xb4>)
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	4a0a      	ldr	r2, [pc, #40]	@ (8003e1c <prvHeapInit+0xb8>)
 8003df2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	4a09      	ldr	r2, [pc, #36]	@ (8003e20 <prvHeapInit+0xbc>)
 8003dfa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003dfc:	4b09      	ldr	r3, [pc, #36]	@ (8003e24 <prvHeapInit+0xc0>)
 8003dfe:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8003e02:	601a      	str	r2, [r3, #0]
}
 8003e04:	bf00      	nop
 8003e06:	3714      	adds	r7, #20
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bc80      	pop	{r7}
 8003e0c:	4770      	bx	lr
 8003e0e:	bf00      	nop
 8003e10:	200004b0 	.word	0x200004b0
 8003e14:	200010b0 	.word	0x200010b0
 8003e18:	200010b8 	.word	0x200010b8
 8003e1c:	200010c0 	.word	0x200010c0
 8003e20:	200010bc 	.word	0x200010bc
 8003e24:	200010cc 	.word	0x200010cc

08003e28 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b085      	sub	sp, #20
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003e30:	4b27      	ldr	r3, [pc, #156]	@ (8003ed0 <prvInsertBlockIntoFreeList+0xa8>)
 8003e32:	60fb      	str	r3, [r7, #12]
 8003e34:	e002      	b.n	8003e3c <prvInsertBlockIntoFreeList+0x14>
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	60fb      	str	r3, [r7, #12]
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	687a      	ldr	r2, [r7, #4]
 8003e42:	429a      	cmp	r2, r3
 8003e44:	d8f7      	bhi.n	8003e36 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	68ba      	ldr	r2, [r7, #8]
 8003e50:	4413      	add	r3, r2
 8003e52:	687a      	ldr	r2, [r7, #4]
 8003e54:	429a      	cmp	r2, r3
 8003e56:	d108      	bne.n	8003e6a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	685a      	ldr	r2, [r3, #4]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	441a      	add	r2, r3
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	68ba      	ldr	r2, [r7, #8]
 8003e74:	441a      	add	r2, r3
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	429a      	cmp	r2, r3
 8003e7c:	d118      	bne.n	8003eb0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	4b14      	ldr	r3, [pc, #80]	@ (8003ed4 <prvInsertBlockIntoFreeList+0xac>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	429a      	cmp	r2, r3
 8003e88:	d00d      	beq.n	8003ea6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	685a      	ldr	r2, [r3, #4]
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	441a      	add	r2, r3
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	681a      	ldr	r2, [r3, #0]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	601a      	str	r2, [r3, #0]
 8003ea4:	e008      	b.n	8003eb8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003ea6:	4b0b      	ldr	r3, [pc, #44]	@ (8003ed4 <prvInsertBlockIntoFreeList+0xac>)
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	601a      	str	r2, [r3, #0]
 8003eae:	e003      	b.n	8003eb8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681a      	ldr	r2, [r3, #0]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003eb8:	68fa      	ldr	r2, [r7, #12]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	429a      	cmp	r2, r3
 8003ebe:	d002      	beq.n	8003ec6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	687a      	ldr	r2, [r7, #4]
 8003ec4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003ec6:	bf00      	nop
 8003ec8:	3714      	adds	r7, #20
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bc80      	pop	{r7}
 8003ece:	4770      	bx	lr
 8003ed0:	200010b0 	.word	0x200010b0
 8003ed4:	200010b8 	.word	0x200010b8

08003ed8 <memset>:
 8003ed8:	4603      	mov	r3, r0
 8003eda:	4402      	add	r2, r0
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d100      	bne.n	8003ee2 <memset+0xa>
 8003ee0:	4770      	bx	lr
 8003ee2:	f803 1b01 	strb.w	r1, [r3], #1
 8003ee6:	e7f9      	b.n	8003edc <memset+0x4>

08003ee8 <_reclaim_reent>:
 8003ee8:	4b29      	ldr	r3, [pc, #164]	@ (8003f90 <_reclaim_reent+0xa8>)
 8003eea:	b570      	push	{r4, r5, r6, lr}
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4604      	mov	r4, r0
 8003ef0:	4283      	cmp	r3, r0
 8003ef2:	d04b      	beq.n	8003f8c <_reclaim_reent+0xa4>
 8003ef4:	69c3      	ldr	r3, [r0, #28]
 8003ef6:	b1ab      	cbz	r3, 8003f24 <_reclaim_reent+0x3c>
 8003ef8:	68db      	ldr	r3, [r3, #12]
 8003efa:	b16b      	cbz	r3, 8003f18 <_reclaim_reent+0x30>
 8003efc:	2500      	movs	r5, #0
 8003efe:	69e3      	ldr	r3, [r4, #28]
 8003f00:	68db      	ldr	r3, [r3, #12]
 8003f02:	5959      	ldr	r1, [r3, r5]
 8003f04:	2900      	cmp	r1, #0
 8003f06:	d13b      	bne.n	8003f80 <_reclaim_reent+0x98>
 8003f08:	3504      	adds	r5, #4
 8003f0a:	2d80      	cmp	r5, #128	@ 0x80
 8003f0c:	d1f7      	bne.n	8003efe <_reclaim_reent+0x16>
 8003f0e:	69e3      	ldr	r3, [r4, #28]
 8003f10:	4620      	mov	r0, r4
 8003f12:	68d9      	ldr	r1, [r3, #12]
 8003f14:	f000 f872 	bl	8003ffc <_free_r>
 8003f18:	69e3      	ldr	r3, [r4, #28]
 8003f1a:	6819      	ldr	r1, [r3, #0]
 8003f1c:	b111      	cbz	r1, 8003f24 <_reclaim_reent+0x3c>
 8003f1e:	4620      	mov	r0, r4
 8003f20:	f000 f86c 	bl	8003ffc <_free_r>
 8003f24:	6961      	ldr	r1, [r4, #20]
 8003f26:	b111      	cbz	r1, 8003f2e <_reclaim_reent+0x46>
 8003f28:	4620      	mov	r0, r4
 8003f2a:	f000 f867 	bl	8003ffc <_free_r>
 8003f2e:	69e1      	ldr	r1, [r4, #28]
 8003f30:	b111      	cbz	r1, 8003f38 <_reclaim_reent+0x50>
 8003f32:	4620      	mov	r0, r4
 8003f34:	f000 f862 	bl	8003ffc <_free_r>
 8003f38:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8003f3a:	b111      	cbz	r1, 8003f42 <_reclaim_reent+0x5a>
 8003f3c:	4620      	mov	r0, r4
 8003f3e:	f000 f85d 	bl	8003ffc <_free_r>
 8003f42:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003f44:	b111      	cbz	r1, 8003f4c <_reclaim_reent+0x64>
 8003f46:	4620      	mov	r0, r4
 8003f48:	f000 f858 	bl	8003ffc <_free_r>
 8003f4c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8003f4e:	b111      	cbz	r1, 8003f56 <_reclaim_reent+0x6e>
 8003f50:	4620      	mov	r0, r4
 8003f52:	f000 f853 	bl	8003ffc <_free_r>
 8003f56:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8003f58:	b111      	cbz	r1, 8003f60 <_reclaim_reent+0x78>
 8003f5a:	4620      	mov	r0, r4
 8003f5c:	f000 f84e 	bl	8003ffc <_free_r>
 8003f60:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8003f62:	b111      	cbz	r1, 8003f6a <_reclaim_reent+0x82>
 8003f64:	4620      	mov	r0, r4
 8003f66:	f000 f849 	bl	8003ffc <_free_r>
 8003f6a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8003f6c:	b111      	cbz	r1, 8003f74 <_reclaim_reent+0x8c>
 8003f6e:	4620      	mov	r0, r4
 8003f70:	f000 f844 	bl	8003ffc <_free_r>
 8003f74:	6a23      	ldr	r3, [r4, #32]
 8003f76:	b14b      	cbz	r3, 8003f8c <_reclaim_reent+0xa4>
 8003f78:	4620      	mov	r0, r4
 8003f7a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8003f7e:	4718      	bx	r3
 8003f80:	680e      	ldr	r6, [r1, #0]
 8003f82:	4620      	mov	r0, r4
 8003f84:	f000 f83a 	bl	8003ffc <_free_r>
 8003f88:	4631      	mov	r1, r6
 8003f8a:	e7bb      	b.n	8003f04 <_reclaim_reent+0x1c>
 8003f8c:	bd70      	pop	{r4, r5, r6, pc}
 8003f8e:	bf00      	nop
 8003f90:	20000010 	.word	0x20000010

08003f94 <__libc_init_array>:
 8003f94:	b570      	push	{r4, r5, r6, lr}
 8003f96:	2600      	movs	r6, #0
 8003f98:	4d0c      	ldr	r5, [pc, #48]	@ (8003fcc <__libc_init_array+0x38>)
 8003f9a:	4c0d      	ldr	r4, [pc, #52]	@ (8003fd0 <__libc_init_array+0x3c>)
 8003f9c:	1b64      	subs	r4, r4, r5
 8003f9e:	10a4      	asrs	r4, r4, #2
 8003fa0:	42a6      	cmp	r6, r4
 8003fa2:	d109      	bne.n	8003fb8 <__libc_init_array+0x24>
 8003fa4:	f000 f87e 	bl	80040a4 <_init>
 8003fa8:	2600      	movs	r6, #0
 8003faa:	4d0a      	ldr	r5, [pc, #40]	@ (8003fd4 <__libc_init_array+0x40>)
 8003fac:	4c0a      	ldr	r4, [pc, #40]	@ (8003fd8 <__libc_init_array+0x44>)
 8003fae:	1b64      	subs	r4, r4, r5
 8003fb0:	10a4      	asrs	r4, r4, #2
 8003fb2:	42a6      	cmp	r6, r4
 8003fb4:	d105      	bne.n	8003fc2 <__libc_init_array+0x2e>
 8003fb6:	bd70      	pop	{r4, r5, r6, pc}
 8003fb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fbc:	4798      	blx	r3
 8003fbe:	3601      	adds	r6, #1
 8003fc0:	e7ee      	b.n	8003fa0 <__libc_init_array+0xc>
 8003fc2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fc6:	4798      	blx	r3
 8003fc8:	3601      	adds	r6, #1
 8003fca:	e7f2      	b.n	8003fb2 <__libc_init_array+0x1e>
 8003fcc:	08004168 	.word	0x08004168
 8003fd0:	08004168 	.word	0x08004168
 8003fd4:	08004168 	.word	0x08004168
 8003fd8:	0800416c 	.word	0x0800416c

08003fdc <__retarget_lock_acquire_recursive>:
 8003fdc:	4770      	bx	lr

08003fde <__retarget_lock_release_recursive>:
 8003fde:	4770      	bx	lr

08003fe0 <memcpy>:
 8003fe0:	440a      	add	r2, r1
 8003fe2:	4291      	cmp	r1, r2
 8003fe4:	f100 33ff 	add.w	r3, r0, #4294967295
 8003fe8:	d100      	bne.n	8003fec <memcpy+0xc>
 8003fea:	4770      	bx	lr
 8003fec:	b510      	push	{r4, lr}
 8003fee:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003ff2:	4291      	cmp	r1, r2
 8003ff4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003ff8:	d1f9      	bne.n	8003fee <memcpy+0xe>
 8003ffa:	bd10      	pop	{r4, pc}

08003ffc <_free_r>:
 8003ffc:	b538      	push	{r3, r4, r5, lr}
 8003ffe:	4605      	mov	r5, r0
 8004000:	2900      	cmp	r1, #0
 8004002:	d040      	beq.n	8004086 <_free_r+0x8a>
 8004004:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004008:	1f0c      	subs	r4, r1, #4
 800400a:	2b00      	cmp	r3, #0
 800400c:	bfb8      	it	lt
 800400e:	18e4      	addlt	r4, r4, r3
 8004010:	f000 f83c 	bl	800408c <__malloc_lock>
 8004014:	4a1c      	ldr	r2, [pc, #112]	@ (8004088 <_free_r+0x8c>)
 8004016:	6813      	ldr	r3, [r2, #0]
 8004018:	b933      	cbnz	r3, 8004028 <_free_r+0x2c>
 800401a:	6063      	str	r3, [r4, #4]
 800401c:	6014      	str	r4, [r2, #0]
 800401e:	4628      	mov	r0, r5
 8004020:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004024:	f000 b838 	b.w	8004098 <__malloc_unlock>
 8004028:	42a3      	cmp	r3, r4
 800402a:	d908      	bls.n	800403e <_free_r+0x42>
 800402c:	6820      	ldr	r0, [r4, #0]
 800402e:	1821      	adds	r1, r4, r0
 8004030:	428b      	cmp	r3, r1
 8004032:	bf01      	itttt	eq
 8004034:	6819      	ldreq	r1, [r3, #0]
 8004036:	685b      	ldreq	r3, [r3, #4]
 8004038:	1809      	addeq	r1, r1, r0
 800403a:	6021      	streq	r1, [r4, #0]
 800403c:	e7ed      	b.n	800401a <_free_r+0x1e>
 800403e:	461a      	mov	r2, r3
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	b10b      	cbz	r3, 8004048 <_free_r+0x4c>
 8004044:	42a3      	cmp	r3, r4
 8004046:	d9fa      	bls.n	800403e <_free_r+0x42>
 8004048:	6811      	ldr	r1, [r2, #0]
 800404a:	1850      	adds	r0, r2, r1
 800404c:	42a0      	cmp	r0, r4
 800404e:	d10b      	bne.n	8004068 <_free_r+0x6c>
 8004050:	6820      	ldr	r0, [r4, #0]
 8004052:	4401      	add	r1, r0
 8004054:	1850      	adds	r0, r2, r1
 8004056:	4283      	cmp	r3, r0
 8004058:	6011      	str	r1, [r2, #0]
 800405a:	d1e0      	bne.n	800401e <_free_r+0x22>
 800405c:	6818      	ldr	r0, [r3, #0]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	4408      	add	r0, r1
 8004062:	6010      	str	r0, [r2, #0]
 8004064:	6053      	str	r3, [r2, #4]
 8004066:	e7da      	b.n	800401e <_free_r+0x22>
 8004068:	d902      	bls.n	8004070 <_free_r+0x74>
 800406a:	230c      	movs	r3, #12
 800406c:	602b      	str	r3, [r5, #0]
 800406e:	e7d6      	b.n	800401e <_free_r+0x22>
 8004070:	6820      	ldr	r0, [r4, #0]
 8004072:	1821      	adds	r1, r4, r0
 8004074:	428b      	cmp	r3, r1
 8004076:	bf01      	itttt	eq
 8004078:	6819      	ldreq	r1, [r3, #0]
 800407a:	685b      	ldreq	r3, [r3, #4]
 800407c:	1809      	addeq	r1, r1, r0
 800407e:	6021      	streq	r1, [r4, #0]
 8004080:	6063      	str	r3, [r4, #4]
 8004082:	6054      	str	r4, [r2, #4]
 8004084:	e7cb      	b.n	800401e <_free_r+0x22>
 8004086:	bd38      	pop	{r3, r4, r5, pc}
 8004088:	2000120c 	.word	0x2000120c

0800408c <__malloc_lock>:
 800408c:	4801      	ldr	r0, [pc, #4]	@ (8004094 <__malloc_lock+0x8>)
 800408e:	f7ff bfa5 	b.w	8003fdc <__retarget_lock_acquire_recursive>
 8004092:	bf00      	nop
 8004094:	20001208 	.word	0x20001208

08004098 <__malloc_unlock>:
 8004098:	4801      	ldr	r0, [pc, #4]	@ (80040a0 <__malloc_unlock+0x8>)
 800409a:	f7ff bfa0 	b.w	8003fde <__retarget_lock_release_recursive>
 800409e:	bf00      	nop
 80040a0:	20001208 	.word	0x20001208

080040a4 <_init>:
 80040a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040a6:	bf00      	nop
 80040a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040aa:	bc08      	pop	{r3}
 80040ac:	469e      	mov	lr, r3
 80040ae:	4770      	bx	lr

080040b0 <_fini>:
 80040b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040b2:	bf00      	nop
 80040b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040b6:	bc08      	pop	{r3}
 80040b8:	469e      	mov	lr, r3
 80040ba:	4770      	bx	lr
