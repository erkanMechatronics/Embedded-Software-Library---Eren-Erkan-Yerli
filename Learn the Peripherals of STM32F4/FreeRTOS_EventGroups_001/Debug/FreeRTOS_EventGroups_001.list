
FreeRTOS_EventGroups_001.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008d84  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  08008f14  08008f14  00009f14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008fd8  08008fd8  0000a150  2**0
                  CONTENTS
  4 .ARM          00000008  08008fd8  08008fd8  00009fd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008fe0  08008fe0  0000a150  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008fe0  08008fe0  00009fe0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008fe4  08008fe4  00009fe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000150  20000000  08008fe8  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a150  2**0
                  CONTENTS
 10 .bss          00005d90  20000150  20000150  0000a150  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20005ee0  20005ee0  0000a150  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a150  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017333  00000000  00000000  0000a180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003f4e  00000000  00000000  000214b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001430  00000000  00000000  00025408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f55  00000000  00000000  00026838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025409  00000000  00000000  0002778d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a01b  00000000  00000000  0004cb96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d4fe2  00000000  00000000  00066bb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013bb93  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005588  00000000  00000000  0013bbd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000074  00000000  00000000  00141160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000150 	.word	0x20000150
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008efc 	.word	0x08008efc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000154 	.word	0x20000154
 80001cc:	08008efc 	.word	0x08008efc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b96a 	b.w	80004cc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	460c      	mov	r4, r1
 8000218:	2b00      	cmp	r3, #0
 800021a:	d14e      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021c:	4694      	mov	ip, r2
 800021e:	458c      	cmp	ip, r1
 8000220:	4686      	mov	lr, r0
 8000222:	fab2 f282 	clz	r2, r2
 8000226:	d962      	bls.n	80002ee <__udivmoddi4+0xde>
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0320 	rsb	r3, r2, #32
 800022e:	4091      	lsls	r1, r2
 8000230:	fa20 f303 	lsr.w	r3, r0, r3
 8000234:	fa0c fc02 	lsl.w	ip, ip, r2
 8000238:	4319      	orrs	r1, r3
 800023a:	fa00 fe02 	lsl.w	lr, r0, r2
 800023e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000242:	fa1f f68c 	uxth.w	r6, ip
 8000246:	fbb1 f4f7 	udiv	r4, r1, r7
 800024a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800024e:	fb07 1114 	mls	r1, r7, r4, r1
 8000252:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000256:	fb04 f106 	mul.w	r1, r4, r6
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f104 30ff 	add.w	r0, r4, #4294967295
 8000266:	f080 8112 	bcs.w	800048e <__udivmoddi4+0x27e>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 810f 	bls.w	800048e <__udivmoddi4+0x27e>
 8000270:	3c02      	subs	r4, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a59      	subs	r1, r3, r1
 8000276:	fa1f f38e 	uxth.w	r3, lr
 800027a:	fbb1 f0f7 	udiv	r0, r1, r7
 800027e:	fb07 1110 	mls	r1, r7, r0, r1
 8000282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000286:	fb00 f606 	mul.w	r6, r0, r6
 800028a:	429e      	cmp	r6, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x94>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f100 31ff 	add.w	r1, r0, #4294967295
 8000296:	f080 80fc 	bcs.w	8000492 <__udivmoddi4+0x282>
 800029a:	429e      	cmp	r6, r3
 800029c:	f240 80f9 	bls.w	8000492 <__udivmoddi4+0x282>
 80002a0:	4463      	add	r3, ip
 80002a2:	3802      	subs	r0, #2
 80002a4:	1b9b      	subs	r3, r3, r6
 80002a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002aa:	2100      	movs	r1, #0
 80002ac:	b11d      	cbz	r5, 80002b6 <__udivmoddi4+0xa6>
 80002ae:	40d3      	lsrs	r3, r2
 80002b0:	2200      	movs	r2, #0
 80002b2:	e9c5 3200 	strd	r3, r2, [r5]
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d905      	bls.n	80002ca <__udivmoddi4+0xba>
 80002be:	b10d      	cbz	r5, 80002c4 <__udivmoddi4+0xb4>
 80002c0:	e9c5 0100 	strd	r0, r1, [r5]
 80002c4:	2100      	movs	r1, #0
 80002c6:	4608      	mov	r0, r1
 80002c8:	e7f5      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ca:	fab3 f183 	clz	r1, r3
 80002ce:	2900      	cmp	r1, #0
 80002d0:	d146      	bne.n	8000360 <__udivmoddi4+0x150>
 80002d2:	42a3      	cmp	r3, r4
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xcc>
 80002d6:	4290      	cmp	r0, r2
 80002d8:	f0c0 80f0 	bcc.w	80004bc <__udivmoddi4+0x2ac>
 80002dc:	1a86      	subs	r6, r0, r2
 80002de:	eb64 0303 	sbc.w	r3, r4, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	2d00      	cmp	r5, #0
 80002e6:	d0e6      	beq.n	80002b6 <__udivmoddi4+0xa6>
 80002e8:	e9c5 6300 	strd	r6, r3, [r5]
 80002ec:	e7e3      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x204>
 80002f4:	eba1 040c 	sub.w	r4, r1, ip
 80002f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002fc:	fa1f f78c 	uxth.w	r7, ip
 8000300:	2101      	movs	r1, #1
 8000302:	fbb4 f6f8 	udiv	r6, r4, r8
 8000306:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030a:	fb08 4416 	mls	r4, r8, r6, r4
 800030e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000312:	fb07 f006 	mul.w	r0, r7, r6
 8000316:	4298      	cmp	r0, r3
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x11c>
 800031a:	eb1c 0303 	adds.w	r3, ip, r3
 800031e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x11a>
 8000324:	4298      	cmp	r0, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2b4>
 800032a:	4626      	mov	r6, r4
 800032c:	1a1c      	subs	r4, r3, r0
 800032e:	fa1f f38e 	uxth.w	r3, lr
 8000332:	fbb4 f0f8 	udiv	r0, r4, r8
 8000336:	fb08 4410 	mls	r4, r8, r0, r4
 800033a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800033e:	fb00 f707 	mul.w	r7, r0, r7
 8000342:	429f      	cmp	r7, r3
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x148>
 8000346:	eb1c 0303 	adds.w	r3, ip, r3
 800034a:	f100 34ff 	add.w	r4, r0, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x146>
 8000350:	429f      	cmp	r7, r3
 8000352:	f200 80b0 	bhi.w	80004b6 <__udivmoddi4+0x2a6>
 8000356:	4620      	mov	r0, r4
 8000358:	1bdb      	subs	r3, r3, r7
 800035a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800035e:	e7a5      	b.n	80002ac <__udivmoddi4+0x9c>
 8000360:	f1c1 0620 	rsb	r6, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 f706 	lsr.w	r7, r2, r6
 800036a:	431f      	orrs	r7, r3
 800036c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000370:	fa04 f301 	lsl.w	r3, r4, r1
 8000374:	ea43 030c 	orr.w	r3, r3, ip
 8000378:	40f4      	lsrs	r4, r6
 800037a:	fa00 f801 	lsl.w	r8, r0, r1
 800037e:	0c38      	lsrs	r0, r7, #16
 8000380:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000384:	fbb4 fef0 	udiv	lr, r4, r0
 8000388:	fa1f fc87 	uxth.w	ip, r7
 800038c:	fb00 441e 	mls	r4, r0, lr, r4
 8000390:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000394:	fb0e f90c 	mul.w	r9, lr, ip
 8000398:	45a1      	cmp	r9, r4
 800039a:	fa02 f201 	lsl.w	r2, r2, r1
 800039e:	d90a      	bls.n	80003b6 <__udivmoddi4+0x1a6>
 80003a0:	193c      	adds	r4, r7, r4
 80003a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003a6:	f080 8084 	bcs.w	80004b2 <__udivmoddi4+0x2a2>
 80003aa:	45a1      	cmp	r9, r4
 80003ac:	f240 8081 	bls.w	80004b2 <__udivmoddi4+0x2a2>
 80003b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003b4:	443c      	add	r4, r7
 80003b6:	eba4 0409 	sub.w	r4, r4, r9
 80003ba:	fa1f f983 	uxth.w	r9, r3
 80003be:	fbb4 f3f0 	udiv	r3, r4, r0
 80003c2:	fb00 4413 	mls	r4, r0, r3, r4
 80003c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d907      	bls.n	80003e2 <__udivmoddi4+0x1d2>
 80003d2:	193c      	adds	r4, r7, r4
 80003d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d8:	d267      	bcs.n	80004aa <__udivmoddi4+0x29a>
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d965      	bls.n	80004aa <__udivmoddi4+0x29a>
 80003de:	3b02      	subs	r3, #2
 80003e0:	443c      	add	r4, r7
 80003e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003e6:	fba0 9302 	umull	r9, r3, r0, r2
 80003ea:	eba4 040c 	sub.w	r4, r4, ip
 80003ee:	429c      	cmp	r4, r3
 80003f0:	46ce      	mov	lr, r9
 80003f2:	469c      	mov	ip, r3
 80003f4:	d351      	bcc.n	800049a <__udivmoddi4+0x28a>
 80003f6:	d04e      	beq.n	8000496 <__udivmoddi4+0x286>
 80003f8:	b155      	cbz	r5, 8000410 <__udivmoddi4+0x200>
 80003fa:	ebb8 030e 	subs.w	r3, r8, lr
 80003fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000402:	fa04 f606 	lsl.w	r6, r4, r6
 8000406:	40cb      	lsrs	r3, r1
 8000408:	431e      	orrs	r6, r3
 800040a:	40cc      	lsrs	r4, r1
 800040c:	e9c5 6400 	strd	r6, r4, [r5]
 8000410:	2100      	movs	r1, #0
 8000412:	e750      	b.n	80002b6 <__udivmoddi4+0xa6>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f103 	lsr.w	r1, r0, r3
 800041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000420:	fa24 f303 	lsr.w	r3, r4, r3
 8000424:	4094      	lsls	r4, r2
 8000426:	430c      	orrs	r4, r1
 8000428:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800042c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000430:	fa1f f78c 	uxth.w	r7, ip
 8000434:	fbb3 f0f8 	udiv	r0, r3, r8
 8000438:	fb08 3110 	mls	r1, r8, r0, r3
 800043c:	0c23      	lsrs	r3, r4, #16
 800043e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000442:	fb00 f107 	mul.w	r1, r0, r7
 8000446:	4299      	cmp	r1, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x24c>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000452:	d22c      	bcs.n	80004ae <__udivmoddi4+0x29e>
 8000454:	4299      	cmp	r1, r3
 8000456:	d92a      	bls.n	80004ae <__udivmoddi4+0x29e>
 8000458:	3802      	subs	r0, #2
 800045a:	4463      	add	r3, ip
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b2a4      	uxth	r4, r4
 8000460:	fbb3 f1f8 	udiv	r1, r3, r8
 8000464:	fb08 3311 	mls	r3, r8, r1, r3
 8000468:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800046c:	fb01 f307 	mul.w	r3, r1, r7
 8000470:	42a3      	cmp	r3, r4
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x276>
 8000474:	eb1c 0404 	adds.w	r4, ip, r4
 8000478:	f101 36ff 	add.w	r6, r1, #4294967295
 800047c:	d213      	bcs.n	80004a6 <__udivmoddi4+0x296>
 800047e:	42a3      	cmp	r3, r4
 8000480:	d911      	bls.n	80004a6 <__udivmoddi4+0x296>
 8000482:	3902      	subs	r1, #2
 8000484:	4464      	add	r4, ip
 8000486:	1ae4      	subs	r4, r4, r3
 8000488:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800048c:	e739      	b.n	8000302 <__udivmoddi4+0xf2>
 800048e:	4604      	mov	r4, r0
 8000490:	e6f0      	b.n	8000274 <__udivmoddi4+0x64>
 8000492:	4608      	mov	r0, r1
 8000494:	e706      	b.n	80002a4 <__udivmoddi4+0x94>
 8000496:	45c8      	cmp	r8, r9
 8000498:	d2ae      	bcs.n	80003f8 <__udivmoddi4+0x1e8>
 800049a:	ebb9 0e02 	subs.w	lr, r9, r2
 800049e:	eb63 0c07 	sbc.w	ip, r3, r7
 80004a2:	3801      	subs	r0, #1
 80004a4:	e7a8      	b.n	80003f8 <__udivmoddi4+0x1e8>
 80004a6:	4631      	mov	r1, r6
 80004a8:	e7ed      	b.n	8000486 <__udivmoddi4+0x276>
 80004aa:	4603      	mov	r3, r0
 80004ac:	e799      	b.n	80003e2 <__udivmoddi4+0x1d2>
 80004ae:	4630      	mov	r0, r6
 80004b0:	e7d4      	b.n	800045c <__udivmoddi4+0x24c>
 80004b2:	46d6      	mov	lr, sl
 80004b4:	e77f      	b.n	80003b6 <__udivmoddi4+0x1a6>
 80004b6:	4463      	add	r3, ip
 80004b8:	3802      	subs	r0, #2
 80004ba:	e74d      	b.n	8000358 <__udivmoddi4+0x148>
 80004bc:	4606      	mov	r6, r0
 80004be:	4623      	mov	r3, r4
 80004c0:	4608      	mov	r0, r1
 80004c2:	e70f      	b.n	80002e4 <__udivmoddi4+0xd4>
 80004c4:	3e02      	subs	r6, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	e730      	b.n	800032c <__udivmoddi4+0x11c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004d0:	b480      	push	{r7}
 80004d2:	b085      	sub	sp, #20
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	60f8      	str	r0, [r7, #12]
 80004d8:	60b9      	str	r1, [r7, #8]
 80004da:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004dc:	68fb      	ldr	r3, [r7, #12]
 80004de:	4a07      	ldr	r2, [pc, #28]	@ (80004fc <vApplicationGetIdleTaskMemory+0x2c>)
 80004e0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004e2:	68bb      	ldr	r3, [r7, #8]
 80004e4:	4a06      	ldr	r2, [pc, #24]	@ (8000500 <vApplicationGetIdleTaskMemory+0x30>)
 80004e6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	2280      	movs	r2, #128	@ 0x80
 80004ec:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004ee:	bf00      	nop
 80004f0:	3714      	adds	r7, #20
 80004f2:	46bd      	mov	sp, r7
 80004f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop
 80004fc:	2000016c 	.word	0x2000016c
 8000500:	2000020c 	.word	0x2000020c

08000504 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050a:	f000 fabf 	bl	8000a8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800050e:	f000 f843 	bl	8000598 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000512:	f000 f8a9 	bl	8000668 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  MX_USB_DEVICE_Init();
 8000516:	f007 fefd 	bl	8008314 <MX_USB_DEVICE_Init>


  sensor_control = xEventGroupCreate();
 800051a:	f006 fa79 	bl	8006a10 <xEventGroupCreate>
 800051e:	4603      	mov	r3, r0
 8000520:	4a13      	ldr	r2, [pc, #76]	@ (8000570 <main+0x6c>)
 8000522:	6013      	str	r3, [r2, #0]

  xTaskCreate(TaskSensor1, "Task 1", 1000, NULL, 1, &xTaskSensor1Handle);
 8000524:	4b13      	ldr	r3, [pc, #76]	@ (8000574 <main+0x70>)
 8000526:	9301      	str	r3, [sp, #4]
 8000528:	2301      	movs	r3, #1
 800052a:	9300      	str	r3, [sp, #0]
 800052c:	2300      	movs	r3, #0
 800052e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000532:	4911      	ldr	r1, [pc, #68]	@ (8000578 <main+0x74>)
 8000534:	4811      	ldr	r0, [pc, #68]	@ (800057c <main+0x78>)
 8000536:	f006 fd19 	bl	8006f6c <xTaskCreate>
  xTaskCreate(TaskSensor2, "Task 2", 1000, NULL, 1, &xTaskSensor2Handle);
 800053a:	4b11      	ldr	r3, [pc, #68]	@ (8000580 <main+0x7c>)
 800053c:	9301      	str	r3, [sp, #4]
 800053e:	2301      	movs	r3, #1
 8000540:	9300      	str	r3, [sp, #0]
 8000542:	2300      	movs	r3, #0
 8000544:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000548:	490e      	ldr	r1, [pc, #56]	@ (8000584 <main+0x80>)
 800054a:	480f      	ldr	r0, [pc, #60]	@ (8000588 <main+0x84>)
 800054c:	f006 fd0e 	bl	8006f6c <xTaskCreate>
  xTaskCreate(TaskSensors, "Task Sensors", 1000, NULL, 2, &xTaskSensorsHandle);
 8000550:	4b0e      	ldr	r3, [pc, #56]	@ (800058c <main+0x88>)
 8000552:	9301      	str	r3, [sp, #4]
 8000554:	2302      	movs	r3, #2
 8000556:	9300      	str	r3, [sp, #0]
 8000558:	2300      	movs	r3, #0
 800055a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800055e:	490c      	ldr	r1, [pc, #48]	@ (8000590 <main+0x8c>)
 8000560:	480c      	ldr	r0, [pc, #48]	@ (8000594 <main+0x90>)
 8000562:	f006 fd03 	bl	8006f6c <xTaskCreate>

  vTaskStartScheduler();
 8000566:	f006 fe87 	bl	8007278 <vTaskStartScheduler>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800056a:	bf00      	nop
 800056c:	e7fd      	b.n	800056a <main+0x66>
 800056e:	bf00      	nop
 8000570:	20000418 	.word	0x20000418
 8000574:	2000040c 	.word	0x2000040c
 8000578:	08008f14 	.word	0x08008f14
 800057c:	0800070d 	.word	0x0800070d
 8000580:	20000410 	.word	0x20000410
 8000584:	08008f1c 	.word	0x08008f1c
 8000588:	08000739 	.word	0x08000739
 800058c:	20000414 	.word	0x20000414
 8000590:	08008f24 	.word	0x08008f24
 8000594:	08000779 	.word	0x08000779

08000598 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b094      	sub	sp, #80	@ 0x50
 800059c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800059e:	f107 0320 	add.w	r3, r7, #32
 80005a2:	2230      	movs	r2, #48	@ 0x30
 80005a4:	2100      	movs	r1, #0
 80005a6:	4618      	mov	r0, r3
 80005a8:	f008 fbce 	bl	8008d48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ac:	f107 030c 	add.w	r3, r7, #12
 80005b0:	2200      	movs	r2, #0
 80005b2:	601a      	str	r2, [r3, #0]
 80005b4:	605a      	str	r2, [r3, #4]
 80005b6:	609a      	str	r2, [r3, #8]
 80005b8:	60da      	str	r2, [r3, #12]
 80005ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005bc:	2300      	movs	r3, #0
 80005be:	60bb      	str	r3, [r7, #8]
 80005c0:	4b27      	ldr	r3, [pc, #156]	@ (8000660 <SystemClock_Config+0xc8>)
 80005c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005c4:	4a26      	ldr	r2, [pc, #152]	@ (8000660 <SystemClock_Config+0xc8>)
 80005c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005ca:	6413      	str	r3, [r2, #64]	@ 0x40
 80005cc:	4b24      	ldr	r3, [pc, #144]	@ (8000660 <SystemClock_Config+0xc8>)
 80005ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005d4:	60bb      	str	r3, [r7, #8]
 80005d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005d8:	2300      	movs	r3, #0
 80005da:	607b      	str	r3, [r7, #4]
 80005dc:	4b21      	ldr	r3, [pc, #132]	@ (8000664 <SystemClock_Config+0xcc>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	4a20      	ldr	r2, [pc, #128]	@ (8000664 <SystemClock_Config+0xcc>)
 80005e2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005e6:	6013      	str	r3, [r2, #0]
 80005e8:	4b1e      	ldr	r3, [pc, #120]	@ (8000664 <SystemClock_Config+0xcc>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80005f0:	607b      	str	r3, [r7, #4]
 80005f2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005f4:	2301      	movs	r3, #1
 80005f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005f8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005fc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005fe:	2302      	movs	r3, #2
 8000600:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000602:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000606:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000608:	2304      	movs	r3, #4
 800060a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800060c:	23a8      	movs	r3, #168	@ 0xa8
 800060e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000610:	2302      	movs	r3, #2
 8000612:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000614:	2307      	movs	r3, #7
 8000616:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000618:	f107 0320 	add.w	r3, r7, #32
 800061c:	4618      	mov	r0, r3
 800061e:	f001 ff85 	bl	800252c <HAL_RCC_OscConfig>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000628:	f000 f916 	bl	8000858 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800062c:	230f      	movs	r3, #15
 800062e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000630:	2302      	movs	r3, #2
 8000632:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000634:	2380      	movs	r3, #128	@ 0x80
 8000636:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000638:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800063c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800063e:	2300      	movs	r3, #0
 8000640:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000642:	f107 030c 	add.w	r3, r7, #12
 8000646:	2102      	movs	r1, #2
 8000648:	4618      	mov	r0, r3
 800064a:	f002 f9e7 	bl	8002a1c <HAL_RCC_ClockConfig>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000654:	f000 f900 	bl	8000858 <Error_Handler>
  }
}
 8000658:	bf00      	nop
 800065a:	3750      	adds	r7, #80	@ 0x50
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}
 8000660:	40023800 	.word	0x40023800
 8000664:	40007000 	.word	0x40007000

08000668 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b088      	sub	sp, #32
 800066c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800066e:	f107 030c 	add.w	r3, r7, #12
 8000672:	2200      	movs	r2, #0
 8000674:	601a      	str	r2, [r3, #0]
 8000676:	605a      	str	r2, [r3, #4]
 8000678:	609a      	str	r2, [r3, #8]
 800067a:	60da      	str	r2, [r3, #12]
 800067c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800067e:	2300      	movs	r3, #0
 8000680:	60bb      	str	r3, [r7, #8]
 8000682:	4b20      	ldr	r3, [pc, #128]	@ (8000704 <MX_GPIO_Init+0x9c>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000686:	4a1f      	ldr	r2, [pc, #124]	@ (8000704 <MX_GPIO_Init+0x9c>)
 8000688:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800068c:	6313      	str	r3, [r2, #48]	@ 0x30
 800068e:	4b1d      	ldr	r3, [pc, #116]	@ (8000704 <MX_GPIO_Init+0x9c>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000692:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000696:	60bb      	str	r3, [r7, #8]
 8000698:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800069a:	2300      	movs	r3, #0
 800069c:	607b      	str	r3, [r7, #4]
 800069e:	4b19      	ldr	r3, [pc, #100]	@ (8000704 <MX_GPIO_Init+0x9c>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006a2:	4a18      	ldr	r2, [pc, #96]	@ (8000704 <MX_GPIO_Init+0x9c>)
 80006a4:	f043 0308 	orr.w	r3, r3, #8
 80006a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006aa:	4b16      	ldr	r3, [pc, #88]	@ (8000704 <MX_GPIO_Init+0x9c>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ae:	f003 0308 	and.w	r3, r3, #8
 80006b2:	607b      	str	r3, [r7, #4]
 80006b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006b6:	2300      	movs	r3, #0
 80006b8:	603b      	str	r3, [r7, #0]
 80006ba:	4b12      	ldr	r3, [pc, #72]	@ (8000704 <MX_GPIO_Init+0x9c>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006be:	4a11      	ldr	r2, [pc, #68]	@ (8000704 <MX_GPIO_Init+0x9c>)
 80006c0:	f043 0301 	orr.w	r3, r3, #1
 80006c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006c6:	4b0f      	ldr	r3, [pc, #60]	@ (8000704 <MX_GPIO_Init+0x9c>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ca:	f003 0301 	and.w	r3, r3, #1
 80006ce:	603b      	str	r3, [r7, #0]
 80006d0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80006d2:	2200      	movs	r2, #0
 80006d4:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 80006d8:	480b      	ldr	r0, [pc, #44]	@ (8000708 <MX_GPIO_Init+0xa0>)
 80006da:	f000 fcbb 	bl	8001054 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80006de:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 80006e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006e4:	2301      	movs	r3, #1
 80006e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e8:	2300      	movs	r3, #0
 80006ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ec:	2300      	movs	r3, #0
 80006ee:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006f0:	f107 030c 	add.w	r3, r7, #12
 80006f4:	4619      	mov	r1, r3
 80006f6:	4804      	ldr	r0, [pc, #16]	@ (8000708 <MX_GPIO_Init+0xa0>)
 80006f8:	f000 fb10 	bl	8000d1c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006fc:	bf00      	nop
 80006fe:	3720      	adds	r7, #32
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	40023800 	.word	0x40023800
 8000708:	40020c00 	.word	0x40020c00

0800070c <TaskSensor1>:
//	}
//
//}

void TaskSensor1(void *pvParameters)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b084      	sub	sp, #16
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
	TickType_t delay;
	delay = pdMS_TO_TICKS(1000);
 8000714:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000718:	60fb      	str	r3, [r7, #12]

	for(;;)
	{
		xEventGroupSetBits(sensor_control, sensor_bit_0);
 800071a:	4b06      	ldr	r3, [pc, #24]	@ (8000734 <TaskSensor1+0x28>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	2201      	movs	r2, #1
 8000720:	4611      	mov	r1, r2
 8000722:	4618      	mov	r0, r3
 8000724:	f006 fa60 	bl	8006be8 <xEventGroupSetBits>
		vTaskDelay(delay);
 8000728:	68f8      	ldr	r0, [r7, #12]
 800072a:	f006 fd6f 	bl	800720c <vTaskDelay>
		xEventGroupSetBits(sensor_control, sensor_bit_0);
 800072e:	bf00      	nop
 8000730:	e7f3      	b.n	800071a <TaskSensor1+0xe>
 8000732:	bf00      	nop
 8000734:	20000418 	.word	0x20000418

08000738 <TaskSensor2>:
	}

}

void TaskSensor2(void *pvParameters)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b084      	sub	sp, #16
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
	int x = 0;
 8000740:	2300      	movs	r3, #0
 8000742:	60fb      	str	r3, [r7, #12]
	TickType_t delay;
	delay = pdMS_TO_TICKS(1000);
 8000744:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000748:	60bb      	str	r3, [r7, #8]

	for(;;)
	{
		++x;
 800074a:	68fb      	ldr	r3, [r7, #12]
 800074c:	3301      	adds	r3, #1
 800074e:	60fb      	str	r3, [r7, #12]

		if((x >= 3) && (x < 6))
 8000750:	68fb      	ldr	r3, [r7, #12]
 8000752:	2b02      	cmp	r3, #2
 8000754:	dd02      	ble.n	800075c <TaskSensor2+0x24>
 8000756:	68fb      	ldr	r3, [r7, #12]
 8000758:	2b05      	cmp	r3, #5
 800075a:	dd06      	ble.n	800076a <TaskSensor2+0x32>
		{

		}
		else
		{
			xEventGroupSetBits(sensor_control, sensor_bit_1);
 800075c:	4b05      	ldr	r3, [pc, #20]	@ (8000774 <TaskSensor2+0x3c>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	2202      	movs	r2, #2
 8000762:	4611      	mov	r1, r2
 8000764:	4618      	mov	r0, r3
 8000766:	f006 fa3f 	bl	8006be8 <xEventGroupSetBits>
		}

		vTaskDelay(delay);
 800076a:	68b8      	ldr	r0, [r7, #8]
 800076c:	f006 fd4e 	bl	800720c <vTaskDelay>
		++x;
 8000770:	e7eb      	b.n	800074a <TaskSensor2+0x12>
 8000772:	bf00      	nop
 8000774:	20000418 	.word	0x20000418

08000778 <TaskSensors>:
	}

}

void TaskSensors(void *pvParameters)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b088      	sub	sp, #32
 800077c:	af02      	add	r7, sp, #8
 800077e:	6078      	str	r0, [r7, #4]



	for(;;)
	{
		result = xEventGroupWaitBits(sensor_control, sensor_all_bits, pdTRUE, pdTRUE, portMAX_DELAY);
 8000780:	4b28      	ldr	r3, [pc, #160]	@ (8000824 <TaskSensors+0xac>)
 8000782:	6818      	ldr	r0, [r3, #0]
 8000784:	2103      	movs	r1, #3
 8000786:	f04f 33ff 	mov.w	r3, #4294967295
 800078a:	9300      	str	r3, [sp, #0]
 800078c:	2301      	movs	r3, #1
 800078e:	2201      	movs	r2, #1
 8000790:	f006 f958 	bl	8006a44 <xEventGroupWaitBits>
 8000794:	6178      	str	r0, [r7, #20]

		if((result & sensor_all_bits) == sensor_all_bits)
 8000796:	2203      	movs	r2, #3
 8000798:	697b      	ldr	r3, [r7, #20]
 800079a:	4013      	ands	r3, r2
 800079c:	2203      	movs	r2, #3
 800079e:	4293      	cmp	r3, r2
 80007a0:	d111      	bne.n	80007c6 <TaskSensors+0x4e>
		{
			HAL_Delay(1);
 80007a2:	2001      	movs	r0, #1
 80007a4:	f000 f9b4 	bl	8000b10 <HAL_Delay>
			char *str1 = "System is healthy...\n";
 80007a8:	4b1f      	ldr	r3, [pc, #124]	@ (8000828 <TaskSensors+0xb0>)
 80007aa:	60bb      	str	r3, [r7, #8]
			CDC_Transmit_FS((uint8_t *)str1, strlen(str1));
 80007ac:	68b8      	ldr	r0, [r7, #8]
 80007ae:	f7ff fd0f 	bl	80001d0 <strlen>
 80007b2:	4603      	mov	r3, r0
 80007b4:	b29b      	uxth	r3, r3
 80007b6:	4619      	mov	r1, r3
 80007b8:	68b8      	ldr	r0, [r7, #8]
 80007ba:	f007 fe69 	bl	8008490 <CDC_Transmit_FS>
			HAL_Delay(1);
 80007be:	2001      	movs	r0, #1
 80007c0:	f000 f9a6 	bl	8000b10 <HAL_Delay>
 80007c4:	e7dc      	b.n	8000780 <TaskSensors+0x8>
		}
		else
		{
			if(!(result & sensor_bit_0))
 80007c6:	2201      	movs	r2, #1
 80007c8:	697b      	ldr	r3, [r7, #20]
 80007ca:	4013      	ands	r3, r2
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d111      	bne.n	80007f4 <TaskSensors+0x7c>
			{
				HAL_Delay(1);
 80007d0:	2001      	movs	r0, #1
 80007d2:	f000 f99d 	bl	8000b10 <HAL_Delay>
				char *str2 = "Sensor1 stopped\n";
 80007d6:	4b15      	ldr	r3, [pc, #84]	@ (800082c <TaskSensors+0xb4>)
 80007d8:	60fb      	str	r3, [r7, #12]
				CDC_Transmit_FS((uint8_t *)str2, strlen(str2));
 80007da:	68f8      	ldr	r0, [r7, #12]
 80007dc:	f7ff fcf8 	bl	80001d0 <strlen>
 80007e0:	4603      	mov	r3, r0
 80007e2:	b29b      	uxth	r3, r3
 80007e4:	4619      	mov	r1, r3
 80007e6:	68f8      	ldr	r0, [r7, #12]
 80007e8:	f007 fe52 	bl	8008490 <CDC_Transmit_FS>
				HAL_Delay(1);
 80007ec:	2001      	movs	r0, #1
 80007ee:	f000 f98f 	bl	8000b10 <HAL_Delay>
 80007f2:	e7c5      	b.n	8000780 <TaskSensors+0x8>
			}
			else if(!(result & sensor_bit_1))
 80007f4:	2202      	movs	r2, #2
 80007f6:	697b      	ldr	r3, [r7, #20]
 80007f8:	4013      	ands	r3, r2
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d1c0      	bne.n	8000780 <TaskSensors+0x8>
			{
				HAL_Delay(1);
 80007fe:	2001      	movs	r0, #1
 8000800:	f000 f986 	bl	8000b10 <HAL_Delay>
				char *str3 = "Sensor2 stopped\n";
 8000804:	4b0a      	ldr	r3, [pc, #40]	@ (8000830 <TaskSensors+0xb8>)
 8000806:	613b      	str	r3, [r7, #16]
				CDC_Transmit_FS((uint8_t *)str3, strlen(str3));
 8000808:	6938      	ldr	r0, [r7, #16]
 800080a:	f7ff fce1 	bl	80001d0 <strlen>
 800080e:	4603      	mov	r3, r0
 8000810:	b29b      	uxth	r3, r3
 8000812:	4619      	mov	r1, r3
 8000814:	6938      	ldr	r0, [r7, #16]
 8000816:	f007 fe3b 	bl	8008490 <CDC_Transmit_FS>
				HAL_Delay(1);
 800081a:	2001      	movs	r0, #1
 800081c:	f000 f978 	bl	8000b10 <HAL_Delay>
		result = xEventGroupWaitBits(sensor_control, sensor_all_bits, pdTRUE, pdTRUE, portMAX_DELAY);
 8000820:	e7ae      	b.n	8000780 <TaskSensors+0x8>
 8000822:	bf00      	nop
 8000824:	20000418 	.word	0x20000418
 8000828:	08008f34 	.word	0x08008f34
 800082c:	08008f4c 	.word	0x08008f4c
 8000830:	08008f60 	.word	0x08008f60

08000834 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
//
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	4a04      	ldr	r2, [pc, #16]	@ (8000854 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000842:	4293      	cmp	r3, r2
 8000844:	d101      	bne.n	800084a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000846:	f000 f943 	bl	8000ad0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
//
  /* USER CODE END Callback 1 */
}
 800084a:	bf00      	nop
 800084c:	3708      	adds	r7, #8
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	40000800 	.word	0x40000800

08000858 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800085c:	b672      	cpsid	i
}
 800085e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000860:	bf00      	nop
 8000862:	e7fd      	b.n	8000860 <Error_Handler+0x8>

08000864 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800086a:	2300      	movs	r3, #0
 800086c:	607b      	str	r3, [r7, #4]
 800086e:	4b12      	ldr	r3, [pc, #72]	@ (80008b8 <HAL_MspInit+0x54>)
 8000870:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000872:	4a11      	ldr	r2, [pc, #68]	@ (80008b8 <HAL_MspInit+0x54>)
 8000874:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000878:	6453      	str	r3, [r2, #68]	@ 0x44
 800087a:	4b0f      	ldr	r3, [pc, #60]	@ (80008b8 <HAL_MspInit+0x54>)
 800087c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800087e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000882:	607b      	str	r3, [r7, #4]
 8000884:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000886:	2300      	movs	r3, #0
 8000888:	603b      	str	r3, [r7, #0]
 800088a:	4b0b      	ldr	r3, [pc, #44]	@ (80008b8 <HAL_MspInit+0x54>)
 800088c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800088e:	4a0a      	ldr	r2, [pc, #40]	@ (80008b8 <HAL_MspInit+0x54>)
 8000890:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000894:	6413      	str	r3, [r2, #64]	@ 0x40
 8000896:	4b08      	ldr	r3, [pc, #32]	@ (80008b8 <HAL_MspInit+0x54>)
 8000898:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800089a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800089e:	603b      	str	r3, [r7, #0]
 80008a0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008a2:	2200      	movs	r2, #0
 80008a4:	210f      	movs	r1, #15
 80008a6:	f06f 0001 	mvn.w	r0, #1
 80008aa:	f000 fa0d 	bl	8000cc8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ae:	bf00      	nop
 80008b0:	3708      	adds	r7, #8
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	40023800 	.word	0x40023800

080008bc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b08e      	sub	sp, #56	@ 0x38
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80008c4:	2300      	movs	r3, #0
 80008c6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80008c8:	2300      	movs	r3, #0
 80008ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80008cc:	2300      	movs	r3, #0
 80008ce:	60fb      	str	r3, [r7, #12]
 80008d0:	4b33      	ldr	r3, [pc, #204]	@ (80009a0 <HAL_InitTick+0xe4>)
 80008d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008d4:	4a32      	ldr	r2, [pc, #200]	@ (80009a0 <HAL_InitTick+0xe4>)
 80008d6:	f043 0304 	orr.w	r3, r3, #4
 80008da:	6413      	str	r3, [r2, #64]	@ 0x40
 80008dc:	4b30      	ldr	r3, [pc, #192]	@ (80009a0 <HAL_InitTick+0xe4>)
 80008de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008e0:	f003 0304 	and.w	r3, r3, #4
 80008e4:	60fb      	str	r3, [r7, #12]
 80008e6:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008e8:	f107 0210 	add.w	r2, r7, #16
 80008ec:	f107 0314 	add.w	r3, r7, #20
 80008f0:	4611      	mov	r1, r2
 80008f2:	4618      	mov	r0, r3
 80008f4:	f002 fa9e 	bl	8002e34 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80008f8:	6a3b      	ldr	r3, [r7, #32]
 80008fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80008fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d103      	bne.n	800090a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000902:	f002 fa83 	bl	8002e0c <HAL_RCC_GetPCLK1Freq>
 8000906:	6378      	str	r0, [r7, #52]	@ 0x34
 8000908:	e004      	b.n	8000914 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800090a:	f002 fa7f 	bl	8002e0c <HAL_RCC_GetPCLK1Freq>
 800090e:	4603      	mov	r3, r0
 8000910:	005b      	lsls	r3, r3, #1
 8000912:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000914:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000916:	4a23      	ldr	r2, [pc, #140]	@ (80009a4 <HAL_InitTick+0xe8>)
 8000918:	fba2 2303 	umull	r2, r3, r2, r3
 800091c:	0c9b      	lsrs	r3, r3, #18
 800091e:	3b01      	subs	r3, #1
 8000920:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000922:	4b21      	ldr	r3, [pc, #132]	@ (80009a8 <HAL_InitTick+0xec>)
 8000924:	4a21      	ldr	r2, [pc, #132]	@ (80009ac <HAL_InitTick+0xf0>)
 8000926:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8000928:	4b1f      	ldr	r3, [pc, #124]	@ (80009a8 <HAL_InitTick+0xec>)
 800092a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800092e:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8000930:	4a1d      	ldr	r2, [pc, #116]	@ (80009a8 <HAL_InitTick+0xec>)
 8000932:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000934:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000936:	4b1c      	ldr	r3, [pc, #112]	@ (80009a8 <HAL_InitTick+0xec>)
 8000938:	2200      	movs	r2, #0
 800093a:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800093c:	4b1a      	ldr	r3, [pc, #104]	@ (80009a8 <HAL_InitTick+0xec>)
 800093e:	2200      	movs	r2, #0
 8000940:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000942:	4b19      	ldr	r3, [pc, #100]	@ (80009a8 <HAL_InitTick+0xec>)
 8000944:	2200      	movs	r2, #0
 8000946:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8000948:	4817      	ldr	r0, [pc, #92]	@ (80009a8 <HAL_InitTick+0xec>)
 800094a:	f002 faa5 	bl	8002e98 <HAL_TIM_Base_Init>
 800094e:	4603      	mov	r3, r0
 8000950:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000954:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000958:	2b00      	cmp	r3, #0
 800095a:	d11b      	bne.n	8000994 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 800095c:	4812      	ldr	r0, [pc, #72]	@ (80009a8 <HAL_InitTick+0xec>)
 800095e:	f002 faf5 	bl	8002f4c <HAL_TIM_Base_Start_IT>
 8000962:	4603      	mov	r3, r0
 8000964:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000968:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800096c:	2b00      	cmp	r3, #0
 800096e:	d111      	bne.n	8000994 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000970:	201e      	movs	r0, #30
 8000972:	f000 f9c5 	bl	8000d00 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	2b0f      	cmp	r3, #15
 800097a:	d808      	bhi.n	800098e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 800097c:	2200      	movs	r2, #0
 800097e:	6879      	ldr	r1, [r7, #4]
 8000980:	201e      	movs	r0, #30
 8000982:	f000 f9a1 	bl	8000cc8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000986:	4a0a      	ldr	r2, [pc, #40]	@ (80009b0 <HAL_InitTick+0xf4>)
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	6013      	str	r3, [r2, #0]
 800098c:	e002      	b.n	8000994 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800098e:	2301      	movs	r3, #1
 8000990:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000994:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000998:	4618      	mov	r0, r3
 800099a:	3738      	adds	r7, #56	@ 0x38
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	40023800 	.word	0x40023800
 80009a4:	431bde83 	.word	0x431bde83
 80009a8:	2000041c 	.word	0x2000041c
 80009ac:	40000800 	.word	0x40000800
 80009b0:	20000004 	.word	0x20000004

080009b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009b8:	bf00      	nop
 80009ba:	e7fd      	b.n	80009b8 <NMI_Handler+0x4>

080009bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009c0:	bf00      	nop
 80009c2:	e7fd      	b.n	80009c0 <HardFault_Handler+0x4>

080009c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009c8:	bf00      	nop
 80009ca:	e7fd      	b.n	80009c8 <MemManage_Handler+0x4>

080009cc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009d0:	bf00      	nop
 80009d2:	e7fd      	b.n	80009d0 <BusFault_Handler+0x4>

080009d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009d8:	bf00      	nop
 80009da:	e7fd      	b.n	80009d8 <UsageFault_Handler+0x4>

080009dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009e0:	bf00      	nop
 80009e2:	46bd      	mov	sp, r7
 80009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e8:	4770      	bx	lr
	...

080009ec <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80009f0:	4802      	ldr	r0, [pc, #8]	@ (80009fc <TIM4_IRQHandler+0x10>)
 80009f2:	f002 fb1b 	bl	800302c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80009f6:	bf00      	nop
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	2000041c 	.word	0x2000041c

08000a00 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000a04:	4802      	ldr	r0, [pc, #8]	@ (8000a10 <OTG_FS_IRQHandler+0x10>)
 8000a06:	f000 fc82 	bl	800130e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000a0a:	bf00      	nop
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	2000569c 	.word	0x2000569c

08000a14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a18:	4b06      	ldr	r3, [pc, #24]	@ (8000a34 <SystemInit+0x20>)
 8000a1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a1e:	4a05      	ldr	r2, [pc, #20]	@ (8000a34 <SystemInit+0x20>)
 8000a20:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a24:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a28:	bf00      	nop
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop
 8000a34:	e000ed00 	.word	0xe000ed00

08000a38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000a38:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000a70 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000a3c:	f7ff ffea 	bl	8000a14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a40:	480c      	ldr	r0, [pc, #48]	@ (8000a74 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a42:	490d      	ldr	r1, [pc, #52]	@ (8000a78 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a44:	4a0d      	ldr	r2, [pc, #52]	@ (8000a7c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a48:	e002      	b.n	8000a50 <LoopCopyDataInit>

08000a4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a4e:	3304      	adds	r3, #4

08000a50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a54:	d3f9      	bcc.n	8000a4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a56:	4a0a      	ldr	r2, [pc, #40]	@ (8000a80 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a58:	4c0a      	ldr	r4, [pc, #40]	@ (8000a84 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a5c:	e001      	b.n	8000a62 <LoopFillZerobss>

08000a5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a60:	3204      	adds	r2, #4

08000a62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a64:	d3fb      	bcc.n	8000a5e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a66:	f008 f9cd 	bl	8008e04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a6a:	f7ff fd4b 	bl	8000504 <main>
  bx  lr    
 8000a6e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000a70:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a78:	20000150 	.word	0x20000150
  ldr r2, =_sidata
 8000a7c:	08008fe8 	.word	0x08008fe8
  ldr r2, =_sbss
 8000a80:	20000150 	.word	0x20000150
  ldr r4, =_ebss
 8000a84:	20005ee0 	.word	0x20005ee0

08000a88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a88:	e7fe      	b.n	8000a88 <ADC_IRQHandler>
	...

08000a8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a90:	4b0e      	ldr	r3, [pc, #56]	@ (8000acc <HAL_Init+0x40>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a0d      	ldr	r2, [pc, #52]	@ (8000acc <HAL_Init+0x40>)
 8000a96:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000a9a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a9c:	4b0b      	ldr	r3, [pc, #44]	@ (8000acc <HAL_Init+0x40>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	4a0a      	ldr	r2, [pc, #40]	@ (8000acc <HAL_Init+0x40>)
 8000aa2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000aa6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000aa8:	4b08      	ldr	r3, [pc, #32]	@ (8000acc <HAL_Init+0x40>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4a07      	ldr	r2, [pc, #28]	@ (8000acc <HAL_Init+0x40>)
 8000aae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ab2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ab4:	2003      	movs	r0, #3
 8000ab6:	f000 f8fc 	bl	8000cb2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000aba:	200f      	movs	r0, #15
 8000abc:	f7ff fefe 	bl	80008bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ac0:	f7ff fed0 	bl	8000864 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ac4:	2300      	movs	r3, #0
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	40023c00 	.word	0x40023c00

08000ad0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ad4:	4b06      	ldr	r3, [pc, #24]	@ (8000af0 <HAL_IncTick+0x20>)
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	461a      	mov	r2, r3
 8000ada:	4b06      	ldr	r3, [pc, #24]	@ (8000af4 <HAL_IncTick+0x24>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	4413      	add	r3, r2
 8000ae0:	4a04      	ldr	r2, [pc, #16]	@ (8000af4 <HAL_IncTick+0x24>)
 8000ae2:	6013      	str	r3, [r2, #0]
}
 8000ae4:	bf00      	nop
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop
 8000af0:	20000008 	.word	0x20000008
 8000af4:	20000464 	.word	0x20000464

08000af8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  return uwTick;
 8000afc:	4b03      	ldr	r3, [pc, #12]	@ (8000b0c <HAL_GetTick+0x14>)
 8000afe:	681b      	ldr	r3, [r3, #0]
}
 8000b00:	4618      	mov	r0, r3
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop
 8000b0c:	20000464 	.word	0x20000464

08000b10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b084      	sub	sp, #16
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b18:	f7ff ffee 	bl	8000af8 <HAL_GetTick>
 8000b1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b28:	d005      	beq.n	8000b36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b2a:	4b0a      	ldr	r3, [pc, #40]	@ (8000b54 <HAL_Delay+0x44>)
 8000b2c:	781b      	ldrb	r3, [r3, #0]
 8000b2e:	461a      	mov	r2, r3
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	4413      	add	r3, r2
 8000b34:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b36:	bf00      	nop
 8000b38:	f7ff ffde 	bl	8000af8 <HAL_GetTick>
 8000b3c:	4602      	mov	r2, r0
 8000b3e:	68bb      	ldr	r3, [r7, #8]
 8000b40:	1ad3      	subs	r3, r2, r3
 8000b42:	68fa      	ldr	r2, [r7, #12]
 8000b44:	429a      	cmp	r2, r3
 8000b46:	d8f7      	bhi.n	8000b38 <HAL_Delay+0x28>
  {
  }
}
 8000b48:	bf00      	nop
 8000b4a:	bf00      	nop
 8000b4c:	3710      	adds	r7, #16
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	20000008 	.word	0x20000008

08000b58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b085      	sub	sp, #20
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	f003 0307 	and.w	r3, r3, #7
 8000b66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b68:	4b0c      	ldr	r3, [pc, #48]	@ (8000b9c <__NVIC_SetPriorityGrouping+0x44>)
 8000b6a:	68db      	ldr	r3, [r3, #12]
 8000b6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b6e:	68ba      	ldr	r2, [r7, #8]
 8000b70:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b74:	4013      	ands	r3, r2
 8000b76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b7c:	68bb      	ldr	r3, [r7, #8]
 8000b7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b80:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b84:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b8a:	4a04      	ldr	r2, [pc, #16]	@ (8000b9c <__NVIC_SetPriorityGrouping+0x44>)
 8000b8c:	68bb      	ldr	r3, [r7, #8]
 8000b8e:	60d3      	str	r3, [r2, #12]
}
 8000b90:	bf00      	nop
 8000b92:	3714      	adds	r7, #20
 8000b94:	46bd      	mov	sp, r7
 8000b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9a:	4770      	bx	lr
 8000b9c:	e000ed00 	.word	0xe000ed00

08000ba0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ba4:	4b04      	ldr	r3, [pc, #16]	@ (8000bb8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ba6:	68db      	ldr	r3, [r3, #12]
 8000ba8:	0a1b      	lsrs	r3, r3, #8
 8000baa:	f003 0307 	and.w	r3, r3, #7
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr
 8000bb8:	e000ed00 	.word	0xe000ed00

08000bbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b083      	sub	sp, #12
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	db0b      	blt.n	8000be6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bce:	79fb      	ldrb	r3, [r7, #7]
 8000bd0:	f003 021f 	and.w	r2, r3, #31
 8000bd4:	4907      	ldr	r1, [pc, #28]	@ (8000bf4 <__NVIC_EnableIRQ+0x38>)
 8000bd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bda:	095b      	lsrs	r3, r3, #5
 8000bdc:	2001      	movs	r0, #1
 8000bde:	fa00 f202 	lsl.w	r2, r0, r2
 8000be2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000be6:	bf00      	nop
 8000be8:	370c      	adds	r7, #12
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop
 8000bf4:	e000e100 	.word	0xe000e100

08000bf8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b083      	sub	sp, #12
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	4603      	mov	r3, r0
 8000c00:	6039      	str	r1, [r7, #0]
 8000c02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	db0a      	blt.n	8000c22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	b2da      	uxtb	r2, r3
 8000c10:	490c      	ldr	r1, [pc, #48]	@ (8000c44 <__NVIC_SetPriority+0x4c>)
 8000c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c16:	0112      	lsls	r2, r2, #4
 8000c18:	b2d2      	uxtb	r2, r2
 8000c1a:	440b      	add	r3, r1
 8000c1c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c20:	e00a      	b.n	8000c38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	b2da      	uxtb	r2, r3
 8000c26:	4908      	ldr	r1, [pc, #32]	@ (8000c48 <__NVIC_SetPriority+0x50>)
 8000c28:	79fb      	ldrb	r3, [r7, #7]
 8000c2a:	f003 030f 	and.w	r3, r3, #15
 8000c2e:	3b04      	subs	r3, #4
 8000c30:	0112      	lsls	r2, r2, #4
 8000c32:	b2d2      	uxtb	r2, r2
 8000c34:	440b      	add	r3, r1
 8000c36:	761a      	strb	r2, [r3, #24]
}
 8000c38:	bf00      	nop
 8000c3a:	370c      	adds	r7, #12
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c42:	4770      	bx	lr
 8000c44:	e000e100 	.word	0xe000e100
 8000c48:	e000ed00 	.word	0xe000ed00

08000c4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b089      	sub	sp, #36	@ 0x24
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	60f8      	str	r0, [r7, #12]
 8000c54:	60b9      	str	r1, [r7, #8]
 8000c56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	f003 0307 	and.w	r3, r3, #7
 8000c5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c60:	69fb      	ldr	r3, [r7, #28]
 8000c62:	f1c3 0307 	rsb	r3, r3, #7
 8000c66:	2b04      	cmp	r3, #4
 8000c68:	bf28      	it	cs
 8000c6a:	2304      	movcs	r3, #4
 8000c6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c6e:	69fb      	ldr	r3, [r7, #28]
 8000c70:	3304      	adds	r3, #4
 8000c72:	2b06      	cmp	r3, #6
 8000c74:	d902      	bls.n	8000c7c <NVIC_EncodePriority+0x30>
 8000c76:	69fb      	ldr	r3, [r7, #28]
 8000c78:	3b03      	subs	r3, #3
 8000c7a:	e000      	b.n	8000c7e <NVIC_EncodePriority+0x32>
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c80:	f04f 32ff 	mov.w	r2, #4294967295
 8000c84:	69bb      	ldr	r3, [r7, #24]
 8000c86:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8a:	43da      	mvns	r2, r3
 8000c8c:	68bb      	ldr	r3, [r7, #8]
 8000c8e:	401a      	ands	r2, r3
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c94:	f04f 31ff 	mov.w	r1, #4294967295
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c9e:	43d9      	mvns	r1, r3
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ca4:	4313      	orrs	r3, r2
         );
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	3724      	adds	r7, #36	@ 0x24
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr

08000cb2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cb2:	b580      	push	{r7, lr}
 8000cb4:	b082      	sub	sp, #8
 8000cb6:	af00      	add	r7, sp, #0
 8000cb8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cba:	6878      	ldr	r0, [r7, #4]
 8000cbc:	f7ff ff4c 	bl	8000b58 <__NVIC_SetPriorityGrouping>
}
 8000cc0:	bf00      	nop
 8000cc2:	3708      	adds	r7, #8
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}

08000cc8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b086      	sub	sp, #24
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	4603      	mov	r3, r0
 8000cd0:	60b9      	str	r1, [r7, #8]
 8000cd2:	607a      	str	r2, [r7, #4]
 8000cd4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cda:	f7ff ff61 	bl	8000ba0 <__NVIC_GetPriorityGrouping>
 8000cde:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ce0:	687a      	ldr	r2, [r7, #4]
 8000ce2:	68b9      	ldr	r1, [r7, #8]
 8000ce4:	6978      	ldr	r0, [r7, #20]
 8000ce6:	f7ff ffb1 	bl	8000c4c <NVIC_EncodePriority>
 8000cea:	4602      	mov	r2, r0
 8000cec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cf0:	4611      	mov	r1, r2
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f7ff ff80 	bl	8000bf8 <__NVIC_SetPriority>
}
 8000cf8:	bf00      	nop
 8000cfa:	3718      	adds	r7, #24
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}

08000d00 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	4603      	mov	r3, r0
 8000d08:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f7ff ff54 	bl	8000bbc <__NVIC_EnableIRQ>
}
 8000d14:	bf00      	nop
 8000d16:	3708      	adds	r7, #8
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}

08000d1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b089      	sub	sp, #36	@ 0x24
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
 8000d24:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d26:	2300      	movs	r3, #0
 8000d28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d32:	2300      	movs	r3, #0
 8000d34:	61fb      	str	r3, [r7, #28]
 8000d36:	e16b      	b.n	8001010 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d38:	2201      	movs	r2, #1
 8000d3a:	69fb      	ldr	r3, [r7, #28]
 8000d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d40:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	697a      	ldr	r2, [r7, #20]
 8000d48:	4013      	ands	r3, r2
 8000d4a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d4c:	693a      	ldr	r2, [r7, #16]
 8000d4e:	697b      	ldr	r3, [r7, #20]
 8000d50:	429a      	cmp	r2, r3
 8000d52:	f040 815a 	bne.w	800100a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	685b      	ldr	r3, [r3, #4]
 8000d5a:	f003 0303 	and.w	r3, r3, #3
 8000d5e:	2b01      	cmp	r3, #1
 8000d60:	d005      	beq.n	8000d6e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	685b      	ldr	r3, [r3, #4]
 8000d66:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d6a:	2b02      	cmp	r3, #2
 8000d6c:	d130      	bne.n	8000dd0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	689b      	ldr	r3, [r3, #8]
 8000d72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d74:	69fb      	ldr	r3, [r7, #28]
 8000d76:	005b      	lsls	r3, r3, #1
 8000d78:	2203      	movs	r2, #3
 8000d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7e:	43db      	mvns	r3, r3
 8000d80:	69ba      	ldr	r2, [r7, #24]
 8000d82:	4013      	ands	r3, r2
 8000d84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	68da      	ldr	r2, [r3, #12]
 8000d8a:	69fb      	ldr	r3, [r7, #28]
 8000d8c:	005b      	lsls	r3, r3, #1
 8000d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d92:	69ba      	ldr	r2, [r7, #24]
 8000d94:	4313      	orrs	r3, r2
 8000d96:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	69ba      	ldr	r2, [r7, #24]
 8000d9c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	685b      	ldr	r3, [r3, #4]
 8000da2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000da4:	2201      	movs	r2, #1
 8000da6:	69fb      	ldr	r3, [r7, #28]
 8000da8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dac:	43db      	mvns	r3, r3
 8000dae:	69ba      	ldr	r2, [r7, #24]
 8000db0:	4013      	ands	r3, r2
 8000db2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	091b      	lsrs	r3, r3, #4
 8000dba:	f003 0201 	and.w	r2, r3, #1
 8000dbe:	69fb      	ldr	r3, [r7, #28]
 8000dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc4:	69ba      	ldr	r2, [r7, #24]
 8000dc6:	4313      	orrs	r3, r2
 8000dc8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	69ba      	ldr	r2, [r7, #24]
 8000dce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	685b      	ldr	r3, [r3, #4]
 8000dd4:	f003 0303 	and.w	r3, r3, #3
 8000dd8:	2b03      	cmp	r3, #3
 8000dda:	d017      	beq.n	8000e0c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	68db      	ldr	r3, [r3, #12]
 8000de0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000de2:	69fb      	ldr	r3, [r7, #28]
 8000de4:	005b      	lsls	r3, r3, #1
 8000de6:	2203      	movs	r2, #3
 8000de8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dec:	43db      	mvns	r3, r3
 8000dee:	69ba      	ldr	r2, [r7, #24]
 8000df0:	4013      	ands	r3, r2
 8000df2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	689a      	ldr	r2, [r3, #8]
 8000df8:	69fb      	ldr	r3, [r7, #28]
 8000dfa:	005b      	lsls	r3, r3, #1
 8000dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000e00:	69ba      	ldr	r2, [r7, #24]
 8000e02:	4313      	orrs	r3, r2
 8000e04:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	69ba      	ldr	r2, [r7, #24]
 8000e0a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	f003 0303 	and.w	r3, r3, #3
 8000e14:	2b02      	cmp	r3, #2
 8000e16:	d123      	bne.n	8000e60 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e18:	69fb      	ldr	r3, [r7, #28]
 8000e1a:	08da      	lsrs	r2, r3, #3
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	3208      	adds	r2, #8
 8000e20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e24:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e26:	69fb      	ldr	r3, [r7, #28]
 8000e28:	f003 0307 	and.w	r3, r3, #7
 8000e2c:	009b      	lsls	r3, r3, #2
 8000e2e:	220f      	movs	r2, #15
 8000e30:	fa02 f303 	lsl.w	r3, r2, r3
 8000e34:	43db      	mvns	r3, r3
 8000e36:	69ba      	ldr	r2, [r7, #24]
 8000e38:	4013      	ands	r3, r2
 8000e3a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	691a      	ldr	r2, [r3, #16]
 8000e40:	69fb      	ldr	r3, [r7, #28]
 8000e42:	f003 0307 	and.w	r3, r3, #7
 8000e46:	009b      	lsls	r3, r3, #2
 8000e48:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4c:	69ba      	ldr	r2, [r7, #24]
 8000e4e:	4313      	orrs	r3, r2
 8000e50:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e52:	69fb      	ldr	r3, [r7, #28]
 8000e54:	08da      	lsrs	r2, r3, #3
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	3208      	adds	r2, #8
 8000e5a:	69b9      	ldr	r1, [r7, #24]
 8000e5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e66:	69fb      	ldr	r3, [r7, #28]
 8000e68:	005b      	lsls	r3, r3, #1
 8000e6a:	2203      	movs	r2, #3
 8000e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e70:	43db      	mvns	r3, r3
 8000e72:	69ba      	ldr	r2, [r7, #24]
 8000e74:	4013      	ands	r3, r2
 8000e76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	f003 0203 	and.w	r2, r3, #3
 8000e80:	69fb      	ldr	r3, [r7, #28]
 8000e82:	005b      	lsls	r3, r3, #1
 8000e84:	fa02 f303 	lsl.w	r3, r2, r3
 8000e88:	69ba      	ldr	r2, [r7, #24]
 8000e8a:	4313      	orrs	r3, r2
 8000e8c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	69ba      	ldr	r2, [r7, #24]
 8000e92:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	f000 80b4 	beq.w	800100a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	60fb      	str	r3, [r7, #12]
 8000ea6:	4b60      	ldr	r3, [pc, #384]	@ (8001028 <HAL_GPIO_Init+0x30c>)
 8000ea8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eaa:	4a5f      	ldr	r2, [pc, #380]	@ (8001028 <HAL_GPIO_Init+0x30c>)
 8000eac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000eb0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000eb2:	4b5d      	ldr	r3, [pc, #372]	@ (8001028 <HAL_GPIO_Init+0x30c>)
 8000eb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eb6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000eba:	60fb      	str	r3, [r7, #12]
 8000ebc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ebe:	4a5b      	ldr	r2, [pc, #364]	@ (800102c <HAL_GPIO_Init+0x310>)
 8000ec0:	69fb      	ldr	r3, [r7, #28]
 8000ec2:	089b      	lsrs	r3, r3, #2
 8000ec4:	3302      	adds	r3, #2
 8000ec6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ecc:	69fb      	ldr	r3, [r7, #28]
 8000ece:	f003 0303 	and.w	r3, r3, #3
 8000ed2:	009b      	lsls	r3, r3, #2
 8000ed4:	220f      	movs	r2, #15
 8000ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eda:	43db      	mvns	r3, r3
 8000edc:	69ba      	ldr	r2, [r7, #24]
 8000ede:	4013      	ands	r3, r2
 8000ee0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	4a52      	ldr	r2, [pc, #328]	@ (8001030 <HAL_GPIO_Init+0x314>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d02b      	beq.n	8000f42 <HAL_GPIO_Init+0x226>
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	4a51      	ldr	r2, [pc, #324]	@ (8001034 <HAL_GPIO_Init+0x318>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d025      	beq.n	8000f3e <HAL_GPIO_Init+0x222>
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	4a50      	ldr	r2, [pc, #320]	@ (8001038 <HAL_GPIO_Init+0x31c>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d01f      	beq.n	8000f3a <HAL_GPIO_Init+0x21e>
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	4a4f      	ldr	r2, [pc, #316]	@ (800103c <HAL_GPIO_Init+0x320>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d019      	beq.n	8000f36 <HAL_GPIO_Init+0x21a>
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	4a4e      	ldr	r2, [pc, #312]	@ (8001040 <HAL_GPIO_Init+0x324>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d013      	beq.n	8000f32 <HAL_GPIO_Init+0x216>
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	4a4d      	ldr	r2, [pc, #308]	@ (8001044 <HAL_GPIO_Init+0x328>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d00d      	beq.n	8000f2e <HAL_GPIO_Init+0x212>
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	4a4c      	ldr	r2, [pc, #304]	@ (8001048 <HAL_GPIO_Init+0x32c>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d007      	beq.n	8000f2a <HAL_GPIO_Init+0x20e>
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	4a4b      	ldr	r2, [pc, #300]	@ (800104c <HAL_GPIO_Init+0x330>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d101      	bne.n	8000f26 <HAL_GPIO_Init+0x20a>
 8000f22:	2307      	movs	r3, #7
 8000f24:	e00e      	b.n	8000f44 <HAL_GPIO_Init+0x228>
 8000f26:	2308      	movs	r3, #8
 8000f28:	e00c      	b.n	8000f44 <HAL_GPIO_Init+0x228>
 8000f2a:	2306      	movs	r3, #6
 8000f2c:	e00a      	b.n	8000f44 <HAL_GPIO_Init+0x228>
 8000f2e:	2305      	movs	r3, #5
 8000f30:	e008      	b.n	8000f44 <HAL_GPIO_Init+0x228>
 8000f32:	2304      	movs	r3, #4
 8000f34:	e006      	b.n	8000f44 <HAL_GPIO_Init+0x228>
 8000f36:	2303      	movs	r3, #3
 8000f38:	e004      	b.n	8000f44 <HAL_GPIO_Init+0x228>
 8000f3a:	2302      	movs	r3, #2
 8000f3c:	e002      	b.n	8000f44 <HAL_GPIO_Init+0x228>
 8000f3e:	2301      	movs	r3, #1
 8000f40:	e000      	b.n	8000f44 <HAL_GPIO_Init+0x228>
 8000f42:	2300      	movs	r3, #0
 8000f44:	69fa      	ldr	r2, [r7, #28]
 8000f46:	f002 0203 	and.w	r2, r2, #3
 8000f4a:	0092      	lsls	r2, r2, #2
 8000f4c:	4093      	lsls	r3, r2
 8000f4e:	69ba      	ldr	r2, [r7, #24]
 8000f50:	4313      	orrs	r3, r2
 8000f52:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f54:	4935      	ldr	r1, [pc, #212]	@ (800102c <HAL_GPIO_Init+0x310>)
 8000f56:	69fb      	ldr	r3, [r7, #28]
 8000f58:	089b      	lsrs	r3, r3, #2
 8000f5a:	3302      	adds	r3, #2
 8000f5c:	69ba      	ldr	r2, [r7, #24]
 8000f5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f62:	4b3b      	ldr	r3, [pc, #236]	@ (8001050 <HAL_GPIO_Init+0x334>)
 8000f64:	689b      	ldr	r3, [r3, #8]
 8000f66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f68:	693b      	ldr	r3, [r7, #16]
 8000f6a:	43db      	mvns	r3, r3
 8000f6c:	69ba      	ldr	r2, [r7, #24]
 8000f6e:	4013      	ands	r3, r2
 8000f70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d003      	beq.n	8000f86 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000f7e:	69ba      	ldr	r2, [r7, #24]
 8000f80:	693b      	ldr	r3, [r7, #16]
 8000f82:	4313      	orrs	r3, r2
 8000f84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f86:	4a32      	ldr	r2, [pc, #200]	@ (8001050 <HAL_GPIO_Init+0x334>)
 8000f88:	69bb      	ldr	r3, [r7, #24]
 8000f8a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f8c:	4b30      	ldr	r3, [pc, #192]	@ (8001050 <HAL_GPIO_Init+0x334>)
 8000f8e:	68db      	ldr	r3, [r3, #12]
 8000f90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f92:	693b      	ldr	r3, [r7, #16]
 8000f94:	43db      	mvns	r3, r3
 8000f96:	69ba      	ldr	r2, [r7, #24]
 8000f98:	4013      	ands	r3, r2
 8000f9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d003      	beq.n	8000fb0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000fa8:	69ba      	ldr	r2, [r7, #24]
 8000faa:	693b      	ldr	r3, [r7, #16]
 8000fac:	4313      	orrs	r3, r2
 8000fae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000fb0:	4a27      	ldr	r2, [pc, #156]	@ (8001050 <HAL_GPIO_Init+0x334>)
 8000fb2:	69bb      	ldr	r3, [r7, #24]
 8000fb4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000fb6:	4b26      	ldr	r3, [pc, #152]	@ (8001050 <HAL_GPIO_Init+0x334>)
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fbc:	693b      	ldr	r3, [r7, #16]
 8000fbe:	43db      	mvns	r3, r3
 8000fc0:	69ba      	ldr	r2, [r7, #24]
 8000fc2:	4013      	ands	r3, r2
 8000fc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d003      	beq.n	8000fda <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000fd2:	69ba      	ldr	r2, [r7, #24]
 8000fd4:	693b      	ldr	r3, [r7, #16]
 8000fd6:	4313      	orrs	r3, r2
 8000fd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000fda:	4a1d      	ldr	r2, [pc, #116]	@ (8001050 <HAL_GPIO_Init+0x334>)
 8000fdc:	69bb      	ldr	r3, [r7, #24]
 8000fde:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fe0:	4b1b      	ldr	r3, [pc, #108]	@ (8001050 <HAL_GPIO_Init+0x334>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fe6:	693b      	ldr	r3, [r7, #16]
 8000fe8:	43db      	mvns	r3, r3
 8000fea:	69ba      	ldr	r2, [r7, #24]
 8000fec:	4013      	ands	r3, r2
 8000fee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d003      	beq.n	8001004 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000ffc:	69ba      	ldr	r2, [r7, #24]
 8000ffe:	693b      	ldr	r3, [r7, #16]
 8001000:	4313      	orrs	r3, r2
 8001002:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001004:	4a12      	ldr	r2, [pc, #72]	@ (8001050 <HAL_GPIO_Init+0x334>)
 8001006:	69bb      	ldr	r3, [r7, #24]
 8001008:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	3301      	adds	r3, #1
 800100e:	61fb      	str	r3, [r7, #28]
 8001010:	69fb      	ldr	r3, [r7, #28]
 8001012:	2b0f      	cmp	r3, #15
 8001014:	f67f ae90 	bls.w	8000d38 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001018:	bf00      	nop
 800101a:	bf00      	nop
 800101c:	3724      	adds	r7, #36	@ 0x24
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop
 8001028:	40023800 	.word	0x40023800
 800102c:	40013800 	.word	0x40013800
 8001030:	40020000 	.word	0x40020000
 8001034:	40020400 	.word	0x40020400
 8001038:	40020800 	.word	0x40020800
 800103c:	40020c00 	.word	0x40020c00
 8001040:	40021000 	.word	0x40021000
 8001044:	40021400 	.word	0x40021400
 8001048:	40021800 	.word	0x40021800
 800104c:	40021c00 	.word	0x40021c00
 8001050:	40013c00 	.word	0x40013c00

08001054 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
 800105c:	460b      	mov	r3, r1
 800105e:	807b      	strh	r3, [r7, #2]
 8001060:	4613      	mov	r3, r2
 8001062:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001064:	787b      	ldrb	r3, [r7, #1]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d003      	beq.n	8001072 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800106a:	887a      	ldrh	r2, [r7, #2]
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001070:	e003      	b.n	800107a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001072:	887b      	ldrh	r3, [r7, #2]
 8001074:	041a      	lsls	r2, r3, #16
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	619a      	str	r2, [r3, #24]
}
 800107a:	bf00      	nop
 800107c:	370c      	adds	r7, #12
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr

08001086 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001086:	b580      	push	{r7, lr}
 8001088:	b086      	sub	sp, #24
 800108a:	af02      	add	r7, sp, #8
 800108c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d101      	bne.n	8001098 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001094:	2301      	movs	r3, #1
 8001096:	e101      	b.n	800129c <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80010a4:	b2db      	uxtb	r3, r3
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d106      	bne.n	80010b8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2200      	movs	r2, #0
 80010ae:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80010b2:	6878      	ldr	r0, [r7, #4]
 80010b4:	f007 fb34 	bl	8008720 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2203      	movs	r2, #3
 80010bc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80010c0:	68bb      	ldr	r3, [r7, #8]
 80010c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80010c6:	d102      	bne.n	80010ce <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2200      	movs	r2, #0
 80010cc:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4618      	mov	r0, r3
 80010d4:	f002 fa99 	bl	800360a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	6818      	ldr	r0, [r3, #0]
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	7c1a      	ldrb	r2, [r3, #16]
 80010e0:	f88d 2000 	strb.w	r2, [sp]
 80010e4:	3304      	adds	r3, #4
 80010e6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80010e8:	f002 f978 	bl	80033dc <USB_CoreInit>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d005      	beq.n	80010fe <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2202      	movs	r2, #2
 80010f6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80010fa:	2301      	movs	r3, #1
 80010fc:	e0ce      	b.n	800129c <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	2100      	movs	r1, #0
 8001104:	4618      	mov	r0, r3
 8001106:	f002 fa91 	bl	800362c <USB_SetCurrentMode>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d005      	beq.n	800111c <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2202      	movs	r2, #2
 8001114:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001118:	2301      	movs	r3, #1
 800111a:	e0bf      	b.n	800129c <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800111c:	2300      	movs	r3, #0
 800111e:	73fb      	strb	r3, [r7, #15]
 8001120:	e04a      	b.n	80011b8 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001122:	7bfa      	ldrb	r2, [r7, #15]
 8001124:	6879      	ldr	r1, [r7, #4]
 8001126:	4613      	mov	r3, r2
 8001128:	00db      	lsls	r3, r3, #3
 800112a:	4413      	add	r3, r2
 800112c:	009b      	lsls	r3, r3, #2
 800112e:	440b      	add	r3, r1
 8001130:	3315      	adds	r3, #21
 8001132:	2201      	movs	r2, #1
 8001134:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001136:	7bfa      	ldrb	r2, [r7, #15]
 8001138:	6879      	ldr	r1, [r7, #4]
 800113a:	4613      	mov	r3, r2
 800113c:	00db      	lsls	r3, r3, #3
 800113e:	4413      	add	r3, r2
 8001140:	009b      	lsls	r3, r3, #2
 8001142:	440b      	add	r3, r1
 8001144:	3314      	adds	r3, #20
 8001146:	7bfa      	ldrb	r2, [r7, #15]
 8001148:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800114a:	7bfa      	ldrb	r2, [r7, #15]
 800114c:	7bfb      	ldrb	r3, [r7, #15]
 800114e:	b298      	uxth	r0, r3
 8001150:	6879      	ldr	r1, [r7, #4]
 8001152:	4613      	mov	r3, r2
 8001154:	00db      	lsls	r3, r3, #3
 8001156:	4413      	add	r3, r2
 8001158:	009b      	lsls	r3, r3, #2
 800115a:	440b      	add	r3, r1
 800115c:	332e      	adds	r3, #46	@ 0x2e
 800115e:	4602      	mov	r2, r0
 8001160:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001162:	7bfa      	ldrb	r2, [r7, #15]
 8001164:	6879      	ldr	r1, [r7, #4]
 8001166:	4613      	mov	r3, r2
 8001168:	00db      	lsls	r3, r3, #3
 800116a:	4413      	add	r3, r2
 800116c:	009b      	lsls	r3, r3, #2
 800116e:	440b      	add	r3, r1
 8001170:	3318      	adds	r3, #24
 8001172:	2200      	movs	r2, #0
 8001174:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001176:	7bfa      	ldrb	r2, [r7, #15]
 8001178:	6879      	ldr	r1, [r7, #4]
 800117a:	4613      	mov	r3, r2
 800117c:	00db      	lsls	r3, r3, #3
 800117e:	4413      	add	r3, r2
 8001180:	009b      	lsls	r3, r3, #2
 8001182:	440b      	add	r3, r1
 8001184:	331c      	adds	r3, #28
 8001186:	2200      	movs	r2, #0
 8001188:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800118a:	7bfa      	ldrb	r2, [r7, #15]
 800118c:	6879      	ldr	r1, [r7, #4]
 800118e:	4613      	mov	r3, r2
 8001190:	00db      	lsls	r3, r3, #3
 8001192:	4413      	add	r3, r2
 8001194:	009b      	lsls	r3, r3, #2
 8001196:	440b      	add	r3, r1
 8001198:	3320      	adds	r3, #32
 800119a:	2200      	movs	r2, #0
 800119c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800119e:	7bfa      	ldrb	r2, [r7, #15]
 80011a0:	6879      	ldr	r1, [r7, #4]
 80011a2:	4613      	mov	r3, r2
 80011a4:	00db      	lsls	r3, r3, #3
 80011a6:	4413      	add	r3, r2
 80011a8:	009b      	lsls	r3, r3, #2
 80011aa:	440b      	add	r3, r1
 80011ac:	3324      	adds	r3, #36	@ 0x24
 80011ae:	2200      	movs	r2, #0
 80011b0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011b2:	7bfb      	ldrb	r3, [r7, #15]
 80011b4:	3301      	adds	r3, #1
 80011b6:	73fb      	strb	r3, [r7, #15]
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	791b      	ldrb	r3, [r3, #4]
 80011bc:	7bfa      	ldrb	r2, [r7, #15]
 80011be:	429a      	cmp	r2, r3
 80011c0:	d3af      	bcc.n	8001122 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011c2:	2300      	movs	r3, #0
 80011c4:	73fb      	strb	r3, [r7, #15]
 80011c6:	e044      	b.n	8001252 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80011c8:	7bfa      	ldrb	r2, [r7, #15]
 80011ca:	6879      	ldr	r1, [r7, #4]
 80011cc:	4613      	mov	r3, r2
 80011ce:	00db      	lsls	r3, r3, #3
 80011d0:	4413      	add	r3, r2
 80011d2:	009b      	lsls	r3, r3, #2
 80011d4:	440b      	add	r3, r1
 80011d6:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80011da:	2200      	movs	r2, #0
 80011dc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80011de:	7bfa      	ldrb	r2, [r7, #15]
 80011e0:	6879      	ldr	r1, [r7, #4]
 80011e2:	4613      	mov	r3, r2
 80011e4:	00db      	lsls	r3, r3, #3
 80011e6:	4413      	add	r3, r2
 80011e8:	009b      	lsls	r3, r3, #2
 80011ea:	440b      	add	r3, r1
 80011ec:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80011f0:	7bfa      	ldrb	r2, [r7, #15]
 80011f2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80011f4:	7bfa      	ldrb	r2, [r7, #15]
 80011f6:	6879      	ldr	r1, [r7, #4]
 80011f8:	4613      	mov	r3, r2
 80011fa:	00db      	lsls	r3, r3, #3
 80011fc:	4413      	add	r3, r2
 80011fe:	009b      	lsls	r3, r3, #2
 8001200:	440b      	add	r3, r1
 8001202:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001206:	2200      	movs	r2, #0
 8001208:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800120a:	7bfa      	ldrb	r2, [r7, #15]
 800120c:	6879      	ldr	r1, [r7, #4]
 800120e:	4613      	mov	r3, r2
 8001210:	00db      	lsls	r3, r3, #3
 8001212:	4413      	add	r3, r2
 8001214:	009b      	lsls	r3, r3, #2
 8001216:	440b      	add	r3, r1
 8001218:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800121c:	2200      	movs	r2, #0
 800121e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001220:	7bfa      	ldrb	r2, [r7, #15]
 8001222:	6879      	ldr	r1, [r7, #4]
 8001224:	4613      	mov	r3, r2
 8001226:	00db      	lsls	r3, r3, #3
 8001228:	4413      	add	r3, r2
 800122a:	009b      	lsls	r3, r3, #2
 800122c:	440b      	add	r3, r1
 800122e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001232:	2200      	movs	r2, #0
 8001234:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001236:	7bfa      	ldrb	r2, [r7, #15]
 8001238:	6879      	ldr	r1, [r7, #4]
 800123a:	4613      	mov	r3, r2
 800123c:	00db      	lsls	r3, r3, #3
 800123e:	4413      	add	r3, r2
 8001240:	009b      	lsls	r3, r3, #2
 8001242:	440b      	add	r3, r1
 8001244:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001248:	2200      	movs	r2, #0
 800124a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800124c:	7bfb      	ldrb	r3, [r7, #15]
 800124e:	3301      	adds	r3, #1
 8001250:	73fb      	strb	r3, [r7, #15]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	791b      	ldrb	r3, [r3, #4]
 8001256:	7bfa      	ldrb	r2, [r7, #15]
 8001258:	429a      	cmp	r2, r3
 800125a:	d3b5      	bcc.n	80011c8 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6818      	ldr	r0, [r3, #0]
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	7c1a      	ldrb	r2, [r3, #16]
 8001264:	f88d 2000 	strb.w	r2, [sp]
 8001268:	3304      	adds	r3, #4
 800126a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800126c:	f002 fa2a 	bl	80036c4 <USB_DevInit>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d005      	beq.n	8001282 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2202      	movs	r2, #2
 800127a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800127e:	2301      	movs	r3, #1
 8001280:	e00c      	b.n	800129c <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	2200      	movs	r2, #0
 8001286:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2201      	movs	r2, #1
 800128c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4618      	mov	r0, r3
 8001296:	f003 fa74 	bl	8004782 <USB_DevDisconnect>

  return HAL_OK;
 800129a:	2300      	movs	r3, #0
}
 800129c:	4618      	mov	r0, r3
 800129e:	3710      	adds	r7, #16
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}

080012a4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b084      	sub	sp, #16
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80012b8:	2b01      	cmp	r3, #1
 80012ba:	d101      	bne.n	80012c0 <HAL_PCD_Start+0x1c>
 80012bc:	2302      	movs	r3, #2
 80012be:	e022      	b.n	8001306 <HAL_PCD_Start+0x62>
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2201      	movs	r2, #1
 80012c4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	68db      	ldr	r3, [r3, #12]
 80012cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d009      	beq.n	80012e8 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80012d8:	2b01      	cmp	r3, #1
 80012da:	d105      	bne.n	80012e8 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80012e0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4618      	mov	r0, r3
 80012ee:	f002 f97b 	bl	80035e8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4618      	mov	r0, r3
 80012f8:	f003 fa22 	bl	8004740 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2200      	movs	r2, #0
 8001300:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001304:	2300      	movs	r3, #0
}
 8001306:	4618      	mov	r0, r3
 8001308:	3710      	adds	r7, #16
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}

0800130e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800130e:	b590      	push	{r4, r7, lr}
 8001310:	b08d      	sub	sp, #52	@ 0x34
 8001312:	af00      	add	r7, sp, #0
 8001314:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800131c:	6a3b      	ldr	r3, [r7, #32]
 800131e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4618      	mov	r0, r3
 8001326:	f003 fae0 	bl	80048ea <USB_GetMode>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	f040 848c 	bne.w	8001c4a <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4618      	mov	r0, r3
 8001338:	f003 fa44 	bl	80047c4 <USB_ReadInterrupts>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	f000 8482 	beq.w	8001c48 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001344:	69fb      	ldr	r3, [r7, #28]
 8001346:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800134a:	689b      	ldr	r3, [r3, #8]
 800134c:	0a1b      	lsrs	r3, r3, #8
 800134e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4618      	mov	r0, r3
 800135e:	f003 fa31 	bl	80047c4 <USB_ReadInterrupts>
 8001362:	4603      	mov	r3, r0
 8001364:	f003 0302 	and.w	r3, r3, #2
 8001368:	2b02      	cmp	r3, #2
 800136a:	d107      	bne.n	800137c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	695a      	ldr	r2, [r3, #20]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f002 0202 	and.w	r2, r2, #2
 800137a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4618      	mov	r0, r3
 8001382:	f003 fa1f 	bl	80047c4 <USB_ReadInterrupts>
 8001386:	4603      	mov	r3, r0
 8001388:	f003 0310 	and.w	r3, r3, #16
 800138c:	2b10      	cmp	r3, #16
 800138e:	d161      	bne.n	8001454 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	699a      	ldr	r2, [r3, #24]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f022 0210 	bic.w	r2, r2, #16
 800139e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80013a0:	6a3b      	ldr	r3, [r7, #32]
 80013a2:	6a1b      	ldr	r3, [r3, #32]
 80013a4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80013a6:	69bb      	ldr	r3, [r7, #24]
 80013a8:	f003 020f 	and.w	r2, r3, #15
 80013ac:	4613      	mov	r3, r2
 80013ae:	00db      	lsls	r3, r3, #3
 80013b0:	4413      	add	r3, r2
 80013b2:	009b      	lsls	r3, r3, #2
 80013b4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80013b8:	687a      	ldr	r2, [r7, #4]
 80013ba:	4413      	add	r3, r2
 80013bc:	3304      	adds	r3, #4
 80013be:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80013c0:	69bb      	ldr	r3, [r7, #24]
 80013c2:	0c5b      	lsrs	r3, r3, #17
 80013c4:	f003 030f 	and.w	r3, r3, #15
 80013c8:	2b02      	cmp	r3, #2
 80013ca:	d124      	bne.n	8001416 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80013cc:	69ba      	ldr	r2, [r7, #24]
 80013ce:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80013d2:	4013      	ands	r3, r2
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d035      	beq.n	8001444 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80013dc:	69bb      	ldr	r3, [r7, #24]
 80013de:	091b      	lsrs	r3, r3, #4
 80013e0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80013e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80013e6:	b29b      	uxth	r3, r3
 80013e8:	461a      	mov	r2, r3
 80013ea:	6a38      	ldr	r0, [r7, #32]
 80013ec:	f003 f856 	bl	800449c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	68da      	ldr	r2, [r3, #12]
 80013f4:	69bb      	ldr	r3, [r7, #24]
 80013f6:	091b      	lsrs	r3, r3, #4
 80013f8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80013fc:	441a      	add	r2, r3
 80013fe:	697b      	ldr	r3, [r7, #20]
 8001400:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001402:	697b      	ldr	r3, [r7, #20]
 8001404:	695a      	ldr	r2, [r3, #20]
 8001406:	69bb      	ldr	r3, [r7, #24]
 8001408:	091b      	lsrs	r3, r3, #4
 800140a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800140e:	441a      	add	r2, r3
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	615a      	str	r2, [r3, #20]
 8001414:	e016      	b.n	8001444 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001416:	69bb      	ldr	r3, [r7, #24]
 8001418:	0c5b      	lsrs	r3, r3, #17
 800141a:	f003 030f 	and.w	r3, r3, #15
 800141e:	2b06      	cmp	r3, #6
 8001420:	d110      	bne.n	8001444 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001428:	2208      	movs	r2, #8
 800142a:	4619      	mov	r1, r3
 800142c:	6a38      	ldr	r0, [r7, #32]
 800142e:	f003 f835 	bl	800449c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	695a      	ldr	r2, [r3, #20]
 8001436:	69bb      	ldr	r3, [r7, #24]
 8001438:	091b      	lsrs	r3, r3, #4
 800143a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800143e:	441a      	add	r2, r3
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	699a      	ldr	r2, [r3, #24]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f042 0210 	orr.w	r2, r2, #16
 8001452:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4618      	mov	r0, r3
 800145a:	f003 f9b3 	bl	80047c4 <USB_ReadInterrupts>
 800145e:	4603      	mov	r3, r0
 8001460:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001464:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8001468:	f040 80a7 	bne.w	80015ba <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800146c:	2300      	movs	r3, #0
 800146e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4618      	mov	r0, r3
 8001476:	f003 f9b8 	bl	80047ea <USB_ReadDevAllOutEpInterrupt>
 800147a:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800147c:	e099      	b.n	80015b2 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800147e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001480:	f003 0301 	and.w	r3, r3, #1
 8001484:	2b00      	cmp	r3, #0
 8001486:	f000 808e 	beq.w	80015a6 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001490:	b2d2      	uxtb	r2, r2
 8001492:	4611      	mov	r1, r2
 8001494:	4618      	mov	r0, r3
 8001496:	f003 f9dc 	bl	8004852 <USB_ReadDevOutEPInterrupt>
 800149a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800149c:	693b      	ldr	r3, [r7, #16]
 800149e:	f003 0301 	and.w	r3, r3, #1
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d00c      	beq.n	80014c0 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80014a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014a8:	015a      	lsls	r2, r3, #5
 80014aa:	69fb      	ldr	r3, [r7, #28]
 80014ac:	4413      	add	r3, r2
 80014ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80014b2:	461a      	mov	r2, r3
 80014b4:	2301      	movs	r3, #1
 80014b6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80014b8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80014ba:	6878      	ldr	r0, [r7, #4]
 80014bc:	f000 fea4 	bl	8002208 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80014c0:	693b      	ldr	r3, [r7, #16]
 80014c2:	f003 0308 	and.w	r3, r3, #8
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d00c      	beq.n	80014e4 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80014ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014cc:	015a      	lsls	r2, r3, #5
 80014ce:	69fb      	ldr	r3, [r7, #28]
 80014d0:	4413      	add	r3, r2
 80014d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80014d6:	461a      	mov	r2, r3
 80014d8:	2308      	movs	r3, #8
 80014da:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80014dc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80014de:	6878      	ldr	r0, [r7, #4]
 80014e0:	f000 ff7a 	bl	80023d8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80014e4:	693b      	ldr	r3, [r7, #16]
 80014e6:	f003 0310 	and.w	r3, r3, #16
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d008      	beq.n	8001500 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80014ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014f0:	015a      	lsls	r2, r3, #5
 80014f2:	69fb      	ldr	r3, [r7, #28]
 80014f4:	4413      	add	r3, r2
 80014f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80014fa:	461a      	mov	r2, r3
 80014fc:	2310      	movs	r3, #16
 80014fe:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001500:	693b      	ldr	r3, [r7, #16]
 8001502:	f003 0302 	and.w	r3, r3, #2
 8001506:	2b00      	cmp	r3, #0
 8001508:	d030      	beq.n	800156c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800150a:	6a3b      	ldr	r3, [r7, #32]
 800150c:	695b      	ldr	r3, [r3, #20]
 800150e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001512:	2b80      	cmp	r3, #128	@ 0x80
 8001514:	d109      	bne.n	800152a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001516:	69fb      	ldr	r3, [r7, #28]
 8001518:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	69fa      	ldr	r2, [r7, #28]
 8001520:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001524:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001528:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800152a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800152c:	4613      	mov	r3, r2
 800152e:	00db      	lsls	r3, r3, #3
 8001530:	4413      	add	r3, r2
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001538:	687a      	ldr	r2, [r7, #4]
 800153a:	4413      	add	r3, r2
 800153c:	3304      	adds	r3, #4
 800153e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	78db      	ldrb	r3, [r3, #3]
 8001544:	2b01      	cmp	r3, #1
 8001546:	d108      	bne.n	800155a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	2200      	movs	r2, #0
 800154c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800154e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001550:	b2db      	uxtb	r3, r3
 8001552:	4619      	mov	r1, r3
 8001554:	6878      	ldr	r0, [r7, #4]
 8001556:	f007 f9e9 	bl	800892c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800155a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800155c:	015a      	lsls	r2, r3, #5
 800155e:	69fb      	ldr	r3, [r7, #28]
 8001560:	4413      	add	r3, r2
 8001562:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001566:	461a      	mov	r2, r3
 8001568:	2302      	movs	r3, #2
 800156a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800156c:	693b      	ldr	r3, [r7, #16]
 800156e:	f003 0320 	and.w	r3, r3, #32
 8001572:	2b00      	cmp	r3, #0
 8001574:	d008      	beq.n	8001588 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001578:	015a      	lsls	r2, r3, #5
 800157a:	69fb      	ldr	r3, [r7, #28]
 800157c:	4413      	add	r3, r2
 800157e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001582:	461a      	mov	r2, r3
 8001584:	2320      	movs	r3, #32
 8001586:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001588:	693b      	ldr	r3, [r7, #16]
 800158a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800158e:	2b00      	cmp	r3, #0
 8001590:	d009      	beq.n	80015a6 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001594:	015a      	lsls	r2, r3, #5
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	4413      	add	r3, r2
 800159a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800159e:	461a      	mov	r2, r3
 80015a0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80015a4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80015a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015a8:	3301      	adds	r3, #1
 80015aa:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80015ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015ae:	085b      	lsrs	r3, r3, #1
 80015b0:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80015b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	f47f af62 	bne.w	800147e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4618      	mov	r0, r3
 80015c0:	f003 f900 	bl	80047c4 <USB_ReadInterrupts>
 80015c4:	4603      	mov	r3, r0
 80015c6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80015ca:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80015ce:	f040 80db 	bne.w	8001788 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4618      	mov	r0, r3
 80015d8:	f003 f921 	bl	800481e <USB_ReadDevAllInEpInterrupt>
 80015dc:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80015de:	2300      	movs	r3, #0
 80015e0:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80015e2:	e0cd      	b.n	8001780 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80015e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015e6:	f003 0301 	and.w	r3, r3, #1
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	f000 80c2 	beq.w	8001774 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80015f6:	b2d2      	uxtb	r2, r2
 80015f8:	4611      	mov	r1, r2
 80015fa:	4618      	mov	r0, r3
 80015fc:	f003 f947 	bl	800488e <USB_ReadDevInEPInterrupt>
 8001600:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	f003 0301 	and.w	r3, r3, #1
 8001608:	2b00      	cmp	r3, #0
 800160a:	d057      	beq.n	80016bc <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800160c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800160e:	f003 030f 	and.w	r3, r3, #15
 8001612:	2201      	movs	r2, #1
 8001614:	fa02 f303 	lsl.w	r3, r2, r3
 8001618:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800161a:	69fb      	ldr	r3, [r7, #28]
 800161c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001620:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	43db      	mvns	r3, r3
 8001626:	69f9      	ldr	r1, [r7, #28]
 8001628:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800162c:	4013      	ands	r3, r2
 800162e:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001632:	015a      	lsls	r2, r3, #5
 8001634:	69fb      	ldr	r3, [r7, #28]
 8001636:	4413      	add	r3, r2
 8001638:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800163c:	461a      	mov	r2, r3
 800163e:	2301      	movs	r3, #1
 8001640:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	799b      	ldrb	r3, [r3, #6]
 8001646:	2b01      	cmp	r3, #1
 8001648:	d132      	bne.n	80016b0 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800164a:	6879      	ldr	r1, [r7, #4]
 800164c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800164e:	4613      	mov	r3, r2
 8001650:	00db      	lsls	r3, r3, #3
 8001652:	4413      	add	r3, r2
 8001654:	009b      	lsls	r3, r3, #2
 8001656:	440b      	add	r3, r1
 8001658:	3320      	adds	r3, #32
 800165a:	6819      	ldr	r1, [r3, #0]
 800165c:	6878      	ldr	r0, [r7, #4]
 800165e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001660:	4613      	mov	r3, r2
 8001662:	00db      	lsls	r3, r3, #3
 8001664:	4413      	add	r3, r2
 8001666:	009b      	lsls	r3, r3, #2
 8001668:	4403      	add	r3, r0
 800166a:	331c      	adds	r3, #28
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4419      	add	r1, r3
 8001670:	6878      	ldr	r0, [r7, #4]
 8001672:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001674:	4613      	mov	r3, r2
 8001676:	00db      	lsls	r3, r3, #3
 8001678:	4413      	add	r3, r2
 800167a:	009b      	lsls	r3, r3, #2
 800167c:	4403      	add	r3, r0
 800167e:	3320      	adds	r3, #32
 8001680:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001684:	2b00      	cmp	r3, #0
 8001686:	d113      	bne.n	80016b0 <HAL_PCD_IRQHandler+0x3a2>
 8001688:	6879      	ldr	r1, [r7, #4]
 800168a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800168c:	4613      	mov	r3, r2
 800168e:	00db      	lsls	r3, r3, #3
 8001690:	4413      	add	r3, r2
 8001692:	009b      	lsls	r3, r3, #2
 8001694:	440b      	add	r3, r1
 8001696:	3324      	adds	r3, #36	@ 0x24
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d108      	bne.n	80016b0 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6818      	ldr	r0, [r3, #0]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80016a8:	461a      	mov	r2, r3
 80016aa:	2101      	movs	r1, #1
 80016ac:	f003 f94e 	bl	800494c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80016b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016b2:	b2db      	uxtb	r3, r3
 80016b4:	4619      	mov	r1, r3
 80016b6:	6878      	ldr	r0, [r7, #4]
 80016b8:	f007 f8b3 	bl	8008822 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80016bc:	693b      	ldr	r3, [r7, #16]
 80016be:	f003 0308 	and.w	r3, r3, #8
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d008      	beq.n	80016d8 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80016c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016c8:	015a      	lsls	r2, r3, #5
 80016ca:	69fb      	ldr	r3, [r7, #28]
 80016cc:	4413      	add	r3, r2
 80016ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80016d2:	461a      	mov	r2, r3
 80016d4:	2308      	movs	r3, #8
 80016d6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	f003 0310 	and.w	r3, r3, #16
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d008      	beq.n	80016f4 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80016e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016e4:	015a      	lsls	r2, r3, #5
 80016e6:	69fb      	ldr	r3, [r7, #28]
 80016e8:	4413      	add	r3, r2
 80016ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80016ee:	461a      	mov	r2, r3
 80016f0:	2310      	movs	r3, #16
 80016f2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d008      	beq.n	8001710 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80016fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001700:	015a      	lsls	r2, r3, #5
 8001702:	69fb      	ldr	r3, [r7, #28]
 8001704:	4413      	add	r3, r2
 8001706:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800170a:	461a      	mov	r2, r3
 800170c:	2340      	movs	r3, #64	@ 0x40
 800170e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	f003 0302 	and.w	r3, r3, #2
 8001716:	2b00      	cmp	r3, #0
 8001718:	d023      	beq.n	8001762 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800171a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800171c:	6a38      	ldr	r0, [r7, #32]
 800171e:	f002 f935 	bl	800398c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001722:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001724:	4613      	mov	r3, r2
 8001726:	00db      	lsls	r3, r3, #3
 8001728:	4413      	add	r3, r2
 800172a:	009b      	lsls	r3, r3, #2
 800172c:	3310      	adds	r3, #16
 800172e:	687a      	ldr	r2, [r7, #4]
 8001730:	4413      	add	r3, r2
 8001732:	3304      	adds	r3, #4
 8001734:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	78db      	ldrb	r3, [r3, #3]
 800173a:	2b01      	cmp	r3, #1
 800173c:	d108      	bne.n	8001750 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	2200      	movs	r2, #0
 8001742:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001746:	b2db      	uxtb	r3, r3
 8001748:	4619      	mov	r1, r3
 800174a:	6878      	ldr	r0, [r7, #4]
 800174c:	f007 f900 	bl	8008950 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001752:	015a      	lsls	r2, r3, #5
 8001754:	69fb      	ldr	r3, [r7, #28]
 8001756:	4413      	add	r3, r2
 8001758:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800175c:	461a      	mov	r2, r3
 800175e:	2302      	movs	r3, #2
 8001760:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001768:	2b00      	cmp	r3, #0
 800176a:	d003      	beq.n	8001774 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800176c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800176e:	6878      	ldr	r0, [r7, #4]
 8001770:	f000 fcbd 	bl	80020ee <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001776:	3301      	adds	r3, #1
 8001778:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800177a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800177c:	085b      	lsrs	r3, r3, #1
 800177e:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8001780:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001782:	2b00      	cmp	r3, #0
 8001784:	f47f af2e 	bne.w	80015e4 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4618      	mov	r0, r3
 800178e:	f003 f819 	bl	80047c4 <USB_ReadInterrupts>
 8001792:	4603      	mov	r3, r0
 8001794:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001798:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800179c:	d122      	bne.n	80017e4 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	69fa      	ldr	r2, [r7, #28]
 80017a8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80017ac:	f023 0301 	bic.w	r3, r3, #1
 80017b0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80017b8:	2b01      	cmp	r3, #1
 80017ba:	d108      	bne.n	80017ce <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2200      	movs	r2, #0
 80017c0:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80017c4:	2100      	movs	r1, #0
 80017c6:	6878      	ldr	r0, [r7, #4]
 80017c8:	f000 fea4 	bl	8002514 <HAL_PCDEx_LPM_Callback>
 80017cc:	e002      	b.n	80017d4 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80017ce:	6878      	ldr	r0, [r7, #4]
 80017d0:	f007 f89e 	bl	8008910 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	695a      	ldr	r2, [r3, #20]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80017e2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4618      	mov	r0, r3
 80017ea:	f002 ffeb 	bl	80047c4 <USB_ReadInterrupts>
 80017ee:	4603      	mov	r3, r0
 80017f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80017f4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80017f8:	d112      	bne.n	8001820 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80017fa:	69fb      	ldr	r3, [r7, #28]
 80017fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	f003 0301 	and.w	r3, r3, #1
 8001806:	2b01      	cmp	r3, #1
 8001808:	d102      	bne.n	8001810 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800180a:	6878      	ldr	r0, [r7, #4]
 800180c:	f007 f85a 	bl	80088c4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	695a      	ldr	r2, [r3, #20]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800181e:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4618      	mov	r0, r3
 8001826:	f002 ffcd 	bl	80047c4 <USB_ReadInterrupts>
 800182a:	4603      	mov	r3, r0
 800182c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001830:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001834:	f040 80b7 	bne.w	80019a6 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001838:	69fb      	ldr	r3, [r7, #28]
 800183a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	69fa      	ldr	r2, [r7, #28]
 8001842:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001846:	f023 0301 	bic.w	r3, r3, #1
 800184a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	2110      	movs	r1, #16
 8001852:	4618      	mov	r0, r3
 8001854:	f002 f89a 	bl	800398c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001858:	2300      	movs	r3, #0
 800185a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800185c:	e046      	b.n	80018ec <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800185e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001860:	015a      	lsls	r2, r3, #5
 8001862:	69fb      	ldr	r3, [r7, #28]
 8001864:	4413      	add	r3, r2
 8001866:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800186a:	461a      	mov	r2, r3
 800186c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8001870:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001872:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001874:	015a      	lsls	r2, r3, #5
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	4413      	add	r3, r2
 800187a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001882:	0151      	lsls	r1, r2, #5
 8001884:	69fa      	ldr	r2, [r7, #28]
 8001886:	440a      	add	r2, r1
 8001888:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800188c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001890:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001892:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001894:	015a      	lsls	r2, r3, #5
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	4413      	add	r3, r2
 800189a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800189e:	461a      	mov	r2, r3
 80018a0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80018a4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80018a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018a8:	015a      	lsls	r2, r3, #5
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	4413      	add	r3, r2
 80018ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80018b6:	0151      	lsls	r1, r2, #5
 80018b8:	69fa      	ldr	r2, [r7, #28]
 80018ba:	440a      	add	r2, r1
 80018bc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80018c0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80018c4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80018c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018c8:	015a      	lsls	r2, r3, #5
 80018ca:	69fb      	ldr	r3, [r7, #28]
 80018cc:	4413      	add	r3, r2
 80018ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80018d6:	0151      	lsls	r1, r2, #5
 80018d8:	69fa      	ldr	r2, [r7, #28]
 80018da:	440a      	add	r2, r1
 80018dc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80018e0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80018e4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018e8:	3301      	adds	r3, #1
 80018ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	791b      	ldrb	r3, [r3, #4]
 80018f0:	461a      	mov	r2, r3
 80018f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d3b2      	bcc.n	800185e <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80018f8:	69fb      	ldr	r3, [r7, #28]
 80018fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80018fe:	69db      	ldr	r3, [r3, #28]
 8001900:	69fa      	ldr	r2, [r7, #28]
 8001902:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001906:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800190a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	7bdb      	ldrb	r3, [r3, #15]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d016      	beq.n	8001942 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001914:	69fb      	ldr	r3, [r7, #28]
 8001916:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800191a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800191e:	69fa      	ldr	r2, [r7, #28]
 8001920:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001924:	f043 030b 	orr.w	r3, r3, #11
 8001928:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800192c:	69fb      	ldr	r3, [r7, #28]
 800192e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001932:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001934:	69fa      	ldr	r2, [r7, #28]
 8001936:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800193a:	f043 030b 	orr.w	r3, r3, #11
 800193e:	6453      	str	r3, [r2, #68]	@ 0x44
 8001940:	e015      	b.n	800196e <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001942:	69fb      	ldr	r3, [r7, #28]
 8001944:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001948:	695b      	ldr	r3, [r3, #20]
 800194a:	69fa      	ldr	r2, [r7, #28]
 800194c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001950:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001954:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8001958:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800195a:	69fb      	ldr	r3, [r7, #28]
 800195c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001960:	691b      	ldr	r3, [r3, #16]
 8001962:	69fa      	ldr	r2, [r7, #28]
 8001964:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001968:	f043 030b 	orr.w	r3, r3, #11
 800196c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	69fa      	ldr	r2, [r7, #28]
 8001978:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800197c:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8001980:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6818      	ldr	r0, [r3, #0]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001990:	461a      	mov	r2, r3
 8001992:	f002 ffdb 	bl	800494c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	695a      	ldr	r2, [r3, #20]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80019a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4618      	mov	r0, r3
 80019ac:	f002 ff0a 	bl	80047c4 <USB_ReadInterrupts>
 80019b0:	4603      	mov	r3, r0
 80019b2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80019b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80019ba:	d123      	bne.n	8001a04 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4618      	mov	r0, r3
 80019c2:	f002 ffa0 	bl	8004906 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4618      	mov	r0, r3
 80019cc:	f002 f857 	bl	8003a7e <USB_GetDevSpeed>
 80019d0:	4603      	mov	r3, r0
 80019d2:	461a      	mov	r2, r3
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681c      	ldr	r4, [r3, #0]
 80019dc:	f001 fa0a 	bl	8002df4 <HAL_RCC_GetHCLKFreq>
 80019e0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80019e6:	461a      	mov	r2, r3
 80019e8:	4620      	mov	r0, r4
 80019ea:	f001 fd5b 	bl	80034a4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80019ee:	6878      	ldr	r0, [r7, #4]
 80019f0:	f006 ff3f 	bl	8008872 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	695a      	ldr	r2, [r3, #20]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8001a02:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f002 fedb 	bl	80047c4 <USB_ReadInterrupts>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	f003 0308 	and.w	r3, r3, #8
 8001a14:	2b08      	cmp	r3, #8
 8001a16:	d10a      	bne.n	8001a2e <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001a18:	6878      	ldr	r0, [r7, #4]
 8001a1a:	f006 ff1c 	bl	8008856 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	695a      	ldr	r2, [r3, #20]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f002 0208 	and.w	r2, r2, #8
 8001a2c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4618      	mov	r0, r3
 8001a34:	f002 fec6 	bl	80047c4 <USB_ReadInterrupts>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a3e:	2b80      	cmp	r3, #128	@ 0x80
 8001a40:	d123      	bne.n	8001a8a <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001a42:	6a3b      	ldr	r3, [r7, #32]
 8001a44:	699b      	ldr	r3, [r3, #24]
 8001a46:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001a4a:	6a3b      	ldr	r3, [r7, #32]
 8001a4c:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a4e:	2301      	movs	r3, #1
 8001a50:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a52:	e014      	b.n	8001a7e <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001a54:	6879      	ldr	r1, [r7, #4]
 8001a56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a58:	4613      	mov	r3, r2
 8001a5a:	00db      	lsls	r3, r3, #3
 8001a5c:	4413      	add	r3, r2
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	440b      	add	r3, r1
 8001a62:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	2b01      	cmp	r3, #1
 8001a6a:	d105      	bne.n	8001a78 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001a6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a6e:	b2db      	uxtb	r3, r3
 8001a70:	4619      	mov	r1, r3
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	f000 fb0a 	bl	800208c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a7a:	3301      	adds	r3, #1
 8001a7c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	791b      	ldrb	r3, [r3, #4]
 8001a82:	461a      	mov	r2, r3
 8001a84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d3e4      	bcc.n	8001a54 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f002 fe98 	bl	80047c4 <USB_ReadInterrupts>
 8001a94:	4603      	mov	r3, r0
 8001a96:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a9a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001a9e:	d13c      	bne.n	8001b1a <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	627b      	str	r3, [r7, #36]	@ 0x24
 8001aa4:	e02b      	b.n	8001afe <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aa8:	015a      	lsls	r2, r3, #5
 8001aaa:	69fb      	ldr	r3, [r7, #28]
 8001aac:	4413      	add	r3, r2
 8001aae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001ab6:	6879      	ldr	r1, [r7, #4]
 8001ab8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001aba:	4613      	mov	r3, r2
 8001abc:	00db      	lsls	r3, r3, #3
 8001abe:	4413      	add	r3, r2
 8001ac0:	009b      	lsls	r3, r3, #2
 8001ac2:	440b      	add	r3, r1
 8001ac4:	3318      	adds	r3, #24
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d115      	bne.n	8001af8 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001acc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	da12      	bge.n	8001af8 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001ad2:	6879      	ldr	r1, [r7, #4]
 8001ad4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ad6:	4613      	mov	r3, r2
 8001ad8:	00db      	lsls	r3, r3, #3
 8001ada:	4413      	add	r3, r2
 8001adc:	009b      	lsls	r3, r3, #2
 8001ade:	440b      	add	r3, r1
 8001ae0:	3317      	adds	r3, #23
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ae8:	b2db      	uxtb	r3, r3
 8001aea:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001aee:	b2db      	uxtb	r3, r3
 8001af0:	4619      	mov	r1, r3
 8001af2:	6878      	ldr	r0, [r7, #4]
 8001af4:	f000 faca 	bl	800208c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001af8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001afa:	3301      	adds	r3, #1
 8001afc:	627b      	str	r3, [r7, #36]	@ 0x24
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	791b      	ldrb	r3, [r3, #4]
 8001b02:	461a      	mov	r2, r3
 8001b04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d3cd      	bcc.n	8001aa6 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	695a      	ldr	r2, [r3, #20]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8001b18:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f002 fe50 	bl	80047c4 <USB_ReadInterrupts>
 8001b24:	4603      	mov	r3, r0
 8001b26:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b2a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001b2e:	d156      	bne.n	8001bde <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b30:	2301      	movs	r3, #1
 8001b32:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b34:	e045      	b.n	8001bc2 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b38:	015a      	lsls	r2, r3, #5
 8001b3a:	69fb      	ldr	r3, [r7, #28]
 8001b3c:	4413      	add	r3, r2
 8001b3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001b46:	6879      	ldr	r1, [r7, #4]
 8001b48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b4a:	4613      	mov	r3, r2
 8001b4c:	00db      	lsls	r3, r3, #3
 8001b4e:	4413      	add	r3, r2
 8001b50:	009b      	lsls	r3, r3, #2
 8001b52:	440b      	add	r3, r1
 8001b54:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	2b01      	cmp	r3, #1
 8001b5c:	d12e      	bne.n	8001bbc <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001b5e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	da2b      	bge.n	8001bbc <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001b64:	69bb      	ldr	r3, [r7, #24]
 8001b66:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8001b70:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d121      	bne.n	8001bbc <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001b78:	6879      	ldr	r1, [r7, #4]
 8001b7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b7c:	4613      	mov	r3, r2
 8001b7e:	00db      	lsls	r3, r3, #3
 8001b80:	4413      	add	r3, r2
 8001b82:	009b      	lsls	r3, r3, #2
 8001b84:	440b      	add	r3, r1
 8001b86:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001b8e:	6a3b      	ldr	r3, [r7, #32]
 8001b90:	699b      	ldr	r3, [r3, #24]
 8001b92:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001b96:	6a3b      	ldr	r3, [r7, #32]
 8001b98:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001b9a:	6a3b      	ldr	r3, [r7, #32]
 8001b9c:	695b      	ldr	r3, [r3, #20]
 8001b9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d10a      	bne.n	8001bbc <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001ba6:	69fb      	ldr	r3, [r7, #28]
 8001ba8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	69fa      	ldr	r2, [r7, #28]
 8001bb0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001bb4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001bb8:	6053      	str	r3, [r2, #4]
            break;
 8001bba:	e008      	b.n	8001bce <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001bbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bbe:	3301      	adds	r3, #1
 8001bc0:	627b      	str	r3, [r7, #36]	@ 0x24
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	791b      	ldrb	r3, [r3, #4]
 8001bc6:	461a      	mov	r2, r3
 8001bc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d3b3      	bcc.n	8001b36 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	695a      	ldr	r2, [r3, #20]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8001bdc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4618      	mov	r0, r3
 8001be4:	f002 fdee 	bl	80047c4 <USB_ReadInterrupts>
 8001be8:	4603      	mov	r3, r0
 8001bea:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001bee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001bf2:	d10a      	bne.n	8001c0a <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001bf4:	6878      	ldr	r0, [r7, #4]
 8001bf6:	f006 febd 	bl	8008974 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	695a      	ldr	r2, [r3, #20]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8001c08:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f002 fdd8 	bl	80047c4 <USB_ReadInterrupts>
 8001c14:	4603      	mov	r3, r0
 8001c16:	f003 0304 	and.w	r3, r3, #4
 8001c1a:	2b04      	cmp	r3, #4
 8001c1c:	d115      	bne.n	8001c4a <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001c26:	69bb      	ldr	r3, [r7, #24]
 8001c28:	f003 0304 	and.w	r3, r3, #4
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d002      	beq.n	8001c36 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001c30:	6878      	ldr	r0, [r7, #4]
 8001c32:	f006 fead 	bl	8008990 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	6859      	ldr	r1, [r3, #4]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	69ba      	ldr	r2, [r7, #24]
 8001c42:	430a      	orrs	r2, r1
 8001c44:	605a      	str	r2, [r3, #4]
 8001c46:	e000      	b.n	8001c4a <HAL_PCD_IRQHandler+0x93c>
      return;
 8001c48:	bf00      	nop
    }
  }
}
 8001c4a:	3734      	adds	r7, #52	@ 0x34
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd90      	pop	{r4, r7, pc}

08001c50 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
 8001c58:	460b      	mov	r3, r1
 8001c5a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	d101      	bne.n	8001c6a <HAL_PCD_SetAddress+0x1a>
 8001c66:	2302      	movs	r3, #2
 8001c68:	e012      	b.n	8001c90 <HAL_PCD_SetAddress+0x40>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	78fa      	ldrb	r2, [r7, #3]
 8001c76:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	78fa      	ldrb	r2, [r7, #3]
 8001c7e:	4611      	mov	r1, r2
 8001c80:	4618      	mov	r0, r3
 8001c82:	f002 fd37 	bl	80046f4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2200      	movs	r2, #0
 8001c8a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001c8e:	2300      	movs	r3, #0
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	3708      	adds	r7, #8
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}

08001c98 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b084      	sub	sp, #16
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
 8001ca0:	4608      	mov	r0, r1
 8001ca2:	4611      	mov	r1, r2
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	70fb      	strb	r3, [r7, #3]
 8001caa:	460b      	mov	r3, r1
 8001cac:	803b      	strh	r3, [r7, #0]
 8001cae:	4613      	mov	r3, r2
 8001cb0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001cb6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	da0f      	bge.n	8001cde <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001cbe:	78fb      	ldrb	r3, [r7, #3]
 8001cc0:	f003 020f 	and.w	r2, r3, #15
 8001cc4:	4613      	mov	r3, r2
 8001cc6:	00db      	lsls	r3, r3, #3
 8001cc8:	4413      	add	r3, r2
 8001cca:	009b      	lsls	r3, r3, #2
 8001ccc:	3310      	adds	r3, #16
 8001cce:	687a      	ldr	r2, [r7, #4]
 8001cd0:	4413      	add	r3, r2
 8001cd2:	3304      	adds	r3, #4
 8001cd4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	2201      	movs	r2, #1
 8001cda:	705a      	strb	r2, [r3, #1]
 8001cdc:	e00f      	b.n	8001cfe <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001cde:	78fb      	ldrb	r3, [r7, #3]
 8001ce0:	f003 020f 	and.w	r2, r3, #15
 8001ce4:	4613      	mov	r3, r2
 8001ce6:	00db      	lsls	r3, r3, #3
 8001ce8:	4413      	add	r3, r2
 8001cea:	009b      	lsls	r3, r3, #2
 8001cec:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001cf0:	687a      	ldr	r2, [r7, #4]
 8001cf2:	4413      	add	r3, r2
 8001cf4:	3304      	adds	r3, #4
 8001cf6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001cfe:	78fb      	ldrb	r3, [r7, #3]
 8001d00:	f003 030f 	and.w	r3, r3, #15
 8001d04:	b2da      	uxtb	r2, r3
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8001d0a:	883b      	ldrh	r3, [r7, #0]
 8001d0c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	78ba      	ldrb	r2, [r7, #2]
 8001d18:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	785b      	ldrb	r3, [r3, #1]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d004      	beq.n	8001d2c <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	781b      	ldrb	r3, [r3, #0]
 8001d26:	461a      	mov	r2, r3
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001d2c:	78bb      	ldrb	r3, [r7, #2]
 8001d2e:	2b02      	cmp	r3, #2
 8001d30:	d102      	bne.n	8001d38 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	2200      	movs	r2, #0
 8001d36:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001d3e:	2b01      	cmp	r3, #1
 8001d40:	d101      	bne.n	8001d46 <HAL_PCD_EP_Open+0xae>
 8001d42:	2302      	movs	r3, #2
 8001d44:	e00e      	b.n	8001d64 <HAL_PCD_EP_Open+0xcc>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2201      	movs	r2, #1
 8001d4a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	68f9      	ldr	r1, [r7, #12]
 8001d54:	4618      	mov	r0, r3
 8001d56:	f001 feb7 	bl	8003ac8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8001d62:	7afb      	ldrb	r3, [r7, #11]
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	3710      	adds	r7, #16
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}

08001d6c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b084      	sub	sp, #16
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	460b      	mov	r3, r1
 8001d76:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001d78:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	da0f      	bge.n	8001da0 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d80:	78fb      	ldrb	r3, [r7, #3]
 8001d82:	f003 020f 	and.w	r2, r3, #15
 8001d86:	4613      	mov	r3, r2
 8001d88:	00db      	lsls	r3, r3, #3
 8001d8a:	4413      	add	r3, r2
 8001d8c:	009b      	lsls	r3, r3, #2
 8001d8e:	3310      	adds	r3, #16
 8001d90:	687a      	ldr	r2, [r7, #4]
 8001d92:	4413      	add	r3, r2
 8001d94:	3304      	adds	r3, #4
 8001d96:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	705a      	strb	r2, [r3, #1]
 8001d9e:	e00f      	b.n	8001dc0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001da0:	78fb      	ldrb	r3, [r7, #3]
 8001da2:	f003 020f 	and.w	r2, r3, #15
 8001da6:	4613      	mov	r3, r2
 8001da8:	00db      	lsls	r3, r3, #3
 8001daa:	4413      	add	r3, r2
 8001dac:	009b      	lsls	r3, r3, #2
 8001dae:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001db2:	687a      	ldr	r2, [r7, #4]
 8001db4:	4413      	add	r3, r2
 8001db6:	3304      	adds	r3, #4
 8001db8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001dc0:	78fb      	ldrb	r3, [r7, #3]
 8001dc2:	f003 030f 	and.w	r3, r3, #15
 8001dc6:	b2da      	uxtb	r2, r3
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001dd2:	2b01      	cmp	r3, #1
 8001dd4:	d101      	bne.n	8001dda <HAL_PCD_EP_Close+0x6e>
 8001dd6:	2302      	movs	r3, #2
 8001dd8:	e00e      	b.n	8001df8 <HAL_PCD_EP_Close+0x8c>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2201      	movs	r2, #1
 8001dde:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	68f9      	ldr	r1, [r7, #12]
 8001de8:	4618      	mov	r0, r3
 8001dea:	f001 fef5 	bl	8003bd8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2200      	movs	r2, #0
 8001df2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8001df6:	2300      	movs	r3, #0
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	3710      	adds	r7, #16
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}

08001e00 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b086      	sub	sp, #24
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	60f8      	str	r0, [r7, #12]
 8001e08:	607a      	str	r2, [r7, #4]
 8001e0a:	603b      	str	r3, [r7, #0]
 8001e0c:	460b      	mov	r3, r1
 8001e0e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e10:	7afb      	ldrb	r3, [r7, #11]
 8001e12:	f003 020f 	and.w	r2, r3, #15
 8001e16:	4613      	mov	r3, r2
 8001e18:	00db      	lsls	r3, r3, #3
 8001e1a:	4413      	add	r3, r2
 8001e1c:	009b      	lsls	r3, r3, #2
 8001e1e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001e22:	68fa      	ldr	r2, [r7, #12]
 8001e24:	4413      	add	r3, r2
 8001e26:	3304      	adds	r3, #4
 8001e28:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	687a      	ldr	r2, [r7, #4]
 8001e2e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	683a      	ldr	r2, [r7, #0]
 8001e34:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	2200      	movs	r2, #0
 8001e3a:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e42:	7afb      	ldrb	r3, [r7, #11]
 8001e44:	f003 030f 	and.w	r3, r3, #15
 8001e48:	b2da      	uxtb	r2, r3
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	799b      	ldrb	r3, [r3, #6]
 8001e52:	2b01      	cmp	r3, #1
 8001e54:	d102      	bne.n	8001e5c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001e56:	687a      	ldr	r2, [r7, #4]
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	6818      	ldr	r0, [r3, #0]
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	799b      	ldrb	r3, [r3, #6]
 8001e64:	461a      	mov	r2, r3
 8001e66:	6979      	ldr	r1, [r7, #20]
 8001e68:	f001 ff92 	bl	8003d90 <USB_EPStartXfer>

  return HAL_OK;
 8001e6c:	2300      	movs	r3, #0
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	3718      	adds	r7, #24
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}

08001e76 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8001e76:	b480      	push	{r7}
 8001e78:	b083      	sub	sp, #12
 8001e7a:	af00      	add	r7, sp, #0
 8001e7c:	6078      	str	r0, [r7, #4]
 8001e7e:	460b      	mov	r3, r1
 8001e80:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001e82:	78fb      	ldrb	r3, [r7, #3]
 8001e84:	f003 020f 	and.w	r2, r3, #15
 8001e88:	6879      	ldr	r1, [r7, #4]
 8001e8a:	4613      	mov	r3, r2
 8001e8c:	00db      	lsls	r3, r3, #3
 8001e8e:	4413      	add	r3, r2
 8001e90:	009b      	lsls	r3, r3, #2
 8001e92:	440b      	add	r3, r1
 8001e94:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8001e98:	681b      	ldr	r3, [r3, #0]
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	370c      	adds	r7, #12
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr

08001ea6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001ea6:	b580      	push	{r7, lr}
 8001ea8:	b086      	sub	sp, #24
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	60f8      	str	r0, [r7, #12]
 8001eae:	607a      	str	r2, [r7, #4]
 8001eb0:	603b      	str	r3, [r7, #0]
 8001eb2:	460b      	mov	r3, r1
 8001eb4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001eb6:	7afb      	ldrb	r3, [r7, #11]
 8001eb8:	f003 020f 	and.w	r2, r3, #15
 8001ebc:	4613      	mov	r3, r2
 8001ebe:	00db      	lsls	r3, r3, #3
 8001ec0:	4413      	add	r3, r2
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	3310      	adds	r3, #16
 8001ec6:	68fa      	ldr	r2, [r7, #12]
 8001ec8:	4413      	add	r3, r2
 8001eca:	3304      	adds	r3, #4
 8001ecc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	687a      	ldr	r2, [r7, #4]
 8001ed2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	683a      	ldr	r2, [r7, #0]
 8001ed8:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	2200      	movs	r2, #0
 8001ede:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ee6:	7afb      	ldrb	r3, [r7, #11]
 8001ee8:	f003 030f 	and.w	r3, r3, #15
 8001eec:	b2da      	uxtb	r2, r3
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	799b      	ldrb	r3, [r3, #6]
 8001ef6:	2b01      	cmp	r3, #1
 8001ef8:	d102      	bne.n	8001f00 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001efa:	687a      	ldr	r2, [r7, #4]
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	6818      	ldr	r0, [r3, #0]
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	799b      	ldrb	r3, [r3, #6]
 8001f08:	461a      	mov	r2, r3
 8001f0a:	6979      	ldr	r1, [r7, #20]
 8001f0c:	f001 ff40 	bl	8003d90 <USB_EPStartXfer>

  return HAL_OK;
 8001f10:	2300      	movs	r3, #0
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	3718      	adds	r7, #24
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}

08001f1a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f1a:	b580      	push	{r7, lr}
 8001f1c:	b084      	sub	sp, #16
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	6078      	str	r0, [r7, #4]
 8001f22:	460b      	mov	r3, r1
 8001f24:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001f26:	78fb      	ldrb	r3, [r7, #3]
 8001f28:	f003 030f 	and.w	r3, r3, #15
 8001f2c:	687a      	ldr	r2, [r7, #4]
 8001f2e:	7912      	ldrb	r2, [r2, #4]
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d901      	bls.n	8001f38 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001f34:	2301      	movs	r3, #1
 8001f36:	e04f      	b.n	8001fd8 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001f38:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	da0f      	bge.n	8001f60 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f40:	78fb      	ldrb	r3, [r7, #3]
 8001f42:	f003 020f 	and.w	r2, r3, #15
 8001f46:	4613      	mov	r3, r2
 8001f48:	00db      	lsls	r3, r3, #3
 8001f4a:	4413      	add	r3, r2
 8001f4c:	009b      	lsls	r3, r3, #2
 8001f4e:	3310      	adds	r3, #16
 8001f50:	687a      	ldr	r2, [r7, #4]
 8001f52:	4413      	add	r3, r2
 8001f54:	3304      	adds	r3, #4
 8001f56:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	705a      	strb	r2, [r3, #1]
 8001f5e:	e00d      	b.n	8001f7c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001f60:	78fa      	ldrb	r2, [r7, #3]
 8001f62:	4613      	mov	r3, r2
 8001f64:	00db      	lsls	r3, r3, #3
 8001f66:	4413      	add	r3, r2
 8001f68:	009b      	lsls	r3, r3, #2
 8001f6a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001f6e:	687a      	ldr	r2, [r7, #4]
 8001f70:	4413      	add	r3, r2
 8001f72:	3304      	adds	r3, #4
 8001f74:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	2201      	movs	r2, #1
 8001f80:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f82:	78fb      	ldrb	r3, [r7, #3]
 8001f84:	f003 030f 	and.w	r3, r3, #15
 8001f88:	b2da      	uxtb	r2, r3
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	d101      	bne.n	8001f9c <HAL_PCD_EP_SetStall+0x82>
 8001f98:	2302      	movs	r3, #2
 8001f9a:	e01d      	b.n	8001fd8 <HAL_PCD_EP_SetStall+0xbe>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	68f9      	ldr	r1, [r7, #12]
 8001faa:	4618      	mov	r0, r3
 8001fac:	f002 face 	bl	800454c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001fb0:	78fb      	ldrb	r3, [r7, #3]
 8001fb2:	f003 030f 	and.w	r3, r3, #15
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d109      	bne.n	8001fce <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6818      	ldr	r0, [r3, #0]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	7999      	ldrb	r1, [r3, #6]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001fc8:	461a      	mov	r2, r3
 8001fca:	f002 fcbf 	bl	800494c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001fd6:	2300      	movs	r3, #0
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	3710      	adds	r7, #16
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}

08001fe0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b084      	sub	sp, #16
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
 8001fe8:	460b      	mov	r3, r1
 8001fea:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001fec:	78fb      	ldrb	r3, [r7, #3]
 8001fee:	f003 030f 	and.w	r3, r3, #15
 8001ff2:	687a      	ldr	r2, [r7, #4]
 8001ff4:	7912      	ldrb	r2, [r2, #4]
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d901      	bls.n	8001ffe <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e042      	b.n	8002084 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001ffe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002002:	2b00      	cmp	r3, #0
 8002004:	da0f      	bge.n	8002026 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002006:	78fb      	ldrb	r3, [r7, #3]
 8002008:	f003 020f 	and.w	r2, r3, #15
 800200c:	4613      	mov	r3, r2
 800200e:	00db      	lsls	r3, r3, #3
 8002010:	4413      	add	r3, r2
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	3310      	adds	r3, #16
 8002016:	687a      	ldr	r2, [r7, #4]
 8002018:	4413      	add	r3, r2
 800201a:	3304      	adds	r3, #4
 800201c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	2201      	movs	r2, #1
 8002022:	705a      	strb	r2, [r3, #1]
 8002024:	e00f      	b.n	8002046 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002026:	78fb      	ldrb	r3, [r7, #3]
 8002028:	f003 020f 	and.w	r2, r3, #15
 800202c:	4613      	mov	r3, r2
 800202e:	00db      	lsls	r3, r3, #3
 8002030:	4413      	add	r3, r2
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002038:	687a      	ldr	r2, [r7, #4]
 800203a:	4413      	add	r3, r2
 800203c:	3304      	adds	r3, #4
 800203e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	2200      	movs	r2, #0
 8002044:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	2200      	movs	r2, #0
 800204a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800204c:	78fb      	ldrb	r3, [r7, #3]
 800204e:	f003 030f 	and.w	r3, r3, #15
 8002052:	b2da      	uxtb	r2, r3
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800205e:	2b01      	cmp	r3, #1
 8002060:	d101      	bne.n	8002066 <HAL_PCD_EP_ClrStall+0x86>
 8002062:	2302      	movs	r3, #2
 8002064:	e00e      	b.n	8002084 <HAL_PCD_EP_ClrStall+0xa4>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2201      	movs	r2, #1
 800206a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	68f9      	ldr	r1, [r7, #12]
 8002074:	4618      	mov	r0, r3
 8002076:	f002 fad7 	bl	8004628 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2200      	movs	r2, #0
 800207e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002082:	2300      	movs	r3, #0
}
 8002084:	4618      	mov	r0, r3
 8002086:	3710      	adds	r7, #16
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}

0800208c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b084      	sub	sp, #16
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
 8002094:	460b      	mov	r3, r1
 8002096:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002098:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800209c:	2b00      	cmp	r3, #0
 800209e:	da0c      	bge.n	80020ba <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020a0:	78fb      	ldrb	r3, [r7, #3]
 80020a2:	f003 020f 	and.w	r2, r3, #15
 80020a6:	4613      	mov	r3, r2
 80020a8:	00db      	lsls	r3, r3, #3
 80020aa:	4413      	add	r3, r2
 80020ac:	009b      	lsls	r3, r3, #2
 80020ae:	3310      	adds	r3, #16
 80020b0:	687a      	ldr	r2, [r7, #4]
 80020b2:	4413      	add	r3, r2
 80020b4:	3304      	adds	r3, #4
 80020b6:	60fb      	str	r3, [r7, #12]
 80020b8:	e00c      	b.n	80020d4 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80020ba:	78fb      	ldrb	r3, [r7, #3]
 80020bc:	f003 020f 	and.w	r2, r3, #15
 80020c0:	4613      	mov	r3, r2
 80020c2:	00db      	lsls	r3, r3, #3
 80020c4:	4413      	add	r3, r2
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80020cc:	687a      	ldr	r2, [r7, #4]
 80020ce:	4413      	add	r3, r2
 80020d0:	3304      	adds	r3, #4
 80020d2:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	68f9      	ldr	r1, [r7, #12]
 80020da:	4618      	mov	r0, r3
 80020dc:	f002 f8f6 	bl	80042cc <USB_EPStopXfer>
 80020e0:	4603      	mov	r3, r0
 80020e2:	72fb      	strb	r3, [r7, #11]

  return ret;
 80020e4:	7afb      	ldrb	r3, [r7, #11]
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3710      	adds	r7, #16
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}

080020ee <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80020ee:	b580      	push	{r7, lr}
 80020f0:	b08a      	sub	sp, #40	@ 0x28
 80020f2:	af02      	add	r7, sp, #8
 80020f4:	6078      	str	r0, [r7, #4]
 80020f6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002102:	683a      	ldr	r2, [r7, #0]
 8002104:	4613      	mov	r3, r2
 8002106:	00db      	lsls	r3, r3, #3
 8002108:	4413      	add	r3, r2
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	3310      	adds	r3, #16
 800210e:	687a      	ldr	r2, [r7, #4]
 8002110:	4413      	add	r3, r2
 8002112:	3304      	adds	r3, #4
 8002114:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	695a      	ldr	r2, [r3, #20]
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	691b      	ldr	r3, [r3, #16]
 800211e:	429a      	cmp	r2, r3
 8002120:	d901      	bls.n	8002126 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e06b      	b.n	80021fe <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	691a      	ldr	r2, [r3, #16]
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	695b      	ldr	r3, [r3, #20]
 800212e:	1ad3      	subs	r3, r2, r3
 8002130:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	69fa      	ldr	r2, [r7, #28]
 8002138:	429a      	cmp	r2, r3
 800213a:	d902      	bls.n	8002142 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	3303      	adds	r3, #3
 8002146:	089b      	lsrs	r3, r3, #2
 8002148:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800214a:	e02a      	b.n	80021a2 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	691a      	ldr	r2, [r3, #16]
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	695b      	ldr	r3, [r3, #20]
 8002154:	1ad3      	subs	r3, r2, r3
 8002156:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	69fa      	ldr	r2, [r7, #28]
 800215e:	429a      	cmp	r2, r3
 8002160:	d902      	bls.n	8002168 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002168:	69fb      	ldr	r3, [r7, #28]
 800216a:	3303      	adds	r3, #3
 800216c:	089b      	lsrs	r3, r3, #2
 800216e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	68d9      	ldr	r1, [r3, #12]
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	b2da      	uxtb	r2, r3
 8002178:	69fb      	ldr	r3, [r7, #28]
 800217a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002180:	9300      	str	r3, [sp, #0]
 8002182:	4603      	mov	r3, r0
 8002184:	6978      	ldr	r0, [r7, #20]
 8002186:	f002 f94b 	bl	8004420 <USB_WritePacket>

    ep->xfer_buff  += len;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	68da      	ldr	r2, [r3, #12]
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	441a      	add	r2, r3
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	695a      	ldr	r2, [r3, #20]
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	441a      	add	r2, r3
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	015a      	lsls	r2, r3, #5
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	4413      	add	r3, r2
 80021aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80021ae:	699b      	ldr	r3, [r3, #24]
 80021b0:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80021b2:	69ba      	ldr	r2, [r7, #24]
 80021b4:	429a      	cmp	r2, r3
 80021b6:	d809      	bhi.n	80021cc <PCD_WriteEmptyTxFifo+0xde>
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	695a      	ldr	r2, [r3, #20]
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d203      	bcs.n	80021cc <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	691b      	ldr	r3, [r3, #16]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d1bf      	bne.n	800214c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	691a      	ldr	r2, [r3, #16]
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	695b      	ldr	r3, [r3, #20]
 80021d4:	429a      	cmp	r2, r3
 80021d6:	d811      	bhi.n	80021fc <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	f003 030f 	and.w	r3, r3, #15
 80021de:	2201      	movs	r2, #1
 80021e0:	fa02 f303 	lsl.w	r3, r2, r3
 80021e4:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80021ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	43db      	mvns	r3, r3
 80021f2:	6939      	ldr	r1, [r7, #16]
 80021f4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80021f8:	4013      	ands	r3, r2
 80021fa:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80021fc:	2300      	movs	r3, #0
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3720      	adds	r7, #32
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
	...

08002208 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b088      	sub	sp, #32
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
 8002210:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002218:	69fb      	ldr	r3, [r7, #28]
 800221a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800221c:	69fb      	ldr	r3, [r7, #28]
 800221e:	333c      	adds	r3, #60	@ 0x3c
 8002220:	3304      	adds	r3, #4
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	015a      	lsls	r2, r3, #5
 800222a:	69bb      	ldr	r3, [r7, #24]
 800222c:	4413      	add	r3, r2
 800222e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	799b      	ldrb	r3, [r3, #6]
 800223a:	2b01      	cmp	r3, #1
 800223c:	d17b      	bne.n	8002336 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	f003 0308 	and.w	r3, r3, #8
 8002244:	2b00      	cmp	r3, #0
 8002246:	d015      	beq.n	8002274 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	4a61      	ldr	r2, [pc, #388]	@ (80023d0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800224c:	4293      	cmp	r3, r2
 800224e:	f240 80b9 	bls.w	80023c4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002258:	2b00      	cmp	r3, #0
 800225a:	f000 80b3 	beq.w	80023c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	015a      	lsls	r2, r3, #5
 8002262:	69bb      	ldr	r3, [r7, #24]
 8002264:	4413      	add	r3, r2
 8002266:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800226a:	461a      	mov	r2, r3
 800226c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002270:	6093      	str	r3, [r2, #8]
 8002272:	e0a7      	b.n	80023c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	f003 0320 	and.w	r3, r3, #32
 800227a:	2b00      	cmp	r3, #0
 800227c:	d009      	beq.n	8002292 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	015a      	lsls	r2, r3, #5
 8002282:	69bb      	ldr	r3, [r7, #24]
 8002284:	4413      	add	r3, r2
 8002286:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800228a:	461a      	mov	r2, r3
 800228c:	2320      	movs	r3, #32
 800228e:	6093      	str	r3, [r2, #8]
 8002290:	e098      	b.n	80023c4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002298:	2b00      	cmp	r3, #0
 800229a:	f040 8093 	bne.w	80023c4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	4a4b      	ldr	r2, [pc, #300]	@ (80023d0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d90f      	bls.n	80022c6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d00a      	beq.n	80022c6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	015a      	lsls	r2, r3, #5
 80022b4:	69bb      	ldr	r3, [r7, #24]
 80022b6:	4413      	add	r3, r2
 80022b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80022bc:	461a      	mov	r2, r3
 80022be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80022c2:	6093      	str	r3, [r2, #8]
 80022c4:	e07e      	b.n	80023c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80022c6:	683a      	ldr	r2, [r7, #0]
 80022c8:	4613      	mov	r3, r2
 80022ca:	00db      	lsls	r3, r3, #3
 80022cc:	4413      	add	r3, r2
 80022ce:	009b      	lsls	r3, r3, #2
 80022d0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80022d4:	687a      	ldr	r2, [r7, #4]
 80022d6:	4413      	add	r3, r2
 80022d8:	3304      	adds	r3, #4
 80022da:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	6a1a      	ldr	r2, [r3, #32]
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	0159      	lsls	r1, r3, #5
 80022e4:	69bb      	ldr	r3, [r7, #24]
 80022e6:	440b      	add	r3, r1
 80022e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80022ec:	691b      	ldr	r3, [r3, #16]
 80022ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022f2:	1ad2      	subs	r2, r2, r3
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d114      	bne.n	8002328 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	691b      	ldr	r3, [r3, #16]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d109      	bne.n	800231a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6818      	ldr	r0, [r3, #0]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002310:	461a      	mov	r2, r3
 8002312:	2101      	movs	r1, #1
 8002314:	f002 fb1a 	bl	800494c <USB_EP0_OutStart>
 8002318:	e006      	b.n	8002328 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	68da      	ldr	r2, [r3, #12]
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	695b      	ldr	r3, [r3, #20]
 8002322:	441a      	add	r2, r3
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	b2db      	uxtb	r3, r3
 800232c:	4619      	mov	r1, r3
 800232e:	6878      	ldr	r0, [r7, #4]
 8002330:	f006 fa5c 	bl	80087ec <HAL_PCD_DataOutStageCallback>
 8002334:	e046      	b.n	80023c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	4a26      	ldr	r2, [pc, #152]	@ (80023d4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d124      	bne.n	8002388 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002344:	2b00      	cmp	r3, #0
 8002346:	d00a      	beq.n	800235e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	015a      	lsls	r2, r3, #5
 800234c:	69bb      	ldr	r3, [r7, #24]
 800234e:	4413      	add	r3, r2
 8002350:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002354:	461a      	mov	r2, r3
 8002356:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800235a:	6093      	str	r3, [r2, #8]
 800235c:	e032      	b.n	80023c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	f003 0320 	and.w	r3, r3, #32
 8002364:	2b00      	cmp	r3, #0
 8002366:	d008      	beq.n	800237a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	015a      	lsls	r2, r3, #5
 800236c:	69bb      	ldr	r3, [r7, #24]
 800236e:	4413      	add	r3, r2
 8002370:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002374:	461a      	mov	r2, r3
 8002376:	2320      	movs	r3, #32
 8002378:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	b2db      	uxtb	r3, r3
 800237e:	4619      	mov	r1, r3
 8002380:	6878      	ldr	r0, [r7, #4]
 8002382:	f006 fa33 	bl	80087ec <HAL_PCD_DataOutStageCallback>
 8002386:	e01d      	b.n	80023c4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d114      	bne.n	80023b8 <PCD_EP_OutXfrComplete_int+0x1b0>
 800238e:	6879      	ldr	r1, [r7, #4]
 8002390:	683a      	ldr	r2, [r7, #0]
 8002392:	4613      	mov	r3, r2
 8002394:	00db      	lsls	r3, r3, #3
 8002396:	4413      	add	r3, r2
 8002398:	009b      	lsls	r3, r3, #2
 800239a:	440b      	add	r3, r1
 800239c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d108      	bne.n	80023b8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6818      	ldr	r0, [r3, #0]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80023b0:	461a      	mov	r2, r3
 80023b2:	2100      	movs	r1, #0
 80023b4:	f002 faca 	bl	800494c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	b2db      	uxtb	r3, r3
 80023bc:	4619      	mov	r1, r3
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	f006 fa14 	bl	80087ec <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80023c4:	2300      	movs	r3, #0
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	3720      	adds	r7, #32
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	4f54300a 	.word	0x4f54300a
 80023d4:	4f54310a 	.word	0x4f54310a

080023d8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b086      	sub	sp, #24
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
 80023e0:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	333c      	adds	r3, #60	@ 0x3c
 80023f0:	3304      	adds	r3, #4
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	015a      	lsls	r2, r3, #5
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	4413      	add	r3, r2
 80023fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	4a15      	ldr	r2, [pc, #84]	@ (8002460 <PCD_EP_OutSetupPacket_int+0x88>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d90e      	bls.n	800242c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002414:	2b00      	cmp	r3, #0
 8002416:	d009      	beq.n	800242c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	015a      	lsls	r2, r3, #5
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	4413      	add	r3, r2
 8002420:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002424:	461a      	mov	r2, r3
 8002426:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800242a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800242c:	6878      	ldr	r0, [r7, #4]
 800242e:	f006 f9cb 	bl	80087c8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	4a0a      	ldr	r2, [pc, #40]	@ (8002460 <PCD_EP_OutSetupPacket_int+0x88>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d90c      	bls.n	8002454 <PCD_EP_OutSetupPacket_int+0x7c>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	799b      	ldrb	r3, [r3, #6]
 800243e:	2b01      	cmp	r3, #1
 8002440:	d108      	bne.n	8002454 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6818      	ldr	r0, [r3, #0]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800244c:	461a      	mov	r2, r3
 800244e:	2101      	movs	r1, #1
 8002450:	f002 fa7c 	bl	800494c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002454:	2300      	movs	r3, #0
}
 8002456:	4618      	mov	r0, r3
 8002458:	3718      	adds	r7, #24
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	4f54300a 	.word	0x4f54300a

08002464 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002464:	b480      	push	{r7}
 8002466:	b085      	sub	sp, #20
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
 800246c:	460b      	mov	r3, r1
 800246e:	70fb      	strb	r3, [r7, #3]
 8002470:	4613      	mov	r3, r2
 8002472:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800247a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800247c:	78fb      	ldrb	r3, [r7, #3]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d107      	bne.n	8002492 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002482:	883b      	ldrh	r3, [r7, #0]
 8002484:	0419      	lsls	r1, r3, #16
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	68ba      	ldr	r2, [r7, #8]
 800248c:	430a      	orrs	r2, r1
 800248e:	629a      	str	r2, [r3, #40]	@ 0x28
 8002490:	e028      	b.n	80024e4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002498:	0c1b      	lsrs	r3, r3, #16
 800249a:	68ba      	ldr	r2, [r7, #8]
 800249c:	4413      	add	r3, r2
 800249e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80024a0:	2300      	movs	r3, #0
 80024a2:	73fb      	strb	r3, [r7, #15]
 80024a4:	e00d      	b.n	80024c2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	7bfb      	ldrb	r3, [r7, #15]
 80024ac:	3340      	adds	r3, #64	@ 0x40
 80024ae:	009b      	lsls	r3, r3, #2
 80024b0:	4413      	add	r3, r2
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	0c1b      	lsrs	r3, r3, #16
 80024b6:	68ba      	ldr	r2, [r7, #8]
 80024b8:	4413      	add	r3, r2
 80024ba:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80024bc:	7bfb      	ldrb	r3, [r7, #15]
 80024be:	3301      	adds	r3, #1
 80024c0:	73fb      	strb	r3, [r7, #15]
 80024c2:	7bfa      	ldrb	r2, [r7, #15]
 80024c4:	78fb      	ldrb	r3, [r7, #3]
 80024c6:	3b01      	subs	r3, #1
 80024c8:	429a      	cmp	r2, r3
 80024ca:	d3ec      	bcc.n	80024a6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80024cc:	883b      	ldrh	r3, [r7, #0]
 80024ce:	0418      	lsls	r0, r3, #16
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6819      	ldr	r1, [r3, #0]
 80024d4:	78fb      	ldrb	r3, [r7, #3]
 80024d6:	3b01      	subs	r3, #1
 80024d8:	68ba      	ldr	r2, [r7, #8]
 80024da:	4302      	orrs	r2, r0
 80024dc:	3340      	adds	r3, #64	@ 0x40
 80024de:	009b      	lsls	r3, r3, #2
 80024e0:	440b      	add	r3, r1
 80024e2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80024e4:	2300      	movs	r3, #0
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3714      	adds	r7, #20
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr

080024f2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80024f2:	b480      	push	{r7}
 80024f4:	b083      	sub	sp, #12
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	6078      	str	r0, [r7, #4]
 80024fa:	460b      	mov	r3, r1
 80024fc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	887a      	ldrh	r2, [r7, #2]
 8002504:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002506:	2300      	movs	r3, #0
}
 8002508:	4618      	mov	r0, r3
 800250a:	370c      	adds	r7, #12
 800250c:	46bd      	mov	sp, r7
 800250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002512:	4770      	bx	lr

08002514 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002514:	b480      	push	{r7}
 8002516:	b083      	sub	sp, #12
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
 800251c:	460b      	mov	r3, r1
 800251e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002520:	bf00      	nop
 8002522:	370c      	adds	r7, #12
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr

0800252c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b086      	sub	sp, #24
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d101      	bne.n	800253e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	e267      	b.n	8002a0e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 0301 	and.w	r3, r3, #1
 8002546:	2b00      	cmp	r3, #0
 8002548:	d075      	beq.n	8002636 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800254a:	4b88      	ldr	r3, [pc, #544]	@ (800276c <HAL_RCC_OscConfig+0x240>)
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	f003 030c 	and.w	r3, r3, #12
 8002552:	2b04      	cmp	r3, #4
 8002554:	d00c      	beq.n	8002570 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002556:	4b85      	ldr	r3, [pc, #532]	@ (800276c <HAL_RCC_OscConfig+0x240>)
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800255e:	2b08      	cmp	r3, #8
 8002560:	d112      	bne.n	8002588 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002562:	4b82      	ldr	r3, [pc, #520]	@ (800276c <HAL_RCC_OscConfig+0x240>)
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800256a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800256e:	d10b      	bne.n	8002588 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002570:	4b7e      	ldr	r3, [pc, #504]	@ (800276c <HAL_RCC_OscConfig+0x240>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002578:	2b00      	cmp	r3, #0
 800257a:	d05b      	beq.n	8002634 <HAL_RCC_OscConfig+0x108>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d157      	bne.n	8002634 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	e242      	b.n	8002a0e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002590:	d106      	bne.n	80025a0 <HAL_RCC_OscConfig+0x74>
 8002592:	4b76      	ldr	r3, [pc, #472]	@ (800276c <HAL_RCC_OscConfig+0x240>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a75      	ldr	r2, [pc, #468]	@ (800276c <HAL_RCC_OscConfig+0x240>)
 8002598:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800259c:	6013      	str	r3, [r2, #0]
 800259e:	e01d      	b.n	80025dc <HAL_RCC_OscConfig+0xb0>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80025a8:	d10c      	bne.n	80025c4 <HAL_RCC_OscConfig+0x98>
 80025aa:	4b70      	ldr	r3, [pc, #448]	@ (800276c <HAL_RCC_OscConfig+0x240>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a6f      	ldr	r2, [pc, #444]	@ (800276c <HAL_RCC_OscConfig+0x240>)
 80025b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80025b4:	6013      	str	r3, [r2, #0]
 80025b6:	4b6d      	ldr	r3, [pc, #436]	@ (800276c <HAL_RCC_OscConfig+0x240>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a6c      	ldr	r2, [pc, #432]	@ (800276c <HAL_RCC_OscConfig+0x240>)
 80025bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025c0:	6013      	str	r3, [r2, #0]
 80025c2:	e00b      	b.n	80025dc <HAL_RCC_OscConfig+0xb0>
 80025c4:	4b69      	ldr	r3, [pc, #420]	@ (800276c <HAL_RCC_OscConfig+0x240>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a68      	ldr	r2, [pc, #416]	@ (800276c <HAL_RCC_OscConfig+0x240>)
 80025ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025ce:	6013      	str	r3, [r2, #0]
 80025d0:	4b66      	ldr	r3, [pc, #408]	@ (800276c <HAL_RCC_OscConfig+0x240>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a65      	ldr	r2, [pc, #404]	@ (800276c <HAL_RCC_OscConfig+0x240>)
 80025d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80025da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d013      	beq.n	800260c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025e4:	f7fe fa88 	bl	8000af8 <HAL_GetTick>
 80025e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025ea:	e008      	b.n	80025fe <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025ec:	f7fe fa84 	bl	8000af8 <HAL_GetTick>
 80025f0:	4602      	mov	r2, r0
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	2b64      	cmp	r3, #100	@ 0x64
 80025f8:	d901      	bls.n	80025fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80025fa:	2303      	movs	r3, #3
 80025fc:	e207      	b.n	8002a0e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025fe:	4b5b      	ldr	r3, [pc, #364]	@ (800276c <HAL_RCC_OscConfig+0x240>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002606:	2b00      	cmp	r3, #0
 8002608:	d0f0      	beq.n	80025ec <HAL_RCC_OscConfig+0xc0>
 800260a:	e014      	b.n	8002636 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800260c:	f7fe fa74 	bl	8000af8 <HAL_GetTick>
 8002610:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002612:	e008      	b.n	8002626 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002614:	f7fe fa70 	bl	8000af8 <HAL_GetTick>
 8002618:	4602      	mov	r2, r0
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	2b64      	cmp	r3, #100	@ 0x64
 8002620:	d901      	bls.n	8002626 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002622:	2303      	movs	r3, #3
 8002624:	e1f3      	b.n	8002a0e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002626:	4b51      	ldr	r3, [pc, #324]	@ (800276c <HAL_RCC_OscConfig+0x240>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800262e:	2b00      	cmp	r3, #0
 8002630:	d1f0      	bne.n	8002614 <HAL_RCC_OscConfig+0xe8>
 8002632:	e000      	b.n	8002636 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002634:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 0302 	and.w	r3, r3, #2
 800263e:	2b00      	cmp	r3, #0
 8002640:	d063      	beq.n	800270a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002642:	4b4a      	ldr	r3, [pc, #296]	@ (800276c <HAL_RCC_OscConfig+0x240>)
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	f003 030c 	and.w	r3, r3, #12
 800264a:	2b00      	cmp	r3, #0
 800264c:	d00b      	beq.n	8002666 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800264e:	4b47      	ldr	r3, [pc, #284]	@ (800276c <HAL_RCC_OscConfig+0x240>)
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002656:	2b08      	cmp	r3, #8
 8002658:	d11c      	bne.n	8002694 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800265a:	4b44      	ldr	r3, [pc, #272]	@ (800276c <HAL_RCC_OscConfig+0x240>)
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002662:	2b00      	cmp	r3, #0
 8002664:	d116      	bne.n	8002694 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002666:	4b41      	ldr	r3, [pc, #260]	@ (800276c <HAL_RCC_OscConfig+0x240>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 0302 	and.w	r3, r3, #2
 800266e:	2b00      	cmp	r3, #0
 8002670:	d005      	beq.n	800267e <HAL_RCC_OscConfig+0x152>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	68db      	ldr	r3, [r3, #12]
 8002676:	2b01      	cmp	r3, #1
 8002678:	d001      	beq.n	800267e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e1c7      	b.n	8002a0e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800267e:	4b3b      	ldr	r3, [pc, #236]	@ (800276c <HAL_RCC_OscConfig+0x240>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	691b      	ldr	r3, [r3, #16]
 800268a:	00db      	lsls	r3, r3, #3
 800268c:	4937      	ldr	r1, [pc, #220]	@ (800276c <HAL_RCC_OscConfig+0x240>)
 800268e:	4313      	orrs	r3, r2
 8002690:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002692:	e03a      	b.n	800270a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d020      	beq.n	80026de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800269c:	4b34      	ldr	r3, [pc, #208]	@ (8002770 <HAL_RCC_OscConfig+0x244>)
 800269e:	2201      	movs	r2, #1
 80026a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026a2:	f7fe fa29 	bl	8000af8 <HAL_GetTick>
 80026a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026a8:	e008      	b.n	80026bc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026aa:	f7fe fa25 	bl	8000af8 <HAL_GetTick>
 80026ae:	4602      	mov	r2, r0
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	1ad3      	subs	r3, r2, r3
 80026b4:	2b02      	cmp	r3, #2
 80026b6:	d901      	bls.n	80026bc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80026b8:	2303      	movs	r3, #3
 80026ba:	e1a8      	b.n	8002a0e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026bc:	4b2b      	ldr	r3, [pc, #172]	@ (800276c <HAL_RCC_OscConfig+0x240>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 0302 	and.w	r3, r3, #2
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d0f0      	beq.n	80026aa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026c8:	4b28      	ldr	r3, [pc, #160]	@ (800276c <HAL_RCC_OscConfig+0x240>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	691b      	ldr	r3, [r3, #16]
 80026d4:	00db      	lsls	r3, r3, #3
 80026d6:	4925      	ldr	r1, [pc, #148]	@ (800276c <HAL_RCC_OscConfig+0x240>)
 80026d8:	4313      	orrs	r3, r2
 80026da:	600b      	str	r3, [r1, #0]
 80026dc:	e015      	b.n	800270a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026de:	4b24      	ldr	r3, [pc, #144]	@ (8002770 <HAL_RCC_OscConfig+0x244>)
 80026e0:	2200      	movs	r2, #0
 80026e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026e4:	f7fe fa08 	bl	8000af8 <HAL_GetTick>
 80026e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026ea:	e008      	b.n	80026fe <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026ec:	f7fe fa04 	bl	8000af8 <HAL_GetTick>
 80026f0:	4602      	mov	r2, r0
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	1ad3      	subs	r3, r2, r3
 80026f6:	2b02      	cmp	r3, #2
 80026f8:	d901      	bls.n	80026fe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80026fa:	2303      	movs	r3, #3
 80026fc:	e187      	b.n	8002a0e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026fe:	4b1b      	ldr	r3, [pc, #108]	@ (800276c <HAL_RCC_OscConfig+0x240>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 0302 	and.w	r3, r3, #2
 8002706:	2b00      	cmp	r3, #0
 8002708:	d1f0      	bne.n	80026ec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 0308 	and.w	r3, r3, #8
 8002712:	2b00      	cmp	r3, #0
 8002714:	d036      	beq.n	8002784 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	695b      	ldr	r3, [r3, #20]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d016      	beq.n	800274c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800271e:	4b15      	ldr	r3, [pc, #84]	@ (8002774 <HAL_RCC_OscConfig+0x248>)
 8002720:	2201      	movs	r2, #1
 8002722:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002724:	f7fe f9e8 	bl	8000af8 <HAL_GetTick>
 8002728:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800272a:	e008      	b.n	800273e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800272c:	f7fe f9e4 	bl	8000af8 <HAL_GetTick>
 8002730:	4602      	mov	r2, r0
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	1ad3      	subs	r3, r2, r3
 8002736:	2b02      	cmp	r3, #2
 8002738:	d901      	bls.n	800273e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800273a:	2303      	movs	r3, #3
 800273c:	e167      	b.n	8002a0e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800273e:	4b0b      	ldr	r3, [pc, #44]	@ (800276c <HAL_RCC_OscConfig+0x240>)
 8002740:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002742:	f003 0302 	and.w	r3, r3, #2
 8002746:	2b00      	cmp	r3, #0
 8002748:	d0f0      	beq.n	800272c <HAL_RCC_OscConfig+0x200>
 800274a:	e01b      	b.n	8002784 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800274c:	4b09      	ldr	r3, [pc, #36]	@ (8002774 <HAL_RCC_OscConfig+0x248>)
 800274e:	2200      	movs	r2, #0
 8002750:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002752:	f7fe f9d1 	bl	8000af8 <HAL_GetTick>
 8002756:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002758:	e00e      	b.n	8002778 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800275a:	f7fe f9cd 	bl	8000af8 <HAL_GetTick>
 800275e:	4602      	mov	r2, r0
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	1ad3      	subs	r3, r2, r3
 8002764:	2b02      	cmp	r3, #2
 8002766:	d907      	bls.n	8002778 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002768:	2303      	movs	r3, #3
 800276a:	e150      	b.n	8002a0e <HAL_RCC_OscConfig+0x4e2>
 800276c:	40023800 	.word	0x40023800
 8002770:	42470000 	.word	0x42470000
 8002774:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002778:	4b88      	ldr	r3, [pc, #544]	@ (800299c <HAL_RCC_OscConfig+0x470>)
 800277a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800277c:	f003 0302 	and.w	r3, r3, #2
 8002780:	2b00      	cmp	r3, #0
 8002782:	d1ea      	bne.n	800275a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f003 0304 	and.w	r3, r3, #4
 800278c:	2b00      	cmp	r3, #0
 800278e:	f000 8097 	beq.w	80028c0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002792:	2300      	movs	r3, #0
 8002794:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002796:	4b81      	ldr	r3, [pc, #516]	@ (800299c <HAL_RCC_OscConfig+0x470>)
 8002798:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800279a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d10f      	bne.n	80027c2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027a2:	2300      	movs	r3, #0
 80027a4:	60bb      	str	r3, [r7, #8]
 80027a6:	4b7d      	ldr	r3, [pc, #500]	@ (800299c <HAL_RCC_OscConfig+0x470>)
 80027a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027aa:	4a7c      	ldr	r2, [pc, #496]	@ (800299c <HAL_RCC_OscConfig+0x470>)
 80027ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80027b2:	4b7a      	ldr	r3, [pc, #488]	@ (800299c <HAL_RCC_OscConfig+0x470>)
 80027b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027ba:	60bb      	str	r3, [r7, #8]
 80027bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027be:	2301      	movs	r3, #1
 80027c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027c2:	4b77      	ldr	r3, [pc, #476]	@ (80029a0 <HAL_RCC_OscConfig+0x474>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d118      	bne.n	8002800 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027ce:	4b74      	ldr	r3, [pc, #464]	@ (80029a0 <HAL_RCC_OscConfig+0x474>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a73      	ldr	r2, [pc, #460]	@ (80029a0 <HAL_RCC_OscConfig+0x474>)
 80027d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027da:	f7fe f98d 	bl	8000af8 <HAL_GetTick>
 80027de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027e0:	e008      	b.n	80027f4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027e2:	f7fe f989 	bl	8000af8 <HAL_GetTick>
 80027e6:	4602      	mov	r2, r0
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	1ad3      	subs	r3, r2, r3
 80027ec:	2b02      	cmp	r3, #2
 80027ee:	d901      	bls.n	80027f4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80027f0:	2303      	movs	r3, #3
 80027f2:	e10c      	b.n	8002a0e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027f4:	4b6a      	ldr	r3, [pc, #424]	@ (80029a0 <HAL_RCC_OscConfig+0x474>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d0f0      	beq.n	80027e2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	2b01      	cmp	r3, #1
 8002806:	d106      	bne.n	8002816 <HAL_RCC_OscConfig+0x2ea>
 8002808:	4b64      	ldr	r3, [pc, #400]	@ (800299c <HAL_RCC_OscConfig+0x470>)
 800280a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800280c:	4a63      	ldr	r2, [pc, #396]	@ (800299c <HAL_RCC_OscConfig+0x470>)
 800280e:	f043 0301 	orr.w	r3, r3, #1
 8002812:	6713      	str	r3, [r2, #112]	@ 0x70
 8002814:	e01c      	b.n	8002850 <HAL_RCC_OscConfig+0x324>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	2b05      	cmp	r3, #5
 800281c:	d10c      	bne.n	8002838 <HAL_RCC_OscConfig+0x30c>
 800281e:	4b5f      	ldr	r3, [pc, #380]	@ (800299c <HAL_RCC_OscConfig+0x470>)
 8002820:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002822:	4a5e      	ldr	r2, [pc, #376]	@ (800299c <HAL_RCC_OscConfig+0x470>)
 8002824:	f043 0304 	orr.w	r3, r3, #4
 8002828:	6713      	str	r3, [r2, #112]	@ 0x70
 800282a:	4b5c      	ldr	r3, [pc, #368]	@ (800299c <HAL_RCC_OscConfig+0x470>)
 800282c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800282e:	4a5b      	ldr	r2, [pc, #364]	@ (800299c <HAL_RCC_OscConfig+0x470>)
 8002830:	f043 0301 	orr.w	r3, r3, #1
 8002834:	6713      	str	r3, [r2, #112]	@ 0x70
 8002836:	e00b      	b.n	8002850 <HAL_RCC_OscConfig+0x324>
 8002838:	4b58      	ldr	r3, [pc, #352]	@ (800299c <HAL_RCC_OscConfig+0x470>)
 800283a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800283c:	4a57      	ldr	r2, [pc, #348]	@ (800299c <HAL_RCC_OscConfig+0x470>)
 800283e:	f023 0301 	bic.w	r3, r3, #1
 8002842:	6713      	str	r3, [r2, #112]	@ 0x70
 8002844:	4b55      	ldr	r3, [pc, #340]	@ (800299c <HAL_RCC_OscConfig+0x470>)
 8002846:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002848:	4a54      	ldr	r2, [pc, #336]	@ (800299c <HAL_RCC_OscConfig+0x470>)
 800284a:	f023 0304 	bic.w	r3, r3, #4
 800284e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d015      	beq.n	8002884 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002858:	f7fe f94e 	bl	8000af8 <HAL_GetTick>
 800285c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800285e:	e00a      	b.n	8002876 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002860:	f7fe f94a 	bl	8000af8 <HAL_GetTick>
 8002864:	4602      	mov	r2, r0
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800286e:	4293      	cmp	r3, r2
 8002870:	d901      	bls.n	8002876 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002872:	2303      	movs	r3, #3
 8002874:	e0cb      	b.n	8002a0e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002876:	4b49      	ldr	r3, [pc, #292]	@ (800299c <HAL_RCC_OscConfig+0x470>)
 8002878:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800287a:	f003 0302 	and.w	r3, r3, #2
 800287e:	2b00      	cmp	r3, #0
 8002880:	d0ee      	beq.n	8002860 <HAL_RCC_OscConfig+0x334>
 8002882:	e014      	b.n	80028ae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002884:	f7fe f938 	bl	8000af8 <HAL_GetTick>
 8002888:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800288a:	e00a      	b.n	80028a2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800288c:	f7fe f934 	bl	8000af8 <HAL_GetTick>
 8002890:	4602      	mov	r2, r0
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	1ad3      	subs	r3, r2, r3
 8002896:	f241 3288 	movw	r2, #5000	@ 0x1388
 800289a:	4293      	cmp	r3, r2
 800289c:	d901      	bls.n	80028a2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800289e:	2303      	movs	r3, #3
 80028a0:	e0b5      	b.n	8002a0e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028a2:	4b3e      	ldr	r3, [pc, #248]	@ (800299c <HAL_RCC_OscConfig+0x470>)
 80028a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028a6:	f003 0302 	and.w	r3, r3, #2
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d1ee      	bne.n	800288c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80028ae:	7dfb      	ldrb	r3, [r7, #23]
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d105      	bne.n	80028c0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028b4:	4b39      	ldr	r3, [pc, #228]	@ (800299c <HAL_RCC_OscConfig+0x470>)
 80028b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028b8:	4a38      	ldr	r2, [pc, #224]	@ (800299c <HAL_RCC_OscConfig+0x470>)
 80028ba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80028be:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	699b      	ldr	r3, [r3, #24]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	f000 80a1 	beq.w	8002a0c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80028ca:	4b34      	ldr	r3, [pc, #208]	@ (800299c <HAL_RCC_OscConfig+0x470>)
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	f003 030c 	and.w	r3, r3, #12
 80028d2:	2b08      	cmp	r3, #8
 80028d4:	d05c      	beq.n	8002990 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	699b      	ldr	r3, [r3, #24]
 80028da:	2b02      	cmp	r3, #2
 80028dc:	d141      	bne.n	8002962 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028de:	4b31      	ldr	r3, [pc, #196]	@ (80029a4 <HAL_RCC_OscConfig+0x478>)
 80028e0:	2200      	movs	r2, #0
 80028e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028e4:	f7fe f908 	bl	8000af8 <HAL_GetTick>
 80028e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028ea:	e008      	b.n	80028fe <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028ec:	f7fe f904 	bl	8000af8 <HAL_GetTick>
 80028f0:	4602      	mov	r2, r0
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	1ad3      	subs	r3, r2, r3
 80028f6:	2b02      	cmp	r3, #2
 80028f8:	d901      	bls.n	80028fe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80028fa:	2303      	movs	r3, #3
 80028fc:	e087      	b.n	8002a0e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028fe:	4b27      	ldr	r3, [pc, #156]	@ (800299c <HAL_RCC_OscConfig+0x470>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002906:	2b00      	cmp	r3, #0
 8002908:	d1f0      	bne.n	80028ec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	69da      	ldr	r2, [r3, #28]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6a1b      	ldr	r3, [r3, #32]
 8002912:	431a      	orrs	r2, r3
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002918:	019b      	lsls	r3, r3, #6
 800291a:	431a      	orrs	r2, r3
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002920:	085b      	lsrs	r3, r3, #1
 8002922:	3b01      	subs	r3, #1
 8002924:	041b      	lsls	r3, r3, #16
 8002926:	431a      	orrs	r2, r3
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800292c:	061b      	lsls	r3, r3, #24
 800292e:	491b      	ldr	r1, [pc, #108]	@ (800299c <HAL_RCC_OscConfig+0x470>)
 8002930:	4313      	orrs	r3, r2
 8002932:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002934:	4b1b      	ldr	r3, [pc, #108]	@ (80029a4 <HAL_RCC_OscConfig+0x478>)
 8002936:	2201      	movs	r2, #1
 8002938:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800293a:	f7fe f8dd 	bl	8000af8 <HAL_GetTick>
 800293e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002940:	e008      	b.n	8002954 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002942:	f7fe f8d9 	bl	8000af8 <HAL_GetTick>
 8002946:	4602      	mov	r2, r0
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	1ad3      	subs	r3, r2, r3
 800294c:	2b02      	cmp	r3, #2
 800294e:	d901      	bls.n	8002954 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002950:	2303      	movs	r3, #3
 8002952:	e05c      	b.n	8002a0e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002954:	4b11      	ldr	r3, [pc, #68]	@ (800299c <HAL_RCC_OscConfig+0x470>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800295c:	2b00      	cmp	r3, #0
 800295e:	d0f0      	beq.n	8002942 <HAL_RCC_OscConfig+0x416>
 8002960:	e054      	b.n	8002a0c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002962:	4b10      	ldr	r3, [pc, #64]	@ (80029a4 <HAL_RCC_OscConfig+0x478>)
 8002964:	2200      	movs	r2, #0
 8002966:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002968:	f7fe f8c6 	bl	8000af8 <HAL_GetTick>
 800296c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800296e:	e008      	b.n	8002982 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002970:	f7fe f8c2 	bl	8000af8 <HAL_GetTick>
 8002974:	4602      	mov	r2, r0
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	1ad3      	subs	r3, r2, r3
 800297a:	2b02      	cmp	r3, #2
 800297c:	d901      	bls.n	8002982 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800297e:	2303      	movs	r3, #3
 8002980:	e045      	b.n	8002a0e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002982:	4b06      	ldr	r3, [pc, #24]	@ (800299c <HAL_RCC_OscConfig+0x470>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800298a:	2b00      	cmp	r3, #0
 800298c:	d1f0      	bne.n	8002970 <HAL_RCC_OscConfig+0x444>
 800298e:	e03d      	b.n	8002a0c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	699b      	ldr	r3, [r3, #24]
 8002994:	2b01      	cmp	r3, #1
 8002996:	d107      	bne.n	80029a8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	e038      	b.n	8002a0e <HAL_RCC_OscConfig+0x4e2>
 800299c:	40023800 	.word	0x40023800
 80029a0:	40007000 	.word	0x40007000
 80029a4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80029a8:	4b1b      	ldr	r3, [pc, #108]	@ (8002a18 <HAL_RCC_OscConfig+0x4ec>)
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	699b      	ldr	r3, [r3, #24]
 80029b2:	2b01      	cmp	r3, #1
 80029b4:	d028      	beq.n	8002a08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029c0:	429a      	cmp	r2, r3
 80029c2:	d121      	bne.n	8002a08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029ce:	429a      	cmp	r2, r3
 80029d0:	d11a      	bne.n	8002a08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80029d2:	68fa      	ldr	r2, [r7, #12]
 80029d4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80029d8:	4013      	ands	r3, r2
 80029da:	687a      	ldr	r2, [r7, #4]
 80029dc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80029de:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d111      	bne.n	8002a08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029ee:	085b      	lsrs	r3, r3, #1
 80029f0:	3b01      	subs	r3, #1
 80029f2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80029f4:	429a      	cmp	r2, r3
 80029f6:	d107      	bne.n	8002a08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a02:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d001      	beq.n	8002a0c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	e000      	b.n	8002a0e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002a0c:	2300      	movs	r3, #0
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3718      	adds	r7, #24
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop
 8002a18:	40023800 	.word	0x40023800

08002a1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b084      	sub	sp, #16
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
 8002a24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d101      	bne.n	8002a30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	e0cc      	b.n	8002bca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a30:	4b68      	ldr	r3, [pc, #416]	@ (8002bd4 <HAL_RCC_ClockConfig+0x1b8>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 0307 	and.w	r3, r3, #7
 8002a38:	683a      	ldr	r2, [r7, #0]
 8002a3a:	429a      	cmp	r2, r3
 8002a3c:	d90c      	bls.n	8002a58 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a3e:	4b65      	ldr	r3, [pc, #404]	@ (8002bd4 <HAL_RCC_ClockConfig+0x1b8>)
 8002a40:	683a      	ldr	r2, [r7, #0]
 8002a42:	b2d2      	uxtb	r2, r2
 8002a44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a46:	4b63      	ldr	r3, [pc, #396]	@ (8002bd4 <HAL_RCC_ClockConfig+0x1b8>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 0307 	and.w	r3, r3, #7
 8002a4e:	683a      	ldr	r2, [r7, #0]
 8002a50:	429a      	cmp	r2, r3
 8002a52:	d001      	beq.n	8002a58 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002a54:	2301      	movs	r3, #1
 8002a56:	e0b8      	b.n	8002bca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 0302 	and.w	r3, r3, #2
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d020      	beq.n	8002aa6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 0304 	and.w	r3, r3, #4
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d005      	beq.n	8002a7c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a70:	4b59      	ldr	r3, [pc, #356]	@ (8002bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	4a58      	ldr	r2, [pc, #352]	@ (8002bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a76:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002a7a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f003 0308 	and.w	r3, r3, #8
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d005      	beq.n	8002a94 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a88:	4b53      	ldr	r3, [pc, #332]	@ (8002bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	4a52      	ldr	r2, [pc, #328]	@ (8002bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a8e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002a92:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a94:	4b50      	ldr	r3, [pc, #320]	@ (8002bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	494d      	ldr	r1, [pc, #308]	@ (8002bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 0301 	and.w	r3, r3, #1
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d044      	beq.n	8002b3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	2b01      	cmp	r3, #1
 8002ab8:	d107      	bne.n	8002aca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aba:	4b47      	ldr	r3, [pc, #284]	@ (8002bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d119      	bne.n	8002afa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e07f      	b.n	8002bca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	2b02      	cmp	r3, #2
 8002ad0:	d003      	beq.n	8002ada <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ad6:	2b03      	cmp	r3, #3
 8002ad8:	d107      	bne.n	8002aea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ada:	4b3f      	ldr	r3, [pc, #252]	@ (8002bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d109      	bne.n	8002afa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e06f      	b.n	8002bca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002aea:	4b3b      	ldr	r3, [pc, #236]	@ (8002bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f003 0302 	and.w	r3, r3, #2
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d101      	bne.n	8002afa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	e067      	b.n	8002bca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002afa:	4b37      	ldr	r3, [pc, #220]	@ (8002bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	f023 0203 	bic.w	r2, r3, #3
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	4934      	ldr	r1, [pc, #208]	@ (8002bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b0c:	f7fd fff4 	bl	8000af8 <HAL_GetTick>
 8002b10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b12:	e00a      	b.n	8002b2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b14:	f7fd fff0 	bl	8000af8 <HAL_GetTick>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	1ad3      	subs	r3, r2, r3
 8002b1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d901      	bls.n	8002b2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b26:	2303      	movs	r3, #3
 8002b28:	e04f      	b.n	8002bca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b2a:	4b2b      	ldr	r3, [pc, #172]	@ (8002bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	f003 020c 	and.w	r2, r3, #12
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	009b      	lsls	r3, r3, #2
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d1eb      	bne.n	8002b14 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b3c:	4b25      	ldr	r3, [pc, #148]	@ (8002bd4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f003 0307 	and.w	r3, r3, #7
 8002b44:	683a      	ldr	r2, [r7, #0]
 8002b46:	429a      	cmp	r2, r3
 8002b48:	d20c      	bcs.n	8002b64 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b4a:	4b22      	ldr	r3, [pc, #136]	@ (8002bd4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b4c:	683a      	ldr	r2, [r7, #0]
 8002b4e:	b2d2      	uxtb	r2, r2
 8002b50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b52:	4b20      	ldr	r3, [pc, #128]	@ (8002bd4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 0307 	and.w	r3, r3, #7
 8002b5a:	683a      	ldr	r2, [r7, #0]
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	d001      	beq.n	8002b64 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	e032      	b.n	8002bca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 0304 	and.w	r3, r3, #4
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d008      	beq.n	8002b82 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b70:	4b19      	ldr	r3, [pc, #100]	@ (8002bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	68db      	ldr	r3, [r3, #12]
 8002b7c:	4916      	ldr	r1, [pc, #88]	@ (8002bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 0308 	and.w	r3, r3, #8
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d009      	beq.n	8002ba2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b8e:	4b12      	ldr	r3, [pc, #72]	@ (8002bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	691b      	ldr	r3, [r3, #16]
 8002b9a:	00db      	lsls	r3, r3, #3
 8002b9c:	490e      	ldr	r1, [pc, #56]	@ (8002bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002ba2:	f000 f821 	bl	8002be8 <HAL_RCC_GetSysClockFreq>
 8002ba6:	4602      	mov	r2, r0
 8002ba8:	4b0b      	ldr	r3, [pc, #44]	@ (8002bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	091b      	lsrs	r3, r3, #4
 8002bae:	f003 030f 	and.w	r3, r3, #15
 8002bb2:	490a      	ldr	r1, [pc, #40]	@ (8002bdc <HAL_RCC_ClockConfig+0x1c0>)
 8002bb4:	5ccb      	ldrb	r3, [r1, r3]
 8002bb6:	fa22 f303 	lsr.w	r3, r2, r3
 8002bba:	4a09      	ldr	r2, [pc, #36]	@ (8002be0 <HAL_RCC_ClockConfig+0x1c4>)
 8002bbc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002bbe:	4b09      	ldr	r3, [pc, #36]	@ (8002be4 <HAL_RCC_ClockConfig+0x1c8>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f7fd fe7a 	bl	80008bc <HAL_InitTick>

  return HAL_OK;
 8002bc8:	2300      	movs	r3, #0
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	3710      	adds	r7, #16
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	40023c00 	.word	0x40023c00
 8002bd8:	40023800 	.word	0x40023800
 8002bdc:	08008fc0 	.word	0x08008fc0
 8002be0:	20000000 	.word	0x20000000
 8002be4:	20000004 	.word	0x20000004

08002be8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002be8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002bec:	b094      	sub	sp, #80	@ 0x50
 8002bee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c00:	4b79      	ldr	r3, [pc, #484]	@ (8002de8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	f003 030c 	and.w	r3, r3, #12
 8002c08:	2b08      	cmp	r3, #8
 8002c0a:	d00d      	beq.n	8002c28 <HAL_RCC_GetSysClockFreq+0x40>
 8002c0c:	2b08      	cmp	r3, #8
 8002c0e:	f200 80e1 	bhi.w	8002dd4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d002      	beq.n	8002c1c <HAL_RCC_GetSysClockFreq+0x34>
 8002c16:	2b04      	cmp	r3, #4
 8002c18:	d003      	beq.n	8002c22 <HAL_RCC_GetSysClockFreq+0x3a>
 8002c1a:	e0db      	b.n	8002dd4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c1c:	4b73      	ldr	r3, [pc, #460]	@ (8002dec <HAL_RCC_GetSysClockFreq+0x204>)
 8002c1e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002c20:	e0db      	b.n	8002dda <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c22:	4b73      	ldr	r3, [pc, #460]	@ (8002df0 <HAL_RCC_GetSysClockFreq+0x208>)
 8002c24:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002c26:	e0d8      	b.n	8002dda <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c28:	4b6f      	ldr	r3, [pc, #444]	@ (8002de8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002c30:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c32:	4b6d      	ldr	r3, [pc, #436]	@ (8002de8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d063      	beq.n	8002d06 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c3e:	4b6a      	ldr	r3, [pc, #424]	@ (8002de8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	099b      	lsrs	r3, r3, #6
 8002c44:	2200      	movs	r2, #0
 8002c46:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002c48:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002c4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c50:	633b      	str	r3, [r7, #48]	@ 0x30
 8002c52:	2300      	movs	r3, #0
 8002c54:	637b      	str	r3, [r7, #52]	@ 0x34
 8002c56:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002c5a:	4622      	mov	r2, r4
 8002c5c:	462b      	mov	r3, r5
 8002c5e:	f04f 0000 	mov.w	r0, #0
 8002c62:	f04f 0100 	mov.w	r1, #0
 8002c66:	0159      	lsls	r1, r3, #5
 8002c68:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c6c:	0150      	lsls	r0, r2, #5
 8002c6e:	4602      	mov	r2, r0
 8002c70:	460b      	mov	r3, r1
 8002c72:	4621      	mov	r1, r4
 8002c74:	1a51      	subs	r1, r2, r1
 8002c76:	6139      	str	r1, [r7, #16]
 8002c78:	4629      	mov	r1, r5
 8002c7a:	eb63 0301 	sbc.w	r3, r3, r1
 8002c7e:	617b      	str	r3, [r7, #20]
 8002c80:	f04f 0200 	mov.w	r2, #0
 8002c84:	f04f 0300 	mov.w	r3, #0
 8002c88:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002c8c:	4659      	mov	r1, fp
 8002c8e:	018b      	lsls	r3, r1, #6
 8002c90:	4651      	mov	r1, sl
 8002c92:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002c96:	4651      	mov	r1, sl
 8002c98:	018a      	lsls	r2, r1, #6
 8002c9a:	4651      	mov	r1, sl
 8002c9c:	ebb2 0801 	subs.w	r8, r2, r1
 8002ca0:	4659      	mov	r1, fp
 8002ca2:	eb63 0901 	sbc.w	r9, r3, r1
 8002ca6:	f04f 0200 	mov.w	r2, #0
 8002caa:	f04f 0300 	mov.w	r3, #0
 8002cae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002cb2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002cb6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002cba:	4690      	mov	r8, r2
 8002cbc:	4699      	mov	r9, r3
 8002cbe:	4623      	mov	r3, r4
 8002cc0:	eb18 0303 	adds.w	r3, r8, r3
 8002cc4:	60bb      	str	r3, [r7, #8]
 8002cc6:	462b      	mov	r3, r5
 8002cc8:	eb49 0303 	adc.w	r3, r9, r3
 8002ccc:	60fb      	str	r3, [r7, #12]
 8002cce:	f04f 0200 	mov.w	r2, #0
 8002cd2:	f04f 0300 	mov.w	r3, #0
 8002cd6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002cda:	4629      	mov	r1, r5
 8002cdc:	024b      	lsls	r3, r1, #9
 8002cde:	4621      	mov	r1, r4
 8002ce0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002ce4:	4621      	mov	r1, r4
 8002ce6:	024a      	lsls	r2, r1, #9
 8002ce8:	4610      	mov	r0, r2
 8002cea:	4619      	mov	r1, r3
 8002cec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002cee:	2200      	movs	r2, #0
 8002cf0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002cf2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002cf4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002cf8:	f7fd fa72 	bl	80001e0 <__aeabi_uldivmod>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	460b      	mov	r3, r1
 8002d00:	4613      	mov	r3, r2
 8002d02:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002d04:	e058      	b.n	8002db8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d06:	4b38      	ldr	r3, [pc, #224]	@ (8002de8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	099b      	lsrs	r3, r3, #6
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	4618      	mov	r0, r3
 8002d10:	4611      	mov	r1, r2
 8002d12:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002d16:	623b      	str	r3, [r7, #32]
 8002d18:	2300      	movs	r3, #0
 8002d1a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d1c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002d20:	4642      	mov	r2, r8
 8002d22:	464b      	mov	r3, r9
 8002d24:	f04f 0000 	mov.w	r0, #0
 8002d28:	f04f 0100 	mov.w	r1, #0
 8002d2c:	0159      	lsls	r1, r3, #5
 8002d2e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d32:	0150      	lsls	r0, r2, #5
 8002d34:	4602      	mov	r2, r0
 8002d36:	460b      	mov	r3, r1
 8002d38:	4641      	mov	r1, r8
 8002d3a:	ebb2 0a01 	subs.w	sl, r2, r1
 8002d3e:	4649      	mov	r1, r9
 8002d40:	eb63 0b01 	sbc.w	fp, r3, r1
 8002d44:	f04f 0200 	mov.w	r2, #0
 8002d48:	f04f 0300 	mov.w	r3, #0
 8002d4c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002d50:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002d54:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002d58:	ebb2 040a 	subs.w	r4, r2, sl
 8002d5c:	eb63 050b 	sbc.w	r5, r3, fp
 8002d60:	f04f 0200 	mov.w	r2, #0
 8002d64:	f04f 0300 	mov.w	r3, #0
 8002d68:	00eb      	lsls	r3, r5, #3
 8002d6a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d6e:	00e2      	lsls	r2, r4, #3
 8002d70:	4614      	mov	r4, r2
 8002d72:	461d      	mov	r5, r3
 8002d74:	4643      	mov	r3, r8
 8002d76:	18e3      	adds	r3, r4, r3
 8002d78:	603b      	str	r3, [r7, #0]
 8002d7a:	464b      	mov	r3, r9
 8002d7c:	eb45 0303 	adc.w	r3, r5, r3
 8002d80:	607b      	str	r3, [r7, #4]
 8002d82:	f04f 0200 	mov.w	r2, #0
 8002d86:	f04f 0300 	mov.w	r3, #0
 8002d8a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002d8e:	4629      	mov	r1, r5
 8002d90:	028b      	lsls	r3, r1, #10
 8002d92:	4621      	mov	r1, r4
 8002d94:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002d98:	4621      	mov	r1, r4
 8002d9a:	028a      	lsls	r2, r1, #10
 8002d9c:	4610      	mov	r0, r2
 8002d9e:	4619      	mov	r1, r3
 8002da0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002da2:	2200      	movs	r2, #0
 8002da4:	61bb      	str	r3, [r7, #24]
 8002da6:	61fa      	str	r2, [r7, #28]
 8002da8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002dac:	f7fd fa18 	bl	80001e0 <__aeabi_uldivmod>
 8002db0:	4602      	mov	r2, r0
 8002db2:	460b      	mov	r3, r1
 8002db4:	4613      	mov	r3, r2
 8002db6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002db8:	4b0b      	ldr	r3, [pc, #44]	@ (8002de8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	0c1b      	lsrs	r3, r3, #16
 8002dbe:	f003 0303 	and.w	r3, r3, #3
 8002dc2:	3301      	adds	r3, #1
 8002dc4:	005b      	lsls	r3, r3, #1
 8002dc6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002dc8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002dca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002dcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dd0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002dd2:	e002      	b.n	8002dda <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002dd4:	4b05      	ldr	r3, [pc, #20]	@ (8002dec <HAL_RCC_GetSysClockFreq+0x204>)
 8002dd6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002dd8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002dda:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	3750      	adds	r7, #80	@ 0x50
 8002de0:	46bd      	mov	sp, r7
 8002de2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002de6:	bf00      	nop
 8002de8:	40023800 	.word	0x40023800
 8002dec:	00f42400 	.word	0x00f42400
 8002df0:	007a1200 	.word	0x007a1200

08002df4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002df4:	b480      	push	{r7}
 8002df6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002df8:	4b03      	ldr	r3, [pc, #12]	@ (8002e08 <HAL_RCC_GetHCLKFreq+0x14>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr
 8002e06:	bf00      	nop
 8002e08:	20000000 	.word	0x20000000

08002e0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002e10:	f7ff fff0 	bl	8002df4 <HAL_RCC_GetHCLKFreq>
 8002e14:	4602      	mov	r2, r0
 8002e16:	4b05      	ldr	r3, [pc, #20]	@ (8002e2c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	0a9b      	lsrs	r3, r3, #10
 8002e1c:	f003 0307 	and.w	r3, r3, #7
 8002e20:	4903      	ldr	r1, [pc, #12]	@ (8002e30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e22:	5ccb      	ldrb	r3, [r1, r3]
 8002e24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	bd80      	pop	{r7, pc}
 8002e2c:	40023800 	.word	0x40023800
 8002e30:	08008fd0 	.word	0x08008fd0

08002e34 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b083      	sub	sp, #12
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
 8002e3c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	220f      	movs	r2, #15
 8002e42:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002e44:	4b12      	ldr	r3, [pc, #72]	@ (8002e90 <HAL_RCC_GetClockConfig+0x5c>)
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	f003 0203 	and.w	r2, r3, #3
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002e50:	4b0f      	ldr	r3, [pc, #60]	@ (8002e90 <HAL_RCC_GetClockConfig+0x5c>)
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002e5c:	4b0c      	ldr	r3, [pc, #48]	@ (8002e90 <HAL_RCC_GetClockConfig+0x5c>)
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002e68:	4b09      	ldr	r3, [pc, #36]	@ (8002e90 <HAL_RCC_GetClockConfig+0x5c>)
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	08db      	lsrs	r3, r3, #3
 8002e6e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002e76:	4b07      	ldr	r3, [pc, #28]	@ (8002e94 <HAL_RCC_GetClockConfig+0x60>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f003 0207 	and.w	r2, r3, #7
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	601a      	str	r2, [r3, #0]
}
 8002e82:	bf00      	nop
 8002e84:	370c      	adds	r7, #12
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr
 8002e8e:	bf00      	nop
 8002e90:	40023800 	.word	0x40023800
 8002e94:	40023c00 	.word	0x40023c00

08002e98 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b082      	sub	sp, #8
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d101      	bne.n	8002eaa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e041      	b.n	8002f2e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d106      	bne.n	8002ec4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f000 f839 	bl	8002f36 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2202      	movs	r2, #2
 8002ec8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681a      	ldr	r2, [r3, #0]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	3304      	adds	r3, #4
 8002ed4:	4619      	mov	r1, r3
 8002ed6:	4610      	mov	r0, r2
 8002ed8:	f000 f9c0 	bl	800325c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2201      	movs	r2, #1
 8002ee0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2201      	movs	r2, #1
 8002ef0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2201      	movs	r2, #1
 8002f00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2201      	movs	r2, #1
 8002f08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2201      	movs	r2, #1
 8002f10:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2201      	movs	r2, #1
 8002f18:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2201      	movs	r2, #1
 8002f20:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2201      	movs	r2, #1
 8002f28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002f2c:	2300      	movs	r3, #0
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3708      	adds	r7, #8
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}

08002f36 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002f36:	b480      	push	{r7}
 8002f38:	b083      	sub	sp, #12
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002f3e:	bf00      	nop
 8002f40:	370c      	adds	r7, #12
 8002f42:	46bd      	mov	sp, r7
 8002f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f48:	4770      	bx	lr
	...

08002f4c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b085      	sub	sp, #20
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f5a:	b2db      	uxtb	r3, r3
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	d001      	beq.n	8002f64 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002f60:	2301      	movs	r3, #1
 8002f62:	e04e      	b.n	8003002 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2202      	movs	r2, #2
 8002f68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	68da      	ldr	r2, [r3, #12]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f042 0201 	orr.w	r2, r2, #1
 8002f7a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a23      	ldr	r2, [pc, #140]	@ (8003010 <HAL_TIM_Base_Start_IT+0xc4>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d022      	beq.n	8002fcc <HAL_TIM_Base_Start_IT+0x80>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f8e:	d01d      	beq.n	8002fcc <HAL_TIM_Base_Start_IT+0x80>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a1f      	ldr	r2, [pc, #124]	@ (8003014 <HAL_TIM_Base_Start_IT+0xc8>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d018      	beq.n	8002fcc <HAL_TIM_Base_Start_IT+0x80>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a1e      	ldr	r2, [pc, #120]	@ (8003018 <HAL_TIM_Base_Start_IT+0xcc>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d013      	beq.n	8002fcc <HAL_TIM_Base_Start_IT+0x80>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a1c      	ldr	r2, [pc, #112]	@ (800301c <HAL_TIM_Base_Start_IT+0xd0>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d00e      	beq.n	8002fcc <HAL_TIM_Base_Start_IT+0x80>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a1b      	ldr	r2, [pc, #108]	@ (8003020 <HAL_TIM_Base_Start_IT+0xd4>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d009      	beq.n	8002fcc <HAL_TIM_Base_Start_IT+0x80>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a19      	ldr	r2, [pc, #100]	@ (8003024 <HAL_TIM_Base_Start_IT+0xd8>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d004      	beq.n	8002fcc <HAL_TIM_Base_Start_IT+0x80>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a18      	ldr	r2, [pc, #96]	@ (8003028 <HAL_TIM_Base_Start_IT+0xdc>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d111      	bne.n	8002ff0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	f003 0307 	and.w	r3, r3, #7
 8002fd6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2b06      	cmp	r3, #6
 8002fdc:	d010      	beq.n	8003000 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f042 0201 	orr.w	r2, r2, #1
 8002fec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fee:	e007      	b.n	8003000 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f042 0201 	orr.w	r2, r2, #1
 8002ffe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003000:	2300      	movs	r3, #0
}
 8003002:	4618      	mov	r0, r3
 8003004:	3714      	adds	r7, #20
 8003006:	46bd      	mov	sp, r7
 8003008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300c:	4770      	bx	lr
 800300e:	bf00      	nop
 8003010:	40010000 	.word	0x40010000
 8003014:	40000400 	.word	0x40000400
 8003018:	40000800 	.word	0x40000800
 800301c:	40000c00 	.word	0x40000c00
 8003020:	40010400 	.word	0x40010400
 8003024:	40014000 	.word	0x40014000
 8003028:	40001800 	.word	0x40001800

0800302c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b084      	sub	sp, #16
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	68db      	ldr	r3, [r3, #12]
 800303a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	691b      	ldr	r3, [r3, #16]
 8003042:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	f003 0302 	and.w	r3, r3, #2
 800304a:	2b00      	cmp	r3, #0
 800304c:	d020      	beq.n	8003090 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	f003 0302 	and.w	r3, r3, #2
 8003054:	2b00      	cmp	r3, #0
 8003056:	d01b      	beq.n	8003090 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f06f 0202 	mvn.w	r2, #2
 8003060:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2201      	movs	r2, #1
 8003066:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	699b      	ldr	r3, [r3, #24]
 800306e:	f003 0303 	and.w	r3, r3, #3
 8003072:	2b00      	cmp	r3, #0
 8003074:	d003      	beq.n	800307e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	f000 f8d2 	bl	8003220 <HAL_TIM_IC_CaptureCallback>
 800307c:	e005      	b.n	800308a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f000 f8c4 	bl	800320c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003084:	6878      	ldr	r0, [r7, #4]
 8003086:	f000 f8d5 	bl	8003234 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2200      	movs	r2, #0
 800308e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	f003 0304 	and.w	r3, r3, #4
 8003096:	2b00      	cmp	r3, #0
 8003098:	d020      	beq.n	80030dc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	f003 0304 	and.w	r3, r3, #4
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d01b      	beq.n	80030dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f06f 0204 	mvn.w	r2, #4
 80030ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2202      	movs	r2, #2
 80030b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	699b      	ldr	r3, [r3, #24]
 80030ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d003      	beq.n	80030ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	f000 f8ac 	bl	8003220 <HAL_TIM_IC_CaptureCallback>
 80030c8:	e005      	b.n	80030d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	f000 f89e 	bl	800320c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030d0:	6878      	ldr	r0, [r7, #4]
 80030d2:	f000 f8af 	bl	8003234 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2200      	movs	r2, #0
 80030da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	f003 0308 	and.w	r3, r3, #8
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d020      	beq.n	8003128 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	f003 0308 	and.w	r3, r3, #8
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d01b      	beq.n	8003128 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f06f 0208 	mvn.w	r2, #8
 80030f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2204      	movs	r2, #4
 80030fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	69db      	ldr	r3, [r3, #28]
 8003106:	f003 0303 	and.w	r3, r3, #3
 800310a:	2b00      	cmp	r3, #0
 800310c:	d003      	beq.n	8003116 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f000 f886 	bl	8003220 <HAL_TIM_IC_CaptureCallback>
 8003114:	e005      	b.n	8003122 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003116:	6878      	ldr	r0, [r7, #4]
 8003118:	f000 f878 	bl	800320c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800311c:	6878      	ldr	r0, [r7, #4]
 800311e:	f000 f889 	bl	8003234 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2200      	movs	r2, #0
 8003126:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	f003 0310 	and.w	r3, r3, #16
 800312e:	2b00      	cmp	r3, #0
 8003130:	d020      	beq.n	8003174 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	f003 0310 	and.w	r3, r3, #16
 8003138:	2b00      	cmp	r3, #0
 800313a:	d01b      	beq.n	8003174 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f06f 0210 	mvn.w	r2, #16
 8003144:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2208      	movs	r2, #8
 800314a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	69db      	ldr	r3, [r3, #28]
 8003152:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003156:	2b00      	cmp	r3, #0
 8003158:	d003      	beq.n	8003162 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	f000 f860 	bl	8003220 <HAL_TIM_IC_CaptureCallback>
 8003160:	e005      	b.n	800316e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f000 f852 	bl	800320c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003168:	6878      	ldr	r0, [r7, #4]
 800316a:	f000 f863 	bl	8003234 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2200      	movs	r2, #0
 8003172:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	f003 0301 	and.w	r3, r3, #1
 800317a:	2b00      	cmp	r3, #0
 800317c:	d00c      	beq.n	8003198 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	f003 0301 	and.w	r3, r3, #1
 8003184:	2b00      	cmp	r3, #0
 8003186:	d007      	beq.n	8003198 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f06f 0201 	mvn.w	r2, #1
 8003190:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	f7fd fb4e 	bl	8000834 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d00c      	beq.n	80031bc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d007      	beq.n	80031bc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80031b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	f000 f906 	bl	80033c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d00c      	beq.n	80031e0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d007      	beq.n	80031e0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80031d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f000 f834 	bl	8003248 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	f003 0320 	and.w	r3, r3, #32
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d00c      	beq.n	8003204 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	f003 0320 	and.w	r3, r3, #32
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d007      	beq.n	8003204 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f06f 0220 	mvn.w	r2, #32
 80031fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	f000 f8d8 	bl	80033b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003204:	bf00      	nop
 8003206:	3710      	adds	r7, #16
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}

0800320c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800320c:	b480      	push	{r7}
 800320e:	b083      	sub	sp, #12
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003214:	bf00      	nop
 8003216:	370c      	adds	r7, #12
 8003218:	46bd      	mov	sp, r7
 800321a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321e:	4770      	bx	lr

08003220 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003220:	b480      	push	{r7}
 8003222:	b083      	sub	sp, #12
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003228:	bf00      	nop
 800322a:	370c      	adds	r7, #12
 800322c:	46bd      	mov	sp, r7
 800322e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003232:	4770      	bx	lr

08003234 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003234:	b480      	push	{r7}
 8003236:	b083      	sub	sp, #12
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800323c:	bf00      	nop
 800323e:	370c      	adds	r7, #12
 8003240:	46bd      	mov	sp, r7
 8003242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003246:	4770      	bx	lr

08003248 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003248:	b480      	push	{r7}
 800324a:	b083      	sub	sp, #12
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003250:	bf00      	nop
 8003252:	370c      	adds	r7, #12
 8003254:	46bd      	mov	sp, r7
 8003256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325a:	4770      	bx	lr

0800325c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800325c:	b480      	push	{r7}
 800325e:	b085      	sub	sp, #20
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
 8003264:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	4a46      	ldr	r2, [pc, #280]	@ (8003388 <TIM_Base_SetConfig+0x12c>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d013      	beq.n	800329c <TIM_Base_SetConfig+0x40>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800327a:	d00f      	beq.n	800329c <TIM_Base_SetConfig+0x40>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	4a43      	ldr	r2, [pc, #268]	@ (800338c <TIM_Base_SetConfig+0x130>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d00b      	beq.n	800329c <TIM_Base_SetConfig+0x40>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	4a42      	ldr	r2, [pc, #264]	@ (8003390 <TIM_Base_SetConfig+0x134>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d007      	beq.n	800329c <TIM_Base_SetConfig+0x40>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	4a41      	ldr	r2, [pc, #260]	@ (8003394 <TIM_Base_SetConfig+0x138>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d003      	beq.n	800329c <TIM_Base_SetConfig+0x40>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	4a40      	ldr	r2, [pc, #256]	@ (8003398 <TIM_Base_SetConfig+0x13c>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d108      	bne.n	80032ae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80032a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	68fa      	ldr	r2, [r7, #12]
 80032aa:	4313      	orrs	r3, r2
 80032ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	4a35      	ldr	r2, [pc, #212]	@ (8003388 <TIM_Base_SetConfig+0x12c>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d02b      	beq.n	800330e <TIM_Base_SetConfig+0xb2>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032bc:	d027      	beq.n	800330e <TIM_Base_SetConfig+0xb2>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	4a32      	ldr	r2, [pc, #200]	@ (800338c <TIM_Base_SetConfig+0x130>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d023      	beq.n	800330e <TIM_Base_SetConfig+0xb2>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	4a31      	ldr	r2, [pc, #196]	@ (8003390 <TIM_Base_SetConfig+0x134>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d01f      	beq.n	800330e <TIM_Base_SetConfig+0xb2>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	4a30      	ldr	r2, [pc, #192]	@ (8003394 <TIM_Base_SetConfig+0x138>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d01b      	beq.n	800330e <TIM_Base_SetConfig+0xb2>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	4a2f      	ldr	r2, [pc, #188]	@ (8003398 <TIM_Base_SetConfig+0x13c>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d017      	beq.n	800330e <TIM_Base_SetConfig+0xb2>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	4a2e      	ldr	r2, [pc, #184]	@ (800339c <TIM_Base_SetConfig+0x140>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d013      	beq.n	800330e <TIM_Base_SetConfig+0xb2>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	4a2d      	ldr	r2, [pc, #180]	@ (80033a0 <TIM_Base_SetConfig+0x144>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d00f      	beq.n	800330e <TIM_Base_SetConfig+0xb2>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	4a2c      	ldr	r2, [pc, #176]	@ (80033a4 <TIM_Base_SetConfig+0x148>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d00b      	beq.n	800330e <TIM_Base_SetConfig+0xb2>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	4a2b      	ldr	r2, [pc, #172]	@ (80033a8 <TIM_Base_SetConfig+0x14c>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d007      	beq.n	800330e <TIM_Base_SetConfig+0xb2>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	4a2a      	ldr	r2, [pc, #168]	@ (80033ac <TIM_Base_SetConfig+0x150>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d003      	beq.n	800330e <TIM_Base_SetConfig+0xb2>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	4a29      	ldr	r2, [pc, #164]	@ (80033b0 <TIM_Base_SetConfig+0x154>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d108      	bne.n	8003320 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003314:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	68db      	ldr	r3, [r3, #12]
 800331a:	68fa      	ldr	r2, [r7, #12]
 800331c:	4313      	orrs	r3, r2
 800331e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	695b      	ldr	r3, [r3, #20]
 800332a:	4313      	orrs	r3, r2
 800332c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	68fa      	ldr	r2, [r7, #12]
 8003332:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	689a      	ldr	r2, [r3, #8]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	4a10      	ldr	r2, [pc, #64]	@ (8003388 <TIM_Base_SetConfig+0x12c>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d003      	beq.n	8003354 <TIM_Base_SetConfig+0xf8>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	4a12      	ldr	r2, [pc, #72]	@ (8003398 <TIM_Base_SetConfig+0x13c>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d103      	bne.n	800335c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	691a      	ldr	r2, [r3, #16]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2201      	movs	r2, #1
 8003360:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	691b      	ldr	r3, [r3, #16]
 8003366:	f003 0301 	and.w	r3, r3, #1
 800336a:	2b01      	cmp	r3, #1
 800336c:	d105      	bne.n	800337a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	691b      	ldr	r3, [r3, #16]
 8003372:	f023 0201 	bic.w	r2, r3, #1
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	611a      	str	r2, [r3, #16]
  }
}
 800337a:	bf00      	nop
 800337c:	3714      	adds	r7, #20
 800337e:	46bd      	mov	sp, r7
 8003380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003384:	4770      	bx	lr
 8003386:	bf00      	nop
 8003388:	40010000 	.word	0x40010000
 800338c:	40000400 	.word	0x40000400
 8003390:	40000800 	.word	0x40000800
 8003394:	40000c00 	.word	0x40000c00
 8003398:	40010400 	.word	0x40010400
 800339c:	40014000 	.word	0x40014000
 80033a0:	40014400 	.word	0x40014400
 80033a4:	40014800 	.word	0x40014800
 80033a8:	40001800 	.word	0x40001800
 80033ac:	40001c00 	.word	0x40001c00
 80033b0:	40002000 	.word	0x40002000

080033b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b083      	sub	sp, #12
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80033bc:	bf00      	nop
 80033be:	370c      	adds	r7, #12
 80033c0:	46bd      	mov	sp, r7
 80033c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c6:	4770      	bx	lr

080033c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b083      	sub	sp, #12
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80033d0:	bf00      	nop
 80033d2:	370c      	adds	r7, #12
 80033d4:	46bd      	mov	sp, r7
 80033d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033da:	4770      	bx	lr

080033dc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80033dc:	b084      	sub	sp, #16
 80033de:	b580      	push	{r7, lr}
 80033e0:	b084      	sub	sp, #16
 80033e2:	af00      	add	r7, sp, #0
 80033e4:	6078      	str	r0, [r7, #4]
 80033e6:	f107 001c 	add.w	r0, r7, #28
 80033ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80033ee:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d123      	bne.n	800343e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033fa:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	68db      	ldr	r3, [r3, #12]
 8003406:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800340a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800340e:	687a      	ldr	r2, [r7, #4]
 8003410:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	68db      	ldr	r3, [r3, #12]
 8003416:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800341e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003422:	2b01      	cmp	r3, #1
 8003424:	d105      	bne.n	8003432 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	68db      	ldr	r3, [r3, #12]
 800342a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	f001 fae8 	bl	8004a08 <USB_CoreReset>
 8003438:	4603      	mov	r3, r0
 800343a:	73fb      	strb	r3, [r7, #15]
 800343c:	e01b      	b.n	8003476 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	68db      	ldr	r3, [r3, #12]
 8003442:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f001 fadc 	bl	8004a08 <USB_CoreReset>
 8003450:	4603      	mov	r3, r0
 8003452:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003454:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003458:	2b00      	cmp	r3, #0
 800345a:	d106      	bne.n	800346a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003460:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	639a      	str	r2, [r3, #56]	@ 0x38
 8003468:	e005      	b.n	8003476 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800346e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003476:	7fbb      	ldrb	r3, [r7, #30]
 8003478:	2b01      	cmp	r3, #1
 800347a:	d10b      	bne.n	8003494 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	f043 0206 	orr.w	r2, r3, #6
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	f043 0220 	orr.w	r2, r3, #32
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003494:	7bfb      	ldrb	r3, [r7, #15]
}
 8003496:	4618      	mov	r0, r3
 8003498:	3710      	adds	r7, #16
 800349a:	46bd      	mov	sp, r7
 800349c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80034a0:	b004      	add	sp, #16
 80034a2:	4770      	bx	lr

080034a4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b087      	sub	sp, #28
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	60f8      	str	r0, [r7, #12]
 80034ac:	60b9      	str	r1, [r7, #8]
 80034ae:	4613      	mov	r3, r2
 80034b0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80034b2:	79fb      	ldrb	r3, [r7, #7]
 80034b4:	2b02      	cmp	r3, #2
 80034b6:	d165      	bne.n	8003584 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	4a41      	ldr	r2, [pc, #260]	@ (80035c0 <USB_SetTurnaroundTime+0x11c>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d906      	bls.n	80034ce <USB_SetTurnaroundTime+0x2a>
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	4a40      	ldr	r2, [pc, #256]	@ (80035c4 <USB_SetTurnaroundTime+0x120>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d202      	bcs.n	80034ce <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80034c8:	230f      	movs	r3, #15
 80034ca:	617b      	str	r3, [r7, #20]
 80034cc:	e062      	b.n	8003594 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	4a3c      	ldr	r2, [pc, #240]	@ (80035c4 <USB_SetTurnaroundTime+0x120>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d306      	bcc.n	80034e4 <USB_SetTurnaroundTime+0x40>
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	4a3b      	ldr	r2, [pc, #236]	@ (80035c8 <USB_SetTurnaroundTime+0x124>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d202      	bcs.n	80034e4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80034de:	230e      	movs	r3, #14
 80034e0:	617b      	str	r3, [r7, #20]
 80034e2:	e057      	b.n	8003594 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	4a38      	ldr	r2, [pc, #224]	@ (80035c8 <USB_SetTurnaroundTime+0x124>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d306      	bcc.n	80034fa <USB_SetTurnaroundTime+0x56>
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	4a37      	ldr	r2, [pc, #220]	@ (80035cc <USB_SetTurnaroundTime+0x128>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d202      	bcs.n	80034fa <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80034f4:	230d      	movs	r3, #13
 80034f6:	617b      	str	r3, [r7, #20]
 80034f8:	e04c      	b.n	8003594 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	4a33      	ldr	r2, [pc, #204]	@ (80035cc <USB_SetTurnaroundTime+0x128>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d306      	bcc.n	8003510 <USB_SetTurnaroundTime+0x6c>
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	4a32      	ldr	r2, [pc, #200]	@ (80035d0 <USB_SetTurnaroundTime+0x12c>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d802      	bhi.n	8003510 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800350a:	230c      	movs	r3, #12
 800350c:	617b      	str	r3, [r7, #20]
 800350e:	e041      	b.n	8003594 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	4a2f      	ldr	r2, [pc, #188]	@ (80035d0 <USB_SetTurnaroundTime+0x12c>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d906      	bls.n	8003526 <USB_SetTurnaroundTime+0x82>
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	4a2e      	ldr	r2, [pc, #184]	@ (80035d4 <USB_SetTurnaroundTime+0x130>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d802      	bhi.n	8003526 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003520:	230b      	movs	r3, #11
 8003522:	617b      	str	r3, [r7, #20]
 8003524:	e036      	b.n	8003594 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	4a2a      	ldr	r2, [pc, #168]	@ (80035d4 <USB_SetTurnaroundTime+0x130>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d906      	bls.n	800353c <USB_SetTurnaroundTime+0x98>
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	4a29      	ldr	r2, [pc, #164]	@ (80035d8 <USB_SetTurnaroundTime+0x134>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d802      	bhi.n	800353c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003536:	230a      	movs	r3, #10
 8003538:	617b      	str	r3, [r7, #20]
 800353a:	e02b      	b.n	8003594 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	4a26      	ldr	r2, [pc, #152]	@ (80035d8 <USB_SetTurnaroundTime+0x134>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d906      	bls.n	8003552 <USB_SetTurnaroundTime+0xae>
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	4a25      	ldr	r2, [pc, #148]	@ (80035dc <USB_SetTurnaroundTime+0x138>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d202      	bcs.n	8003552 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800354c:	2309      	movs	r3, #9
 800354e:	617b      	str	r3, [r7, #20]
 8003550:	e020      	b.n	8003594 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	4a21      	ldr	r2, [pc, #132]	@ (80035dc <USB_SetTurnaroundTime+0x138>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d306      	bcc.n	8003568 <USB_SetTurnaroundTime+0xc4>
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	4a20      	ldr	r2, [pc, #128]	@ (80035e0 <USB_SetTurnaroundTime+0x13c>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d802      	bhi.n	8003568 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003562:	2308      	movs	r3, #8
 8003564:	617b      	str	r3, [r7, #20]
 8003566:	e015      	b.n	8003594 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	4a1d      	ldr	r2, [pc, #116]	@ (80035e0 <USB_SetTurnaroundTime+0x13c>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d906      	bls.n	800357e <USB_SetTurnaroundTime+0xda>
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	4a1c      	ldr	r2, [pc, #112]	@ (80035e4 <USB_SetTurnaroundTime+0x140>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d202      	bcs.n	800357e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003578:	2307      	movs	r3, #7
 800357a:	617b      	str	r3, [r7, #20]
 800357c:	e00a      	b.n	8003594 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800357e:	2306      	movs	r3, #6
 8003580:	617b      	str	r3, [r7, #20]
 8003582:	e007      	b.n	8003594 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003584:	79fb      	ldrb	r3, [r7, #7]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d102      	bne.n	8003590 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800358a:	2309      	movs	r3, #9
 800358c:	617b      	str	r3, [r7, #20]
 800358e:	e001      	b.n	8003594 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003590:	2309      	movs	r3, #9
 8003592:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	68db      	ldr	r3, [r3, #12]
 8003598:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	68da      	ldr	r2, [r3, #12]
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	029b      	lsls	r3, r3, #10
 80035a8:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80035ac:	431a      	orrs	r2, r3
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80035b2:	2300      	movs	r3, #0
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	371c      	adds	r7, #28
 80035b8:	46bd      	mov	sp, r7
 80035ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035be:	4770      	bx	lr
 80035c0:	00d8acbf 	.word	0x00d8acbf
 80035c4:	00e4e1c0 	.word	0x00e4e1c0
 80035c8:	00f42400 	.word	0x00f42400
 80035cc:	01067380 	.word	0x01067380
 80035d0:	011a499f 	.word	0x011a499f
 80035d4:	01312cff 	.word	0x01312cff
 80035d8:	014ca43f 	.word	0x014ca43f
 80035dc:	016e3600 	.word	0x016e3600
 80035e0:	01a6ab1f 	.word	0x01a6ab1f
 80035e4:	01e84800 	.word	0x01e84800

080035e8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b083      	sub	sp, #12
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	f043 0201 	orr.w	r2, r3, #1
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80035fc:	2300      	movs	r3, #0
}
 80035fe:	4618      	mov	r0, r3
 8003600:	370c      	adds	r7, #12
 8003602:	46bd      	mov	sp, r7
 8003604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003608:	4770      	bx	lr

0800360a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800360a:	b480      	push	{r7}
 800360c:	b083      	sub	sp, #12
 800360e:	af00      	add	r7, sp, #0
 8003610:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	689b      	ldr	r3, [r3, #8]
 8003616:	f023 0201 	bic.w	r2, r3, #1
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800361e:	2300      	movs	r3, #0
}
 8003620:	4618      	mov	r0, r3
 8003622:	370c      	adds	r7, #12
 8003624:	46bd      	mov	sp, r7
 8003626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362a:	4770      	bx	lr

0800362c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b084      	sub	sp, #16
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
 8003634:	460b      	mov	r3, r1
 8003636:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003638:	2300      	movs	r3, #0
 800363a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	68db      	ldr	r3, [r3, #12]
 8003640:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003648:	78fb      	ldrb	r3, [r7, #3]
 800364a:	2b01      	cmp	r3, #1
 800364c:	d115      	bne.n	800367a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	68db      	ldr	r3, [r3, #12]
 8003652:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800365a:	200a      	movs	r0, #10
 800365c:	f7fd fa58 	bl	8000b10 <HAL_Delay>
      ms += 10U;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	330a      	adds	r3, #10
 8003664:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f001 f93f 	bl	80048ea <USB_GetMode>
 800366c:	4603      	mov	r3, r0
 800366e:	2b01      	cmp	r3, #1
 8003670:	d01e      	beq.n	80036b0 <USB_SetCurrentMode+0x84>
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2bc7      	cmp	r3, #199	@ 0xc7
 8003676:	d9f0      	bls.n	800365a <USB_SetCurrentMode+0x2e>
 8003678:	e01a      	b.n	80036b0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800367a:	78fb      	ldrb	r3, [r7, #3]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d115      	bne.n	80036ac <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	68db      	ldr	r3, [r3, #12]
 8003684:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800368c:	200a      	movs	r0, #10
 800368e:	f7fd fa3f 	bl	8000b10 <HAL_Delay>
      ms += 10U;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	330a      	adds	r3, #10
 8003696:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003698:	6878      	ldr	r0, [r7, #4]
 800369a:	f001 f926 	bl	80048ea <USB_GetMode>
 800369e:	4603      	mov	r3, r0
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d005      	beq.n	80036b0 <USB_SetCurrentMode+0x84>
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2bc7      	cmp	r3, #199	@ 0xc7
 80036a8:	d9f0      	bls.n	800368c <USB_SetCurrentMode+0x60>
 80036aa:	e001      	b.n	80036b0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	e005      	b.n	80036bc <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2bc8      	cmp	r3, #200	@ 0xc8
 80036b4:	d101      	bne.n	80036ba <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	e000      	b.n	80036bc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80036ba:	2300      	movs	r3, #0
}
 80036bc:	4618      	mov	r0, r3
 80036be:	3710      	adds	r7, #16
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}

080036c4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80036c4:	b084      	sub	sp, #16
 80036c6:	b580      	push	{r7, lr}
 80036c8:	b086      	sub	sp, #24
 80036ca:	af00      	add	r7, sp, #0
 80036cc:	6078      	str	r0, [r7, #4]
 80036ce:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80036d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80036d6:	2300      	movs	r3, #0
 80036d8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80036de:	2300      	movs	r3, #0
 80036e0:	613b      	str	r3, [r7, #16]
 80036e2:	e009      	b.n	80036f8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80036e4:	687a      	ldr	r2, [r7, #4]
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	3340      	adds	r3, #64	@ 0x40
 80036ea:	009b      	lsls	r3, r3, #2
 80036ec:	4413      	add	r3, r2
 80036ee:	2200      	movs	r2, #0
 80036f0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	3301      	adds	r3, #1
 80036f6:	613b      	str	r3, [r7, #16]
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	2b0e      	cmp	r3, #14
 80036fc:	d9f2      	bls.n	80036e4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80036fe:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003702:	2b00      	cmp	r3, #0
 8003704:	d11c      	bne.n	8003740 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	68fa      	ldr	r2, [r7, #12]
 8003710:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003714:	f043 0302 	orr.w	r3, r3, #2
 8003718:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800371e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800372a:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003736:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	639a      	str	r2, [r3, #56]	@ 0x38
 800373e:	e00b      	b.n	8003758 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003744:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003750:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800375e:	461a      	mov	r2, r3
 8003760:	2300      	movs	r3, #0
 8003762:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003764:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8003768:	2b01      	cmp	r3, #1
 800376a:	d10d      	bne.n	8003788 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800376c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003770:	2b00      	cmp	r3, #0
 8003772:	d104      	bne.n	800377e <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003774:	2100      	movs	r1, #0
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f000 f968 	bl	8003a4c <USB_SetDevSpeed>
 800377c:	e008      	b.n	8003790 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800377e:	2101      	movs	r1, #1
 8003780:	6878      	ldr	r0, [r7, #4]
 8003782:	f000 f963 	bl	8003a4c <USB_SetDevSpeed>
 8003786:	e003      	b.n	8003790 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003788:	2103      	movs	r1, #3
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	f000 f95e 	bl	8003a4c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003790:	2110      	movs	r1, #16
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f000 f8fa 	bl	800398c <USB_FlushTxFifo>
 8003798:	4603      	mov	r3, r0
 800379a:	2b00      	cmp	r3, #0
 800379c:	d001      	beq.n	80037a2 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f000 f924 	bl	80039f0 <USB_FlushRxFifo>
 80037a8:	4603      	mov	r3, r0
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d001      	beq.n	80037b2 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80037b8:	461a      	mov	r2, r3
 80037ba:	2300      	movs	r3, #0
 80037bc:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80037c4:	461a      	mov	r2, r3
 80037c6:	2300      	movs	r3, #0
 80037c8:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80037d0:	461a      	mov	r2, r3
 80037d2:	2300      	movs	r3, #0
 80037d4:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80037d6:	2300      	movs	r3, #0
 80037d8:	613b      	str	r3, [r7, #16]
 80037da:	e043      	b.n	8003864 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80037dc:	693b      	ldr	r3, [r7, #16]
 80037de:	015a      	lsls	r2, r3, #5
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	4413      	add	r3, r2
 80037e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80037ee:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80037f2:	d118      	bne.n	8003826 <USB_DevInit+0x162>
    {
      if (i == 0U)
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d10a      	bne.n	8003810 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	015a      	lsls	r2, r3, #5
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	4413      	add	r3, r2
 8003802:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003806:	461a      	mov	r2, r3
 8003808:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800380c:	6013      	str	r3, [r2, #0]
 800380e:	e013      	b.n	8003838 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003810:	693b      	ldr	r3, [r7, #16]
 8003812:	015a      	lsls	r2, r3, #5
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	4413      	add	r3, r2
 8003818:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800381c:	461a      	mov	r2, r3
 800381e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003822:	6013      	str	r3, [r2, #0]
 8003824:	e008      	b.n	8003838 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	015a      	lsls	r2, r3, #5
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	4413      	add	r3, r2
 800382e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003832:	461a      	mov	r2, r3
 8003834:	2300      	movs	r3, #0
 8003836:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	015a      	lsls	r2, r3, #5
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	4413      	add	r3, r2
 8003840:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003844:	461a      	mov	r2, r3
 8003846:	2300      	movs	r3, #0
 8003848:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	015a      	lsls	r2, r3, #5
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	4413      	add	r3, r2
 8003852:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003856:	461a      	mov	r2, r3
 8003858:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800385c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	3301      	adds	r3, #1
 8003862:	613b      	str	r3, [r7, #16]
 8003864:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003868:	461a      	mov	r2, r3
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	4293      	cmp	r3, r2
 800386e:	d3b5      	bcc.n	80037dc <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003870:	2300      	movs	r3, #0
 8003872:	613b      	str	r3, [r7, #16]
 8003874:	e043      	b.n	80038fe <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	015a      	lsls	r2, r3, #5
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	4413      	add	r3, r2
 800387e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003888:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800388c:	d118      	bne.n	80038c0 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d10a      	bne.n	80038aa <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	015a      	lsls	r2, r3, #5
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	4413      	add	r3, r2
 800389c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80038a0:	461a      	mov	r2, r3
 80038a2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80038a6:	6013      	str	r3, [r2, #0]
 80038a8:	e013      	b.n	80038d2 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	015a      	lsls	r2, r3, #5
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	4413      	add	r3, r2
 80038b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80038b6:	461a      	mov	r2, r3
 80038b8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80038bc:	6013      	str	r3, [r2, #0]
 80038be:	e008      	b.n	80038d2 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	015a      	lsls	r2, r3, #5
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	4413      	add	r3, r2
 80038c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80038cc:	461a      	mov	r2, r3
 80038ce:	2300      	movs	r3, #0
 80038d0:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	015a      	lsls	r2, r3, #5
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	4413      	add	r3, r2
 80038da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80038de:	461a      	mov	r2, r3
 80038e0:	2300      	movs	r3, #0
 80038e2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	015a      	lsls	r2, r3, #5
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	4413      	add	r3, r2
 80038ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80038f0:	461a      	mov	r2, r3
 80038f2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80038f6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	3301      	adds	r3, #1
 80038fc:	613b      	str	r3, [r7, #16]
 80038fe:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003902:	461a      	mov	r2, r3
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	4293      	cmp	r3, r2
 8003908:	d3b5      	bcc.n	8003876 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003910:	691b      	ldr	r3, [r3, #16]
 8003912:	68fa      	ldr	r2, [r7, #12]
 8003914:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003918:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800391c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2200      	movs	r2, #0
 8003922:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800392a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800392c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003930:	2b00      	cmp	r3, #0
 8003932:	d105      	bne.n	8003940 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	699b      	ldr	r3, [r3, #24]
 8003938:	f043 0210 	orr.w	r2, r3, #16
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	699a      	ldr	r2, [r3, #24]
 8003944:	4b10      	ldr	r3, [pc, #64]	@ (8003988 <USB_DevInit+0x2c4>)
 8003946:	4313      	orrs	r3, r2
 8003948:	687a      	ldr	r2, [r7, #4]
 800394a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800394c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8003950:	2b00      	cmp	r3, #0
 8003952:	d005      	beq.n	8003960 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	699b      	ldr	r3, [r3, #24]
 8003958:	f043 0208 	orr.w	r2, r3, #8
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003960:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003964:	2b01      	cmp	r3, #1
 8003966:	d107      	bne.n	8003978 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	699b      	ldr	r3, [r3, #24]
 800396c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003970:	f043 0304 	orr.w	r3, r3, #4
 8003974:	687a      	ldr	r2, [r7, #4]
 8003976:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003978:	7dfb      	ldrb	r3, [r7, #23]
}
 800397a:	4618      	mov	r0, r3
 800397c:	3718      	adds	r7, #24
 800397e:	46bd      	mov	sp, r7
 8003980:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003984:	b004      	add	sp, #16
 8003986:	4770      	bx	lr
 8003988:	803c3800 	.word	0x803c3800

0800398c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800398c:	b480      	push	{r7}
 800398e:	b085      	sub	sp, #20
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
 8003994:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003996:	2300      	movs	r3, #0
 8003998:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	3301      	adds	r3, #1
 800399e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80039a6:	d901      	bls.n	80039ac <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80039a8:	2303      	movs	r3, #3
 80039aa:	e01b      	b.n	80039e4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	691b      	ldr	r3, [r3, #16]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	daf2      	bge.n	800399a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80039b4:	2300      	movs	r3, #0
 80039b6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	019b      	lsls	r3, r3, #6
 80039bc:	f043 0220 	orr.w	r2, r3, #32
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	3301      	adds	r3, #1
 80039c8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80039d0:	d901      	bls.n	80039d6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80039d2:	2303      	movs	r3, #3
 80039d4:	e006      	b.n	80039e4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	691b      	ldr	r3, [r3, #16]
 80039da:	f003 0320 	and.w	r3, r3, #32
 80039de:	2b20      	cmp	r3, #32
 80039e0:	d0f0      	beq.n	80039c4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80039e2:	2300      	movs	r3, #0
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	3714      	adds	r7, #20
 80039e8:	46bd      	mov	sp, r7
 80039ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ee:	4770      	bx	lr

080039f0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b085      	sub	sp, #20
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80039f8:	2300      	movs	r3, #0
 80039fa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	3301      	adds	r3, #1
 8003a00:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003a08:	d901      	bls.n	8003a0e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003a0a:	2303      	movs	r3, #3
 8003a0c:	e018      	b.n	8003a40 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	691b      	ldr	r3, [r3, #16]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	daf2      	bge.n	80039fc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003a16:	2300      	movs	r3, #0
 8003a18:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2210      	movs	r2, #16
 8003a1e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	3301      	adds	r3, #1
 8003a24:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003a2c:	d901      	bls.n	8003a32 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003a2e:	2303      	movs	r3, #3
 8003a30:	e006      	b.n	8003a40 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	691b      	ldr	r3, [r3, #16]
 8003a36:	f003 0310 	and.w	r3, r3, #16
 8003a3a:	2b10      	cmp	r3, #16
 8003a3c:	d0f0      	beq.n	8003a20 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003a3e:	2300      	movs	r3, #0
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	3714      	adds	r7, #20
 8003a44:	46bd      	mov	sp, r7
 8003a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4a:	4770      	bx	lr

08003a4c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b085      	sub	sp, #20
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
 8003a54:	460b      	mov	r3, r1
 8003a56:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a62:	681a      	ldr	r2, [r3, #0]
 8003a64:	78fb      	ldrb	r3, [r7, #3]
 8003a66:	68f9      	ldr	r1, [r7, #12]
 8003a68:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003a70:	2300      	movs	r3, #0
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	3714      	adds	r7, #20
 8003a76:	46bd      	mov	sp, r7
 8003a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7c:	4770      	bx	lr

08003a7e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8003a7e:	b480      	push	{r7}
 8003a80:	b087      	sub	sp, #28
 8003a82:	af00      	add	r7, sp, #0
 8003a84:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	f003 0306 	and.w	r3, r3, #6
 8003a96:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d102      	bne.n	8003aa4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	75fb      	strb	r3, [r7, #23]
 8003aa2:	e00a      	b.n	8003aba <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	2b02      	cmp	r3, #2
 8003aa8:	d002      	beq.n	8003ab0 <USB_GetDevSpeed+0x32>
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	2b06      	cmp	r3, #6
 8003aae:	d102      	bne.n	8003ab6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003ab0:	2302      	movs	r3, #2
 8003ab2:	75fb      	strb	r3, [r7, #23]
 8003ab4:	e001      	b.n	8003aba <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003ab6:	230f      	movs	r3, #15
 8003ab8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003aba:	7dfb      	ldrb	r3, [r7, #23]
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	371c      	adds	r7, #28
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac6:	4770      	bx	lr

08003ac8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b085      	sub	sp, #20
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
 8003ad0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	781b      	ldrb	r3, [r3, #0]
 8003ada:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	785b      	ldrb	r3, [r3, #1]
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	d13a      	bne.n	8003b5a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003aea:	69da      	ldr	r2, [r3, #28]
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	781b      	ldrb	r3, [r3, #0]
 8003af0:	f003 030f 	and.w	r3, r3, #15
 8003af4:	2101      	movs	r1, #1
 8003af6:	fa01 f303 	lsl.w	r3, r1, r3
 8003afa:	b29b      	uxth	r3, r3
 8003afc:	68f9      	ldr	r1, [r7, #12]
 8003afe:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003b02:	4313      	orrs	r3, r2
 8003b04:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	015a      	lsls	r2, r3, #5
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	4413      	add	r3, r2
 8003b0e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d155      	bne.n	8003bc8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	015a      	lsls	r2, r3, #5
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	4413      	add	r3, r2
 8003b24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	791b      	ldrb	r3, [r3, #4]
 8003b36:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003b38:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	059b      	lsls	r3, r3, #22
 8003b3e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003b40:	4313      	orrs	r3, r2
 8003b42:	68ba      	ldr	r2, [r7, #8]
 8003b44:	0151      	lsls	r1, r2, #5
 8003b46:	68fa      	ldr	r2, [r7, #12]
 8003b48:	440a      	add	r2, r1
 8003b4a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003b4e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b52:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003b56:	6013      	str	r3, [r2, #0]
 8003b58:	e036      	b.n	8003bc8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b60:	69da      	ldr	r2, [r3, #28]
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	781b      	ldrb	r3, [r3, #0]
 8003b66:	f003 030f 	and.w	r3, r3, #15
 8003b6a:	2101      	movs	r1, #1
 8003b6c:	fa01 f303 	lsl.w	r3, r1, r3
 8003b70:	041b      	lsls	r3, r3, #16
 8003b72:	68f9      	ldr	r1, [r7, #12]
 8003b74:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	015a      	lsls	r2, r3, #5
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	4413      	add	r3, r2
 8003b84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d11a      	bne.n	8003bc8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	015a      	lsls	r2, r3, #5
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	4413      	add	r3, r2
 8003b9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b9e:	681a      	ldr	r2, [r3, #0]
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	791b      	ldrb	r3, [r3, #4]
 8003bac:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003bae:	430b      	orrs	r3, r1
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	68ba      	ldr	r2, [r7, #8]
 8003bb4:	0151      	lsls	r1, r2, #5
 8003bb6:	68fa      	ldr	r2, [r7, #12]
 8003bb8:	440a      	add	r2, r1
 8003bba:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003bbe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003bc2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003bc6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003bc8:	2300      	movs	r3, #0
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	3714      	adds	r7, #20
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd4:	4770      	bx	lr
	...

08003bd8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b085      	sub	sp, #20
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
 8003be0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	781b      	ldrb	r3, [r3, #0]
 8003bea:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	785b      	ldrb	r3, [r3, #1]
 8003bf0:	2b01      	cmp	r3, #1
 8003bf2:	d161      	bne.n	8003cb8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	015a      	lsls	r2, r3, #5
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	4413      	add	r3, r2
 8003bfc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003c06:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003c0a:	d11f      	bne.n	8003c4c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	015a      	lsls	r2, r3, #5
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	4413      	add	r3, r2
 8003c14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	68ba      	ldr	r2, [r7, #8]
 8003c1c:	0151      	lsls	r1, r2, #5
 8003c1e:	68fa      	ldr	r2, [r7, #12]
 8003c20:	440a      	add	r2, r1
 8003c22:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003c26:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003c2a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	015a      	lsls	r2, r3, #5
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	4413      	add	r3, r2
 8003c34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	68ba      	ldr	r2, [r7, #8]
 8003c3c:	0151      	lsls	r1, r2, #5
 8003c3e:	68fa      	ldr	r2, [r7, #12]
 8003c40:	440a      	add	r2, r1
 8003c42:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003c46:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003c4a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c52:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	781b      	ldrb	r3, [r3, #0]
 8003c58:	f003 030f 	and.w	r3, r3, #15
 8003c5c:	2101      	movs	r1, #1
 8003c5e:	fa01 f303 	lsl.w	r3, r1, r3
 8003c62:	b29b      	uxth	r3, r3
 8003c64:	43db      	mvns	r3, r3
 8003c66:	68f9      	ldr	r1, [r7, #12]
 8003c68:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003c6c:	4013      	ands	r3, r2
 8003c6e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c76:	69da      	ldr	r2, [r3, #28]
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	781b      	ldrb	r3, [r3, #0]
 8003c7c:	f003 030f 	and.w	r3, r3, #15
 8003c80:	2101      	movs	r1, #1
 8003c82:	fa01 f303 	lsl.w	r3, r1, r3
 8003c86:	b29b      	uxth	r3, r3
 8003c88:	43db      	mvns	r3, r3
 8003c8a:	68f9      	ldr	r1, [r7, #12]
 8003c8c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003c90:	4013      	ands	r3, r2
 8003c92:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	015a      	lsls	r2, r3, #5
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	4413      	add	r3, r2
 8003c9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ca0:	681a      	ldr	r2, [r3, #0]
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	0159      	lsls	r1, r3, #5
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	440b      	add	r3, r1
 8003caa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003cae:	4619      	mov	r1, r3
 8003cb0:	4b35      	ldr	r3, [pc, #212]	@ (8003d88 <USB_DeactivateEndpoint+0x1b0>)
 8003cb2:	4013      	ands	r3, r2
 8003cb4:	600b      	str	r3, [r1, #0]
 8003cb6:	e060      	b.n	8003d7a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	015a      	lsls	r2, r3, #5
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	4413      	add	r3, r2
 8003cc0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003cca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003cce:	d11f      	bne.n	8003d10 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	015a      	lsls	r2, r3, #5
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	4413      	add	r3, r2
 8003cd8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	68ba      	ldr	r2, [r7, #8]
 8003ce0:	0151      	lsls	r1, r2, #5
 8003ce2:	68fa      	ldr	r2, [r7, #12]
 8003ce4:	440a      	add	r2, r1
 8003ce6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003cea:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003cee:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	015a      	lsls	r2, r3, #5
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	4413      	add	r3, r2
 8003cf8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	68ba      	ldr	r2, [r7, #8]
 8003d00:	0151      	lsls	r1, r2, #5
 8003d02:	68fa      	ldr	r2, [r7, #12]
 8003d04:	440a      	add	r2, r1
 8003d06:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003d0a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003d0e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d16:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	781b      	ldrb	r3, [r3, #0]
 8003d1c:	f003 030f 	and.w	r3, r3, #15
 8003d20:	2101      	movs	r1, #1
 8003d22:	fa01 f303 	lsl.w	r3, r1, r3
 8003d26:	041b      	lsls	r3, r3, #16
 8003d28:	43db      	mvns	r3, r3
 8003d2a:	68f9      	ldr	r1, [r7, #12]
 8003d2c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003d30:	4013      	ands	r3, r2
 8003d32:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d3a:	69da      	ldr	r2, [r3, #28]
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	781b      	ldrb	r3, [r3, #0]
 8003d40:	f003 030f 	and.w	r3, r3, #15
 8003d44:	2101      	movs	r1, #1
 8003d46:	fa01 f303 	lsl.w	r3, r1, r3
 8003d4a:	041b      	lsls	r3, r3, #16
 8003d4c:	43db      	mvns	r3, r3
 8003d4e:	68f9      	ldr	r1, [r7, #12]
 8003d50:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003d54:	4013      	ands	r3, r2
 8003d56:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	015a      	lsls	r2, r3, #5
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	4413      	add	r3, r2
 8003d60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d64:	681a      	ldr	r2, [r3, #0]
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	0159      	lsls	r1, r3, #5
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	440b      	add	r3, r1
 8003d6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d72:	4619      	mov	r1, r3
 8003d74:	4b05      	ldr	r3, [pc, #20]	@ (8003d8c <USB_DeactivateEndpoint+0x1b4>)
 8003d76:	4013      	ands	r3, r2
 8003d78:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003d7a:	2300      	movs	r3, #0
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	3714      	adds	r7, #20
 8003d80:	46bd      	mov	sp, r7
 8003d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d86:	4770      	bx	lr
 8003d88:	ec337800 	.word	0xec337800
 8003d8c:	eff37800 	.word	0xeff37800

08003d90 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b08a      	sub	sp, #40	@ 0x28
 8003d94:	af02      	add	r7, sp, #8
 8003d96:	60f8      	str	r0, [r7, #12]
 8003d98:	60b9      	str	r1, [r7, #8]
 8003d9a:	4613      	mov	r3, r2
 8003d9c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	781b      	ldrb	r3, [r3, #0]
 8003da6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	785b      	ldrb	r3, [r3, #1]
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	f040 817f 	bne.w	80040b0 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	691b      	ldr	r3, [r3, #16]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d132      	bne.n	8003e20 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003dba:	69bb      	ldr	r3, [r7, #24]
 8003dbc:	015a      	lsls	r2, r3, #5
 8003dbe:	69fb      	ldr	r3, [r7, #28]
 8003dc0:	4413      	add	r3, r2
 8003dc2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003dc6:	691b      	ldr	r3, [r3, #16]
 8003dc8:	69ba      	ldr	r2, [r7, #24]
 8003dca:	0151      	lsls	r1, r2, #5
 8003dcc:	69fa      	ldr	r2, [r7, #28]
 8003dce:	440a      	add	r2, r1
 8003dd0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003dd4:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8003dd8:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8003ddc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003dde:	69bb      	ldr	r3, [r7, #24]
 8003de0:	015a      	lsls	r2, r3, #5
 8003de2:	69fb      	ldr	r3, [r7, #28]
 8003de4:	4413      	add	r3, r2
 8003de6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003dea:	691b      	ldr	r3, [r3, #16]
 8003dec:	69ba      	ldr	r2, [r7, #24]
 8003dee:	0151      	lsls	r1, r2, #5
 8003df0:	69fa      	ldr	r2, [r7, #28]
 8003df2:	440a      	add	r2, r1
 8003df4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003df8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003dfc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003dfe:	69bb      	ldr	r3, [r7, #24]
 8003e00:	015a      	lsls	r2, r3, #5
 8003e02:	69fb      	ldr	r3, [r7, #28]
 8003e04:	4413      	add	r3, r2
 8003e06:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e0a:	691b      	ldr	r3, [r3, #16]
 8003e0c:	69ba      	ldr	r2, [r7, #24]
 8003e0e:	0151      	lsls	r1, r2, #5
 8003e10:	69fa      	ldr	r2, [r7, #28]
 8003e12:	440a      	add	r2, r1
 8003e14:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003e18:	0cdb      	lsrs	r3, r3, #19
 8003e1a:	04db      	lsls	r3, r3, #19
 8003e1c:	6113      	str	r3, [r2, #16]
 8003e1e:	e097      	b.n	8003f50 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003e20:	69bb      	ldr	r3, [r7, #24]
 8003e22:	015a      	lsls	r2, r3, #5
 8003e24:	69fb      	ldr	r3, [r7, #28]
 8003e26:	4413      	add	r3, r2
 8003e28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e2c:	691b      	ldr	r3, [r3, #16]
 8003e2e:	69ba      	ldr	r2, [r7, #24]
 8003e30:	0151      	lsls	r1, r2, #5
 8003e32:	69fa      	ldr	r2, [r7, #28]
 8003e34:	440a      	add	r2, r1
 8003e36:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003e3a:	0cdb      	lsrs	r3, r3, #19
 8003e3c:	04db      	lsls	r3, r3, #19
 8003e3e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003e40:	69bb      	ldr	r3, [r7, #24]
 8003e42:	015a      	lsls	r2, r3, #5
 8003e44:	69fb      	ldr	r3, [r7, #28]
 8003e46:	4413      	add	r3, r2
 8003e48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e4c:	691b      	ldr	r3, [r3, #16]
 8003e4e:	69ba      	ldr	r2, [r7, #24]
 8003e50:	0151      	lsls	r1, r2, #5
 8003e52:	69fa      	ldr	r2, [r7, #28]
 8003e54:	440a      	add	r2, r1
 8003e56:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003e5a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8003e5e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8003e62:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8003e64:	69bb      	ldr	r3, [r7, #24]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d11a      	bne.n	8003ea0 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	691a      	ldr	r2, [r3, #16]
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	429a      	cmp	r2, r3
 8003e74:	d903      	bls.n	8003e7e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	689a      	ldr	r2, [r3, #8]
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003e7e:	69bb      	ldr	r3, [r7, #24]
 8003e80:	015a      	lsls	r2, r3, #5
 8003e82:	69fb      	ldr	r3, [r7, #28]
 8003e84:	4413      	add	r3, r2
 8003e86:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e8a:	691b      	ldr	r3, [r3, #16]
 8003e8c:	69ba      	ldr	r2, [r7, #24]
 8003e8e:	0151      	lsls	r1, r2, #5
 8003e90:	69fa      	ldr	r2, [r7, #28]
 8003e92:	440a      	add	r2, r1
 8003e94:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003e98:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003e9c:	6113      	str	r3, [r2, #16]
 8003e9e:	e044      	b.n	8003f2a <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	691a      	ldr	r2, [r3, #16]
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	4413      	add	r3, r2
 8003eaa:	1e5a      	subs	r2, r3, #1
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eb4:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8003eb6:	69bb      	ldr	r3, [r7, #24]
 8003eb8:	015a      	lsls	r2, r3, #5
 8003eba:	69fb      	ldr	r3, [r7, #28]
 8003ebc:	4413      	add	r3, r2
 8003ebe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ec2:	691a      	ldr	r2, [r3, #16]
 8003ec4:	8afb      	ldrh	r3, [r7, #22]
 8003ec6:	04d9      	lsls	r1, r3, #19
 8003ec8:	4ba4      	ldr	r3, [pc, #656]	@ (800415c <USB_EPStartXfer+0x3cc>)
 8003eca:	400b      	ands	r3, r1
 8003ecc:	69b9      	ldr	r1, [r7, #24]
 8003ece:	0148      	lsls	r0, r1, #5
 8003ed0:	69f9      	ldr	r1, [r7, #28]
 8003ed2:	4401      	add	r1, r0
 8003ed4:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	791b      	ldrb	r3, [r3, #4]
 8003ee0:	2b01      	cmp	r3, #1
 8003ee2:	d122      	bne.n	8003f2a <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003ee4:	69bb      	ldr	r3, [r7, #24]
 8003ee6:	015a      	lsls	r2, r3, #5
 8003ee8:	69fb      	ldr	r3, [r7, #28]
 8003eea:	4413      	add	r3, r2
 8003eec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ef0:	691b      	ldr	r3, [r3, #16]
 8003ef2:	69ba      	ldr	r2, [r7, #24]
 8003ef4:	0151      	lsls	r1, r2, #5
 8003ef6:	69fa      	ldr	r2, [r7, #28]
 8003ef8:	440a      	add	r2, r1
 8003efa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003efe:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8003f02:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8003f04:	69bb      	ldr	r3, [r7, #24]
 8003f06:	015a      	lsls	r2, r3, #5
 8003f08:	69fb      	ldr	r3, [r7, #28]
 8003f0a:	4413      	add	r3, r2
 8003f0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f10:	691a      	ldr	r2, [r3, #16]
 8003f12:	8afb      	ldrh	r3, [r7, #22]
 8003f14:	075b      	lsls	r3, r3, #29
 8003f16:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8003f1a:	69b9      	ldr	r1, [r7, #24]
 8003f1c:	0148      	lsls	r0, r1, #5
 8003f1e:	69f9      	ldr	r1, [r7, #28]
 8003f20:	4401      	add	r1, r0
 8003f22:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8003f26:	4313      	orrs	r3, r2
 8003f28:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003f2a:	69bb      	ldr	r3, [r7, #24]
 8003f2c:	015a      	lsls	r2, r3, #5
 8003f2e:	69fb      	ldr	r3, [r7, #28]
 8003f30:	4413      	add	r3, r2
 8003f32:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f36:	691a      	ldr	r2, [r3, #16]
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	691b      	ldr	r3, [r3, #16]
 8003f3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f40:	69b9      	ldr	r1, [r7, #24]
 8003f42:	0148      	lsls	r0, r1, #5
 8003f44:	69f9      	ldr	r1, [r7, #28]
 8003f46:	4401      	add	r1, r0
 8003f48:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003f50:	79fb      	ldrb	r3, [r7, #7]
 8003f52:	2b01      	cmp	r3, #1
 8003f54:	d14b      	bne.n	8003fee <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	69db      	ldr	r3, [r3, #28]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d009      	beq.n	8003f72 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003f5e:	69bb      	ldr	r3, [r7, #24]
 8003f60:	015a      	lsls	r2, r3, #5
 8003f62:	69fb      	ldr	r3, [r7, #28]
 8003f64:	4413      	add	r3, r2
 8003f66:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f6a:	461a      	mov	r2, r3
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	69db      	ldr	r3, [r3, #28]
 8003f70:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	791b      	ldrb	r3, [r3, #4]
 8003f76:	2b01      	cmp	r3, #1
 8003f78:	d128      	bne.n	8003fcc <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003f7a:	69fb      	ldr	r3, [r7, #28]
 8003f7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d110      	bne.n	8003fac <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003f8a:	69bb      	ldr	r3, [r7, #24]
 8003f8c:	015a      	lsls	r2, r3, #5
 8003f8e:	69fb      	ldr	r3, [r7, #28]
 8003f90:	4413      	add	r3, r2
 8003f92:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	69ba      	ldr	r2, [r7, #24]
 8003f9a:	0151      	lsls	r1, r2, #5
 8003f9c:	69fa      	ldr	r2, [r7, #28]
 8003f9e:	440a      	add	r2, r1
 8003fa0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003fa4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003fa8:	6013      	str	r3, [r2, #0]
 8003faa:	e00f      	b.n	8003fcc <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003fac:	69bb      	ldr	r3, [r7, #24]
 8003fae:	015a      	lsls	r2, r3, #5
 8003fb0:	69fb      	ldr	r3, [r7, #28]
 8003fb2:	4413      	add	r3, r2
 8003fb4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	69ba      	ldr	r2, [r7, #24]
 8003fbc:	0151      	lsls	r1, r2, #5
 8003fbe:	69fa      	ldr	r2, [r7, #28]
 8003fc0:	440a      	add	r2, r1
 8003fc2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003fc6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003fca:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003fcc:	69bb      	ldr	r3, [r7, #24]
 8003fce:	015a      	lsls	r2, r3, #5
 8003fd0:	69fb      	ldr	r3, [r7, #28]
 8003fd2:	4413      	add	r3, r2
 8003fd4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	69ba      	ldr	r2, [r7, #24]
 8003fdc:	0151      	lsls	r1, r2, #5
 8003fde:	69fa      	ldr	r2, [r7, #28]
 8003fe0:	440a      	add	r2, r1
 8003fe2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003fe6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8003fea:	6013      	str	r3, [r2, #0]
 8003fec:	e166      	b.n	80042bc <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003fee:	69bb      	ldr	r3, [r7, #24]
 8003ff0:	015a      	lsls	r2, r3, #5
 8003ff2:	69fb      	ldr	r3, [r7, #28]
 8003ff4:	4413      	add	r3, r2
 8003ff6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	69ba      	ldr	r2, [r7, #24]
 8003ffe:	0151      	lsls	r1, r2, #5
 8004000:	69fa      	ldr	r2, [r7, #28]
 8004002:	440a      	add	r2, r1
 8004004:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004008:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800400c:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	791b      	ldrb	r3, [r3, #4]
 8004012:	2b01      	cmp	r3, #1
 8004014:	d015      	beq.n	8004042 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	691b      	ldr	r3, [r3, #16]
 800401a:	2b00      	cmp	r3, #0
 800401c:	f000 814e 	beq.w	80042bc <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004020:	69fb      	ldr	r3, [r7, #28]
 8004022:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004026:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	781b      	ldrb	r3, [r3, #0]
 800402c:	f003 030f 	and.w	r3, r3, #15
 8004030:	2101      	movs	r1, #1
 8004032:	fa01 f303 	lsl.w	r3, r1, r3
 8004036:	69f9      	ldr	r1, [r7, #28]
 8004038:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800403c:	4313      	orrs	r3, r2
 800403e:	634b      	str	r3, [r1, #52]	@ 0x34
 8004040:	e13c      	b.n	80042bc <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004042:	69fb      	ldr	r3, [r7, #28]
 8004044:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004048:	689b      	ldr	r3, [r3, #8]
 800404a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800404e:	2b00      	cmp	r3, #0
 8004050:	d110      	bne.n	8004074 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004052:	69bb      	ldr	r3, [r7, #24]
 8004054:	015a      	lsls	r2, r3, #5
 8004056:	69fb      	ldr	r3, [r7, #28]
 8004058:	4413      	add	r3, r2
 800405a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	69ba      	ldr	r2, [r7, #24]
 8004062:	0151      	lsls	r1, r2, #5
 8004064:	69fa      	ldr	r2, [r7, #28]
 8004066:	440a      	add	r2, r1
 8004068:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800406c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004070:	6013      	str	r3, [r2, #0]
 8004072:	e00f      	b.n	8004094 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004074:	69bb      	ldr	r3, [r7, #24]
 8004076:	015a      	lsls	r2, r3, #5
 8004078:	69fb      	ldr	r3, [r7, #28]
 800407a:	4413      	add	r3, r2
 800407c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	69ba      	ldr	r2, [r7, #24]
 8004084:	0151      	lsls	r1, r2, #5
 8004086:	69fa      	ldr	r2, [r7, #28]
 8004088:	440a      	add	r2, r1
 800408a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800408e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004092:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	68d9      	ldr	r1, [r3, #12]
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	781a      	ldrb	r2, [r3, #0]
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	691b      	ldr	r3, [r3, #16]
 80040a0:	b298      	uxth	r0, r3
 80040a2:	79fb      	ldrb	r3, [r7, #7]
 80040a4:	9300      	str	r3, [sp, #0]
 80040a6:	4603      	mov	r3, r0
 80040a8:	68f8      	ldr	r0, [r7, #12]
 80040aa:	f000 f9b9 	bl	8004420 <USB_WritePacket>
 80040ae:	e105      	b.n	80042bc <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80040b0:	69bb      	ldr	r3, [r7, #24]
 80040b2:	015a      	lsls	r2, r3, #5
 80040b4:	69fb      	ldr	r3, [r7, #28]
 80040b6:	4413      	add	r3, r2
 80040b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80040bc:	691b      	ldr	r3, [r3, #16]
 80040be:	69ba      	ldr	r2, [r7, #24]
 80040c0:	0151      	lsls	r1, r2, #5
 80040c2:	69fa      	ldr	r2, [r7, #28]
 80040c4:	440a      	add	r2, r1
 80040c6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80040ca:	0cdb      	lsrs	r3, r3, #19
 80040cc:	04db      	lsls	r3, r3, #19
 80040ce:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80040d0:	69bb      	ldr	r3, [r7, #24]
 80040d2:	015a      	lsls	r2, r3, #5
 80040d4:	69fb      	ldr	r3, [r7, #28]
 80040d6:	4413      	add	r3, r2
 80040d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80040dc:	691b      	ldr	r3, [r3, #16]
 80040de:	69ba      	ldr	r2, [r7, #24]
 80040e0:	0151      	lsls	r1, r2, #5
 80040e2:	69fa      	ldr	r2, [r7, #28]
 80040e4:	440a      	add	r2, r1
 80040e6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80040ea:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80040ee:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80040f2:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80040f4:	69bb      	ldr	r3, [r7, #24]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d132      	bne.n	8004160 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	691b      	ldr	r3, [r3, #16]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d003      	beq.n	800410a <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	689a      	ldr	r2, [r3, #8]
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	689a      	ldr	r2, [r3, #8]
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004112:	69bb      	ldr	r3, [r7, #24]
 8004114:	015a      	lsls	r2, r3, #5
 8004116:	69fb      	ldr	r3, [r7, #28]
 8004118:	4413      	add	r3, r2
 800411a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800411e:	691a      	ldr	r2, [r3, #16]
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	6a1b      	ldr	r3, [r3, #32]
 8004124:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004128:	69b9      	ldr	r1, [r7, #24]
 800412a:	0148      	lsls	r0, r1, #5
 800412c:	69f9      	ldr	r1, [r7, #28]
 800412e:	4401      	add	r1, r0
 8004130:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004134:	4313      	orrs	r3, r2
 8004136:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004138:	69bb      	ldr	r3, [r7, #24]
 800413a:	015a      	lsls	r2, r3, #5
 800413c:	69fb      	ldr	r3, [r7, #28]
 800413e:	4413      	add	r3, r2
 8004140:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004144:	691b      	ldr	r3, [r3, #16]
 8004146:	69ba      	ldr	r2, [r7, #24]
 8004148:	0151      	lsls	r1, r2, #5
 800414a:	69fa      	ldr	r2, [r7, #28]
 800414c:	440a      	add	r2, r1
 800414e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004152:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004156:	6113      	str	r3, [r2, #16]
 8004158:	e062      	b.n	8004220 <USB_EPStartXfer+0x490>
 800415a:	bf00      	nop
 800415c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	691b      	ldr	r3, [r3, #16]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d123      	bne.n	80041b0 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004168:	69bb      	ldr	r3, [r7, #24]
 800416a:	015a      	lsls	r2, r3, #5
 800416c:	69fb      	ldr	r3, [r7, #28]
 800416e:	4413      	add	r3, r2
 8004170:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004174:	691a      	ldr	r2, [r3, #16]
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	689b      	ldr	r3, [r3, #8]
 800417a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800417e:	69b9      	ldr	r1, [r7, #24]
 8004180:	0148      	lsls	r0, r1, #5
 8004182:	69f9      	ldr	r1, [r7, #28]
 8004184:	4401      	add	r1, r0
 8004186:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800418a:	4313      	orrs	r3, r2
 800418c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800418e:	69bb      	ldr	r3, [r7, #24]
 8004190:	015a      	lsls	r2, r3, #5
 8004192:	69fb      	ldr	r3, [r7, #28]
 8004194:	4413      	add	r3, r2
 8004196:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800419a:	691b      	ldr	r3, [r3, #16]
 800419c:	69ba      	ldr	r2, [r7, #24]
 800419e:	0151      	lsls	r1, r2, #5
 80041a0:	69fa      	ldr	r2, [r7, #28]
 80041a2:	440a      	add	r2, r1
 80041a4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80041a8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80041ac:	6113      	str	r3, [r2, #16]
 80041ae:	e037      	b.n	8004220 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	691a      	ldr	r2, [r3, #16]
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	689b      	ldr	r3, [r3, #8]
 80041b8:	4413      	add	r3, r2
 80041ba:	1e5a      	subs	r2, r3, #1
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	689b      	ldr	r3, [r3, #8]
 80041c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80041c4:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	8afa      	ldrh	r2, [r7, #22]
 80041cc:	fb03 f202 	mul.w	r2, r3, r2
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80041d4:	69bb      	ldr	r3, [r7, #24]
 80041d6:	015a      	lsls	r2, r3, #5
 80041d8:	69fb      	ldr	r3, [r7, #28]
 80041da:	4413      	add	r3, r2
 80041dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041e0:	691a      	ldr	r2, [r3, #16]
 80041e2:	8afb      	ldrh	r3, [r7, #22]
 80041e4:	04d9      	lsls	r1, r3, #19
 80041e6:	4b38      	ldr	r3, [pc, #224]	@ (80042c8 <USB_EPStartXfer+0x538>)
 80041e8:	400b      	ands	r3, r1
 80041ea:	69b9      	ldr	r1, [r7, #24]
 80041ec:	0148      	lsls	r0, r1, #5
 80041ee:	69f9      	ldr	r1, [r7, #28]
 80041f0:	4401      	add	r1, r0
 80041f2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80041f6:	4313      	orrs	r3, r2
 80041f8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80041fa:	69bb      	ldr	r3, [r7, #24]
 80041fc:	015a      	lsls	r2, r3, #5
 80041fe:	69fb      	ldr	r3, [r7, #28]
 8004200:	4413      	add	r3, r2
 8004202:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004206:	691a      	ldr	r2, [r3, #16]
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	6a1b      	ldr	r3, [r3, #32]
 800420c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004210:	69b9      	ldr	r1, [r7, #24]
 8004212:	0148      	lsls	r0, r1, #5
 8004214:	69f9      	ldr	r1, [r7, #28]
 8004216:	4401      	add	r1, r0
 8004218:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800421c:	4313      	orrs	r3, r2
 800421e:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8004220:	79fb      	ldrb	r3, [r7, #7]
 8004222:	2b01      	cmp	r3, #1
 8004224:	d10d      	bne.n	8004242 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	68db      	ldr	r3, [r3, #12]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d009      	beq.n	8004242 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	68d9      	ldr	r1, [r3, #12]
 8004232:	69bb      	ldr	r3, [r7, #24]
 8004234:	015a      	lsls	r2, r3, #5
 8004236:	69fb      	ldr	r3, [r7, #28]
 8004238:	4413      	add	r3, r2
 800423a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800423e:	460a      	mov	r2, r1
 8004240:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	791b      	ldrb	r3, [r3, #4]
 8004246:	2b01      	cmp	r3, #1
 8004248:	d128      	bne.n	800429c <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800424a:	69fb      	ldr	r3, [r7, #28]
 800424c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004250:	689b      	ldr	r3, [r3, #8]
 8004252:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004256:	2b00      	cmp	r3, #0
 8004258:	d110      	bne.n	800427c <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800425a:	69bb      	ldr	r3, [r7, #24]
 800425c:	015a      	lsls	r2, r3, #5
 800425e:	69fb      	ldr	r3, [r7, #28]
 8004260:	4413      	add	r3, r2
 8004262:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	69ba      	ldr	r2, [r7, #24]
 800426a:	0151      	lsls	r1, r2, #5
 800426c:	69fa      	ldr	r2, [r7, #28]
 800426e:	440a      	add	r2, r1
 8004270:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004274:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004278:	6013      	str	r3, [r2, #0]
 800427a:	e00f      	b.n	800429c <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800427c:	69bb      	ldr	r3, [r7, #24]
 800427e:	015a      	lsls	r2, r3, #5
 8004280:	69fb      	ldr	r3, [r7, #28]
 8004282:	4413      	add	r3, r2
 8004284:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	69ba      	ldr	r2, [r7, #24]
 800428c:	0151      	lsls	r1, r2, #5
 800428e:	69fa      	ldr	r2, [r7, #28]
 8004290:	440a      	add	r2, r1
 8004292:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004296:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800429a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800429c:	69bb      	ldr	r3, [r7, #24]
 800429e:	015a      	lsls	r2, r3, #5
 80042a0:	69fb      	ldr	r3, [r7, #28]
 80042a2:	4413      	add	r3, r2
 80042a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	69ba      	ldr	r2, [r7, #24]
 80042ac:	0151      	lsls	r1, r2, #5
 80042ae:	69fa      	ldr	r2, [r7, #28]
 80042b0:	440a      	add	r2, r1
 80042b2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80042b6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80042ba:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80042bc:	2300      	movs	r3, #0
}
 80042be:	4618      	mov	r0, r3
 80042c0:	3720      	adds	r7, #32
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}
 80042c6:	bf00      	nop
 80042c8:	1ff80000 	.word	0x1ff80000

080042cc <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b087      	sub	sp, #28
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
 80042d4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80042d6:	2300      	movs	r3, #0
 80042d8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80042da:	2300      	movs	r3, #0
 80042dc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	785b      	ldrb	r3, [r3, #1]
 80042e6:	2b01      	cmp	r3, #1
 80042e8:	d14a      	bne.n	8004380 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	781b      	ldrb	r3, [r3, #0]
 80042ee:	015a      	lsls	r2, r3, #5
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	4413      	add	r3, r2
 80042f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80042fe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004302:	f040 8086 	bne.w	8004412 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	781b      	ldrb	r3, [r3, #0]
 800430a:	015a      	lsls	r2, r3, #5
 800430c:	693b      	ldr	r3, [r7, #16]
 800430e:	4413      	add	r3, r2
 8004310:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	683a      	ldr	r2, [r7, #0]
 8004318:	7812      	ldrb	r2, [r2, #0]
 800431a:	0151      	lsls	r1, r2, #5
 800431c:	693a      	ldr	r2, [r7, #16]
 800431e:	440a      	add	r2, r1
 8004320:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004324:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004328:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	781b      	ldrb	r3, [r3, #0]
 800432e:	015a      	lsls	r2, r3, #5
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	4413      	add	r3, r2
 8004334:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	683a      	ldr	r2, [r7, #0]
 800433c:	7812      	ldrb	r2, [r2, #0]
 800433e:	0151      	lsls	r1, r2, #5
 8004340:	693a      	ldr	r2, [r7, #16]
 8004342:	440a      	add	r2, r1
 8004344:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004348:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800434c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	3301      	adds	r3, #1
 8004352:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	f242 7210 	movw	r2, #10000	@ 0x2710
 800435a:	4293      	cmp	r3, r2
 800435c:	d902      	bls.n	8004364 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800435e:	2301      	movs	r3, #1
 8004360:	75fb      	strb	r3, [r7, #23]
          break;
 8004362:	e056      	b.n	8004412 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	781b      	ldrb	r3, [r3, #0]
 8004368:	015a      	lsls	r2, r3, #5
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	4413      	add	r3, r2
 800436e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004378:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800437c:	d0e7      	beq.n	800434e <USB_EPStopXfer+0x82>
 800437e:	e048      	b.n	8004412 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	781b      	ldrb	r3, [r3, #0]
 8004384:	015a      	lsls	r2, r3, #5
 8004386:	693b      	ldr	r3, [r7, #16]
 8004388:	4413      	add	r3, r2
 800438a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004394:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004398:	d13b      	bne.n	8004412 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	781b      	ldrb	r3, [r3, #0]
 800439e:	015a      	lsls	r2, r3, #5
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	4413      	add	r3, r2
 80043a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	683a      	ldr	r2, [r7, #0]
 80043ac:	7812      	ldrb	r2, [r2, #0]
 80043ae:	0151      	lsls	r1, r2, #5
 80043b0:	693a      	ldr	r2, [r7, #16]
 80043b2:	440a      	add	r2, r1
 80043b4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80043b8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80043bc:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	781b      	ldrb	r3, [r3, #0]
 80043c2:	015a      	lsls	r2, r3, #5
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	4413      	add	r3, r2
 80043c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	683a      	ldr	r2, [r7, #0]
 80043d0:	7812      	ldrb	r2, [r2, #0]
 80043d2:	0151      	lsls	r1, r2, #5
 80043d4:	693a      	ldr	r2, [r7, #16]
 80043d6:	440a      	add	r2, r1
 80043d8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80043dc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80043e0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	3301      	adds	r3, #1
 80043e6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	f242 7210 	movw	r2, #10000	@ 0x2710
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d902      	bls.n	80043f8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80043f2:	2301      	movs	r3, #1
 80043f4:	75fb      	strb	r3, [r7, #23]
          break;
 80043f6:	e00c      	b.n	8004412 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	781b      	ldrb	r3, [r3, #0]
 80043fc:	015a      	lsls	r2, r3, #5
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	4413      	add	r3, r2
 8004402:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800440c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004410:	d0e7      	beq.n	80043e2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8004412:	7dfb      	ldrb	r3, [r7, #23]
}
 8004414:	4618      	mov	r0, r3
 8004416:	371c      	adds	r7, #28
 8004418:	46bd      	mov	sp, r7
 800441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441e:	4770      	bx	lr

08004420 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004420:	b480      	push	{r7}
 8004422:	b089      	sub	sp, #36	@ 0x24
 8004424:	af00      	add	r7, sp, #0
 8004426:	60f8      	str	r0, [r7, #12]
 8004428:	60b9      	str	r1, [r7, #8]
 800442a:	4611      	mov	r1, r2
 800442c:	461a      	mov	r2, r3
 800442e:	460b      	mov	r3, r1
 8004430:	71fb      	strb	r3, [r7, #7]
 8004432:	4613      	mov	r3, r2
 8004434:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800443e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004442:	2b00      	cmp	r3, #0
 8004444:	d123      	bne.n	800448e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004446:	88bb      	ldrh	r3, [r7, #4]
 8004448:	3303      	adds	r3, #3
 800444a:	089b      	lsrs	r3, r3, #2
 800444c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800444e:	2300      	movs	r3, #0
 8004450:	61bb      	str	r3, [r7, #24]
 8004452:	e018      	b.n	8004486 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004454:	79fb      	ldrb	r3, [r7, #7]
 8004456:	031a      	lsls	r2, r3, #12
 8004458:	697b      	ldr	r3, [r7, #20]
 800445a:	4413      	add	r3, r2
 800445c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004460:	461a      	mov	r2, r3
 8004462:	69fb      	ldr	r3, [r7, #28]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004468:	69fb      	ldr	r3, [r7, #28]
 800446a:	3301      	adds	r3, #1
 800446c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800446e:	69fb      	ldr	r3, [r7, #28]
 8004470:	3301      	adds	r3, #1
 8004472:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004474:	69fb      	ldr	r3, [r7, #28]
 8004476:	3301      	adds	r3, #1
 8004478:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800447a:	69fb      	ldr	r3, [r7, #28]
 800447c:	3301      	adds	r3, #1
 800447e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004480:	69bb      	ldr	r3, [r7, #24]
 8004482:	3301      	adds	r3, #1
 8004484:	61bb      	str	r3, [r7, #24]
 8004486:	69ba      	ldr	r2, [r7, #24]
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	429a      	cmp	r2, r3
 800448c:	d3e2      	bcc.n	8004454 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800448e:	2300      	movs	r3, #0
}
 8004490:	4618      	mov	r0, r3
 8004492:	3724      	adds	r7, #36	@ 0x24
 8004494:	46bd      	mov	sp, r7
 8004496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449a:	4770      	bx	lr

0800449c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800449c:	b480      	push	{r7}
 800449e:	b08b      	sub	sp, #44	@ 0x2c
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	60f8      	str	r0, [r7, #12]
 80044a4:	60b9      	str	r1, [r7, #8]
 80044a6:	4613      	mov	r3, r2
 80044a8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80044b2:	88fb      	ldrh	r3, [r7, #6]
 80044b4:	089b      	lsrs	r3, r3, #2
 80044b6:	b29b      	uxth	r3, r3
 80044b8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80044ba:	88fb      	ldrh	r3, [r7, #6]
 80044bc:	f003 0303 	and.w	r3, r3, #3
 80044c0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80044c2:	2300      	movs	r3, #0
 80044c4:	623b      	str	r3, [r7, #32]
 80044c6:	e014      	b.n	80044f2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80044c8:	69bb      	ldr	r3, [r7, #24]
 80044ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80044ce:	681a      	ldr	r2, [r3, #0]
 80044d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044d2:	601a      	str	r2, [r3, #0]
    pDest++;
 80044d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044d6:	3301      	adds	r3, #1
 80044d8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80044da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044dc:	3301      	adds	r3, #1
 80044de:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80044e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044e2:	3301      	adds	r3, #1
 80044e4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80044e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044e8:	3301      	adds	r3, #1
 80044ea:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80044ec:	6a3b      	ldr	r3, [r7, #32]
 80044ee:	3301      	adds	r3, #1
 80044f0:	623b      	str	r3, [r7, #32]
 80044f2:	6a3a      	ldr	r2, [r7, #32]
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	429a      	cmp	r2, r3
 80044f8:	d3e6      	bcc.n	80044c8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80044fa:	8bfb      	ldrh	r3, [r7, #30]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d01e      	beq.n	800453e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004500:	2300      	movs	r3, #0
 8004502:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004504:	69bb      	ldr	r3, [r7, #24]
 8004506:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800450a:	461a      	mov	r2, r3
 800450c:	f107 0310 	add.w	r3, r7, #16
 8004510:	6812      	ldr	r2, [r2, #0]
 8004512:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004514:	693a      	ldr	r2, [r7, #16]
 8004516:	6a3b      	ldr	r3, [r7, #32]
 8004518:	b2db      	uxtb	r3, r3
 800451a:	00db      	lsls	r3, r3, #3
 800451c:	fa22 f303 	lsr.w	r3, r2, r3
 8004520:	b2da      	uxtb	r2, r3
 8004522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004524:	701a      	strb	r2, [r3, #0]
      i++;
 8004526:	6a3b      	ldr	r3, [r7, #32]
 8004528:	3301      	adds	r3, #1
 800452a:	623b      	str	r3, [r7, #32]
      pDest++;
 800452c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800452e:	3301      	adds	r3, #1
 8004530:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8004532:	8bfb      	ldrh	r3, [r7, #30]
 8004534:	3b01      	subs	r3, #1
 8004536:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004538:	8bfb      	ldrh	r3, [r7, #30]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d1ea      	bne.n	8004514 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800453e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004540:	4618      	mov	r0, r3
 8004542:	372c      	adds	r7, #44	@ 0x2c
 8004544:	46bd      	mov	sp, r7
 8004546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454a:	4770      	bx	lr

0800454c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800454c:	b480      	push	{r7}
 800454e:	b085      	sub	sp, #20
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
 8004554:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	781b      	ldrb	r3, [r3, #0]
 800455e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	785b      	ldrb	r3, [r3, #1]
 8004564:	2b01      	cmp	r3, #1
 8004566:	d12c      	bne.n	80045c2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	015a      	lsls	r2, r3, #5
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	4413      	add	r3, r2
 8004570:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	2b00      	cmp	r3, #0
 8004578:	db12      	blt.n	80045a0 <USB_EPSetStall+0x54>
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d00f      	beq.n	80045a0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	015a      	lsls	r2, r3, #5
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	4413      	add	r3, r2
 8004588:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	68ba      	ldr	r2, [r7, #8]
 8004590:	0151      	lsls	r1, r2, #5
 8004592:	68fa      	ldr	r2, [r7, #12]
 8004594:	440a      	add	r2, r1
 8004596:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800459a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800459e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	015a      	lsls	r2, r3, #5
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	4413      	add	r3, r2
 80045a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	68ba      	ldr	r2, [r7, #8]
 80045b0:	0151      	lsls	r1, r2, #5
 80045b2:	68fa      	ldr	r2, [r7, #12]
 80045b4:	440a      	add	r2, r1
 80045b6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80045ba:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80045be:	6013      	str	r3, [r2, #0]
 80045c0:	e02b      	b.n	800461a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	015a      	lsls	r2, r3, #5
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	4413      	add	r3, r2
 80045ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	db12      	blt.n	80045fa <USB_EPSetStall+0xae>
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d00f      	beq.n	80045fa <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	015a      	lsls	r2, r3, #5
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	4413      	add	r3, r2
 80045e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	68ba      	ldr	r2, [r7, #8]
 80045ea:	0151      	lsls	r1, r2, #5
 80045ec:	68fa      	ldr	r2, [r7, #12]
 80045ee:	440a      	add	r2, r1
 80045f0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80045f4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80045f8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	015a      	lsls	r2, r3, #5
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	4413      	add	r3, r2
 8004602:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	68ba      	ldr	r2, [r7, #8]
 800460a:	0151      	lsls	r1, r2, #5
 800460c:	68fa      	ldr	r2, [r7, #12]
 800460e:	440a      	add	r2, r1
 8004610:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004614:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004618:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800461a:	2300      	movs	r3, #0
}
 800461c:	4618      	mov	r0, r3
 800461e:	3714      	adds	r7, #20
 8004620:	46bd      	mov	sp, r7
 8004622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004626:	4770      	bx	lr

08004628 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004628:	b480      	push	{r7}
 800462a:	b085      	sub	sp, #20
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
 8004630:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	781b      	ldrb	r3, [r3, #0]
 800463a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	785b      	ldrb	r3, [r3, #1]
 8004640:	2b01      	cmp	r3, #1
 8004642:	d128      	bne.n	8004696 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	015a      	lsls	r2, r3, #5
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	4413      	add	r3, r2
 800464c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	68ba      	ldr	r2, [r7, #8]
 8004654:	0151      	lsls	r1, r2, #5
 8004656:	68fa      	ldr	r2, [r7, #12]
 8004658:	440a      	add	r2, r1
 800465a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800465e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004662:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	791b      	ldrb	r3, [r3, #4]
 8004668:	2b03      	cmp	r3, #3
 800466a:	d003      	beq.n	8004674 <USB_EPClearStall+0x4c>
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	791b      	ldrb	r3, [r3, #4]
 8004670:	2b02      	cmp	r3, #2
 8004672:	d138      	bne.n	80046e6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	015a      	lsls	r2, r3, #5
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	4413      	add	r3, r2
 800467c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	68ba      	ldr	r2, [r7, #8]
 8004684:	0151      	lsls	r1, r2, #5
 8004686:	68fa      	ldr	r2, [r7, #12]
 8004688:	440a      	add	r2, r1
 800468a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800468e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004692:	6013      	str	r3, [r2, #0]
 8004694:	e027      	b.n	80046e6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	015a      	lsls	r2, r3, #5
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	4413      	add	r3, r2
 800469e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	68ba      	ldr	r2, [r7, #8]
 80046a6:	0151      	lsls	r1, r2, #5
 80046a8:	68fa      	ldr	r2, [r7, #12]
 80046aa:	440a      	add	r2, r1
 80046ac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80046b0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80046b4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	791b      	ldrb	r3, [r3, #4]
 80046ba:	2b03      	cmp	r3, #3
 80046bc:	d003      	beq.n	80046c6 <USB_EPClearStall+0x9e>
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	791b      	ldrb	r3, [r3, #4]
 80046c2:	2b02      	cmp	r3, #2
 80046c4:	d10f      	bne.n	80046e6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	015a      	lsls	r2, r3, #5
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	4413      	add	r3, r2
 80046ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	68ba      	ldr	r2, [r7, #8]
 80046d6:	0151      	lsls	r1, r2, #5
 80046d8:	68fa      	ldr	r2, [r7, #12]
 80046da:	440a      	add	r2, r1
 80046dc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80046e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80046e4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80046e6:	2300      	movs	r3, #0
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	3714      	adds	r7, #20
 80046ec:	46bd      	mov	sp, r7
 80046ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f2:	4770      	bx	lr

080046f4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80046f4:	b480      	push	{r7}
 80046f6:	b085      	sub	sp, #20
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
 80046fc:	460b      	mov	r3, r1
 80046fe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	68fa      	ldr	r2, [r7, #12]
 800470e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004712:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8004716:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800471e:	681a      	ldr	r2, [r3, #0]
 8004720:	78fb      	ldrb	r3, [r7, #3]
 8004722:	011b      	lsls	r3, r3, #4
 8004724:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8004728:	68f9      	ldr	r1, [r7, #12]
 800472a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800472e:	4313      	orrs	r3, r2
 8004730:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004732:	2300      	movs	r3, #0
}
 8004734:	4618      	mov	r0, r3
 8004736:	3714      	adds	r7, #20
 8004738:	46bd      	mov	sp, r7
 800473a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473e:	4770      	bx	lr

08004740 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004740:	b480      	push	{r7}
 8004742:	b085      	sub	sp, #20
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	68fa      	ldr	r2, [r7, #12]
 8004756:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800475a:	f023 0303 	bic.w	r3, r3, #3
 800475e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	68fa      	ldr	r2, [r7, #12]
 800476a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800476e:	f023 0302 	bic.w	r3, r3, #2
 8004772:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004774:	2300      	movs	r3, #0
}
 8004776:	4618      	mov	r0, r3
 8004778:	3714      	adds	r7, #20
 800477a:	46bd      	mov	sp, r7
 800477c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004780:	4770      	bx	lr

08004782 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004782:	b480      	push	{r7}
 8004784:	b085      	sub	sp, #20
 8004786:	af00      	add	r7, sp, #0
 8004788:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	68fa      	ldr	r2, [r7, #12]
 8004798:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800479c:	f023 0303 	bic.w	r3, r3, #3
 80047a0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	68fa      	ldr	r2, [r7, #12]
 80047ac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80047b0:	f043 0302 	orr.w	r3, r3, #2
 80047b4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80047b6:	2300      	movs	r3, #0
}
 80047b8:	4618      	mov	r0, r3
 80047ba:	3714      	adds	r7, #20
 80047bc:	46bd      	mov	sp, r7
 80047be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c2:	4770      	bx	lr

080047c4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b085      	sub	sp, #20
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	695b      	ldr	r3, [r3, #20]
 80047d0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	699b      	ldr	r3, [r3, #24]
 80047d6:	68fa      	ldr	r2, [r7, #12]
 80047d8:	4013      	ands	r3, r2
 80047da:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80047dc:	68fb      	ldr	r3, [r7, #12]
}
 80047de:	4618      	mov	r0, r3
 80047e0:	3714      	adds	r7, #20
 80047e2:	46bd      	mov	sp, r7
 80047e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e8:	4770      	bx	lr

080047ea <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80047ea:	b480      	push	{r7}
 80047ec:	b085      	sub	sp, #20
 80047ee:	af00      	add	r7, sp, #0
 80047f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80047fc:	699b      	ldr	r3, [r3, #24]
 80047fe:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004806:	69db      	ldr	r3, [r3, #28]
 8004808:	68ba      	ldr	r2, [r7, #8]
 800480a:	4013      	ands	r3, r2
 800480c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	0c1b      	lsrs	r3, r3, #16
}
 8004812:	4618      	mov	r0, r3
 8004814:	3714      	adds	r7, #20
 8004816:	46bd      	mov	sp, r7
 8004818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481c:	4770      	bx	lr

0800481e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800481e:	b480      	push	{r7}
 8004820:	b085      	sub	sp, #20
 8004822:	af00      	add	r7, sp, #0
 8004824:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004830:	699b      	ldr	r3, [r3, #24]
 8004832:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800483a:	69db      	ldr	r3, [r3, #28]
 800483c:	68ba      	ldr	r2, [r7, #8]
 800483e:	4013      	ands	r3, r2
 8004840:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	b29b      	uxth	r3, r3
}
 8004846:	4618      	mov	r0, r3
 8004848:	3714      	adds	r7, #20
 800484a:	46bd      	mov	sp, r7
 800484c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004850:	4770      	bx	lr

08004852 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004852:	b480      	push	{r7}
 8004854:	b085      	sub	sp, #20
 8004856:	af00      	add	r7, sp, #0
 8004858:	6078      	str	r0, [r7, #4]
 800485a:	460b      	mov	r3, r1
 800485c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004862:	78fb      	ldrb	r3, [r7, #3]
 8004864:	015a      	lsls	r2, r3, #5
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	4413      	add	r3, r2
 800486a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800486e:	689b      	ldr	r3, [r3, #8]
 8004870:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004878:	695b      	ldr	r3, [r3, #20]
 800487a:	68ba      	ldr	r2, [r7, #8]
 800487c:	4013      	ands	r3, r2
 800487e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004880:	68bb      	ldr	r3, [r7, #8]
}
 8004882:	4618      	mov	r0, r3
 8004884:	3714      	adds	r7, #20
 8004886:	46bd      	mov	sp, r7
 8004888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488c:	4770      	bx	lr

0800488e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800488e:	b480      	push	{r7}
 8004890:	b087      	sub	sp, #28
 8004892:	af00      	add	r7, sp, #0
 8004894:	6078      	str	r0, [r7, #4]
 8004896:	460b      	mov	r3, r1
 8004898:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80048a4:	691b      	ldr	r3, [r3, #16]
 80048a6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80048ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048b0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80048b2:	78fb      	ldrb	r3, [r7, #3]
 80048b4:	f003 030f 	and.w	r3, r3, #15
 80048b8:	68fa      	ldr	r2, [r7, #12]
 80048ba:	fa22 f303 	lsr.w	r3, r2, r3
 80048be:	01db      	lsls	r3, r3, #7
 80048c0:	b2db      	uxtb	r3, r3
 80048c2:	693a      	ldr	r2, [r7, #16]
 80048c4:	4313      	orrs	r3, r2
 80048c6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80048c8:	78fb      	ldrb	r3, [r7, #3]
 80048ca:	015a      	lsls	r2, r3, #5
 80048cc:	697b      	ldr	r3, [r7, #20]
 80048ce:	4413      	add	r3, r2
 80048d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80048d4:	689b      	ldr	r3, [r3, #8]
 80048d6:	693a      	ldr	r2, [r7, #16]
 80048d8:	4013      	ands	r3, r2
 80048da:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80048dc:	68bb      	ldr	r3, [r7, #8]
}
 80048de:	4618      	mov	r0, r3
 80048e0:	371c      	adds	r7, #28
 80048e2:	46bd      	mov	sp, r7
 80048e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e8:	4770      	bx	lr

080048ea <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80048ea:	b480      	push	{r7}
 80048ec:	b083      	sub	sp, #12
 80048ee:	af00      	add	r7, sp, #0
 80048f0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	695b      	ldr	r3, [r3, #20]
 80048f6:	f003 0301 	and.w	r3, r3, #1
}
 80048fa:	4618      	mov	r0, r3
 80048fc:	370c      	adds	r7, #12
 80048fe:	46bd      	mov	sp, r7
 8004900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004904:	4770      	bx	lr

08004906 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8004906:	b480      	push	{r7}
 8004908:	b085      	sub	sp, #20
 800490a:	af00      	add	r7, sp, #0
 800490c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	68fa      	ldr	r2, [r7, #12]
 800491c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004920:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004924:	f023 0307 	bic.w	r3, r3, #7
 8004928:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	68fa      	ldr	r2, [r7, #12]
 8004934:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004938:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800493c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800493e:	2300      	movs	r3, #0
}
 8004940:	4618      	mov	r0, r3
 8004942:	3714      	adds	r7, #20
 8004944:	46bd      	mov	sp, r7
 8004946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494a:	4770      	bx	lr

0800494c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800494c:	b480      	push	{r7}
 800494e:	b087      	sub	sp, #28
 8004950:	af00      	add	r7, sp, #0
 8004952:	60f8      	str	r0, [r7, #12]
 8004954:	460b      	mov	r3, r1
 8004956:	607a      	str	r2, [r7, #4]
 8004958:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	333c      	adds	r3, #60	@ 0x3c
 8004962:	3304      	adds	r3, #4
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004968:	693b      	ldr	r3, [r7, #16]
 800496a:	4a26      	ldr	r2, [pc, #152]	@ (8004a04 <USB_EP0_OutStart+0xb8>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d90a      	bls.n	8004986 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800497c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004980:	d101      	bne.n	8004986 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004982:	2300      	movs	r3, #0
 8004984:	e037      	b.n	80049f6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800498c:	461a      	mov	r2, r3
 800498e:	2300      	movs	r3, #0
 8004990:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004998:	691b      	ldr	r3, [r3, #16]
 800499a:	697a      	ldr	r2, [r7, #20]
 800499c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80049a0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80049a4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049ac:	691b      	ldr	r3, [r3, #16]
 80049ae:	697a      	ldr	r2, [r7, #20]
 80049b0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80049b4:	f043 0318 	orr.w	r3, r3, #24
 80049b8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049c0:	691b      	ldr	r3, [r3, #16]
 80049c2:	697a      	ldr	r2, [r7, #20]
 80049c4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80049c8:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80049cc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80049ce:	7afb      	ldrb	r3, [r7, #11]
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	d10f      	bne.n	80049f4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049da:	461a      	mov	r2, r3
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	697a      	ldr	r2, [r7, #20]
 80049ea:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80049ee:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80049f2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80049f4:	2300      	movs	r3, #0
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	371c      	adds	r7, #28
 80049fa:	46bd      	mov	sp, r7
 80049fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a00:	4770      	bx	lr
 8004a02:	bf00      	nop
 8004a04:	4f54300a 	.word	0x4f54300a

08004a08 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004a08:	b480      	push	{r7}
 8004a0a:	b085      	sub	sp, #20
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004a10:	2300      	movs	r3, #0
 8004a12:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	3301      	adds	r3, #1
 8004a18:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004a20:	d901      	bls.n	8004a26 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004a22:	2303      	movs	r3, #3
 8004a24:	e01b      	b.n	8004a5e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	691b      	ldr	r3, [r3, #16]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	daf2      	bge.n	8004a14 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004a2e:	2300      	movs	r3, #0
 8004a30:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	691b      	ldr	r3, [r3, #16]
 8004a36:	f043 0201 	orr.w	r2, r3, #1
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	3301      	adds	r3, #1
 8004a42:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004a4a:	d901      	bls.n	8004a50 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004a4c:	2303      	movs	r3, #3
 8004a4e:	e006      	b.n	8004a5e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	691b      	ldr	r3, [r3, #16]
 8004a54:	f003 0301 	and.w	r3, r3, #1
 8004a58:	2b01      	cmp	r3, #1
 8004a5a:	d0f0      	beq.n	8004a3e <USB_CoreReset+0x36>

  return HAL_OK;
 8004a5c:	2300      	movs	r3, #0
}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	3714      	adds	r7, #20
 8004a62:	46bd      	mov	sp, r7
 8004a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a68:	4770      	bx	lr
	...

08004a6c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b084      	sub	sp, #16
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
 8004a74:	460b      	mov	r3, r1
 8004a76:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004a78:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8004a7c:	f004 f920 	bl	8008cc0 <USBD_static_malloc>
 8004a80:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d109      	bne.n	8004a9c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	32b0      	adds	r2, #176	@ 0xb0
 8004a92:	2100      	movs	r1, #0
 8004a94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8004a98:	2302      	movs	r3, #2
 8004a9a:	e0d4      	b.n	8004c46 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8004a9c:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8004aa0:	2100      	movs	r1, #0
 8004aa2:	68f8      	ldr	r0, [r7, #12]
 8004aa4:	f004 f950 	bl	8008d48 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	32b0      	adds	r2, #176	@ 0xb0
 8004ab2:	68f9      	ldr	r1, [r7, #12]
 8004ab4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	32b0      	adds	r2, #176	@ 0xb0
 8004ac2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	7c1b      	ldrb	r3, [r3, #16]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d138      	bne.n	8004b46 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004ad4:	4b5e      	ldr	r3, [pc, #376]	@ (8004c50 <USBD_CDC_Init+0x1e4>)
 8004ad6:	7819      	ldrb	r1, [r3, #0]
 8004ad8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004adc:	2202      	movs	r2, #2
 8004ade:	6878      	ldr	r0, [r7, #4]
 8004ae0:	f003 ffcb 	bl	8008a7a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004ae4:	4b5a      	ldr	r3, [pc, #360]	@ (8004c50 <USBD_CDC_Init+0x1e4>)
 8004ae6:	781b      	ldrb	r3, [r3, #0]
 8004ae8:	f003 020f 	and.w	r2, r3, #15
 8004aec:	6879      	ldr	r1, [r7, #4]
 8004aee:	4613      	mov	r3, r2
 8004af0:	009b      	lsls	r3, r3, #2
 8004af2:	4413      	add	r3, r2
 8004af4:	009b      	lsls	r3, r3, #2
 8004af6:	440b      	add	r3, r1
 8004af8:	3324      	adds	r3, #36	@ 0x24
 8004afa:	2201      	movs	r2, #1
 8004afc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8004afe:	4b55      	ldr	r3, [pc, #340]	@ (8004c54 <USBD_CDC_Init+0x1e8>)
 8004b00:	7819      	ldrb	r1, [r3, #0]
 8004b02:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004b06:	2202      	movs	r2, #2
 8004b08:	6878      	ldr	r0, [r7, #4]
 8004b0a:	f003 ffb6 	bl	8008a7a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8004b0e:	4b51      	ldr	r3, [pc, #324]	@ (8004c54 <USBD_CDC_Init+0x1e8>)
 8004b10:	781b      	ldrb	r3, [r3, #0]
 8004b12:	f003 020f 	and.w	r2, r3, #15
 8004b16:	6879      	ldr	r1, [r7, #4]
 8004b18:	4613      	mov	r3, r2
 8004b1a:	009b      	lsls	r3, r3, #2
 8004b1c:	4413      	add	r3, r2
 8004b1e:	009b      	lsls	r3, r3, #2
 8004b20:	440b      	add	r3, r1
 8004b22:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8004b26:	2201      	movs	r2, #1
 8004b28:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8004b2a:	4b4b      	ldr	r3, [pc, #300]	@ (8004c58 <USBD_CDC_Init+0x1ec>)
 8004b2c:	781b      	ldrb	r3, [r3, #0]
 8004b2e:	f003 020f 	and.w	r2, r3, #15
 8004b32:	6879      	ldr	r1, [r7, #4]
 8004b34:	4613      	mov	r3, r2
 8004b36:	009b      	lsls	r3, r3, #2
 8004b38:	4413      	add	r3, r2
 8004b3a:	009b      	lsls	r3, r3, #2
 8004b3c:	440b      	add	r3, r1
 8004b3e:	3326      	adds	r3, #38	@ 0x26
 8004b40:	2210      	movs	r2, #16
 8004b42:	801a      	strh	r2, [r3, #0]
 8004b44:	e035      	b.n	8004bb2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004b46:	4b42      	ldr	r3, [pc, #264]	@ (8004c50 <USBD_CDC_Init+0x1e4>)
 8004b48:	7819      	ldrb	r1, [r3, #0]
 8004b4a:	2340      	movs	r3, #64	@ 0x40
 8004b4c:	2202      	movs	r2, #2
 8004b4e:	6878      	ldr	r0, [r7, #4]
 8004b50:	f003 ff93 	bl	8008a7a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004b54:	4b3e      	ldr	r3, [pc, #248]	@ (8004c50 <USBD_CDC_Init+0x1e4>)
 8004b56:	781b      	ldrb	r3, [r3, #0]
 8004b58:	f003 020f 	and.w	r2, r3, #15
 8004b5c:	6879      	ldr	r1, [r7, #4]
 8004b5e:	4613      	mov	r3, r2
 8004b60:	009b      	lsls	r3, r3, #2
 8004b62:	4413      	add	r3, r2
 8004b64:	009b      	lsls	r3, r3, #2
 8004b66:	440b      	add	r3, r1
 8004b68:	3324      	adds	r3, #36	@ 0x24
 8004b6a:	2201      	movs	r2, #1
 8004b6c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8004b6e:	4b39      	ldr	r3, [pc, #228]	@ (8004c54 <USBD_CDC_Init+0x1e8>)
 8004b70:	7819      	ldrb	r1, [r3, #0]
 8004b72:	2340      	movs	r3, #64	@ 0x40
 8004b74:	2202      	movs	r2, #2
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f003 ff7f 	bl	8008a7a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8004b7c:	4b35      	ldr	r3, [pc, #212]	@ (8004c54 <USBD_CDC_Init+0x1e8>)
 8004b7e:	781b      	ldrb	r3, [r3, #0]
 8004b80:	f003 020f 	and.w	r2, r3, #15
 8004b84:	6879      	ldr	r1, [r7, #4]
 8004b86:	4613      	mov	r3, r2
 8004b88:	009b      	lsls	r3, r3, #2
 8004b8a:	4413      	add	r3, r2
 8004b8c:	009b      	lsls	r3, r3, #2
 8004b8e:	440b      	add	r3, r1
 8004b90:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8004b94:	2201      	movs	r2, #1
 8004b96:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8004b98:	4b2f      	ldr	r3, [pc, #188]	@ (8004c58 <USBD_CDC_Init+0x1ec>)
 8004b9a:	781b      	ldrb	r3, [r3, #0]
 8004b9c:	f003 020f 	and.w	r2, r3, #15
 8004ba0:	6879      	ldr	r1, [r7, #4]
 8004ba2:	4613      	mov	r3, r2
 8004ba4:	009b      	lsls	r3, r3, #2
 8004ba6:	4413      	add	r3, r2
 8004ba8:	009b      	lsls	r3, r3, #2
 8004baa:	440b      	add	r3, r1
 8004bac:	3326      	adds	r3, #38	@ 0x26
 8004bae:	2210      	movs	r2, #16
 8004bb0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004bb2:	4b29      	ldr	r3, [pc, #164]	@ (8004c58 <USBD_CDC_Init+0x1ec>)
 8004bb4:	7819      	ldrb	r1, [r3, #0]
 8004bb6:	2308      	movs	r3, #8
 8004bb8:	2203      	movs	r2, #3
 8004bba:	6878      	ldr	r0, [r7, #4]
 8004bbc:	f003 ff5d 	bl	8008a7a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8004bc0:	4b25      	ldr	r3, [pc, #148]	@ (8004c58 <USBD_CDC_Init+0x1ec>)
 8004bc2:	781b      	ldrb	r3, [r3, #0]
 8004bc4:	f003 020f 	and.w	r2, r3, #15
 8004bc8:	6879      	ldr	r1, [r7, #4]
 8004bca:	4613      	mov	r3, r2
 8004bcc:	009b      	lsls	r3, r3, #2
 8004bce:	4413      	add	r3, r2
 8004bd0:	009b      	lsls	r3, r3, #2
 8004bd2:	440b      	add	r3, r1
 8004bd4:	3324      	adds	r3, #36	@ 0x24
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004be8:	687a      	ldr	r2, [r7, #4]
 8004bea:	33b0      	adds	r3, #176	@ 0xb0
 8004bec:	009b      	lsls	r3, r3, #2
 8004bee:	4413      	add	r3, r2
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	2200      	movs	r2, #0
 8004c02:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d101      	bne.n	8004c14 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8004c10:	2302      	movs	r3, #2
 8004c12:	e018      	b.n	8004c46 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	7c1b      	ldrb	r3, [r3, #16]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d10a      	bne.n	8004c32 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004c1c:	4b0d      	ldr	r3, [pc, #52]	@ (8004c54 <USBD_CDC_Init+0x1e8>)
 8004c1e:	7819      	ldrb	r1, [r3, #0]
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8004c26:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	f004 f814 	bl	8008c58 <USBD_LL_PrepareReceive>
 8004c30:	e008      	b.n	8004c44 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004c32:	4b08      	ldr	r3, [pc, #32]	@ (8004c54 <USBD_CDC_Init+0x1e8>)
 8004c34:	7819      	ldrb	r1, [r3, #0]
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8004c3c:	2340      	movs	r3, #64	@ 0x40
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	f004 f80a 	bl	8008c58 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004c44:	2300      	movs	r3, #0
}
 8004c46:	4618      	mov	r0, r3
 8004c48:	3710      	adds	r7, #16
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}
 8004c4e:	bf00      	nop
 8004c50:	20000093 	.word	0x20000093
 8004c54:	20000094 	.word	0x20000094
 8004c58:	20000095 	.word	0x20000095

08004c5c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b082      	sub	sp, #8
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
 8004c64:	460b      	mov	r3, r1
 8004c66:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8004c68:	4b3a      	ldr	r3, [pc, #232]	@ (8004d54 <USBD_CDC_DeInit+0xf8>)
 8004c6a:	781b      	ldrb	r3, [r3, #0]
 8004c6c:	4619      	mov	r1, r3
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f003 ff29 	bl	8008ac6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8004c74:	4b37      	ldr	r3, [pc, #220]	@ (8004d54 <USBD_CDC_DeInit+0xf8>)
 8004c76:	781b      	ldrb	r3, [r3, #0]
 8004c78:	f003 020f 	and.w	r2, r3, #15
 8004c7c:	6879      	ldr	r1, [r7, #4]
 8004c7e:	4613      	mov	r3, r2
 8004c80:	009b      	lsls	r3, r3, #2
 8004c82:	4413      	add	r3, r2
 8004c84:	009b      	lsls	r3, r3, #2
 8004c86:	440b      	add	r3, r1
 8004c88:	3324      	adds	r3, #36	@ 0x24
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8004c8e:	4b32      	ldr	r3, [pc, #200]	@ (8004d58 <USBD_CDC_DeInit+0xfc>)
 8004c90:	781b      	ldrb	r3, [r3, #0]
 8004c92:	4619      	mov	r1, r3
 8004c94:	6878      	ldr	r0, [r7, #4]
 8004c96:	f003 ff16 	bl	8008ac6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8004c9a:	4b2f      	ldr	r3, [pc, #188]	@ (8004d58 <USBD_CDC_DeInit+0xfc>)
 8004c9c:	781b      	ldrb	r3, [r3, #0]
 8004c9e:	f003 020f 	and.w	r2, r3, #15
 8004ca2:	6879      	ldr	r1, [r7, #4]
 8004ca4:	4613      	mov	r3, r2
 8004ca6:	009b      	lsls	r3, r3, #2
 8004ca8:	4413      	add	r3, r2
 8004caa:	009b      	lsls	r3, r3, #2
 8004cac:	440b      	add	r3, r1
 8004cae:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8004cb6:	4b29      	ldr	r3, [pc, #164]	@ (8004d5c <USBD_CDC_DeInit+0x100>)
 8004cb8:	781b      	ldrb	r3, [r3, #0]
 8004cba:	4619      	mov	r1, r3
 8004cbc:	6878      	ldr	r0, [r7, #4]
 8004cbe:	f003 ff02 	bl	8008ac6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8004cc2:	4b26      	ldr	r3, [pc, #152]	@ (8004d5c <USBD_CDC_DeInit+0x100>)
 8004cc4:	781b      	ldrb	r3, [r3, #0]
 8004cc6:	f003 020f 	and.w	r2, r3, #15
 8004cca:	6879      	ldr	r1, [r7, #4]
 8004ccc:	4613      	mov	r3, r2
 8004cce:	009b      	lsls	r3, r3, #2
 8004cd0:	4413      	add	r3, r2
 8004cd2:	009b      	lsls	r3, r3, #2
 8004cd4:	440b      	add	r3, r1
 8004cd6:	3324      	adds	r3, #36	@ 0x24
 8004cd8:	2200      	movs	r2, #0
 8004cda:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8004cdc:	4b1f      	ldr	r3, [pc, #124]	@ (8004d5c <USBD_CDC_DeInit+0x100>)
 8004cde:	781b      	ldrb	r3, [r3, #0]
 8004ce0:	f003 020f 	and.w	r2, r3, #15
 8004ce4:	6879      	ldr	r1, [r7, #4]
 8004ce6:	4613      	mov	r3, r2
 8004ce8:	009b      	lsls	r3, r3, #2
 8004cea:	4413      	add	r3, r2
 8004cec:	009b      	lsls	r3, r3, #2
 8004cee:	440b      	add	r3, r1
 8004cf0:	3326      	adds	r3, #38	@ 0x26
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	32b0      	adds	r2, #176	@ 0xb0
 8004d00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d01f      	beq.n	8004d48 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004d0e:	687a      	ldr	r2, [r7, #4]
 8004d10:	33b0      	adds	r3, #176	@ 0xb0
 8004d12:	009b      	lsls	r3, r3, #2
 8004d14:	4413      	add	r3, r2
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	32b0      	adds	r2, #176	@ 0xb0
 8004d26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	f003 ffd6 	bl	8008cdc <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	32b0      	adds	r2, #176	@ 0xb0
 8004d3a:	2100      	movs	r1, #0
 8004d3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2200      	movs	r2, #0
 8004d44:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8004d48:	2300      	movs	r3, #0
}
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	3708      	adds	r7, #8
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}
 8004d52:	bf00      	nop
 8004d54:	20000093 	.word	0x20000093
 8004d58:	20000094 	.word	0x20000094
 8004d5c:	20000095 	.word	0x20000095

08004d60 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b086      	sub	sp, #24
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
 8004d68:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	32b0      	adds	r2, #176	@ 0xb0
 8004d74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d78:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8004d7e:	2300      	movs	r3, #0
 8004d80:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8004d82:	2300      	movs	r3, #0
 8004d84:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8004d86:	693b      	ldr	r3, [r7, #16]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d101      	bne.n	8004d90 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8004d8c:	2303      	movs	r3, #3
 8004d8e:	e0bf      	b.n	8004f10 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	781b      	ldrb	r3, [r3, #0]
 8004d94:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d050      	beq.n	8004e3e <USBD_CDC_Setup+0xde>
 8004d9c:	2b20      	cmp	r3, #32
 8004d9e:	f040 80af 	bne.w	8004f00 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	88db      	ldrh	r3, [r3, #6]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d03a      	beq.n	8004e20 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	781b      	ldrb	r3, [r3, #0]
 8004dae:	b25b      	sxtb	r3, r3
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	da1b      	bge.n	8004dec <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004dba:	687a      	ldr	r2, [r7, #4]
 8004dbc:	33b0      	adds	r3, #176	@ 0xb0
 8004dbe:	009b      	lsls	r3, r3, #2
 8004dc0:	4413      	add	r3, r2
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	689b      	ldr	r3, [r3, #8]
 8004dc6:	683a      	ldr	r2, [r7, #0]
 8004dc8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8004dca:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004dcc:	683a      	ldr	r2, [r7, #0]
 8004dce:	88d2      	ldrh	r2, [r2, #6]
 8004dd0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	88db      	ldrh	r3, [r3, #6]
 8004dd6:	2b07      	cmp	r3, #7
 8004dd8:	bf28      	it	cs
 8004dda:	2307      	movcs	r3, #7
 8004ddc:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8004dde:	693b      	ldr	r3, [r7, #16]
 8004de0:	89fa      	ldrh	r2, [r7, #14]
 8004de2:	4619      	mov	r1, r3
 8004de4:	6878      	ldr	r0, [r7, #4]
 8004de6:	f001 fd93 	bl	8006910 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8004dea:	e090      	b.n	8004f0e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	785a      	ldrb	r2, [r3, #1]
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	88db      	ldrh	r3, [r3, #6]
 8004dfa:	2b3f      	cmp	r3, #63	@ 0x3f
 8004dfc:	d803      	bhi.n	8004e06 <USBD_CDC_Setup+0xa6>
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	88db      	ldrh	r3, [r3, #6]
 8004e02:	b2da      	uxtb	r2, r3
 8004e04:	e000      	b.n	8004e08 <USBD_CDC_Setup+0xa8>
 8004e06:	2240      	movs	r2, #64	@ 0x40
 8004e08:	693b      	ldr	r3, [r7, #16]
 8004e0a:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8004e0e:	6939      	ldr	r1, [r7, #16]
 8004e10:	693b      	ldr	r3, [r7, #16]
 8004e12:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8004e16:	461a      	mov	r2, r3
 8004e18:	6878      	ldr	r0, [r7, #4]
 8004e1a:	f001 fda5 	bl	8006968 <USBD_CtlPrepareRx>
      break;
 8004e1e:	e076      	b.n	8004f0e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004e26:	687a      	ldr	r2, [r7, #4]
 8004e28:	33b0      	adds	r3, #176	@ 0xb0
 8004e2a:	009b      	lsls	r3, r3, #2
 8004e2c:	4413      	add	r3, r2
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	689b      	ldr	r3, [r3, #8]
 8004e32:	683a      	ldr	r2, [r7, #0]
 8004e34:	7850      	ldrb	r0, [r2, #1]
 8004e36:	2200      	movs	r2, #0
 8004e38:	6839      	ldr	r1, [r7, #0]
 8004e3a:	4798      	blx	r3
      break;
 8004e3c:	e067      	b.n	8004f0e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	785b      	ldrb	r3, [r3, #1]
 8004e42:	2b0b      	cmp	r3, #11
 8004e44:	d851      	bhi.n	8004eea <USBD_CDC_Setup+0x18a>
 8004e46:	a201      	add	r2, pc, #4	@ (adr r2, 8004e4c <USBD_CDC_Setup+0xec>)
 8004e48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e4c:	08004e7d 	.word	0x08004e7d
 8004e50:	08004ef9 	.word	0x08004ef9
 8004e54:	08004eeb 	.word	0x08004eeb
 8004e58:	08004eeb 	.word	0x08004eeb
 8004e5c:	08004eeb 	.word	0x08004eeb
 8004e60:	08004eeb 	.word	0x08004eeb
 8004e64:	08004eeb 	.word	0x08004eeb
 8004e68:	08004eeb 	.word	0x08004eeb
 8004e6c:	08004eeb 	.word	0x08004eeb
 8004e70:	08004eeb 	.word	0x08004eeb
 8004e74:	08004ea7 	.word	0x08004ea7
 8004e78:	08004ed1 	.word	0x08004ed1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004e82:	b2db      	uxtb	r3, r3
 8004e84:	2b03      	cmp	r3, #3
 8004e86:	d107      	bne.n	8004e98 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8004e88:	f107 030a 	add.w	r3, r7, #10
 8004e8c:	2202      	movs	r2, #2
 8004e8e:	4619      	mov	r1, r3
 8004e90:	6878      	ldr	r0, [r7, #4]
 8004e92:	f001 fd3d 	bl	8006910 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004e96:	e032      	b.n	8004efe <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8004e98:	6839      	ldr	r1, [r7, #0]
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	f001 fcbb 	bl	8006816 <USBD_CtlError>
            ret = USBD_FAIL;
 8004ea0:	2303      	movs	r3, #3
 8004ea2:	75fb      	strb	r3, [r7, #23]
          break;
 8004ea4:	e02b      	b.n	8004efe <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004eac:	b2db      	uxtb	r3, r3
 8004eae:	2b03      	cmp	r3, #3
 8004eb0:	d107      	bne.n	8004ec2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8004eb2:	f107 030d 	add.w	r3, r7, #13
 8004eb6:	2201      	movs	r2, #1
 8004eb8:	4619      	mov	r1, r3
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	f001 fd28 	bl	8006910 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004ec0:	e01d      	b.n	8004efe <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8004ec2:	6839      	ldr	r1, [r7, #0]
 8004ec4:	6878      	ldr	r0, [r7, #4]
 8004ec6:	f001 fca6 	bl	8006816 <USBD_CtlError>
            ret = USBD_FAIL;
 8004eca:	2303      	movs	r3, #3
 8004ecc:	75fb      	strb	r3, [r7, #23]
          break;
 8004ece:	e016      	b.n	8004efe <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004ed6:	b2db      	uxtb	r3, r3
 8004ed8:	2b03      	cmp	r3, #3
 8004eda:	d00f      	beq.n	8004efc <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8004edc:	6839      	ldr	r1, [r7, #0]
 8004ede:	6878      	ldr	r0, [r7, #4]
 8004ee0:	f001 fc99 	bl	8006816 <USBD_CtlError>
            ret = USBD_FAIL;
 8004ee4:	2303      	movs	r3, #3
 8004ee6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8004ee8:	e008      	b.n	8004efc <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8004eea:	6839      	ldr	r1, [r7, #0]
 8004eec:	6878      	ldr	r0, [r7, #4]
 8004eee:	f001 fc92 	bl	8006816 <USBD_CtlError>
          ret = USBD_FAIL;
 8004ef2:	2303      	movs	r3, #3
 8004ef4:	75fb      	strb	r3, [r7, #23]
          break;
 8004ef6:	e002      	b.n	8004efe <USBD_CDC_Setup+0x19e>
          break;
 8004ef8:	bf00      	nop
 8004efa:	e008      	b.n	8004f0e <USBD_CDC_Setup+0x1ae>
          break;
 8004efc:	bf00      	nop
      }
      break;
 8004efe:	e006      	b.n	8004f0e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8004f00:	6839      	ldr	r1, [r7, #0]
 8004f02:	6878      	ldr	r0, [r7, #4]
 8004f04:	f001 fc87 	bl	8006816 <USBD_CtlError>
      ret = USBD_FAIL;
 8004f08:	2303      	movs	r3, #3
 8004f0a:	75fb      	strb	r3, [r7, #23]
      break;
 8004f0c:	bf00      	nop
  }

  return (uint8_t)ret;
 8004f0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f10:	4618      	mov	r0, r3
 8004f12:	3718      	adds	r7, #24
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bd80      	pop	{r7, pc}

08004f18 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b084      	sub	sp, #16
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
 8004f20:	460b      	mov	r3, r1
 8004f22:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8004f2a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	32b0      	adds	r2, #176	@ 0xb0
 8004f36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d101      	bne.n	8004f42 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8004f3e:	2303      	movs	r3, #3
 8004f40:	e065      	b.n	800500e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	32b0      	adds	r2, #176	@ 0xb0
 8004f4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f50:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8004f52:	78fb      	ldrb	r3, [r7, #3]
 8004f54:	f003 020f 	and.w	r2, r3, #15
 8004f58:	6879      	ldr	r1, [r7, #4]
 8004f5a:	4613      	mov	r3, r2
 8004f5c:	009b      	lsls	r3, r3, #2
 8004f5e:	4413      	add	r3, r2
 8004f60:	009b      	lsls	r3, r3, #2
 8004f62:	440b      	add	r3, r1
 8004f64:	3318      	adds	r3, #24
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d02f      	beq.n	8004fcc <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8004f6c:	78fb      	ldrb	r3, [r7, #3]
 8004f6e:	f003 020f 	and.w	r2, r3, #15
 8004f72:	6879      	ldr	r1, [r7, #4]
 8004f74:	4613      	mov	r3, r2
 8004f76:	009b      	lsls	r3, r3, #2
 8004f78:	4413      	add	r3, r2
 8004f7a:	009b      	lsls	r3, r3, #2
 8004f7c:	440b      	add	r3, r1
 8004f7e:	3318      	adds	r3, #24
 8004f80:	681a      	ldr	r2, [r3, #0]
 8004f82:	78fb      	ldrb	r3, [r7, #3]
 8004f84:	f003 010f 	and.w	r1, r3, #15
 8004f88:	68f8      	ldr	r0, [r7, #12]
 8004f8a:	460b      	mov	r3, r1
 8004f8c:	00db      	lsls	r3, r3, #3
 8004f8e:	440b      	add	r3, r1
 8004f90:	009b      	lsls	r3, r3, #2
 8004f92:	4403      	add	r3, r0
 8004f94:	331c      	adds	r3, #28
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	fbb2 f1f3 	udiv	r1, r2, r3
 8004f9c:	fb01 f303 	mul.w	r3, r1, r3
 8004fa0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d112      	bne.n	8004fcc <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8004fa6:	78fb      	ldrb	r3, [r7, #3]
 8004fa8:	f003 020f 	and.w	r2, r3, #15
 8004fac:	6879      	ldr	r1, [r7, #4]
 8004fae:	4613      	mov	r3, r2
 8004fb0:	009b      	lsls	r3, r3, #2
 8004fb2:	4413      	add	r3, r2
 8004fb4:	009b      	lsls	r3, r3, #2
 8004fb6:	440b      	add	r3, r1
 8004fb8:	3318      	adds	r3, #24
 8004fba:	2200      	movs	r2, #0
 8004fbc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8004fbe:	78f9      	ldrb	r1, [r7, #3]
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	6878      	ldr	r0, [r7, #4]
 8004fc6:	f003 fe26 	bl	8008c16 <USBD_LL_Transmit>
 8004fca:	e01f      	b.n	800500c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004fda:	687a      	ldr	r2, [r7, #4]
 8004fdc:	33b0      	adds	r3, #176	@ 0xb0
 8004fde:	009b      	lsls	r3, r3, #2
 8004fe0:	4413      	add	r3, r2
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	691b      	ldr	r3, [r3, #16]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d010      	beq.n	800500c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004ff0:	687a      	ldr	r2, [r7, #4]
 8004ff2:	33b0      	adds	r3, #176	@ 0xb0
 8004ff4:	009b      	lsls	r3, r3, #2
 8004ff6:	4413      	add	r3, r2
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	691b      	ldr	r3, [r3, #16]
 8004ffc:	68ba      	ldr	r2, [r7, #8]
 8004ffe:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8005002:	68ba      	ldr	r2, [r7, #8]
 8005004:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8005008:	78fa      	ldrb	r2, [r7, #3]
 800500a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800500c:	2300      	movs	r3, #0
}
 800500e:	4618      	mov	r0, r3
 8005010:	3710      	adds	r7, #16
 8005012:	46bd      	mov	sp, r7
 8005014:	bd80      	pop	{r7, pc}

08005016 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005016:	b580      	push	{r7, lr}
 8005018:	b084      	sub	sp, #16
 800501a:	af00      	add	r7, sp, #0
 800501c:	6078      	str	r0, [r7, #4]
 800501e:	460b      	mov	r3, r1
 8005020:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	32b0      	adds	r2, #176	@ 0xb0
 800502c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005030:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	32b0      	adds	r2, #176	@ 0xb0
 800503c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d101      	bne.n	8005048 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005044:	2303      	movs	r3, #3
 8005046:	e01a      	b.n	800507e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005048:	78fb      	ldrb	r3, [r7, #3]
 800504a:	4619      	mov	r1, r3
 800504c:	6878      	ldr	r0, [r7, #4]
 800504e:	f003 fe24 	bl	8008c9a <USBD_LL_GetRxDataSize>
 8005052:	4602      	mov	r2, r0
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005060:	687a      	ldr	r2, [r7, #4]
 8005062:	33b0      	adds	r3, #176	@ 0xb0
 8005064:	009b      	lsls	r3, r3, #2
 8005066:	4413      	add	r3, r2
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	68db      	ldr	r3, [r3, #12]
 800506c:	68fa      	ldr	r2, [r7, #12]
 800506e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8005072:	68fa      	ldr	r2, [r7, #12]
 8005074:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8005078:	4611      	mov	r1, r2
 800507a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800507c:	2300      	movs	r3, #0
}
 800507e:	4618      	mov	r0, r3
 8005080:	3710      	adds	r7, #16
 8005082:	46bd      	mov	sp, r7
 8005084:	bd80      	pop	{r7, pc}

08005086 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005086:	b580      	push	{r7, lr}
 8005088:	b084      	sub	sp, #16
 800508a:	af00      	add	r7, sp, #0
 800508c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	32b0      	adds	r2, #176	@ 0xb0
 8005098:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800509c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d101      	bne.n	80050a8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80050a4:	2303      	movs	r3, #3
 80050a6:	e024      	b.n	80050f2 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80050ae:	687a      	ldr	r2, [r7, #4]
 80050b0:	33b0      	adds	r3, #176	@ 0xb0
 80050b2:	009b      	lsls	r3, r3, #2
 80050b4:	4413      	add	r3, r2
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d019      	beq.n	80050f0 <USBD_CDC_EP0_RxReady+0x6a>
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80050c2:	2bff      	cmp	r3, #255	@ 0xff
 80050c4:	d014      	beq.n	80050f0 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80050cc:	687a      	ldr	r2, [r7, #4]
 80050ce:	33b0      	adds	r3, #176	@ 0xb0
 80050d0:	009b      	lsls	r3, r3, #2
 80050d2:	4413      	add	r3, r2
 80050d4:	685b      	ldr	r3, [r3, #4]
 80050d6:	689b      	ldr	r3, [r3, #8]
 80050d8:	68fa      	ldr	r2, [r7, #12]
 80050da:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 80050de:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80050e0:	68fa      	ldr	r2, [r7, #12]
 80050e2:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80050e6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	22ff      	movs	r2, #255	@ 0xff
 80050ec:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 80050f0:	2300      	movs	r3, #0
}
 80050f2:	4618      	mov	r0, r3
 80050f4:	3710      	adds	r7, #16
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}
	...

080050fc <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b086      	sub	sp, #24
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005104:	2182      	movs	r1, #130	@ 0x82
 8005106:	4818      	ldr	r0, [pc, #96]	@ (8005168 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005108:	f000 fd4f 	bl	8005baa <USBD_GetEpDesc>
 800510c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800510e:	2101      	movs	r1, #1
 8005110:	4815      	ldr	r0, [pc, #84]	@ (8005168 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005112:	f000 fd4a 	bl	8005baa <USBD_GetEpDesc>
 8005116:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005118:	2181      	movs	r1, #129	@ 0x81
 800511a:	4813      	ldr	r0, [pc, #76]	@ (8005168 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800511c:	f000 fd45 	bl	8005baa <USBD_GetEpDesc>
 8005120:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005122:	697b      	ldr	r3, [r7, #20]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d002      	beq.n	800512e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005128:	697b      	ldr	r3, [r7, #20]
 800512a:	2210      	movs	r2, #16
 800512c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d006      	beq.n	8005142 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005134:	693b      	ldr	r3, [r7, #16]
 8005136:	2200      	movs	r2, #0
 8005138:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800513c:	711a      	strb	r2, [r3, #4]
 800513e:	2200      	movs	r2, #0
 8005140:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d006      	beq.n	8005156 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	2200      	movs	r2, #0
 800514c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005150:	711a      	strb	r2, [r3, #4]
 8005152:	2200      	movs	r2, #0
 8005154:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2243      	movs	r2, #67	@ 0x43
 800515a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800515c:	4b02      	ldr	r3, [pc, #8]	@ (8005168 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800515e:	4618      	mov	r0, r3
 8005160:	3718      	adds	r7, #24
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}
 8005166:	bf00      	nop
 8005168:	20000050 	.word	0x20000050

0800516c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b086      	sub	sp, #24
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005174:	2182      	movs	r1, #130	@ 0x82
 8005176:	4818      	ldr	r0, [pc, #96]	@ (80051d8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005178:	f000 fd17 	bl	8005baa <USBD_GetEpDesc>
 800517c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800517e:	2101      	movs	r1, #1
 8005180:	4815      	ldr	r0, [pc, #84]	@ (80051d8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005182:	f000 fd12 	bl	8005baa <USBD_GetEpDesc>
 8005186:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005188:	2181      	movs	r1, #129	@ 0x81
 800518a:	4813      	ldr	r0, [pc, #76]	@ (80051d8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800518c:	f000 fd0d 	bl	8005baa <USBD_GetEpDesc>
 8005190:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005192:	697b      	ldr	r3, [r7, #20]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d002      	beq.n	800519e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8005198:	697b      	ldr	r3, [r7, #20]
 800519a:	2210      	movs	r2, #16
 800519c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800519e:	693b      	ldr	r3, [r7, #16]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d006      	beq.n	80051b2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	2200      	movs	r2, #0
 80051a8:	711a      	strb	r2, [r3, #4]
 80051aa:	2200      	movs	r2, #0
 80051ac:	f042 0202 	orr.w	r2, r2, #2
 80051b0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d006      	beq.n	80051c6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	2200      	movs	r2, #0
 80051bc:	711a      	strb	r2, [r3, #4]
 80051be:	2200      	movs	r2, #0
 80051c0:	f042 0202 	orr.w	r2, r2, #2
 80051c4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2243      	movs	r2, #67	@ 0x43
 80051ca:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80051cc:	4b02      	ldr	r3, [pc, #8]	@ (80051d8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80051ce:	4618      	mov	r0, r3
 80051d0:	3718      	adds	r7, #24
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bd80      	pop	{r7, pc}
 80051d6:	bf00      	nop
 80051d8:	20000050 	.word	0x20000050

080051dc <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b086      	sub	sp, #24
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80051e4:	2182      	movs	r1, #130	@ 0x82
 80051e6:	4818      	ldr	r0, [pc, #96]	@ (8005248 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80051e8:	f000 fcdf 	bl	8005baa <USBD_GetEpDesc>
 80051ec:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80051ee:	2101      	movs	r1, #1
 80051f0:	4815      	ldr	r0, [pc, #84]	@ (8005248 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80051f2:	f000 fcda 	bl	8005baa <USBD_GetEpDesc>
 80051f6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80051f8:	2181      	movs	r1, #129	@ 0x81
 80051fa:	4813      	ldr	r0, [pc, #76]	@ (8005248 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80051fc:	f000 fcd5 	bl	8005baa <USBD_GetEpDesc>
 8005200:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005202:	697b      	ldr	r3, [r7, #20]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d002      	beq.n	800520e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	2210      	movs	r2, #16
 800520c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800520e:	693b      	ldr	r3, [r7, #16]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d006      	beq.n	8005222 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	2200      	movs	r2, #0
 8005218:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800521c:	711a      	strb	r2, [r3, #4]
 800521e:	2200      	movs	r2, #0
 8005220:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d006      	beq.n	8005236 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	2200      	movs	r2, #0
 800522c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005230:	711a      	strb	r2, [r3, #4]
 8005232:	2200      	movs	r2, #0
 8005234:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2243      	movs	r2, #67	@ 0x43
 800523a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800523c:	4b02      	ldr	r3, [pc, #8]	@ (8005248 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800523e:	4618      	mov	r0, r3
 8005240:	3718      	adds	r7, #24
 8005242:	46bd      	mov	sp, r7
 8005244:	bd80      	pop	{r7, pc}
 8005246:	bf00      	nop
 8005248:	20000050 	.word	0x20000050

0800524c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800524c:	b480      	push	{r7}
 800524e:	b083      	sub	sp, #12
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	220a      	movs	r2, #10
 8005258:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800525a:	4b03      	ldr	r3, [pc, #12]	@ (8005268 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800525c:	4618      	mov	r0, r3
 800525e:	370c      	adds	r7, #12
 8005260:	46bd      	mov	sp, r7
 8005262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005266:	4770      	bx	lr
 8005268:	2000000c 	.word	0x2000000c

0800526c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800526c:	b480      	push	{r7}
 800526e:	b083      	sub	sp, #12
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
 8005274:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d101      	bne.n	8005280 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800527c:	2303      	movs	r3, #3
 800527e:	e009      	b.n	8005294 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005286:	687a      	ldr	r2, [r7, #4]
 8005288:	33b0      	adds	r3, #176	@ 0xb0
 800528a:	009b      	lsls	r3, r3, #2
 800528c:	4413      	add	r3, r2
 800528e:	683a      	ldr	r2, [r7, #0]
 8005290:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8005292:	2300      	movs	r3, #0
}
 8005294:	4618      	mov	r0, r3
 8005296:	370c      	adds	r7, #12
 8005298:	46bd      	mov	sp, r7
 800529a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529e:	4770      	bx	lr

080052a0 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80052a0:	b480      	push	{r7}
 80052a2:	b087      	sub	sp, #28
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	60f8      	str	r0, [r7, #12]
 80052a8:	60b9      	str	r1, [r7, #8]
 80052aa:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	32b0      	adds	r2, #176	@ 0xb0
 80052b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052ba:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d101      	bne.n	80052c6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80052c2:	2303      	movs	r3, #3
 80052c4:	e008      	b.n	80052d8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	68ba      	ldr	r2, [r7, #8]
 80052ca:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80052ce:	697b      	ldr	r3, [r7, #20]
 80052d0:	687a      	ldr	r2, [r7, #4]
 80052d2:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80052d6:	2300      	movs	r3, #0
}
 80052d8:	4618      	mov	r0, r3
 80052da:	371c      	adds	r7, #28
 80052dc:	46bd      	mov	sp, r7
 80052de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e2:	4770      	bx	lr

080052e4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80052e4:	b480      	push	{r7}
 80052e6:	b085      	sub	sp, #20
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
 80052ec:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	32b0      	adds	r2, #176	@ 0xb0
 80052f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052fc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d101      	bne.n	8005308 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8005304:	2303      	movs	r3, #3
 8005306:	e004      	b.n	8005312 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	683a      	ldr	r2, [r7, #0]
 800530c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8005310:	2300      	movs	r3, #0
}
 8005312:	4618      	mov	r0, r3
 8005314:	3714      	adds	r7, #20
 8005316:	46bd      	mov	sp, r7
 8005318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531c:	4770      	bx	lr
	...

08005320 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b084      	sub	sp, #16
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	32b0      	adds	r2, #176	@ 0xb0
 8005332:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005336:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8005338:	2301      	movs	r3, #1
 800533a:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d101      	bne.n	8005346 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8005342:	2303      	movs	r3, #3
 8005344:	e025      	b.n	8005392 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800534c:	2b00      	cmp	r3, #0
 800534e:	d11f      	bne.n	8005390 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	2201      	movs	r2, #1
 8005354:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8005358:	4b10      	ldr	r3, [pc, #64]	@ (800539c <USBD_CDC_TransmitPacket+0x7c>)
 800535a:	781b      	ldrb	r3, [r3, #0]
 800535c:	f003 020f 	and.w	r2, r3, #15
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	4613      	mov	r3, r2
 800536a:	009b      	lsls	r3, r3, #2
 800536c:	4413      	add	r3, r2
 800536e:	009b      	lsls	r3, r3, #2
 8005370:	4403      	add	r3, r0
 8005372:	3318      	adds	r3, #24
 8005374:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8005376:	4b09      	ldr	r3, [pc, #36]	@ (800539c <USBD_CDC_TransmitPacket+0x7c>)
 8005378:	7819      	ldrb	r1, [r3, #0]
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	f003 fc45 	bl	8008c16 <USBD_LL_Transmit>

    ret = USBD_OK;
 800538c:	2300      	movs	r3, #0
 800538e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8005390:	7bfb      	ldrb	r3, [r7, #15]
}
 8005392:	4618      	mov	r0, r3
 8005394:	3710      	adds	r7, #16
 8005396:	46bd      	mov	sp, r7
 8005398:	bd80      	pop	{r7, pc}
 800539a:	bf00      	nop
 800539c:	20000093 	.word	0x20000093

080053a0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b084      	sub	sp, #16
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	32b0      	adds	r2, #176	@ 0xb0
 80053b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053b6:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	32b0      	adds	r2, #176	@ 0xb0
 80053c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d101      	bne.n	80053ce <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80053ca:	2303      	movs	r3, #3
 80053cc:	e018      	b.n	8005400 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	7c1b      	ldrb	r3, [r3, #16]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d10a      	bne.n	80053ec <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80053d6:	4b0c      	ldr	r3, [pc, #48]	@ (8005408 <USBD_CDC_ReceivePacket+0x68>)
 80053d8:	7819      	ldrb	r1, [r3, #0]
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80053e0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80053e4:	6878      	ldr	r0, [r7, #4]
 80053e6:	f003 fc37 	bl	8008c58 <USBD_LL_PrepareReceive>
 80053ea:	e008      	b.n	80053fe <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80053ec:	4b06      	ldr	r3, [pc, #24]	@ (8005408 <USBD_CDC_ReceivePacket+0x68>)
 80053ee:	7819      	ldrb	r1, [r3, #0]
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80053f6:	2340      	movs	r3, #64	@ 0x40
 80053f8:	6878      	ldr	r0, [r7, #4]
 80053fa:	f003 fc2d 	bl	8008c58 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80053fe:	2300      	movs	r3, #0
}
 8005400:	4618      	mov	r0, r3
 8005402:	3710      	adds	r7, #16
 8005404:	46bd      	mov	sp, r7
 8005406:	bd80      	pop	{r7, pc}
 8005408:	20000094 	.word	0x20000094

0800540c <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b086      	sub	sp, #24
 8005410:	af00      	add	r7, sp, #0
 8005412:	60f8      	str	r0, [r7, #12]
 8005414:	60b9      	str	r1, [r7, #8]
 8005416:	4613      	mov	r3, r2
 8005418:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d101      	bne.n	8005424 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005420:	2303      	movs	r3, #3
 8005422:	e01f      	b.n	8005464 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	2200      	movs	r2, #0
 8005428:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	2200      	movs	r2, #0
 8005430:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	2200      	movs	r2, #0
 8005438:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d003      	beq.n	800544a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	68ba      	ldr	r2, [r7, #8]
 8005446:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	2201      	movs	r2, #1
 800544e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	79fa      	ldrb	r2, [r7, #7]
 8005456:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005458:	68f8      	ldr	r0, [r7, #12]
 800545a:	f003 faa7 	bl	80089ac <USBD_LL_Init>
 800545e:	4603      	mov	r3, r0
 8005460:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005462:	7dfb      	ldrb	r3, [r7, #23]
}
 8005464:	4618      	mov	r0, r3
 8005466:	3718      	adds	r7, #24
 8005468:	46bd      	mov	sp, r7
 800546a:	bd80      	pop	{r7, pc}

0800546c <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b084      	sub	sp, #16
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
 8005474:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005476:	2300      	movs	r3, #0
 8005478:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d101      	bne.n	8005484 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005480:	2303      	movs	r3, #3
 8005482:	e025      	b.n	80054d0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	683a      	ldr	r2, [r7, #0]
 8005488:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	32ae      	adds	r2, #174	@ 0xae
 8005496:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800549a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800549c:	2b00      	cmp	r3, #0
 800549e:	d00f      	beq.n	80054c0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	32ae      	adds	r2, #174	@ 0xae
 80054aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054b0:	f107 020e 	add.w	r2, r7, #14
 80054b4:	4610      	mov	r0, r2
 80054b6:	4798      	blx	r3
 80054b8:	4602      	mov	r2, r0
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80054c6:	1c5a      	adds	r2, r3, #1
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 80054ce:	2300      	movs	r3, #0
}
 80054d0:	4618      	mov	r0, r3
 80054d2:	3710      	adds	r7, #16
 80054d4:	46bd      	mov	sp, r7
 80054d6:	bd80      	pop	{r7, pc}

080054d8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b082      	sub	sp, #8
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80054e0:	6878      	ldr	r0, [r7, #4]
 80054e2:	f003 faaf 	bl	8008a44 <USBD_LL_Start>
 80054e6:	4603      	mov	r3, r0
}
 80054e8:	4618      	mov	r0, r3
 80054ea:	3708      	adds	r7, #8
 80054ec:	46bd      	mov	sp, r7
 80054ee:	bd80      	pop	{r7, pc}

080054f0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80054f0:	b480      	push	{r7}
 80054f2:	b083      	sub	sp, #12
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80054f8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80054fa:	4618      	mov	r0, r3
 80054fc:	370c      	adds	r7, #12
 80054fe:	46bd      	mov	sp, r7
 8005500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005504:	4770      	bx	lr

08005506 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005506:	b580      	push	{r7, lr}
 8005508:	b084      	sub	sp, #16
 800550a:	af00      	add	r7, sp, #0
 800550c:	6078      	str	r0, [r7, #4]
 800550e:	460b      	mov	r3, r1
 8005510:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005512:	2300      	movs	r3, #0
 8005514:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800551c:	2b00      	cmp	r3, #0
 800551e:	d009      	beq.n	8005534 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	78fa      	ldrb	r2, [r7, #3]
 800552a:	4611      	mov	r1, r2
 800552c:	6878      	ldr	r0, [r7, #4]
 800552e:	4798      	blx	r3
 8005530:	4603      	mov	r3, r0
 8005532:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005534:	7bfb      	ldrb	r3, [r7, #15]
}
 8005536:	4618      	mov	r0, r3
 8005538:	3710      	adds	r7, #16
 800553a:	46bd      	mov	sp, r7
 800553c:	bd80      	pop	{r7, pc}

0800553e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800553e:	b580      	push	{r7, lr}
 8005540:	b084      	sub	sp, #16
 8005542:	af00      	add	r7, sp, #0
 8005544:	6078      	str	r0, [r7, #4]
 8005546:	460b      	mov	r3, r1
 8005548:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800554a:	2300      	movs	r3, #0
 800554c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	78fa      	ldrb	r2, [r7, #3]
 8005558:	4611      	mov	r1, r2
 800555a:	6878      	ldr	r0, [r7, #4]
 800555c:	4798      	blx	r3
 800555e:	4603      	mov	r3, r0
 8005560:	2b00      	cmp	r3, #0
 8005562:	d001      	beq.n	8005568 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005564:	2303      	movs	r3, #3
 8005566:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005568:	7bfb      	ldrb	r3, [r7, #15]
}
 800556a:	4618      	mov	r0, r3
 800556c:	3710      	adds	r7, #16
 800556e:	46bd      	mov	sp, r7
 8005570:	bd80      	pop	{r7, pc}

08005572 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005572:	b580      	push	{r7, lr}
 8005574:	b084      	sub	sp, #16
 8005576:	af00      	add	r7, sp, #0
 8005578:	6078      	str	r0, [r7, #4]
 800557a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005582:	6839      	ldr	r1, [r7, #0]
 8005584:	4618      	mov	r0, r3
 8005586:	f001 f90c 	bl	80067a2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2201      	movs	r2, #1
 800558e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8005598:	461a      	mov	r2, r3
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80055a6:	f003 031f 	and.w	r3, r3, #31
 80055aa:	2b02      	cmp	r3, #2
 80055ac:	d01a      	beq.n	80055e4 <USBD_LL_SetupStage+0x72>
 80055ae:	2b02      	cmp	r3, #2
 80055b0:	d822      	bhi.n	80055f8 <USBD_LL_SetupStage+0x86>
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d002      	beq.n	80055bc <USBD_LL_SetupStage+0x4a>
 80055b6:	2b01      	cmp	r3, #1
 80055b8:	d00a      	beq.n	80055d0 <USBD_LL_SetupStage+0x5e>
 80055ba:	e01d      	b.n	80055f8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80055c2:	4619      	mov	r1, r3
 80055c4:	6878      	ldr	r0, [r7, #4]
 80055c6:	f000 fb63 	bl	8005c90 <USBD_StdDevReq>
 80055ca:	4603      	mov	r3, r0
 80055cc:	73fb      	strb	r3, [r7, #15]
      break;
 80055ce:	e020      	b.n	8005612 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80055d6:	4619      	mov	r1, r3
 80055d8:	6878      	ldr	r0, [r7, #4]
 80055da:	f000 fbcb 	bl	8005d74 <USBD_StdItfReq>
 80055de:	4603      	mov	r3, r0
 80055e0:	73fb      	strb	r3, [r7, #15]
      break;
 80055e2:	e016      	b.n	8005612 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80055ea:	4619      	mov	r1, r3
 80055ec:	6878      	ldr	r0, [r7, #4]
 80055ee:	f000 fc2d 	bl	8005e4c <USBD_StdEPReq>
 80055f2:	4603      	mov	r3, r0
 80055f4:	73fb      	strb	r3, [r7, #15]
      break;
 80055f6:	e00c      	b.n	8005612 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80055fe:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8005602:	b2db      	uxtb	r3, r3
 8005604:	4619      	mov	r1, r3
 8005606:	6878      	ldr	r0, [r7, #4]
 8005608:	f003 fa7c 	bl	8008b04 <USBD_LL_StallEP>
 800560c:	4603      	mov	r3, r0
 800560e:	73fb      	strb	r3, [r7, #15]
      break;
 8005610:	bf00      	nop
  }

  return ret;
 8005612:	7bfb      	ldrb	r3, [r7, #15]
}
 8005614:	4618      	mov	r0, r3
 8005616:	3710      	adds	r7, #16
 8005618:	46bd      	mov	sp, r7
 800561a:	bd80      	pop	{r7, pc}

0800561c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b086      	sub	sp, #24
 8005620:	af00      	add	r7, sp, #0
 8005622:	60f8      	str	r0, [r7, #12]
 8005624:	460b      	mov	r3, r1
 8005626:	607a      	str	r2, [r7, #4]
 8005628:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800562a:	2300      	movs	r3, #0
 800562c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800562e:	7afb      	ldrb	r3, [r7, #11]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d16e      	bne.n	8005712 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800563a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8005642:	2b03      	cmp	r3, #3
 8005644:	f040 8098 	bne.w	8005778 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8005648:	693b      	ldr	r3, [r7, #16]
 800564a:	689a      	ldr	r2, [r3, #8]
 800564c:	693b      	ldr	r3, [r7, #16]
 800564e:	68db      	ldr	r3, [r3, #12]
 8005650:	429a      	cmp	r2, r3
 8005652:	d913      	bls.n	800567c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8005654:	693b      	ldr	r3, [r7, #16]
 8005656:	689a      	ldr	r2, [r3, #8]
 8005658:	693b      	ldr	r3, [r7, #16]
 800565a:	68db      	ldr	r3, [r3, #12]
 800565c:	1ad2      	subs	r2, r2, r3
 800565e:	693b      	ldr	r3, [r7, #16]
 8005660:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	68da      	ldr	r2, [r3, #12]
 8005666:	693b      	ldr	r3, [r7, #16]
 8005668:	689b      	ldr	r3, [r3, #8]
 800566a:	4293      	cmp	r3, r2
 800566c:	bf28      	it	cs
 800566e:	4613      	movcs	r3, r2
 8005670:	461a      	mov	r2, r3
 8005672:	6879      	ldr	r1, [r7, #4]
 8005674:	68f8      	ldr	r0, [r7, #12]
 8005676:	f001 f994 	bl	80069a2 <USBD_CtlContinueRx>
 800567a:	e07d      	b.n	8005778 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8005682:	f003 031f 	and.w	r3, r3, #31
 8005686:	2b02      	cmp	r3, #2
 8005688:	d014      	beq.n	80056b4 <USBD_LL_DataOutStage+0x98>
 800568a:	2b02      	cmp	r3, #2
 800568c:	d81d      	bhi.n	80056ca <USBD_LL_DataOutStage+0xae>
 800568e:	2b00      	cmp	r3, #0
 8005690:	d002      	beq.n	8005698 <USBD_LL_DataOutStage+0x7c>
 8005692:	2b01      	cmp	r3, #1
 8005694:	d003      	beq.n	800569e <USBD_LL_DataOutStage+0x82>
 8005696:	e018      	b.n	80056ca <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8005698:	2300      	movs	r3, #0
 800569a:	75bb      	strb	r3, [r7, #22]
            break;
 800569c:	e018      	b.n	80056d0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80056a4:	b2db      	uxtb	r3, r3
 80056a6:	4619      	mov	r1, r3
 80056a8:	68f8      	ldr	r0, [r7, #12]
 80056aa:	f000 fa64 	bl	8005b76 <USBD_CoreFindIF>
 80056ae:	4603      	mov	r3, r0
 80056b0:	75bb      	strb	r3, [r7, #22]
            break;
 80056b2:	e00d      	b.n	80056d0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80056ba:	b2db      	uxtb	r3, r3
 80056bc:	4619      	mov	r1, r3
 80056be:	68f8      	ldr	r0, [r7, #12]
 80056c0:	f000 fa66 	bl	8005b90 <USBD_CoreFindEP>
 80056c4:	4603      	mov	r3, r0
 80056c6:	75bb      	strb	r3, [r7, #22]
            break;
 80056c8:	e002      	b.n	80056d0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80056ca:	2300      	movs	r3, #0
 80056cc:	75bb      	strb	r3, [r7, #22]
            break;
 80056ce:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80056d0:	7dbb      	ldrb	r3, [r7, #22]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d119      	bne.n	800570a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80056dc:	b2db      	uxtb	r3, r3
 80056de:	2b03      	cmp	r3, #3
 80056e0:	d113      	bne.n	800570a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80056e2:	7dba      	ldrb	r2, [r7, #22]
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	32ae      	adds	r2, #174	@ 0xae
 80056e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056ec:	691b      	ldr	r3, [r3, #16]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d00b      	beq.n	800570a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80056f2:	7dba      	ldrb	r2, [r7, #22]
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80056fa:	7dba      	ldrb	r2, [r7, #22]
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	32ae      	adds	r2, #174	@ 0xae
 8005700:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005704:	691b      	ldr	r3, [r3, #16]
 8005706:	68f8      	ldr	r0, [r7, #12]
 8005708:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800570a:	68f8      	ldr	r0, [r7, #12]
 800570c:	f001 f95a 	bl	80069c4 <USBD_CtlSendStatus>
 8005710:	e032      	b.n	8005778 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8005712:	7afb      	ldrb	r3, [r7, #11]
 8005714:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005718:	b2db      	uxtb	r3, r3
 800571a:	4619      	mov	r1, r3
 800571c:	68f8      	ldr	r0, [r7, #12]
 800571e:	f000 fa37 	bl	8005b90 <USBD_CoreFindEP>
 8005722:	4603      	mov	r3, r0
 8005724:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005726:	7dbb      	ldrb	r3, [r7, #22]
 8005728:	2bff      	cmp	r3, #255	@ 0xff
 800572a:	d025      	beq.n	8005778 <USBD_LL_DataOutStage+0x15c>
 800572c:	7dbb      	ldrb	r3, [r7, #22]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d122      	bne.n	8005778 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005738:	b2db      	uxtb	r3, r3
 800573a:	2b03      	cmp	r3, #3
 800573c:	d117      	bne.n	800576e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800573e:	7dba      	ldrb	r2, [r7, #22]
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	32ae      	adds	r2, #174	@ 0xae
 8005744:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005748:	699b      	ldr	r3, [r3, #24]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d00f      	beq.n	800576e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800574e:	7dba      	ldrb	r2, [r7, #22]
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8005756:	7dba      	ldrb	r2, [r7, #22]
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	32ae      	adds	r2, #174	@ 0xae
 800575c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005760:	699b      	ldr	r3, [r3, #24]
 8005762:	7afa      	ldrb	r2, [r7, #11]
 8005764:	4611      	mov	r1, r2
 8005766:	68f8      	ldr	r0, [r7, #12]
 8005768:	4798      	blx	r3
 800576a:	4603      	mov	r3, r0
 800576c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800576e:	7dfb      	ldrb	r3, [r7, #23]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d001      	beq.n	8005778 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8005774:	7dfb      	ldrb	r3, [r7, #23]
 8005776:	e000      	b.n	800577a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8005778:	2300      	movs	r3, #0
}
 800577a:	4618      	mov	r0, r3
 800577c:	3718      	adds	r7, #24
 800577e:	46bd      	mov	sp, r7
 8005780:	bd80      	pop	{r7, pc}

08005782 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005782:	b580      	push	{r7, lr}
 8005784:	b086      	sub	sp, #24
 8005786:	af00      	add	r7, sp, #0
 8005788:	60f8      	str	r0, [r7, #12]
 800578a:	460b      	mov	r3, r1
 800578c:	607a      	str	r2, [r7, #4]
 800578e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8005790:	7afb      	ldrb	r3, [r7, #11]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d16f      	bne.n	8005876 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	3314      	adds	r3, #20
 800579a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80057a2:	2b02      	cmp	r3, #2
 80057a4:	d15a      	bne.n	800585c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80057a6:	693b      	ldr	r3, [r7, #16]
 80057a8:	689a      	ldr	r2, [r3, #8]
 80057aa:	693b      	ldr	r3, [r7, #16]
 80057ac:	68db      	ldr	r3, [r3, #12]
 80057ae:	429a      	cmp	r2, r3
 80057b0:	d914      	bls.n	80057dc <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80057b2:	693b      	ldr	r3, [r7, #16]
 80057b4:	689a      	ldr	r2, [r3, #8]
 80057b6:	693b      	ldr	r3, [r7, #16]
 80057b8:	68db      	ldr	r3, [r3, #12]
 80057ba:	1ad2      	subs	r2, r2, r3
 80057bc:	693b      	ldr	r3, [r7, #16]
 80057be:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80057c0:	693b      	ldr	r3, [r7, #16]
 80057c2:	689b      	ldr	r3, [r3, #8]
 80057c4:	461a      	mov	r2, r3
 80057c6:	6879      	ldr	r1, [r7, #4]
 80057c8:	68f8      	ldr	r0, [r7, #12]
 80057ca:	f001 f8bc 	bl	8006946 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80057ce:	2300      	movs	r3, #0
 80057d0:	2200      	movs	r2, #0
 80057d2:	2100      	movs	r1, #0
 80057d4:	68f8      	ldr	r0, [r7, #12]
 80057d6:	f003 fa3f 	bl	8008c58 <USBD_LL_PrepareReceive>
 80057da:	e03f      	b.n	800585c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80057dc:	693b      	ldr	r3, [r7, #16]
 80057de:	68da      	ldr	r2, [r3, #12]
 80057e0:	693b      	ldr	r3, [r7, #16]
 80057e2:	689b      	ldr	r3, [r3, #8]
 80057e4:	429a      	cmp	r2, r3
 80057e6:	d11c      	bne.n	8005822 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80057e8:	693b      	ldr	r3, [r7, #16]
 80057ea:	685a      	ldr	r2, [r3, #4]
 80057ec:	693b      	ldr	r3, [r7, #16]
 80057ee:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80057f0:	429a      	cmp	r2, r3
 80057f2:	d316      	bcc.n	8005822 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80057f4:	693b      	ldr	r3, [r7, #16]
 80057f6:	685a      	ldr	r2, [r3, #4]
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80057fe:	429a      	cmp	r2, r3
 8005800:	d20f      	bcs.n	8005822 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005802:	2200      	movs	r2, #0
 8005804:	2100      	movs	r1, #0
 8005806:	68f8      	ldr	r0, [r7, #12]
 8005808:	f001 f89d 	bl	8006946 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	2200      	movs	r2, #0
 8005810:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005814:	2300      	movs	r3, #0
 8005816:	2200      	movs	r2, #0
 8005818:	2100      	movs	r1, #0
 800581a:	68f8      	ldr	r0, [r7, #12]
 800581c:	f003 fa1c 	bl	8008c58 <USBD_LL_PrepareReceive>
 8005820:	e01c      	b.n	800585c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005828:	b2db      	uxtb	r3, r3
 800582a:	2b03      	cmp	r3, #3
 800582c:	d10f      	bne.n	800584e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005834:	68db      	ldr	r3, [r3, #12]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d009      	beq.n	800584e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	2200      	movs	r2, #0
 800583e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005848:	68db      	ldr	r3, [r3, #12]
 800584a:	68f8      	ldr	r0, [r7, #12]
 800584c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800584e:	2180      	movs	r1, #128	@ 0x80
 8005850:	68f8      	ldr	r0, [r7, #12]
 8005852:	f003 f957 	bl	8008b04 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005856:	68f8      	ldr	r0, [r7, #12]
 8005858:	f001 f8c7 	bl	80069ea <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8005862:	2b00      	cmp	r3, #0
 8005864:	d03a      	beq.n	80058dc <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8005866:	68f8      	ldr	r0, [r7, #12]
 8005868:	f7ff fe42 	bl	80054f0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	2200      	movs	r2, #0
 8005870:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8005874:	e032      	b.n	80058dc <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8005876:	7afb      	ldrb	r3, [r7, #11]
 8005878:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800587c:	b2db      	uxtb	r3, r3
 800587e:	4619      	mov	r1, r3
 8005880:	68f8      	ldr	r0, [r7, #12]
 8005882:	f000 f985 	bl	8005b90 <USBD_CoreFindEP>
 8005886:	4603      	mov	r3, r0
 8005888:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800588a:	7dfb      	ldrb	r3, [r7, #23]
 800588c:	2bff      	cmp	r3, #255	@ 0xff
 800588e:	d025      	beq.n	80058dc <USBD_LL_DataInStage+0x15a>
 8005890:	7dfb      	ldrb	r3, [r7, #23]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d122      	bne.n	80058dc <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800589c:	b2db      	uxtb	r3, r3
 800589e:	2b03      	cmp	r3, #3
 80058a0:	d11c      	bne.n	80058dc <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80058a2:	7dfa      	ldrb	r2, [r7, #23]
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	32ae      	adds	r2, #174	@ 0xae
 80058a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058ac:	695b      	ldr	r3, [r3, #20]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d014      	beq.n	80058dc <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80058b2:	7dfa      	ldrb	r2, [r7, #23]
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80058ba:	7dfa      	ldrb	r2, [r7, #23]
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	32ae      	adds	r2, #174	@ 0xae
 80058c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058c4:	695b      	ldr	r3, [r3, #20]
 80058c6:	7afa      	ldrb	r2, [r7, #11]
 80058c8:	4611      	mov	r1, r2
 80058ca:	68f8      	ldr	r0, [r7, #12]
 80058cc:	4798      	blx	r3
 80058ce:	4603      	mov	r3, r0
 80058d0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80058d2:	7dbb      	ldrb	r3, [r7, #22]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d001      	beq.n	80058dc <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80058d8:	7dbb      	ldrb	r3, [r7, #22]
 80058da:	e000      	b.n	80058de <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80058dc:	2300      	movs	r3, #0
}
 80058de:	4618      	mov	r0, r3
 80058e0:	3718      	adds	r7, #24
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bd80      	pop	{r7, pc}

080058e6 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80058e6:	b580      	push	{r7, lr}
 80058e8:	b084      	sub	sp, #16
 80058ea:	af00      	add	r7, sp, #0
 80058ec:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80058ee:	2300      	movs	r3, #0
 80058f0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2201      	movs	r2, #1
 80058f6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2200      	movs	r2, #0
 80058fe:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2200      	movs	r2, #0
 8005906:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2200      	movs	r2, #0
 800590c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2200      	movs	r2, #0
 8005914:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800591e:	2b00      	cmp	r3, #0
 8005920:	d014      	beq.n	800594c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005928:	685b      	ldr	r3, [r3, #4]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d00e      	beq.n	800594c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005934:	685b      	ldr	r3, [r3, #4]
 8005936:	687a      	ldr	r2, [r7, #4]
 8005938:	6852      	ldr	r2, [r2, #4]
 800593a:	b2d2      	uxtb	r2, r2
 800593c:	4611      	mov	r1, r2
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	4798      	blx	r3
 8005942:	4603      	mov	r3, r0
 8005944:	2b00      	cmp	r3, #0
 8005946:	d001      	beq.n	800594c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8005948:	2303      	movs	r3, #3
 800594a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800594c:	2340      	movs	r3, #64	@ 0x40
 800594e:	2200      	movs	r2, #0
 8005950:	2100      	movs	r1, #0
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	f003 f891 	bl	8008a7a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2201      	movs	r2, #1
 800595c:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2240      	movs	r2, #64	@ 0x40
 8005964:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005968:	2340      	movs	r3, #64	@ 0x40
 800596a:	2200      	movs	r2, #0
 800596c:	2180      	movs	r1, #128	@ 0x80
 800596e:	6878      	ldr	r0, [r7, #4]
 8005970:	f003 f883 	bl	8008a7a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2201      	movs	r2, #1
 8005978:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2240      	movs	r2, #64	@ 0x40
 800597e:	621a      	str	r2, [r3, #32]

  return ret;
 8005980:	7bfb      	ldrb	r3, [r7, #15]
}
 8005982:	4618      	mov	r0, r3
 8005984:	3710      	adds	r7, #16
 8005986:	46bd      	mov	sp, r7
 8005988:	bd80      	pop	{r7, pc}

0800598a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800598a:	b480      	push	{r7}
 800598c:	b083      	sub	sp, #12
 800598e:	af00      	add	r7, sp, #0
 8005990:	6078      	str	r0, [r7, #4]
 8005992:	460b      	mov	r3, r1
 8005994:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	78fa      	ldrb	r2, [r7, #3]
 800599a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800599c:	2300      	movs	r3, #0
}
 800599e:	4618      	mov	r0, r3
 80059a0:	370c      	adds	r7, #12
 80059a2:	46bd      	mov	sp, r7
 80059a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a8:	4770      	bx	lr

080059aa <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80059aa:	b480      	push	{r7}
 80059ac:	b083      	sub	sp, #12
 80059ae:	af00      	add	r7, sp, #0
 80059b0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80059b8:	b2db      	uxtb	r3, r3
 80059ba:	2b04      	cmp	r3, #4
 80059bc:	d006      	beq.n	80059cc <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80059c4:	b2da      	uxtb	r2, r3
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2204      	movs	r2, #4
 80059d0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80059d4:	2300      	movs	r3, #0
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	370c      	adds	r7, #12
 80059da:	46bd      	mov	sp, r7
 80059dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e0:	4770      	bx	lr

080059e2 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80059e2:	b480      	push	{r7}
 80059e4:	b083      	sub	sp, #12
 80059e6:	af00      	add	r7, sp, #0
 80059e8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80059f0:	b2db      	uxtb	r3, r3
 80059f2:	2b04      	cmp	r3, #4
 80059f4:	d106      	bne.n	8005a04 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80059fc:	b2da      	uxtb	r2, r3
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8005a04:	2300      	movs	r3, #0
}
 8005a06:	4618      	mov	r0, r3
 8005a08:	370c      	adds	r7, #12
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a10:	4770      	bx	lr

08005a12 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005a12:	b580      	push	{r7, lr}
 8005a14:	b082      	sub	sp, #8
 8005a16:	af00      	add	r7, sp, #0
 8005a18:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005a20:	b2db      	uxtb	r3, r3
 8005a22:	2b03      	cmp	r3, #3
 8005a24:	d110      	bne.n	8005a48 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d00b      	beq.n	8005a48 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005a36:	69db      	ldr	r3, [r3, #28]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d005      	beq.n	8005a48 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005a42:	69db      	ldr	r3, [r3, #28]
 8005a44:	6878      	ldr	r0, [r7, #4]
 8005a46:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8005a48:	2300      	movs	r3, #0
}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	3708      	adds	r7, #8
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bd80      	pop	{r7, pc}

08005a52 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005a52:	b580      	push	{r7, lr}
 8005a54:	b082      	sub	sp, #8
 8005a56:	af00      	add	r7, sp, #0
 8005a58:	6078      	str	r0, [r7, #4]
 8005a5a:	460b      	mov	r3, r1
 8005a5c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	32ae      	adds	r2, #174	@ 0xae
 8005a68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d101      	bne.n	8005a74 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8005a70:	2303      	movs	r3, #3
 8005a72:	e01c      	b.n	8005aae <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005a7a:	b2db      	uxtb	r3, r3
 8005a7c:	2b03      	cmp	r3, #3
 8005a7e:	d115      	bne.n	8005aac <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	32ae      	adds	r2, #174	@ 0xae
 8005a8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a8e:	6a1b      	ldr	r3, [r3, #32]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d00b      	beq.n	8005aac <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	32ae      	adds	r2, #174	@ 0xae
 8005a9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005aa2:	6a1b      	ldr	r3, [r3, #32]
 8005aa4:	78fa      	ldrb	r2, [r7, #3]
 8005aa6:	4611      	mov	r1, r2
 8005aa8:	6878      	ldr	r0, [r7, #4]
 8005aaa:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005aac:	2300      	movs	r3, #0
}
 8005aae:	4618      	mov	r0, r3
 8005ab0:	3708      	adds	r7, #8
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bd80      	pop	{r7, pc}

08005ab6 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005ab6:	b580      	push	{r7, lr}
 8005ab8:	b082      	sub	sp, #8
 8005aba:	af00      	add	r7, sp, #0
 8005abc:	6078      	str	r0, [r7, #4]
 8005abe:	460b      	mov	r3, r1
 8005ac0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	32ae      	adds	r2, #174	@ 0xae
 8005acc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d101      	bne.n	8005ad8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8005ad4:	2303      	movs	r3, #3
 8005ad6:	e01c      	b.n	8005b12 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005ade:	b2db      	uxtb	r3, r3
 8005ae0:	2b03      	cmp	r3, #3
 8005ae2:	d115      	bne.n	8005b10 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	32ae      	adds	r2, #174	@ 0xae
 8005aee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005af2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d00b      	beq.n	8005b10 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	32ae      	adds	r2, #174	@ 0xae
 8005b02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b08:	78fa      	ldrb	r2, [r7, #3]
 8005b0a:	4611      	mov	r1, r2
 8005b0c:	6878      	ldr	r0, [r7, #4]
 8005b0e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005b10:	2300      	movs	r3, #0
}
 8005b12:	4618      	mov	r0, r3
 8005b14:	3708      	adds	r7, #8
 8005b16:	46bd      	mov	sp, r7
 8005b18:	bd80      	pop	{r7, pc}

08005b1a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005b1a:	b480      	push	{r7}
 8005b1c:	b083      	sub	sp, #12
 8005b1e:	af00      	add	r7, sp, #0
 8005b20:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005b22:	2300      	movs	r3, #0
}
 8005b24:	4618      	mov	r0, r3
 8005b26:	370c      	adds	r7, #12
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2e:	4770      	bx	lr

08005b30 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b084      	sub	sp, #16
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8005b38:	2300      	movs	r3, #0
 8005b3a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2201      	movs	r2, #1
 8005b40:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d00e      	beq.n	8005b6c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005b54:	685b      	ldr	r3, [r3, #4]
 8005b56:	687a      	ldr	r2, [r7, #4]
 8005b58:	6852      	ldr	r2, [r2, #4]
 8005b5a:	b2d2      	uxtb	r2, r2
 8005b5c:	4611      	mov	r1, r2
 8005b5e:	6878      	ldr	r0, [r7, #4]
 8005b60:	4798      	blx	r3
 8005b62:	4603      	mov	r3, r0
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d001      	beq.n	8005b6c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8005b68:	2303      	movs	r3, #3
 8005b6a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005b6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b6e:	4618      	mov	r0, r3
 8005b70:	3710      	adds	r7, #16
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bd80      	pop	{r7, pc}

08005b76 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005b76:	b480      	push	{r7}
 8005b78:	b083      	sub	sp, #12
 8005b7a:	af00      	add	r7, sp, #0
 8005b7c:	6078      	str	r0, [r7, #4]
 8005b7e:	460b      	mov	r3, r1
 8005b80:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005b82:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005b84:	4618      	mov	r0, r3
 8005b86:	370c      	adds	r7, #12
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8e:	4770      	bx	lr

08005b90 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005b90:	b480      	push	{r7}
 8005b92:	b083      	sub	sp, #12
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
 8005b98:	460b      	mov	r3, r1
 8005b9a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005b9c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	370c      	adds	r7, #12
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba8:	4770      	bx	lr

08005baa <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8005baa:	b580      	push	{r7, lr}
 8005bac:	b086      	sub	sp, #24
 8005bae:	af00      	add	r7, sp, #0
 8005bb0:	6078      	str	r0, [r7, #4]
 8005bb2:	460b      	mov	r3, r1
 8005bb4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	885b      	ldrh	r3, [r3, #2]
 8005bc6:	b29b      	uxth	r3, r3
 8005bc8:	68fa      	ldr	r2, [r7, #12]
 8005bca:	7812      	ldrb	r2, [r2, #0]
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d91f      	bls.n	8005c10 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	781b      	ldrb	r3, [r3, #0]
 8005bd4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8005bd6:	e013      	b.n	8005c00 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8005bd8:	f107 030a 	add.w	r3, r7, #10
 8005bdc:	4619      	mov	r1, r3
 8005bde:	6978      	ldr	r0, [r7, #20]
 8005be0:	f000 f81b 	bl	8005c1a <USBD_GetNextDesc>
 8005be4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8005be6:	697b      	ldr	r3, [r7, #20]
 8005be8:	785b      	ldrb	r3, [r3, #1]
 8005bea:	2b05      	cmp	r3, #5
 8005bec:	d108      	bne.n	8005c00 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8005bee:	697b      	ldr	r3, [r7, #20]
 8005bf0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8005bf2:	693b      	ldr	r3, [r7, #16]
 8005bf4:	789b      	ldrb	r3, [r3, #2]
 8005bf6:	78fa      	ldrb	r2, [r7, #3]
 8005bf8:	429a      	cmp	r2, r3
 8005bfa:	d008      	beq.n	8005c0e <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	885b      	ldrh	r3, [r3, #2]
 8005c04:	b29a      	uxth	r2, r3
 8005c06:	897b      	ldrh	r3, [r7, #10]
 8005c08:	429a      	cmp	r2, r3
 8005c0a:	d8e5      	bhi.n	8005bd8 <USBD_GetEpDesc+0x2e>
 8005c0c:	e000      	b.n	8005c10 <USBD_GetEpDesc+0x66>
          break;
 8005c0e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8005c10:	693b      	ldr	r3, [r7, #16]
}
 8005c12:	4618      	mov	r0, r3
 8005c14:	3718      	adds	r7, #24
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bd80      	pop	{r7, pc}

08005c1a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8005c1a:	b480      	push	{r7}
 8005c1c:	b085      	sub	sp, #20
 8005c1e:	af00      	add	r7, sp, #0
 8005c20:	6078      	str	r0, [r7, #4]
 8005c22:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	881b      	ldrh	r3, [r3, #0]
 8005c2c:	68fa      	ldr	r2, [r7, #12]
 8005c2e:	7812      	ldrb	r2, [r2, #0]
 8005c30:	4413      	add	r3, r2
 8005c32:	b29a      	uxth	r2, r3
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	781b      	ldrb	r3, [r3, #0]
 8005c3c:	461a      	mov	r2, r3
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	4413      	add	r3, r2
 8005c42:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8005c44:	68fb      	ldr	r3, [r7, #12]
}
 8005c46:	4618      	mov	r0, r3
 8005c48:	3714      	adds	r7, #20
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c50:	4770      	bx	lr

08005c52 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005c52:	b480      	push	{r7}
 8005c54:	b087      	sub	sp, #28
 8005c56:	af00      	add	r7, sp, #0
 8005c58:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005c5e:	697b      	ldr	r3, [r7, #20]
 8005c60:	781b      	ldrb	r3, [r3, #0]
 8005c62:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005c64:	697b      	ldr	r3, [r7, #20]
 8005c66:	3301      	adds	r3, #1
 8005c68:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005c6a:	697b      	ldr	r3, [r7, #20]
 8005c6c:	781b      	ldrb	r3, [r3, #0]
 8005c6e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005c70:	8a3b      	ldrh	r3, [r7, #16]
 8005c72:	021b      	lsls	r3, r3, #8
 8005c74:	b21a      	sxth	r2, r3
 8005c76:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	b21b      	sxth	r3, r3
 8005c7e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005c80:	89fb      	ldrh	r3, [r7, #14]
}
 8005c82:	4618      	mov	r0, r3
 8005c84:	371c      	adds	r7, #28
 8005c86:	46bd      	mov	sp, r7
 8005c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8c:	4770      	bx	lr
	...

08005c90 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b084      	sub	sp, #16
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
 8005c98:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	781b      	ldrb	r3, [r3, #0]
 8005ca2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005ca6:	2b40      	cmp	r3, #64	@ 0x40
 8005ca8:	d005      	beq.n	8005cb6 <USBD_StdDevReq+0x26>
 8005caa:	2b40      	cmp	r3, #64	@ 0x40
 8005cac:	d857      	bhi.n	8005d5e <USBD_StdDevReq+0xce>
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d00f      	beq.n	8005cd2 <USBD_StdDevReq+0x42>
 8005cb2:	2b20      	cmp	r3, #32
 8005cb4:	d153      	bne.n	8005d5e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	32ae      	adds	r2, #174	@ 0xae
 8005cc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cc4:	689b      	ldr	r3, [r3, #8]
 8005cc6:	6839      	ldr	r1, [r7, #0]
 8005cc8:	6878      	ldr	r0, [r7, #4]
 8005cca:	4798      	blx	r3
 8005ccc:	4603      	mov	r3, r0
 8005cce:	73fb      	strb	r3, [r7, #15]
      break;
 8005cd0:	e04a      	b.n	8005d68 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	785b      	ldrb	r3, [r3, #1]
 8005cd6:	2b09      	cmp	r3, #9
 8005cd8:	d83b      	bhi.n	8005d52 <USBD_StdDevReq+0xc2>
 8005cda:	a201      	add	r2, pc, #4	@ (adr r2, 8005ce0 <USBD_StdDevReq+0x50>)
 8005cdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ce0:	08005d35 	.word	0x08005d35
 8005ce4:	08005d49 	.word	0x08005d49
 8005ce8:	08005d53 	.word	0x08005d53
 8005cec:	08005d3f 	.word	0x08005d3f
 8005cf0:	08005d53 	.word	0x08005d53
 8005cf4:	08005d13 	.word	0x08005d13
 8005cf8:	08005d09 	.word	0x08005d09
 8005cfc:	08005d53 	.word	0x08005d53
 8005d00:	08005d2b 	.word	0x08005d2b
 8005d04:	08005d1d 	.word	0x08005d1d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005d08:	6839      	ldr	r1, [r7, #0]
 8005d0a:	6878      	ldr	r0, [r7, #4]
 8005d0c:	f000 fa3c 	bl	8006188 <USBD_GetDescriptor>
          break;
 8005d10:	e024      	b.n	8005d5c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005d12:	6839      	ldr	r1, [r7, #0]
 8005d14:	6878      	ldr	r0, [r7, #4]
 8005d16:	f000 fba1 	bl	800645c <USBD_SetAddress>
          break;
 8005d1a:	e01f      	b.n	8005d5c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8005d1c:	6839      	ldr	r1, [r7, #0]
 8005d1e:	6878      	ldr	r0, [r7, #4]
 8005d20:	f000 fbe0 	bl	80064e4 <USBD_SetConfig>
 8005d24:	4603      	mov	r3, r0
 8005d26:	73fb      	strb	r3, [r7, #15]
          break;
 8005d28:	e018      	b.n	8005d5c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005d2a:	6839      	ldr	r1, [r7, #0]
 8005d2c:	6878      	ldr	r0, [r7, #4]
 8005d2e:	f000 fc83 	bl	8006638 <USBD_GetConfig>
          break;
 8005d32:	e013      	b.n	8005d5c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005d34:	6839      	ldr	r1, [r7, #0]
 8005d36:	6878      	ldr	r0, [r7, #4]
 8005d38:	f000 fcb4 	bl	80066a4 <USBD_GetStatus>
          break;
 8005d3c:	e00e      	b.n	8005d5c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005d3e:	6839      	ldr	r1, [r7, #0]
 8005d40:	6878      	ldr	r0, [r7, #4]
 8005d42:	f000 fce3 	bl	800670c <USBD_SetFeature>
          break;
 8005d46:	e009      	b.n	8005d5c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005d48:	6839      	ldr	r1, [r7, #0]
 8005d4a:	6878      	ldr	r0, [r7, #4]
 8005d4c:	f000 fd07 	bl	800675e <USBD_ClrFeature>
          break;
 8005d50:	e004      	b.n	8005d5c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8005d52:	6839      	ldr	r1, [r7, #0]
 8005d54:	6878      	ldr	r0, [r7, #4]
 8005d56:	f000 fd5e 	bl	8006816 <USBD_CtlError>
          break;
 8005d5a:	bf00      	nop
      }
      break;
 8005d5c:	e004      	b.n	8005d68 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8005d5e:	6839      	ldr	r1, [r7, #0]
 8005d60:	6878      	ldr	r0, [r7, #4]
 8005d62:	f000 fd58 	bl	8006816 <USBD_CtlError>
      break;
 8005d66:	bf00      	nop
  }

  return ret;
 8005d68:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	3710      	adds	r7, #16
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	bd80      	pop	{r7, pc}
 8005d72:	bf00      	nop

08005d74 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b084      	sub	sp, #16
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
 8005d7c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005d7e:	2300      	movs	r3, #0
 8005d80:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	781b      	ldrb	r3, [r3, #0]
 8005d86:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005d8a:	2b40      	cmp	r3, #64	@ 0x40
 8005d8c:	d005      	beq.n	8005d9a <USBD_StdItfReq+0x26>
 8005d8e:	2b40      	cmp	r3, #64	@ 0x40
 8005d90:	d852      	bhi.n	8005e38 <USBD_StdItfReq+0xc4>
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d001      	beq.n	8005d9a <USBD_StdItfReq+0x26>
 8005d96:	2b20      	cmp	r3, #32
 8005d98:	d14e      	bne.n	8005e38 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005da0:	b2db      	uxtb	r3, r3
 8005da2:	3b01      	subs	r3, #1
 8005da4:	2b02      	cmp	r3, #2
 8005da6:	d840      	bhi.n	8005e2a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	889b      	ldrh	r3, [r3, #4]
 8005dac:	b2db      	uxtb	r3, r3
 8005dae:	2b01      	cmp	r3, #1
 8005db0:	d836      	bhi.n	8005e20 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	889b      	ldrh	r3, [r3, #4]
 8005db6:	b2db      	uxtb	r3, r3
 8005db8:	4619      	mov	r1, r3
 8005dba:	6878      	ldr	r0, [r7, #4]
 8005dbc:	f7ff fedb 	bl	8005b76 <USBD_CoreFindIF>
 8005dc0:	4603      	mov	r3, r0
 8005dc2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005dc4:	7bbb      	ldrb	r3, [r7, #14]
 8005dc6:	2bff      	cmp	r3, #255	@ 0xff
 8005dc8:	d01d      	beq.n	8005e06 <USBD_StdItfReq+0x92>
 8005dca:	7bbb      	ldrb	r3, [r7, #14]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d11a      	bne.n	8005e06 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8005dd0:	7bba      	ldrb	r2, [r7, #14]
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	32ae      	adds	r2, #174	@ 0xae
 8005dd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005dda:	689b      	ldr	r3, [r3, #8]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d00f      	beq.n	8005e00 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8005de0:	7bba      	ldrb	r2, [r7, #14]
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005de8:	7bba      	ldrb	r2, [r7, #14]
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	32ae      	adds	r2, #174	@ 0xae
 8005dee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005df2:	689b      	ldr	r3, [r3, #8]
 8005df4:	6839      	ldr	r1, [r7, #0]
 8005df6:	6878      	ldr	r0, [r7, #4]
 8005df8:	4798      	blx	r3
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005dfe:	e004      	b.n	8005e0a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8005e00:	2303      	movs	r3, #3
 8005e02:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005e04:	e001      	b.n	8005e0a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8005e06:	2303      	movs	r3, #3
 8005e08:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	88db      	ldrh	r3, [r3, #6]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d110      	bne.n	8005e34 <USBD_StdItfReq+0xc0>
 8005e12:	7bfb      	ldrb	r3, [r7, #15]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d10d      	bne.n	8005e34 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8005e18:	6878      	ldr	r0, [r7, #4]
 8005e1a:	f000 fdd3 	bl	80069c4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005e1e:	e009      	b.n	8005e34 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8005e20:	6839      	ldr	r1, [r7, #0]
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	f000 fcf7 	bl	8006816 <USBD_CtlError>
          break;
 8005e28:	e004      	b.n	8005e34 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8005e2a:	6839      	ldr	r1, [r7, #0]
 8005e2c:	6878      	ldr	r0, [r7, #4]
 8005e2e:	f000 fcf2 	bl	8006816 <USBD_CtlError>
          break;
 8005e32:	e000      	b.n	8005e36 <USBD_StdItfReq+0xc2>
          break;
 8005e34:	bf00      	nop
      }
      break;
 8005e36:	e004      	b.n	8005e42 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8005e38:	6839      	ldr	r1, [r7, #0]
 8005e3a:	6878      	ldr	r0, [r7, #4]
 8005e3c:	f000 fceb 	bl	8006816 <USBD_CtlError>
      break;
 8005e40:	bf00      	nop
  }

  return ret;
 8005e42:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e44:	4618      	mov	r0, r3
 8005e46:	3710      	adds	r7, #16
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	bd80      	pop	{r7, pc}

08005e4c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b084      	sub	sp, #16
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
 8005e54:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8005e56:	2300      	movs	r3, #0
 8005e58:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	889b      	ldrh	r3, [r3, #4]
 8005e5e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	781b      	ldrb	r3, [r3, #0]
 8005e64:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005e68:	2b40      	cmp	r3, #64	@ 0x40
 8005e6a:	d007      	beq.n	8005e7c <USBD_StdEPReq+0x30>
 8005e6c:	2b40      	cmp	r3, #64	@ 0x40
 8005e6e:	f200 817f 	bhi.w	8006170 <USBD_StdEPReq+0x324>
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d02a      	beq.n	8005ecc <USBD_StdEPReq+0x80>
 8005e76:	2b20      	cmp	r3, #32
 8005e78:	f040 817a 	bne.w	8006170 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8005e7c:	7bbb      	ldrb	r3, [r7, #14]
 8005e7e:	4619      	mov	r1, r3
 8005e80:	6878      	ldr	r0, [r7, #4]
 8005e82:	f7ff fe85 	bl	8005b90 <USBD_CoreFindEP>
 8005e86:	4603      	mov	r3, r0
 8005e88:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005e8a:	7b7b      	ldrb	r3, [r7, #13]
 8005e8c:	2bff      	cmp	r3, #255	@ 0xff
 8005e8e:	f000 8174 	beq.w	800617a <USBD_StdEPReq+0x32e>
 8005e92:	7b7b      	ldrb	r3, [r7, #13]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	f040 8170 	bne.w	800617a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8005e9a:	7b7a      	ldrb	r2, [r7, #13]
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8005ea2:	7b7a      	ldrb	r2, [r7, #13]
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	32ae      	adds	r2, #174	@ 0xae
 8005ea8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005eac:	689b      	ldr	r3, [r3, #8]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	f000 8163 	beq.w	800617a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8005eb4:	7b7a      	ldrb	r2, [r7, #13]
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	32ae      	adds	r2, #174	@ 0xae
 8005eba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ebe:	689b      	ldr	r3, [r3, #8]
 8005ec0:	6839      	ldr	r1, [r7, #0]
 8005ec2:	6878      	ldr	r0, [r7, #4]
 8005ec4:	4798      	blx	r3
 8005ec6:	4603      	mov	r3, r0
 8005ec8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005eca:	e156      	b.n	800617a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	785b      	ldrb	r3, [r3, #1]
 8005ed0:	2b03      	cmp	r3, #3
 8005ed2:	d008      	beq.n	8005ee6 <USBD_StdEPReq+0x9a>
 8005ed4:	2b03      	cmp	r3, #3
 8005ed6:	f300 8145 	bgt.w	8006164 <USBD_StdEPReq+0x318>
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	f000 809b 	beq.w	8006016 <USBD_StdEPReq+0x1ca>
 8005ee0:	2b01      	cmp	r3, #1
 8005ee2:	d03c      	beq.n	8005f5e <USBD_StdEPReq+0x112>
 8005ee4:	e13e      	b.n	8006164 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005eec:	b2db      	uxtb	r3, r3
 8005eee:	2b02      	cmp	r3, #2
 8005ef0:	d002      	beq.n	8005ef8 <USBD_StdEPReq+0xac>
 8005ef2:	2b03      	cmp	r3, #3
 8005ef4:	d016      	beq.n	8005f24 <USBD_StdEPReq+0xd8>
 8005ef6:	e02c      	b.n	8005f52 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005ef8:	7bbb      	ldrb	r3, [r7, #14]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d00d      	beq.n	8005f1a <USBD_StdEPReq+0xce>
 8005efe:	7bbb      	ldrb	r3, [r7, #14]
 8005f00:	2b80      	cmp	r3, #128	@ 0x80
 8005f02:	d00a      	beq.n	8005f1a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005f04:	7bbb      	ldrb	r3, [r7, #14]
 8005f06:	4619      	mov	r1, r3
 8005f08:	6878      	ldr	r0, [r7, #4]
 8005f0a:	f002 fdfb 	bl	8008b04 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005f0e:	2180      	movs	r1, #128	@ 0x80
 8005f10:	6878      	ldr	r0, [r7, #4]
 8005f12:	f002 fdf7 	bl	8008b04 <USBD_LL_StallEP>
 8005f16:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005f18:	e020      	b.n	8005f5c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8005f1a:	6839      	ldr	r1, [r7, #0]
 8005f1c:	6878      	ldr	r0, [r7, #4]
 8005f1e:	f000 fc7a 	bl	8006816 <USBD_CtlError>
              break;
 8005f22:	e01b      	b.n	8005f5c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	885b      	ldrh	r3, [r3, #2]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d10e      	bne.n	8005f4a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005f2c:	7bbb      	ldrb	r3, [r7, #14]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d00b      	beq.n	8005f4a <USBD_StdEPReq+0xfe>
 8005f32:	7bbb      	ldrb	r3, [r7, #14]
 8005f34:	2b80      	cmp	r3, #128	@ 0x80
 8005f36:	d008      	beq.n	8005f4a <USBD_StdEPReq+0xfe>
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	88db      	ldrh	r3, [r3, #6]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d104      	bne.n	8005f4a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8005f40:	7bbb      	ldrb	r3, [r7, #14]
 8005f42:	4619      	mov	r1, r3
 8005f44:	6878      	ldr	r0, [r7, #4]
 8005f46:	f002 fddd 	bl	8008b04 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	f000 fd3a 	bl	80069c4 <USBD_CtlSendStatus>

              break;
 8005f50:	e004      	b.n	8005f5c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8005f52:	6839      	ldr	r1, [r7, #0]
 8005f54:	6878      	ldr	r0, [r7, #4]
 8005f56:	f000 fc5e 	bl	8006816 <USBD_CtlError>
              break;
 8005f5a:	bf00      	nop
          }
          break;
 8005f5c:	e107      	b.n	800616e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005f64:	b2db      	uxtb	r3, r3
 8005f66:	2b02      	cmp	r3, #2
 8005f68:	d002      	beq.n	8005f70 <USBD_StdEPReq+0x124>
 8005f6a:	2b03      	cmp	r3, #3
 8005f6c:	d016      	beq.n	8005f9c <USBD_StdEPReq+0x150>
 8005f6e:	e04b      	b.n	8006008 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005f70:	7bbb      	ldrb	r3, [r7, #14]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d00d      	beq.n	8005f92 <USBD_StdEPReq+0x146>
 8005f76:	7bbb      	ldrb	r3, [r7, #14]
 8005f78:	2b80      	cmp	r3, #128	@ 0x80
 8005f7a:	d00a      	beq.n	8005f92 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005f7c:	7bbb      	ldrb	r3, [r7, #14]
 8005f7e:	4619      	mov	r1, r3
 8005f80:	6878      	ldr	r0, [r7, #4]
 8005f82:	f002 fdbf 	bl	8008b04 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005f86:	2180      	movs	r1, #128	@ 0x80
 8005f88:	6878      	ldr	r0, [r7, #4]
 8005f8a:	f002 fdbb 	bl	8008b04 <USBD_LL_StallEP>
 8005f8e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005f90:	e040      	b.n	8006014 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8005f92:	6839      	ldr	r1, [r7, #0]
 8005f94:	6878      	ldr	r0, [r7, #4]
 8005f96:	f000 fc3e 	bl	8006816 <USBD_CtlError>
              break;
 8005f9a:	e03b      	b.n	8006014 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	885b      	ldrh	r3, [r3, #2]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d136      	bne.n	8006012 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005fa4:	7bbb      	ldrb	r3, [r7, #14]
 8005fa6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d004      	beq.n	8005fb8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8005fae:	7bbb      	ldrb	r3, [r7, #14]
 8005fb0:	4619      	mov	r1, r3
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	f002 fdc5 	bl	8008b42 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8005fb8:	6878      	ldr	r0, [r7, #4]
 8005fba:	f000 fd03 	bl	80069c4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8005fbe:	7bbb      	ldrb	r3, [r7, #14]
 8005fc0:	4619      	mov	r1, r3
 8005fc2:	6878      	ldr	r0, [r7, #4]
 8005fc4:	f7ff fde4 	bl	8005b90 <USBD_CoreFindEP>
 8005fc8:	4603      	mov	r3, r0
 8005fca:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005fcc:	7b7b      	ldrb	r3, [r7, #13]
 8005fce:	2bff      	cmp	r3, #255	@ 0xff
 8005fd0:	d01f      	beq.n	8006012 <USBD_StdEPReq+0x1c6>
 8005fd2:	7b7b      	ldrb	r3, [r7, #13]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d11c      	bne.n	8006012 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8005fd8:	7b7a      	ldrb	r2, [r7, #13]
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8005fe0:	7b7a      	ldrb	r2, [r7, #13]
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	32ae      	adds	r2, #174	@ 0xae
 8005fe6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fea:	689b      	ldr	r3, [r3, #8]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d010      	beq.n	8006012 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005ff0:	7b7a      	ldrb	r2, [r7, #13]
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	32ae      	adds	r2, #174	@ 0xae
 8005ff6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ffa:	689b      	ldr	r3, [r3, #8]
 8005ffc:	6839      	ldr	r1, [r7, #0]
 8005ffe:	6878      	ldr	r0, [r7, #4]
 8006000:	4798      	blx	r3
 8006002:	4603      	mov	r3, r0
 8006004:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006006:	e004      	b.n	8006012 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006008:	6839      	ldr	r1, [r7, #0]
 800600a:	6878      	ldr	r0, [r7, #4]
 800600c:	f000 fc03 	bl	8006816 <USBD_CtlError>
              break;
 8006010:	e000      	b.n	8006014 <USBD_StdEPReq+0x1c8>
              break;
 8006012:	bf00      	nop
          }
          break;
 8006014:	e0ab      	b.n	800616e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800601c:	b2db      	uxtb	r3, r3
 800601e:	2b02      	cmp	r3, #2
 8006020:	d002      	beq.n	8006028 <USBD_StdEPReq+0x1dc>
 8006022:	2b03      	cmp	r3, #3
 8006024:	d032      	beq.n	800608c <USBD_StdEPReq+0x240>
 8006026:	e097      	b.n	8006158 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006028:	7bbb      	ldrb	r3, [r7, #14]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d007      	beq.n	800603e <USBD_StdEPReq+0x1f2>
 800602e:	7bbb      	ldrb	r3, [r7, #14]
 8006030:	2b80      	cmp	r3, #128	@ 0x80
 8006032:	d004      	beq.n	800603e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006034:	6839      	ldr	r1, [r7, #0]
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	f000 fbed 	bl	8006816 <USBD_CtlError>
                break;
 800603c:	e091      	b.n	8006162 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800603e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006042:	2b00      	cmp	r3, #0
 8006044:	da0b      	bge.n	800605e <USBD_StdEPReq+0x212>
 8006046:	7bbb      	ldrb	r3, [r7, #14]
 8006048:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800604c:	4613      	mov	r3, r2
 800604e:	009b      	lsls	r3, r3, #2
 8006050:	4413      	add	r3, r2
 8006052:	009b      	lsls	r3, r3, #2
 8006054:	3310      	adds	r3, #16
 8006056:	687a      	ldr	r2, [r7, #4]
 8006058:	4413      	add	r3, r2
 800605a:	3304      	adds	r3, #4
 800605c:	e00b      	b.n	8006076 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800605e:	7bbb      	ldrb	r3, [r7, #14]
 8006060:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006064:	4613      	mov	r3, r2
 8006066:	009b      	lsls	r3, r3, #2
 8006068:	4413      	add	r3, r2
 800606a:	009b      	lsls	r3, r3, #2
 800606c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006070:	687a      	ldr	r2, [r7, #4]
 8006072:	4413      	add	r3, r2
 8006074:	3304      	adds	r3, #4
 8006076:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	2200      	movs	r2, #0
 800607c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	2202      	movs	r2, #2
 8006082:	4619      	mov	r1, r3
 8006084:	6878      	ldr	r0, [r7, #4]
 8006086:	f000 fc43 	bl	8006910 <USBD_CtlSendData>
              break;
 800608a:	e06a      	b.n	8006162 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800608c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006090:	2b00      	cmp	r3, #0
 8006092:	da11      	bge.n	80060b8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006094:	7bbb      	ldrb	r3, [r7, #14]
 8006096:	f003 020f 	and.w	r2, r3, #15
 800609a:	6879      	ldr	r1, [r7, #4]
 800609c:	4613      	mov	r3, r2
 800609e:	009b      	lsls	r3, r3, #2
 80060a0:	4413      	add	r3, r2
 80060a2:	009b      	lsls	r3, r3, #2
 80060a4:	440b      	add	r3, r1
 80060a6:	3324      	adds	r3, #36	@ 0x24
 80060a8:	881b      	ldrh	r3, [r3, #0]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d117      	bne.n	80060de <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80060ae:	6839      	ldr	r1, [r7, #0]
 80060b0:	6878      	ldr	r0, [r7, #4]
 80060b2:	f000 fbb0 	bl	8006816 <USBD_CtlError>
                  break;
 80060b6:	e054      	b.n	8006162 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80060b8:	7bbb      	ldrb	r3, [r7, #14]
 80060ba:	f003 020f 	and.w	r2, r3, #15
 80060be:	6879      	ldr	r1, [r7, #4]
 80060c0:	4613      	mov	r3, r2
 80060c2:	009b      	lsls	r3, r3, #2
 80060c4:	4413      	add	r3, r2
 80060c6:	009b      	lsls	r3, r3, #2
 80060c8:	440b      	add	r3, r1
 80060ca:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80060ce:	881b      	ldrh	r3, [r3, #0]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d104      	bne.n	80060de <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80060d4:	6839      	ldr	r1, [r7, #0]
 80060d6:	6878      	ldr	r0, [r7, #4]
 80060d8:	f000 fb9d 	bl	8006816 <USBD_CtlError>
                  break;
 80060dc:	e041      	b.n	8006162 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80060de:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	da0b      	bge.n	80060fe <USBD_StdEPReq+0x2b2>
 80060e6:	7bbb      	ldrb	r3, [r7, #14]
 80060e8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80060ec:	4613      	mov	r3, r2
 80060ee:	009b      	lsls	r3, r3, #2
 80060f0:	4413      	add	r3, r2
 80060f2:	009b      	lsls	r3, r3, #2
 80060f4:	3310      	adds	r3, #16
 80060f6:	687a      	ldr	r2, [r7, #4]
 80060f8:	4413      	add	r3, r2
 80060fa:	3304      	adds	r3, #4
 80060fc:	e00b      	b.n	8006116 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80060fe:	7bbb      	ldrb	r3, [r7, #14]
 8006100:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006104:	4613      	mov	r3, r2
 8006106:	009b      	lsls	r3, r3, #2
 8006108:	4413      	add	r3, r2
 800610a:	009b      	lsls	r3, r3, #2
 800610c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006110:	687a      	ldr	r2, [r7, #4]
 8006112:	4413      	add	r3, r2
 8006114:	3304      	adds	r3, #4
 8006116:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006118:	7bbb      	ldrb	r3, [r7, #14]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d002      	beq.n	8006124 <USBD_StdEPReq+0x2d8>
 800611e:	7bbb      	ldrb	r3, [r7, #14]
 8006120:	2b80      	cmp	r3, #128	@ 0x80
 8006122:	d103      	bne.n	800612c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	2200      	movs	r2, #0
 8006128:	601a      	str	r2, [r3, #0]
 800612a:	e00e      	b.n	800614a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800612c:	7bbb      	ldrb	r3, [r7, #14]
 800612e:	4619      	mov	r1, r3
 8006130:	6878      	ldr	r0, [r7, #4]
 8006132:	f002 fd25 	bl	8008b80 <USBD_LL_IsStallEP>
 8006136:	4603      	mov	r3, r0
 8006138:	2b00      	cmp	r3, #0
 800613a:	d003      	beq.n	8006144 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	2201      	movs	r2, #1
 8006140:	601a      	str	r2, [r3, #0]
 8006142:	e002      	b.n	800614a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	2200      	movs	r2, #0
 8006148:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	2202      	movs	r2, #2
 800614e:	4619      	mov	r1, r3
 8006150:	6878      	ldr	r0, [r7, #4]
 8006152:	f000 fbdd 	bl	8006910 <USBD_CtlSendData>
              break;
 8006156:	e004      	b.n	8006162 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006158:	6839      	ldr	r1, [r7, #0]
 800615a:	6878      	ldr	r0, [r7, #4]
 800615c:	f000 fb5b 	bl	8006816 <USBD_CtlError>
              break;
 8006160:	bf00      	nop
          }
          break;
 8006162:	e004      	b.n	800616e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006164:	6839      	ldr	r1, [r7, #0]
 8006166:	6878      	ldr	r0, [r7, #4]
 8006168:	f000 fb55 	bl	8006816 <USBD_CtlError>
          break;
 800616c:	bf00      	nop
      }
      break;
 800616e:	e005      	b.n	800617c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006170:	6839      	ldr	r1, [r7, #0]
 8006172:	6878      	ldr	r0, [r7, #4]
 8006174:	f000 fb4f 	bl	8006816 <USBD_CtlError>
      break;
 8006178:	e000      	b.n	800617c <USBD_StdEPReq+0x330>
      break;
 800617a:	bf00      	nop
  }

  return ret;
 800617c:	7bfb      	ldrb	r3, [r7, #15]
}
 800617e:	4618      	mov	r0, r3
 8006180:	3710      	adds	r7, #16
 8006182:	46bd      	mov	sp, r7
 8006184:	bd80      	pop	{r7, pc}
	...

08006188 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b084      	sub	sp, #16
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
 8006190:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006192:	2300      	movs	r3, #0
 8006194:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006196:	2300      	movs	r3, #0
 8006198:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800619a:	2300      	movs	r3, #0
 800619c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	885b      	ldrh	r3, [r3, #2]
 80061a2:	0a1b      	lsrs	r3, r3, #8
 80061a4:	b29b      	uxth	r3, r3
 80061a6:	3b01      	subs	r3, #1
 80061a8:	2b06      	cmp	r3, #6
 80061aa:	f200 8128 	bhi.w	80063fe <USBD_GetDescriptor+0x276>
 80061ae:	a201      	add	r2, pc, #4	@ (adr r2, 80061b4 <USBD_GetDescriptor+0x2c>)
 80061b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061b4:	080061d1 	.word	0x080061d1
 80061b8:	080061e9 	.word	0x080061e9
 80061bc:	08006229 	.word	0x08006229
 80061c0:	080063ff 	.word	0x080063ff
 80061c4:	080063ff 	.word	0x080063ff
 80061c8:	0800639f 	.word	0x0800639f
 80061cc:	080063cb 	.word	0x080063cb
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	687a      	ldr	r2, [r7, #4]
 80061da:	7c12      	ldrb	r2, [r2, #16]
 80061dc:	f107 0108 	add.w	r1, r7, #8
 80061e0:	4610      	mov	r0, r2
 80061e2:	4798      	blx	r3
 80061e4:	60f8      	str	r0, [r7, #12]
      break;
 80061e6:	e112      	b.n	800640e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	7c1b      	ldrb	r3, [r3, #16]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d10d      	bne.n	800620c <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80061f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061f8:	f107 0208 	add.w	r2, r7, #8
 80061fc:	4610      	mov	r0, r2
 80061fe:	4798      	blx	r3
 8006200:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	3301      	adds	r3, #1
 8006206:	2202      	movs	r2, #2
 8006208:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800620a:	e100      	b.n	800640e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006212:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006214:	f107 0208 	add.w	r2, r7, #8
 8006218:	4610      	mov	r0, r2
 800621a:	4798      	blx	r3
 800621c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	3301      	adds	r3, #1
 8006222:	2202      	movs	r2, #2
 8006224:	701a      	strb	r2, [r3, #0]
      break;
 8006226:	e0f2      	b.n	800640e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	885b      	ldrh	r3, [r3, #2]
 800622c:	b2db      	uxtb	r3, r3
 800622e:	2b05      	cmp	r3, #5
 8006230:	f200 80ac 	bhi.w	800638c <USBD_GetDescriptor+0x204>
 8006234:	a201      	add	r2, pc, #4	@ (adr r2, 800623c <USBD_GetDescriptor+0xb4>)
 8006236:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800623a:	bf00      	nop
 800623c:	08006255 	.word	0x08006255
 8006240:	08006289 	.word	0x08006289
 8006244:	080062bd 	.word	0x080062bd
 8006248:	080062f1 	.word	0x080062f1
 800624c:	08006325 	.word	0x08006325
 8006250:	08006359 	.word	0x08006359
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800625a:	685b      	ldr	r3, [r3, #4]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d00b      	beq.n	8006278 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006266:	685b      	ldr	r3, [r3, #4]
 8006268:	687a      	ldr	r2, [r7, #4]
 800626a:	7c12      	ldrb	r2, [r2, #16]
 800626c:	f107 0108 	add.w	r1, r7, #8
 8006270:	4610      	mov	r0, r2
 8006272:	4798      	blx	r3
 8006274:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006276:	e091      	b.n	800639c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006278:	6839      	ldr	r1, [r7, #0]
 800627a:	6878      	ldr	r0, [r7, #4]
 800627c:	f000 facb 	bl	8006816 <USBD_CtlError>
            err++;
 8006280:	7afb      	ldrb	r3, [r7, #11]
 8006282:	3301      	adds	r3, #1
 8006284:	72fb      	strb	r3, [r7, #11]
          break;
 8006286:	e089      	b.n	800639c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800628e:	689b      	ldr	r3, [r3, #8]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d00b      	beq.n	80062ac <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800629a:	689b      	ldr	r3, [r3, #8]
 800629c:	687a      	ldr	r2, [r7, #4]
 800629e:	7c12      	ldrb	r2, [r2, #16]
 80062a0:	f107 0108 	add.w	r1, r7, #8
 80062a4:	4610      	mov	r0, r2
 80062a6:	4798      	blx	r3
 80062a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80062aa:	e077      	b.n	800639c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80062ac:	6839      	ldr	r1, [r7, #0]
 80062ae:	6878      	ldr	r0, [r7, #4]
 80062b0:	f000 fab1 	bl	8006816 <USBD_CtlError>
            err++;
 80062b4:	7afb      	ldrb	r3, [r7, #11]
 80062b6:	3301      	adds	r3, #1
 80062b8:	72fb      	strb	r3, [r7, #11]
          break;
 80062ba:	e06f      	b.n	800639c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80062c2:	68db      	ldr	r3, [r3, #12]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d00b      	beq.n	80062e0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80062ce:	68db      	ldr	r3, [r3, #12]
 80062d0:	687a      	ldr	r2, [r7, #4]
 80062d2:	7c12      	ldrb	r2, [r2, #16]
 80062d4:	f107 0108 	add.w	r1, r7, #8
 80062d8:	4610      	mov	r0, r2
 80062da:	4798      	blx	r3
 80062dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80062de:	e05d      	b.n	800639c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80062e0:	6839      	ldr	r1, [r7, #0]
 80062e2:	6878      	ldr	r0, [r7, #4]
 80062e4:	f000 fa97 	bl	8006816 <USBD_CtlError>
            err++;
 80062e8:	7afb      	ldrb	r3, [r7, #11]
 80062ea:	3301      	adds	r3, #1
 80062ec:	72fb      	strb	r3, [r7, #11]
          break;
 80062ee:	e055      	b.n	800639c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80062f6:	691b      	ldr	r3, [r3, #16]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d00b      	beq.n	8006314 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006302:	691b      	ldr	r3, [r3, #16]
 8006304:	687a      	ldr	r2, [r7, #4]
 8006306:	7c12      	ldrb	r2, [r2, #16]
 8006308:	f107 0108 	add.w	r1, r7, #8
 800630c:	4610      	mov	r0, r2
 800630e:	4798      	blx	r3
 8006310:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006312:	e043      	b.n	800639c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006314:	6839      	ldr	r1, [r7, #0]
 8006316:	6878      	ldr	r0, [r7, #4]
 8006318:	f000 fa7d 	bl	8006816 <USBD_CtlError>
            err++;
 800631c:	7afb      	ldrb	r3, [r7, #11]
 800631e:	3301      	adds	r3, #1
 8006320:	72fb      	strb	r3, [r7, #11]
          break;
 8006322:	e03b      	b.n	800639c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800632a:	695b      	ldr	r3, [r3, #20]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d00b      	beq.n	8006348 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006336:	695b      	ldr	r3, [r3, #20]
 8006338:	687a      	ldr	r2, [r7, #4]
 800633a:	7c12      	ldrb	r2, [r2, #16]
 800633c:	f107 0108 	add.w	r1, r7, #8
 8006340:	4610      	mov	r0, r2
 8006342:	4798      	blx	r3
 8006344:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006346:	e029      	b.n	800639c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006348:	6839      	ldr	r1, [r7, #0]
 800634a:	6878      	ldr	r0, [r7, #4]
 800634c:	f000 fa63 	bl	8006816 <USBD_CtlError>
            err++;
 8006350:	7afb      	ldrb	r3, [r7, #11]
 8006352:	3301      	adds	r3, #1
 8006354:	72fb      	strb	r3, [r7, #11]
          break;
 8006356:	e021      	b.n	800639c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800635e:	699b      	ldr	r3, [r3, #24]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d00b      	beq.n	800637c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800636a:	699b      	ldr	r3, [r3, #24]
 800636c:	687a      	ldr	r2, [r7, #4]
 800636e:	7c12      	ldrb	r2, [r2, #16]
 8006370:	f107 0108 	add.w	r1, r7, #8
 8006374:	4610      	mov	r0, r2
 8006376:	4798      	blx	r3
 8006378:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800637a:	e00f      	b.n	800639c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800637c:	6839      	ldr	r1, [r7, #0]
 800637e:	6878      	ldr	r0, [r7, #4]
 8006380:	f000 fa49 	bl	8006816 <USBD_CtlError>
            err++;
 8006384:	7afb      	ldrb	r3, [r7, #11]
 8006386:	3301      	adds	r3, #1
 8006388:	72fb      	strb	r3, [r7, #11]
          break;
 800638a:	e007      	b.n	800639c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800638c:	6839      	ldr	r1, [r7, #0]
 800638e:	6878      	ldr	r0, [r7, #4]
 8006390:	f000 fa41 	bl	8006816 <USBD_CtlError>
          err++;
 8006394:	7afb      	ldrb	r3, [r7, #11]
 8006396:	3301      	adds	r3, #1
 8006398:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800639a:	bf00      	nop
      }
      break;
 800639c:	e037      	b.n	800640e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	7c1b      	ldrb	r3, [r3, #16]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d109      	bne.n	80063ba <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80063ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80063ae:	f107 0208 	add.w	r2, r7, #8
 80063b2:	4610      	mov	r0, r2
 80063b4:	4798      	blx	r3
 80063b6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80063b8:	e029      	b.n	800640e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80063ba:	6839      	ldr	r1, [r7, #0]
 80063bc:	6878      	ldr	r0, [r7, #4]
 80063be:	f000 fa2a 	bl	8006816 <USBD_CtlError>
        err++;
 80063c2:	7afb      	ldrb	r3, [r7, #11]
 80063c4:	3301      	adds	r3, #1
 80063c6:	72fb      	strb	r3, [r7, #11]
      break;
 80063c8:	e021      	b.n	800640e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	7c1b      	ldrb	r3, [r3, #16]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d10d      	bne.n	80063ee <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80063d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063da:	f107 0208 	add.w	r2, r7, #8
 80063de:	4610      	mov	r0, r2
 80063e0:	4798      	blx	r3
 80063e2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	3301      	adds	r3, #1
 80063e8:	2207      	movs	r2, #7
 80063ea:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80063ec:	e00f      	b.n	800640e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80063ee:	6839      	ldr	r1, [r7, #0]
 80063f0:	6878      	ldr	r0, [r7, #4]
 80063f2:	f000 fa10 	bl	8006816 <USBD_CtlError>
        err++;
 80063f6:	7afb      	ldrb	r3, [r7, #11]
 80063f8:	3301      	adds	r3, #1
 80063fa:	72fb      	strb	r3, [r7, #11]
      break;
 80063fc:	e007      	b.n	800640e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80063fe:	6839      	ldr	r1, [r7, #0]
 8006400:	6878      	ldr	r0, [r7, #4]
 8006402:	f000 fa08 	bl	8006816 <USBD_CtlError>
      err++;
 8006406:	7afb      	ldrb	r3, [r7, #11]
 8006408:	3301      	adds	r3, #1
 800640a:	72fb      	strb	r3, [r7, #11]
      break;
 800640c:	bf00      	nop
  }

  if (err != 0U)
 800640e:	7afb      	ldrb	r3, [r7, #11]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d11e      	bne.n	8006452 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	88db      	ldrh	r3, [r3, #6]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d016      	beq.n	800644a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800641c:	893b      	ldrh	r3, [r7, #8]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d00e      	beq.n	8006440 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	88da      	ldrh	r2, [r3, #6]
 8006426:	893b      	ldrh	r3, [r7, #8]
 8006428:	4293      	cmp	r3, r2
 800642a:	bf28      	it	cs
 800642c:	4613      	movcs	r3, r2
 800642e:	b29b      	uxth	r3, r3
 8006430:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006432:	893b      	ldrh	r3, [r7, #8]
 8006434:	461a      	mov	r2, r3
 8006436:	68f9      	ldr	r1, [r7, #12]
 8006438:	6878      	ldr	r0, [r7, #4]
 800643a:	f000 fa69 	bl	8006910 <USBD_CtlSendData>
 800643e:	e009      	b.n	8006454 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006440:	6839      	ldr	r1, [r7, #0]
 8006442:	6878      	ldr	r0, [r7, #4]
 8006444:	f000 f9e7 	bl	8006816 <USBD_CtlError>
 8006448:	e004      	b.n	8006454 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800644a:	6878      	ldr	r0, [r7, #4]
 800644c:	f000 faba 	bl	80069c4 <USBD_CtlSendStatus>
 8006450:	e000      	b.n	8006454 <USBD_GetDescriptor+0x2cc>
    return;
 8006452:	bf00      	nop
  }
}
 8006454:	3710      	adds	r7, #16
 8006456:	46bd      	mov	sp, r7
 8006458:	bd80      	pop	{r7, pc}
 800645a:	bf00      	nop

0800645c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b084      	sub	sp, #16
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
 8006464:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	889b      	ldrh	r3, [r3, #4]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d131      	bne.n	80064d2 <USBD_SetAddress+0x76>
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	88db      	ldrh	r3, [r3, #6]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d12d      	bne.n	80064d2 <USBD_SetAddress+0x76>
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	885b      	ldrh	r3, [r3, #2]
 800647a:	2b7f      	cmp	r3, #127	@ 0x7f
 800647c:	d829      	bhi.n	80064d2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	885b      	ldrh	r3, [r3, #2]
 8006482:	b2db      	uxtb	r3, r3
 8006484:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006488:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006490:	b2db      	uxtb	r3, r3
 8006492:	2b03      	cmp	r3, #3
 8006494:	d104      	bne.n	80064a0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006496:	6839      	ldr	r1, [r7, #0]
 8006498:	6878      	ldr	r0, [r7, #4]
 800649a:	f000 f9bc 	bl	8006816 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800649e:	e01d      	b.n	80064dc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	7bfa      	ldrb	r2, [r7, #15]
 80064a4:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80064a8:	7bfb      	ldrb	r3, [r7, #15]
 80064aa:	4619      	mov	r1, r3
 80064ac:	6878      	ldr	r0, [r7, #4]
 80064ae:	f002 fb93 	bl	8008bd8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	f000 fa86 	bl	80069c4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80064b8:	7bfb      	ldrb	r3, [r7, #15]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d004      	beq.n	80064c8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2202      	movs	r2, #2
 80064c2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80064c6:	e009      	b.n	80064dc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2201      	movs	r2, #1
 80064cc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80064d0:	e004      	b.n	80064dc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80064d2:	6839      	ldr	r1, [r7, #0]
 80064d4:	6878      	ldr	r0, [r7, #4]
 80064d6:	f000 f99e 	bl	8006816 <USBD_CtlError>
  }
}
 80064da:	bf00      	nop
 80064dc:	bf00      	nop
 80064de:	3710      	adds	r7, #16
 80064e0:	46bd      	mov	sp, r7
 80064e2:	bd80      	pop	{r7, pc}

080064e4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b084      	sub	sp, #16
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
 80064ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80064ee:	2300      	movs	r3, #0
 80064f0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	885b      	ldrh	r3, [r3, #2]
 80064f6:	b2da      	uxtb	r2, r3
 80064f8:	4b4e      	ldr	r3, [pc, #312]	@ (8006634 <USBD_SetConfig+0x150>)
 80064fa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80064fc:	4b4d      	ldr	r3, [pc, #308]	@ (8006634 <USBD_SetConfig+0x150>)
 80064fe:	781b      	ldrb	r3, [r3, #0]
 8006500:	2b01      	cmp	r3, #1
 8006502:	d905      	bls.n	8006510 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006504:	6839      	ldr	r1, [r7, #0]
 8006506:	6878      	ldr	r0, [r7, #4]
 8006508:	f000 f985 	bl	8006816 <USBD_CtlError>
    return USBD_FAIL;
 800650c:	2303      	movs	r3, #3
 800650e:	e08c      	b.n	800662a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006516:	b2db      	uxtb	r3, r3
 8006518:	2b02      	cmp	r3, #2
 800651a:	d002      	beq.n	8006522 <USBD_SetConfig+0x3e>
 800651c:	2b03      	cmp	r3, #3
 800651e:	d029      	beq.n	8006574 <USBD_SetConfig+0x90>
 8006520:	e075      	b.n	800660e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006522:	4b44      	ldr	r3, [pc, #272]	@ (8006634 <USBD_SetConfig+0x150>)
 8006524:	781b      	ldrb	r3, [r3, #0]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d020      	beq.n	800656c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800652a:	4b42      	ldr	r3, [pc, #264]	@ (8006634 <USBD_SetConfig+0x150>)
 800652c:	781b      	ldrb	r3, [r3, #0]
 800652e:	461a      	mov	r2, r3
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006534:	4b3f      	ldr	r3, [pc, #252]	@ (8006634 <USBD_SetConfig+0x150>)
 8006536:	781b      	ldrb	r3, [r3, #0]
 8006538:	4619      	mov	r1, r3
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	f7fe ffe3 	bl	8005506 <USBD_SetClassConfig>
 8006540:	4603      	mov	r3, r0
 8006542:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006544:	7bfb      	ldrb	r3, [r7, #15]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d008      	beq.n	800655c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800654a:	6839      	ldr	r1, [r7, #0]
 800654c:	6878      	ldr	r0, [r7, #4]
 800654e:	f000 f962 	bl	8006816 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2202      	movs	r2, #2
 8006556:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800655a:	e065      	b.n	8006628 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800655c:	6878      	ldr	r0, [r7, #4]
 800655e:	f000 fa31 	bl	80069c4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2203      	movs	r2, #3
 8006566:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800656a:	e05d      	b.n	8006628 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800656c:	6878      	ldr	r0, [r7, #4]
 800656e:	f000 fa29 	bl	80069c4 <USBD_CtlSendStatus>
      break;
 8006572:	e059      	b.n	8006628 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006574:	4b2f      	ldr	r3, [pc, #188]	@ (8006634 <USBD_SetConfig+0x150>)
 8006576:	781b      	ldrb	r3, [r3, #0]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d112      	bne.n	80065a2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2202      	movs	r2, #2
 8006580:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8006584:	4b2b      	ldr	r3, [pc, #172]	@ (8006634 <USBD_SetConfig+0x150>)
 8006586:	781b      	ldrb	r3, [r3, #0]
 8006588:	461a      	mov	r2, r3
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800658e:	4b29      	ldr	r3, [pc, #164]	@ (8006634 <USBD_SetConfig+0x150>)
 8006590:	781b      	ldrb	r3, [r3, #0]
 8006592:	4619      	mov	r1, r3
 8006594:	6878      	ldr	r0, [r7, #4]
 8006596:	f7fe ffd2 	bl	800553e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800659a:	6878      	ldr	r0, [r7, #4]
 800659c:	f000 fa12 	bl	80069c4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80065a0:	e042      	b.n	8006628 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80065a2:	4b24      	ldr	r3, [pc, #144]	@ (8006634 <USBD_SetConfig+0x150>)
 80065a4:	781b      	ldrb	r3, [r3, #0]
 80065a6:	461a      	mov	r2, r3
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	685b      	ldr	r3, [r3, #4]
 80065ac:	429a      	cmp	r2, r3
 80065ae:	d02a      	beq.n	8006606 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	685b      	ldr	r3, [r3, #4]
 80065b4:	b2db      	uxtb	r3, r3
 80065b6:	4619      	mov	r1, r3
 80065b8:	6878      	ldr	r0, [r7, #4]
 80065ba:	f7fe ffc0 	bl	800553e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80065be:	4b1d      	ldr	r3, [pc, #116]	@ (8006634 <USBD_SetConfig+0x150>)
 80065c0:	781b      	ldrb	r3, [r3, #0]
 80065c2:	461a      	mov	r2, r3
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80065c8:	4b1a      	ldr	r3, [pc, #104]	@ (8006634 <USBD_SetConfig+0x150>)
 80065ca:	781b      	ldrb	r3, [r3, #0]
 80065cc:	4619      	mov	r1, r3
 80065ce:	6878      	ldr	r0, [r7, #4]
 80065d0:	f7fe ff99 	bl	8005506 <USBD_SetClassConfig>
 80065d4:	4603      	mov	r3, r0
 80065d6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80065d8:	7bfb      	ldrb	r3, [r7, #15]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d00f      	beq.n	80065fe <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80065de:	6839      	ldr	r1, [r7, #0]
 80065e0:	6878      	ldr	r0, [r7, #4]
 80065e2:	f000 f918 	bl	8006816 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	685b      	ldr	r3, [r3, #4]
 80065ea:	b2db      	uxtb	r3, r3
 80065ec:	4619      	mov	r1, r3
 80065ee:	6878      	ldr	r0, [r7, #4]
 80065f0:	f7fe ffa5 	bl	800553e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2202      	movs	r2, #2
 80065f8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80065fc:	e014      	b.n	8006628 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80065fe:	6878      	ldr	r0, [r7, #4]
 8006600:	f000 f9e0 	bl	80069c4 <USBD_CtlSendStatus>
      break;
 8006604:	e010      	b.n	8006628 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006606:	6878      	ldr	r0, [r7, #4]
 8006608:	f000 f9dc 	bl	80069c4 <USBD_CtlSendStatus>
      break;
 800660c:	e00c      	b.n	8006628 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800660e:	6839      	ldr	r1, [r7, #0]
 8006610:	6878      	ldr	r0, [r7, #4]
 8006612:	f000 f900 	bl	8006816 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006616:	4b07      	ldr	r3, [pc, #28]	@ (8006634 <USBD_SetConfig+0x150>)
 8006618:	781b      	ldrb	r3, [r3, #0]
 800661a:	4619      	mov	r1, r3
 800661c:	6878      	ldr	r0, [r7, #4]
 800661e:	f7fe ff8e 	bl	800553e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006622:	2303      	movs	r3, #3
 8006624:	73fb      	strb	r3, [r7, #15]
      break;
 8006626:	bf00      	nop
  }

  return ret;
 8006628:	7bfb      	ldrb	r3, [r7, #15]
}
 800662a:	4618      	mov	r0, r3
 800662c:	3710      	adds	r7, #16
 800662e:	46bd      	mov	sp, r7
 8006630:	bd80      	pop	{r7, pc}
 8006632:	bf00      	nop
 8006634:	20000468 	.word	0x20000468

08006638 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b082      	sub	sp, #8
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
 8006640:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	88db      	ldrh	r3, [r3, #6]
 8006646:	2b01      	cmp	r3, #1
 8006648:	d004      	beq.n	8006654 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800664a:	6839      	ldr	r1, [r7, #0]
 800664c:	6878      	ldr	r0, [r7, #4]
 800664e:	f000 f8e2 	bl	8006816 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006652:	e023      	b.n	800669c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800665a:	b2db      	uxtb	r3, r3
 800665c:	2b02      	cmp	r3, #2
 800665e:	dc02      	bgt.n	8006666 <USBD_GetConfig+0x2e>
 8006660:	2b00      	cmp	r3, #0
 8006662:	dc03      	bgt.n	800666c <USBD_GetConfig+0x34>
 8006664:	e015      	b.n	8006692 <USBD_GetConfig+0x5a>
 8006666:	2b03      	cmp	r3, #3
 8006668:	d00b      	beq.n	8006682 <USBD_GetConfig+0x4a>
 800666a:	e012      	b.n	8006692 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2200      	movs	r2, #0
 8006670:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	3308      	adds	r3, #8
 8006676:	2201      	movs	r2, #1
 8006678:	4619      	mov	r1, r3
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	f000 f948 	bl	8006910 <USBD_CtlSendData>
        break;
 8006680:	e00c      	b.n	800669c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	3304      	adds	r3, #4
 8006686:	2201      	movs	r2, #1
 8006688:	4619      	mov	r1, r3
 800668a:	6878      	ldr	r0, [r7, #4]
 800668c:	f000 f940 	bl	8006910 <USBD_CtlSendData>
        break;
 8006690:	e004      	b.n	800669c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006692:	6839      	ldr	r1, [r7, #0]
 8006694:	6878      	ldr	r0, [r7, #4]
 8006696:	f000 f8be 	bl	8006816 <USBD_CtlError>
        break;
 800669a:	bf00      	nop
}
 800669c:	bf00      	nop
 800669e:	3708      	adds	r7, #8
 80066a0:	46bd      	mov	sp, r7
 80066a2:	bd80      	pop	{r7, pc}

080066a4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b082      	sub	sp, #8
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
 80066ac:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80066b4:	b2db      	uxtb	r3, r3
 80066b6:	3b01      	subs	r3, #1
 80066b8:	2b02      	cmp	r3, #2
 80066ba:	d81e      	bhi.n	80066fa <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	88db      	ldrh	r3, [r3, #6]
 80066c0:	2b02      	cmp	r3, #2
 80066c2:	d004      	beq.n	80066ce <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80066c4:	6839      	ldr	r1, [r7, #0]
 80066c6:	6878      	ldr	r0, [r7, #4]
 80066c8:	f000 f8a5 	bl	8006816 <USBD_CtlError>
        break;
 80066cc:	e01a      	b.n	8006704 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2201      	movs	r2, #1
 80066d2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d005      	beq.n	80066ea <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	68db      	ldr	r3, [r3, #12]
 80066e2:	f043 0202 	orr.w	r2, r3, #2
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	330c      	adds	r3, #12
 80066ee:	2202      	movs	r2, #2
 80066f0:	4619      	mov	r1, r3
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	f000 f90c 	bl	8006910 <USBD_CtlSendData>
      break;
 80066f8:	e004      	b.n	8006704 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80066fa:	6839      	ldr	r1, [r7, #0]
 80066fc:	6878      	ldr	r0, [r7, #4]
 80066fe:	f000 f88a 	bl	8006816 <USBD_CtlError>
      break;
 8006702:	bf00      	nop
  }
}
 8006704:	bf00      	nop
 8006706:	3708      	adds	r7, #8
 8006708:	46bd      	mov	sp, r7
 800670a:	bd80      	pop	{r7, pc}

0800670c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b082      	sub	sp, #8
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
 8006714:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	885b      	ldrh	r3, [r3, #2]
 800671a:	2b01      	cmp	r3, #1
 800671c:	d107      	bne.n	800672e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2201      	movs	r2, #1
 8006722:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006726:	6878      	ldr	r0, [r7, #4]
 8006728:	f000 f94c 	bl	80069c4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800672c:	e013      	b.n	8006756 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	885b      	ldrh	r3, [r3, #2]
 8006732:	2b02      	cmp	r3, #2
 8006734:	d10b      	bne.n	800674e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	889b      	ldrh	r3, [r3, #4]
 800673a:	0a1b      	lsrs	r3, r3, #8
 800673c:	b29b      	uxth	r3, r3
 800673e:	b2da      	uxtb	r2, r3
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8006746:	6878      	ldr	r0, [r7, #4]
 8006748:	f000 f93c 	bl	80069c4 <USBD_CtlSendStatus>
}
 800674c:	e003      	b.n	8006756 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800674e:	6839      	ldr	r1, [r7, #0]
 8006750:	6878      	ldr	r0, [r7, #4]
 8006752:	f000 f860 	bl	8006816 <USBD_CtlError>
}
 8006756:	bf00      	nop
 8006758:	3708      	adds	r7, #8
 800675a:	46bd      	mov	sp, r7
 800675c:	bd80      	pop	{r7, pc}

0800675e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800675e:	b580      	push	{r7, lr}
 8006760:	b082      	sub	sp, #8
 8006762:	af00      	add	r7, sp, #0
 8006764:	6078      	str	r0, [r7, #4]
 8006766:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800676e:	b2db      	uxtb	r3, r3
 8006770:	3b01      	subs	r3, #1
 8006772:	2b02      	cmp	r3, #2
 8006774:	d80b      	bhi.n	800678e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	885b      	ldrh	r3, [r3, #2]
 800677a:	2b01      	cmp	r3, #1
 800677c:	d10c      	bne.n	8006798 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2200      	movs	r2, #0
 8006782:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006786:	6878      	ldr	r0, [r7, #4]
 8006788:	f000 f91c 	bl	80069c4 <USBD_CtlSendStatus>
      }
      break;
 800678c:	e004      	b.n	8006798 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800678e:	6839      	ldr	r1, [r7, #0]
 8006790:	6878      	ldr	r0, [r7, #4]
 8006792:	f000 f840 	bl	8006816 <USBD_CtlError>
      break;
 8006796:	e000      	b.n	800679a <USBD_ClrFeature+0x3c>
      break;
 8006798:	bf00      	nop
  }
}
 800679a:	bf00      	nop
 800679c:	3708      	adds	r7, #8
 800679e:	46bd      	mov	sp, r7
 80067a0:	bd80      	pop	{r7, pc}

080067a2 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80067a2:	b580      	push	{r7, lr}
 80067a4:	b084      	sub	sp, #16
 80067a6:	af00      	add	r7, sp, #0
 80067a8:	6078      	str	r0, [r7, #4]
 80067aa:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	781a      	ldrb	r2, [r3, #0]
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	3301      	adds	r3, #1
 80067bc:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	781a      	ldrb	r2, [r3, #0]
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	3301      	adds	r3, #1
 80067ca:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80067cc:	68f8      	ldr	r0, [r7, #12]
 80067ce:	f7ff fa40 	bl	8005c52 <SWAPBYTE>
 80067d2:	4603      	mov	r3, r0
 80067d4:	461a      	mov	r2, r3
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	3301      	adds	r3, #1
 80067de:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	3301      	adds	r3, #1
 80067e4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80067e6:	68f8      	ldr	r0, [r7, #12]
 80067e8:	f7ff fa33 	bl	8005c52 <SWAPBYTE>
 80067ec:	4603      	mov	r3, r0
 80067ee:	461a      	mov	r2, r3
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	3301      	adds	r3, #1
 80067f8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	3301      	adds	r3, #1
 80067fe:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006800:	68f8      	ldr	r0, [r7, #12]
 8006802:	f7ff fa26 	bl	8005c52 <SWAPBYTE>
 8006806:	4603      	mov	r3, r0
 8006808:	461a      	mov	r2, r3
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	80da      	strh	r2, [r3, #6]
}
 800680e:	bf00      	nop
 8006810:	3710      	adds	r7, #16
 8006812:	46bd      	mov	sp, r7
 8006814:	bd80      	pop	{r7, pc}

08006816 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006816:	b580      	push	{r7, lr}
 8006818:	b082      	sub	sp, #8
 800681a:	af00      	add	r7, sp, #0
 800681c:	6078      	str	r0, [r7, #4]
 800681e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006820:	2180      	movs	r1, #128	@ 0x80
 8006822:	6878      	ldr	r0, [r7, #4]
 8006824:	f002 f96e 	bl	8008b04 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006828:	2100      	movs	r1, #0
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	f002 f96a 	bl	8008b04 <USBD_LL_StallEP>
}
 8006830:	bf00      	nop
 8006832:	3708      	adds	r7, #8
 8006834:	46bd      	mov	sp, r7
 8006836:	bd80      	pop	{r7, pc}

08006838 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b086      	sub	sp, #24
 800683c:	af00      	add	r7, sp, #0
 800683e:	60f8      	str	r0, [r7, #12]
 8006840:	60b9      	str	r1, [r7, #8]
 8006842:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006844:	2300      	movs	r3, #0
 8006846:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d042      	beq.n	80068d4 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8006852:	6938      	ldr	r0, [r7, #16]
 8006854:	f000 f842 	bl	80068dc <USBD_GetLen>
 8006858:	4603      	mov	r3, r0
 800685a:	3301      	adds	r3, #1
 800685c:	005b      	lsls	r3, r3, #1
 800685e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006862:	d808      	bhi.n	8006876 <USBD_GetString+0x3e>
 8006864:	6938      	ldr	r0, [r7, #16]
 8006866:	f000 f839 	bl	80068dc <USBD_GetLen>
 800686a:	4603      	mov	r3, r0
 800686c:	3301      	adds	r3, #1
 800686e:	b29b      	uxth	r3, r3
 8006870:	005b      	lsls	r3, r3, #1
 8006872:	b29a      	uxth	r2, r3
 8006874:	e001      	b.n	800687a <USBD_GetString+0x42>
 8006876:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800687e:	7dfb      	ldrb	r3, [r7, #23]
 8006880:	68ba      	ldr	r2, [r7, #8]
 8006882:	4413      	add	r3, r2
 8006884:	687a      	ldr	r2, [r7, #4]
 8006886:	7812      	ldrb	r2, [r2, #0]
 8006888:	701a      	strb	r2, [r3, #0]
  idx++;
 800688a:	7dfb      	ldrb	r3, [r7, #23]
 800688c:	3301      	adds	r3, #1
 800688e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006890:	7dfb      	ldrb	r3, [r7, #23]
 8006892:	68ba      	ldr	r2, [r7, #8]
 8006894:	4413      	add	r3, r2
 8006896:	2203      	movs	r2, #3
 8006898:	701a      	strb	r2, [r3, #0]
  idx++;
 800689a:	7dfb      	ldrb	r3, [r7, #23]
 800689c:	3301      	adds	r3, #1
 800689e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80068a0:	e013      	b.n	80068ca <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 80068a2:	7dfb      	ldrb	r3, [r7, #23]
 80068a4:	68ba      	ldr	r2, [r7, #8]
 80068a6:	4413      	add	r3, r2
 80068a8:	693a      	ldr	r2, [r7, #16]
 80068aa:	7812      	ldrb	r2, [r2, #0]
 80068ac:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80068ae:	693b      	ldr	r3, [r7, #16]
 80068b0:	3301      	adds	r3, #1
 80068b2:	613b      	str	r3, [r7, #16]
    idx++;
 80068b4:	7dfb      	ldrb	r3, [r7, #23]
 80068b6:	3301      	adds	r3, #1
 80068b8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80068ba:	7dfb      	ldrb	r3, [r7, #23]
 80068bc:	68ba      	ldr	r2, [r7, #8]
 80068be:	4413      	add	r3, r2
 80068c0:	2200      	movs	r2, #0
 80068c2:	701a      	strb	r2, [r3, #0]
    idx++;
 80068c4:	7dfb      	ldrb	r3, [r7, #23]
 80068c6:	3301      	adds	r3, #1
 80068c8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80068ca:	693b      	ldr	r3, [r7, #16]
 80068cc:	781b      	ldrb	r3, [r3, #0]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d1e7      	bne.n	80068a2 <USBD_GetString+0x6a>
 80068d2:	e000      	b.n	80068d6 <USBD_GetString+0x9e>
    return;
 80068d4:	bf00      	nop
  }
}
 80068d6:	3718      	adds	r7, #24
 80068d8:	46bd      	mov	sp, r7
 80068da:	bd80      	pop	{r7, pc}

080068dc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80068dc:	b480      	push	{r7}
 80068de:	b085      	sub	sp, #20
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80068e4:	2300      	movs	r3, #0
 80068e6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80068ec:	e005      	b.n	80068fa <USBD_GetLen+0x1e>
  {
    len++;
 80068ee:	7bfb      	ldrb	r3, [r7, #15]
 80068f0:	3301      	adds	r3, #1
 80068f2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80068f4:	68bb      	ldr	r3, [r7, #8]
 80068f6:	3301      	adds	r3, #1
 80068f8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80068fa:	68bb      	ldr	r3, [r7, #8]
 80068fc:	781b      	ldrb	r3, [r3, #0]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d1f5      	bne.n	80068ee <USBD_GetLen+0x12>
  }

  return len;
 8006902:	7bfb      	ldrb	r3, [r7, #15]
}
 8006904:	4618      	mov	r0, r3
 8006906:	3714      	adds	r7, #20
 8006908:	46bd      	mov	sp, r7
 800690a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690e:	4770      	bx	lr

08006910 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006910:	b580      	push	{r7, lr}
 8006912:	b084      	sub	sp, #16
 8006914:	af00      	add	r7, sp, #0
 8006916:	60f8      	str	r0, [r7, #12]
 8006918:	60b9      	str	r1, [r7, #8]
 800691a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	2202      	movs	r2, #2
 8006920:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	687a      	ldr	r2, [r7, #4]
 8006928:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	687a      	ldr	r2, [r7, #4]
 800692e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	68ba      	ldr	r2, [r7, #8]
 8006934:	2100      	movs	r1, #0
 8006936:	68f8      	ldr	r0, [r7, #12]
 8006938:	f002 f96d 	bl	8008c16 <USBD_LL_Transmit>

  return USBD_OK;
 800693c:	2300      	movs	r3, #0
}
 800693e:	4618      	mov	r0, r3
 8006940:	3710      	adds	r7, #16
 8006942:	46bd      	mov	sp, r7
 8006944:	bd80      	pop	{r7, pc}

08006946 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006946:	b580      	push	{r7, lr}
 8006948:	b084      	sub	sp, #16
 800694a:	af00      	add	r7, sp, #0
 800694c:	60f8      	str	r0, [r7, #12]
 800694e:	60b9      	str	r1, [r7, #8]
 8006950:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	68ba      	ldr	r2, [r7, #8]
 8006956:	2100      	movs	r1, #0
 8006958:	68f8      	ldr	r0, [r7, #12]
 800695a:	f002 f95c 	bl	8008c16 <USBD_LL_Transmit>

  return USBD_OK;
 800695e:	2300      	movs	r3, #0
}
 8006960:	4618      	mov	r0, r3
 8006962:	3710      	adds	r7, #16
 8006964:	46bd      	mov	sp, r7
 8006966:	bd80      	pop	{r7, pc}

08006968 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b084      	sub	sp, #16
 800696c:	af00      	add	r7, sp, #0
 800696e:	60f8      	str	r0, [r7, #12]
 8006970:	60b9      	str	r1, [r7, #8]
 8006972:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	2203      	movs	r2, #3
 8006978:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	687a      	ldr	r2, [r7, #4]
 8006980:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	687a      	ldr	r2, [r7, #4]
 8006988:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	68ba      	ldr	r2, [r7, #8]
 8006990:	2100      	movs	r1, #0
 8006992:	68f8      	ldr	r0, [r7, #12]
 8006994:	f002 f960 	bl	8008c58 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006998:	2300      	movs	r3, #0
}
 800699a:	4618      	mov	r0, r3
 800699c:	3710      	adds	r7, #16
 800699e:	46bd      	mov	sp, r7
 80069a0:	bd80      	pop	{r7, pc}

080069a2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80069a2:	b580      	push	{r7, lr}
 80069a4:	b084      	sub	sp, #16
 80069a6:	af00      	add	r7, sp, #0
 80069a8:	60f8      	str	r0, [r7, #12]
 80069aa:	60b9      	str	r1, [r7, #8]
 80069ac:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	68ba      	ldr	r2, [r7, #8]
 80069b2:	2100      	movs	r1, #0
 80069b4:	68f8      	ldr	r0, [r7, #12]
 80069b6:	f002 f94f 	bl	8008c58 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80069ba:	2300      	movs	r3, #0
}
 80069bc:	4618      	mov	r0, r3
 80069be:	3710      	adds	r7, #16
 80069c0:	46bd      	mov	sp, r7
 80069c2:	bd80      	pop	{r7, pc}

080069c4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b082      	sub	sp, #8
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2204      	movs	r2, #4
 80069d0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80069d4:	2300      	movs	r3, #0
 80069d6:	2200      	movs	r2, #0
 80069d8:	2100      	movs	r1, #0
 80069da:	6878      	ldr	r0, [r7, #4]
 80069dc:	f002 f91b 	bl	8008c16 <USBD_LL_Transmit>

  return USBD_OK;
 80069e0:	2300      	movs	r3, #0
}
 80069e2:	4618      	mov	r0, r3
 80069e4:	3708      	adds	r7, #8
 80069e6:	46bd      	mov	sp, r7
 80069e8:	bd80      	pop	{r7, pc}

080069ea <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80069ea:	b580      	push	{r7, lr}
 80069ec:	b082      	sub	sp, #8
 80069ee:	af00      	add	r7, sp, #0
 80069f0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	2205      	movs	r2, #5
 80069f6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80069fa:	2300      	movs	r3, #0
 80069fc:	2200      	movs	r2, #0
 80069fe:	2100      	movs	r1, #0
 8006a00:	6878      	ldr	r0, [r7, #4]
 8006a02:	f002 f929 	bl	8008c58 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006a06:	2300      	movs	r3, #0
}
 8006a08:	4618      	mov	r0, r3
 8006a0a:	3708      	adds	r7, #8
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	bd80      	pop	{r7, pc}

08006a10 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b082      	sub	sp, #8
 8006a14:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8006a16:	201c      	movs	r0, #28
 8006a18:	f001 fa8e 	bl	8007f38 <pvPortMalloc>
 8006a1c:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d00a      	beq.n	8006a3a <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2200      	movs	r2, #0
 8006a28:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	3304      	adds	r3, #4
 8006a2e:	4618      	mov	r0, r3
 8006a30:	f000 f988 	bl	8006d44 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2200      	movs	r2, #0
 8006a38:	761a      	strb	r2, [r3, #24]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8006a3a:	687b      	ldr	r3, [r7, #4]
	}
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	3708      	adds	r7, #8
 8006a40:	46bd      	mov	sp, r7
 8006a42:	bd80      	pop	{r7, pc}

08006a44 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b090      	sub	sp, #64	@ 0x40
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	60f8      	str	r0, [r7, #12]
 8006a4c:	60b9      	str	r1, [r7, #8]
 8006a4e:	607a      	str	r2, [r7, #4]
 8006a50:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	637b      	str	r3, [r7, #52]	@ 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8006a56:	2300      	movs	r3, #0
 8006a58:	63bb      	str	r3, [r7, #56]	@ 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	633b      	str	r3, [r7, #48]	@ 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d10b      	bne.n	8006a7c <xEventGroupWaitBits+0x38>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006a64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a68:	f383 8811 	msr	BASEPRI, r3
 8006a6c:	f3bf 8f6f 	isb	sy
 8006a70:	f3bf 8f4f 	dsb	sy
 8006a74:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006a76:	bf00      	nop
 8006a78:	bf00      	nop
 8006a7a:	e7fd      	b.n	8006a78 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006a82:	d30b      	bcc.n	8006a9c <xEventGroupWaitBits+0x58>
	__asm volatile
 8006a84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a88:	f383 8811 	msr	BASEPRI, r3
 8006a8c:	f3bf 8f6f 	isb	sy
 8006a90:	f3bf 8f4f 	dsb	sy
 8006a94:	61fb      	str	r3, [r7, #28]
}
 8006a96:	bf00      	nop
 8006a98:	bf00      	nop
 8006a9a:	e7fd      	b.n	8006a98 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8006a9c:	68bb      	ldr	r3, [r7, #8]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d10b      	bne.n	8006aba <xEventGroupWaitBits+0x76>
	__asm volatile
 8006aa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006aa6:	f383 8811 	msr	BASEPRI, r3
 8006aaa:	f3bf 8f6f 	isb	sy
 8006aae:	f3bf 8f4f 	dsb	sy
 8006ab2:	61bb      	str	r3, [r7, #24]
}
 8006ab4:	bf00      	nop
 8006ab6:	bf00      	nop
 8006ab8:	e7fd      	b.n	8006ab6 <xEventGroupWaitBits+0x72>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006aba:	f000 ff8f 	bl	80079dc <xTaskGetSchedulerState>
 8006abe:	4603      	mov	r3, r0
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d102      	bne.n	8006aca <xEventGroupWaitBits+0x86>
 8006ac4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d101      	bne.n	8006ace <xEventGroupWaitBits+0x8a>
 8006aca:	2301      	movs	r3, #1
 8006acc:	e000      	b.n	8006ad0 <xEventGroupWaitBits+0x8c>
 8006ace:	2300      	movs	r3, #0
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d10b      	bne.n	8006aec <xEventGroupWaitBits+0xa8>
	__asm volatile
 8006ad4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ad8:	f383 8811 	msr	BASEPRI, r3
 8006adc:	f3bf 8f6f 	isb	sy
 8006ae0:	f3bf 8f4f 	dsb	sy
 8006ae4:	617b      	str	r3, [r7, #20]
}
 8006ae6:	bf00      	nop
 8006ae8:	bf00      	nop
 8006aea:	e7fd      	b.n	8006ae8 <xEventGroupWaitBits+0xa4>
	}
	#endif

	vTaskSuspendAll();
 8006aec:	f000 fc2e 	bl	800734c <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8006af0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8006af6:	683a      	ldr	r2, [r7, #0]
 8006af8:	68b9      	ldr	r1, [r7, #8]
 8006afa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006afc:	f000 f900 	bl	8006d00 <prvTestWaitCondition>
 8006b00:	62b8      	str	r0, [r7, #40]	@ 0x28

		if( xWaitConditionMet != pdFALSE )
 8006b02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d00e      	beq.n	8006b26 <xEventGroupWaitBits+0xe2>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8006b08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	64bb      	str	r3, [r7, #72]	@ 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d028      	beq.n	8006b68 <xEventGroupWaitBits+0x124>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8006b16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b18:	681a      	ldr	r2, [r3, #0]
 8006b1a:	68bb      	ldr	r3, [r7, #8]
 8006b1c:	43db      	mvns	r3, r3
 8006b1e:	401a      	ands	r2, r3
 8006b20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b22:	601a      	str	r2, [r3, #0]
 8006b24:	e020      	b.n	8006b68 <xEventGroupWaitBits+0x124>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8006b26:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d104      	bne.n	8006b36 <xEventGroupWaitBits+0xf2>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8006b2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTimeoutOccurred = pdTRUE;
 8006b30:	2301      	movs	r3, #1
 8006b32:	633b      	str	r3, [r7, #48]	@ 0x30
 8006b34:	e018      	b.n	8006b68 <xEventGroupWaitBits+0x124>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d003      	beq.n	8006b44 <xEventGroupWaitBits+0x100>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8006b3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b3e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006b42:	63bb      	str	r3, [r7, #56]	@ 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d003      	beq.n	8006b52 <xEventGroupWaitBits+0x10e>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8006b4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b4c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006b50:	63bb      	str	r3, [r7, #56]	@ 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8006b52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b54:	1d18      	adds	r0, r3, #4
 8006b56:	68ba      	ldr	r2, [r7, #8]
 8006b58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b5a:	4313      	orrs	r3, r2
 8006b5c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006b5e:	4619      	mov	r1, r3
 8006b60:	f000 fdbe 	bl	80076e0 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8006b64:	2300      	movs	r3, #0
 8006b66:	63fb      	str	r3, [r7, #60]	@ 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8006b68:	f000 fbfe 	bl	8007368 <xTaskResumeAll>
 8006b6c:	6278      	str	r0, [r7, #36]	@ 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8006b6e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d031      	beq.n	8006bd8 <xEventGroupWaitBits+0x194>
	{
		if( xAlreadyYielded == pdFALSE )
 8006b74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d107      	bne.n	8006b8a <xEventGroupWaitBits+0x146>
		{
			portYIELD_WITHIN_API();
 8006b7a:	4b1a      	ldr	r3, [pc, #104]	@ (8006be4 <xEventGroupWaitBits+0x1a0>)
 8006b7c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006b80:	601a      	str	r2, [r3, #0]
 8006b82:	f3bf 8f4f 	dsb	sy
 8006b86:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8006b8a:	f000 ff45 	bl	8007a18 <uxTaskResetEventItemValue>
 8006b8e:	63f8      	str	r0, [r7, #60]	@ 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8006b90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d11a      	bne.n	8006bd0 <xEventGroupWaitBits+0x18c>
		{
			taskENTER_CRITICAL();
 8006b9a:	f001 f8ed 	bl	8007d78 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8006b9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	63fb      	str	r3, [r7, #60]	@ 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8006ba4:	683a      	ldr	r2, [r7, #0]
 8006ba6:	68b9      	ldr	r1, [r7, #8]
 8006ba8:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8006baa:	f000 f8a9 	bl	8006d00 <prvTestWaitCondition>
 8006bae:	4603      	mov	r3, r0
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d009      	beq.n	8006bc8 <xEventGroupWaitBits+0x184>
				{
					if( xClearOnExit != pdFALSE )
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d006      	beq.n	8006bc8 <xEventGroupWaitBits+0x184>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8006bba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006bbc:	681a      	ldr	r2, [r3, #0]
 8006bbe:	68bb      	ldr	r3, [r7, #8]
 8006bc0:	43db      	mvns	r3, r3
 8006bc2:	401a      	ands	r2, r3
 8006bc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006bc6:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8006bc8:	2301      	movs	r3, #1
 8006bca:	633b      	str	r3, [r7, #48]	@ 0x30
			}
			taskEXIT_CRITICAL();
 8006bcc:	f001 f906 	bl	8007ddc <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8006bd0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006bd2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8006bd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8006bd8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8006bda:	4618      	mov	r0, r3
 8006bdc:	3740      	adds	r7, #64	@ 0x40
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bd80      	pop	{r7, pc}
 8006be2:	bf00      	nop
 8006be4:	e000ed04 	.word	0xe000ed04

08006be8 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b08e      	sub	sp, #56	@ 0x38
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
 8006bf0:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	633b      	str	r3, [r7, #48]	@ 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	62bb      	str	r3, [r7, #40]	@ 0x28
BaseType_t xMatchFound = pdFALSE;
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d10b      	bne.n	8006c1c <xEventGroupSetBits+0x34>
	__asm volatile
 8006c04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c08:	f383 8811 	msr	BASEPRI, r3
 8006c0c:	f3bf 8f6f 	isb	sy
 8006c10:	f3bf 8f4f 	dsb	sy
 8006c14:	613b      	str	r3, [r7, #16]
}
 8006c16:	bf00      	nop
 8006c18:	bf00      	nop
 8006c1a:	e7fd      	b.n	8006c18 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006c22:	d30b      	bcc.n	8006c3c <xEventGroupSetBits+0x54>
	__asm volatile
 8006c24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c28:	f383 8811 	msr	BASEPRI, r3
 8006c2c:	f3bf 8f6f 	isb	sy
 8006c30:	f3bf 8f4f 	dsb	sy
 8006c34:	60fb      	str	r3, [r7, #12]
}
 8006c36:	bf00      	nop
 8006c38:	bf00      	nop
 8006c3a:	e7fd      	b.n	8006c38 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8006c3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c3e:	3304      	adds	r3, #4
 8006c40:	627b      	str	r3, [r7, #36]	@ 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006c42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c44:	3308      	adds	r3, #8
 8006c46:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8006c48:	f000 fb80 	bl	800734c <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8006c4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c4e:	68db      	ldr	r3, [r3, #12]
 8006c50:	637b      	str	r3, [r7, #52]	@ 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8006c52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c54:	681a      	ldr	r2, [r3, #0]
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	431a      	orrs	r2, r3
 8006c5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c5c:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8006c5e:	e03c      	b.n	8006cda <xEventGroupSetBits+0xf2>
		{
			pxNext = listGET_NEXT( pxListItem );
 8006c60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c62:	685b      	ldr	r3, [r3, #4]
 8006c64:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8006c66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	62fb      	str	r3, [r7, #44]	@ 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8006c70:	69bb      	ldr	r3, [r7, #24]
 8006c72:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8006c76:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8006c78:	69bb      	ldr	r3, [r7, #24]
 8006c7a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8006c7e:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8006c80:	697b      	ldr	r3, [r7, #20]
 8006c82:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d108      	bne.n	8006c9c <xEventGroupSetBits+0xb4>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8006c8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c8c:	681a      	ldr	r2, [r3, #0]
 8006c8e:	69bb      	ldr	r3, [r7, #24]
 8006c90:	4013      	ands	r3, r2
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d00b      	beq.n	8006cae <xEventGroupSetBits+0xc6>
				{
					xMatchFound = pdTRUE;
 8006c96:	2301      	movs	r3, #1
 8006c98:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006c9a:	e008      	b.n	8006cae <xEventGroupSetBits+0xc6>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8006c9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c9e:	681a      	ldr	r2, [r3, #0]
 8006ca0:	69bb      	ldr	r3, [r7, #24]
 8006ca2:	4013      	ands	r3, r2
 8006ca4:	69ba      	ldr	r2, [r7, #24]
 8006ca6:	429a      	cmp	r2, r3
 8006ca8:	d101      	bne.n	8006cae <xEventGroupSetBits+0xc6>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8006caa:	2301      	movs	r3, #1
 8006cac:	62fb      	str	r3, [r7, #44]	@ 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8006cae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d010      	beq.n	8006cd6 <xEventGroupSetBits+0xee>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8006cb4:	697b      	ldr	r3, [r7, #20]
 8006cb6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d003      	beq.n	8006cc6 <xEventGroupSetBits+0xde>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8006cbe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006cc0:	69bb      	ldr	r3, [r7, #24]
 8006cc2:	4313      	orrs	r3, r2
 8006cc4:	633b      	str	r3, [r7, #48]	@ 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8006cc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8006cce:	4619      	mov	r1, r3
 8006cd0:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8006cd2:	f000 fd43 	bl	800775c <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8006cd6:	69fb      	ldr	r3, [r7, #28]
 8006cd8:	637b      	str	r3, [r7, #52]	@ 0x34
		while( pxListItem != pxListEnd )
 8006cda:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006cdc:	6a3b      	ldr	r3, [r7, #32]
 8006cde:	429a      	cmp	r2, r3
 8006ce0:	d1be      	bne.n	8006c60 <xEventGroupSetBits+0x78>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8006ce2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ce4:	681a      	ldr	r2, [r3, #0]
 8006ce6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ce8:	43db      	mvns	r3, r3
 8006cea:	401a      	ands	r2, r3
 8006cec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cee:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8006cf0:	f000 fb3a 	bl	8007368 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8006cf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cf6:	681b      	ldr	r3, [r3, #0]
}
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	3738      	adds	r7, #56	@ 0x38
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	bd80      	pop	{r7, pc}

08006d00 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8006d00:	b480      	push	{r7}
 8006d02:	b087      	sub	sp, #28
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	60f8      	str	r0, [r7, #12]
 8006d08:	60b9      	str	r1, [r7, #8]
 8006d0a:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d107      	bne.n	8006d26 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8006d16:	68fa      	ldr	r2, [r7, #12]
 8006d18:	68bb      	ldr	r3, [r7, #8]
 8006d1a:	4013      	ands	r3, r2
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d00a      	beq.n	8006d36 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8006d20:	2301      	movs	r3, #1
 8006d22:	617b      	str	r3, [r7, #20]
 8006d24:	e007      	b.n	8006d36 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8006d26:	68fa      	ldr	r2, [r7, #12]
 8006d28:	68bb      	ldr	r3, [r7, #8]
 8006d2a:	4013      	ands	r3, r2
 8006d2c:	68ba      	ldr	r2, [r7, #8]
 8006d2e:	429a      	cmp	r2, r3
 8006d30:	d101      	bne.n	8006d36 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8006d32:	2301      	movs	r3, #1
 8006d34:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8006d36:	697b      	ldr	r3, [r7, #20]
}
 8006d38:	4618      	mov	r0, r3
 8006d3a:	371c      	adds	r7, #28
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d42:	4770      	bx	lr

08006d44 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006d44:	b480      	push	{r7}
 8006d46:	b083      	sub	sp, #12
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	f103 0208 	add.w	r2, r3, #8
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	f04f 32ff 	mov.w	r2, #4294967295
 8006d5c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	f103 0208 	add.w	r2, r3, #8
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	f103 0208 	add.w	r2, r3, #8
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2200      	movs	r2, #0
 8006d76:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006d78:	bf00      	nop
 8006d7a:	370c      	adds	r7, #12
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d82:	4770      	bx	lr

08006d84 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006d84:	b480      	push	{r7}
 8006d86:	b083      	sub	sp, #12
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2200      	movs	r2, #0
 8006d90:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006d92:	bf00      	nop
 8006d94:	370c      	adds	r7, #12
 8006d96:	46bd      	mov	sp, r7
 8006d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9c:	4770      	bx	lr

08006d9e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006d9e:	b480      	push	{r7}
 8006da0:	b085      	sub	sp, #20
 8006da2:	af00      	add	r7, sp, #0
 8006da4:	6078      	str	r0, [r7, #4]
 8006da6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	685b      	ldr	r3, [r3, #4]
 8006dac:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	68fa      	ldr	r2, [r7, #12]
 8006db2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	689a      	ldr	r2, [r3, #8]
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	689b      	ldr	r3, [r3, #8]
 8006dc0:	683a      	ldr	r2, [r7, #0]
 8006dc2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	683a      	ldr	r2, [r7, #0]
 8006dc8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	687a      	ldr	r2, [r7, #4]
 8006dce:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	1c5a      	adds	r2, r3, #1
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	601a      	str	r2, [r3, #0]
}
 8006dda:	bf00      	nop
 8006ddc:	3714      	adds	r7, #20
 8006dde:	46bd      	mov	sp, r7
 8006de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de4:	4770      	bx	lr

08006de6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006de6:	b480      	push	{r7}
 8006de8:	b085      	sub	sp, #20
 8006dea:	af00      	add	r7, sp, #0
 8006dec:	6078      	str	r0, [r7, #4]
 8006dee:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006df6:	68bb      	ldr	r3, [r7, #8]
 8006df8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dfc:	d103      	bne.n	8006e06 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	691b      	ldr	r3, [r3, #16]
 8006e02:	60fb      	str	r3, [r7, #12]
 8006e04:	e00c      	b.n	8006e20 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	3308      	adds	r3, #8
 8006e0a:	60fb      	str	r3, [r7, #12]
 8006e0c:	e002      	b.n	8006e14 <vListInsert+0x2e>
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	685b      	ldr	r3, [r3, #4]
 8006e12:	60fb      	str	r3, [r7, #12]
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	685b      	ldr	r3, [r3, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	68ba      	ldr	r2, [r7, #8]
 8006e1c:	429a      	cmp	r2, r3
 8006e1e:	d2f6      	bcs.n	8006e0e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	685a      	ldr	r2, [r3, #4]
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	685b      	ldr	r3, [r3, #4]
 8006e2c:	683a      	ldr	r2, [r7, #0]
 8006e2e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	68fa      	ldr	r2, [r7, #12]
 8006e34:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	683a      	ldr	r2, [r7, #0]
 8006e3a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	687a      	ldr	r2, [r7, #4]
 8006e40:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	1c5a      	adds	r2, r3, #1
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	601a      	str	r2, [r3, #0]
}
 8006e4c:	bf00      	nop
 8006e4e:	3714      	adds	r7, #20
 8006e50:	46bd      	mov	sp, r7
 8006e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e56:	4770      	bx	lr

08006e58 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006e58:	b480      	push	{r7}
 8006e5a:	b085      	sub	sp, #20
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	691b      	ldr	r3, [r3, #16]
 8006e64:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	685b      	ldr	r3, [r3, #4]
 8006e6a:	687a      	ldr	r2, [r7, #4]
 8006e6c:	6892      	ldr	r2, [r2, #8]
 8006e6e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	689b      	ldr	r3, [r3, #8]
 8006e74:	687a      	ldr	r2, [r7, #4]
 8006e76:	6852      	ldr	r2, [r2, #4]
 8006e78:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	685b      	ldr	r3, [r3, #4]
 8006e7e:	687a      	ldr	r2, [r7, #4]
 8006e80:	429a      	cmp	r2, r3
 8006e82:	d103      	bne.n	8006e8c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	689a      	ldr	r2, [r3, #8]
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2200      	movs	r2, #0
 8006e90:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	1e5a      	subs	r2, r3, #1
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	681b      	ldr	r3, [r3, #0]
}
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	3714      	adds	r7, #20
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eaa:	4770      	bx	lr

08006eac <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b08e      	sub	sp, #56	@ 0x38
 8006eb0:	af04      	add	r7, sp, #16
 8006eb2:	60f8      	str	r0, [r7, #12]
 8006eb4:	60b9      	str	r1, [r7, #8]
 8006eb6:	607a      	str	r2, [r7, #4]
 8006eb8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006eba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d10b      	bne.n	8006ed8 <xTaskCreateStatic+0x2c>
	__asm volatile
 8006ec0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ec4:	f383 8811 	msr	BASEPRI, r3
 8006ec8:	f3bf 8f6f 	isb	sy
 8006ecc:	f3bf 8f4f 	dsb	sy
 8006ed0:	623b      	str	r3, [r7, #32]
}
 8006ed2:	bf00      	nop
 8006ed4:	bf00      	nop
 8006ed6:	e7fd      	b.n	8006ed4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006ed8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d10b      	bne.n	8006ef6 <xTaskCreateStatic+0x4a>
	__asm volatile
 8006ede:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ee2:	f383 8811 	msr	BASEPRI, r3
 8006ee6:	f3bf 8f6f 	isb	sy
 8006eea:	f3bf 8f4f 	dsb	sy
 8006eee:	61fb      	str	r3, [r7, #28]
}
 8006ef0:	bf00      	nop
 8006ef2:	bf00      	nop
 8006ef4:	e7fd      	b.n	8006ef2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006ef6:	23a0      	movs	r3, #160	@ 0xa0
 8006ef8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006efa:	693b      	ldr	r3, [r7, #16]
 8006efc:	2ba0      	cmp	r3, #160	@ 0xa0
 8006efe:	d00b      	beq.n	8006f18 <xTaskCreateStatic+0x6c>
	__asm volatile
 8006f00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f04:	f383 8811 	msr	BASEPRI, r3
 8006f08:	f3bf 8f6f 	isb	sy
 8006f0c:	f3bf 8f4f 	dsb	sy
 8006f10:	61bb      	str	r3, [r7, #24]
}
 8006f12:	bf00      	nop
 8006f14:	bf00      	nop
 8006f16:	e7fd      	b.n	8006f14 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006f18:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006f1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d01e      	beq.n	8006f5e <xTaskCreateStatic+0xb2>
 8006f20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d01b      	beq.n	8006f5e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006f26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f28:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f2c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006f2e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006f30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f32:	2202      	movs	r2, #2
 8006f34:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006f38:	2300      	movs	r3, #0
 8006f3a:	9303      	str	r3, [sp, #12]
 8006f3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f3e:	9302      	str	r3, [sp, #8]
 8006f40:	f107 0314 	add.w	r3, r7, #20
 8006f44:	9301      	str	r3, [sp, #4]
 8006f46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f48:	9300      	str	r3, [sp, #0]
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	687a      	ldr	r2, [r7, #4]
 8006f4e:	68b9      	ldr	r1, [r7, #8]
 8006f50:	68f8      	ldr	r0, [r7, #12]
 8006f52:	f000 f851 	bl	8006ff8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006f56:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006f58:	f000 f8ee 	bl	8007138 <prvAddNewTaskToReadyList>
 8006f5c:	e001      	b.n	8006f62 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8006f5e:	2300      	movs	r3, #0
 8006f60:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006f62:	697b      	ldr	r3, [r7, #20]
	}
 8006f64:	4618      	mov	r0, r3
 8006f66:	3728      	adds	r7, #40	@ 0x28
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	bd80      	pop	{r7, pc}

08006f6c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b08c      	sub	sp, #48	@ 0x30
 8006f70:	af04      	add	r7, sp, #16
 8006f72:	60f8      	str	r0, [r7, #12]
 8006f74:	60b9      	str	r1, [r7, #8]
 8006f76:	603b      	str	r3, [r7, #0]
 8006f78:	4613      	mov	r3, r2
 8006f7a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006f7c:	88fb      	ldrh	r3, [r7, #6]
 8006f7e:	009b      	lsls	r3, r3, #2
 8006f80:	4618      	mov	r0, r3
 8006f82:	f000 ffd9 	bl	8007f38 <pvPortMalloc>
 8006f86:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006f88:	697b      	ldr	r3, [r7, #20]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d00e      	beq.n	8006fac <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006f8e:	20a0      	movs	r0, #160	@ 0xa0
 8006f90:	f000 ffd2 	bl	8007f38 <pvPortMalloc>
 8006f94:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006f96:	69fb      	ldr	r3, [r7, #28]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d003      	beq.n	8006fa4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006f9c:	69fb      	ldr	r3, [r7, #28]
 8006f9e:	697a      	ldr	r2, [r7, #20]
 8006fa0:	631a      	str	r2, [r3, #48]	@ 0x30
 8006fa2:	e005      	b.n	8006fb0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006fa4:	6978      	ldr	r0, [r7, #20]
 8006fa6:	f001 f895 	bl	80080d4 <vPortFree>
 8006faa:	e001      	b.n	8006fb0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006fac:	2300      	movs	r3, #0
 8006fae:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006fb0:	69fb      	ldr	r3, [r7, #28]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d017      	beq.n	8006fe6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006fb6:	69fb      	ldr	r3, [r7, #28]
 8006fb8:	2200      	movs	r2, #0
 8006fba:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006fbe:	88fa      	ldrh	r2, [r7, #6]
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	9303      	str	r3, [sp, #12]
 8006fc4:	69fb      	ldr	r3, [r7, #28]
 8006fc6:	9302      	str	r3, [sp, #8]
 8006fc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fca:	9301      	str	r3, [sp, #4]
 8006fcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fce:	9300      	str	r3, [sp, #0]
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	68b9      	ldr	r1, [r7, #8]
 8006fd4:	68f8      	ldr	r0, [r7, #12]
 8006fd6:	f000 f80f 	bl	8006ff8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006fda:	69f8      	ldr	r0, [r7, #28]
 8006fdc:	f000 f8ac 	bl	8007138 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006fe0:	2301      	movs	r3, #1
 8006fe2:	61bb      	str	r3, [r7, #24]
 8006fe4:	e002      	b.n	8006fec <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006fe6:	f04f 33ff 	mov.w	r3, #4294967295
 8006fea:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006fec:	69bb      	ldr	r3, [r7, #24]
	}
 8006fee:	4618      	mov	r0, r3
 8006ff0:	3720      	adds	r7, #32
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	bd80      	pop	{r7, pc}
	...

08006ff8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b088      	sub	sp, #32
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	60f8      	str	r0, [r7, #12]
 8007000:	60b9      	str	r1, [r7, #8]
 8007002:	607a      	str	r2, [r7, #4]
 8007004:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007006:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007008:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007010:	3b01      	subs	r3, #1
 8007012:	009b      	lsls	r3, r3, #2
 8007014:	4413      	add	r3, r2
 8007016:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007018:	69bb      	ldr	r3, [r7, #24]
 800701a:	f023 0307 	bic.w	r3, r3, #7
 800701e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007020:	69bb      	ldr	r3, [r7, #24]
 8007022:	f003 0307 	and.w	r3, r3, #7
 8007026:	2b00      	cmp	r3, #0
 8007028:	d00b      	beq.n	8007042 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800702a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800702e:	f383 8811 	msr	BASEPRI, r3
 8007032:	f3bf 8f6f 	isb	sy
 8007036:	f3bf 8f4f 	dsb	sy
 800703a:	617b      	str	r3, [r7, #20]
}
 800703c:	bf00      	nop
 800703e:	bf00      	nop
 8007040:	e7fd      	b.n	800703e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007042:	68bb      	ldr	r3, [r7, #8]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d01f      	beq.n	8007088 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007048:	2300      	movs	r3, #0
 800704a:	61fb      	str	r3, [r7, #28]
 800704c:	e012      	b.n	8007074 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800704e:	68ba      	ldr	r2, [r7, #8]
 8007050:	69fb      	ldr	r3, [r7, #28]
 8007052:	4413      	add	r3, r2
 8007054:	7819      	ldrb	r1, [r3, #0]
 8007056:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007058:	69fb      	ldr	r3, [r7, #28]
 800705a:	4413      	add	r3, r2
 800705c:	3334      	adds	r3, #52	@ 0x34
 800705e:	460a      	mov	r2, r1
 8007060:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007062:	68ba      	ldr	r2, [r7, #8]
 8007064:	69fb      	ldr	r3, [r7, #28]
 8007066:	4413      	add	r3, r2
 8007068:	781b      	ldrb	r3, [r3, #0]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d006      	beq.n	800707c <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800706e:	69fb      	ldr	r3, [r7, #28]
 8007070:	3301      	adds	r3, #1
 8007072:	61fb      	str	r3, [r7, #28]
 8007074:	69fb      	ldr	r3, [r7, #28]
 8007076:	2b0f      	cmp	r3, #15
 8007078:	d9e9      	bls.n	800704e <prvInitialiseNewTask+0x56>
 800707a:	e000      	b.n	800707e <prvInitialiseNewTask+0x86>
			{
				break;
 800707c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800707e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007080:	2200      	movs	r2, #0
 8007082:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007086:	e003      	b.n	8007090 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007088:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800708a:	2200      	movs	r2, #0
 800708c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007090:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007092:	2b06      	cmp	r3, #6
 8007094:	d901      	bls.n	800709a <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007096:	2306      	movs	r3, #6
 8007098:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800709a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800709c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800709e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80070a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070a2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80070a4:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80070a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070a8:	2200      	movs	r2, #0
 80070aa:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80070ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070ae:	3304      	adds	r3, #4
 80070b0:	4618      	mov	r0, r3
 80070b2:	f7ff fe67 	bl	8006d84 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80070b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070b8:	3318      	adds	r3, #24
 80070ba:	4618      	mov	r0, r3
 80070bc:	f7ff fe62 	bl	8006d84 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80070c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80070c4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80070c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070c8:	f1c3 0207 	rsb	r2, r3, #7
 80070cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070ce:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80070d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80070d4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80070d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070d8:	2200      	movs	r2, #0
 80070da:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80070de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070e0:	2200      	movs	r2, #0
 80070e2:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80070e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070e8:	334c      	adds	r3, #76	@ 0x4c
 80070ea:	224c      	movs	r2, #76	@ 0x4c
 80070ec:	2100      	movs	r1, #0
 80070ee:	4618      	mov	r0, r3
 80070f0:	f001 fe2a 	bl	8008d48 <memset>
 80070f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070f6:	4a0d      	ldr	r2, [pc, #52]	@ (800712c <prvInitialiseNewTask+0x134>)
 80070f8:	651a      	str	r2, [r3, #80]	@ 0x50
 80070fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070fc:	4a0c      	ldr	r2, [pc, #48]	@ (8007130 <prvInitialiseNewTask+0x138>)
 80070fe:	655a      	str	r2, [r3, #84]	@ 0x54
 8007100:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007102:	4a0c      	ldr	r2, [pc, #48]	@ (8007134 <prvInitialiseNewTask+0x13c>)
 8007104:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007106:	683a      	ldr	r2, [r7, #0]
 8007108:	68f9      	ldr	r1, [r7, #12]
 800710a:	69b8      	ldr	r0, [r7, #24]
 800710c:	f000 fd02 	bl	8007b14 <pxPortInitialiseStack>
 8007110:	4602      	mov	r2, r0
 8007112:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007114:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007116:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007118:	2b00      	cmp	r3, #0
 800711a:	d002      	beq.n	8007122 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800711c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800711e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007120:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007122:	bf00      	nop
 8007124:	3720      	adds	r7, #32
 8007126:	46bd      	mov	sp, r7
 8007128:	bd80      	pop	{r7, pc}
 800712a:	bf00      	nop
 800712c:	20005da0 	.word	0x20005da0
 8007130:	20005e08 	.word	0x20005e08
 8007134:	20005e70 	.word	0x20005e70

08007138 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007138:	b580      	push	{r7, lr}
 800713a:	b082      	sub	sp, #8
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007140:	f000 fe1a 	bl	8007d78 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007144:	4b2a      	ldr	r3, [pc, #168]	@ (80071f0 <prvAddNewTaskToReadyList+0xb8>)
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	3301      	adds	r3, #1
 800714a:	4a29      	ldr	r2, [pc, #164]	@ (80071f0 <prvAddNewTaskToReadyList+0xb8>)
 800714c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800714e:	4b29      	ldr	r3, [pc, #164]	@ (80071f4 <prvAddNewTaskToReadyList+0xbc>)
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d109      	bne.n	800716a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007156:	4a27      	ldr	r2, [pc, #156]	@ (80071f4 <prvAddNewTaskToReadyList+0xbc>)
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800715c:	4b24      	ldr	r3, [pc, #144]	@ (80071f0 <prvAddNewTaskToReadyList+0xb8>)
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	2b01      	cmp	r3, #1
 8007162:	d110      	bne.n	8007186 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007164:	f000 fb76 	bl	8007854 <prvInitialiseTaskLists>
 8007168:	e00d      	b.n	8007186 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800716a:	4b23      	ldr	r3, [pc, #140]	@ (80071f8 <prvAddNewTaskToReadyList+0xc0>)
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d109      	bne.n	8007186 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007172:	4b20      	ldr	r3, [pc, #128]	@ (80071f4 <prvAddNewTaskToReadyList+0xbc>)
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800717c:	429a      	cmp	r2, r3
 800717e:	d802      	bhi.n	8007186 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007180:	4a1c      	ldr	r2, [pc, #112]	@ (80071f4 <prvAddNewTaskToReadyList+0xbc>)
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007186:	4b1d      	ldr	r3, [pc, #116]	@ (80071fc <prvAddNewTaskToReadyList+0xc4>)
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	3301      	adds	r3, #1
 800718c:	4a1b      	ldr	r2, [pc, #108]	@ (80071fc <prvAddNewTaskToReadyList+0xc4>)
 800718e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007194:	2201      	movs	r2, #1
 8007196:	409a      	lsls	r2, r3
 8007198:	4b19      	ldr	r3, [pc, #100]	@ (8007200 <prvAddNewTaskToReadyList+0xc8>)
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	4313      	orrs	r3, r2
 800719e:	4a18      	ldr	r2, [pc, #96]	@ (8007200 <prvAddNewTaskToReadyList+0xc8>)
 80071a0:	6013      	str	r3, [r2, #0]
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071a6:	4613      	mov	r3, r2
 80071a8:	009b      	lsls	r3, r3, #2
 80071aa:	4413      	add	r3, r2
 80071ac:	009b      	lsls	r3, r3, #2
 80071ae:	4a15      	ldr	r2, [pc, #84]	@ (8007204 <prvAddNewTaskToReadyList+0xcc>)
 80071b0:	441a      	add	r2, r3
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	3304      	adds	r3, #4
 80071b6:	4619      	mov	r1, r3
 80071b8:	4610      	mov	r0, r2
 80071ba:	f7ff fdf0 	bl	8006d9e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80071be:	f000 fe0d 	bl	8007ddc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80071c2:	4b0d      	ldr	r3, [pc, #52]	@ (80071f8 <prvAddNewTaskToReadyList+0xc0>)
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d00e      	beq.n	80071e8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80071ca:	4b0a      	ldr	r3, [pc, #40]	@ (80071f4 <prvAddNewTaskToReadyList+0xbc>)
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071d4:	429a      	cmp	r2, r3
 80071d6:	d207      	bcs.n	80071e8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80071d8:	4b0b      	ldr	r3, [pc, #44]	@ (8007208 <prvAddNewTaskToReadyList+0xd0>)
 80071da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80071de:	601a      	str	r2, [r3, #0]
 80071e0:	f3bf 8f4f 	dsb	sy
 80071e4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80071e8:	bf00      	nop
 80071ea:	3708      	adds	r7, #8
 80071ec:	46bd      	mov	sp, r7
 80071ee:	bd80      	pop	{r7, pc}
 80071f0:	2000056c 	.word	0x2000056c
 80071f4:	2000046c 	.word	0x2000046c
 80071f8:	20000578 	.word	0x20000578
 80071fc:	20000588 	.word	0x20000588
 8007200:	20000574 	.word	0x20000574
 8007204:	20000470 	.word	0x20000470
 8007208:	e000ed04 	.word	0xe000ed04

0800720c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800720c:	b580      	push	{r7, lr}
 800720e:	b084      	sub	sp, #16
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007214:	2300      	movs	r3, #0
 8007216:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d018      	beq.n	8007250 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800721e:	4b14      	ldr	r3, [pc, #80]	@ (8007270 <vTaskDelay+0x64>)
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d00b      	beq.n	800723e <vTaskDelay+0x32>
	__asm volatile
 8007226:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800722a:	f383 8811 	msr	BASEPRI, r3
 800722e:	f3bf 8f6f 	isb	sy
 8007232:	f3bf 8f4f 	dsb	sy
 8007236:	60bb      	str	r3, [r7, #8]
}
 8007238:	bf00      	nop
 800723a:	bf00      	nop
 800723c:	e7fd      	b.n	800723a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800723e:	f000 f885 	bl	800734c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007242:	2100      	movs	r1, #0
 8007244:	6878      	ldr	r0, [r7, #4]
 8007246:	f000 fbff 	bl	8007a48 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800724a:	f000 f88d 	bl	8007368 <xTaskResumeAll>
 800724e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d107      	bne.n	8007266 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8007256:	4b07      	ldr	r3, [pc, #28]	@ (8007274 <vTaskDelay+0x68>)
 8007258:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800725c:	601a      	str	r2, [r3, #0]
 800725e:	f3bf 8f4f 	dsb	sy
 8007262:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007266:	bf00      	nop
 8007268:	3710      	adds	r7, #16
 800726a:	46bd      	mov	sp, r7
 800726c:	bd80      	pop	{r7, pc}
 800726e:	bf00      	nop
 8007270:	20000594 	.word	0x20000594
 8007274:	e000ed04 	.word	0xe000ed04

08007278 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007278:	b580      	push	{r7, lr}
 800727a:	b08a      	sub	sp, #40	@ 0x28
 800727c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800727e:	2300      	movs	r3, #0
 8007280:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007282:	2300      	movs	r3, #0
 8007284:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007286:	463a      	mov	r2, r7
 8007288:	1d39      	adds	r1, r7, #4
 800728a:	f107 0308 	add.w	r3, r7, #8
 800728e:	4618      	mov	r0, r3
 8007290:	f7f9 f91e 	bl	80004d0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007294:	6839      	ldr	r1, [r7, #0]
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	68ba      	ldr	r2, [r7, #8]
 800729a:	9202      	str	r2, [sp, #8]
 800729c:	9301      	str	r3, [sp, #4]
 800729e:	2300      	movs	r3, #0
 80072a0:	9300      	str	r3, [sp, #0]
 80072a2:	2300      	movs	r3, #0
 80072a4:	460a      	mov	r2, r1
 80072a6:	4921      	ldr	r1, [pc, #132]	@ (800732c <vTaskStartScheduler+0xb4>)
 80072a8:	4821      	ldr	r0, [pc, #132]	@ (8007330 <vTaskStartScheduler+0xb8>)
 80072aa:	f7ff fdff 	bl	8006eac <xTaskCreateStatic>
 80072ae:	4603      	mov	r3, r0
 80072b0:	4a20      	ldr	r2, [pc, #128]	@ (8007334 <vTaskStartScheduler+0xbc>)
 80072b2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80072b4:	4b1f      	ldr	r3, [pc, #124]	@ (8007334 <vTaskStartScheduler+0xbc>)
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d002      	beq.n	80072c2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80072bc:	2301      	movs	r3, #1
 80072be:	617b      	str	r3, [r7, #20]
 80072c0:	e001      	b.n	80072c6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80072c2:	2300      	movs	r3, #0
 80072c4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80072c6:	697b      	ldr	r3, [r7, #20]
 80072c8:	2b01      	cmp	r3, #1
 80072ca:	d11b      	bne.n	8007304 <vTaskStartScheduler+0x8c>
	__asm volatile
 80072cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072d0:	f383 8811 	msr	BASEPRI, r3
 80072d4:	f3bf 8f6f 	isb	sy
 80072d8:	f3bf 8f4f 	dsb	sy
 80072dc:	613b      	str	r3, [r7, #16]
}
 80072de:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80072e0:	4b15      	ldr	r3, [pc, #84]	@ (8007338 <vTaskStartScheduler+0xc0>)
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	334c      	adds	r3, #76	@ 0x4c
 80072e6:	4a15      	ldr	r2, [pc, #84]	@ (800733c <vTaskStartScheduler+0xc4>)
 80072e8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80072ea:	4b15      	ldr	r3, [pc, #84]	@ (8007340 <vTaskStartScheduler+0xc8>)
 80072ec:	f04f 32ff 	mov.w	r2, #4294967295
 80072f0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80072f2:	4b14      	ldr	r3, [pc, #80]	@ (8007344 <vTaskStartScheduler+0xcc>)
 80072f4:	2201      	movs	r2, #1
 80072f6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80072f8:	4b13      	ldr	r3, [pc, #76]	@ (8007348 <vTaskStartScheduler+0xd0>)
 80072fa:	2200      	movs	r2, #0
 80072fc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80072fe:	f000 fc97 	bl	8007c30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007302:	e00f      	b.n	8007324 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007304:	697b      	ldr	r3, [r7, #20]
 8007306:	f1b3 3fff 	cmp.w	r3, #4294967295
 800730a:	d10b      	bne.n	8007324 <vTaskStartScheduler+0xac>
	__asm volatile
 800730c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007310:	f383 8811 	msr	BASEPRI, r3
 8007314:	f3bf 8f6f 	isb	sy
 8007318:	f3bf 8f4f 	dsb	sy
 800731c:	60fb      	str	r3, [r7, #12]
}
 800731e:	bf00      	nop
 8007320:	bf00      	nop
 8007322:	e7fd      	b.n	8007320 <vTaskStartScheduler+0xa8>
}
 8007324:	bf00      	nop
 8007326:	3718      	adds	r7, #24
 8007328:	46bd      	mov	sp, r7
 800732a:	bd80      	pop	{r7, pc}
 800732c:	08008f74 	.word	0x08008f74
 8007330:	08007825 	.word	0x08007825
 8007334:	20000590 	.word	0x20000590
 8007338:	2000046c 	.word	0x2000046c
 800733c:	20000100 	.word	0x20000100
 8007340:	2000058c 	.word	0x2000058c
 8007344:	20000578 	.word	0x20000578
 8007348:	20000570 	.word	0x20000570

0800734c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800734c:	b480      	push	{r7}
 800734e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007350:	4b04      	ldr	r3, [pc, #16]	@ (8007364 <vTaskSuspendAll+0x18>)
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	3301      	adds	r3, #1
 8007356:	4a03      	ldr	r2, [pc, #12]	@ (8007364 <vTaskSuspendAll+0x18>)
 8007358:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800735a:	bf00      	nop
 800735c:	46bd      	mov	sp, r7
 800735e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007362:	4770      	bx	lr
 8007364:	20000594 	.word	0x20000594

08007368 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b084      	sub	sp, #16
 800736c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800736e:	2300      	movs	r3, #0
 8007370:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007372:	2300      	movs	r3, #0
 8007374:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007376:	4b42      	ldr	r3, [pc, #264]	@ (8007480 <xTaskResumeAll+0x118>)
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d10b      	bne.n	8007396 <xTaskResumeAll+0x2e>
	__asm volatile
 800737e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007382:	f383 8811 	msr	BASEPRI, r3
 8007386:	f3bf 8f6f 	isb	sy
 800738a:	f3bf 8f4f 	dsb	sy
 800738e:	603b      	str	r3, [r7, #0]
}
 8007390:	bf00      	nop
 8007392:	bf00      	nop
 8007394:	e7fd      	b.n	8007392 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007396:	f000 fcef 	bl	8007d78 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800739a:	4b39      	ldr	r3, [pc, #228]	@ (8007480 <xTaskResumeAll+0x118>)
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	3b01      	subs	r3, #1
 80073a0:	4a37      	ldr	r2, [pc, #220]	@ (8007480 <xTaskResumeAll+0x118>)
 80073a2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80073a4:	4b36      	ldr	r3, [pc, #216]	@ (8007480 <xTaskResumeAll+0x118>)
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d161      	bne.n	8007470 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80073ac:	4b35      	ldr	r3, [pc, #212]	@ (8007484 <xTaskResumeAll+0x11c>)
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d05d      	beq.n	8007470 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80073b4:	e02e      	b.n	8007414 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80073b6:	4b34      	ldr	r3, [pc, #208]	@ (8007488 <xTaskResumeAll+0x120>)
 80073b8:	68db      	ldr	r3, [r3, #12]
 80073ba:	68db      	ldr	r3, [r3, #12]
 80073bc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	3318      	adds	r3, #24
 80073c2:	4618      	mov	r0, r3
 80073c4:	f7ff fd48 	bl	8006e58 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	3304      	adds	r3, #4
 80073cc:	4618      	mov	r0, r3
 80073ce:	f7ff fd43 	bl	8006e58 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073d6:	2201      	movs	r2, #1
 80073d8:	409a      	lsls	r2, r3
 80073da:	4b2c      	ldr	r3, [pc, #176]	@ (800748c <xTaskResumeAll+0x124>)
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	4313      	orrs	r3, r2
 80073e0:	4a2a      	ldr	r2, [pc, #168]	@ (800748c <xTaskResumeAll+0x124>)
 80073e2:	6013      	str	r3, [r2, #0]
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073e8:	4613      	mov	r3, r2
 80073ea:	009b      	lsls	r3, r3, #2
 80073ec:	4413      	add	r3, r2
 80073ee:	009b      	lsls	r3, r3, #2
 80073f0:	4a27      	ldr	r2, [pc, #156]	@ (8007490 <xTaskResumeAll+0x128>)
 80073f2:	441a      	add	r2, r3
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	3304      	adds	r3, #4
 80073f8:	4619      	mov	r1, r3
 80073fa:	4610      	mov	r0, r2
 80073fc:	f7ff fccf 	bl	8006d9e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007404:	4b23      	ldr	r3, [pc, #140]	@ (8007494 <xTaskResumeAll+0x12c>)
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800740a:	429a      	cmp	r2, r3
 800740c:	d302      	bcc.n	8007414 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800740e:	4b22      	ldr	r3, [pc, #136]	@ (8007498 <xTaskResumeAll+0x130>)
 8007410:	2201      	movs	r2, #1
 8007412:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007414:	4b1c      	ldr	r3, [pc, #112]	@ (8007488 <xTaskResumeAll+0x120>)
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d1cc      	bne.n	80073b6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d001      	beq.n	8007426 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007422:	f000 fabb 	bl	800799c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007426:	4b1d      	ldr	r3, [pc, #116]	@ (800749c <xTaskResumeAll+0x134>)
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d010      	beq.n	8007454 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007432:	f000 f837 	bl	80074a4 <xTaskIncrementTick>
 8007436:	4603      	mov	r3, r0
 8007438:	2b00      	cmp	r3, #0
 800743a:	d002      	beq.n	8007442 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800743c:	4b16      	ldr	r3, [pc, #88]	@ (8007498 <xTaskResumeAll+0x130>)
 800743e:	2201      	movs	r2, #1
 8007440:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	3b01      	subs	r3, #1
 8007446:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d1f1      	bne.n	8007432 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800744e:	4b13      	ldr	r3, [pc, #76]	@ (800749c <xTaskResumeAll+0x134>)
 8007450:	2200      	movs	r2, #0
 8007452:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007454:	4b10      	ldr	r3, [pc, #64]	@ (8007498 <xTaskResumeAll+0x130>)
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d009      	beq.n	8007470 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800745c:	2301      	movs	r3, #1
 800745e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007460:	4b0f      	ldr	r3, [pc, #60]	@ (80074a0 <xTaskResumeAll+0x138>)
 8007462:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007466:	601a      	str	r2, [r3, #0]
 8007468:	f3bf 8f4f 	dsb	sy
 800746c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007470:	f000 fcb4 	bl	8007ddc <vPortExitCritical>

	return xAlreadyYielded;
 8007474:	68bb      	ldr	r3, [r7, #8]
}
 8007476:	4618      	mov	r0, r3
 8007478:	3710      	adds	r7, #16
 800747a:	46bd      	mov	sp, r7
 800747c:	bd80      	pop	{r7, pc}
 800747e:	bf00      	nop
 8007480:	20000594 	.word	0x20000594
 8007484:	2000056c 	.word	0x2000056c
 8007488:	2000052c 	.word	0x2000052c
 800748c:	20000574 	.word	0x20000574
 8007490:	20000470 	.word	0x20000470
 8007494:	2000046c 	.word	0x2000046c
 8007498:	20000580 	.word	0x20000580
 800749c:	2000057c 	.word	0x2000057c
 80074a0:	e000ed04 	.word	0xe000ed04

080074a4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b086      	sub	sp, #24
 80074a8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80074aa:	2300      	movs	r3, #0
 80074ac:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80074ae:	4b4f      	ldr	r3, [pc, #316]	@ (80075ec <xTaskIncrementTick+0x148>)
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	f040 808f 	bne.w	80075d6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80074b8:	4b4d      	ldr	r3, [pc, #308]	@ (80075f0 <xTaskIncrementTick+0x14c>)
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	3301      	adds	r3, #1
 80074be:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80074c0:	4a4b      	ldr	r2, [pc, #300]	@ (80075f0 <xTaskIncrementTick+0x14c>)
 80074c2:	693b      	ldr	r3, [r7, #16]
 80074c4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80074c6:	693b      	ldr	r3, [r7, #16]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d121      	bne.n	8007510 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80074cc:	4b49      	ldr	r3, [pc, #292]	@ (80075f4 <xTaskIncrementTick+0x150>)
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d00b      	beq.n	80074ee <xTaskIncrementTick+0x4a>
	__asm volatile
 80074d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074da:	f383 8811 	msr	BASEPRI, r3
 80074de:	f3bf 8f6f 	isb	sy
 80074e2:	f3bf 8f4f 	dsb	sy
 80074e6:	603b      	str	r3, [r7, #0]
}
 80074e8:	bf00      	nop
 80074ea:	bf00      	nop
 80074ec:	e7fd      	b.n	80074ea <xTaskIncrementTick+0x46>
 80074ee:	4b41      	ldr	r3, [pc, #260]	@ (80075f4 <xTaskIncrementTick+0x150>)
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	60fb      	str	r3, [r7, #12]
 80074f4:	4b40      	ldr	r3, [pc, #256]	@ (80075f8 <xTaskIncrementTick+0x154>)
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	4a3e      	ldr	r2, [pc, #248]	@ (80075f4 <xTaskIncrementTick+0x150>)
 80074fa:	6013      	str	r3, [r2, #0]
 80074fc:	4a3e      	ldr	r2, [pc, #248]	@ (80075f8 <xTaskIncrementTick+0x154>)
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	6013      	str	r3, [r2, #0]
 8007502:	4b3e      	ldr	r3, [pc, #248]	@ (80075fc <xTaskIncrementTick+0x158>)
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	3301      	adds	r3, #1
 8007508:	4a3c      	ldr	r2, [pc, #240]	@ (80075fc <xTaskIncrementTick+0x158>)
 800750a:	6013      	str	r3, [r2, #0]
 800750c:	f000 fa46 	bl	800799c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007510:	4b3b      	ldr	r3, [pc, #236]	@ (8007600 <xTaskIncrementTick+0x15c>)
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	693a      	ldr	r2, [r7, #16]
 8007516:	429a      	cmp	r2, r3
 8007518:	d348      	bcc.n	80075ac <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800751a:	4b36      	ldr	r3, [pc, #216]	@ (80075f4 <xTaskIncrementTick+0x150>)
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d104      	bne.n	800752e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007524:	4b36      	ldr	r3, [pc, #216]	@ (8007600 <xTaskIncrementTick+0x15c>)
 8007526:	f04f 32ff 	mov.w	r2, #4294967295
 800752a:	601a      	str	r2, [r3, #0]
					break;
 800752c:	e03e      	b.n	80075ac <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800752e:	4b31      	ldr	r3, [pc, #196]	@ (80075f4 <xTaskIncrementTick+0x150>)
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	68db      	ldr	r3, [r3, #12]
 8007534:	68db      	ldr	r3, [r3, #12]
 8007536:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007538:	68bb      	ldr	r3, [r7, #8]
 800753a:	685b      	ldr	r3, [r3, #4]
 800753c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800753e:	693a      	ldr	r2, [r7, #16]
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	429a      	cmp	r2, r3
 8007544:	d203      	bcs.n	800754e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007546:	4a2e      	ldr	r2, [pc, #184]	@ (8007600 <xTaskIncrementTick+0x15c>)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800754c:	e02e      	b.n	80075ac <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800754e:	68bb      	ldr	r3, [r7, #8]
 8007550:	3304      	adds	r3, #4
 8007552:	4618      	mov	r0, r3
 8007554:	f7ff fc80 	bl	8006e58 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007558:	68bb      	ldr	r3, [r7, #8]
 800755a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800755c:	2b00      	cmp	r3, #0
 800755e:	d004      	beq.n	800756a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007560:	68bb      	ldr	r3, [r7, #8]
 8007562:	3318      	adds	r3, #24
 8007564:	4618      	mov	r0, r3
 8007566:	f7ff fc77 	bl	8006e58 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800756a:	68bb      	ldr	r3, [r7, #8]
 800756c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800756e:	2201      	movs	r2, #1
 8007570:	409a      	lsls	r2, r3
 8007572:	4b24      	ldr	r3, [pc, #144]	@ (8007604 <xTaskIncrementTick+0x160>)
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	4313      	orrs	r3, r2
 8007578:	4a22      	ldr	r2, [pc, #136]	@ (8007604 <xTaskIncrementTick+0x160>)
 800757a:	6013      	str	r3, [r2, #0]
 800757c:	68bb      	ldr	r3, [r7, #8]
 800757e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007580:	4613      	mov	r3, r2
 8007582:	009b      	lsls	r3, r3, #2
 8007584:	4413      	add	r3, r2
 8007586:	009b      	lsls	r3, r3, #2
 8007588:	4a1f      	ldr	r2, [pc, #124]	@ (8007608 <xTaskIncrementTick+0x164>)
 800758a:	441a      	add	r2, r3
 800758c:	68bb      	ldr	r3, [r7, #8]
 800758e:	3304      	adds	r3, #4
 8007590:	4619      	mov	r1, r3
 8007592:	4610      	mov	r0, r2
 8007594:	f7ff fc03 	bl	8006d9e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007598:	68bb      	ldr	r3, [r7, #8]
 800759a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800759c:	4b1b      	ldr	r3, [pc, #108]	@ (800760c <xTaskIncrementTick+0x168>)
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075a2:	429a      	cmp	r2, r3
 80075a4:	d3b9      	bcc.n	800751a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80075a6:	2301      	movs	r3, #1
 80075a8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80075aa:	e7b6      	b.n	800751a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80075ac:	4b17      	ldr	r3, [pc, #92]	@ (800760c <xTaskIncrementTick+0x168>)
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075b2:	4915      	ldr	r1, [pc, #84]	@ (8007608 <xTaskIncrementTick+0x164>)
 80075b4:	4613      	mov	r3, r2
 80075b6:	009b      	lsls	r3, r3, #2
 80075b8:	4413      	add	r3, r2
 80075ba:	009b      	lsls	r3, r3, #2
 80075bc:	440b      	add	r3, r1
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	2b01      	cmp	r3, #1
 80075c2:	d901      	bls.n	80075c8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80075c4:	2301      	movs	r3, #1
 80075c6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80075c8:	4b11      	ldr	r3, [pc, #68]	@ (8007610 <xTaskIncrementTick+0x16c>)
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d007      	beq.n	80075e0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80075d0:	2301      	movs	r3, #1
 80075d2:	617b      	str	r3, [r7, #20]
 80075d4:	e004      	b.n	80075e0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80075d6:	4b0f      	ldr	r3, [pc, #60]	@ (8007614 <xTaskIncrementTick+0x170>)
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	3301      	adds	r3, #1
 80075dc:	4a0d      	ldr	r2, [pc, #52]	@ (8007614 <xTaskIncrementTick+0x170>)
 80075de:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80075e0:	697b      	ldr	r3, [r7, #20]
}
 80075e2:	4618      	mov	r0, r3
 80075e4:	3718      	adds	r7, #24
 80075e6:	46bd      	mov	sp, r7
 80075e8:	bd80      	pop	{r7, pc}
 80075ea:	bf00      	nop
 80075ec:	20000594 	.word	0x20000594
 80075f0:	20000570 	.word	0x20000570
 80075f4:	20000524 	.word	0x20000524
 80075f8:	20000528 	.word	0x20000528
 80075fc:	20000584 	.word	0x20000584
 8007600:	2000058c 	.word	0x2000058c
 8007604:	20000574 	.word	0x20000574
 8007608:	20000470 	.word	0x20000470
 800760c:	2000046c 	.word	0x2000046c
 8007610:	20000580 	.word	0x20000580
 8007614:	2000057c 	.word	0x2000057c

08007618 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007618:	b480      	push	{r7}
 800761a:	b087      	sub	sp, #28
 800761c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800761e:	4b2a      	ldr	r3, [pc, #168]	@ (80076c8 <vTaskSwitchContext+0xb0>)
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d003      	beq.n	800762e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007626:	4b29      	ldr	r3, [pc, #164]	@ (80076cc <vTaskSwitchContext+0xb4>)
 8007628:	2201      	movs	r2, #1
 800762a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800762c:	e045      	b.n	80076ba <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 800762e:	4b27      	ldr	r3, [pc, #156]	@ (80076cc <vTaskSwitchContext+0xb4>)
 8007630:	2200      	movs	r2, #0
 8007632:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007634:	4b26      	ldr	r3, [pc, #152]	@ (80076d0 <vTaskSwitchContext+0xb8>)
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	fab3 f383 	clz	r3, r3
 8007640:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007642:	7afb      	ldrb	r3, [r7, #11]
 8007644:	f1c3 031f 	rsb	r3, r3, #31
 8007648:	617b      	str	r3, [r7, #20]
 800764a:	4922      	ldr	r1, [pc, #136]	@ (80076d4 <vTaskSwitchContext+0xbc>)
 800764c:	697a      	ldr	r2, [r7, #20]
 800764e:	4613      	mov	r3, r2
 8007650:	009b      	lsls	r3, r3, #2
 8007652:	4413      	add	r3, r2
 8007654:	009b      	lsls	r3, r3, #2
 8007656:	440b      	add	r3, r1
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d10b      	bne.n	8007676 <vTaskSwitchContext+0x5e>
	__asm volatile
 800765e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007662:	f383 8811 	msr	BASEPRI, r3
 8007666:	f3bf 8f6f 	isb	sy
 800766a:	f3bf 8f4f 	dsb	sy
 800766e:	607b      	str	r3, [r7, #4]
}
 8007670:	bf00      	nop
 8007672:	bf00      	nop
 8007674:	e7fd      	b.n	8007672 <vTaskSwitchContext+0x5a>
 8007676:	697a      	ldr	r2, [r7, #20]
 8007678:	4613      	mov	r3, r2
 800767a:	009b      	lsls	r3, r3, #2
 800767c:	4413      	add	r3, r2
 800767e:	009b      	lsls	r3, r3, #2
 8007680:	4a14      	ldr	r2, [pc, #80]	@ (80076d4 <vTaskSwitchContext+0xbc>)
 8007682:	4413      	add	r3, r2
 8007684:	613b      	str	r3, [r7, #16]
 8007686:	693b      	ldr	r3, [r7, #16]
 8007688:	685b      	ldr	r3, [r3, #4]
 800768a:	685a      	ldr	r2, [r3, #4]
 800768c:	693b      	ldr	r3, [r7, #16]
 800768e:	605a      	str	r2, [r3, #4]
 8007690:	693b      	ldr	r3, [r7, #16]
 8007692:	685a      	ldr	r2, [r3, #4]
 8007694:	693b      	ldr	r3, [r7, #16]
 8007696:	3308      	adds	r3, #8
 8007698:	429a      	cmp	r2, r3
 800769a:	d104      	bne.n	80076a6 <vTaskSwitchContext+0x8e>
 800769c:	693b      	ldr	r3, [r7, #16]
 800769e:	685b      	ldr	r3, [r3, #4]
 80076a0:	685a      	ldr	r2, [r3, #4]
 80076a2:	693b      	ldr	r3, [r7, #16]
 80076a4:	605a      	str	r2, [r3, #4]
 80076a6:	693b      	ldr	r3, [r7, #16]
 80076a8:	685b      	ldr	r3, [r3, #4]
 80076aa:	68db      	ldr	r3, [r3, #12]
 80076ac:	4a0a      	ldr	r2, [pc, #40]	@ (80076d8 <vTaskSwitchContext+0xc0>)
 80076ae:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80076b0:	4b09      	ldr	r3, [pc, #36]	@ (80076d8 <vTaskSwitchContext+0xc0>)
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	334c      	adds	r3, #76	@ 0x4c
 80076b6:	4a09      	ldr	r2, [pc, #36]	@ (80076dc <vTaskSwitchContext+0xc4>)
 80076b8:	6013      	str	r3, [r2, #0]
}
 80076ba:	bf00      	nop
 80076bc:	371c      	adds	r7, #28
 80076be:	46bd      	mov	sp, r7
 80076c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c4:	4770      	bx	lr
 80076c6:	bf00      	nop
 80076c8:	20000594 	.word	0x20000594
 80076cc:	20000580 	.word	0x20000580
 80076d0:	20000574 	.word	0x20000574
 80076d4:	20000470 	.word	0x20000470
 80076d8:	2000046c 	.word	0x2000046c
 80076dc:	20000100 	.word	0x20000100

080076e0 <vTaskPlaceOnUnorderedEventList>:
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b086      	sub	sp, #24
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	60f8      	str	r0, [r7, #12]
 80076e8:	60b9      	str	r1, [r7, #8]
 80076ea:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d10b      	bne.n	800770a <vTaskPlaceOnUnorderedEventList+0x2a>
	__asm volatile
 80076f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076f6:	f383 8811 	msr	BASEPRI, r3
 80076fa:	f3bf 8f6f 	isb	sy
 80076fe:	f3bf 8f4f 	dsb	sy
 8007702:	617b      	str	r3, [r7, #20]
}
 8007704:	bf00      	nop
 8007706:	bf00      	nop
 8007708:	e7fd      	b.n	8007706 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 800770a:	4b12      	ldr	r3, [pc, #72]	@ (8007754 <vTaskPlaceOnUnorderedEventList+0x74>)
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d10b      	bne.n	800772a <vTaskPlaceOnUnorderedEventList+0x4a>
	__asm volatile
 8007712:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007716:	f383 8811 	msr	BASEPRI, r3
 800771a:	f3bf 8f6f 	isb	sy
 800771e:	f3bf 8f4f 	dsb	sy
 8007722:	613b      	str	r3, [r7, #16]
}
 8007724:	bf00      	nop
 8007726:	bf00      	nop
 8007728:	e7fd      	b.n	8007726 <vTaskPlaceOnUnorderedEventList+0x46>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800772a:	4b0b      	ldr	r3, [pc, #44]	@ (8007758 <vTaskPlaceOnUnorderedEventList+0x78>)
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	68ba      	ldr	r2, [r7, #8]
 8007730:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8007734:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007736:	4b08      	ldr	r3, [pc, #32]	@ (8007758 <vTaskPlaceOnUnorderedEventList+0x78>)
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	3318      	adds	r3, #24
 800773c:	4619      	mov	r1, r3
 800773e:	68f8      	ldr	r0, [r7, #12]
 8007740:	f7ff fb2d 	bl	8006d9e <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007744:	2101      	movs	r1, #1
 8007746:	6878      	ldr	r0, [r7, #4]
 8007748:	f000 f97e 	bl	8007a48 <prvAddCurrentTaskToDelayedList>
}
 800774c:	bf00      	nop
 800774e:	3718      	adds	r7, #24
 8007750:	46bd      	mov	sp, r7
 8007752:	bd80      	pop	{r7, pc}
 8007754:	20000594 	.word	0x20000594
 8007758:	2000046c 	.word	0x2000046c

0800775c <vTaskRemoveFromUnorderedEventList>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 800775c:	b580      	push	{r7, lr}
 800775e:	b086      	sub	sp, #24
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
 8007764:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8007766:	4b2a      	ldr	r3, [pc, #168]	@ (8007810 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d10b      	bne.n	8007786 <vTaskRemoveFromUnorderedEventList+0x2a>
	__asm volatile
 800776e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007772:	f383 8811 	msr	BASEPRI, r3
 8007776:	f3bf 8f6f 	isb	sy
 800777a:	f3bf 8f4f 	dsb	sy
 800777e:	613b      	str	r3, [r7, #16]
}
 8007780:	bf00      	nop
 8007782:	bf00      	nop
 8007784:	e7fd      	b.n	8007782 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	68db      	ldr	r3, [r3, #12]
 8007794:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8007796:	697b      	ldr	r3, [r7, #20]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d10b      	bne.n	80077b4 <vTaskRemoveFromUnorderedEventList+0x58>
	__asm volatile
 800779c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077a0:	f383 8811 	msr	BASEPRI, r3
 80077a4:	f3bf 8f6f 	isb	sy
 80077a8:	f3bf 8f4f 	dsb	sy
 80077ac:	60fb      	str	r3, [r7, #12]
}
 80077ae:	bf00      	nop
 80077b0:	bf00      	nop
 80077b2:	e7fd      	b.n	80077b0 <vTaskRemoveFromUnorderedEventList+0x54>
	( void ) uxListRemove( pxEventListItem );
 80077b4:	6878      	ldr	r0, [r7, #4]
 80077b6:	f7ff fb4f 	bl	8006e58 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80077ba:	697b      	ldr	r3, [r7, #20]
 80077bc:	3304      	adds	r3, #4
 80077be:	4618      	mov	r0, r3
 80077c0:	f7ff fb4a 	bl	8006e58 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 80077c4:	697b      	ldr	r3, [r7, #20]
 80077c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077c8:	2201      	movs	r2, #1
 80077ca:	409a      	lsls	r2, r3
 80077cc:	4b11      	ldr	r3, [pc, #68]	@ (8007814 <vTaskRemoveFromUnorderedEventList+0xb8>)
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	4313      	orrs	r3, r2
 80077d2:	4a10      	ldr	r2, [pc, #64]	@ (8007814 <vTaskRemoveFromUnorderedEventList+0xb8>)
 80077d4:	6013      	str	r3, [r2, #0]
 80077d6:	697b      	ldr	r3, [r7, #20]
 80077d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077da:	4613      	mov	r3, r2
 80077dc:	009b      	lsls	r3, r3, #2
 80077de:	4413      	add	r3, r2
 80077e0:	009b      	lsls	r3, r3, #2
 80077e2:	4a0d      	ldr	r2, [pc, #52]	@ (8007818 <vTaskRemoveFromUnorderedEventList+0xbc>)
 80077e4:	441a      	add	r2, r3
 80077e6:	697b      	ldr	r3, [r7, #20]
 80077e8:	3304      	adds	r3, #4
 80077ea:	4619      	mov	r1, r3
 80077ec:	4610      	mov	r0, r2
 80077ee:	f7ff fad6 	bl	8006d9e <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80077f2:	697b      	ldr	r3, [r7, #20]
 80077f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077f6:	4b09      	ldr	r3, [pc, #36]	@ (800781c <vTaskRemoveFromUnorderedEventList+0xc0>)
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077fc:	429a      	cmp	r2, r3
 80077fe:	d902      	bls.n	8007806 <vTaskRemoveFromUnorderedEventList+0xaa>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8007800:	4b07      	ldr	r3, [pc, #28]	@ (8007820 <vTaskRemoveFromUnorderedEventList+0xc4>)
 8007802:	2201      	movs	r2, #1
 8007804:	601a      	str	r2, [r3, #0]
	}
}
 8007806:	bf00      	nop
 8007808:	3718      	adds	r7, #24
 800780a:	46bd      	mov	sp, r7
 800780c:	bd80      	pop	{r7, pc}
 800780e:	bf00      	nop
 8007810:	20000594 	.word	0x20000594
 8007814:	20000574 	.word	0x20000574
 8007818:	20000470 	.word	0x20000470
 800781c:	2000046c 	.word	0x2000046c
 8007820:	20000580 	.word	0x20000580

08007824 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007824:	b580      	push	{r7, lr}
 8007826:	b082      	sub	sp, #8
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800782c:	f000 f852 	bl	80078d4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007830:	4b06      	ldr	r3, [pc, #24]	@ (800784c <prvIdleTask+0x28>)
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	2b01      	cmp	r3, #1
 8007836:	d9f9      	bls.n	800782c <prvIdleTask+0x8>
			{
				taskYIELD();
 8007838:	4b05      	ldr	r3, [pc, #20]	@ (8007850 <prvIdleTask+0x2c>)
 800783a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800783e:	601a      	str	r2, [r3, #0]
 8007840:	f3bf 8f4f 	dsb	sy
 8007844:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007848:	e7f0      	b.n	800782c <prvIdleTask+0x8>
 800784a:	bf00      	nop
 800784c:	20000470 	.word	0x20000470
 8007850:	e000ed04 	.word	0xe000ed04

08007854 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007854:	b580      	push	{r7, lr}
 8007856:	b082      	sub	sp, #8
 8007858:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800785a:	2300      	movs	r3, #0
 800785c:	607b      	str	r3, [r7, #4]
 800785e:	e00c      	b.n	800787a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007860:	687a      	ldr	r2, [r7, #4]
 8007862:	4613      	mov	r3, r2
 8007864:	009b      	lsls	r3, r3, #2
 8007866:	4413      	add	r3, r2
 8007868:	009b      	lsls	r3, r3, #2
 800786a:	4a12      	ldr	r2, [pc, #72]	@ (80078b4 <prvInitialiseTaskLists+0x60>)
 800786c:	4413      	add	r3, r2
 800786e:	4618      	mov	r0, r3
 8007870:	f7ff fa68 	bl	8006d44 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	3301      	adds	r3, #1
 8007878:	607b      	str	r3, [r7, #4]
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	2b06      	cmp	r3, #6
 800787e:	d9ef      	bls.n	8007860 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007880:	480d      	ldr	r0, [pc, #52]	@ (80078b8 <prvInitialiseTaskLists+0x64>)
 8007882:	f7ff fa5f 	bl	8006d44 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007886:	480d      	ldr	r0, [pc, #52]	@ (80078bc <prvInitialiseTaskLists+0x68>)
 8007888:	f7ff fa5c 	bl	8006d44 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800788c:	480c      	ldr	r0, [pc, #48]	@ (80078c0 <prvInitialiseTaskLists+0x6c>)
 800788e:	f7ff fa59 	bl	8006d44 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007892:	480c      	ldr	r0, [pc, #48]	@ (80078c4 <prvInitialiseTaskLists+0x70>)
 8007894:	f7ff fa56 	bl	8006d44 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007898:	480b      	ldr	r0, [pc, #44]	@ (80078c8 <prvInitialiseTaskLists+0x74>)
 800789a:	f7ff fa53 	bl	8006d44 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800789e:	4b0b      	ldr	r3, [pc, #44]	@ (80078cc <prvInitialiseTaskLists+0x78>)
 80078a0:	4a05      	ldr	r2, [pc, #20]	@ (80078b8 <prvInitialiseTaskLists+0x64>)
 80078a2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80078a4:	4b0a      	ldr	r3, [pc, #40]	@ (80078d0 <prvInitialiseTaskLists+0x7c>)
 80078a6:	4a05      	ldr	r2, [pc, #20]	@ (80078bc <prvInitialiseTaskLists+0x68>)
 80078a8:	601a      	str	r2, [r3, #0]
}
 80078aa:	bf00      	nop
 80078ac:	3708      	adds	r7, #8
 80078ae:	46bd      	mov	sp, r7
 80078b0:	bd80      	pop	{r7, pc}
 80078b2:	bf00      	nop
 80078b4:	20000470 	.word	0x20000470
 80078b8:	200004fc 	.word	0x200004fc
 80078bc:	20000510 	.word	0x20000510
 80078c0:	2000052c 	.word	0x2000052c
 80078c4:	20000540 	.word	0x20000540
 80078c8:	20000558 	.word	0x20000558
 80078cc:	20000524 	.word	0x20000524
 80078d0:	20000528 	.word	0x20000528

080078d4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b082      	sub	sp, #8
 80078d8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80078da:	e019      	b.n	8007910 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80078dc:	f000 fa4c 	bl	8007d78 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80078e0:	4b10      	ldr	r3, [pc, #64]	@ (8007924 <prvCheckTasksWaitingTermination+0x50>)
 80078e2:	68db      	ldr	r3, [r3, #12]
 80078e4:	68db      	ldr	r3, [r3, #12]
 80078e6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	3304      	adds	r3, #4
 80078ec:	4618      	mov	r0, r3
 80078ee:	f7ff fab3 	bl	8006e58 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80078f2:	4b0d      	ldr	r3, [pc, #52]	@ (8007928 <prvCheckTasksWaitingTermination+0x54>)
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	3b01      	subs	r3, #1
 80078f8:	4a0b      	ldr	r2, [pc, #44]	@ (8007928 <prvCheckTasksWaitingTermination+0x54>)
 80078fa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80078fc:	4b0b      	ldr	r3, [pc, #44]	@ (800792c <prvCheckTasksWaitingTermination+0x58>)
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	3b01      	subs	r3, #1
 8007902:	4a0a      	ldr	r2, [pc, #40]	@ (800792c <prvCheckTasksWaitingTermination+0x58>)
 8007904:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007906:	f000 fa69 	bl	8007ddc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800790a:	6878      	ldr	r0, [r7, #4]
 800790c:	f000 f810 	bl	8007930 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007910:	4b06      	ldr	r3, [pc, #24]	@ (800792c <prvCheckTasksWaitingTermination+0x58>)
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d1e1      	bne.n	80078dc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007918:	bf00      	nop
 800791a:	bf00      	nop
 800791c:	3708      	adds	r7, #8
 800791e:	46bd      	mov	sp, r7
 8007920:	bd80      	pop	{r7, pc}
 8007922:	bf00      	nop
 8007924:	20000540 	.word	0x20000540
 8007928:	2000056c 	.word	0x2000056c
 800792c:	20000554 	.word	0x20000554

08007930 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007930:	b580      	push	{r7, lr}
 8007932:	b084      	sub	sp, #16
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	334c      	adds	r3, #76	@ 0x4c
 800793c:	4618      	mov	r0, r3
 800793e:	f001 fa0b 	bl	8008d58 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8007948:	2b00      	cmp	r3, #0
 800794a:	d108      	bne.n	800795e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007950:	4618      	mov	r0, r3
 8007952:	f000 fbbf 	bl	80080d4 <vPortFree>
				vPortFree( pxTCB );
 8007956:	6878      	ldr	r0, [r7, #4]
 8007958:	f000 fbbc 	bl	80080d4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800795c:	e019      	b.n	8007992 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8007964:	2b01      	cmp	r3, #1
 8007966:	d103      	bne.n	8007970 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007968:	6878      	ldr	r0, [r7, #4]
 800796a:	f000 fbb3 	bl	80080d4 <vPortFree>
	}
 800796e:	e010      	b.n	8007992 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8007976:	2b02      	cmp	r3, #2
 8007978:	d00b      	beq.n	8007992 <prvDeleteTCB+0x62>
	__asm volatile
 800797a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800797e:	f383 8811 	msr	BASEPRI, r3
 8007982:	f3bf 8f6f 	isb	sy
 8007986:	f3bf 8f4f 	dsb	sy
 800798a:	60fb      	str	r3, [r7, #12]
}
 800798c:	bf00      	nop
 800798e:	bf00      	nop
 8007990:	e7fd      	b.n	800798e <prvDeleteTCB+0x5e>
	}
 8007992:	bf00      	nop
 8007994:	3710      	adds	r7, #16
 8007996:	46bd      	mov	sp, r7
 8007998:	bd80      	pop	{r7, pc}
	...

0800799c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800799c:	b480      	push	{r7}
 800799e:	b083      	sub	sp, #12
 80079a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80079a2:	4b0c      	ldr	r3, [pc, #48]	@ (80079d4 <prvResetNextTaskUnblockTime+0x38>)
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d104      	bne.n	80079b6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80079ac:	4b0a      	ldr	r3, [pc, #40]	@ (80079d8 <prvResetNextTaskUnblockTime+0x3c>)
 80079ae:	f04f 32ff 	mov.w	r2, #4294967295
 80079b2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80079b4:	e008      	b.n	80079c8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80079b6:	4b07      	ldr	r3, [pc, #28]	@ (80079d4 <prvResetNextTaskUnblockTime+0x38>)
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	68db      	ldr	r3, [r3, #12]
 80079bc:	68db      	ldr	r3, [r3, #12]
 80079be:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	685b      	ldr	r3, [r3, #4]
 80079c4:	4a04      	ldr	r2, [pc, #16]	@ (80079d8 <prvResetNextTaskUnblockTime+0x3c>)
 80079c6:	6013      	str	r3, [r2, #0]
}
 80079c8:	bf00      	nop
 80079ca:	370c      	adds	r7, #12
 80079cc:	46bd      	mov	sp, r7
 80079ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d2:	4770      	bx	lr
 80079d4:	20000524 	.word	0x20000524
 80079d8:	2000058c 	.word	0x2000058c

080079dc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80079dc:	b480      	push	{r7}
 80079de:	b083      	sub	sp, #12
 80079e0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80079e2:	4b0b      	ldr	r3, [pc, #44]	@ (8007a10 <xTaskGetSchedulerState+0x34>)
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d102      	bne.n	80079f0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80079ea:	2301      	movs	r3, #1
 80079ec:	607b      	str	r3, [r7, #4]
 80079ee:	e008      	b.n	8007a02 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80079f0:	4b08      	ldr	r3, [pc, #32]	@ (8007a14 <xTaskGetSchedulerState+0x38>)
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d102      	bne.n	80079fe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80079f8:	2302      	movs	r3, #2
 80079fa:	607b      	str	r3, [r7, #4]
 80079fc:	e001      	b.n	8007a02 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80079fe:	2300      	movs	r3, #0
 8007a00:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007a02:	687b      	ldr	r3, [r7, #4]
	}
 8007a04:	4618      	mov	r0, r3
 8007a06:	370c      	adds	r7, #12
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0e:	4770      	bx	lr
 8007a10:	20000578 	.word	0x20000578
 8007a14:	20000594 	.word	0x20000594

08007a18 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8007a18:	b480      	push	{r7}
 8007a1a:	b083      	sub	sp, #12
 8007a1c:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8007a1e:	4b09      	ldr	r3, [pc, #36]	@ (8007a44 <uxTaskResetEventItemValue+0x2c>)
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	699b      	ldr	r3, [r3, #24]
 8007a24:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a26:	4b07      	ldr	r3, [pc, #28]	@ (8007a44 <uxTaskResetEventItemValue+0x2c>)
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a2c:	4b05      	ldr	r3, [pc, #20]	@ (8007a44 <uxTaskResetEventItemValue+0x2c>)
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f1c2 0207 	rsb	r2, r2, #7
 8007a34:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8007a36:	687b      	ldr	r3, [r7, #4]
}
 8007a38:	4618      	mov	r0, r3
 8007a3a:	370c      	adds	r7, #12
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a42:	4770      	bx	lr
 8007a44:	2000046c 	.word	0x2000046c

08007a48 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b084      	sub	sp, #16
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
 8007a50:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007a52:	4b29      	ldr	r3, [pc, #164]	@ (8007af8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007a58:	4b28      	ldr	r3, [pc, #160]	@ (8007afc <prvAddCurrentTaskToDelayedList+0xb4>)
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	3304      	adds	r3, #4
 8007a5e:	4618      	mov	r0, r3
 8007a60:	f7ff f9fa 	bl	8006e58 <uxListRemove>
 8007a64:	4603      	mov	r3, r0
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d10b      	bne.n	8007a82 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007a6a:	4b24      	ldr	r3, [pc, #144]	@ (8007afc <prvAddCurrentTaskToDelayedList+0xb4>)
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a70:	2201      	movs	r2, #1
 8007a72:	fa02 f303 	lsl.w	r3, r2, r3
 8007a76:	43da      	mvns	r2, r3
 8007a78:	4b21      	ldr	r3, [pc, #132]	@ (8007b00 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	4013      	ands	r3, r2
 8007a7e:	4a20      	ldr	r2, [pc, #128]	@ (8007b00 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007a80:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a88:	d10a      	bne.n	8007aa0 <prvAddCurrentTaskToDelayedList+0x58>
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d007      	beq.n	8007aa0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007a90:	4b1a      	ldr	r3, [pc, #104]	@ (8007afc <prvAddCurrentTaskToDelayedList+0xb4>)
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	3304      	adds	r3, #4
 8007a96:	4619      	mov	r1, r3
 8007a98:	481a      	ldr	r0, [pc, #104]	@ (8007b04 <prvAddCurrentTaskToDelayedList+0xbc>)
 8007a9a:	f7ff f980 	bl	8006d9e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007a9e:	e026      	b.n	8007aee <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007aa0:	68fa      	ldr	r2, [r7, #12]
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	4413      	add	r3, r2
 8007aa6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007aa8:	4b14      	ldr	r3, [pc, #80]	@ (8007afc <prvAddCurrentTaskToDelayedList+0xb4>)
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	68ba      	ldr	r2, [r7, #8]
 8007aae:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007ab0:	68ba      	ldr	r2, [r7, #8]
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	429a      	cmp	r2, r3
 8007ab6:	d209      	bcs.n	8007acc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007ab8:	4b13      	ldr	r3, [pc, #76]	@ (8007b08 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007aba:	681a      	ldr	r2, [r3, #0]
 8007abc:	4b0f      	ldr	r3, [pc, #60]	@ (8007afc <prvAddCurrentTaskToDelayedList+0xb4>)
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	3304      	adds	r3, #4
 8007ac2:	4619      	mov	r1, r3
 8007ac4:	4610      	mov	r0, r2
 8007ac6:	f7ff f98e 	bl	8006de6 <vListInsert>
}
 8007aca:	e010      	b.n	8007aee <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007acc:	4b0f      	ldr	r3, [pc, #60]	@ (8007b0c <prvAddCurrentTaskToDelayedList+0xc4>)
 8007ace:	681a      	ldr	r2, [r3, #0]
 8007ad0:	4b0a      	ldr	r3, [pc, #40]	@ (8007afc <prvAddCurrentTaskToDelayedList+0xb4>)
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	3304      	adds	r3, #4
 8007ad6:	4619      	mov	r1, r3
 8007ad8:	4610      	mov	r0, r2
 8007ada:	f7ff f984 	bl	8006de6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007ade:	4b0c      	ldr	r3, [pc, #48]	@ (8007b10 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	68ba      	ldr	r2, [r7, #8]
 8007ae4:	429a      	cmp	r2, r3
 8007ae6:	d202      	bcs.n	8007aee <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007ae8:	4a09      	ldr	r2, [pc, #36]	@ (8007b10 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007aea:	68bb      	ldr	r3, [r7, #8]
 8007aec:	6013      	str	r3, [r2, #0]
}
 8007aee:	bf00      	nop
 8007af0:	3710      	adds	r7, #16
 8007af2:	46bd      	mov	sp, r7
 8007af4:	bd80      	pop	{r7, pc}
 8007af6:	bf00      	nop
 8007af8:	20000570 	.word	0x20000570
 8007afc:	2000046c 	.word	0x2000046c
 8007b00:	20000574 	.word	0x20000574
 8007b04:	20000558 	.word	0x20000558
 8007b08:	20000528 	.word	0x20000528
 8007b0c:	20000524 	.word	0x20000524
 8007b10:	2000058c 	.word	0x2000058c

08007b14 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007b14:	b480      	push	{r7}
 8007b16:	b085      	sub	sp, #20
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	60f8      	str	r0, [r7, #12]
 8007b1c:	60b9      	str	r1, [r7, #8]
 8007b1e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	3b04      	subs	r3, #4
 8007b24:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007b2c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	3b04      	subs	r3, #4
 8007b32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007b34:	68bb      	ldr	r3, [r7, #8]
 8007b36:	f023 0201 	bic.w	r2, r3, #1
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	3b04      	subs	r3, #4
 8007b42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007b44:	4a0c      	ldr	r2, [pc, #48]	@ (8007b78 <pxPortInitialiseStack+0x64>)
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	3b14      	subs	r3, #20
 8007b4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007b50:	687a      	ldr	r2, [r7, #4]
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	3b04      	subs	r3, #4
 8007b5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	f06f 0202 	mvn.w	r2, #2
 8007b62:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	3b20      	subs	r3, #32
 8007b68:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
}
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	3714      	adds	r7, #20
 8007b70:	46bd      	mov	sp, r7
 8007b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b76:	4770      	bx	lr
 8007b78:	08007b7d 	.word	0x08007b7d

08007b7c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007b7c:	b480      	push	{r7}
 8007b7e:	b085      	sub	sp, #20
 8007b80:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007b82:	2300      	movs	r3, #0
 8007b84:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007b86:	4b13      	ldr	r3, [pc, #76]	@ (8007bd4 <prvTaskExitError+0x58>)
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b8e:	d00b      	beq.n	8007ba8 <prvTaskExitError+0x2c>
	__asm volatile
 8007b90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b94:	f383 8811 	msr	BASEPRI, r3
 8007b98:	f3bf 8f6f 	isb	sy
 8007b9c:	f3bf 8f4f 	dsb	sy
 8007ba0:	60fb      	str	r3, [r7, #12]
}
 8007ba2:	bf00      	nop
 8007ba4:	bf00      	nop
 8007ba6:	e7fd      	b.n	8007ba4 <prvTaskExitError+0x28>
	__asm volatile
 8007ba8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bac:	f383 8811 	msr	BASEPRI, r3
 8007bb0:	f3bf 8f6f 	isb	sy
 8007bb4:	f3bf 8f4f 	dsb	sy
 8007bb8:	60bb      	str	r3, [r7, #8]
}
 8007bba:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007bbc:	bf00      	nop
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d0fc      	beq.n	8007bbe <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007bc4:	bf00      	nop
 8007bc6:	bf00      	nop
 8007bc8:	3714      	adds	r7, #20
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd0:	4770      	bx	lr
 8007bd2:	bf00      	nop
 8007bd4:	20000098 	.word	0x20000098
	...

08007be0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007be0:	4b07      	ldr	r3, [pc, #28]	@ (8007c00 <pxCurrentTCBConst2>)
 8007be2:	6819      	ldr	r1, [r3, #0]
 8007be4:	6808      	ldr	r0, [r1, #0]
 8007be6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bea:	f380 8809 	msr	PSP, r0
 8007bee:	f3bf 8f6f 	isb	sy
 8007bf2:	f04f 0000 	mov.w	r0, #0
 8007bf6:	f380 8811 	msr	BASEPRI, r0
 8007bfa:	4770      	bx	lr
 8007bfc:	f3af 8000 	nop.w

08007c00 <pxCurrentTCBConst2>:
 8007c00:	2000046c 	.word	0x2000046c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007c04:	bf00      	nop
 8007c06:	bf00      	nop

08007c08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007c08:	4808      	ldr	r0, [pc, #32]	@ (8007c2c <prvPortStartFirstTask+0x24>)
 8007c0a:	6800      	ldr	r0, [r0, #0]
 8007c0c:	6800      	ldr	r0, [r0, #0]
 8007c0e:	f380 8808 	msr	MSP, r0
 8007c12:	f04f 0000 	mov.w	r0, #0
 8007c16:	f380 8814 	msr	CONTROL, r0
 8007c1a:	b662      	cpsie	i
 8007c1c:	b661      	cpsie	f
 8007c1e:	f3bf 8f4f 	dsb	sy
 8007c22:	f3bf 8f6f 	isb	sy
 8007c26:	df00      	svc	0
 8007c28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007c2a:	bf00      	nop
 8007c2c:	e000ed08 	.word	0xe000ed08

08007c30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007c30:	b580      	push	{r7, lr}
 8007c32:	b086      	sub	sp, #24
 8007c34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007c36:	4b47      	ldr	r3, [pc, #284]	@ (8007d54 <xPortStartScheduler+0x124>)
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	4a47      	ldr	r2, [pc, #284]	@ (8007d58 <xPortStartScheduler+0x128>)
 8007c3c:	4293      	cmp	r3, r2
 8007c3e:	d10b      	bne.n	8007c58 <xPortStartScheduler+0x28>
	__asm volatile
 8007c40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c44:	f383 8811 	msr	BASEPRI, r3
 8007c48:	f3bf 8f6f 	isb	sy
 8007c4c:	f3bf 8f4f 	dsb	sy
 8007c50:	613b      	str	r3, [r7, #16]
}
 8007c52:	bf00      	nop
 8007c54:	bf00      	nop
 8007c56:	e7fd      	b.n	8007c54 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007c58:	4b3e      	ldr	r3, [pc, #248]	@ (8007d54 <xPortStartScheduler+0x124>)
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	4a3f      	ldr	r2, [pc, #252]	@ (8007d5c <xPortStartScheduler+0x12c>)
 8007c5e:	4293      	cmp	r3, r2
 8007c60:	d10b      	bne.n	8007c7a <xPortStartScheduler+0x4a>
	__asm volatile
 8007c62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c66:	f383 8811 	msr	BASEPRI, r3
 8007c6a:	f3bf 8f6f 	isb	sy
 8007c6e:	f3bf 8f4f 	dsb	sy
 8007c72:	60fb      	str	r3, [r7, #12]
}
 8007c74:	bf00      	nop
 8007c76:	bf00      	nop
 8007c78:	e7fd      	b.n	8007c76 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007c7a:	4b39      	ldr	r3, [pc, #228]	@ (8007d60 <xPortStartScheduler+0x130>)
 8007c7c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007c7e:	697b      	ldr	r3, [r7, #20]
 8007c80:	781b      	ldrb	r3, [r3, #0]
 8007c82:	b2db      	uxtb	r3, r3
 8007c84:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007c86:	697b      	ldr	r3, [r7, #20]
 8007c88:	22ff      	movs	r2, #255	@ 0xff
 8007c8a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007c8c:	697b      	ldr	r3, [r7, #20]
 8007c8e:	781b      	ldrb	r3, [r3, #0]
 8007c90:	b2db      	uxtb	r3, r3
 8007c92:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007c94:	78fb      	ldrb	r3, [r7, #3]
 8007c96:	b2db      	uxtb	r3, r3
 8007c98:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007c9c:	b2da      	uxtb	r2, r3
 8007c9e:	4b31      	ldr	r3, [pc, #196]	@ (8007d64 <xPortStartScheduler+0x134>)
 8007ca0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007ca2:	4b31      	ldr	r3, [pc, #196]	@ (8007d68 <xPortStartScheduler+0x138>)
 8007ca4:	2207      	movs	r2, #7
 8007ca6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007ca8:	e009      	b.n	8007cbe <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8007caa:	4b2f      	ldr	r3, [pc, #188]	@ (8007d68 <xPortStartScheduler+0x138>)
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	3b01      	subs	r3, #1
 8007cb0:	4a2d      	ldr	r2, [pc, #180]	@ (8007d68 <xPortStartScheduler+0x138>)
 8007cb2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007cb4:	78fb      	ldrb	r3, [r7, #3]
 8007cb6:	b2db      	uxtb	r3, r3
 8007cb8:	005b      	lsls	r3, r3, #1
 8007cba:	b2db      	uxtb	r3, r3
 8007cbc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007cbe:	78fb      	ldrb	r3, [r7, #3]
 8007cc0:	b2db      	uxtb	r3, r3
 8007cc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007cc6:	2b80      	cmp	r3, #128	@ 0x80
 8007cc8:	d0ef      	beq.n	8007caa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007cca:	4b27      	ldr	r3, [pc, #156]	@ (8007d68 <xPortStartScheduler+0x138>)
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	f1c3 0307 	rsb	r3, r3, #7
 8007cd2:	2b04      	cmp	r3, #4
 8007cd4:	d00b      	beq.n	8007cee <xPortStartScheduler+0xbe>
	__asm volatile
 8007cd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cda:	f383 8811 	msr	BASEPRI, r3
 8007cde:	f3bf 8f6f 	isb	sy
 8007ce2:	f3bf 8f4f 	dsb	sy
 8007ce6:	60bb      	str	r3, [r7, #8]
}
 8007ce8:	bf00      	nop
 8007cea:	bf00      	nop
 8007cec:	e7fd      	b.n	8007cea <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007cee:	4b1e      	ldr	r3, [pc, #120]	@ (8007d68 <xPortStartScheduler+0x138>)
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	021b      	lsls	r3, r3, #8
 8007cf4:	4a1c      	ldr	r2, [pc, #112]	@ (8007d68 <xPortStartScheduler+0x138>)
 8007cf6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007cf8:	4b1b      	ldr	r3, [pc, #108]	@ (8007d68 <xPortStartScheduler+0x138>)
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007d00:	4a19      	ldr	r2, [pc, #100]	@ (8007d68 <xPortStartScheduler+0x138>)
 8007d02:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	b2da      	uxtb	r2, r3
 8007d08:	697b      	ldr	r3, [r7, #20]
 8007d0a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007d0c:	4b17      	ldr	r3, [pc, #92]	@ (8007d6c <xPortStartScheduler+0x13c>)
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	4a16      	ldr	r2, [pc, #88]	@ (8007d6c <xPortStartScheduler+0x13c>)
 8007d12:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007d16:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007d18:	4b14      	ldr	r3, [pc, #80]	@ (8007d6c <xPortStartScheduler+0x13c>)
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	4a13      	ldr	r2, [pc, #76]	@ (8007d6c <xPortStartScheduler+0x13c>)
 8007d1e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007d22:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007d24:	f000 f8da 	bl	8007edc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007d28:	4b11      	ldr	r3, [pc, #68]	@ (8007d70 <xPortStartScheduler+0x140>)
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007d2e:	f000 f8f9 	bl	8007f24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007d32:	4b10      	ldr	r3, [pc, #64]	@ (8007d74 <xPortStartScheduler+0x144>)
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	4a0f      	ldr	r2, [pc, #60]	@ (8007d74 <xPortStartScheduler+0x144>)
 8007d38:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8007d3c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007d3e:	f7ff ff63 	bl	8007c08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007d42:	f7ff fc69 	bl	8007618 <vTaskSwitchContext>
	prvTaskExitError();
 8007d46:	f7ff ff19 	bl	8007b7c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007d4a:	2300      	movs	r3, #0
}
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	3718      	adds	r7, #24
 8007d50:	46bd      	mov	sp, r7
 8007d52:	bd80      	pop	{r7, pc}
 8007d54:	e000ed00 	.word	0xe000ed00
 8007d58:	410fc271 	.word	0x410fc271
 8007d5c:	410fc270 	.word	0x410fc270
 8007d60:	e000e400 	.word	0xe000e400
 8007d64:	20000598 	.word	0x20000598
 8007d68:	2000059c 	.word	0x2000059c
 8007d6c:	e000ed20 	.word	0xe000ed20
 8007d70:	20000098 	.word	0x20000098
 8007d74:	e000ef34 	.word	0xe000ef34

08007d78 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007d78:	b480      	push	{r7}
 8007d7a:	b083      	sub	sp, #12
 8007d7c:	af00      	add	r7, sp, #0
	__asm volatile
 8007d7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d82:	f383 8811 	msr	BASEPRI, r3
 8007d86:	f3bf 8f6f 	isb	sy
 8007d8a:	f3bf 8f4f 	dsb	sy
 8007d8e:	607b      	str	r3, [r7, #4]
}
 8007d90:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007d92:	4b10      	ldr	r3, [pc, #64]	@ (8007dd4 <vPortEnterCritical+0x5c>)
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	3301      	adds	r3, #1
 8007d98:	4a0e      	ldr	r2, [pc, #56]	@ (8007dd4 <vPortEnterCritical+0x5c>)
 8007d9a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007d9c:	4b0d      	ldr	r3, [pc, #52]	@ (8007dd4 <vPortEnterCritical+0x5c>)
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	2b01      	cmp	r3, #1
 8007da2:	d110      	bne.n	8007dc6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007da4:	4b0c      	ldr	r3, [pc, #48]	@ (8007dd8 <vPortEnterCritical+0x60>)
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	b2db      	uxtb	r3, r3
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d00b      	beq.n	8007dc6 <vPortEnterCritical+0x4e>
	__asm volatile
 8007dae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007db2:	f383 8811 	msr	BASEPRI, r3
 8007db6:	f3bf 8f6f 	isb	sy
 8007dba:	f3bf 8f4f 	dsb	sy
 8007dbe:	603b      	str	r3, [r7, #0]
}
 8007dc0:	bf00      	nop
 8007dc2:	bf00      	nop
 8007dc4:	e7fd      	b.n	8007dc2 <vPortEnterCritical+0x4a>
	}
}
 8007dc6:	bf00      	nop
 8007dc8:	370c      	adds	r7, #12
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd0:	4770      	bx	lr
 8007dd2:	bf00      	nop
 8007dd4:	20000098 	.word	0x20000098
 8007dd8:	e000ed04 	.word	0xe000ed04

08007ddc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007ddc:	b480      	push	{r7}
 8007dde:	b083      	sub	sp, #12
 8007de0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007de2:	4b12      	ldr	r3, [pc, #72]	@ (8007e2c <vPortExitCritical+0x50>)
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d10b      	bne.n	8007e02 <vPortExitCritical+0x26>
	__asm volatile
 8007dea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dee:	f383 8811 	msr	BASEPRI, r3
 8007df2:	f3bf 8f6f 	isb	sy
 8007df6:	f3bf 8f4f 	dsb	sy
 8007dfa:	607b      	str	r3, [r7, #4]
}
 8007dfc:	bf00      	nop
 8007dfe:	bf00      	nop
 8007e00:	e7fd      	b.n	8007dfe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007e02:	4b0a      	ldr	r3, [pc, #40]	@ (8007e2c <vPortExitCritical+0x50>)
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	3b01      	subs	r3, #1
 8007e08:	4a08      	ldr	r2, [pc, #32]	@ (8007e2c <vPortExitCritical+0x50>)
 8007e0a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007e0c:	4b07      	ldr	r3, [pc, #28]	@ (8007e2c <vPortExitCritical+0x50>)
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d105      	bne.n	8007e20 <vPortExitCritical+0x44>
 8007e14:	2300      	movs	r3, #0
 8007e16:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007e1e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007e20:	bf00      	nop
 8007e22:	370c      	adds	r7, #12
 8007e24:	46bd      	mov	sp, r7
 8007e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2a:	4770      	bx	lr
 8007e2c:	20000098 	.word	0x20000098

08007e30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007e30:	f3ef 8009 	mrs	r0, PSP
 8007e34:	f3bf 8f6f 	isb	sy
 8007e38:	4b15      	ldr	r3, [pc, #84]	@ (8007e90 <pxCurrentTCBConst>)
 8007e3a:	681a      	ldr	r2, [r3, #0]
 8007e3c:	f01e 0f10 	tst.w	lr, #16
 8007e40:	bf08      	it	eq
 8007e42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007e46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e4a:	6010      	str	r0, [r2, #0]
 8007e4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007e50:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007e54:	f380 8811 	msr	BASEPRI, r0
 8007e58:	f3bf 8f4f 	dsb	sy
 8007e5c:	f3bf 8f6f 	isb	sy
 8007e60:	f7ff fbda 	bl	8007618 <vTaskSwitchContext>
 8007e64:	f04f 0000 	mov.w	r0, #0
 8007e68:	f380 8811 	msr	BASEPRI, r0
 8007e6c:	bc09      	pop	{r0, r3}
 8007e6e:	6819      	ldr	r1, [r3, #0]
 8007e70:	6808      	ldr	r0, [r1, #0]
 8007e72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e76:	f01e 0f10 	tst.w	lr, #16
 8007e7a:	bf08      	it	eq
 8007e7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007e80:	f380 8809 	msr	PSP, r0
 8007e84:	f3bf 8f6f 	isb	sy
 8007e88:	4770      	bx	lr
 8007e8a:	bf00      	nop
 8007e8c:	f3af 8000 	nop.w

08007e90 <pxCurrentTCBConst>:
 8007e90:	2000046c 	.word	0x2000046c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007e94:	bf00      	nop
 8007e96:	bf00      	nop

08007e98 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	b082      	sub	sp, #8
 8007e9c:	af00      	add	r7, sp, #0
	__asm volatile
 8007e9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ea2:	f383 8811 	msr	BASEPRI, r3
 8007ea6:	f3bf 8f6f 	isb	sy
 8007eaa:	f3bf 8f4f 	dsb	sy
 8007eae:	607b      	str	r3, [r7, #4]
}
 8007eb0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007eb2:	f7ff faf7 	bl	80074a4 <xTaskIncrementTick>
 8007eb6:	4603      	mov	r3, r0
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d003      	beq.n	8007ec4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007ebc:	4b06      	ldr	r3, [pc, #24]	@ (8007ed8 <SysTick_Handler+0x40>)
 8007ebe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007ec2:	601a      	str	r2, [r3, #0]
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	f383 8811 	msr	BASEPRI, r3
}
 8007ece:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007ed0:	bf00      	nop
 8007ed2:	3708      	adds	r7, #8
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	bd80      	pop	{r7, pc}
 8007ed8:	e000ed04 	.word	0xe000ed04

08007edc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007edc:	b480      	push	{r7}
 8007ede:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007ee0:	4b0b      	ldr	r3, [pc, #44]	@ (8007f10 <vPortSetupTimerInterrupt+0x34>)
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007ee6:	4b0b      	ldr	r3, [pc, #44]	@ (8007f14 <vPortSetupTimerInterrupt+0x38>)
 8007ee8:	2200      	movs	r2, #0
 8007eea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007eec:	4b0a      	ldr	r3, [pc, #40]	@ (8007f18 <vPortSetupTimerInterrupt+0x3c>)
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	4a0a      	ldr	r2, [pc, #40]	@ (8007f1c <vPortSetupTimerInterrupt+0x40>)
 8007ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8007ef6:	099b      	lsrs	r3, r3, #6
 8007ef8:	4a09      	ldr	r2, [pc, #36]	@ (8007f20 <vPortSetupTimerInterrupt+0x44>)
 8007efa:	3b01      	subs	r3, #1
 8007efc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007efe:	4b04      	ldr	r3, [pc, #16]	@ (8007f10 <vPortSetupTimerInterrupt+0x34>)
 8007f00:	2207      	movs	r2, #7
 8007f02:	601a      	str	r2, [r3, #0]
}
 8007f04:	bf00      	nop
 8007f06:	46bd      	mov	sp, r7
 8007f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0c:	4770      	bx	lr
 8007f0e:	bf00      	nop
 8007f10:	e000e010 	.word	0xe000e010
 8007f14:	e000e018 	.word	0xe000e018
 8007f18:	20000000 	.word	0x20000000
 8007f1c:	10624dd3 	.word	0x10624dd3
 8007f20:	e000e014 	.word	0xe000e014

08007f24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007f24:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007f34 <vPortEnableVFP+0x10>
 8007f28:	6801      	ldr	r1, [r0, #0]
 8007f2a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8007f2e:	6001      	str	r1, [r0, #0]
 8007f30:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007f32:	bf00      	nop
 8007f34:	e000ed88 	.word	0xe000ed88

08007f38 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b08a      	sub	sp, #40	@ 0x28
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007f40:	2300      	movs	r3, #0
 8007f42:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007f44:	f7ff fa02 	bl	800734c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007f48:	4b5c      	ldr	r3, [pc, #368]	@ (80080bc <pvPortMalloc+0x184>)
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d101      	bne.n	8007f54 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007f50:	f000 f924 	bl	800819c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007f54:	4b5a      	ldr	r3, [pc, #360]	@ (80080c0 <pvPortMalloc+0x188>)
 8007f56:	681a      	ldr	r2, [r3, #0]
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	4013      	ands	r3, r2
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	f040 8095 	bne.w	800808c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d01e      	beq.n	8007fa6 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8007f68:	2208      	movs	r2, #8
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	4413      	add	r3, r2
 8007f6e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	f003 0307 	and.w	r3, r3, #7
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d015      	beq.n	8007fa6 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	f023 0307 	bic.w	r3, r3, #7
 8007f80:	3308      	adds	r3, #8
 8007f82:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	f003 0307 	and.w	r3, r3, #7
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d00b      	beq.n	8007fa6 <pvPortMalloc+0x6e>
	__asm volatile
 8007f8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f92:	f383 8811 	msr	BASEPRI, r3
 8007f96:	f3bf 8f6f 	isb	sy
 8007f9a:	f3bf 8f4f 	dsb	sy
 8007f9e:	617b      	str	r3, [r7, #20]
}
 8007fa0:	bf00      	nop
 8007fa2:	bf00      	nop
 8007fa4:	e7fd      	b.n	8007fa2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d06f      	beq.n	800808c <pvPortMalloc+0x154>
 8007fac:	4b45      	ldr	r3, [pc, #276]	@ (80080c4 <pvPortMalloc+0x18c>)
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	687a      	ldr	r2, [r7, #4]
 8007fb2:	429a      	cmp	r2, r3
 8007fb4:	d86a      	bhi.n	800808c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007fb6:	4b44      	ldr	r3, [pc, #272]	@ (80080c8 <pvPortMalloc+0x190>)
 8007fb8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007fba:	4b43      	ldr	r3, [pc, #268]	@ (80080c8 <pvPortMalloc+0x190>)
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007fc0:	e004      	b.n	8007fcc <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007fc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fc4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007fcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fce:	685b      	ldr	r3, [r3, #4]
 8007fd0:	687a      	ldr	r2, [r7, #4]
 8007fd2:	429a      	cmp	r2, r3
 8007fd4:	d903      	bls.n	8007fde <pvPortMalloc+0xa6>
 8007fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d1f1      	bne.n	8007fc2 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007fde:	4b37      	ldr	r3, [pc, #220]	@ (80080bc <pvPortMalloc+0x184>)
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007fe4:	429a      	cmp	r2, r3
 8007fe6:	d051      	beq.n	800808c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007fe8:	6a3b      	ldr	r3, [r7, #32]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	2208      	movs	r2, #8
 8007fee:	4413      	add	r3, r2
 8007ff0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007ff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ff4:	681a      	ldr	r2, [r3, #0]
 8007ff6:	6a3b      	ldr	r3, [r7, #32]
 8007ff8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ffc:	685a      	ldr	r2, [r3, #4]
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	1ad2      	subs	r2, r2, r3
 8008002:	2308      	movs	r3, #8
 8008004:	005b      	lsls	r3, r3, #1
 8008006:	429a      	cmp	r2, r3
 8008008:	d920      	bls.n	800804c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800800a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	4413      	add	r3, r2
 8008010:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008012:	69bb      	ldr	r3, [r7, #24]
 8008014:	f003 0307 	and.w	r3, r3, #7
 8008018:	2b00      	cmp	r3, #0
 800801a:	d00b      	beq.n	8008034 <pvPortMalloc+0xfc>
	__asm volatile
 800801c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008020:	f383 8811 	msr	BASEPRI, r3
 8008024:	f3bf 8f6f 	isb	sy
 8008028:	f3bf 8f4f 	dsb	sy
 800802c:	613b      	str	r3, [r7, #16]
}
 800802e:	bf00      	nop
 8008030:	bf00      	nop
 8008032:	e7fd      	b.n	8008030 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008036:	685a      	ldr	r2, [r3, #4]
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	1ad2      	subs	r2, r2, r3
 800803c:	69bb      	ldr	r3, [r7, #24]
 800803e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008042:	687a      	ldr	r2, [r7, #4]
 8008044:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008046:	69b8      	ldr	r0, [r7, #24]
 8008048:	f000 f90a 	bl	8008260 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800804c:	4b1d      	ldr	r3, [pc, #116]	@ (80080c4 <pvPortMalloc+0x18c>)
 800804e:	681a      	ldr	r2, [r3, #0]
 8008050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008052:	685b      	ldr	r3, [r3, #4]
 8008054:	1ad3      	subs	r3, r2, r3
 8008056:	4a1b      	ldr	r2, [pc, #108]	@ (80080c4 <pvPortMalloc+0x18c>)
 8008058:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800805a:	4b1a      	ldr	r3, [pc, #104]	@ (80080c4 <pvPortMalloc+0x18c>)
 800805c:	681a      	ldr	r2, [r3, #0]
 800805e:	4b1b      	ldr	r3, [pc, #108]	@ (80080cc <pvPortMalloc+0x194>)
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	429a      	cmp	r2, r3
 8008064:	d203      	bcs.n	800806e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008066:	4b17      	ldr	r3, [pc, #92]	@ (80080c4 <pvPortMalloc+0x18c>)
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	4a18      	ldr	r2, [pc, #96]	@ (80080cc <pvPortMalloc+0x194>)
 800806c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800806e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008070:	685a      	ldr	r2, [r3, #4]
 8008072:	4b13      	ldr	r3, [pc, #76]	@ (80080c0 <pvPortMalloc+0x188>)
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	431a      	orrs	r2, r3
 8008078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800807a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800807c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800807e:	2200      	movs	r2, #0
 8008080:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008082:	4b13      	ldr	r3, [pc, #76]	@ (80080d0 <pvPortMalloc+0x198>)
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	3301      	adds	r3, #1
 8008088:	4a11      	ldr	r2, [pc, #68]	@ (80080d0 <pvPortMalloc+0x198>)
 800808a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800808c:	f7ff f96c 	bl	8007368 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008090:	69fb      	ldr	r3, [r7, #28]
 8008092:	f003 0307 	and.w	r3, r3, #7
 8008096:	2b00      	cmp	r3, #0
 8008098:	d00b      	beq.n	80080b2 <pvPortMalloc+0x17a>
	__asm volatile
 800809a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800809e:	f383 8811 	msr	BASEPRI, r3
 80080a2:	f3bf 8f6f 	isb	sy
 80080a6:	f3bf 8f4f 	dsb	sy
 80080aa:	60fb      	str	r3, [r7, #12]
}
 80080ac:	bf00      	nop
 80080ae:	bf00      	nop
 80080b0:	e7fd      	b.n	80080ae <pvPortMalloc+0x176>
	return pvReturn;
 80080b2:	69fb      	ldr	r3, [r7, #28]
}
 80080b4:	4618      	mov	r0, r3
 80080b6:	3728      	adds	r7, #40	@ 0x28
 80080b8:	46bd      	mov	sp, r7
 80080ba:	bd80      	pop	{r7, pc}
 80080bc:	200041a8 	.word	0x200041a8
 80080c0:	200041bc 	.word	0x200041bc
 80080c4:	200041ac 	.word	0x200041ac
 80080c8:	200041a0 	.word	0x200041a0
 80080cc:	200041b0 	.word	0x200041b0
 80080d0:	200041b4 	.word	0x200041b4

080080d4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b086      	sub	sp, #24
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d04f      	beq.n	8008186 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80080e6:	2308      	movs	r3, #8
 80080e8:	425b      	negs	r3, r3
 80080ea:	697a      	ldr	r2, [r7, #20]
 80080ec:	4413      	add	r3, r2
 80080ee:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80080f0:	697b      	ldr	r3, [r7, #20]
 80080f2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80080f4:	693b      	ldr	r3, [r7, #16]
 80080f6:	685a      	ldr	r2, [r3, #4]
 80080f8:	4b25      	ldr	r3, [pc, #148]	@ (8008190 <vPortFree+0xbc>)
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	4013      	ands	r3, r2
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d10b      	bne.n	800811a <vPortFree+0x46>
	__asm volatile
 8008102:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008106:	f383 8811 	msr	BASEPRI, r3
 800810a:	f3bf 8f6f 	isb	sy
 800810e:	f3bf 8f4f 	dsb	sy
 8008112:	60fb      	str	r3, [r7, #12]
}
 8008114:	bf00      	nop
 8008116:	bf00      	nop
 8008118:	e7fd      	b.n	8008116 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800811a:	693b      	ldr	r3, [r7, #16]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d00b      	beq.n	800813a <vPortFree+0x66>
	__asm volatile
 8008122:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008126:	f383 8811 	msr	BASEPRI, r3
 800812a:	f3bf 8f6f 	isb	sy
 800812e:	f3bf 8f4f 	dsb	sy
 8008132:	60bb      	str	r3, [r7, #8]
}
 8008134:	bf00      	nop
 8008136:	bf00      	nop
 8008138:	e7fd      	b.n	8008136 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800813a:	693b      	ldr	r3, [r7, #16]
 800813c:	685a      	ldr	r2, [r3, #4]
 800813e:	4b14      	ldr	r3, [pc, #80]	@ (8008190 <vPortFree+0xbc>)
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	4013      	ands	r3, r2
 8008144:	2b00      	cmp	r3, #0
 8008146:	d01e      	beq.n	8008186 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008148:	693b      	ldr	r3, [r7, #16]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d11a      	bne.n	8008186 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008150:	693b      	ldr	r3, [r7, #16]
 8008152:	685a      	ldr	r2, [r3, #4]
 8008154:	4b0e      	ldr	r3, [pc, #56]	@ (8008190 <vPortFree+0xbc>)
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	43db      	mvns	r3, r3
 800815a:	401a      	ands	r2, r3
 800815c:	693b      	ldr	r3, [r7, #16]
 800815e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008160:	f7ff f8f4 	bl	800734c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008164:	693b      	ldr	r3, [r7, #16]
 8008166:	685a      	ldr	r2, [r3, #4]
 8008168:	4b0a      	ldr	r3, [pc, #40]	@ (8008194 <vPortFree+0xc0>)
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	4413      	add	r3, r2
 800816e:	4a09      	ldr	r2, [pc, #36]	@ (8008194 <vPortFree+0xc0>)
 8008170:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008172:	6938      	ldr	r0, [r7, #16]
 8008174:	f000 f874 	bl	8008260 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008178:	4b07      	ldr	r3, [pc, #28]	@ (8008198 <vPortFree+0xc4>)
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	3301      	adds	r3, #1
 800817e:	4a06      	ldr	r2, [pc, #24]	@ (8008198 <vPortFree+0xc4>)
 8008180:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008182:	f7ff f8f1 	bl	8007368 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008186:	bf00      	nop
 8008188:	3718      	adds	r7, #24
 800818a:	46bd      	mov	sp, r7
 800818c:	bd80      	pop	{r7, pc}
 800818e:	bf00      	nop
 8008190:	200041bc 	.word	0x200041bc
 8008194:	200041ac 	.word	0x200041ac
 8008198:	200041b8 	.word	0x200041b8

0800819c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800819c:	b480      	push	{r7}
 800819e:	b085      	sub	sp, #20
 80081a0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80081a2:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80081a6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80081a8:	4b27      	ldr	r3, [pc, #156]	@ (8008248 <prvHeapInit+0xac>)
 80081aa:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	f003 0307 	and.w	r3, r3, #7
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d00c      	beq.n	80081d0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	3307      	adds	r3, #7
 80081ba:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	f023 0307 	bic.w	r3, r3, #7
 80081c2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80081c4:	68ba      	ldr	r2, [r7, #8]
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	1ad3      	subs	r3, r2, r3
 80081ca:	4a1f      	ldr	r2, [pc, #124]	@ (8008248 <prvHeapInit+0xac>)
 80081cc:	4413      	add	r3, r2
 80081ce:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80081d4:	4a1d      	ldr	r2, [pc, #116]	@ (800824c <prvHeapInit+0xb0>)
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80081da:	4b1c      	ldr	r3, [pc, #112]	@ (800824c <prvHeapInit+0xb0>)
 80081dc:	2200      	movs	r2, #0
 80081de:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	68ba      	ldr	r2, [r7, #8]
 80081e4:	4413      	add	r3, r2
 80081e6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80081e8:	2208      	movs	r2, #8
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	1a9b      	subs	r3, r3, r2
 80081ee:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	f023 0307 	bic.w	r3, r3, #7
 80081f6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	4a15      	ldr	r2, [pc, #84]	@ (8008250 <prvHeapInit+0xb4>)
 80081fc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80081fe:	4b14      	ldr	r3, [pc, #80]	@ (8008250 <prvHeapInit+0xb4>)
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	2200      	movs	r2, #0
 8008204:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008206:	4b12      	ldr	r3, [pc, #72]	@ (8008250 <prvHeapInit+0xb4>)
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	2200      	movs	r2, #0
 800820c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	68fa      	ldr	r2, [r7, #12]
 8008216:	1ad2      	subs	r2, r2, r3
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800821c:	4b0c      	ldr	r3, [pc, #48]	@ (8008250 <prvHeapInit+0xb4>)
 800821e:	681a      	ldr	r2, [r3, #0]
 8008220:	683b      	ldr	r3, [r7, #0]
 8008222:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	685b      	ldr	r3, [r3, #4]
 8008228:	4a0a      	ldr	r2, [pc, #40]	@ (8008254 <prvHeapInit+0xb8>)
 800822a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	685b      	ldr	r3, [r3, #4]
 8008230:	4a09      	ldr	r2, [pc, #36]	@ (8008258 <prvHeapInit+0xbc>)
 8008232:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008234:	4b09      	ldr	r3, [pc, #36]	@ (800825c <prvHeapInit+0xc0>)
 8008236:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800823a:	601a      	str	r2, [r3, #0]
}
 800823c:	bf00      	nop
 800823e:	3714      	adds	r7, #20
 8008240:	46bd      	mov	sp, r7
 8008242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008246:	4770      	bx	lr
 8008248:	200005a0 	.word	0x200005a0
 800824c:	200041a0 	.word	0x200041a0
 8008250:	200041a8 	.word	0x200041a8
 8008254:	200041b0 	.word	0x200041b0
 8008258:	200041ac 	.word	0x200041ac
 800825c:	200041bc 	.word	0x200041bc

08008260 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008260:	b480      	push	{r7}
 8008262:	b085      	sub	sp, #20
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008268:	4b28      	ldr	r3, [pc, #160]	@ (800830c <prvInsertBlockIntoFreeList+0xac>)
 800826a:	60fb      	str	r3, [r7, #12]
 800826c:	e002      	b.n	8008274 <prvInsertBlockIntoFreeList+0x14>
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	60fb      	str	r3, [r7, #12]
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	687a      	ldr	r2, [r7, #4]
 800827a:	429a      	cmp	r2, r3
 800827c:	d8f7      	bhi.n	800826e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	685b      	ldr	r3, [r3, #4]
 8008286:	68ba      	ldr	r2, [r7, #8]
 8008288:	4413      	add	r3, r2
 800828a:	687a      	ldr	r2, [r7, #4]
 800828c:	429a      	cmp	r2, r3
 800828e:	d108      	bne.n	80082a2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	685a      	ldr	r2, [r3, #4]
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	685b      	ldr	r3, [r3, #4]
 8008298:	441a      	add	r2, r3
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	685b      	ldr	r3, [r3, #4]
 80082aa:	68ba      	ldr	r2, [r7, #8]
 80082ac:	441a      	add	r2, r3
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	429a      	cmp	r2, r3
 80082b4:	d118      	bne.n	80082e8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	681a      	ldr	r2, [r3, #0]
 80082ba:	4b15      	ldr	r3, [pc, #84]	@ (8008310 <prvInsertBlockIntoFreeList+0xb0>)
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	429a      	cmp	r2, r3
 80082c0:	d00d      	beq.n	80082de <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	685a      	ldr	r2, [r3, #4]
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	685b      	ldr	r3, [r3, #4]
 80082cc:	441a      	add	r2, r3
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	681a      	ldr	r2, [r3, #0]
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	601a      	str	r2, [r3, #0]
 80082dc:	e008      	b.n	80082f0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80082de:	4b0c      	ldr	r3, [pc, #48]	@ (8008310 <prvInsertBlockIntoFreeList+0xb0>)
 80082e0:	681a      	ldr	r2, [r3, #0]
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	601a      	str	r2, [r3, #0]
 80082e6:	e003      	b.n	80082f0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	681a      	ldr	r2, [r3, #0]
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80082f0:	68fa      	ldr	r2, [r7, #12]
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	429a      	cmp	r2, r3
 80082f6:	d002      	beq.n	80082fe <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	687a      	ldr	r2, [r7, #4]
 80082fc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80082fe:	bf00      	nop
 8008300:	3714      	adds	r7, #20
 8008302:	46bd      	mov	sp, r7
 8008304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008308:	4770      	bx	lr
 800830a:	bf00      	nop
 800830c:	200041a0 	.word	0x200041a0
 8008310:	200041a8 	.word	0x200041a8

08008314 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008314:	b580      	push	{r7, lr}
 8008316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008318:	2200      	movs	r2, #0
 800831a:	4912      	ldr	r1, [pc, #72]	@ (8008364 <MX_USB_DEVICE_Init+0x50>)
 800831c:	4812      	ldr	r0, [pc, #72]	@ (8008368 <MX_USB_DEVICE_Init+0x54>)
 800831e:	f7fd f875 	bl	800540c <USBD_Init>
 8008322:	4603      	mov	r3, r0
 8008324:	2b00      	cmp	r3, #0
 8008326:	d001      	beq.n	800832c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008328:	f7f8 fa96 	bl	8000858 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800832c:	490f      	ldr	r1, [pc, #60]	@ (800836c <MX_USB_DEVICE_Init+0x58>)
 800832e:	480e      	ldr	r0, [pc, #56]	@ (8008368 <MX_USB_DEVICE_Init+0x54>)
 8008330:	f7fd f89c 	bl	800546c <USBD_RegisterClass>
 8008334:	4603      	mov	r3, r0
 8008336:	2b00      	cmp	r3, #0
 8008338:	d001      	beq.n	800833e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800833a:	f7f8 fa8d 	bl	8000858 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800833e:	490c      	ldr	r1, [pc, #48]	@ (8008370 <MX_USB_DEVICE_Init+0x5c>)
 8008340:	4809      	ldr	r0, [pc, #36]	@ (8008368 <MX_USB_DEVICE_Init+0x54>)
 8008342:	f7fc ff93 	bl	800526c <USBD_CDC_RegisterInterface>
 8008346:	4603      	mov	r3, r0
 8008348:	2b00      	cmp	r3, #0
 800834a:	d001      	beq.n	8008350 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800834c:	f7f8 fa84 	bl	8000858 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008350:	4805      	ldr	r0, [pc, #20]	@ (8008368 <MX_USB_DEVICE_Init+0x54>)
 8008352:	f7fd f8c1 	bl	80054d8 <USBD_Start>
 8008356:	4603      	mov	r3, r0
 8008358:	2b00      	cmp	r3, #0
 800835a:	d001      	beq.n	8008360 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800835c:	f7f8 fa7c 	bl	8000858 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008360:	bf00      	nop
 8008362:	bd80      	pop	{r7, pc}
 8008364:	200000b0 	.word	0x200000b0
 8008368:	200041c0 	.word	0x200041c0
 800836c:	20000018 	.word	0x20000018
 8008370:	2000009c 	.word	0x2000009c

08008374 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008374:	b580      	push	{r7, lr}
 8008376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008378:	2200      	movs	r2, #0
 800837a:	4905      	ldr	r1, [pc, #20]	@ (8008390 <CDC_Init_FS+0x1c>)
 800837c:	4805      	ldr	r0, [pc, #20]	@ (8008394 <CDC_Init_FS+0x20>)
 800837e:	f7fc ff8f 	bl	80052a0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008382:	4905      	ldr	r1, [pc, #20]	@ (8008398 <CDC_Init_FS+0x24>)
 8008384:	4803      	ldr	r0, [pc, #12]	@ (8008394 <CDC_Init_FS+0x20>)
 8008386:	f7fc ffad 	bl	80052e4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800838a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800838c:	4618      	mov	r0, r3
 800838e:	bd80      	pop	{r7, pc}
 8008390:	20004c9c 	.word	0x20004c9c
 8008394:	200041c0 	.word	0x200041c0
 8008398:	2000449c 	.word	0x2000449c

0800839c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800839c:	b480      	push	{r7}
 800839e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80083a0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80083a2:	4618      	mov	r0, r3
 80083a4:	46bd      	mov	sp, r7
 80083a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083aa:	4770      	bx	lr

080083ac <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80083ac:	b480      	push	{r7}
 80083ae:	b083      	sub	sp, #12
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	4603      	mov	r3, r0
 80083b4:	6039      	str	r1, [r7, #0]
 80083b6:	71fb      	strb	r3, [r7, #7]
 80083b8:	4613      	mov	r3, r2
 80083ba:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80083bc:	79fb      	ldrb	r3, [r7, #7]
 80083be:	2b23      	cmp	r3, #35	@ 0x23
 80083c0:	d84a      	bhi.n	8008458 <CDC_Control_FS+0xac>
 80083c2:	a201      	add	r2, pc, #4	@ (adr r2, 80083c8 <CDC_Control_FS+0x1c>)
 80083c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083c8:	08008459 	.word	0x08008459
 80083cc:	08008459 	.word	0x08008459
 80083d0:	08008459 	.word	0x08008459
 80083d4:	08008459 	.word	0x08008459
 80083d8:	08008459 	.word	0x08008459
 80083dc:	08008459 	.word	0x08008459
 80083e0:	08008459 	.word	0x08008459
 80083e4:	08008459 	.word	0x08008459
 80083e8:	08008459 	.word	0x08008459
 80083ec:	08008459 	.word	0x08008459
 80083f0:	08008459 	.word	0x08008459
 80083f4:	08008459 	.word	0x08008459
 80083f8:	08008459 	.word	0x08008459
 80083fc:	08008459 	.word	0x08008459
 8008400:	08008459 	.word	0x08008459
 8008404:	08008459 	.word	0x08008459
 8008408:	08008459 	.word	0x08008459
 800840c:	08008459 	.word	0x08008459
 8008410:	08008459 	.word	0x08008459
 8008414:	08008459 	.word	0x08008459
 8008418:	08008459 	.word	0x08008459
 800841c:	08008459 	.word	0x08008459
 8008420:	08008459 	.word	0x08008459
 8008424:	08008459 	.word	0x08008459
 8008428:	08008459 	.word	0x08008459
 800842c:	08008459 	.word	0x08008459
 8008430:	08008459 	.word	0x08008459
 8008434:	08008459 	.word	0x08008459
 8008438:	08008459 	.word	0x08008459
 800843c:	08008459 	.word	0x08008459
 8008440:	08008459 	.word	0x08008459
 8008444:	08008459 	.word	0x08008459
 8008448:	08008459 	.word	0x08008459
 800844c:	08008459 	.word	0x08008459
 8008450:	08008459 	.word	0x08008459
 8008454:	08008459 	.word	0x08008459
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008458:	bf00      	nop
  }

  return (USBD_OK);
 800845a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800845c:	4618      	mov	r0, r3
 800845e:	370c      	adds	r7, #12
 8008460:	46bd      	mov	sp, r7
 8008462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008466:	4770      	bx	lr

08008468 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b082      	sub	sp, #8
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
 8008470:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008472:	6879      	ldr	r1, [r7, #4]
 8008474:	4805      	ldr	r0, [pc, #20]	@ (800848c <CDC_Receive_FS+0x24>)
 8008476:	f7fc ff35 	bl	80052e4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800847a:	4804      	ldr	r0, [pc, #16]	@ (800848c <CDC_Receive_FS+0x24>)
 800847c:	f7fc ff90 	bl	80053a0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008480:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008482:	4618      	mov	r0, r3
 8008484:	3708      	adds	r7, #8
 8008486:	46bd      	mov	sp, r7
 8008488:	bd80      	pop	{r7, pc}
 800848a:	bf00      	nop
 800848c:	200041c0 	.word	0x200041c0

08008490 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008490:	b580      	push	{r7, lr}
 8008492:	b084      	sub	sp, #16
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
 8008498:	460b      	mov	r3, r1
 800849a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800849c:	2300      	movs	r3, #0
 800849e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80084a0:	4b0d      	ldr	r3, [pc, #52]	@ (80084d8 <CDC_Transmit_FS+0x48>)
 80084a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80084a6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80084a8:	68bb      	ldr	r3, [r7, #8]
 80084aa:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d001      	beq.n	80084b6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80084b2:	2301      	movs	r3, #1
 80084b4:	e00b      	b.n	80084ce <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80084b6:	887b      	ldrh	r3, [r7, #2]
 80084b8:	461a      	mov	r2, r3
 80084ba:	6879      	ldr	r1, [r7, #4]
 80084bc:	4806      	ldr	r0, [pc, #24]	@ (80084d8 <CDC_Transmit_FS+0x48>)
 80084be:	f7fc feef 	bl	80052a0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80084c2:	4805      	ldr	r0, [pc, #20]	@ (80084d8 <CDC_Transmit_FS+0x48>)
 80084c4:	f7fc ff2c 	bl	8005320 <USBD_CDC_TransmitPacket>
 80084c8:	4603      	mov	r3, r0
 80084ca:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80084cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80084ce:	4618      	mov	r0, r3
 80084d0:	3710      	adds	r7, #16
 80084d2:	46bd      	mov	sp, r7
 80084d4:	bd80      	pop	{r7, pc}
 80084d6:	bf00      	nop
 80084d8:	200041c0 	.word	0x200041c0

080084dc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80084dc:	b480      	push	{r7}
 80084de:	b087      	sub	sp, #28
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	60f8      	str	r0, [r7, #12]
 80084e4:	60b9      	str	r1, [r7, #8]
 80084e6:	4613      	mov	r3, r2
 80084e8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80084ea:	2300      	movs	r3, #0
 80084ec:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80084ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80084f2:	4618      	mov	r0, r3
 80084f4:	371c      	adds	r7, #28
 80084f6:	46bd      	mov	sp, r7
 80084f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fc:	4770      	bx	lr
	...

08008500 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008500:	b480      	push	{r7}
 8008502:	b083      	sub	sp, #12
 8008504:	af00      	add	r7, sp, #0
 8008506:	4603      	mov	r3, r0
 8008508:	6039      	str	r1, [r7, #0]
 800850a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800850c:	683b      	ldr	r3, [r7, #0]
 800850e:	2212      	movs	r2, #18
 8008510:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008512:	4b03      	ldr	r3, [pc, #12]	@ (8008520 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008514:	4618      	mov	r0, r3
 8008516:	370c      	adds	r7, #12
 8008518:	46bd      	mov	sp, r7
 800851a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851e:	4770      	bx	lr
 8008520:	200000cc 	.word	0x200000cc

08008524 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008524:	b480      	push	{r7}
 8008526:	b083      	sub	sp, #12
 8008528:	af00      	add	r7, sp, #0
 800852a:	4603      	mov	r3, r0
 800852c:	6039      	str	r1, [r7, #0]
 800852e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	2204      	movs	r2, #4
 8008534:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008536:	4b03      	ldr	r3, [pc, #12]	@ (8008544 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008538:	4618      	mov	r0, r3
 800853a:	370c      	adds	r7, #12
 800853c:	46bd      	mov	sp, r7
 800853e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008542:	4770      	bx	lr
 8008544:	200000e0 	.word	0x200000e0

08008548 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008548:	b580      	push	{r7, lr}
 800854a:	b082      	sub	sp, #8
 800854c:	af00      	add	r7, sp, #0
 800854e:	4603      	mov	r3, r0
 8008550:	6039      	str	r1, [r7, #0]
 8008552:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008554:	79fb      	ldrb	r3, [r7, #7]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d105      	bne.n	8008566 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800855a:	683a      	ldr	r2, [r7, #0]
 800855c:	4907      	ldr	r1, [pc, #28]	@ (800857c <USBD_FS_ProductStrDescriptor+0x34>)
 800855e:	4808      	ldr	r0, [pc, #32]	@ (8008580 <USBD_FS_ProductStrDescriptor+0x38>)
 8008560:	f7fe f96a 	bl	8006838 <USBD_GetString>
 8008564:	e004      	b.n	8008570 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008566:	683a      	ldr	r2, [r7, #0]
 8008568:	4904      	ldr	r1, [pc, #16]	@ (800857c <USBD_FS_ProductStrDescriptor+0x34>)
 800856a:	4805      	ldr	r0, [pc, #20]	@ (8008580 <USBD_FS_ProductStrDescriptor+0x38>)
 800856c:	f7fe f964 	bl	8006838 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008570:	4b02      	ldr	r3, [pc, #8]	@ (800857c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008572:	4618      	mov	r0, r3
 8008574:	3708      	adds	r7, #8
 8008576:	46bd      	mov	sp, r7
 8008578:	bd80      	pop	{r7, pc}
 800857a:	bf00      	nop
 800857c:	2000549c 	.word	0x2000549c
 8008580:	08008f7c 	.word	0x08008f7c

08008584 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008584:	b580      	push	{r7, lr}
 8008586:	b082      	sub	sp, #8
 8008588:	af00      	add	r7, sp, #0
 800858a:	4603      	mov	r3, r0
 800858c:	6039      	str	r1, [r7, #0]
 800858e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008590:	683a      	ldr	r2, [r7, #0]
 8008592:	4904      	ldr	r1, [pc, #16]	@ (80085a4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008594:	4804      	ldr	r0, [pc, #16]	@ (80085a8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008596:	f7fe f94f 	bl	8006838 <USBD_GetString>
  return USBD_StrDesc;
 800859a:	4b02      	ldr	r3, [pc, #8]	@ (80085a4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800859c:	4618      	mov	r0, r3
 800859e:	3708      	adds	r7, #8
 80085a0:	46bd      	mov	sp, r7
 80085a2:	bd80      	pop	{r7, pc}
 80085a4:	2000549c 	.word	0x2000549c
 80085a8:	08008f90 	.word	0x08008f90

080085ac <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b082      	sub	sp, #8
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	4603      	mov	r3, r0
 80085b4:	6039      	str	r1, [r7, #0]
 80085b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80085b8:	683b      	ldr	r3, [r7, #0]
 80085ba:	221a      	movs	r2, #26
 80085bc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80085be:	f000 f843 	bl	8008648 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80085c2:	4b02      	ldr	r3, [pc, #8]	@ (80085cc <USBD_FS_SerialStrDescriptor+0x20>)
}
 80085c4:	4618      	mov	r0, r3
 80085c6:	3708      	adds	r7, #8
 80085c8:	46bd      	mov	sp, r7
 80085ca:	bd80      	pop	{r7, pc}
 80085cc:	200000e4 	.word	0x200000e4

080085d0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	b082      	sub	sp, #8
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	4603      	mov	r3, r0
 80085d8:	6039      	str	r1, [r7, #0]
 80085da:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80085dc:	79fb      	ldrb	r3, [r7, #7]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d105      	bne.n	80085ee <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80085e2:	683a      	ldr	r2, [r7, #0]
 80085e4:	4907      	ldr	r1, [pc, #28]	@ (8008604 <USBD_FS_ConfigStrDescriptor+0x34>)
 80085e6:	4808      	ldr	r0, [pc, #32]	@ (8008608 <USBD_FS_ConfigStrDescriptor+0x38>)
 80085e8:	f7fe f926 	bl	8006838 <USBD_GetString>
 80085ec:	e004      	b.n	80085f8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80085ee:	683a      	ldr	r2, [r7, #0]
 80085f0:	4904      	ldr	r1, [pc, #16]	@ (8008604 <USBD_FS_ConfigStrDescriptor+0x34>)
 80085f2:	4805      	ldr	r0, [pc, #20]	@ (8008608 <USBD_FS_ConfigStrDescriptor+0x38>)
 80085f4:	f7fe f920 	bl	8006838 <USBD_GetString>
  }
  return USBD_StrDesc;
 80085f8:	4b02      	ldr	r3, [pc, #8]	@ (8008604 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80085fa:	4618      	mov	r0, r3
 80085fc:	3708      	adds	r7, #8
 80085fe:	46bd      	mov	sp, r7
 8008600:	bd80      	pop	{r7, pc}
 8008602:	bf00      	nop
 8008604:	2000549c 	.word	0x2000549c
 8008608:	08008fa4 	.word	0x08008fa4

0800860c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800860c:	b580      	push	{r7, lr}
 800860e:	b082      	sub	sp, #8
 8008610:	af00      	add	r7, sp, #0
 8008612:	4603      	mov	r3, r0
 8008614:	6039      	str	r1, [r7, #0]
 8008616:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008618:	79fb      	ldrb	r3, [r7, #7]
 800861a:	2b00      	cmp	r3, #0
 800861c:	d105      	bne.n	800862a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800861e:	683a      	ldr	r2, [r7, #0]
 8008620:	4907      	ldr	r1, [pc, #28]	@ (8008640 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008622:	4808      	ldr	r0, [pc, #32]	@ (8008644 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008624:	f7fe f908 	bl	8006838 <USBD_GetString>
 8008628:	e004      	b.n	8008634 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800862a:	683a      	ldr	r2, [r7, #0]
 800862c:	4904      	ldr	r1, [pc, #16]	@ (8008640 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800862e:	4805      	ldr	r0, [pc, #20]	@ (8008644 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008630:	f7fe f902 	bl	8006838 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008634:	4b02      	ldr	r3, [pc, #8]	@ (8008640 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008636:	4618      	mov	r0, r3
 8008638:	3708      	adds	r7, #8
 800863a:	46bd      	mov	sp, r7
 800863c:	bd80      	pop	{r7, pc}
 800863e:	bf00      	nop
 8008640:	2000549c 	.word	0x2000549c
 8008644:	08008fb0 	.word	0x08008fb0

08008648 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008648:	b580      	push	{r7, lr}
 800864a:	b084      	sub	sp, #16
 800864c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800864e:	4b0f      	ldr	r3, [pc, #60]	@ (800868c <Get_SerialNum+0x44>)
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008654:	4b0e      	ldr	r3, [pc, #56]	@ (8008690 <Get_SerialNum+0x48>)
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800865a:	4b0e      	ldr	r3, [pc, #56]	@ (8008694 <Get_SerialNum+0x4c>)
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008660:	68fa      	ldr	r2, [r7, #12]
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	4413      	add	r3, r2
 8008666:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d009      	beq.n	8008682 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800866e:	2208      	movs	r2, #8
 8008670:	4909      	ldr	r1, [pc, #36]	@ (8008698 <Get_SerialNum+0x50>)
 8008672:	68f8      	ldr	r0, [r7, #12]
 8008674:	f000 f814 	bl	80086a0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008678:	2204      	movs	r2, #4
 800867a:	4908      	ldr	r1, [pc, #32]	@ (800869c <Get_SerialNum+0x54>)
 800867c:	68b8      	ldr	r0, [r7, #8]
 800867e:	f000 f80f 	bl	80086a0 <IntToUnicode>
  }
}
 8008682:	bf00      	nop
 8008684:	3710      	adds	r7, #16
 8008686:	46bd      	mov	sp, r7
 8008688:	bd80      	pop	{r7, pc}
 800868a:	bf00      	nop
 800868c:	1fff7a10 	.word	0x1fff7a10
 8008690:	1fff7a14 	.word	0x1fff7a14
 8008694:	1fff7a18 	.word	0x1fff7a18
 8008698:	200000e6 	.word	0x200000e6
 800869c:	200000f6 	.word	0x200000f6

080086a0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80086a0:	b480      	push	{r7}
 80086a2:	b087      	sub	sp, #28
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	60f8      	str	r0, [r7, #12]
 80086a8:	60b9      	str	r1, [r7, #8]
 80086aa:	4613      	mov	r3, r2
 80086ac:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80086ae:	2300      	movs	r3, #0
 80086b0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80086b2:	2300      	movs	r3, #0
 80086b4:	75fb      	strb	r3, [r7, #23]
 80086b6:	e027      	b.n	8008708 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	0f1b      	lsrs	r3, r3, #28
 80086bc:	2b09      	cmp	r3, #9
 80086be:	d80b      	bhi.n	80086d8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	0f1b      	lsrs	r3, r3, #28
 80086c4:	b2da      	uxtb	r2, r3
 80086c6:	7dfb      	ldrb	r3, [r7, #23]
 80086c8:	005b      	lsls	r3, r3, #1
 80086ca:	4619      	mov	r1, r3
 80086cc:	68bb      	ldr	r3, [r7, #8]
 80086ce:	440b      	add	r3, r1
 80086d0:	3230      	adds	r2, #48	@ 0x30
 80086d2:	b2d2      	uxtb	r2, r2
 80086d4:	701a      	strb	r2, [r3, #0]
 80086d6:	e00a      	b.n	80086ee <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	0f1b      	lsrs	r3, r3, #28
 80086dc:	b2da      	uxtb	r2, r3
 80086de:	7dfb      	ldrb	r3, [r7, #23]
 80086e0:	005b      	lsls	r3, r3, #1
 80086e2:	4619      	mov	r1, r3
 80086e4:	68bb      	ldr	r3, [r7, #8]
 80086e6:	440b      	add	r3, r1
 80086e8:	3237      	adds	r2, #55	@ 0x37
 80086ea:	b2d2      	uxtb	r2, r2
 80086ec:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	011b      	lsls	r3, r3, #4
 80086f2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80086f4:	7dfb      	ldrb	r3, [r7, #23]
 80086f6:	005b      	lsls	r3, r3, #1
 80086f8:	3301      	adds	r3, #1
 80086fa:	68ba      	ldr	r2, [r7, #8]
 80086fc:	4413      	add	r3, r2
 80086fe:	2200      	movs	r2, #0
 8008700:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008702:	7dfb      	ldrb	r3, [r7, #23]
 8008704:	3301      	adds	r3, #1
 8008706:	75fb      	strb	r3, [r7, #23]
 8008708:	7dfa      	ldrb	r2, [r7, #23]
 800870a:	79fb      	ldrb	r3, [r7, #7]
 800870c:	429a      	cmp	r2, r3
 800870e:	d3d3      	bcc.n	80086b8 <IntToUnicode+0x18>
  }
}
 8008710:	bf00      	nop
 8008712:	bf00      	nop
 8008714:	371c      	adds	r7, #28
 8008716:	46bd      	mov	sp, r7
 8008718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871c:	4770      	bx	lr
	...

08008720 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008720:	b580      	push	{r7, lr}
 8008722:	b08a      	sub	sp, #40	@ 0x28
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008728:	f107 0314 	add.w	r3, r7, #20
 800872c:	2200      	movs	r2, #0
 800872e:	601a      	str	r2, [r3, #0]
 8008730:	605a      	str	r2, [r3, #4]
 8008732:	609a      	str	r2, [r3, #8]
 8008734:	60da      	str	r2, [r3, #12]
 8008736:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008740:	d13a      	bne.n	80087b8 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008742:	2300      	movs	r3, #0
 8008744:	613b      	str	r3, [r7, #16]
 8008746:	4b1e      	ldr	r3, [pc, #120]	@ (80087c0 <HAL_PCD_MspInit+0xa0>)
 8008748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800874a:	4a1d      	ldr	r2, [pc, #116]	@ (80087c0 <HAL_PCD_MspInit+0xa0>)
 800874c:	f043 0301 	orr.w	r3, r3, #1
 8008750:	6313      	str	r3, [r2, #48]	@ 0x30
 8008752:	4b1b      	ldr	r3, [pc, #108]	@ (80087c0 <HAL_PCD_MspInit+0xa0>)
 8008754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008756:	f003 0301 	and.w	r3, r3, #1
 800875a:	613b      	str	r3, [r7, #16]
 800875c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800875e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8008762:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008764:	2302      	movs	r3, #2
 8008766:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008768:	2300      	movs	r3, #0
 800876a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800876c:	2303      	movs	r3, #3
 800876e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008770:	230a      	movs	r3, #10
 8008772:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008774:	f107 0314 	add.w	r3, r7, #20
 8008778:	4619      	mov	r1, r3
 800877a:	4812      	ldr	r0, [pc, #72]	@ (80087c4 <HAL_PCD_MspInit+0xa4>)
 800877c:	f7f8 face 	bl	8000d1c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008780:	4b0f      	ldr	r3, [pc, #60]	@ (80087c0 <HAL_PCD_MspInit+0xa0>)
 8008782:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008784:	4a0e      	ldr	r2, [pc, #56]	@ (80087c0 <HAL_PCD_MspInit+0xa0>)
 8008786:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800878a:	6353      	str	r3, [r2, #52]	@ 0x34
 800878c:	2300      	movs	r3, #0
 800878e:	60fb      	str	r3, [r7, #12]
 8008790:	4b0b      	ldr	r3, [pc, #44]	@ (80087c0 <HAL_PCD_MspInit+0xa0>)
 8008792:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008794:	4a0a      	ldr	r2, [pc, #40]	@ (80087c0 <HAL_PCD_MspInit+0xa0>)
 8008796:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800879a:	6453      	str	r3, [r2, #68]	@ 0x44
 800879c:	4b08      	ldr	r3, [pc, #32]	@ (80087c0 <HAL_PCD_MspInit+0xa0>)
 800879e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80087a0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80087a4:	60fb      	str	r3, [r7, #12]
 80087a6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 80087a8:	2200      	movs	r2, #0
 80087aa:	2105      	movs	r1, #5
 80087ac:	2043      	movs	r0, #67	@ 0x43
 80087ae:	f7f8 fa8b 	bl	8000cc8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80087b2:	2043      	movs	r0, #67	@ 0x43
 80087b4:	f7f8 faa4 	bl	8000d00 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80087b8:	bf00      	nop
 80087ba:	3728      	adds	r7, #40	@ 0x28
 80087bc:	46bd      	mov	sp, r7
 80087be:	bd80      	pop	{r7, pc}
 80087c0:	40023800 	.word	0x40023800
 80087c4:	40020000 	.word	0x40020000

080087c8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b082      	sub	sp, #8
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80087dc:	4619      	mov	r1, r3
 80087de:	4610      	mov	r0, r2
 80087e0:	f7fc fec7 	bl	8005572 <USBD_LL_SetupStage>
}
 80087e4:	bf00      	nop
 80087e6:	3708      	adds	r7, #8
 80087e8:	46bd      	mov	sp, r7
 80087ea:	bd80      	pop	{r7, pc}

080087ec <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b082      	sub	sp, #8
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
 80087f4:	460b      	mov	r3, r1
 80087f6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80087fe:	78fa      	ldrb	r2, [r7, #3]
 8008800:	6879      	ldr	r1, [r7, #4]
 8008802:	4613      	mov	r3, r2
 8008804:	00db      	lsls	r3, r3, #3
 8008806:	4413      	add	r3, r2
 8008808:	009b      	lsls	r3, r3, #2
 800880a:	440b      	add	r3, r1
 800880c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8008810:	681a      	ldr	r2, [r3, #0]
 8008812:	78fb      	ldrb	r3, [r7, #3]
 8008814:	4619      	mov	r1, r3
 8008816:	f7fc ff01 	bl	800561c <USBD_LL_DataOutStage>
}
 800881a:	bf00      	nop
 800881c:	3708      	adds	r7, #8
 800881e:	46bd      	mov	sp, r7
 8008820:	bd80      	pop	{r7, pc}

08008822 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008822:	b580      	push	{r7, lr}
 8008824:	b082      	sub	sp, #8
 8008826:	af00      	add	r7, sp, #0
 8008828:	6078      	str	r0, [r7, #4]
 800882a:	460b      	mov	r3, r1
 800882c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8008834:	78fa      	ldrb	r2, [r7, #3]
 8008836:	6879      	ldr	r1, [r7, #4]
 8008838:	4613      	mov	r3, r2
 800883a:	00db      	lsls	r3, r3, #3
 800883c:	4413      	add	r3, r2
 800883e:	009b      	lsls	r3, r3, #2
 8008840:	440b      	add	r3, r1
 8008842:	3320      	adds	r3, #32
 8008844:	681a      	ldr	r2, [r3, #0]
 8008846:	78fb      	ldrb	r3, [r7, #3]
 8008848:	4619      	mov	r1, r3
 800884a:	f7fc ff9a 	bl	8005782 <USBD_LL_DataInStage>
}
 800884e:	bf00      	nop
 8008850:	3708      	adds	r7, #8
 8008852:	46bd      	mov	sp, r7
 8008854:	bd80      	pop	{r7, pc}

08008856 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008856:	b580      	push	{r7, lr}
 8008858:	b082      	sub	sp, #8
 800885a:	af00      	add	r7, sp, #0
 800885c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008864:	4618      	mov	r0, r3
 8008866:	f7fd f8d4 	bl	8005a12 <USBD_LL_SOF>
}
 800886a:	bf00      	nop
 800886c:	3708      	adds	r7, #8
 800886e:	46bd      	mov	sp, r7
 8008870:	bd80      	pop	{r7, pc}

08008872 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008872:	b580      	push	{r7, lr}
 8008874:	b084      	sub	sp, #16
 8008876:	af00      	add	r7, sp, #0
 8008878:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800887a:	2301      	movs	r3, #1
 800887c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	79db      	ldrb	r3, [r3, #7]
 8008882:	2b00      	cmp	r3, #0
 8008884:	d102      	bne.n	800888c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8008886:	2300      	movs	r3, #0
 8008888:	73fb      	strb	r3, [r7, #15]
 800888a:	e008      	b.n	800889e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	79db      	ldrb	r3, [r3, #7]
 8008890:	2b02      	cmp	r3, #2
 8008892:	d102      	bne.n	800889a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8008894:	2301      	movs	r3, #1
 8008896:	73fb      	strb	r3, [r7, #15]
 8008898:	e001      	b.n	800889e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800889a:	f7f7 ffdd 	bl	8000858 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80088a4:	7bfa      	ldrb	r2, [r7, #15]
 80088a6:	4611      	mov	r1, r2
 80088a8:	4618      	mov	r0, r3
 80088aa:	f7fd f86e 	bl	800598a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80088b4:	4618      	mov	r0, r3
 80088b6:	f7fd f816 	bl	80058e6 <USBD_LL_Reset>
}
 80088ba:	bf00      	nop
 80088bc:	3710      	adds	r7, #16
 80088be:	46bd      	mov	sp, r7
 80088c0:	bd80      	pop	{r7, pc}
	...

080088c4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b082      	sub	sp, #8
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80088d2:	4618      	mov	r0, r3
 80088d4:	f7fd f869 	bl	80059aa <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	687a      	ldr	r2, [r7, #4]
 80088e4:	6812      	ldr	r2, [r2, #0]
 80088e6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80088ea:	f043 0301 	orr.w	r3, r3, #1
 80088ee:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	7adb      	ldrb	r3, [r3, #11]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d005      	beq.n	8008904 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80088f8:	4b04      	ldr	r3, [pc, #16]	@ (800890c <HAL_PCD_SuspendCallback+0x48>)
 80088fa:	691b      	ldr	r3, [r3, #16]
 80088fc:	4a03      	ldr	r2, [pc, #12]	@ (800890c <HAL_PCD_SuspendCallback+0x48>)
 80088fe:	f043 0306 	orr.w	r3, r3, #6
 8008902:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008904:	bf00      	nop
 8008906:	3708      	adds	r7, #8
 8008908:	46bd      	mov	sp, r7
 800890a:	bd80      	pop	{r7, pc}
 800890c:	e000ed00 	.word	0xe000ed00

08008910 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008910:	b580      	push	{r7, lr}
 8008912:	b082      	sub	sp, #8
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800891e:	4618      	mov	r0, r3
 8008920:	f7fd f85f 	bl	80059e2 <USBD_LL_Resume>
}
 8008924:	bf00      	nop
 8008926:	3708      	adds	r7, #8
 8008928:	46bd      	mov	sp, r7
 800892a:	bd80      	pop	{r7, pc}

0800892c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800892c:	b580      	push	{r7, lr}
 800892e:	b082      	sub	sp, #8
 8008930:	af00      	add	r7, sp, #0
 8008932:	6078      	str	r0, [r7, #4]
 8008934:	460b      	mov	r3, r1
 8008936:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800893e:	78fa      	ldrb	r2, [r7, #3]
 8008940:	4611      	mov	r1, r2
 8008942:	4618      	mov	r0, r3
 8008944:	f7fd f8b7 	bl	8005ab6 <USBD_LL_IsoOUTIncomplete>
}
 8008948:	bf00      	nop
 800894a:	3708      	adds	r7, #8
 800894c:	46bd      	mov	sp, r7
 800894e:	bd80      	pop	{r7, pc}

08008950 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008950:	b580      	push	{r7, lr}
 8008952:	b082      	sub	sp, #8
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
 8008958:	460b      	mov	r3, r1
 800895a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008962:	78fa      	ldrb	r2, [r7, #3]
 8008964:	4611      	mov	r1, r2
 8008966:	4618      	mov	r0, r3
 8008968:	f7fd f873 	bl	8005a52 <USBD_LL_IsoINIncomplete>
}
 800896c:	bf00      	nop
 800896e:	3708      	adds	r7, #8
 8008970:	46bd      	mov	sp, r7
 8008972:	bd80      	pop	{r7, pc}

08008974 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008974:	b580      	push	{r7, lr}
 8008976:	b082      	sub	sp, #8
 8008978:	af00      	add	r7, sp, #0
 800897a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008982:	4618      	mov	r0, r3
 8008984:	f7fd f8c9 	bl	8005b1a <USBD_LL_DevConnected>
}
 8008988:	bf00      	nop
 800898a:	3708      	adds	r7, #8
 800898c:	46bd      	mov	sp, r7
 800898e:	bd80      	pop	{r7, pc}

08008990 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008990:	b580      	push	{r7, lr}
 8008992:	b082      	sub	sp, #8
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800899e:	4618      	mov	r0, r3
 80089a0:	f7fd f8c6 	bl	8005b30 <USBD_LL_DevDisconnected>
}
 80089a4:	bf00      	nop
 80089a6:	3708      	adds	r7, #8
 80089a8:	46bd      	mov	sp, r7
 80089aa:	bd80      	pop	{r7, pc}

080089ac <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80089ac:	b580      	push	{r7, lr}
 80089ae:	b082      	sub	sp, #8
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	781b      	ldrb	r3, [r3, #0]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d13c      	bne.n	8008a36 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80089bc:	4a20      	ldr	r2, [pc, #128]	@ (8008a40 <USBD_LL_Init+0x94>)
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	4a1e      	ldr	r2, [pc, #120]	@ (8008a40 <USBD_LL_Init+0x94>)
 80089c8:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80089cc:	4b1c      	ldr	r3, [pc, #112]	@ (8008a40 <USBD_LL_Init+0x94>)
 80089ce:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80089d2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80089d4:	4b1a      	ldr	r3, [pc, #104]	@ (8008a40 <USBD_LL_Init+0x94>)
 80089d6:	2204      	movs	r2, #4
 80089d8:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80089da:	4b19      	ldr	r3, [pc, #100]	@ (8008a40 <USBD_LL_Init+0x94>)
 80089dc:	2202      	movs	r2, #2
 80089de:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80089e0:	4b17      	ldr	r3, [pc, #92]	@ (8008a40 <USBD_LL_Init+0x94>)
 80089e2:	2200      	movs	r2, #0
 80089e4:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80089e6:	4b16      	ldr	r3, [pc, #88]	@ (8008a40 <USBD_LL_Init+0x94>)
 80089e8:	2202      	movs	r2, #2
 80089ea:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80089ec:	4b14      	ldr	r3, [pc, #80]	@ (8008a40 <USBD_LL_Init+0x94>)
 80089ee:	2200      	movs	r2, #0
 80089f0:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80089f2:	4b13      	ldr	r3, [pc, #76]	@ (8008a40 <USBD_LL_Init+0x94>)
 80089f4:	2200      	movs	r2, #0
 80089f6:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80089f8:	4b11      	ldr	r3, [pc, #68]	@ (8008a40 <USBD_LL_Init+0x94>)
 80089fa:	2200      	movs	r2, #0
 80089fc:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80089fe:	4b10      	ldr	r3, [pc, #64]	@ (8008a40 <USBD_LL_Init+0x94>)
 8008a00:	2200      	movs	r2, #0
 8008a02:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008a04:	4b0e      	ldr	r3, [pc, #56]	@ (8008a40 <USBD_LL_Init+0x94>)
 8008a06:	2200      	movs	r2, #0
 8008a08:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008a0a:	480d      	ldr	r0, [pc, #52]	@ (8008a40 <USBD_LL_Init+0x94>)
 8008a0c:	f7f8 fb3b 	bl	8001086 <HAL_PCD_Init>
 8008a10:	4603      	mov	r3, r0
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d001      	beq.n	8008a1a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008a16:	f7f7 ff1f 	bl	8000858 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008a1a:	2180      	movs	r1, #128	@ 0x80
 8008a1c:	4808      	ldr	r0, [pc, #32]	@ (8008a40 <USBD_LL_Init+0x94>)
 8008a1e:	f7f9 fd68 	bl	80024f2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008a22:	2240      	movs	r2, #64	@ 0x40
 8008a24:	2100      	movs	r1, #0
 8008a26:	4806      	ldr	r0, [pc, #24]	@ (8008a40 <USBD_LL_Init+0x94>)
 8008a28:	f7f9 fd1c 	bl	8002464 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008a2c:	2280      	movs	r2, #128	@ 0x80
 8008a2e:	2101      	movs	r1, #1
 8008a30:	4803      	ldr	r0, [pc, #12]	@ (8008a40 <USBD_LL_Init+0x94>)
 8008a32:	f7f9 fd17 	bl	8002464 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008a36:	2300      	movs	r3, #0
}
 8008a38:	4618      	mov	r0, r3
 8008a3a:	3708      	adds	r7, #8
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	bd80      	pop	{r7, pc}
 8008a40:	2000569c 	.word	0x2000569c

08008a44 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b084      	sub	sp, #16
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a50:	2300      	movs	r3, #0
 8008a52:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	f7f8 fc22 	bl	80012a4 <HAL_PCD_Start>
 8008a60:	4603      	mov	r3, r0
 8008a62:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a64:	7bfb      	ldrb	r3, [r7, #15]
 8008a66:	4618      	mov	r0, r3
 8008a68:	f000 f942 	bl	8008cf0 <USBD_Get_USB_Status>
 8008a6c:	4603      	mov	r3, r0
 8008a6e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a70:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a72:	4618      	mov	r0, r3
 8008a74:	3710      	adds	r7, #16
 8008a76:	46bd      	mov	sp, r7
 8008a78:	bd80      	pop	{r7, pc}

08008a7a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008a7a:	b580      	push	{r7, lr}
 8008a7c:	b084      	sub	sp, #16
 8008a7e:	af00      	add	r7, sp, #0
 8008a80:	6078      	str	r0, [r7, #4]
 8008a82:	4608      	mov	r0, r1
 8008a84:	4611      	mov	r1, r2
 8008a86:	461a      	mov	r2, r3
 8008a88:	4603      	mov	r3, r0
 8008a8a:	70fb      	strb	r3, [r7, #3]
 8008a8c:	460b      	mov	r3, r1
 8008a8e:	70bb      	strb	r3, [r7, #2]
 8008a90:	4613      	mov	r3, r2
 8008a92:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a94:	2300      	movs	r3, #0
 8008a96:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a98:	2300      	movs	r3, #0
 8008a9a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008aa2:	78bb      	ldrb	r3, [r7, #2]
 8008aa4:	883a      	ldrh	r2, [r7, #0]
 8008aa6:	78f9      	ldrb	r1, [r7, #3]
 8008aa8:	f7f9 f8f6 	bl	8001c98 <HAL_PCD_EP_Open>
 8008aac:	4603      	mov	r3, r0
 8008aae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ab0:	7bfb      	ldrb	r3, [r7, #15]
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	f000 f91c 	bl	8008cf0 <USBD_Get_USB_Status>
 8008ab8:	4603      	mov	r3, r0
 8008aba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008abc:	7bbb      	ldrb	r3, [r7, #14]
}
 8008abe:	4618      	mov	r0, r3
 8008ac0:	3710      	adds	r7, #16
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	bd80      	pop	{r7, pc}

08008ac6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008ac6:	b580      	push	{r7, lr}
 8008ac8:	b084      	sub	sp, #16
 8008aca:	af00      	add	r7, sp, #0
 8008acc:	6078      	str	r0, [r7, #4]
 8008ace:	460b      	mov	r3, r1
 8008ad0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ad6:	2300      	movs	r3, #0
 8008ad8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008ae0:	78fa      	ldrb	r2, [r7, #3]
 8008ae2:	4611      	mov	r1, r2
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	f7f9 f941 	bl	8001d6c <HAL_PCD_EP_Close>
 8008aea:	4603      	mov	r3, r0
 8008aec:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008aee:	7bfb      	ldrb	r3, [r7, #15]
 8008af0:	4618      	mov	r0, r3
 8008af2:	f000 f8fd 	bl	8008cf0 <USBD_Get_USB_Status>
 8008af6:	4603      	mov	r3, r0
 8008af8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008afa:	7bbb      	ldrb	r3, [r7, #14]
}
 8008afc:	4618      	mov	r0, r3
 8008afe:	3710      	adds	r7, #16
 8008b00:	46bd      	mov	sp, r7
 8008b02:	bd80      	pop	{r7, pc}

08008b04 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008b04:	b580      	push	{r7, lr}
 8008b06:	b084      	sub	sp, #16
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
 8008b0c:	460b      	mov	r3, r1
 8008b0e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b10:	2300      	movs	r3, #0
 8008b12:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b14:	2300      	movs	r3, #0
 8008b16:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008b1e:	78fa      	ldrb	r2, [r7, #3]
 8008b20:	4611      	mov	r1, r2
 8008b22:	4618      	mov	r0, r3
 8008b24:	f7f9 f9f9 	bl	8001f1a <HAL_PCD_EP_SetStall>
 8008b28:	4603      	mov	r3, r0
 8008b2a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b2c:	7bfb      	ldrb	r3, [r7, #15]
 8008b2e:	4618      	mov	r0, r3
 8008b30:	f000 f8de 	bl	8008cf0 <USBD_Get_USB_Status>
 8008b34:	4603      	mov	r3, r0
 8008b36:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b38:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	3710      	adds	r7, #16
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	bd80      	pop	{r7, pc}

08008b42 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008b42:	b580      	push	{r7, lr}
 8008b44:	b084      	sub	sp, #16
 8008b46:	af00      	add	r7, sp, #0
 8008b48:	6078      	str	r0, [r7, #4]
 8008b4a:	460b      	mov	r3, r1
 8008b4c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b4e:	2300      	movs	r3, #0
 8008b50:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b52:	2300      	movs	r3, #0
 8008b54:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008b5c:	78fa      	ldrb	r2, [r7, #3]
 8008b5e:	4611      	mov	r1, r2
 8008b60:	4618      	mov	r0, r3
 8008b62:	f7f9 fa3d 	bl	8001fe0 <HAL_PCD_EP_ClrStall>
 8008b66:	4603      	mov	r3, r0
 8008b68:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b6a:	7bfb      	ldrb	r3, [r7, #15]
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	f000 f8bf 	bl	8008cf0 <USBD_Get_USB_Status>
 8008b72:	4603      	mov	r3, r0
 8008b74:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b76:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b78:	4618      	mov	r0, r3
 8008b7a:	3710      	adds	r7, #16
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	bd80      	pop	{r7, pc}

08008b80 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008b80:	b480      	push	{r7}
 8008b82:	b085      	sub	sp, #20
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]
 8008b88:	460b      	mov	r3, r1
 8008b8a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008b92:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008b94:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	da0b      	bge.n	8008bb4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008b9c:	78fb      	ldrb	r3, [r7, #3]
 8008b9e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008ba2:	68f9      	ldr	r1, [r7, #12]
 8008ba4:	4613      	mov	r3, r2
 8008ba6:	00db      	lsls	r3, r3, #3
 8008ba8:	4413      	add	r3, r2
 8008baa:	009b      	lsls	r3, r3, #2
 8008bac:	440b      	add	r3, r1
 8008bae:	3316      	adds	r3, #22
 8008bb0:	781b      	ldrb	r3, [r3, #0]
 8008bb2:	e00b      	b.n	8008bcc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008bb4:	78fb      	ldrb	r3, [r7, #3]
 8008bb6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008bba:	68f9      	ldr	r1, [r7, #12]
 8008bbc:	4613      	mov	r3, r2
 8008bbe:	00db      	lsls	r3, r3, #3
 8008bc0:	4413      	add	r3, r2
 8008bc2:	009b      	lsls	r3, r3, #2
 8008bc4:	440b      	add	r3, r1
 8008bc6:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8008bca:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008bcc:	4618      	mov	r0, r3
 8008bce:	3714      	adds	r7, #20
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd6:	4770      	bx	lr

08008bd8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008bd8:	b580      	push	{r7, lr}
 8008bda:	b084      	sub	sp, #16
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	6078      	str	r0, [r7, #4]
 8008be0:	460b      	mov	r3, r1
 8008be2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008be4:	2300      	movs	r3, #0
 8008be6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008be8:	2300      	movs	r3, #0
 8008bea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008bf2:	78fa      	ldrb	r2, [r7, #3]
 8008bf4:	4611      	mov	r1, r2
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	f7f9 f82a 	bl	8001c50 <HAL_PCD_SetAddress>
 8008bfc:	4603      	mov	r3, r0
 8008bfe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c00:	7bfb      	ldrb	r3, [r7, #15]
 8008c02:	4618      	mov	r0, r3
 8008c04:	f000 f874 	bl	8008cf0 <USBD_Get_USB_Status>
 8008c08:	4603      	mov	r3, r0
 8008c0a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c0c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c0e:	4618      	mov	r0, r3
 8008c10:	3710      	adds	r7, #16
 8008c12:	46bd      	mov	sp, r7
 8008c14:	bd80      	pop	{r7, pc}

08008c16 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008c16:	b580      	push	{r7, lr}
 8008c18:	b086      	sub	sp, #24
 8008c1a:	af00      	add	r7, sp, #0
 8008c1c:	60f8      	str	r0, [r7, #12]
 8008c1e:	607a      	str	r2, [r7, #4]
 8008c20:	603b      	str	r3, [r7, #0]
 8008c22:	460b      	mov	r3, r1
 8008c24:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c26:	2300      	movs	r3, #0
 8008c28:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008c34:	7af9      	ldrb	r1, [r7, #11]
 8008c36:	683b      	ldr	r3, [r7, #0]
 8008c38:	687a      	ldr	r2, [r7, #4]
 8008c3a:	f7f9 f934 	bl	8001ea6 <HAL_PCD_EP_Transmit>
 8008c3e:	4603      	mov	r3, r0
 8008c40:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c42:	7dfb      	ldrb	r3, [r7, #23]
 8008c44:	4618      	mov	r0, r3
 8008c46:	f000 f853 	bl	8008cf0 <USBD_Get_USB_Status>
 8008c4a:	4603      	mov	r3, r0
 8008c4c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008c4e:	7dbb      	ldrb	r3, [r7, #22]
}
 8008c50:	4618      	mov	r0, r3
 8008c52:	3718      	adds	r7, #24
 8008c54:	46bd      	mov	sp, r7
 8008c56:	bd80      	pop	{r7, pc}

08008c58 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b086      	sub	sp, #24
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	60f8      	str	r0, [r7, #12]
 8008c60:	607a      	str	r2, [r7, #4]
 8008c62:	603b      	str	r3, [r7, #0]
 8008c64:	460b      	mov	r3, r1
 8008c66:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c68:	2300      	movs	r3, #0
 8008c6a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008c76:	7af9      	ldrb	r1, [r7, #11]
 8008c78:	683b      	ldr	r3, [r7, #0]
 8008c7a:	687a      	ldr	r2, [r7, #4]
 8008c7c:	f7f9 f8c0 	bl	8001e00 <HAL_PCD_EP_Receive>
 8008c80:	4603      	mov	r3, r0
 8008c82:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c84:	7dfb      	ldrb	r3, [r7, #23]
 8008c86:	4618      	mov	r0, r3
 8008c88:	f000 f832 	bl	8008cf0 <USBD_Get_USB_Status>
 8008c8c:	4603      	mov	r3, r0
 8008c8e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008c90:	7dbb      	ldrb	r3, [r7, #22]
}
 8008c92:	4618      	mov	r0, r3
 8008c94:	3718      	adds	r7, #24
 8008c96:	46bd      	mov	sp, r7
 8008c98:	bd80      	pop	{r7, pc}

08008c9a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008c9a:	b580      	push	{r7, lr}
 8008c9c:	b082      	sub	sp, #8
 8008c9e:	af00      	add	r7, sp, #0
 8008ca0:	6078      	str	r0, [r7, #4]
 8008ca2:	460b      	mov	r3, r1
 8008ca4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008cac:	78fa      	ldrb	r2, [r7, #3]
 8008cae:	4611      	mov	r1, r2
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	f7f9 f8e0 	bl	8001e76 <HAL_PCD_EP_GetRxCount>
 8008cb6:	4603      	mov	r3, r0
}
 8008cb8:	4618      	mov	r0, r3
 8008cba:	3708      	adds	r7, #8
 8008cbc:	46bd      	mov	sp, r7
 8008cbe:	bd80      	pop	{r7, pc}

08008cc0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008cc0:	b480      	push	{r7}
 8008cc2:	b083      	sub	sp, #12
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008cc8:	4b03      	ldr	r3, [pc, #12]	@ (8008cd8 <USBD_static_malloc+0x18>)
}
 8008cca:	4618      	mov	r0, r3
 8008ccc:	370c      	adds	r7, #12
 8008cce:	46bd      	mov	sp, r7
 8008cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd4:	4770      	bx	lr
 8008cd6:	bf00      	nop
 8008cd8:	20005b80 	.word	0x20005b80

08008cdc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008cdc:	b480      	push	{r7}
 8008cde:	b083      	sub	sp, #12
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	6078      	str	r0, [r7, #4]

}
 8008ce4:	bf00      	nop
 8008ce6:	370c      	adds	r7, #12
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cee:	4770      	bx	lr

08008cf0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008cf0:	b480      	push	{r7}
 8008cf2:	b085      	sub	sp, #20
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	4603      	mov	r3, r0
 8008cf8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008cfe:	79fb      	ldrb	r3, [r7, #7]
 8008d00:	2b03      	cmp	r3, #3
 8008d02:	d817      	bhi.n	8008d34 <USBD_Get_USB_Status+0x44>
 8008d04:	a201      	add	r2, pc, #4	@ (adr r2, 8008d0c <USBD_Get_USB_Status+0x1c>)
 8008d06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d0a:	bf00      	nop
 8008d0c:	08008d1d 	.word	0x08008d1d
 8008d10:	08008d23 	.word	0x08008d23
 8008d14:	08008d29 	.word	0x08008d29
 8008d18:	08008d2f 	.word	0x08008d2f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	73fb      	strb	r3, [r7, #15]
    break;
 8008d20:	e00b      	b.n	8008d3a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008d22:	2303      	movs	r3, #3
 8008d24:	73fb      	strb	r3, [r7, #15]
    break;
 8008d26:	e008      	b.n	8008d3a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008d28:	2301      	movs	r3, #1
 8008d2a:	73fb      	strb	r3, [r7, #15]
    break;
 8008d2c:	e005      	b.n	8008d3a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008d2e:	2303      	movs	r3, #3
 8008d30:	73fb      	strb	r3, [r7, #15]
    break;
 8008d32:	e002      	b.n	8008d3a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008d34:	2303      	movs	r3, #3
 8008d36:	73fb      	strb	r3, [r7, #15]
    break;
 8008d38:	bf00      	nop
  }
  return usb_status;
 8008d3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	3714      	adds	r7, #20
 8008d40:	46bd      	mov	sp, r7
 8008d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d46:	4770      	bx	lr

08008d48 <memset>:
 8008d48:	4402      	add	r2, r0
 8008d4a:	4603      	mov	r3, r0
 8008d4c:	4293      	cmp	r3, r2
 8008d4e:	d100      	bne.n	8008d52 <memset+0xa>
 8008d50:	4770      	bx	lr
 8008d52:	f803 1b01 	strb.w	r1, [r3], #1
 8008d56:	e7f9      	b.n	8008d4c <memset+0x4>

08008d58 <_reclaim_reent>:
 8008d58:	4b29      	ldr	r3, [pc, #164]	@ (8008e00 <_reclaim_reent+0xa8>)
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	4283      	cmp	r3, r0
 8008d5e:	b570      	push	{r4, r5, r6, lr}
 8008d60:	4604      	mov	r4, r0
 8008d62:	d04b      	beq.n	8008dfc <_reclaim_reent+0xa4>
 8008d64:	69c3      	ldr	r3, [r0, #28]
 8008d66:	b1ab      	cbz	r3, 8008d94 <_reclaim_reent+0x3c>
 8008d68:	68db      	ldr	r3, [r3, #12]
 8008d6a:	b16b      	cbz	r3, 8008d88 <_reclaim_reent+0x30>
 8008d6c:	2500      	movs	r5, #0
 8008d6e:	69e3      	ldr	r3, [r4, #28]
 8008d70:	68db      	ldr	r3, [r3, #12]
 8008d72:	5959      	ldr	r1, [r3, r5]
 8008d74:	2900      	cmp	r1, #0
 8008d76:	d13b      	bne.n	8008df0 <_reclaim_reent+0x98>
 8008d78:	3504      	adds	r5, #4
 8008d7a:	2d80      	cmp	r5, #128	@ 0x80
 8008d7c:	d1f7      	bne.n	8008d6e <_reclaim_reent+0x16>
 8008d7e:	69e3      	ldr	r3, [r4, #28]
 8008d80:	4620      	mov	r0, r4
 8008d82:	68d9      	ldr	r1, [r3, #12]
 8008d84:	f000 f864 	bl	8008e50 <_free_r>
 8008d88:	69e3      	ldr	r3, [r4, #28]
 8008d8a:	6819      	ldr	r1, [r3, #0]
 8008d8c:	b111      	cbz	r1, 8008d94 <_reclaim_reent+0x3c>
 8008d8e:	4620      	mov	r0, r4
 8008d90:	f000 f85e 	bl	8008e50 <_free_r>
 8008d94:	6961      	ldr	r1, [r4, #20]
 8008d96:	b111      	cbz	r1, 8008d9e <_reclaim_reent+0x46>
 8008d98:	4620      	mov	r0, r4
 8008d9a:	f000 f859 	bl	8008e50 <_free_r>
 8008d9e:	69e1      	ldr	r1, [r4, #28]
 8008da0:	b111      	cbz	r1, 8008da8 <_reclaim_reent+0x50>
 8008da2:	4620      	mov	r0, r4
 8008da4:	f000 f854 	bl	8008e50 <_free_r>
 8008da8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8008daa:	b111      	cbz	r1, 8008db2 <_reclaim_reent+0x5a>
 8008dac:	4620      	mov	r0, r4
 8008dae:	f000 f84f 	bl	8008e50 <_free_r>
 8008db2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008db4:	b111      	cbz	r1, 8008dbc <_reclaim_reent+0x64>
 8008db6:	4620      	mov	r0, r4
 8008db8:	f000 f84a 	bl	8008e50 <_free_r>
 8008dbc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8008dbe:	b111      	cbz	r1, 8008dc6 <_reclaim_reent+0x6e>
 8008dc0:	4620      	mov	r0, r4
 8008dc2:	f000 f845 	bl	8008e50 <_free_r>
 8008dc6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8008dc8:	b111      	cbz	r1, 8008dd0 <_reclaim_reent+0x78>
 8008dca:	4620      	mov	r0, r4
 8008dcc:	f000 f840 	bl	8008e50 <_free_r>
 8008dd0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8008dd2:	b111      	cbz	r1, 8008dda <_reclaim_reent+0x82>
 8008dd4:	4620      	mov	r0, r4
 8008dd6:	f000 f83b 	bl	8008e50 <_free_r>
 8008dda:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8008ddc:	b111      	cbz	r1, 8008de4 <_reclaim_reent+0x8c>
 8008dde:	4620      	mov	r0, r4
 8008de0:	f000 f836 	bl	8008e50 <_free_r>
 8008de4:	6a23      	ldr	r3, [r4, #32]
 8008de6:	b14b      	cbz	r3, 8008dfc <_reclaim_reent+0xa4>
 8008de8:	4620      	mov	r0, r4
 8008dea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008dee:	4718      	bx	r3
 8008df0:	680e      	ldr	r6, [r1, #0]
 8008df2:	4620      	mov	r0, r4
 8008df4:	f000 f82c 	bl	8008e50 <_free_r>
 8008df8:	4631      	mov	r1, r6
 8008dfa:	e7bb      	b.n	8008d74 <_reclaim_reent+0x1c>
 8008dfc:	bd70      	pop	{r4, r5, r6, pc}
 8008dfe:	bf00      	nop
 8008e00:	20000100 	.word	0x20000100

08008e04 <__libc_init_array>:
 8008e04:	b570      	push	{r4, r5, r6, lr}
 8008e06:	4d0d      	ldr	r5, [pc, #52]	@ (8008e3c <__libc_init_array+0x38>)
 8008e08:	4c0d      	ldr	r4, [pc, #52]	@ (8008e40 <__libc_init_array+0x3c>)
 8008e0a:	1b64      	subs	r4, r4, r5
 8008e0c:	10a4      	asrs	r4, r4, #2
 8008e0e:	2600      	movs	r6, #0
 8008e10:	42a6      	cmp	r6, r4
 8008e12:	d109      	bne.n	8008e28 <__libc_init_array+0x24>
 8008e14:	4d0b      	ldr	r5, [pc, #44]	@ (8008e44 <__libc_init_array+0x40>)
 8008e16:	4c0c      	ldr	r4, [pc, #48]	@ (8008e48 <__libc_init_array+0x44>)
 8008e18:	f000 f870 	bl	8008efc <_init>
 8008e1c:	1b64      	subs	r4, r4, r5
 8008e1e:	10a4      	asrs	r4, r4, #2
 8008e20:	2600      	movs	r6, #0
 8008e22:	42a6      	cmp	r6, r4
 8008e24:	d105      	bne.n	8008e32 <__libc_init_array+0x2e>
 8008e26:	bd70      	pop	{r4, r5, r6, pc}
 8008e28:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e2c:	4798      	blx	r3
 8008e2e:	3601      	adds	r6, #1
 8008e30:	e7ee      	b.n	8008e10 <__libc_init_array+0xc>
 8008e32:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e36:	4798      	blx	r3
 8008e38:	3601      	adds	r6, #1
 8008e3a:	e7f2      	b.n	8008e22 <__libc_init_array+0x1e>
 8008e3c:	08008fe0 	.word	0x08008fe0
 8008e40:	08008fe0 	.word	0x08008fe0
 8008e44:	08008fe0 	.word	0x08008fe0
 8008e48:	08008fe4 	.word	0x08008fe4

08008e4c <__retarget_lock_acquire_recursive>:
 8008e4c:	4770      	bx	lr

08008e4e <__retarget_lock_release_recursive>:
 8008e4e:	4770      	bx	lr

08008e50 <_free_r>:
 8008e50:	b538      	push	{r3, r4, r5, lr}
 8008e52:	4605      	mov	r5, r0
 8008e54:	2900      	cmp	r1, #0
 8008e56:	d041      	beq.n	8008edc <_free_r+0x8c>
 8008e58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e5c:	1f0c      	subs	r4, r1, #4
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	bfb8      	it	lt
 8008e62:	18e4      	addlt	r4, r4, r3
 8008e64:	f000 f83e 	bl	8008ee4 <__malloc_lock>
 8008e68:	4a1d      	ldr	r2, [pc, #116]	@ (8008ee0 <_free_r+0x90>)
 8008e6a:	6813      	ldr	r3, [r2, #0]
 8008e6c:	b933      	cbnz	r3, 8008e7c <_free_r+0x2c>
 8008e6e:	6063      	str	r3, [r4, #4]
 8008e70:	6014      	str	r4, [r2, #0]
 8008e72:	4628      	mov	r0, r5
 8008e74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008e78:	f000 b83a 	b.w	8008ef0 <__malloc_unlock>
 8008e7c:	42a3      	cmp	r3, r4
 8008e7e:	d908      	bls.n	8008e92 <_free_r+0x42>
 8008e80:	6820      	ldr	r0, [r4, #0]
 8008e82:	1821      	adds	r1, r4, r0
 8008e84:	428b      	cmp	r3, r1
 8008e86:	bf01      	itttt	eq
 8008e88:	6819      	ldreq	r1, [r3, #0]
 8008e8a:	685b      	ldreq	r3, [r3, #4]
 8008e8c:	1809      	addeq	r1, r1, r0
 8008e8e:	6021      	streq	r1, [r4, #0]
 8008e90:	e7ed      	b.n	8008e6e <_free_r+0x1e>
 8008e92:	461a      	mov	r2, r3
 8008e94:	685b      	ldr	r3, [r3, #4]
 8008e96:	b10b      	cbz	r3, 8008e9c <_free_r+0x4c>
 8008e98:	42a3      	cmp	r3, r4
 8008e9a:	d9fa      	bls.n	8008e92 <_free_r+0x42>
 8008e9c:	6811      	ldr	r1, [r2, #0]
 8008e9e:	1850      	adds	r0, r2, r1
 8008ea0:	42a0      	cmp	r0, r4
 8008ea2:	d10b      	bne.n	8008ebc <_free_r+0x6c>
 8008ea4:	6820      	ldr	r0, [r4, #0]
 8008ea6:	4401      	add	r1, r0
 8008ea8:	1850      	adds	r0, r2, r1
 8008eaa:	4283      	cmp	r3, r0
 8008eac:	6011      	str	r1, [r2, #0]
 8008eae:	d1e0      	bne.n	8008e72 <_free_r+0x22>
 8008eb0:	6818      	ldr	r0, [r3, #0]
 8008eb2:	685b      	ldr	r3, [r3, #4]
 8008eb4:	6053      	str	r3, [r2, #4]
 8008eb6:	4408      	add	r0, r1
 8008eb8:	6010      	str	r0, [r2, #0]
 8008eba:	e7da      	b.n	8008e72 <_free_r+0x22>
 8008ebc:	d902      	bls.n	8008ec4 <_free_r+0x74>
 8008ebe:	230c      	movs	r3, #12
 8008ec0:	602b      	str	r3, [r5, #0]
 8008ec2:	e7d6      	b.n	8008e72 <_free_r+0x22>
 8008ec4:	6820      	ldr	r0, [r4, #0]
 8008ec6:	1821      	adds	r1, r4, r0
 8008ec8:	428b      	cmp	r3, r1
 8008eca:	bf04      	itt	eq
 8008ecc:	6819      	ldreq	r1, [r3, #0]
 8008ece:	685b      	ldreq	r3, [r3, #4]
 8008ed0:	6063      	str	r3, [r4, #4]
 8008ed2:	bf04      	itt	eq
 8008ed4:	1809      	addeq	r1, r1, r0
 8008ed6:	6021      	streq	r1, [r4, #0]
 8008ed8:	6054      	str	r4, [r2, #4]
 8008eda:	e7ca      	b.n	8008e72 <_free_r+0x22>
 8008edc:	bd38      	pop	{r3, r4, r5, pc}
 8008ede:	bf00      	nop
 8008ee0:	20005edc 	.word	0x20005edc

08008ee4 <__malloc_lock>:
 8008ee4:	4801      	ldr	r0, [pc, #4]	@ (8008eec <__malloc_lock+0x8>)
 8008ee6:	f7ff bfb1 	b.w	8008e4c <__retarget_lock_acquire_recursive>
 8008eea:	bf00      	nop
 8008eec:	20005ed8 	.word	0x20005ed8

08008ef0 <__malloc_unlock>:
 8008ef0:	4801      	ldr	r0, [pc, #4]	@ (8008ef8 <__malloc_unlock+0x8>)
 8008ef2:	f7ff bfac 	b.w	8008e4e <__retarget_lock_release_recursive>
 8008ef6:	bf00      	nop
 8008ef8:	20005ed8 	.word	0x20005ed8

08008efc <_init>:
 8008efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008efe:	bf00      	nop
 8008f00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f02:	bc08      	pop	{r3}
 8008f04:	469e      	mov	lr, r3
 8008f06:	4770      	bx	lr

08008f08 <_fini>:
 8008f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f0a:	bf00      	nop
 8008f0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f0e:	bc08      	pop	{r3}
 8008f10:	469e      	mov	lr, r3
 8008f12:	4770      	bx	lr
